[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, char):\n    # Your code here\n    result = []\n    i = 0\n    while i < len(string):\n        if string[i] != char:\n            result.append(string[i])\n        i += 1\n    return \"\".join(result)\n\n\n# Your code here", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str1,chr):\n    return str1[:str1.index(chr)] + str1[str1.index(chr)+1:]\n\n#assert remove_Occ(\"hello\",\"l\") == \"heo\"", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str, char):\n    i = 0\n    while i < len(str):\n        if str[i] != char:\n            break\n        i += 1\n    j = len(str) - 1\n    while j >= i and str[j] != char:\n        j -= 1\n    return str[i:j+1]\n    ", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, char):\n    if char in string:\n        string = string.replace(char, '')\n        if string[0] == char:\n            string = string[1:]\n        if string[-1] == char:\n            string = string[:-1]\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str1,char):\n    # your code goes here\n    return str1[:str1.index(char)+1] + str1[str1.index(char)+1:]\n\ndef remove_Occ(str1,char):\n    return str1[:str1.index(char)+1] + str1[str1.index(char)+1:]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string,char):\n    if char not in string:\n        return string\n    return string[0:string.index(char)]+string[string.index(char)+1:len(string)]", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(text, char):\n    return text[:text.index(char)] + text[text.index(char)+1:]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(text, char):\n    # Write your code here\n    return text[:text.index(char)] + text[text.index(char)+1:]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s,c):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, char):\n    # Your code here\n    return string[:string.find(char)] + string[string.find(char) + 1:]\n\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    # [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    m = len(matrix)\n    n = len(matrix[0])\n\n    sorted_array = [0] * n\n    sorted_array[0] = sum(matrix[0])\n\n    for i in range(1, m):\n        current_sum = sorted_array[n-1] + matrix[i][0]\n\n        for j in range(1, n):\n            current_sum += matrix[i][j]\n\n            if current_sum > sorted_array[j-1]:\n                sorted_array[j] = current_sum\n\n    return sorted(matrix, key=lambda x: x[0])\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(mat):\n    if not mat:\n        return mat\n    if len(mat) == 1:\n        return mat\n    middle = len(mat)//2\n    left = sort_matrix(mat[:middle])\n    right = sort_matrix(mat[middle:])\n    ret = []\n    for i, row in enumerate(left):\n        ret.append(row)\n        for j in range(i, len(row)):\n            ret[j][i] += ret[j][i-1]\n    for i in right:\n        ret.append(i)\n    return ret\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    if not matrix:\n        return matrix\n    sorted_matrix = []\n    for row in matrix:\n        sorted_row = sorted(row, reverse=True)\n        sorted_matrix.append(sorted_row)\n    return sorted_matrix", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # Sort the matrix in ascending order according to the sum of its rows\n    # (one row at a time)\n    # Then return the sorted matrix\n    res = []\n    for row in matrix:\n        row.sort()\n        res.append(row)\n    return res\n\n# --------------------------------------------------------------------------", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    res = []\n    for r in matrix:\n        s = 0\n        for i in range(len(r)):\n            s += r[i]\n        res.append([s,r])\n    res.sort()\n    return [[r[1][i] for r in res] for i in range(len(res[0]))]\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n# Naive solution\ndef sort_matrix(M):\n    def helper(M, i, j, min_value):\n        if i == j:\n            return\n        k = (M[i][j] - min_value) // 2\n        l, r = helper(M, i, k, min_value), helper(M, k+1, j, min_value)\n        return merge(l, r)\n\n    def merge(l, r):\n        return [[min(M[i][j], min(l[i], r[i])) for j in range(len(l[0]))] for i in range(len(l))]\n\n    return helper(M, 0, len(M[0]) - 1, min(M))\n\n\n# Trie solution\ndef sort_matrix(M):\n    m, n = len(M), len(M[0])\n\n    def build(M, arr):\n        if not M:\n            return arr\n        if not M[0]:\n            return [[e] for e in arr]\n        return [e+M[i][0] for e in arr] + [e for e in build(M[1:], arr)]\n\n    def sort(M):\n        if not M[0]:\n            return [[0]]\n        res = [[0]] + [sort(M[i+1:]) for i in range(n-1)]\n        return build(M, res)\n\n    return sort(M)", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # sort matrix rows by their sum\n    return sorted(matrix, key=lambda row: sum(row), reverse=True)\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(mat):\n    return sorted(mat, key=lambda x: sum(x), reverse=True)\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # write your code here\n    temp = []\n    for row in matrix:\n        sum_row = 0\n        for num in row:\n            sum_row += num\n        temp.append((sum_row, row))\n    temp.sort()\n    return [x[1] for x in temp]\n\n\n# +", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # Write your code here\n    rows = len(matrix)\n    if rows <= 1:\n        return matrix\n    for i in range(0, rows):\n        for j in range(i+1, rows):\n            if sum(matrix[i]) > sum(matrix[j]):\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n    return matrix\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\nfrom collections import defaultdict\ndef count_common(words):\n    words_and_count = defaultdict(int)\n    for word in words:\n        words_and_count[word] += 1\n    return words_and_count.items()", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    dict_of_words = {}\n    for word in words:\n        if word not in dict_of_words:\n            dict_of_words[word] = 0\n        dict_of_words[word] += 1\n\n    return [(word, dict_of_words[word]) for word in dict_of_words]\n\n\n# Test", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    \"\"\"\n    # the words in the dictionary\n    word_set = set(words)\n\n    # the count for each word\n    word_counts = {}\n\n    # iterate over the words\n    for word in word_set:\n        # if the word is not in the word_counts, set it's count to 1\n        if word not in word_counts:\n            word_counts[word] = 1\n        else:\n            # otherwise, increment its count\n            word_counts[word] += 1\n\n    # create an empty list to hold the results\n    results = []\n    # iterate over the word_counts dictionary\n    for word, count in word_counts.items():\n        # if the count is greater than the max count, append it to the list\n        if count > max(word_counts.values()):\n            results.append((word, count))\n\n    # return the results\n    return results\n\n\n# +\n# print(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))\n# print(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\"]))\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    words_counter = collections.Counter(words)\n    return words_counter.most_common(10)\n\n\n# test", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    Assumes words is a list of words.\n    Returns a list of tuples representing words and counts.\n    \"\"\"\n    words = sorted(words)\n    results = []\n    last_word = None\n    last_count = 0\n    for word in words:\n        if word == last_word:\n            count = last_count + 1\n        else:\n            count = 1\n        results.append((word, count))\n        last_word = word\n        last_count = count\n    return results\n\ndef test_count_common():\n    words = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']\n    assert count_common(words) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\ndef test_count_common_empty_list():\n    assert count_common([]) == []\n\ndef test_count_common_no_words():\n    assert count_common(None) == []\n\ndef test_count_common_nonlist():\n    assert count_common(1) == []\n\ndef test_count_common_with_duplicates():\n    assert count_common(['red','red','red','red']) == [('red', 4)]\n\ndef test_count_common_all_the_same():\n    assert count_common(['red']) == [('red', 1)]\n\ndef test_count_common_sorts():\n    words = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    # sort the words in alphabetical order\n    words.sort()\n    # create a dictionary\n    count_dict = {}\n    # iterate through each word\n    for word in words:\n        # increment the count of that word\n        if word in count_dict.keys():\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n    # return a list of tuples (word, count) in the most common words\n    return sorted(count_dict.items(), key=lambda item: item[1], reverse=True)\n\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    :param words: the list of words to count\n    :return: the most common words with their frequency\n    \"\"\"\n    d = defaultdict(lambda: 0)\n    for word in words:\n        d[word] += 1\n\n    # Convert the dict to a list of tuples of (word, frequency)\n    return [(k, v) for k, v in d.items() if v > 1]\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\n# my first version, at first i was trying to sort the words by the count, then i was trying to add each words in a new dictionary with a counter of the frequency of each words but it doesn't work so i decided to use a counter\ndef count_common(words):\n    counter = collections.Counter(words)\n    return sorted(counter.items(), key=lambda pair: pair[1], reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(word_list):\n    result = {}\n    for word in word_list:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return list(result.items())\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    word_counter = {}\n    for word in words:\n        if word in word_counter.keys():\n            word_counter[word] += 1\n        else:\n            word_counter[word] = 1\n    return sorted(word_counter.items(), key=operator.itemgetter(1), reverse=True)\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    return(a*b*c)\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(length,breadth,height):\n    return length*breadth*height\n\ndef test_find_Volume():\n    assert find_Volume(10,8,6) == 240\n\ndef test_find_Volume_2():\n    assert find_Volume(1,2,2) == 6\n    assert find_Volume(1,1,2) == 2\n    assert find_Volume(3,4,3) == 48\n    assert find_Volume(10,8,6) == 240\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,c):\n    return (1/3)*a*b*c\n\ndef test_Volume():\n    assert find_Volume(10,8,6) == 240\n    print(\"Test passed\")\n\ndef main():\n    test_Volume()\n\nmain()\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a, b, c):\n    \"\"\"\n    Function to calculate the volume of a triangular prism\n    \"\"\"\n    return a*b*c\n\n#Below is an example usage:\n\nimport math\n\ndef find_Volume(a, b, c):\n    \"\"\"\n    Function to calculate the volume of a triangular prism\n    \"\"\"\n    return a*b*c\n\n# Enter the dimensions of the\na = 10\nb = 8\nc = 6\n\n# Calling the function", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(l,b,h):\n    return l*b*h\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,c):\n    return 1/3*a*b*c\n#print(find_Volume(10,8,6))", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(h,b,l):\n    return (h*b*l)/3\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(length, breadth, height):\n    return length*breadth*height\n\n\n# The Volume of a Triangular Prism\n#\n#      height\n#  +---------+\n#  |        |\n#  |        |\n#  | length |\n#  |        |\n#  +---------+\n#  |        |\n#  |        |\n#  | breadth |\n#  |        |\n#  +---------+\n#  \n#\n# https://www.youtube.com/watch?v=E_VQQrRl3xU\n# https://www.youtube.com/watch?v=7Y_wT869-2s\n#\n#\n# https://www.mathschaffer.com/formulae/volumes/\n#\n# https://www.mathschaffer.com/formulae/volumes/triangular-prism.php\n\nnWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n#Solution\n# Solution using nested for loops\n#Function to find volume of triangular prism\ndef find_Volume(length,breadth,height):\n    return (length * breadth * height) / 6\n\n\n#Function to find surface area of a triangular prism\ndef find_SurfaceArea(length,breadth,height):\n    return (length * breadth + breadth * height + length * height) / 2\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(l,b,h):\n    return l*b*h\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    \"\"\"Return a list containing the substrings of s\n    after the first lowercase letter.\"\"\"\n    return s.split(\"a\")\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    return string[::2]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\n# BEGIN SOLUTION\ndef split_lowerstring(input):\n    \"\"\"\n    Split the string into words, and return a list of all lower case words.\n    \"\"\"\n    return input.lower().split()\n# END SOLUTION\n\n\n# BEGIN TESTS\n#print(split_lowerstring(\"AbCd\"))\n#assert split_lowerstring(\"AbCd\")==['bC','d']\n# END TESTS\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    # Write your code here\n    new_string = []\n    for letter in string:\n        if letter.islower():\n            new_string.append(letter)\n    return new_string\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    \"\"\"Split a string at lowercase letters.\"\"\"\n    return string.split()", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    result = []\n    cur = \"\"\n    for c in s:\n        if c.islower():\n            if len(cur)>0:\n                result.append(cur)\n            cur = c\n        else:\n            cur += c\n    result.append(cur)\n    return result\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    return [string[i:i+1].lower() for i in range(len(string))]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    return string.split(\"a\")\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    letters = s.lower()\n    return letters[1::2] + letters[::2]\n\n\n# test", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    return [s[i:i+1] for i in range(0,len(s)) if s[i].islower()]\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(str):\n    \"\"\"\n    :param str: string\n    :return: list of strings\n    \"\"\"\n    matches = re.findall(r\"(\\w+)\", str)\n    return [\"_\".join(match) for match in matches]\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    n = len(text)\n    if n % 2 == 1:\n        return 'Found a match!'\n    index = 0\n    while index < n - 1:\n        if text[index] == text[index + 1]:\n            text = text[:index] + '_' + text[index + 1:]\n            break\n        index = index + 1\n    return text\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(str):\n    # Starting with the first character of the string, look for the next character \n    # that is a lowercase letter. If you find one, then look for the next character \n    # that is not a lowercase letter. Continue looking until you've found \n    # a letter followed by an underscore. At that point, you've found a sequence \n    # of lowercase letters separated by an underscore. \n    \n    if len(str) == 0:\n        return \"No match!\"\n\n    str_new = str\n    res = False\n    for i in range(len(str_new)):\n        if str_new[i].islower() and not str_new[i+1].islower():\n            res = True\n            break\n        elif not str_new[i].islower() and str_new[i+1].islower():\n            res = True\n            break\n    if res:\n        return \"Found a match!\"\n    else:\n        return \"No match!\"\n    \n# asserts", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(s: str) -> List[str]:\n    # Initialize an empty list to store all the valid strings\n    results = []\n\n    # Add the first character to the list\n    results.append(s[0])\n\n    # Add the character for the second position to the list\n    results.append(s[1] + \"_\" + s[0])\n\n    # Add the character for the third position to the list\n    results.append(s[2] + \"_\" + s[0] + \"_\" + s[1])\n\n    # Add the character for the fourth position to the list\n    results.append(s[3] + \"_\" + s[0] + \"_\" + s[1] + \"_\" + s[2])\n\n    # Add the character for the fifth position to the list\n    results.append(s[4] + \"_\" + s[0] + \"_\" + s[1] + \"_\" + s[2] + \"_\" + s[3])\n\n    # Return the list of strings\n    return results\n\n# Run the doctests", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    r = []\n    for i in range(0,len(text)-1):\n        r.append(text[i]+'_'+text[i+1])\n    return r", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n    output = \"\"\n    for match in re.finditer(r\"(?=[A-Za-z])\\w+\", text):\n        output += match.group() + \"_\"\n    return \"Found a match!\" if output != \"\" else \"Not found!\"\n\n# 2.2", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    pass\n\ndef main():\n    print(text_lowercase_underscore(\"aab_cbbbc\"))\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    \"\"\"\n    text: string\n    return: string\n    \"\"\"\n    text = text.lower()\n    found = False\n    for i in range(len(text) - 2):\n        if (text[i] == text[i+1] == text[i+2]):\n            found = True\n            break\n    if found == True:\n        return 'Found a match!'\n    else:\n        return 'No match'\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Parameters\n    ----------\n    text : str\n        Input string\n\n    Returns\n    -------\n    str\n        Result string\n    \"\"\"\n    letters = [\"a\", \"b\", \"c\"]\n    r = []\n    for i in range(len(text)):\n        c = text[i]\n        if c.isalpha() and c.islower() and text[i - 1] != \"_\":\n            r.append(c)\n        elif c == \"_\":\n            r.append(c)\n    return \"_\".join(r)\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Return a list of all valid lower case sequences of letters joined with an underscore\n    \"\"\"\n    from collections import defaultdict\n    d = defaultdict(list)\n    for s in text.split():\n        for i in range(len(s)):\n            d[s[:i+1]].append(s[i+1:])\n    # the list of all valid lower case sequences of letters joined with an underscore\n    result = []\n    for s in d.keys():\n        result.append(s)\n    return result"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(size):\n\t\"\"\"\n\tFunction to calculate perimeter of a square\n\t\"\"\"\n\treturn 4*size\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return 4*side\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side_length):\n    return 4*side_length\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(n):\n    \"\"\"\n    >>> square_perimeter(10)\n    40\n    \"\"\"\n    return 4*n\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side_length):\n    return 4*side_length", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side):\n    return (2*side)*(2*side)\n\ndef square_perimeter(side):\n    return 4*side*side\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(width):\n    return 4*width\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return 4*side\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return 4*side\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(n):\n    return n*4\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str_1, str_2):\n    return \"\".join([char for char in str_1 if char not in str_2])\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str1, str2):\n    return str1.translate(None, str2)\n\n\ndef test_remove_dirty_chars():\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\n\ndef test_remove_dirty_chars_empty_str():\n    assert remove_dirty_chars(\"\", \"pros\") == \"\"\n\n\ndef test_remove_dirty_chars_empty_str_and_empty_list():\n    assert remove_dirty_chars(\"\", []) == \"\"\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    ret = ''\n    for c in str1:\n        if c not in str2:\n            ret += c\n    return ret\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(s1, s2):\n    # your code here\n    return s1[s2.index(s2[0]):]\n\ndef remove_dirty_chars(s1, s2):\n    return s1[:s2.index(s2[0])]\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string_a: str, string_b: str) -> str:\n    \"\"\"\n    Return a string that contains characters that are not in the second string.\n    \"\"\"\n    return ''.join([char for char in string_a if char not in string_b])\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(dirty_string, clean_string):\n    # your code here\n    res = \"\"\n    for i in dirty_string:\n        if i not in clean_string:\n            res += i\n    return res\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(word1, word2):\n    return \"\".join(c for c in word1 if c not in word2)\n\ndef test_remove_dirty_chars():\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string_a: str, string_b: str) -> str:\n    return \"\".join([c for c in string_a if c not in string_b])\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string1, string2):\n    return ''.join([x for x in string1 if x not in string2])\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(s1, s2):\n    \"\"\"\n    This function remove characters from the first string which are present in the second string.\n    \"\"\"\n    result = []\n    for c in s1:\n        if c not in s2:\n            result.append(c)\n    return \"\".join(result)\n\n#Below is an example usage:\n\n# Enter the string\ns1 = \"probasscurve\"\n\n# Enter the string\ns2 = \"pros\"\n\n# Calling the function"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(x):\n    return len(x)!=len(set(x))\n\ndef duplicate(x):\n    # your code here\n    #print(x)\n    if len(x)!=len(set(x)):\n        print(True)\n    else:\n        print(False)\n\n\ndef test_duplicate_list(x):\n    return len(x)!=len(set(x))\n\ndef duplicate_list(x):\n    # your code here\n    #print(x)\n    if len(x)!=len(set(x)):\n        print(True)\n    else:\n        print(False)\n\n#test = [1,1,1,1,2]\ntest = [1,2,3,4,5]\n\nduplicate(test)", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(array):\n    result = True\n    for n in array:\n        if array.count(n)>1:\n            result=False\n    return result\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(x):\n    return x.count(x[0]) > 1\n\n# Write a function to find the longest common subsequence for two given strings.", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(x):\n    \"\"\"\n    >>> test_duplicate([1,2,3,4,5])\n    False\n    >>> test_duplicate([1,2,3,3,5])\n    True\n    \"\"\"\n    if len(x) == 0: return False\n    if len(x) == 1: return False\n    if len(x) > 1:\n        for i in range(len(x)):\n            for j in range(len(x)):\n                if x[i] == x[j] and i != j:\n                    return True\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    if len(arr)==0:\n        return False\n    seen=set()\n    for num in arr:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n\n#print(test_duplicate([1,2,3,4,5,6]))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(lst):\n    return any([lst.count(val) > 1 for val in lst])\n\ndef test_duplicate([1,2,3,1,1]):\n    return True\n\ndef test_duplicate([1,2,3,4,5]):\n    return False\n\ndef test_duplicate([1,2,3,3,4,5]):\n    return True\n\ndef test_duplicate([1,2,2,3,3,4,5]):\n    return True\n\ndef test_duplicate([1,2,2,2,3,3,4,5]):\n    return False\n\ndef test_duplicate([1,2,2,2,3,3,5,5]):\n    return True\n\ndef test_duplicate([1,2,2,2,2,3,5,5]):\n    return True\n\ndef test_duplicate([1,2,2,2,2,2,5,5]):\n    return False", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    #sorting the array\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]==arr[i+1]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    return True if len(set(arr)) != len(arr) else False\n\n\ndef test_duplicate_1(arr):\n    return False if len(set(arr)) == len(arr) else True\n\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    dups = []\n    for i in range(len(arr)):\n        if arr[i] in dups:\n            return True\n        else:\n            dups.append(arr[i])\n    return False\n\ndef test_duplicate([1,2,3,4,5]):\n    print(test_duplicate([1,2,3,4,5]))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    arr.append(1)\n    arr.append(2)\n    arr.append(3)\n    arr.append(4)\n    arr.append(5)\n    print(duplicate(arr))\n    return duplicate(arr)\n\ndef duplicate(arr):\n    if len(arr)==0:\n        return False\n    else:\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i]==arr[j]:\n                    return True\n        return False\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    n_str = str(n)\n    sum_ = 0\n    for i in range(len(n_str)):\n        sum_ += int(n_str[i])\n    if (sum_ % 3 == 0):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number):\n    return number == number // 2\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\nfrom math import sqrt\n\n\ndef is_woodall(number):\n    if sqrt(number).is_integer():\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num: int) -> bool:\n    # Write your code here\n    if num % 3 == 0:\n        return True\n    else:\n        return False\n\n\n# TESTING CODE", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number):\n    if (number % 3) == 0 and (number % 5) == 0:\n        return True\n    else:\n        return False\n\n# --- TEST CODE STARTS HERE ---\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    if n < 10:\n        return False\n    return str(n) == str(int(str(n)[::-1]) * int(str(n)[::-1]))\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\nfrom math import sqrt\ndef is_woodall(n):\n    # your code here\n    # result = n % 4 == 0\n    # result = n % 15 == 0\n    result = n % 4 == 0 and n % 15 == 0\n    return result\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n# 1. Linear Solution\ndef is_woodall(num):\n    if not isinstance(num, int) or num < 1:\n        return False\n    while num > 0:\n        if num % 15 == 0:\n            return False\n        num -= 1\n    return True\n\n\n# 2. Recursive Solution\ndef is_woodall_rec(num):\n    if not isinstance(num, int) or num < 1:\n        return False\n    if num % 15 == 0:\n        return False\n    return is_woodall_rec(num // 15) or num % 15 == 0\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    # TODO: write your function here\n    return num % 3 == 0\n\n# assert is_woodall(4) == False\n# assert is_woodall(383) == True\n# assert is_woodall(2) == False\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    if n == 1:\n        return False\n    if n % 3 == 0 and n % 5 == 0:\n        return True\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n    return is_woodall(n-1) + is_woodall(n-2)"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    return [n*i for i in range(0,m+1) ]\n\ndef main():\n    print(multiples_of_num(4, 3))\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return [n*i for i in range(1,m+1) ]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    res=[]\n    for i in range(m+1):\n        res.append(n*i)\n    return res\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return [n*x for x in range(1,m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    result=[]\n    i = 0\n    while i<m:\n        if i%m==0:\n            result.append(n*i)\n        i+=1\n    return result\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(m, n):\n    list = []\n    for i in range(1,m+1):\n        list.append(n*i)\n    return list\n\ndef test_multiples_of_num():\n    assert multiples_of_num(4,3)== [3,6,9,12]\n    print(\"Test case passed.\")\n    \ntest_multiples_of_num()\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n    \"\"\"\n    This function return m number of multiples of n\n    \"\"\"\n    res = []\n    for i in range(1,m+1):\n        res.append(n*i)\n    return res\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    ret = []\n    for i in range(1,m+1):\n        ret.append(n*i)\n    return ret\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [n*i for i in range(m)]\n\ndef multiples_of_num(n, m):\n    result = []\n    for i in range(m):\n        result.append(n*i)\n    return result\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    result = []\n    for i in range(m):\n        result.append(n*i)\n    return result\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(array):\n    \"\"\"\n\n    :param array:\n    :return:\n    \"\"\"\n    if len(array) == 0:\n        return 0\n    else:\n        return find_first_duplicate(array[1:]) + 1\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(nums):\n    from collections import defaultdict\n    h = defaultdict(list)\n    for idx in nums:\n        h[idx].append(idx)\n    for idx in nums:\n        if h[idx]:\n            return idx\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    for n in range(len(arr)):\n        for m in range(n+1, len(arr)):\n            if arr[n] == arr[m]:\n                return arr[n]\n    return False\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(a):\n\tfor i in range(0,len(a)):\n\t\tfor j in range(i+1,len(a)):\n\t\t\tif a[i] == a[j]:\n\t\t\t\treturn a[i]\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    \"\"\"\n    @param arr: an array of integers\n    @return: an integer\n    \"\"\"\n    for i in range(1, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]==arr[j]:\n                return arr[i]\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    if len(arr)<=1:\n        return None\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!=j and arr[i]==arr[j]:\n                return arr[i]\n    return None\n\ndef find_first_duplicate_by_sort(arr):\n    if len(arr)<=1:\n        return None\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]==arr[i+1]:\n            return arr[i]\n    return None\n\n\ndef find_first_duplicate_by_hash(arr):\n    if len(arr)<=1:\n        return None\n    dic={}\n    for i in range(len(arr)):\n        if arr[i] in dic:\n            return arr[i]\n        else:\n            dic[arr[i]]=i\n    return None\n\narr=[1,2,3,3,5,5,4,4,6,7]\n# print(find_first_duplicate(arr))\n# print(find_first_duplicate_by_sort(arr))", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(L):\n    \"\"\"\n    Return the index of the first duplicate element in a given array of integers\n    or None if none found\n    \"\"\"\n    # Your code here\n    # O(n) solution\n    # method 1:\n    #    sort array and then compare with previous element\n    # method 2:\n    #    use two pointers\n    for i in range(1,len(L)):\n        if L[i]==L[i-1]:\n            return i\n\n# test cases", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    \"\"\"\n    arr: a list of integers\n    returns: an integer indicating the index of the first duplicate element\n    \"\"\"\n    if len(arr)==1:\n        return None\n    #set up a hash map for the value\n    #O(1) complexity\n    hash_map = dict()\n    for i in range(0, len(arr)):\n        if arr[i] in hash_map:\n            return i\n        else:\n            hash_map[arr[i]] = 1\n\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    \"\"\"\n    Complexity: O(N)\n    :param arr:\n    :return:\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            return arr[i]\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(array):\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] == array[j]:\n                return array[i]\n\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(A):\n    # Your code here\n    a = A[0]\n    b = A[0][0]\n    for i in range(len(A)):\n        if a[i] > b:\n            b = a[i]\n        else:\n            pass\n    return b\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(a):\n    list1 = []\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            list1.append(a[i][j])\n\n    list2 = sorted(list1)\n    sum1 = list2[0]\n    sum2 = list2[-1]\n\n    for i in range(1,len(list2)-1):\n        sum1 = sum1 + list2[i]\n        sum2 = sum2 + list2[i]\n\n    return sum1 + sum2", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(array_of_lists):\n\n    # create a new list of lists with same list length as the first list\n    max_sum = [0]*len(array_of_lists[0])\n\n    for i in range(len(array_of_lists[0])):\n        for j in range(len(array_of_lists)):\n            if max_sum[i] < array_of_lists[j][i]:\n                max_sum[i] = array_of_lists[j][i]\n\n    # print the maximum sum for each element of the list\n    print(max_sum)\n    print(\"Maximum sum is \",max(max_sum))\n\n    return max(max_sum)\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(l):\n    m = 0\n    if not l:\n        return m\n    for i in l:\n        for j in i:\n            m = max(m,j)\n    return m\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(arr):\n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    :param arr: a list of lists\n    :return: the maximum sum of elements of list in a list of lists\n    \"\"\"\n    return max(max(row) for row in arr)\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\n# This function takes a nested list as input\n# and returns maximum sum of all the elements\ndef maximum_Sum(nested_list):\n    maximum_sum = 0\n    if nested_list == []:\n        return 0\n    else:\n        for sub_list in nested_list:\n            if sub_list == []:\n                return 0\n            else:\n                maximum_sum = max(maximum_sum,maximum_Sum(sub_list))\n    return maximum_sum\n\n\ndef main():\n    # sample input\n    nested_list = [[1,2,3],[4,5,6],[10,11,12],[7,8,9]]\n    print(maximum_Sum(nested_list))\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(ls):\n    max_sum = float('-inf')\n    for sub_ls in ls:\n        sum_of_sub_ls = sum(sub_ls)\n        max_sum = sum_of_sub_ls if sum_of_sub_ls > max_sum else max_sum\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_sum(L):\n    '''\n    This function takes a list of lists as input.\n    This function return the maximum sum of all the elements in the list of lists.\n    '''\n    max_sum = 0\n    for li in L:\n        curr_sum = sum(li)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(l):\n    s=sum(l[0])\n    m=[]\n    for j in range(1,len(l)):\n        for i in range(len(l[j])):\n            s=s+l[j][i]\n            if s>max(m):\n                m=s\n            if s<0:\n                m=0\n    return m\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lst):\n    return sum(lst[0])\n\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_number):\n    assert 0 <= binary_number <= 1\n    decimal = 0\n    for index in reversed(range(0, len(str(binary_number)))):\n        if binary_number & (1 << index):\n            decimal += 2 ** index\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    decimal = 0\n    for index, value in enumerate(reversed(binary)):\n        decimal += (int(value) * 2 ** index)\n    return decimal\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    answer = 0\n    for i in range(len(binary)):\n        answer += int(binary[i]) * 2**i\n    return answer", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(num_bin):\n    bin_num = num_bin\n    result = 0\n    while bin_num > 0:\n        temp = bin_num % 10\n        bin_num //= 10\n        result += temp * 2 ** (len(bin_num) - 1)\n    return result\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\n# my function\ndef binary_to_decimal(n: int) -> int:\n    sum = 0\n    while n > 0:\n        d = n % 2\n        n //= 2\n        sum = d + sum * 10\n    return sum\n\n\n# class Solution:\n#     def binaryToDecimal(self, n: int) -> int:\n#         res = 0\n#         for digit in reversed(str(bin(n))):\n#             res = res * 10 + int(digit)\n#         return res\n\n\n# class Solution:\n#     def binaryToDecimal(self, n: int) -> int:\n#         return sum([digit * 2 ** i for i, digit in enumerate(list(bin(n)[2:]))])", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_num):\n    \"\"\"\n    >>> binary_to_decimal(100)\n    4\n    \"\"\"\n    return int(binary_num, 2)", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_number):\n    return sum([binary_number[i] * 2 ** i for i in range(len(binary_number) - 1, -1, -1)])\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(n):\n    return n if n <= 1 else 2*binary_to_decimal(n/2) + (n%2)\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(b):\n\t\"\"\"\n\t\tReturns the decimal equivalent of the binary number\n\t\ttakes in a binary number and returns its decimal equivalent\n\t\"\"\"\n\tif isinstance(b, int):\n\t\treturn 0 if b == 0 else 1 + binary_to_decimal(b // 2)\n\telif isinstance(b, float):\n\t\tdecimal = 0.0\n\t\tfor i in range(10):\n\t\t\tdecimal = 10 * decimal + (b % 2 == 1)\n\t\t\tb = b // 2\n\t\treturn decimal", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(num):\n    return int(num, 2)\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    temp = 1\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            temp = temp * arr[i]\n    return temp\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(array,n):\n    #Your code here\n    return 0\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(array,n):\n    # Create a sorted array of unique values \n    unique_array = sorted(set(array))\n    # Initialize the result\n    result = 1\n    # Length of unique array\n    length = len(unique_array)\n    for i in range(length):\n        # First index of i\n        a = i\n        # Second index of i\n        b = i\n        while b<length:\n            # Check if element at b is unique\n            if unique_array[b]!=unique_array[a]:\n                # Add the product of the two elements\n                result *= unique_array[a]*unique_array[b]\n                break\n            # Increment the second index\n            b+=1\n    return result", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\n# solution using set\ndef find_Product(arr, n):\n    temp = set(arr)\n    for i in range(n, 0, -1):\n        temp = temp.intersection(set(arr[0:i]))\n    return len(temp)\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,prod):\n    # write your code here\n    result = 1\n    for i in range(len(arr)):\n        if arr[i] in result:\n            result = result.replace(str(arr[i]),'')\n    return int(result)\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n    res = 1\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                res *= arr[i]\n                break\n    return res\n\ndef test_find_Product():\n    assert find_Product([1,1,2,3],4) == 6\n    assert find_Product([1,1,1], 3) == 3\n    assert find_Product([1, 2, 3], 4) == 24\n    assert find_Product([2,3,4,5,6,7], 4) == 40320\n    assert find_Product([1, 2, 3], 1) == 3\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(a,b):\n    return reduce(lambda a,b: a*b, a)\n\n# print(find_Product([1,1,2,3],4))\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n    arr.sort()\n    for i in range(len(arr)):\n        if i == 0:\n            temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n    print(arr)\n    temp = arr[0]\n    arr[0] = arr[len(arr)-1]\n    arr[len(arr)-1] = temp\n    print(arr)\n    return arr[0]*arr[1]", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(array,count):\n\tcount = len(array) - count\n\tcount = count if count != 0 else 1\n\treturn reduce(operator.mul,array[:count])\n\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(array,num):\n\treturn reduce(lambda x,y: x*y,array[:num])\n"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(k_element_list: list, k: int) -> bool:\n    return len(k_element_list) == k\n\ndef check_k_elements(k_element_list: list, k: int) -> bool:\n    k_element_list_len = len(k_element_list)\n    if k_element_list_len == 0:\n        return False\n\n    for i in range(k_element_list_len):\n        count = 0\n        for j in range(i+1, k_element_list_len):\n            if k_element_list[j][0] == k_element_list[i][0]:\n                count += 1\n                if count == k:\n                    return True\n    return False", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuples, k):\n    if len(tuples) < k:\n        return False\n    else:\n        return len(set(map(lambda t: len(t), tuples))) == k\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(k_list, k):\n    \"\"\"\n    k_list is a list of tuples.\n    k is an integer.\n    Return True if all tuples have k elements, False otherwise.\n    >>> check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4)\n    True\n    \"\"\"\n    return all(len(tuple) == k for tuple in k_list)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    return len(tuple_list) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    if len(tuple_list) < k:\n        return False\n    seen_count = Counter()\n    seen_count.update(tuple_list)\n    return len(seen_count) == k\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tlist, k):\n    if len(tlist) == 0:\n        return False\n    for t in tlist:\n        if len(t) != k:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(lst, k):\n    return len(set(lst)) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    return len(tuple_list) >= k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    return len(tuple_list) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(t_list, k):\n    return len(set([t[0] for t in t_list])) == k\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\n# TODO: Write your solution here.\n\n\ndef remove(lst):\n    result = []\n    for item in lst:\n        result.append(''.join([c for c in item if c not in '0123456789']))\n    return result\n\n\ndef remove_digit(lst):\n    result = []\n    for item in lst:\n        result.append(''.join([c for c in item if c not in '0123456789']))\n    return result\n\n\n# test cases", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return [item for item in lst if not any(char.isdigit() for char in item)]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(list):\n    return list\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(input):\n    return [s.translate(str.maketrans('', '', digits)) for s in input]\n\n# Alternative\ndef remove(input):\n    return [s.translate(str.maketrans('', '', '0123456789')) for s in input]\n\n# Alternative\ndef remove(input):\n    return [s.translate(str.maketrans('', '', '0123456789')) for s in input]", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    # YOUR CODE HERE\n    raise NotImplementedError\n\n\n# Test", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return [x for x in lst if not x.isdigit()]", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(my_list):\n    # Your code here\n\nmy_list = ['4words', '3letters', '4digits']\nmy_list_result = remove(my_list)", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(lst):\n    \"\"\"\n    Parameters:\n        lst - a list of strings\n\n    Returns:\n        a list of strings with all digits removed\n    \"\"\"\n\n    return [ele for ele in lst if not any(c.isdigit() for c in ele)]\n\n\ndef test_remove():\n    \"\"\"\n    Run the test cases defined for remove\n    \"\"\"\n\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\n    assert remove(['words', 'letters', 'digits']) == ['words', 'letters', 'digits']\n\n\ndef max_digit_sum(num):\n    \"\"\"\n    Returns the sum of all the digits in a given number\n    \"\"\"\n\n    max_sum = 0\n    for d in str(num):\n        max_sum += int(d)\n    return max_sum\n\n\ndef test_max_digit_sum():\n    assert max_digit_sum(910) == 19\n    assert max_digit_sum(920) == 20\n    assert max_digit_sum(950) == 25\n    assert max_digit_sum(1000) == 30\n    assert max_digit_sum(1200) == 40\n\n\ndef multiply_digit_sum(num):\n    \"\"\"\n    Returns the product of all the digits in a given number\n    \"\"\"\n\n    return reduce(lambda a, b: a * b, map(int, str(num)))\n\n\ndef test_multiply_digit_sum():\n    assert multiply_digit_sum(910) == 910\n    assert multiply_digit_sum(920) == 1820\n    assert multiply_digit_sum(950) == 8500\n    assert multiply_digit_sum(1000) == 3628800\n    assert multiply_digit_sum(1200) == 72576000\n\n\ndef test_multiply_digit_sum_with_reduce():\n    assert multiply_digit_sum(910) == 910\n    assert multiply_digit_sum(920", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    \"\"\" \n    Remove the digits from the string\n    >>> remove(['4words', '3letters', '4digits'])\n    ['words', 'letters', 'digits']\n    \"\"\"\n    return [x.replace('0123456789', '') for x in lst]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\n# 01/2022.\n# 07/2022.\n# 08/2022.\n\ndef remove(strings: list[str]) -> list[str]:\n    return [string[len(string) - 1] + string[:len(string) - 1] for string in strings]\n\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    co_eff = 1\n    for i in range(k):\n        co_eff *= (n-i)\n    co_eff /= factorial(k)\n    co_eff *= factorial(n)\n    return co_eff\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    \n    if k>n:\n        print(\"Invalid Input\")\n    elif k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n        ", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    return factorial(n)/(factorial(k)*factorial(n-k))\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    binomial_coeff = 0\n    for i in range(k):\n        binomial_coeff = binomial_coeff + binomial_Coeff(n-1, i)\n    return binomial_coeff", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    >>> binomial_Coeff(5,2)\n    10\n    \"\"\"\n    return int(factorial(n)/(factorial(k) * factorial(n-k)))\n\n# print(binomial_Coeff(3,2))\n# print(binomial_Coeff(5,2))\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    '''\n    returns the binomial co-efficient nCk, where k is the\n    number of trials, and n is the number of experiments.\n    '''\n    if k > n or k < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\ndef binomial_Coeff_2(n,k):\n    '''\n    returns the binomial co-efficient nCk, where k is the\n    number of trials, and n is the number of experiments.\n\n    This function uses the fact that the sum of all binomial\n    co-efficients is equal to nCk.\n\n    '''\n    if k > n or k < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff_2(n-1,k-1) + binomial_Coeff_2(n-1,k)\n\ndef binomial_Coeff_3(n,k):\n    '''\n    returns the binomial co-efficient nCk, where k is the\n    number of trials, and n is the number of experiments.\n\n    This function uses the fact that the sum of all binomial\n    co-efficients is equal to nCk.\n\n    '''\n    if k > n or k < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if n == 1:\n        return k\n    return binomial_Coeff_3(n-1,k-1) + binomial_Coeff_3(n-1,k)", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    if k<0 or k>n:\n        return 0\n    elif k==0 or k==n:\n        return 1\n    else:\n        binomial_Coeff = binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    return binomial_Coeff\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    res = 0\n    for i in range(n):\n        for j in range(k):\n            res += 1\n    return res\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    return binomial_Coeff(n - 1, k) + binomial_Coeff(n - 1, k - 1)\n\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n\treturn binomial(n,k)\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,ele):\n    count=0\n    for i in arr:\n        if i == ele:\n            count+=1\n    if count%2 == 1:\n        return ele\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr,n):\n    for i in range(len(arr)):\n        j = arr[i]\n        count = 0\n        for k in range(i+1,len(arr)):\n            if arr[k] == j:\n                count +=1\n        if count == 1:\n            return j\n    return -1\n\n\ndef get_Odd_Occurrence_Rec(arr, n):\n    for i in range(len(arr)):\n        j = arr[i]\n        count = 0\n        for k in range(i+1, len(arr)):\n            if arr[k] == j:\n                count +=1\n        if count == 1:\n            return j\n    return -1\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(input_list,element):\n\t\"\"\"\n\t:param input_list: List\n\t:param element: number\n\t:return: number\n\t\"\"\"\n\treturn input_list.count(element) % 2\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(a,n):\n    '''\n    Find the element occurring odd number of times.\n    '''\n    if len(a)==0:\n        return None\n    occ = collections.Counter(a)\n    res = [x for x in occ if occ[x]%2==1]\n    return res[0] if len(res)>0 else None\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(a,x):\n    \"\"\"\n    Assumption: The input array is not empty.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if(a[i]==x):\n            count += 1\n    if(count % 2 != 0):\n        return x\n    return None\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(lst,n):\n    odd_count = 0\n    for i in lst:\n        if lst.count(i)%2 == 0:\n            odd_count = odd_count + 1\n    return odd_count\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(data_set, element):\n    # write your code here\n    # write your code here\n    if len(data_set) % 2 == 1:\n        return None\n    odd_count = 0\n    even_count = 0\n    for element in data_set:\n        if element == element:\n            odd_count += 1\n        else:\n            even_count += 1\n    if odd_count == 0:\n        return None\n    return data_set[odd_count-1]\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(list,target):\n    dict = {}\n    for x in list:\n        dict[x] = dict.get(x,0)+1\n    \n    odd = [x for x in dict if dict[x]%2 == 1]\n    \n    if len(odd) == 0:\n        return None\n    elif len(odd) == 1:\n        return odd[0]\n    else:\n        return min(odd)\n\ndef get_Odd_Occurrence_2(list,target):\n    return [x for x in list if list.count(x) % 2 == 1]", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,k):\n    return len(arr) - count_Occurances(arr, k, True)\n\ndef count_Occurances(arr, k, is_odd_occurrence = False):\n    # arr is an array\n    # is_odd_occurrence is a boolean value\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == k:\n            count += 1\n    if is_odd_occurrence:\n        count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr,value):\n    \"\"\"\n    Time Complexity: O(n^2)\n\n    \"\"\"\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] == value and arr[j] == value:\n                return arr[i]\n            elif arr[i] != value and arr[j] != value:\n                pass"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                res += 1\n    return res\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    # Your code here\n    substrings = []\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            substrings.append(string[i])\n    return len(substrings)\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    for i in range(len(str)-1):\n        for j in range(i+1,len(str)):\n            if str[i] == str[j]:\n                count += 1\n    return count", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n#Solution\ndef count_Substring_With_Equal_Ends(str1):\n    result = 0\n    for i in range(len(str1) - 1):\n        if str1[i] == str1[len(str1) - 1]:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    \n    if len(s) < 2:\n        return 0\n    \n    s_len = len(s)\n    count = 0\n    for i in range(s_len):\n        for j in range(i + 1, s_len + 1):\n            if s[i] == s[j - 1]:\n                count += 1\n                \n    return count", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\n\ndef test_count_Substring_With_Equal_Ends(self):\n    self.assertEqual(count_Substring_With_Equal_Ends(\"abc\"), 3)\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    return len(string)-2*string.count('a')\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\n# Write your code here\ndef count_Substring_With_Equal_Ends(str):\n    result = 0\n    if len(str) < 1:\n        return result\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if str[i] == str[j]:\n                result += 1\n    return result\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    dict = {}\n    for i in range(len(str)):\n        if str[i] in dict:\n            dict[str[i]] += 1\n        else:\n            dict[str[i]] = 1\n    return dict"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef topK(A,K):\n    B = []\n    for _ in range(K):\n        B.append(A.pop(0))\n    A = list(heapq.nsmallest(K, A, key=A.count))\n    return A\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef find_top_k(lists,k):\n    \"\"\"\n    Find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n    res = []\n    heap = []\n    for items in lists:\n        for item in items:\n            heapq.heappush(heap,item)\n    for i in range(k):\n        item = heapq.heappop(heap)\n        res.append(item)\n    return res\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom heapq import heappop, heappush\n\ndef func(nums, k):\n    \"\"\"\n    :type nums: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    d = {}\n    for list in nums:\n        for i in list:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n    d = dict(sorted(d.items(), key = lambda i : i[1], reverse = True))\n    return [i[0] for i in d[:k]]\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom collections import defaultdict, Counter, OrderedDict\nfrom queue import PriorityQueue\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef top_k(array,k):\n    if k == 0:\n        return []\n    count_dict = {}\n    for n in array:\n        if n in count_dict:\n            count_dict[n] += 1\n        else:\n            count_dict[n] = 1\n    heap = []\n    for n in count_dict:\n        heapq.heappush(heap, (count_dict[n], n))\n    heapq.heappush(heap, (0, 0))\n    result = []\n    for i in range(k):\n        top = heapq.heappop(heap)\n        result.append(top[1])\n    return result\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom collections import defaultdict\n\ndef func(arr, k):\n    \"\"\"\n    This function takes an array of list as an input and returns the top k integers that occur most frequently using heap queue algorithm.\n    \"\"\"\n    res = []\n    if len(arr) == 0:\n        return []\n    frequency = defaultdict(int)\n    for i in range(len(arr)):\n        for j in arr[i]:\n            frequency[j] += 1\n    heap = []\n    for i in frequency:\n        heapq.heappush(heap, (frequency[i], i))\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef top_k_most_frequent(arr,k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    arr.sort()\n    d = {}\n    for i in arr:\n        d[i] = d.get(i,0)+1\n    h = []\n    for i in d:\n        h.append((d[i],i))\n    h.sort()\n    res = []\n    for i in range(k):\n        res.append(h[i][1])\n    return res\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef topk(lists, k):\n    if len(lists) == 0: return\n    result = []\n    max_count = 0\n    count_dict = {}\n    for l in lists:\n        count = 0\n        for num in l:\n            if num in count_dict:\n                count_dict[num] += 1\n                if count_dict[num] > max_count:\n                    max_count = count_dict[num]\n                    result = [num]\n                    result.extend(result)\n                    result.sort()\n                    result = result[:k]\n                    break\n            else:\n                count_dict[num] = 1\n                count += 1\n                if count > max_count:\n                    max_count = count\n                    result = [num]\n                    result.extend(result)\n                    result.sort()\n                    result = result[:k]\n                    break\n        print(result)\n    return result\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\n# Defining time complexity for all of the following functions:\n# For count_freq: \u0398(nlogn)\n# For count_freq_lst: \u0398(knlogn)\n# For count_max: \u0398(n)\n# For count_max_lst: \u0398(kn)\n\ndef count_freq(lst, k):\n    \"\"\"\n    >>> lst = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]\n    >>> count_freq(lst, 3)\n    [5, 7, 1]\n    \"\"\"\n    # Creating a count dictionary that will have as keys the integers in the list, and as values the frequency of each integer in the list\n    dict = {}\n    for i in lst:\n        for j in i:\n            if j in dict:\n                dict[j] = dict[j] + 1\n            else:\n                dict[j] = 1\n    # Creating a list that will contain the keys of the dictionary in order of decreasing frequency\n    freq = sorted(dict.items(), key=lambda x:x[1], reverse=True)\n    # Creating a list that will contain the keys of the frequency list until it contains k elements\n    lst_freq = [i[0] for i in freq[:k]]\n    # Returning the list of integers containing the top k most frequent integers from the lists\n    return lst_freq\n\ndef count_freq_lst(lst, k):\n    \"\"\"\n    >>> lst = [[1, 2, 6], [1, 3, 4", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef find_top_k(lists, k):\n    # insert all integers into a list\n    all_integers = []\n    for l in lists:\n        all_integers += l\n    print(sorted(list(set(all_integers))))\n    count = Counter(all_integers)\n    count.pop(0)\n    # heapify list\n    count = sorted(count.items(), key = lambda x: x[0])\n    count = reversed(count)\n    result = []\n    for x in count[:k]:\n        result.append(x[0])\n    return result\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    return len(prime_factors(num))\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(num):\n    \"\"\"\n    Returns the largest prime factor of num.\n\n    >>> max_Prime_Factors(15)\n    5\n\n    >>> max_Prime_Factors(10)\n    2\n\n    >>> max_Prime_Factors(20)\n    4\n\n    >>> max_Prime_Factors(40)\n    5\n    \"\"\"\n    prime_factors = []\n    for prime in range(2,num):\n        if num % prime == 0:\n            prime_factors.append(prime)\n            prime_factors.append(num/prime)\n    prime_factors.sort(reverse=True)\n    return prime_factors[0]\n\n\n#test", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    max_Prime = 0\n    for prime in sieve_of_primes(n):\n        if n % prime == 0:\n            if prime > max_Prime:\n                max_Prime = prime\n    return max_Prime\n\ndef sieve_of_primes(n):\n    if n == 1:\n        yield 1\n        return\n    flag = [True] * n\n    for i in range(2, int(n ** .5) + 1):\n        if flag[i]:\n            for j in range(i * i, n + 1, i):\n                flag[j] = False\n    for i in range(2, n):\n        if flag[i]:\n            yield i\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(number):\n    if number < 2:\n        return 0\n    factors = []\n    while number > 1:\n        if number % 2 == 0:\n            factors.append(2)\n            number /= 2\n        else:\n            for factor in range(3, number + 1, 2):\n                if number % factor == 0:\n                    factors.append(factor)\n                    number /= factor\n                    break\n    return max(factors)\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(number):\n    primes = [2, 3, 5, 7, 11]\n    num = int(number)\n    for n in primes:\n        if num % n == 0:\n            return n\n    return num\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_prime_factors(n):\n    res = []\n    factor = 2\n    while factor*factor <= n:\n        while n%factor == 0:\n            n = n/factor\n            res.append(factor)\n        factor += 1\n    res.append(n)\n    return res\n\ndef max_Prime_Factors(n):\n    max_factor = 2\n    while max_factor*max_factor <= n:\n        if n % max_factor == 0:\n            temp = n/max_factor\n            if temp*temp == n:\n                return max_factor\n            max_factor += 1\n    return max_factor\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if num <= 1:\n        return 1\n    prime = []\n    for i in range(2, num+1):\n        if num % i == 0:\n            prime.append(i)\n    for i in range(2, num+1):\n        if i not in prime:\n            return i\n    return 1", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n# 7.1\n\n\ndef max_prime_factors(n):\n    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(num):\n    factors = {}\n    while num > 2:\n        for factor in range(2,num):\n            if num % factor == 0:\n                break\n        else:\n            factors[factor] = True\n            num = 1\n        else:\n            num = factor\n    return max(factors.keys())\n\n\ndef max_Prime_Factors_1(num):\n    factors = {}\n    while num > 2:\n        for factor in range(2,num):\n            if num % factor == 0:\n                factors[factor] = True\n                break\n        else:\n            factors[num] = True\n            num = 1\n        else:\n            num = factor\n    return max(factors.keys())\n\n\ndef max_Prime_Factors_2(num):\n    factors = []\n    for i in range(2,num+1):\n        if num % i == 0:\n            factors.append(i)\n            if len(factors) > 1:\n                return max(factors)\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n# Floyd's Algorithm\ndef max_Prime_Factors(n):\n    if n <= 1:\n        return 1\n    d = [0] * (n+1)\n    p = [1] * (n+1)\n    for i in range(2,n+1):\n        for j in range(2,i):\n            if i % j == 0:\n                d[i] = max(d[i],d[j] + 1)\n                p[i] = min(p[i],p[j] + 1)\n    m = 1\n    for i in range(2,n+1):\n        if d[i] > m:\n            m = d[i]\n    return p[n]\n"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n#solution 1\ndef decimal_To_Binary(n):\n    b = []\n    while n > 0:\n        b.append(n%2)\n        n = n // 2\n    return \"\".join(str(x) for x in reversed(b))\n\n#solution 2\ndef decimal_To_Binary(n):\n    return bin(n)[2:]\n\n#solution 3\ndef decimal_To_Binary(n):\n    return '{0:b}'.format(n)\n\n#solution 4\ndef decimal_To_Binary(n):\n    return bin(n)[2:].zfill(n.bit_length())", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n# Convert Decimal to binary\ndef decimal_To_Binary(dec):\n    bin_number = []\n    while dec > 0:\n        rem = dec % 2\n        bin_number.append(rem)\n        dec = dec // 2\n    return bin_number\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal):\n    return format(decimal, 'b')\n\n# calling the function\ndecimal = 10\n\n# print the result", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal_number):\n    \"\"\"\n    Takes a decimal number and returns its binary representation.\n    \"\"\"\n    binary_number = []\n    while decimal_number > 0:\n        binary_number.append(decimal_number % 2)\n        decimal_number = decimal_number // 2\n    return int(''.join(map(str, reversed(binary_number))), 2)\n\n\n# Test cases", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal_no):\n    \"\"\"\n    Convert a decimal number to binary number.\n    \"\"\"\n    decimal_bin = []\n    while decimal_no > 0:\n        decimal_bin.append(decimal_no % 2)\n        decimal_no = decimal_no // 2\n    decimal_bin = \"\".join(str(x) for x in decimal_bin)\n    return decimal_bin", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(num):\n    '''\n    >>> decimal_To_Binary(10)\n    1010\n    '''\n    if num == 0:\n        return '0'\n    else:\n        return str(bin(num)[2:])\n\ndef test_decimal_To_Binary():\n    assert decimal_To_Binary(10) == 1010\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(num):\n    if num == 0:\n        return \"0\"\n    else:\n        return \"{0:0>{1}b}\".format(num, len(str(num)))\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal):\n    \"\"\"\n    convert decimal to binary\n    \"\"\"\n    return bin(decimal)\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal):\n    # Your code here\n    return\n\n\ndef decimal_To_Binary_1(decimal):\n    binary = ''\n    # Your code here\n    return binary\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(number):\n    binary_number = ''\n\n    while number > 0:\n        binary_number += str(number%2)\n        number //= 2\n\n    return binary_number\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(nums,max):\n    \"\"\"\n    :type nums: List[int]\n    :type max: int\n    :rtype: int\n    \"\"\"\n    for num in nums:\n        if num < 0 or num > max:\n            return num\n    return max+1\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr,n):\n    if n > len(arr):\n        return None\n    for i in range(len(arr)):\n        if arr[i] == n:\n            return n + 1\n    return None\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(array,n):\n    if len(array) < 1:\n        return False\n    diff = 0\n    for i in range(n):\n        diff += array[i]\n    diff -= n*(n+1)//2\n    return diff\n\n# print(find_missing([1,2,3,5],4))\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\n# Inspired by: https://stackoverflow.com/questions/3219503/python-find-missing-number-in-a-sorted-array\ndef find_missing(a,n):\n    for i in range(1,n-1):\n        if a[i-1] < a[i] and a[i] > a[i+1]:\n            return i\n    return n\n\n\ndef find_missing_1(a,n):\n    if n==1:\n        return 0\n    return a[n/2-1]\n\ndef find_missing_2(a,n):\n    if n==1:\n        return 0\n    if n%2 == 1:\n        return a[n/2-1]\n    else:\n        return a[n/2]\n\ndef find_missing_3(a,n):\n    return sum(a) - n\n\ndef find_missing_4(a,n):\n    return sum(a) - 2*n\n\n# print([1,2,3,4,5,6])", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(A, K):\n    # Write your code here\n    n = len(A)\n    min_ = n * n\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] + A[j] == K:\n                min_ = min(min_, A[i] + A[j])\n    return min_ - K\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\n# Find the missing number in a sorted array using binary search\ndef find_missing(arr, n):\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if arr[mid] == mid:\n            if mid != (n - 1):\n                start = mid + 1\n            else:\n                end = mid - 1\n        elif arr[mid] < mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start + 1\n\n# Test cases", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(array,n):\n    arr_len = len(array)\n    if arr_len == 0:\n        return 0\n    if arr_len == 1:\n        return 1\n    if arr_len == 2:\n        if array[0] == array[1]:\n            return 3\n        if array[1] == array[2]:\n            return 2\n        if array[2] == array[1]:\n            return 1\n    for i in range(0,n):\n        if array[i] == array[i+1]:\n            return i+1\n\narray = [1,2,3,5,6]\nn = 5", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, n):\n    \"\"\"\n    Find the missing number in a sorted array.\n\n    Args:\n        arr (list): list of numbers\n        n (int): size of the array\n\n    Returns:\n        int: missing number\n    \"\"\"\n    return n + 1 - len(arr)\n\n\ndef test_find_missing():\n    assert find_missing([1, 2, 3, 5], 4) == 4\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(a, n):\n    if n%2 == 0:\n        return n//2\n    else:\n        return n//2 + 1\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\nfrom typing import List\ndef find_missing(a:List[int],n:int) -> int:\n    \"\"\"\n    There are n numbers in an array. All the numbers are\n    in increasing order. Find the missing number.\n    \"\"\"\n    if n==0:\n        return 0\n    else:\n        start = 0\n        end = n-1\n        while start<=end:\n            if a[start]==a[end]:\n                start+=1\n            else:\n                if a[start]<a[end]:\n                    start+=1\n                else:\n                    end-=1\n        return a[start-1]\n\n\na=[1,2,3,5,6]\nb=[1,2,3,5,7,8]\nc=[1,2,3,5,7,9]"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\n#2\ndef find_rect_num_2(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    assert find_rect_num(4) == 20\n    \"\"\"\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return find_rect_num_2(n - 1) + find_rect_num_2(n - 2)\n\n#3\ndef find_rect_num_3(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    assert find_rect_num(4) == 20\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return find_rect_num_3(n - 1) + find_rect_num_3(n - 2)\n\n\n#4\ndef find_rect_num_4(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    assert find_rect_num(4) == 20\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return find_rect_num_4(n - 1) + find_rect_num_4(n - 2) + find_rect_num_4(n - 3)\n\n\n#5\ndef find_rect_num_5(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    assert find_rect_num(4) == 20\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    else:\n        return find_rect_num_5(n - 1) + find_rect_num_5(n - 2) + find_rect_num_5(n - 3) + find_rect_num_5(n - 4)\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return 2 * (n - 1) + find_rect_num(n - 1)\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 2\n\n    i = 1\n    result = 1\n\n    while i < n:\n        result = result * (i + 1)\n        i += 1\n\n    return result", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    Given an integer n, return the nth n-th rectangular number.\n\n    >>> find_rect_num(4)\n    20\n    \"\"\"\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            res += i * j\n    return res\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    result = 1\n    for i in range(n):\n        result = result + i\n    return result\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n: int) -> int:\n    if n == 1:\n        return 1\n    # 2~(n-1)\u662fn(n-1)/2\u4e2a\u6b63\u65b9\u5f62\n    # 2~(n-1)\u90fd\u5305\u542b\u5728n-1\u7684\u6b63\u65b9\u5f62\u4e2d\n    # 2~(n-1)\u7528n-1\u7684\u6b63\u65b9\u5f62\u6765\u8868\u793a\n    # n-1\u7684\u6b63\u65b9\u5f62\uff0c\u5de6\u4e0a\u89d2\u4e3a(0,0),\u53f3\u4e0b\u89d2\u4e3a(n-1,n-1)\n    # 1~n-2\u662fn-1\u7684\u6b63\u65b9\u5f62\u7684\u6b63\u65b9\u5f62\uff0c\u5de6\u4e0a\u89d2\u4e3a(0,0),\u53f3\u4e0b\u89d2\u4e3a(n-2,n-2)\n    # 1~n-2\u7528(n-1,n-1)\u7684\u6b63\u65b9\u5f62\u6765\u8868\u793a\n    # n-1\u7684\u6b63\u65b9\u5f62\u5206\u6210n-1\u4e2a\u6b63\u65b9\u5f62\uff0c\u6bcf\u4e2a\u6b63\u65b9\u5f62\u7684\u5de6\u4e0a\u89d2\u4e3a(0,0),\u53f3\u4e0b\u89d2\u4e3a(0,0)\n    # 2~(n-1)\u7528(n-1,n-1)\u7684\u6b63\u65b9\u5f62\u6765\u8868\u793a\n    return find_rect_num(n - 1) + 1\n\ndef find_rect_num_0(n: int) -> int:\n    if n == 1:\n        return 1\n    return n * find_rect_num(n - 1)\n\ndef find_rect_num_2(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return (n - 1) * (n - 1) * find_rect_num(n - 1) + 2\n\ndef find_rect_num_3(n: int) -> int:\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    return (n - 1) * (n - 1) * (n - 1) * find_rect_num(n - 1) + 2\n\ndef find_rect", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    # number of rows and columns\n    r = 1\n    c = 1\n    num = 1\n    while num <= n:\n        if num == n:\n            break\n        num += c\n        c += 1\n    return num\n\ndef find_rect_num(n):\n    # number of rows and columns\n    r = 1\n    c = 1\n    num = 1\n    while num <= n:\n        if num == n:\n            break\n        num += c\n        c += 1\n    return num\n\ndef find_rect_num(n):\n    # number of rows and columns\n    r = 1\n    c = 1\n    num = 1\n    while num <= n:\n        if num == n:\n            break\n        num += c\n        c += 1\n    return num\n\n# print(find_rect_num(4))\n# print(find_rect_num(5))\n# print(find_rect_num(6))\n# print(find_rect_num(7))\n# print(find_rect_num(8))\n# print(find_rect_num(9))", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    r = 1\n    while r ** 2 < n:\n        r += 1\n    while r ** 2 > n:\n        r -= 1\n    return r ** 2\n\n\ndef find_rect_num2(n):\n    r = 1\n    while r ** 2 < n:\n        r += 1\n    if r ** 2 == n:\n        return r ** 2\n    else:\n        while r ** 2 > n:\n            r -= 1\n        return r ** 2\n\n\ndef find_rect_num3(n):\n    if n == 0:\n        return 0\n    r = 1\n    while r ** 2 <= n:\n        r += 1\n    if r ** 2 == n:\n        return r ** 2\n    else:\n        return find_rect_num3(n - r ** 2)\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+7+8+9+10)*(1+2+3+4+5+6+", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    if n < 1:\n        return -1\n    result = 1\n    for i in range(1,n+1):\n        result += result\n        result *= i\n    return result\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(numerator,denominator,n):\n    num_list = list(str(numerator))\n    den_list = list(str(denominator))\n    return int(num_list[n-1]) + int(den_list[n-1]) % 10\n\n# Test", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a, b, n):\n    return (a * 10 ** n) + b\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(num1, num2, n):\n    #Your code here\n    pass\n\ndef test():\n    assert find_Nth_Digit(1,2,1) == 5\n    assert find_Nth_Digit(3,5,2) == 7\n    assert find_Nth_Digit(5,5,2) == 2\n    assert find_Nth_Digit(10,10,2) == 1\n    assert find_Nth_Digit(100,100,2) == 0\n    assert find_Nth_Digit(1,2,3) == None\n    assert find_Nth_Digit(1,1,10) == None\n\ntest()", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(m,n,n_th_digit):\n    #     m = 10\n    #     n = 5\n    #     n_th_digit = 3\n    #     s = (m + n) / 2\n    #     # r = s % 1\n    #     r = 0\n    #     if n_th_digit == 1:\n    #         print(r)\n    #         return r\n    #     elif n_th_digit == 2:\n    #         r = s\n    #         print(r)\n    #         return r\n    #     elif n_th_digit == 3:\n    #         r = (s - m) / n\n    #         print(r)\n    #         return r\n    #     elif n_th_digit == 4:\n    #         r = (s - n) / m\n    #         print(r)\n    #         return r\n    #     elif n_th_digit == 5:\n    #         r = (s - m) / n\n    #         print(r)\n    #         return r\n    #     elif n_th_digit == 6:\n    #         r = (s - n) / m\n    #         print(r)\n    #         return r\n    #     elif n_th_digit == 7:\n    #         r = (s - m) / n\n    #         print(r)\n    #         return r\n    #     elif n_th_digit == 8:\n    #         r = (s - n) / m\n    #         print(r)\n    #         return r\n    #     elif n_th_digit == 9:\n    #         r = (s - n) / m\n    #         print(r)\n    #         return r\n    #     else:\n    #         print(\"Invalid Input\")\n    #         return None\n\n    return n_th_digit\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(start, end, N):\n    # write your code here\n    if N <= len(str(start)):\n        return find_Nth_Digit(start, end, N)\n    else:\n        return int(str(start)[N-1])\n\n\n# +", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\n#Method 1 : Using Nested Loop\ndef find_Nth_Digit(n,a,b):\n    m = a*b\n    for i in range(10):\n        if n == 1:\n            return i\n        if m > 9:\n            a = a*10\n            b = b*10\n            m = a*b\n            continue\n        if m == 1:\n            return i\n        if m == 0:\n            return 9\n\n#Method 2 : Using Recursion\ndef find_Nth_Digit_Using_Recursion(n,a,b):\n    if n == 1:\n        return 0\n    return int(n/2*find_Nth_Digit_Using_Recursion(n-1,a,b) + find_Nth_Digit_Using_Recursion(n/2,a,b))", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(A,B,N):\n\n    if N < 1 or N > 9:\n        print \"Please input a value between 1 and 9\"\n    elif N == 1:\n        return A\n    elif N == 2:\n        return B\n    elif A > B:\n        A,B = B,A\n    N -= 1\n    if A > 10:\n        A,B = B,A\n    return find_Nth_Digit(A/10**(N-1),B/10**(N-1),N)\n    ", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1,num2,n):\n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    :param num1: first number\n    :param num2: second number\n    :param n: nth digit\n    :return: digit\n    \"\"\"\n    result = 0\n    if num1 == num2:\n        result = find_Nth_Digit(num1,num1,n)\n    elif num1 > num2:\n        result = find_Nth_Digit(num1 - 1, num2, n)\n    else:\n        result = find_Nth_Digit(num2 - 1, num1, n)\n    return result\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(N, A, B):\n    if (N == 0):\n        return 0\n    if (N == 1):\n        return A\n    return find_Nth_Digit(N - 1, A, B) + B\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(x,y,n):\n    assert n>0 and n<10,\"invalid n\"\n    if n == 1:\n        return x+y\n    elif n == 2:\n        return x+y*10\n    elif n == 3:\n        return x*100 + y*1000\n    elif n == 4:\n        return x*10000 + y*100000\n    elif n == 5:\n        return x*1000000 + y*10000000\n    elif n == 6:\n        return x*100000000 + y*1000000000\n    elif n == 7:\n        return x*10000000000 + y*100000000000\n    elif n == 8:\n        return x*1000000000000 + y*10000000000000\n    elif n == 9:\n        return x*100000000000000 + y*1000000000000000\n    else:\n        return x*100000000000000000 + y*1000000000000000000\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(list_of_mixed):\n    \"\"\"\n    Sort a given mixed list of integers and strings.\n    \"\"\"\n    #Your code here\n    list_of_strings = list(filter(lambda x: isinstance(x, str), list_of_mixed))\n    list_of_integers = list(filter(lambda x: not isinstance(x, str), list_of_mixed))\n\n    if len(list_of_integers) > 0:\n        list_of_integers.sort()\n    if len(list_of_strings) > 0:\n        list_of_strings.sort()\n\n    return sorted(list_of_integers + list_of_strings)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(lst):\n    result = []\n    for i in range(len(lst)):\n        if type(lst[i]) == int:\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n\n    result.sort()\n    return result", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    int_list=[]\n    string_list=[]\n    for item in mixed_list:\n        if isinstance(item,int):\n            int_list.append(item)\n        elif isinstance(item,str):\n            string_list.append(item)\n    #print(int_list,string_list)\n    int_list.sort()\n    string_list.sort()\n    #print(int_list,string_list)\n    final_list=[]\n    for item in int_list:\n        final_list.append(item)\n    for item in string_list:\n        final_list.append(item)\n    return final_list\n\n#print(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(lst):\n    new_lst = []\n    for item in lst:\n        if type(item) == int:\n            new_lst.append(item)\n        elif type(item) == str:\n            new_lst.append(item)\n    new_lst.sort()\n    return new_lst\n\n\n# +\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(lst):\n    mixed_list = []\n    string_list = []\n    int_list = []\n    for item in lst:\n        try:\n            int_list.append(int(item))\n        except ValueError:\n            string_list.append(item)\n    for item in int_list:\n        mixed_list.append(item)\n    for item in string_list:\n        mixed_list.append(item)\n    mixed_list.sort()\n    return mixed_list\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(l):\n    return sorted(l)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    '''\n    Receives a mixed list of integers and strings\n    Returns a sorted list\n    '''\n    # your code here\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(L):\n    # your code here\n    if L == None:\n        return L\n    elif isinstance(L, str):\n        return L\n    else:\n        return sorted(L)", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(l):\n    return sorted(l)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list)\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    return len(set(lst).intersection(set(range(2, len(lst) + 1, 2))))", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(numbers):\n    \"\"\"\n    This function finds the divison of first even and odd number of a given list.\n    \"\"\"\n    # TODO\n    return len(numbers) // 2\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(number_list):\n    odd_numbers=[]\n    even_numbers=[]\n    for number in number_list:\n        if number%2==0:\n            even_numbers.append(number)\n        else:\n            odd_numbers.append(number)\n    return len(even_numbers)/len(odd_numbers)", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(numbers):\n    if len(numbers)==0:\n        return 0\n    elif len(numbers)==1:\n        return 0\n    else:\n        even_sum=0\n        odd_sum=0\n        for number in numbers:\n            if number%2==0:\n                even_sum+=number\n            else:\n                odd_sum+=number\n        return even_sum/odd_sum\n\n\n# +", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    even_lst=[]\n    odd_lst=[]\n    for i in lst:\n        if i%2==0:\n            even_lst.append(i)\n        else:\n            odd_lst.append(i)\n    even_lst=sorted(even_lst)\n    odd_lst=sorted(odd_lst)\n    div_lst=[]\n    for i in even_lst:\n        for j in odd_lst:\n            div_lst.append(i/j)\n    div_lst=sorted(div_lst)\n    return div_lst", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(arr):\n    even = [x for x in arr if x % 2 == 0]\n    odd = [x for x in arr if x % 2 == 1]\n    if len(even) != 0:\n        return len(even)//len(odd)\n    else:\n        return len(odd)//len(even)\n\n\n# # %load test_div_even_odd.py", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(num):\n    len_num = len(num)\n    even_num = [num[i] for i in range(len_num) if i%2 == 0]\n    odd_num = [num[i] for i in range(len_num) if i%2 == 1]\n    return even_num,odd_num\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(list):\n    list=sorted(list)\n    i=0\n    j=len(list)-1\n    count=0\n    while i<=j:\n        if list[i]%2==0:\n            count+=1\n            if j==i+count-1:\n                return count\n            i+=1\n        else:\n            j-=1\n    return 0\n\ndef test_div_even_odd():\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\n\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(n):\n    i = 0\n    count_even = 0\n    count_odd = 0\n    while i < len(n):\n        if n[i] % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        i += 1\n    return count_even // count_odd\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(list):\n    if list==None:\n        return 0\n    if len(list)==1:\n        return list\n    if len(list) % 2 == 0:\n        return div_even_odd(list[:len(list)//2]) + div_even_odd(list[len(list)//2:])\n    else:\n        return list[0]\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(str1):\n    s=list(str1)\n    a=0\n    while a<len(s)-1:\n        if s[a]==s[a+1]:\n            s[a],s[a+1]=s[a+1],s[a]\n            a+=1\n        else:\n            a+=1\n    return ''.join(s)\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    \"\"\"\n    Sorting the input string\n\n    Input:\n    string: string to sort\n\n    Return:\n    string sorted\n    \"\"\"\n    return \"\".join(sorted(string))\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(str1):\n    from collections import Counter\n    # print(Counter(str1))\n    if Counter(str1) == Counter(list(str1[1:-1])):\n        return str1\n    else:\n        print(\"unable to arrange string\")\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    arr=list(string)\n    max_len=len(string)\n    for i in range(max_len-1):\n        for j in range(i+1,max_len):\n            if arr[i]==arr[j]:\n                arr[i],arr[j]=arr[j],arr[i]\n                return \"\".join(arr)\n    return \"\".join(arr)\n\n#arr[i],arr[j]=arr[j],arr[i]", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\n# +\ndef rearange_string(string):\n    string = list(string)\n    for i in range(len(string)):\n        if i == 0:\n            string[i], string[i+1] = string[i+1], string[i]\n        elif i == len(string)-1:\n            string[i], string[i-1] = string[i-1], string[i]\n        else:\n            string[i], string[i-1] = string[i-1], string[i]\n    return ''.join(string)\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(s):\n    n = len(s)\n    if n < 2:\n        return []\n    res = []\n    for i in range(n):\n        if i > 0 and s[i] == s[i-1]:\n            continue\n        else:\n            res.append(s[i])\n    return ''.join(res)\n    ", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(s):\n    #your code here\n    res = list(s)\n    m = 0\n    while m<len(res)-1:\n        if res[m]==res[m+1]:\n            res[m],res[m+1]=res[m+1],res[m]\n            m+=1\n    return ''.join(res)\n\n\n# -\n\n# # 5.Finding the missing and duplicated numbers\n\n# +", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(st):\n    st_lis = list(st)\n    print(st_lis)\n    for i in range(len(st_lis)):\n        if i==len(st_lis)-1:\n            print(i)\n        elif i==0:\n            print(i)\n    print(st_lis)\n    return st_lis\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    rearranged_string = list(string)\n    rearranged_string_set = set(rearranged_string)\n    # print(rearranged_string_set)\n    num_unique_letters = len(rearranged_string_set)\n    rearranged_string.sort()\n    # print(rearranged_string)\n    return \"\".join(rearranged_string) if num_unique_letters == 2 else rearranged_string\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    if len(string)<3:\n        return string\n    char_list = list(string)\n    for i in range(len(string)):\n        if i>0 and char_list[i]==char_list[i-1]:\n            char_list[i],char_list[i-1] = char_list[i-1],char_list[i]\n    return ''.join(char_list)"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(data):\n    # your code here\n    from collections import Counter\n    c = Counter(sum(i, ()) for i in data)\n    return c", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\ndef freq_element(lst):\n    print(Counter(item for sublist in lst for item in sublist))", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(data):\n    d = {}\n    for i in data:\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\ndef freq_element(lis):\n    if type(lis) != list:\n        return {lis: 1}\n    return Counter(lis[0] for lis in lis)\n\n#freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(L):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n    return Counter(map(sum, L))\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(list_of_list):\n    # Write your code here\n    dict = {}\n    for x in list_of_list:\n        for e in x:\n            if e not in dict:\n                dict[e] = 1\n            else:\n                dict[e] += 1\n    return dict\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\n\n\ndef freq_element(l):\n    \"\"\"\n    >>> freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    \"\"\"\n    return Counter(i for l in l for i in l)\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(list_of_lists):\n    return Counter(chain.from_iterable(list_of_lists))\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(lst):\n    res = {}\n    for x in lst:\n        for y in x:\n            if y in res:\n                res[y] += 1\n            else:\n                res[y] = 1\n    return res\n\ndef freq_element(lst):\n    return Counter(sum(lst, ()))\n\n#%%", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(list_of_lists):\n    # create an empty dictionary\n    freq_dict = dict()\n\n    for list_ in list_of_lists:\n        for element in list_:\n            # increment the value of the dict for the element\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    return freq_dict"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(inputlist):\n    \"\"\"\n    Filter the numbers from the input list that are even\n    Args:\n        inputlist (list): List of numbers\n    Returns:\n        list: Return a list of even numbers from the inputlist\n    \"\"\"\n    return list(filter(lambda x: x%2==0,inputlist))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(list_numbers):\n    return [x for x in list_numbers if x%2 == 0]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return [number for number in numbers if number % 2 == 0]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(nums):\n    return [x for x in nums if x%2 == 0]\n\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x % 2 == 0, lst))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x % 2 == 0, lst))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x%2==0, numbers))\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n# A non-repetitive number is an element that has no repeated value in the array.\n# To check a number is a repetitive element or not we can use dictionary in python.\n# A dictionary has an advantage over a list in that it can only have unique values.\n\ndef find_Sum(arr,num):\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    print(d)\n    return sum(d.values())\n\n# To solve this problem we can use the below trick.\ndef find_Sum(arr,num):\n    print(arr)\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    print(d)\n    return sum([i for i in d.values() if i < num])", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(a,n):\n    total = 0\n    i = 0\n    while i < n:\n        if a[i] in a:\n            total += a[i]\n        i += 1\n    return total\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_sum(arr,k):\n    sums = {}\n    for x in arr:\n        if x in sums.keys():\n            sums[x] += 1\n        else:\n            sums[x] = 1\n    return sum([y for x,y in sums.items() if y > 1])\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(a, k):\n    res = 0\n    setA = set(a)\n    for a in setA:\n        for b in a:\n            if a == k:\n                res += 1\n            else:\n                res += a\n    return res\n\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_sum(a, n):\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\tif n > len(a):\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn a[n-1] + find_sum(a, n-1)\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_sum(arr,sum):\n    return sum - sum(set(arr))\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(array, k):\n    # create a set of all elements\n    s = set(array)\n    # create a set of all repeated elements\n    r = set()\n    for e in s:\n        if e in r:\n            r.remove(e)\n        else:\n            r.add(e)\n    # check for sum of repeated elements\n    sum = 0\n    for e in r:\n        sum += e\n    return sum", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(array, n):\n    d = {}\n    for i in array:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    print(d)\n    return sum(v for v in d.values() if v > 1)\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,sum):\n    d = {}\n    total=0\n    for i in range(len(arr)):\n        if arr[i] in d:\n            d[arr[i]]+=1\n        else:\n            d[arr[i]]=1\n        total+=1\n        if total>sum:\n            break\n    return sum-total\n\ndef test_find_Sum():\n    print(find_Sum([1,2,3,1,1,4,5,6],8))\n    print(find_Sum([1,2,3,1,1,4,5,6],7))\n    print(find_Sum([1,2,3,1,1,4,5,6],6))\n    print(find_Sum([1,2,3,1,1,4,5,6],5))\n    print(find_Sum([1,2,3,1,1,4,5,6],4))\n    print(find_Sum([1,2,3,1,1,4,5,6],3))\n    print(find_Sum([1,2,3,1,1,4,5,6],2))\n    print(find_Sum([1,2,3,1,1,4,5,6],1))\n    print(find_Sum([1,2,3,1,1,4,5,6],0))\n    print(find_Sum([1,2,3,1,1,4,5,6],-1))\n    print(find_Sum([1,2,3,1,1,4,5,6],-2))\n    print(find_Sum([1,2,3,1,1,4,5,6],-3))\n    print(find_Sum([1,2,3,1,1,4,5,6],-4))\n    print(find_Sum([1,2,3,1,1,4,5,6],-5))\n    print(find_Sum([1,2,3,1,1,4,5,6],-6))", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(array,sum):\n    dic={}\n    for i in range(len(array)):\n        if array[i] in dic:\n            dic[array[i]]+=1\n        else:\n            dic[array[i]]=1\n    ans=0\n    for i in range(len(array)):\n        if sum-array[i] in dic:\n            ans+=dic[sum-array[i]]\n    return ans\n\n# Test"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n    if \"_\" not in text:\n        return \"No match\"\n    return \"Found a match!\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    pattern = r'(.)\\1+'\n    matches = re.findall(pattern, text)\n    if matches:\n        return \"Found a match!\"\n    return \"No matches.\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    \"\"\"Match a sequence of lower case letters joined with an underscore\"\"\"\n    return re.search(r\"^([a-z]+)(_+[a-z]+)$\", text)\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(input):\n    matches = re.findall(r'(?<=[a-z])([a-z]+)_+(?=[a-z])', input)\n\n    for match in matches:\n        print(\"Found a match!\")\n\ntext_match(\"aab_cbbbc\")", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    \"\"\"Return the text if it contains at least one underscore.\n\n    :param text: The text to be searched\n    :type text: str\n\n    :rtype: str\n    \"\"\"\n    return \"Found a match!\" if \"_\" in text else \"\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    #your code here\n    return \"Found a match!\"\n\n#print(text_match(\"aab_cbbbc\"))", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    \"\"\"\n    Do the work here.\n    \"\"\"\n    print('Found a match!')\n\n\ntext_match(\"aab_cbbbc\")\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    # Write your code here\n    m = re.search(r\"a\\w+b\", text)\n    if m:\n        return \"Found a match!\"\n    else:\n        return \"Nothing found\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    return re.search(r\"a[a-z]+_\\w+\", text)\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n    string = string.split()\n    for s in string:\n        if s.startswith(\"python\"):\n            return (s)\n    return ('Not matched!')\n\n#print(text_match_string(\" python\"))", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text,str):\n    return \"Not matched!\" if text.startswith(str) else \"Matched!\"\n\ndef test_text_match_string():\n    assert text_match_string(\" python\", \"python\")==('Matched!')\n    assert text_match_string(\" python\",\" Rain\")==('Not matched!')\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(word, string):\n    if string.startswith(word):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    text = text.lower()\n    if text[:6] == 'python':\n        return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string\n    \"\"\"\n    new = text.split()\n    for i in range(len(new)):\n        for j in range(len(new[i])):\n            if new[i][0] == text[j:j+len(text)]:\n                return new[i]\n# write your code below this line", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n    return 'Not matched!' if string.startswith('python') else ('Matched!')\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    return 'Not matched!' if text[0] == 'p' else 'Matched!'\n\n# Tests\n# assert text_match_string(\" python\")==('Not matched!')\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    words = text.split(' ')\n    for word in words:\n        if word.isalpha():\n            if word[0] == 'p' or word[0] == 'P':\n                return word\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n\t#TODO\n\traise NotImplementedError()\n\n#\"\"\"\nWrite a function that matches a word at the end of a string."], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    if len(arr) < 2:\n        return 0\n    if len(arr) == 2:\n        return arr[0] if arr[0] == arr[1] else 0\n    return get_gcd(arr[1:]) if arr[0] == arr[1] else get_gcd([x for x in arr[2:]])\n\n\n# Tests", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    \"\"\"\n    Returns the GCD of the elements in the given array.\n\n    Returns the GCD of the given array elements.\n\n    >>> get_gcd([2, 4, 6, 8, 16])\n    2\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return arr[0]\n    else:\n        smaller_g = get_gcd(arr[0: len(arr) // 2])\n        bigger_g = get_gcd(arr[len(arr) // 2: len(arr)])\n\n        if smaller_g == bigger_g:\n            return smaller_g\n        else:\n            return bigger_g * bigger_g\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\nfrom functools import lru_cache\nfrom typing import List\n\n\ndef get_gcd(elements: List[int]) -> int:\n    \"\"\"\n    Find the Greatest Common Divisor of the elements of the list\n    Args:\n        elements (List[int]): list of integers\n\n    Returns:\n        int: GCD of the elements\n    \"\"\"\n    if len(elements) == 1:\n        return elements[0]\n    elements = sorted(elements)\n\n    @lru_cache(maxsize=None)\n    def helper(start, end):\n        if start == end:\n            return elements[start]\n        mid = (start + end) // 2\n        left_gcd = helper(start, mid)\n        right_gcd = helper(mid + 1, end)\n        return max(left_gcd, right_gcd)\n\n    return helper(0, len(elements) - 1)\n\n\n# Test Cases", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(numbers):\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        if numbers[0] == numbers[1]:\n            return numbers[0]\n        else:\n            return numbers[1]\n    min_num = min(numbers)\n    if min_num == 0:\n        return min_num\n    numbers.remove(min_num)\n    return get_gcd(numbers)\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    pass\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(numbers):\n    if numbers is None:\n        raise TypeError\n    # sort numbers from small to big\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i] % numbers[i + 1] == 0:\n            return numbers[i]\n    # all numbers are divisible by the biggest one\n    return numbers[-1]\n\n\ndef test_get_gcd():\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([4]) == 4\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(x):\n    \"\"\"\n    :type x: List[int]\n    :rtype: int\n    \"\"\"\n    if not x:\n        return 0\n    return reduce(lambda a, b: a if b == 0 else b, x, x[0])\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(numbers):\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return min(numbers)\n    a = numbers[0]\n    b = numbers[1]\n    if a == b:\n        return a\n    if a > b:\n        return get_gcd(numbers[1:])\n    return get_gcd(numbers[1:])\n\n\ndef test_get_gcd():\n    assert get_gcd([1, 2, 3, 4, 5, 6, 7]) == 1\n    assert get_gcd([1, 1, 1]) == 1\n    assert get_gcd([1, 2, 3]) == 1\n    assert get_gcd([3, 1]) == 1\n    assert get_gcd([3, 1, 4]) == 1\n    assert get_gcd([1, 3, 1, 1]) == 1\n    assert get_gcd([1, 1, 1, 1, 1]) == 1\n    assert get_gcd([1, 1, 1, 1, 1, 1]) == 1\n    assert get_gcd([1, 1, 1, 1, 1, 1, 1]) == 1\n    assert get_gcd([1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert get_gcd([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert get_gcd([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert get_gcd([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert get_gcd([1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(numbers):\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        sorted_numbers = sorted(numbers)\n        if sorted_numbers[0] % sorted_numbers[1] == 0:\n            return sorted_numbers[0] % sorted_numbers[1]\n        else:\n            return get_gcd([numbers[0], numbers[1]])\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(array):\n    \"\"\"Returns the greatest common divisor of the elements in array\"\"\"\n    if len(array) == 1:\n        return array[0]\n    else:\n        # This is not the most efficient way to do this but it is the easiest\n        # because we don't have to worry about keeping track of the remainder\n        # for each element.\n        n = array[0]\n        for num in array[1:]:\n            if n % num == 0:\n                return n\n            n = num\n        raise Exception(\"No GCD found\")\n\n\ndef test_get_gcd():\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([3, 7, 5, 4, 2]) == 3\n\n"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(numbers):\n    return len(numbers) == len(set(numbers))\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    return len(set(nums)) == len(nums)\n\n# Test cases", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(numbers):\n    if len(numbers) == 1:\n        return True\n    for i in range(0, len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                return False\n    return True\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(array):\n    \"\"\"\n    This function will return True if all the numbers in the array are different from each other else it will return False\n    \"\"\"\n    unique = set(array)\n    return len(unique) == len(array)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\n# Use the max() and min() functions\ndef test_distinct(numbers):\n    \"\"\"\n    :param numbers: A list of numbers\n    :return: True if all the numbers are different from each other, False otherwise\n    \"\"\"\n    if len(numbers) < 2:\n        return True\n    else:\n        return min(numbers) != max(numbers)", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    \"\"\"\n    Returns True if all the numbers are different from each other are not.\n    \"\"\"\n    if len(nums) == 0:\n        return True\n    if len(nums) == 1:\n        return False\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i] == nums[j]:\n                return False\n    return True\n\n\ndef test_distinct():\n    assert test_distinct([1,5,7,9]) == True\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(num_list):\n    for i in range(len(num_list)):\n        for j in range(i+1,len(num_list)):\n            if num_list[i] == num_list[j]:\n                return False\n    return True", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(lst):\n    return len(set(lst)) == len(lst)\n\ndef test_distinct_2(lst):\n    return len(set(lst)) == len(lst)\n\ndef test_distinct_3(lst):\n    return len(lst) == len(set(lst))\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    return len(set(nums)) == len(nums)\n\n#assert test_distinct([1,2,3,1,4,5,6]) == False\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    # First find factorials of a and b\n    f_a = 1\n    for i in range(1,a+1):\n        f_a *= i\n    f_b = 1\n    for i in range(1,b+1):\n        f_b *= i\n    # Check if the last digit of a divides f_b\n    return f_a % f_b", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if a % b == 0:\n        return a/b\n    elif a % b == 1:\n        return a/b\n    elif a % b == 2:\n        return a/b\n    elif a % b == 3:\n        return a/b\n    elif a % b == 4:\n        return a/b\n    elif a % b == 5:\n        return a/b\n    elif a % b == 6:\n        return a/b\n    elif a % b == 7:\n        return a/b\n    elif a % b == 8:\n        return a/b\n    elif a % b == 9:\n        return a/b\n    elif a % b == 10:\n        return a/b\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    result = None\n    assert isinstance(a, int)\n    assert isinstance(b, int)\n    if (a>b):\n        result = compute_Last_Digit(a//b, b) * (a%b)\n    elif (a<b):\n        result = compute_Last_Digit(a%b, b)\n    else:\n        result = a\n    return result\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    # your code here\n    c = 0\n    for i in range(a, b+1):\n        if b % i == 0:\n            c = i\n            break\n    return c\n\n\ndef test_compute_Last_Digit():\n    assert compute_Last_Digit(2, 4) == 2\n    assert compute_Last_Digit(3, 6) == 0\n    assert compute_Last_Digit(4, 12) == 3\n    assert compute_Last_Digit(5, 12) == 0\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\nfrom projecteuler.prime.Sieve import Sieve\n\ndef compute_Last_Digit(a,b):\n    \"\"\"\n        Computes the last digit of a given number.\n    \"\"\"\n    if Sieve.is_prime(a) and Sieve.is_prime(b):\n        if Sieve.is_prime(a*b):\n            return a*b % 10\n        else:\n            return 0\n    else:\n        return None", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    div_val = a % b\n    if(div_val == 0):\n        return compute_Last_Digit(a/b,b)\n    else:\n        return div_val\n\n#print(compute_Last_Digit(2,4))\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\n# +\ndef compute_Last_Digit(a,b):\n    return (a**(b+1))%10\n\ncompute_Last_Digit(2,4)\n\n\n# +\ndef compute_Last_Digit(a,b):\n    return a**(b+1)%10\n\ncompute_Last_Digit(2,4)\n# -\n\n# # Testcases\n#\n# n = 2\n# k = 4\n#\n# n = 1\n# k = 2\n#\n# n = 3\n# k = 3\n\n# +\nimport math\ndef compute_Last_Digit(a,b):\n    return math.factorial(a)**(b+1)%10\n\ncompute_Last_Digit(2,4)\n# -\n\n# # Testcases\n#\n# n = 2\n# k = 4\n#\n# n = 1\n# k = 2\n#\n# n = 3\n# k = 3\n\n# +\nimport math\ndef compute_Last_Digit(a,b):\n    return math.factorial(a)**(b+1)%10\n\ncompute_Last_Digit(2,4)\n\n\n# +\ndef compute_Last_Digit(a,b):\n    return (a**b)%10\n\ncompute_Last_Digit(2,4)\n\n\n# +\ndef compute_Last_Digit(a,b):\n    return a**b%10\n\ncompute_Last_Digit(2,4)\n\n# +\ndef compute_Last_Digit(a,b):\n    return a**b\n\ncompute_Last_Digit(2,4)\n\n# +\ndef compute_Last_Digit(a,b):\n    return a%10**b\n\ncompute_Last_Digit(2,4)\n\n\n# +\ndef compute_Last_Digit(a,b):\n    return a%b\n\ncompute_Last_Digit(2,4)\n# -\n\n# # Testcases\n#\n# n = 2\n# k = 4", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    assert a > 0 and b > 0\n    if b == 0: return 1\n    elif a % b == 0:\n        return compute_Last_Digit(a//b, b-1)\n    elif a % b != 0:\n        return compute_Last_Digit(a//b, b-1)\n\n# This will work but is not the best way to do this\ndef compute_Last_Digit_Iteration(a, b):\n    if b == 0: return 1\n    elif a % b == 0:\n        return compute_Last_Digit_Iteration(a//b, b-1)\n    elif a % b != 0:\n        return compute_Last_Digit_Iteration(a//b, b-1)\n\n# Test Cases", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a, b):\n    \"\"\"\n    Find the last digit when factorial of a divides factorial of b.\n\n    Parameters\n    ----------\n    a : int\n    b : int\n\n    Returns\n    -------\n    int\n    \"\"\"\n    # TODO: Implement your code here\n    if a >= b:\n        return b\n    else:\n        return compute_Last_Digit(a+1, b*a)\n\n\ndef test_compute_Last_Digit():\n    assert compute_Last_Digit(2,4) == 2\n    assert compute_Last_Digit(3,5) == 5\n    assert compute_Last_Digit(3,6) == 1\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if (a * b) % (a * b) == 0:\n        result = (a * b) % (a * b)\n        return result\n    else:\n        result = (a * b) % (a * b)\n        return result\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(num):\n    return num | (num >> 2) | (num >> 4) | (num >> 8)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n    num = bin(num)[2:]\n    bits = [0] * len(num)\n    for i, bit in enumerate(num[::-1]):\n        if int(bit):\n            bits[i] = 1\n        else:\n            bits[i] = 0\n    odd_bits = 0\n    for bit in bits:\n        if bit == 0:\n            odd_bits += 1\n    return int(bin(odd_bits)[2:])\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(n):\n    return n | n >> 1 | n >> 2 | n >> 4\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(n):\n    assert(isinstance(n, int))\n    assert(n >= 0)\n    for i in range(0, len(bin(n))):\n        if(i % 2):\n            n = n + 1\n    return n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    bit_set = 0\n    for i in range(len(bin(num))):\n        if num & (1 << (len(bin(num)) - 1 - i)) > 0:\n            bit_set |= 1 << (len(bin(num)) - 1 - i)\n    return bit_set\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n# Odd number is (1 + 2 + 4 + 8 + 16 + 32 + 64 + 128)\n# So, the answer will be (1 + 2 + 4 + 8 + 16 + 32 + 64 + 128) + 1\n# The answer is 256 + 1\n\ndef odd_bit_set_number(number):\n    return (1 + 2 + 4 + 8 + 16 + 32 + 64 + 128) + 1\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    \"\"\"\n    Set all the odd bits of a number\n    \"\"\"\n    return num | (num - 1)\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    return num | (num >> 1) | (num >> 2) | (num >> 4) | (num >> 8) | (num >> 16) | (num >> 32)\n\n\ndef odd_bit_set_number_optimized(num):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    return num | (num >> 1) | (num >> 2) | (num >> 4) | (num >> 8) | (num >> 16) | (num >> 32)\n\n\ndef odd_bit_set_number_faster(num):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    return num | (num >> 1) | (num >> 2) | (num >> 4) | (num >> 8) | (num >> 16) | (num >> 32) | (num >> 64)\n\n\ndef odd_bit_set_number_faster_optimized(num):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    return num | (num >> 1) | (num >> 2) | (num >> 4) | (num >> 8) | (num >> 16) | (num >> 32) | (num >> 64) | (num >> 128)\n\n\ndef odd_bit_set_number_faster_faster(num):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    return num | (num >> 1) | (num >> 2) | (num >> 4) | (num >> 8) | (num >> 16) | (num >> 32) | (num >> 64) | (num >> 128) | (num >> 256)\n\n\ndef odd_bit_set_number_faster_faster_optimized(num):\n    \"\"\"\n    O(n) time | O(1) space\n   ", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# SOLUTION\ndef odd_bit_set_number(number):\n    return number | (number - 1)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    \"\"\"\n    >>> odd_bit_set_number(10)\n    15\n    >>> odd_bit_set_number(3)\n    3\n    >>> odd_bit_set_number(4)\n    4\n    \"\"\"\n    n = num\n    while n != 0:\n        if (n & 1) == 1:\n            n = n - 1\n        else:\n            n = n >> 1\n    return n\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list_of_list, element=0):\n\t\"\"\"\n\t\tIf an element is specified, return only the first element from that specified element in a two-dimensional list.\n\t\tIf no element is specified, return the entire two-dimensional list.\n\t\"\"\"\n\tif isinstance(element, list):\n\t\tfor x in element:\n\t\t\tif isinstance(x, int):\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\traise ValueError(\"Index Error: Invalid Index provided.\")\n\t\tfinal_list = []\n\t\tfor x in list_of_list:\n\t\t\tif isinstance(x, list):\n\t\t\t\tfinal_list.append(x[element])\n\t\t\telif isinstance(x, int):\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\traise ValueError(\"Index Error: Invalid Index provided.\")\n\t\treturn final_list\n\telif isinstance(element, int):\n\t\tpass\n\telse:\n\t\traise ValueError(\"Index Error: Invalid Index provided.\")\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst,n):\n    return [lst[i][n] for i in range(len(lst))]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, index):\n    return [row[index] for row in matrix]", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(nested_list, n):\n    result = []\n    for i in nested_list:\n        result.append(i[n])\n    return result\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(m,n):\n\tx = [[],[],[]]\n\tif (type(m)!=list):\n\t\tm=[m]\n\tfor i in range(len(m)):\n\t\tif (type(m[i])==list):\n\t\t\tx[n].append(m[i][n])\n\t\telse:\n\t\t\tx[n].append(m[i])\n\treturn x\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l, index=0):\n    return [l[i][index] for i in range(len(l))]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l, i):\n    return [item for item in l if item[i]]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(L,n):\n    return [[x[n] for x in L] for x in L]\n\n#print(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0))\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l, n):\n    return [x[n] for x in l]\n\n\ndef test_1():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\n\ndef test_2():\n    assert specified_element([[1, 2, 3], [4, 5, 6], [7, 1, 9]],0)==[1, 4, 7]\n\n\ndef test_3():\n    assert specified_element([[1, 2, 3], [4, 5, 6], [7, 1, 9]],1)==[2, 5, 9]\n\n\ndef test_4():\n    assert specified_element([['a', 'b', 'c'], ['a', 'b', 'c']],0)==['a', 'a', 'a']\n\n\ndef test_5():\n    assert specified_element([['a', 'b', 'c'], ['a', 'b', 'c']],1)==['b', 'b', 'b']\n\n\ndef test_6():\n    assert specified_element([['a', 'b', 'c'], ['a', 'b', 'c']],2)==['c', 'c', 'c']\n\n\ndef test_7():\n    assert specified_element([['a', 'b', 'c'], ['a', 'b', 'c']],3)==['', '', '']\n\n\ndef test_8():\n    assert specified_element([['a', 'b', 'c'], ['a', 'b', 'c']],4)==['', '', '']\n\n\ndef test_9():\n    assert specified_element([['a', 'b', 'c'], ['a', 'b', 'c']],5)==['', '', '']", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l, index):\n    return [l[x][index] for x in range(len(l))]\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(list_of_list):\n    \"\"\"\n    :param list_of_list:\n    :return: tuple of min length and list of ints\n    \"\"\"\n    return min(map(len, list_of_list))\n\ndef test_min_length_list():\n    \"\"\"\n    Min length list\n    \"\"\"\n    list1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\n    list2 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21]]\n    list3 = [[1], [2, 4, 6, 8], [7, 10, 13, 16]]\n    list4 = [[1], [2, 4, 6, 8], [7, 10, 13, 16, 19]]\n    list5 = [[0], [1, 3], [5, 7], [9, 11]]\n    assert min_length_list(list1) == (1, [0])\n    assert min_length_list(list2) == (2, [0, 19])\n    assert min_length_list(list3) == (4, [1, 2, 10, 13])\n    assert min_length_list(list4) == (5, [1, 2, 10, 13, 19])\n    assert min_length_list(list5) == (4, [0, 1, 5, 9])", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(map(lambda x: len(x), lst))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(l):\n    return (min(map(lambda x: len(x), l)), reduce(lambda x, y: x + y, map(lambda x: x, l)))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(L):\n    if not L:\n        return(0, [])\n    return(min(map(lambda x: (len(x), x), L)))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(li):\n    return min(len(i) for i in li), [i for i in li if len(i) == min(len(i) for i in li)]\n\ndef min_length_list(li):\n    if not li:\n        return None, None\n    minlen = float('inf')\n    minset = []\n    for i in li:\n        if len(i) < minlen:\n            minlen = len(i)\n            minset = [i]\n        elif len(i) == minlen:\n            minset.append(i)\n    return minlen, minset\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(l):\n    return min(map(len, l), key=lambda x: x)\n\n\ndef test_min_length_list():\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(list_of_list):\n    return (lambda : min(map(len, list_of_list)))()\n\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(a):\n    a.sort(key = lambda x:len(x))\n    return a[0]\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min((len(a), a) for a in lst)\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lst):\n    return min(map(len, lst), key=lambda l: l)\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda x: len(x))\n\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda l: l)\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda x: len(x))\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda l: l)\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda x: len(x))\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda l: l)\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda x: len(x))\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda l: l)\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda x: len(x))\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda l: l)\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda x: len(x))\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda l: l)\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda x: len(x))\n\ndef min_length_list(lst):\n    return min(map(len, lst), key = lambda l: l)\n\ndef min_length_list(lst):\n    return"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    return(a**2+b**2==c**2)\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a**2==b**2+c**2 or b**2==a**2+c**2 or c**2==a**2+b**2:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\n# +\ndef check_equilateral(a,b,c):\n    if (a==b) and (b==c):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if((a==b) and (b==c)):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if((a*a)==(b*b)) and (a==b):\n        return True\n    elif((b*b)==(c*c)) and (b==c):\n        return True\n    elif((c*c)==(a*a)) and (c==a):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    s1 = (a+b+c)/2\n    s2 = (a+b-c)/2\n    s3 = (a-b-c)/2\n    s4 = (a-b+c)/2\n    if s1 == s2 and s2 == s3 and s3 == s4:\n        return True\n    else:\n        return False\n\n\n# +\n# Write a function to print check if the triangle is scalene or not.\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n  \"\"\"\n  Function to check if the triangle is equilateral or not.\n  Args:\n    a: integer value of the side a\n    b: integer value of the side b\n    c: integer value of the side c\n  Returns:\n    Boolean value of the result of the check\n  \"\"\"\n  if a == b and b == c and a == c:\n    return True\n  return False\n# TESTING CODE\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if(a**2+b**2==c**2):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a**2 == b**2 and b**2 == c**2 and a**2 == c**2:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base,height):\n    return base*height\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n\ndef is_integer(x):\n    try:\n        int(x)\n        return True\n    except ValueError:\n        return False\n\ndef is_positive(x):\n    return x > 0\n\ndef is_odd(x):\n    return x % 2 == 1\n\ndef is_prime(x):\n    if x == 2:\n        return True\n    if x == 1 or x % 2 == 0:\n        return False\n    for i in range(3,int(x**0.5)+1,2):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_palindrome(x):\n    return x == str(x)[::-1]\n\ndef reverse(x):\n    return int(str(x)[::-1])\n\ndef is_square(x):\n    return x == int(x**0.5)\n\ndef is_palindrome(x):\n    return str(x) == str(x)[::-1]\n\ndef is_prime(x):\n    if x == 2:\n        return True\n    if x == 1 or x % 2 == 0:\n        return False\n    for i in range(3,int(x**0.5)+1,2):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_prime(x):\n    if x < 1 or x % 2 == 0:\n        return False\n    for i in range(3,int(x**0.5)+1,2):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_prime(x):\n    if x < 1:\n        return False\n    if x == 1 or x % 2 == 0:\n        return False\n    for i in range(3,int(x**0.5)+1,2):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_palindrome(x):\n    return str(x) == str(x)[::-1]\n\ndef is_prime(x):\n    if x <", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(w,h):\n    return w*h\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n\ndef test_parallelogram_area():\n    assert parallelogram_area(10,20)==200\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(width,height):\n    return width * height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(length, width):\n    area = length * width\n    return area\n\ndef test_parallelogram_area():\n    assert parallelogram_area(10,20) == 200\n\ndef test_parallelogram_area_edge():\n    assert parallelogram_area(20,10) == 200\n\ndef test_parallelogram_area_error():\n    with pytest.raises(TypeError):\n        assert parallelogram_area(10) == \"error\"\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(x,y):\n    return x*y\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(width,height):\n    return width*height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(length,breadth):\n    return length*breadth\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(s):\n    return s[0] == s[-1]\n\n# =========================================================================================================================================", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n# my input\n#string = \"abcda\"\nstring = \"bbcbc\"\n#output\n#return \"Equal\" if the first and last characters are the same, else return \"Unequal\"\n#my try\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Unequal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n#Write your code here\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(s):\n\tif s[0] == s[-1]:\n\t\treturn \"Equal\"\n\treturn \"Unequal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str1):\n    # Write your code here.\n    if str1[0] == str1[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# assert check_Equality(\"abcda\") == \"Equal\"\n\nnWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    if str[0] != str[-1]:\n        return \"Unequal\"\n    else:\n        return \"Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str1):\n    return str1[0]==str1[-1]\n\n\n# -\n\ncheck_Equality(\"abcda\")\n\n# +", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    first = s[0]\n    last = s[-1]\n    if first == last:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    \"\"\"\n    Returns the character in string that is the first character but not the last character\n    Parameters\n    ----------\n    string : str\n        String to check if first and last character are the same.\n    Returns\n    -------\n    char : str\n        Character in the string that is the first character but not the last character.\n    \"\"\"\n    char = None\n    if string[0] == string[-1]:\n        char = string[0]\n    return char\n\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(array):\n    max_number = max(array)\n    counter = [0] * (max_number + 1)\n    for num in array:\n        counter[num] += 1\n\n    sorted_array = []\n    for i in range(len(array) + 1):\n        for _ in range(counter[i]):\n            sorted_array.append(i)\n    return sorted_array\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    n = len(arr)\n    c = [0] * n\n    for i in arr:\n        c[i-1] += 1\n    res = []\n    for i in range(n):\n        for _ in range(c[i]):\n            res.append(i+1)\n    return res", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    max_value = max(arr)\n    if max_value > 0:\n        for i in range(max_value + 1):\n            count = 0\n            for j in arr:\n                if j == i:\n                    count += 1\n            arr[count] = i\n    return arr", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n\n    temp = 0\n    sorted_arr = [0 for x in range(max(arr) + 1)]\n\n    for i in range(len(arr)):\n        temp += 1\n        sorted_arr[arr[i]] += 1\n\n    count = 0\n    for i in range(len(arr) + 1):\n        sorted_arr[i] += count\n        count += sorted_arr[i - 1]\n\n    for i in range(len(arr) - 1, -1, -1):\n        arr[sorted_arr[arr[i]] - 1] = arr[i]\n\n    return sorted_arr\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(array):\n    \"\"\"\n    Time complexity: O(n + k), where n is the length of the input array and k is the max value.\n    Space complexity: O(k)\n    \"\"\"\n    max_value = max(array)\n    result = [0]*(max_value + 1)\n\n    for number in array:\n        result[number] += 1\n\n    for i in range(len(result)):\n        for j in range(result[i]):\n            result[i+1] += 1\n\n    index = 0\n    for number in array:\n        for i in range(result[number]):\n            array[index] = number\n            index += 1\n\n    return array", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    # TODO: Write the function\n    return None", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    # Write your code here\n    n = len(arr)\n    count = [0] * (n + 1)\n    for a in arr:\n        count[a] += 1\n\n    for i in range(1, n + 1):\n        count[i] += count[i - 1]\n\n    result = [0] * n\n\n    for a in arr:\n        result[count[a] - 1] = a\n        count[a] -= 1\n    return result\n\n# testcase", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(x):\n  \"\"\"\n  Sort an array using counting sort\n  \"\"\"\n  n = len(x)\n  # Find maximum value\n  max_value = max(x)\n  counts = [0]*(max_value+1)\n  # Count number of occurrences for each value\n  for x_val in x:\n    counts[x_val] += 1\n  # Keep counting until all values are sorted\n  for i in range(n,0,-1):\n    x[counts[x[i-1]]-1] = x[i-1]\n    counts[x[i-1]] -= 1\n  return x", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(array):\n    max_element = max(array)\n    max_index = array.index(max_element)\n    max_index_list = [max_index] * max_element\n    for i in array:\n        max_index_list[i - 1] = i\n\n    return max_index_list", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(array):\n    counter = {}\n    for num in array:\n        counter[num] = counter.get(num, 0) + 1\n    output = []\n    for num, count in counter.items():\n        for _ in range(count):\n            output.append(num)\n    return output\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n, t, r):\n    return r**(t-1)", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n,r,t):\n    return r*(r**t-1)/(r-1)**(n-1)\n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(t,n,p):\n\tif n==0:\n\t\treturn 0\n\telif t==0:\n\t\treturn 1\n\telif t==(n-1):\n\t\treturn p\n\telse:\n\t\treturn p*(tn_gp(t-1,n,p))\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(s, t, n):\n    return (s ** t) / factorial(n)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n\treturn a*(1/n) **(t-1)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    if n==1:\n        return a\n    elif n==0:\n        return 0\n    else:\n        return a*tn_gp(a,n-1,t)", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,k):\n    if k==0:\n        return a\n    return tn_gp(a*(k**n),n,k-1)\n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(n,t,a):\n    r=1\n    for i in range(t):\n        r=r*a\n    return r\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n,a,t):\n    n_ = n\n    p_ = a\n    for i in range(0,n-1):\n        n_ *= t\n        p_ *= a\n    return n_\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    return a*(n**t-1)/(n-1)\n\ndef test_tn_gp():\n    assert tn_gp(1,5,2)==16\n    assert tn_gp(1,10,3)==171\n    assert tn_gp(2,10,5)==2216\n    assert tn_gp(1,10,10)==1029725\n    print(\"test_tn_gp passed\")\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    if num%10 != 7:\n        return False\n    else:\n        new = (num-1) % 10\n        if (new * 10) + num > num:\n            return True\n\ndef check(num):\n    return (num - int(num//10)) % 10 == 7\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(number):\n    if number % 10 == 0:\n        return False\n    else:\n        return True\n\n\ndef reverse(number):\n    return int(str(number)[::-1])\n\n\ndef test_check():\n    assert check(70) == False\n    assert check(30) == True\n\n\ndef test_reverse():\n    assert reverse(1234) == 4321\n    assert reverse(2130) == 3210\n\n\ndef test_reverse_check():\n    assert check(reverse(1234)) == False\n    assert check(reverse(2130)) == True", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n\tx = str(n)\n\treverse = str(int(x[::-1]))\n\tif n - int(reverse) == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    return True\n\ndef check(n):\n    return n - 2 == int(str(n)[::-1])\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    return num == (num - str(num))\n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    return (num % 2 == 0 and int(num) == int(num[::-1]) + 1)\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    if n % 10 != 7 or n % 100 == 70:\n        return False\n    i = 0\n    while n > 0:\n        if n % 10 == 7:\n            i += 1\n        n = n / 10\n    if i > 0 and i % 2 == 1:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    return num == (int(num[::-1], 2) - 1)\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    # Write your code here\n    rev = str(n)[::-1]\n    if int(n) == int(rev)+1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n > 0:\n        rev = str(n)[::-1]\n        return int(n) < 2*int(rev)\n    return False\n\n\n# +"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(arr, n):\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(i+1,len(arr)+1):\n            temp += arr[i]*int(\"\".join(arr[i:j]))\n            if temp > max_num:\n                max_num = temp\n    return max_num", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits, k):\n    return digits[-1] * (10 ** len(digits)) + find_Max_Num(digits[:-1], k) if len(digits) > 1 else 0\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(a,b):\n    max_num=0\n    for i in range(b+1):\n        for j in range(b+1):\n            for k in range(b+1):\n                if(a[0]+a[1]+a[2] == i+j+k):\n                    max_num=max(a[0]+a[1]+a[2],max_num)\n    return max_num", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            temp = 0\n            for k in range(i,j+1):\n                temp = temp*10 + digits[k-1]\n            if temp > result:\n                result = temp\n    return result\n\ndef test_1():\n    assert find_Max_Num([1,2,3],3) == 321\n\ndef test_2():\n    assert find_Max_Num([1,2],2) == 21\n\ndef test_3():\n    assert find_Max_Num([1],1) == 1\n\ndef test_4():\n    assert find_Max_Num([],0) == 0\n\ndef test_5():\n    assert find_Max_Num([1,1,1,1,1], 1) == 10000\n\ndef test_6():\n    assert find_Max_Num([9], 1) == 9\n\ndef test_7():\n    assert find_Max_Num([9], 2) == 99\n\ndef test_8():\n    assert find_Max_Num([9], 3) == 999\n\ndef test_9():\n    assert find_Max_Num([9], 4) == 9999\n\ndef test_10():\n    assert find_Max_Num([9], 5) == 99999", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(arr, n):\n    # Write your code here\n    nums = sorted(arr)\n    result = 0\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            temp = nums[i] + nums[j]\n            if temp > result:\n                result = temp\n    return result\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,size):\n    \"\"\"\n    Recursive function to find the largest number that can be formed with the given digits.\n    \n    Args:\n        digits : list of numbers in the range 0-9\n        size : number of digits in the number\n    \n    Returns:\n        integer - largest number that can be formed with the given digits and size\n    \"\"\"\n    if len(digits) == size:\n        return int(''.join(digits))\n    elif len(digits) > size:\n        return 0\n    else:\n        return max(digits + [0], key=lambda x: find_Max_Num(x[1:], size))\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(arr, N):\n    return max(arr) + (N-len(arr)) * min(arr)\n\n# print(find_Max_Num([1,2,3],3))", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(num_list,num_digits):\n    from itertools import permutations\n    num_list = sorted(num_list)\n    max_num = None\n    for perm in permutations(num_list,num_digits):\n        perm = \"\".join(perm)\n        if max_num is None or int(perm) > max_num:\n            max_num = int(perm)\n    return max_num\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(d,k):\n    res = []\n    i = 0\n    while len(res) < k:\n        res.append(d[i])\n        i += 1\n        if i == len(d) - 1:\n            i = 0\n    return \"\".join(res)", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits, num):\n    from itertools import product\n    max_num = 0\n    for num_list in product(digits, repeat=num):\n        curr_num = ''.join(num_list)\n        if int(curr_num) > max_num:\n            max_num = int(curr_num)\n    return max_num\n\n\ndef test_find_Max_Num():\n    import doctest\n    doctest.testmod()\n\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if a>0 and b<0:\n        return True\n    if a<0 and b>0:\n        return True\n    if a>0 and b>0:\n        return False\n    if a<0 and b<0:\n        return False\n    return None\n\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x,y):\n    return(x>0 and y<0) or (x<0 and y>0)\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(x,y):\n    #your code here\n    return (x<0 and y>0) or (x>0 and y<0)", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(x,y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n\n#print(opposite_Signs(-1,1))", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(n1,n2):\n    return n1 > 0 and n2 < 0 or n1 < 0 and n2 > 0\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(n1,n2):\n    if n1 == 0 and n2 != 0:\n        return True\n    elif n1 == 0 and n2 == 0:\n        return False\n    elif n1 == 0 and n2 == 0:\n        return False\n    elif n1 != 0 and n2 != 0:\n        return True\n    elif n1 == 0 and n2 == 0:\n        return False\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(n1, n2):\n    return n1 * n2 < 0\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x,y):\n    return x * y < 0\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(n1,n2):\n    if n1>0 and n2<0:\n        return True\n    elif n1<0 and n2>0:\n        return True\n    elif n1>0 and n2>0:\n        return False\n    elif n1<0 and n2<0:\n        return False\n\ndef opposite_Signs(n1,n2):\n    if n1>0 and n2<0:\n        return True\n    elif n1<0 and n2>0:\n        return True\n    elif n1>0 and n2>0:\n        return False\n    elif n1<0 and n2<0:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if a > 0 and b < 0:\n        return True\n    elif a < 0 and b > 0:\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return n * (3 * n - 1) // 2\n\ndef nth_oct(n):\n    return is_octagonal(n + 1)\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return n**2 == (n + 1)*(2*n + 1)\n\ndef octagonal_number(n):\n    \"\"\"\n    >>> octagonal_number(10)\n    55\n    \"\"\"\n    return (n**2 - n - 1)*(8*n + 1) // 2\n\ndef next_octagonal(n):\n    \"\"\"\n    >>> next_octagonal(10)\n    55\n    \"\"\"\n    return octagonal_number(n+1)\n\ndef prev_octagonal(n):\n    \"\"\"\n    >>> prev_octagonal(10)\n    10\n    \"\"\"\n    return octagonal_number(n-1)\n\ndef nth_octagonal(n):\n    \"\"\"\n    >>> nth_octagonal(10)\n    55\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return prev_octagonal(n-1) + next_octagonal(n)\n\ndef is_pentagonal(n):\n    return n**2 == n*(3*n - 1)\n\ndef pentagonal_number(n):\n    \"\"\"\n    >>> pentagonal_number(10)\n    165\n    \"\"\"\n    return (3*n*(3*n-1)/2 - n)/2\n\ndef next_pentagonal(n):\n    \"\"\"\n    >>> next_pentagonal(10)\n    165\n    \"\"\"\n    return pentagonal_number(n+1)\n\ndef prev_pentagonal(n):\n    \"\"\"\n    >>> prev_pentagonal(10)\n    105\n    \"\"\"\n    return pentagonal_number(n-1)\n\ndef nth_pentagonal(n):\n    \"\"\"\n    >>> nth_pentagonal(10)\n    165\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return prev_pentagonal(n-1) + next_pentagonal(n)\n\ndef is_hexagonal(n):\n    return n**2 == (2*n)*(n-1)\n\ndef hexagonal", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(number):\n    if number % 2 == 0:\n        return False\n    return (number * (3 * number - 1)) / 2\n\ndef nth_octagonal(nth):\n    count = 0\n    while count < nth:\n        count += 1\n        if is_octagonal(count):\n            return count\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    \"\"\"\n    Generate the nth octagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) / 2\n\ndef test_octagonal():\n    for i in range(10):\n        assert is_octagonal(i + 1) == (i * (3 * i + 1)) / 2\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    \"\"\"\n    Parameters\n    ----------\n    n: int\n        number to test for octagonality\n\n    Returns\n    -------\n    True: int\n        octagonal number\n    False: int\n        non-octagonal number\n    \"\"\"\n    return n == (n**2 + 3 * n) // 2\n\n# Tests", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return (n * (n+1)) / 2\n\n\ndef get_nth_octagonal_number(n):\n    result = 0\n    for i in range(1, n+1):\n        result = is_octagonal(i)\n        if result == n:\n            break\n    return result\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return (n*(3*n-1))//2\n\ndef nth_octagonal_number(n):\n    return is_octagonal(n+1)\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return (n * (3 * n - 1)) / 2\n\n\ndef is_palindrome(n):\n    \"\"\"\n    Determine whether a number is a palindrome.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n    n = int(str(n))\n    if n < 10:\n        return True\n    return n == n[::-1]\n\n\ndef triangular(n):\n    \"\"\"\n    Find the nth number in the sequence of triangular numbers.\n    >>> triangular(5)\n    10\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return 0\n    return n * (n + 1) / 2\n\n\ndef is_factorial(n):\n    return n > 0 and all(n % x == 0 for x in range(2, n))\n\n\ndef factorial(n):\n    \"\"\"\n    Return the factorial of n.\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef prime(n):\n    \"\"\"\n    Return True if n is prime, False if n is not prime.\n    >>> prime(10)\n    False\n    >>> prime(7)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for d in range(2, n):\n        if n % d == 0:\n            return False\n    return True\n\n\ndef sieve(limit):\n    \"\"\"\n    Return a list of primes up to limit.\n    >>> sieve(10)\n    [2, 3, 5, 7, 11]\n    \"\"\"\n    primes = []\n    for n in range(2, limit + 1):\n        if prime(n):\n            primes.append(n)\n    return primes\n\n\ndef nth_prime(n):\n    \"\"\"\n    Return the nth prime.\n    >>> nth_prime(10)\n    10\n    \"\"\"\n    p = sieve(n)\n    return p[n - 1]\n\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\n# TODO: Write this function below.\n# You should not modify this function.\n\ndef is_octagonal(num):\n    octagonal = 0\n    for i in range(1,num+1):\n        octagonal += i ** 2\n    if octagonal % 8 == 0:\n        return True\n    return False\n\n# TODO: Check your answer with the solution above.", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(num):\n    \"\"\"\n    Test if num is an octagonal number\n    \"\"\"\n    if (num * (num + 1)) / 2 == num:\n        return True\n    return False\n\ndef nth_octagonal(num):\n    \"\"\"\n    Return the nth octagonal number\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return (num * (num + 1)) / 2\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, max_diff):\n    dp = [[0] * (max_diff + 1) for _ in range(len(arr) + 1)]\n    max_len = 0\n    for i in range(1, len(arr) + 1):\n        for j in range(max_diff + 1):\n            if arr[i - 1] - arr[i - 2] == j:\n                dp[i][j] = dp[i - 1][j] + 1\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n            else:\n                dp[i][j] = 0\n    return max_len\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, k):\n    n = len(arr)\n    dp = [[0] * n for _ in range(k)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(k):\n            if j >= i:\n                dp[j][i] = dp[j][i - 1]\n            else:\n                for k in range(j + 1, min(i + 1, k + 1)):\n                    dp[j][i] = max(dp[j][i], dp[j][k - 1] + 1)\n    return dp[k - 1][n - 1]\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr: list, n: int) -> int:\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if n == 1:\n        return len(arr)\n    if arr[1] == arr[0]:\n        return max(max_len_sub(arr[2:], n), max_len_sub(arr[1:], n))\n    else:\n        return max(max_len_sub(arr[1:], n), max_len_sub(arr[2:], n))\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(a, val):\n    ans = 0\n    for i in range(len(a)):\n        if i == 0 or a[i] != a[i-1]:\n            if a[i] == val:\n                ans += 1\n        else:\n            if a[i] == val:\n                ans = max(ans, ans + 1)\n    return ans\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(a, k):\n    if k <= 0 or k >= len(a):\n        raise ValueError(\"Invalid k value\")\n    table = [[0 for j in range(k + 1)] for i in range(len(a) + 1)]\n    for i in range(1, len(a) + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                table[i][j] = 1\n                continue\n            if a[i - 1] - a[i - 2] == j:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n    return table[len(a)][k]\n\ndef main():\n    array = [2, 5, 6, 3, 7, 6, 5, 8]\n    k = 8\n    print(max_len_sub(array, k))\n\nmain()", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, diff):\n    \"\"\"\n    :param arr: array of integers\n    :param diff: difference of adjacent elements\n    :return: length of max subsequence with diff\n    \"\"\"\n    # base case\n    if not arr:\n        return 0\n\n    # if only one element is present\n    if len(arr) == 1:\n        return 1\n\n    # find the sum of elements in the array\n    sum_arr = sum(arr)\n\n    # check if the sum is greater than the difference\n    if sum_arr > diff:\n        return 0\n\n    # if sum is lesser than difference, start from every index\n    start = 0\n    end = 0\n    len_arr = len(arr)\n\n    # iterate through all the elements of the array\n    for i in range(len_arr):\n        # if the element at start position is greater than the difference, then update start\n        if arr[start] + arr[end] > diff:\n            start += 1\n\n        # if the element at end position is lesser than the difference, then update end\n        if arr[start] + arr[end] < diff:\n            end += 1\n\n        # if the sum of both the elements is greater than the difference, then return the length\n        if arr[start] + arr[end] == diff:\n            return i - start + 1\n\n    return 0\n\narr = [2, 5, 6, 3, 7, 6, 5, 8]\ndiff = 8", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n    res = 0\n    prev = 0\n    for i in range(n):\n        curr = arr[i]\n        if prev == curr:\n            res += 1\n        else:\n            prev = curr\n    return res\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(a, k):\n    '''\n    dp[i][j] represents the maximum length of subsequence with difference between adjacent elements for array from i to j\n    dp[i][j] = max(dp[i + 1][j], dp[i + 1][j + 1] + 1)\n    '''\n    n = len(a)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] - a[j] == k:\n                dp[i][j] = 1 + dp[i + 1][j]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i + 1][j + 1] + 1)\n    return dp[0][-1]\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, n):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] != n:\n            count = 0\n        else:\n            count += 1\n    return count + 1\n\n# Use the below test case for your reference", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(array, diff):\n    \"\"\"\n    Returns the length of the longest subsequence with difference between adjacent elements.\n\n    Parameters\n    ----------\n    array : list of int\n        List of integers\n    diff : int\n        Difference between adjacent elements\n\n    Returns\n    -------\n    int\n        Length of the longest subsequence\n    \"\"\"\n    array.sort()\n    size = len(array)\n    if size <= 1:\n        return size\n\n    dp = [[None] * (diff + 1) for i in range(size + 1)]\n    for i in range(1, size + 1):\n        for d in range(diff + 1):\n            if i == 1:\n                dp[i][d] = 1\n            elif d == 0 or array[i - 1] - array[i - 2] != d:\n                dp[i][d] = 1\n            else:\n                dp[i][d] = dp[i - 1][d] + 1\n\n    return dp[size][diff]\n\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s, d):\n    \"\"\"\n    This function finds all substrings that have sum of digits equal to length of the string.\n    \"\"\"\n    if len(s) <= d:\n        return len(s)\n    elif len(s) == d:\n        return 1\n    else:\n        count = 0\n        for i in range(len(s) - d + 1):\n            if int(s[i:i+d]) == d:\n                count += 1\n        return count + count_Substrings(s[d:], d)\n\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n#print(count_Substrings('112112',6))", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n#Write your code here\ndef count_Substrings(input_str, target_len):\n\treturn len( [i for i, c in enumerate(input_str) if input_str[i+1:].count(c) == target_len] )\n\n#print(count_Substrings('112112',6))", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n#Brute Force\ndef count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)-n+1):\n        t = s[i:i+n]\n        if sum(map(int, t)) == len(t):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,n):\n    \"\"\"\n    :param s: string of length n\n    :param n: number of digits in string\n    :return: count of substrings\n    \"\"\"\n    if n==1:\n        return len(s)\n\n    if n==2:\n        return sum([1 for i in range(len(s)) if s[i] == s[i+1]])\n\n    return count_Substrings(s[1:],n-1)+count_Substrings(s[2:],n-2)\n\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string,sum):\n    count=0\n    for i in range(len(string)-sum+1):\n        total=0\n        for j in range(0,sum):\n            total+=int(string[i+j])\n        if total==sum:\n            count+=1\n    return count", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str1, k):\n    n = len(str1)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        if (n % k) == 0:\n            return count_Substrings(str1[:n//k],k) + count_Substrings(str1[n//k:],k)\n        else:\n            return count_Substrings(str1[:n//k],k) + count_Substrings(str1[n//k+1:],k)\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s,n):\n    if n == 1:\n        return len(s)\n    s = list(s)\n    count = 0\n    for i in range(0,len(s)):\n        if sum(s[i:i+n]) == n:\n            count += 1\n    return count\n    ", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(S,K):\n    n = len(S)\n    count = 0\n    for i in range(n-K+1):\n        s = int(S[i:i+K])\n        if s == K:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s, k):\n    # Your code here\n    result = 0\n    for i in range(len(s)-k+1):\n        for j in range(i+1, len(s)+1):\n            curr_sum = 0\n            for k in range(i, j):\n                curr_sum += int(s[k])\n            if curr_sum == j-i:\n                result += 1\n    return result\n\n\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(numbers):\n    \"\"\"\n    Given a list of numbers, return the smallest number.\n    \"\"\"\n    smallest_num = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest_num:\n            smallest_num = number\n    return smallest_num\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(x):\n    # Your code here\n    return min(x)\n\ndef test_smallest_num():\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n\ntest_smallest_num()\n\n# +", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(l):\n    return min(l)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(arr):\n    \"\"\"\n    Finds the smallest number in an array\n    \"\"\"\n    smallest = arr[0]\n    for i in arr:\n        if i < smallest:\n            smallest = i\n    return smallest\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    # Write your code here\n    # YOUR CODE STARTS HERE\n    return min(nums)\n    # YOUR CODE ENDS HERE\n\n\n# Write a function to find the median of a list.", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(lst):\n    smallest = float(\"inf\")\n    for number in lst:\n        if number < smallest:\n            smallest = number\n    return smallest\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(numbers):\n    \"\"\"\n    Find the smallest number in a list of integers.\n    :param numbers: A list of integers\n    :return: The smallest number in the list\n    \"\"\"\n    # Initialize a counter with the first number\n    smallest = numbers[0]\n    # Loop over the remaining numbers\n    for num in numbers[1:]:\n        # If the current number is smaller than the previous number\n        if num < smallest:\n            # Update the smallest value\n            smallest = num\n    # Return the smallest value\n    return smallest\n\ndef smallest_num_list(numbers):\n    \"\"\"\n    Find the smallest number in a list of integers.\n    :param numbers: A list of integers\n    :return: The smallest number in the list\n    \"\"\"\n    # Initialize a list with the smallest number\n    smallest_nums = []\n    # Loop over the numbers\n    for num in numbers:\n        # If the current number is smaller than the first number in the list\n        if num < smallest_nums[0] or len(smallest_nums) == 0:\n            # Append the current number to the list\n            smallest_nums.append(num)\n        # Otherwise, if the current number is smaller than the first number in the list\n        else:\n            # Compare the current number to the first number in the list\n            if num < smallest_nums[0]:\n                # Change the first number in the list to the current number\n                smallest_nums[0] = num\n    # Return the list of smallest numbers\n    return smallest_nums\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(lst):\n    return min(lst)\n\ndef test_smallest_num():\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n    assert smallest_num([1, 1, 1, 1, 1]) == 1\n    assert smallest_num([0, 10, 20, 1, 45, 99]) == 0\n    assert smallest_num([9, 2, 10, 1, 45, 99, 0, 100]) == 0\n    assert smallest_num([0, 1, 2, 3, 4, 5]) == 0\n    assert smallest_num([0, 1, 2, 3, 4, 5]) == 0\n    assert smallest_num([0, 0, 0, 0, 0, 0]) == 0\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    return min(lst)\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    \"\"\"\n    :param nums: array of numbers\n    :return: smallest number in list\n    \"\"\"\n    nums.sort()\n    return nums[0]\n\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(list_of_tuples):\n    max_diff = 0\n    for i in range(len(list_of_tuples)):\n        for j in range(i+1, len(list_of_tuples)):\n            diff = list_of_tuples[i][0] - list_of_tuples[j][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(pairs):\n    min_ = 0\n    max_ = 0\n    for x, y in pairs:\n        min_ = min(min_, x - y)\n        max_ = max(max_, y - x)\n    return max_ - min_\n\n\ndef test_max_difference():\n    pairs = [(3, 5), (1, 7), (10, 3), (1, 2)]\n    assert max_difference(pairs) == 7\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List\n\n\ndef max_difference(numbers: List[int]) -> int:\n    if len(numbers) < 2:\n        return 0\n    return max(numbers[1:] - numbers[:-1])\n\n\ndef test_max_difference():\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tups):\n    \"\"\"\n    Returns the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(tups) < 2:\n        return 0\n    else:\n        sorted_tups = sorted(tups, key=lambda x: x[0])\n        print(sorted_tups)\n        return sorted_tups[1][0] - sorted_tups[0][0]\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(t):\n    return max([t[i][1] - t[i][0] for i in range(len(t))])\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(t):\n    \"\"\"\n    :param t: tuple list\n    :return: maximum difference between available pairs\n    \"\"\"\n    # TODO: Use heapq.nsmallest() to return the smallest element from t, and the next smallest.\n    #       Subtract the first element from the second to get the difference between the two elements.\n    # TODO: Put the difference into a set to keep track of unique differences.\n    # TODO: Return the max difference from the set.\n    d = set()\n    for i in range(len(t) - 1):\n        d.add(t[i][0] - t[i + 1][0])\n    return max(d)\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nfrom typing import List\n\n\ndef max_difference(values: List[tuple]) -> int:\n    values.sort(reverse=True)\n    return values[0][1] - values[0][0]\n\n\ndef test_max_difference():\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\n\ndef test_max_difference_2():\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2), (4, 2)]) == 6\n\n\ndef test_max_difference_3():\n    assert max_difference([(3, 5), (1, 7), (10, 3)]) == 3\n\n\ndef test_max_difference_4():\n    assert max_difference([(3, 5), (1, 7)]) == 4\n\n\ndef test_max_difference_5():\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\n\ndef test_max_difference_6():\n    assert max_difference([(1, 2)]) == 1\n\n\ndef test_max_difference_7():\n    assert max_difference([]) is None", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(pair_list):\n    max_diff = -1\n    for i in range(0, len(pair_list)):\n        for j in range(i + 1, len(pair_list)):\n            diff = pair_list[j][0] - pair_list[i][0]\n            max_diff = max(diff, max_diff)\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import Tuple\n\n\ndef max_difference(pairs: Tuple[Tuple[int, int]]) -> int:\n    \"\"\"\n    :param pairs: 1st and 2nd number tuple\n    :return: maximum difference between available pairs\n    \"\"\"\n\n    maximum_difference = -1\n    for num1, num2 in pairs:\n        if num1 < num2:\n            maximum_difference = max(maximum_difference, num1 - num2)\n        else:\n            maximum_difference = max(maximum_difference, num2 - num1)\n\n    return maximum_difference\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n#%%"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\nfrom typing import List, Tuple\n\ndef subject_marks(marks: List[Tuple[str, float]]) -> List[Tuple[str, float]]:\n    \"\"\"\n    Sort a list of tuples using lambda.\n    \"\"\"\n    return sorted(marks, key=lambda mark: mark[1], reverse=True)\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\nsubject_marks = lambda marks: sorted(marks, key=lambda mark: mark[1])", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(sub_marks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n    sorted_marks=sorted(sub_marks, key=lambda x: x[1], reverse=True)\n    return sorted_marks\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\nsubject_marks = lambda subject_marks: sorted(subject_marks, key = lambda x: x[1], reverse=True)\n\ndef test_subject_marks():\n    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(l):\n    return sorted(l, key = lambda x: x[1])", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    return sorted(marks, key = lambda x: x[1], reverse = True)\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(t):\n    return sorted(t,key=lambda x:x[1])\n\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\nfrom itertools import groupby\n\ndef subject_marks(marks):\n    \"\"\"\n    A generator function that sorts the list of tuples.\n    \"\"\"\n    for subject, marks in marks:\n        yield subject, marks\n\ndef main():\n    print(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(tupl):\n    \"\"\"\n    :param tupl:\n    :return:\n    \"\"\"\n    return sorted(tupl, key=lambda x:x[1], reverse=True)", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subjects):\n    \"\"\"\n    Given a list of tuples of subject and marks, sort the tuples by the marks in\n    descending order.\n    \"\"\"\n    return sorted(subjects, key=lambda x:x[1], reverse=True)\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(l):\n    \"\"\"Recursive function to find sum of a list\"\"\"\n    if len(l) == 1:\n        return l[0]\n    return recursive_list_sum(l[1:]) + l[0]\n\ndef test_recursive_list_sum():\n    \"\"\"Test cases for recursive_list_sum\"\"\"\n    assert recursive_list_sum([1, 2, [3,4],[5,6]])==21\n\ndef test_recursive_list_sum_empty_list():\n    \"\"\"Test cases for recursive_list_sum\"\"\"\n    assert recursive_list_sum([])==0\n\ndef test_recursive_list_sum_one_element_list():\n    \"\"\"Test cases for recursive_list_sum\"\"\"\n    assert recursive_list_sum([1])==1\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(L):\n    # Base case\n    if not isinstance(L, list):\n        return L\n    if len(L) == 0:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    first = recursive_list_sum(L[0])\n    second = recursive_list_sum(L[1:])\n    return first + second\n# Tests", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n    if len(lst)==0:\n        return 0\n    else:\n        first = lst[0]\n        rest = recursive_list_sum(lst[1:])\n        return first + recursive_list_sum(rest)\n\n\n#22\n# Write a function of recursive string concatenation.", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list_of_numbers):\n\tif len(list_of_numbers)==0:\n\t\treturn 0\n\telif len(list_of_numbers) == 1:\n\t\treturn list_of_numbers[0]\n\telse:\n\t\treturn recursive_list_sum(list_of_numbers[0:len(list_of_numbers)-1]) + list_of_numbers[len(list_of_numbers)-1]\n\n#Test", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if not lst:\n        return 0\n    if isinstance(lst[0], list):\n        return recursive_list_sum(lst[0]) + recursive_list_sum(lst[1:])\n    else:\n        return lst[0] + recursive_list_sum(lst[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(L):\n    total = 0\n    if len(L)==0:\n        return total\n    else:\n        first_item = L[0]\n        total = first_item + recursive_list_sum(L[1:])\n    return total\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(l):\n    \"\"\"\n    Returns the sum of a list of numbers\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        sub_sum = recursive_list_sum(l[1:])\n        return l[0] + sub_sum\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(x):\n    \"\"\"\n    Returns sum of list x\n    \"\"\"\n    if x == []:\n        return 0\n    elif type(x[0]) == int:\n        return x[0] + recursive_list_sum(x[1:])\n    else:\n        return recursive_list_sum(x[0]) + recursive_list_sum(x[1:])\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(x):\n    if type(x) == list:\n        if len(x)==0:\n            return 0\n        else:\n            return x[0]+recursive_list_sum(x[1:])\n    elif type(x) == int:\n        return x\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list_1):\n    if list_1 == []:\n        return 0\n    elif isinstance(list_1[0],int):\n        return sum(list_1[0]) + recursive_list_sum(list_1[1:])\n    elif isinstance(list_1[0],list):\n        return recursive_list_sum(list_1[0]) + recursive_list_sum(list_1[1:])"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(numbers):\n    return numbers.count(True)\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    count = 0\n    for number in lst:\n        if number > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    \"\"\"\n    Returns the number of positive integers in lst\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(a):\n    return len([num for num in a if num > 0])\n\ndef pos_count(a):\n    return sum([num > 0 for num in a])\n\ndef pos_count(a):\n    return sum(1 for num in a if num > 0)", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(l):\n    \"\"\"\n    Counts positive numbers in a list.\n    \"\"\"\n    count = 0\n    for i in l:\n        if i >= 0:\n            count += 1\n    return count\n\nl = [1, -2, 3, -4]", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    return len([x for x in lst if x > 0])\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    \"\"\"\n    Count the number of positive integers in a list.\n    >>> pos_count([1,-2,3,-4])\n    2\n    \"\"\"\n    num = 0\n    for item in lst:\n        if item>0:\n            num+=1\n    return num\n\n\n# +", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(my_list):\n    return len([x for x in my_list if x>0])\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    if len(lst) > 0:\n        return sum([1 if x > 0 else 0 for x in lst])\n    else:\n        return 0\n\ndef test_pos_count():\n    assert pos_count([1,-2,3,-4]) == 2\n\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    count = 0\n    for i in range(1, n+1):\n        count += binom(n, i)\n    return count\n\ndef binom(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binom(n-1, k-1) + binom(n-1, k)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(num):\n    \"\"\"\n    Given an integer, find the number of ways to partition the integer into positive integers that sum to that integer\n    >>> bell_number(2)==2\n    True\n    >>> bell_number(5)==4\n    True\n    >>> bell_number(6)==6\n    False\n    >>> bell_number(7)==10\n    True\n    >>> bell_number(8)==21\n    True\n    >>> bell_number(9)==28\n    True\n    \"\"\"\n    if num < 2:\n        return 1\n    if num == 2:\n        return 2\n    num_partitions = 0\n    for x in range(1,num+1):\n        num_partitions += bell_number(x)\n    return num_partitions\n\ndef test_bell_number():\n    assert bell_number(2) == 2\n    assert bell_number(5) == 4\n    assert bell_number(6) == 6\n    assert bell_number(7) == 10\n    assert bell_number(8) == 21\n    assert bell_number(9) == 28", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    return (1+n)//2\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    a = 1\n    b = 1\n    c = 1\n    for i in range(3, n+1):\n        a, b = b, a+b\n        c = a+b\n    return c\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    assert n>=1\n    if n==1: return 1\n    if n==2: return 2\n    if n==3: return 5\n    if n==4: return 15\n    if n==5: return 52\n    if n==6: return 167\n    if n==7: return 574\n    if n==8: return 1771\n    if n==9: return 630\n    if n==10: return 2112\n    if n==11: return 737\n    if n==12: return 2584\n    if n==13: return 902\n    if n==14: return 3155\n    if n==15: return 1231\n    if n==16: return 4252\n    if n==17: return 1673\n    if n==18: return 5832\n    if n==19: return 2099\n    if n==20: return 8517\n    if n==21: return 3433\n    if n==22: return 13948\n    if n==23: return 51769\n    if n==24: return 19901\n    if n==25: return 79644\n    if n==26: return 318164\n    if n==27: return 1353645\n    if n==28: return 5454596\n    if n==29: return 2021457\n    if n==30: return 8105908\n    if n==31: return 32510385\n    if n==32: return 138165892\n    if n==33: return 553463775\n    if n==34: return 2113891025\n    if n==35: return 853", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n\tif n==1:\n\t\treturn 1\n\treturn bell_number(n-1)+bell_number(n-2)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # if n == 0: return 1\n    # if n == 1: return 1\n    if n <= 1: return 1\n    # if n == 2: return 2\n    bell = [0, 1, 1, 2, 5, 15, 52, 203, 910, 4429, 21789, 113474, 615635, 3337340, 19448620, 110609955, 631053700, 3656515345]\n    res = 0\n    for i in range(len(bell)):\n        if n >= bell[i]:\n            res += bell[i+1] - bell[i]\n    return res\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    \"\"\"\n    Finds the number of ways to partition a set of bell numbers\n    :param n: Number of elements in the set\n    :return: Number of ways\n    \"\"\"\n    pass\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    \"\"\"\n    Given a positive integer n, return the number of ways to partition n.\n\n    If n is even, there is only one way to partition it: a single element.\n\n    If n is odd, there are two ways to partition it.  Let x be the number of elements\n    in the first partition, and y be the number of elements in the second partition.\n    If x + y is even, then the number of ways to partition n is 1 + bell_number(x) + bell_number(y)\n    If x + y is odd, then the number of ways to partition n is bell_number(x) + bell_number(y)\n    \"\"\"\n    if n==1:\n        return 1\n    elif n%2 == 0:\n        return 1\n    else:\n        return bell_number(n//2) + bell_number(n//2) + 1\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] <= arr[1]:\n        for i in range(2, len(arr)):\n            if arr[i - 1] <= arr[i]:\n                return True\n    else:\n        for i in range(2, len(arr)):\n            if arr[i - 1] >= arr[i]:\n                return True\n    return False\n\n# print(is_Monotonic([6, 5, 4, 4]))\n# print(is_Monotonic([5, 4, 5, 4, 3, 2, 3, 1]))\n# print(is_Monotonic([1, 2, 2, 3, 3, 3, 3, 2, 1]))", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    return arr[0] <= arr[1] and arr[1] <= arr[2] and arr[2] <= arr[3]\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(lst):\n    try:\n        if lst[1] >= lst[0] and lst[2] >= lst[1]:\n            return True\n        else:\n            return False\n    except IndexError:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(input_list):\n    return input_list == sorted(input_list) or input_list == sorted(input_list, reverse = True)\n\n#print(is_Monotonic([1, 2, 3, 4, 5, 6]))\n#print(is_Monotonic([6, 5, 4, 4]))\n#print(is_Monotonic([1, 2, 1, 3, 1]))", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(array):\n\n    for i in range(len(array) - 1):\n        if array[i] > array[i + 1]:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(list1):\n\n    \"\"\"\n    Returns true if the array is monotonic in either direction.\n    \"\"\"\n    if list1 == []:\n        return True\n    if list1 == [1]:\n        return True\n    if list1 == [-1]:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    if list1[0] < list1[1]:\n        return False\n\n    for i in range(1, len(list1) - 1):\n        if list1[i] < list1[i-1] and list1[i] > list1[i+1]:\n            return False\n\n    return True", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    return arr == sorted(arr)\n\ndef test_is_Monotonic():\n    assert is_Monotonic([6, 5, 4, 4]) == True\n    assert is_Monotonic([1, 2, 2, 3]) == False\n    assert is_Monotonic([1, 1, 1]) == True\n    assert is_Monotonic([1, 2, 1, 2]) == False", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(a):\n    if len(a) < 2:\n        return True\n    else:\n        if a[0] < a[1]:\n            return all(a[i] >= a[i+1] for i in range(len(a)-1))\n        else:\n            return all(a[i] <= a[i+1] for i in range(len(a)-1))\n\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(L1, L2):\n    if len(L2) == 0:\n        return True\n    if L1[0] == L2[0]:\n        return is_sublist(L1[1:], L2[1:])\n    else:\n        return False", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    try:\n        if len(list2) == 0:\n            return True\n        return list1[0] in list2 and is_sublist(list1[1:],list2[1:])\n    except:\n        return False\n\n\nlist1 = [2,4,3,5,7]\nlist2 = [3,7]", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1, l2):\n    for i in l2:\n        for j in l1:\n            if i == j:\n                return True\n    return False", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(list1, list2):\n\t\"\"\"\n\tWrite a function to check whether a list contains the given sublist or not.\n\t:param list1: list\n\t:param list2: list\n\t:return: bool\n\t\"\"\"\n\tif len(list2) == 0:\n\t\treturn True\n\tfor element in list1:\n\t\tif element in list2:\n\t\t\tlist2.remove(element)\n\t\t\tcontinue\n\t\telse:\n\t\t\treturn False\n\treturn True\n\n# print(is_sublist([2,4,3,5,7],[3,7]))", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(main,sub):\n    return main[0:len(sub)] == sub\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    return list1[:len(list2)]==list2\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(a,b):\n    if len(a)==len(b):\n        for i in range(len(a)):\n            if a[i]!=b[i]:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1,l2):\n    for x in l2:\n        if x in l1:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l,m):\n    if len(l)==0 or len(m)==0: return False\n    else: return m[0] in l and is_sublist(l[1:],m[1:])\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1,l2):\n    l1=list(l1)\n    l2=list(l2)\n    if len(l1)>len(l2):\n        return False\n    else:\n        for i in range(len(l2)):\n            if l1[i]==l2[i]:\n                continue\n            else:\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n# TODO: Write your code here\ndef get_equal(tup, len):\n    for i in tup:\n        if len(i) != len:\n            return False\n    return True", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(data, length):\n    for i in range(len(data)):\n        if len(data[i]) != length:\n            return \"Some tuples have different length\"\n    return \"All tuples have same length\"\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n# All tuples have same length\n\n# Code:\ndef get_equal(tuples, length):\n    result = []\n    for i in tuples:\n        if len(i) == length:\n            result.append(i)\n    return \"All tuples have same length\" if len(result) == len(tuples) else \"Some tuples have different length\"\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuple_list, length):\n    for tuple in tuple_list:\n        if len(tuple) != length:\n            return 'Not All tuples have same length'\n    return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, len):\n    return 'All tuples have same length' if len(tuples) == 0 or max([len(i) for i in tuples]) == len else 'Not all tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tup_list, len_val):\n    for tup in tup_list:\n        if len(tup) != len_val:\n            return 'All tuples have same length'\n    return 'All tuples have different length'\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, len):\n    if len == 1:\n        return True\n    if len > 0:\n        return (get_equal(tuples[1:], len) and tuples[0][0] == tuples[1][0])\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuple_list, length):\n    list_size = len(tuple_list)\n    tuple_size = len(tuple_list[0])\n    if tuple_size != length:\n        return \"Not all tuples have same length\"\n    else:\n        for i in range(0, list_size):\n            if tuple_list[i][1:] != tuple_list[0][1:]:\n                return \"Not all tuples have same length\"\n        return \"All tuples have same length\"", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tupls, size):\n    if len(tupls) == 0:\n        return \"All tuples have same length\"\n    for i in range(len(tupls)):\n        if len(tupls[i]) != size:\n            return \"Not all tuples have same length\"\n    return \"All tuples have same length\"\n\n#print(get_equal([(11, 22, 33), (44, 55, 66)], 3))", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuple_list, length):\n    if not tuple_list:\n        return True\n\n    if len(tuple_list[0]) != length:\n        return False\n\n    for tuple in tuple_list[1:]:\n        if len(tuple) != length:\n            return False\n\n    return 'All tuples have same length'"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lst):\n    n = len(lst)\n    if n <= 1:\n        return lst\n    else:\n        mid = n // 2\n        front, back = comb_sort(lst[:mid]), comb_sort(lst[mid:])\n        return merge(front, back)\n\n\ndef merge(front, back):\n    i = 0\n    j = 0\n    out = []\n    while i < len(front) and j < len(back):\n        if front[i] < back[j]:\n            out.append(front[i])\n            i += 1\n        else:\n            out.append(back[j])\n            j += 1\n    return out + front[i:] + back[j:]\n\n\ndef test_comb_sort(n):\n    test_list = generate_test_list(n)\n    sorted_list = comb_sort(test_list)\n    assert sorted_list == sorted(test_list)\n\n\ndef generate_test_list(n):\n    return list(range(10))\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lst):\n    if len(lst) <= 1:\n        return lst\n    n = len(lst)\n    i = 1\n    while n > 1:\n        j = 0\n        for k in range(0, n-i):\n            if lst[k] > lst[k+i]:\n                temp = lst[k]\n                lst[k] = lst[k+i]\n                lst[k+i] = temp\n                j += 1\n        i += 1\n        if j == 0:\n            return lst\n    return lst", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lst):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\n# + deletable=false editable=false nbgrader={\"cell_type\": \"code\", \"checksum\": \"d64e4fa5e391f62543634710026b7882\", \"grade\": true, \"grade_id\": \"cell-2b84c8b0c83a5546\", \"locked\": true, \"points\": 5, \"schema_version\": 3, \"solution\": false}\n# Test case", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nfrom random import randint\n\ndef comb_sort(l):\n    for n in range(len(l)):\n        i = randint(0, n)\n        tmp = l[i]\n        l[i] = l[n]\n        l[n] = tmp\n    return l\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(L):\n    if L == []:\n        return L\n    else:\n        n = len(L)\n        if n < 2:\n            return L\n        k = n\n        while k > 1:\n            k = k // 2\n        L_comb = []\n        for i in range(0, n):\n            L_comb.append(L[i])\n        for i in range(0, k):\n            for j in range(0, len(L_comb)):\n                L_comb[j], L_comb[j + k] = L_comb[j + k], L_comb[j]\n        return L_comb\n\n\ndef comb_sort_test():\n    \"\"\"Tests comb sort\"\"\"\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([2, 4, 1, 3, 8]) == [1, 2, 3, 4, 8]\n    assert comb_sort([2, 4, 1, 3, 8]) == [1, 2, 3, 4, 8]\n\n\ndef comb_sort_alt_test():\n    \"\"\"Tests comb sort\"\"\"\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([2, 4, 1, 3, 8]) == [1, 2, 3, 4, 8]\n    assert comb_sort([2, 4, 1, 3, 8]) == [1, 2, 3, 4, 8]\n\n\ndef test_sort_lists():\n    \"\"\"Tests the comb sort functions against the sorting algorithms in Python's stdlib\"\"\"\n    assert sorted([5, ", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(list_of_numbers):\n    def comb_sort_helper(list_of_numbers, list_of_indexes):\n        if len(list_of_numbers) == 1:\n            return list_of_numbers[0]\n\n        if len(list_of_numbers) == 2:\n            if list_of_numbers[0] > list_of_numbers[1]:\n                return comb_sort_helper([list_of_numbers[1], list_of_numbers[0]], list_of_indexes)\n            else:\n                return comb_sort_helper([list_of_numbers[0], list_of_numbers[1]], list_of_indexes)\n\n        if list_of_numbers[0] > list_of_numbers[1]:\n            return comb_sort_helper([list_of_numbers[1], list_of_numbers[0]], list_of_indexes)\n        else:\n            return comb_sort_helper([list_of_numbers[0], list_of_numbers[1]], list_of_indexes)\n\n    for _ in range(len(list_of_numbers) - 2):\n        for i in range(len(list_of_numbers) - 2):\n            if list_of_numbers[i] > list_of_numbers[i + 1]:\n                list_of_indexes = list(range(0, len(list_of_numbers)))\n                list_of_numbers[i], list_of_numbers[i + 1] = list_of_numbers[i + 1], list_of_numbers[i]\n                comb_sort_helper(list_of_numbers, list_of_indexes)\n\n    return list_of_numbers", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nfrom itertools import combinations\nfrom random import shuffle\n\n\ndef comb_sort(lst):\n    \"\"\"\n    Sort a list using the comb sort algorithm.\n\n    :param lst: the list to be sorted\n    :return: the sorted list\n\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    >>> comb_sort([20, 37, 5, 32, 79, 45])\n    [20, 32, 37, 45, 5, 79]\n    >>> comb_sort([45, 100, 79, 15, 55])\n    [5, 100, 15, 45, 79, 55]\n    >>> comb_sort([0, 1, 2, 3, 4, 5])\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError('The list must be of type list')\n\n    if not lst:\n        return lst\n\n    shuffle(lst)\n\n    while True:\n        found = False\n        for i in range(len(lst) - 1):\n            for j in combinations(range(i + 1, len(lst)), 2):\n                if lst[i] > lst[j[0]] and lst[i] > lst[j[1]]:\n                    lst[i], lst[j[0]] = lst[j[0]], lst[i]\n                    lst[j[1]], lst[i] = lst[i], lst[j[1]]\n                    found = True\n                    break\n            if found:\n                break\n\n    return lst", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lst):\n    sorted_list = []\n    while len(lst) > 0:\n        i = 0\n        while i < len(lst) and lst[i] <= lst[i + 1]:\n            i += 1\n        sorted_list.append(lst[i])\n        lst.remove(lst[i])\n    return sorted_list\n\ndef test_comb_sort():\n    print(comb_sort([5, 15, 37, 25, 79]))\n\n\ndef main():\n    test_comb_sort()\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(l):\n    if len(l) < 2:\n        return l\n    middle = len(l) // 2\n    a = l[:middle]\n    b = l[middle:]\n    return comb_sort(a) + comb_sort(b)\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(A):\n    \"\"\"\n    >>> A = [5, 15, 37, 25, 79]\n    >>> comb_sort(A)\n    [5, 15, 25, 37, 79]\n    >>> B = [11, 13, 17, 19, 23]\n    >>> comb_sort(B)\n    [11, 13, 17, 19, 23]\n    >>> C = [99, 88, 77, 66, 55]\n    >>> comb_sort(C)\n    [55, 66, 77, 88, 99]\n    >>> D = [12, 11, 13, 17, 19, 23, 29]\n    >>> comb_sort(D)\n    [11, 12, 13, 17, 19, 23, 29]\n    \"\"\"\n    def comb_sort_rec(A, n):\n        if n < 2:\n            return A\n        else:\n            middle = n // 2\n            left_half = A[:middle]\n            right_half = A[middle:]\n            return comb_sort_rec(comb_sort_rec(left_half, middle), middle) + comb_sort_rec(right_half, middle)\n\n    return comb_sort_rec(A, len(A))\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    for x in range(1,int(num**(1/2))+1):\n        if num == (x**2) - (y**2):\n            return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(x):\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    elif x == 1:\n        return False\n    elif x == 2:\n        return True\n    elif x == 3:\n        return False\n    elif x == 4:\n        return True\n    elif x == 5:\n        return False\n    elif x == 6:\n        return True\n    elif x == 7:\n        return False\n    elif x == 8:\n        return True\n    elif x == 9:\n        return False\n    elif x == 10:\n        return True\n    elif x == 11:\n        return False\n    elif x == 12:\n        return True\n    elif x == 13:\n        return False\n    elif x == 14:\n        return True\n    elif x == 15:\n        return False\n    elif x == 16:\n        return True\n    elif x == 17:\n        return False\n    elif x == 18:\n        return True\n    elif x == 19:\n        return False\n    elif x == 20:\n        return True\n    elif x == 21:\n        return False\n    elif x == 22:\n        return True\n    elif x == 23:\n        return False\n    elif x == 24:\n        return True\n    elif x == 25:\n        return False\n    elif x == 26:\n        return True\n    elif x == 27:\n        return False\n    elif x == 28:\n        return True\n    elif x == 29:\n        return False\n    elif x == 30:\n        return True\n    elif x == 31:\n        return False\n    elif x == 32:\n        return True\n    elif x == 33:\n        return False\n    elif x == 34:\n        return True\n    elif x == 35:\n        return False\n    elif x == 36:\n        return True\n    elif x == 37:\n        return False\n    elif x == 38:\n        return True\n    elif x == 39:\n        return False\n    elif x == 40:\n        return True\n    elif x == 41:\n        return False\n    elif x == 42", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(number):\n    return number == sum([i**2 for i in range(1,int(number/2)+1)])\n\ndef test_dif_square():\n    assert dif_Square(5) == True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    if n == 1:\n        return False\n    if n % 4 == 0:\n        return False\n    if n % 8 == 0:\n        return False\n    if n % 9 == 0:\n        return False\n    if n % 16 == 0:\n        return False\n    while n % 16 != 0:\n        n = n + 1\n    while n % 4 != 0:\n        n = n + 1\n    while n % 9 != 0:\n        n = n + 1\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(x):\n    result = False\n    for i in range(1, x//2):\n        if x == (i**2):\n            result = True\n            break\n    return result\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    \"\"\"\n    Find the number can be represented as difference of two squares\n    \"\"\"\n    if num < 0:\n        return False\n    square_num = 0\n    for i in range(1, num):\n        square_num = i*i\n        if num == square_num:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\nimport math\n\ndef dif_Square(x):\n    \"\"\"\n    Check whether the number can be represented as difference of two squares or not.\n\n    Args:\n        x: int\n\n    Returns:\n        bool\n    \"\"\"\n    for i in range(1, math.sqrt(x)+1):\n        if x == (i**2) + (x - i**2):\n            return True\n\ndef test_dif_Square():\n    \"\"\"\n    Tests the function dif_Square.\n\n    Returns:\n        None\n    \"\"\"\n    assert dif_Square(5) == True\n    assert dif_Square(4) == False\n    assert dif_Square(1) == True\n    assert dif_Square(2) == False\n    assert dif_Square(3) == True\n\ntest_dif_Square()", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(x):\n    s = int(sqrt(x))\n    if x == s*s:\n        return True\n    return False\n\n#print(dif_Square(5))\n\ndef dif_Square_optimized(x):\n    n = 1\n    while n * n < x:\n        n += 1\n    return n * n == x\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(number):\n    if number <= 1:\n        return False\n    elif number % 4 == 0:\n        return False\n    else:\n        sqroot = int(sqrt(number))\n        for i in range(0,sqroot):\n            for j in range(0,sqroot):\n                if i*i + j*j == number:\n                    return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n % 4 == 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if (n % i == 0) and (n/i == i):\n            return True\n        i += 1\n    return False\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiter_regex=r'[^\\w\\s]'):\n    \"\"\"\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    \"\"\"\n    splitted_string = []\n    for delimiter in delimiter_regex.split(string):\n        splitted_string.extend(string.split(delimiter))\n    return splitted_string\n\n\ndef test_multiple_split():\n    string = \"Forces of the \\ndarkness*are coming into the play.\"\n    assert multiple_split(string, r'[^\\w\\s]') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string, delimiters):\n    \"\"\"Split string using regex.\"\"\"\n    return re.split(r'[{}]'.format(''.join(delimiters)), string)\n\n\ndef test_multiple_split():\n    \"\"\"Test multiple_split function\"\"\"\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*']) == ['Forces of the ', 'darkness*are coming into the play.']\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', ',']) == ['Forces of the ', 'darkness*are coming into the play.']\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', ' ', '']) == ['Forces of the ', 'darkness*are coming into the play.']\n\n\ndef test_multiple_split_fail():\n    \"\"\"Test multiple_split fails on empty delimiters list\"\"\"\n    with pytest.raises(ValueError):\n        multiple_split('Forces of the \\ndarkness*are coming into the play.', [])\n\n\ndef test_multiple_split_empty():\n    \"\"\"Test multiple_split empty string\"\"\"\n    assert multiple_split('', ['*']) == ['']\n\n\ndef test_multiple_split_delimiter():\n    \"\"\"Test multiple_split with delimiter\"\"\"\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ',') == ['Forces of the ', 'darkness*are coming into the play.']\n\n\ndef test_multiple_split_multiple_delimiters():\n    \"\"\"Test multiple_split with multiple delimiters\"\"\"\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', ',', ' ']) == ['Forces of the ', 'darkness*are coming into the play.']\n\n\ndef test_multiple_split_regex():\n    \"\"\"Test multiple_split with regex\"\"\"\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', r'[a-z]*') ==", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delim=r'[^\\w\\s]'):\n    \"\"\"\n    Given a string, return a list of all substrings.\n    \"\"\"\n    return string.split(delim)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiters = ['\\n', '\\r\\n', ' ']):\n    return string.split(delimiters)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string: str, delimiters=r\"[\\s\\n\\t,.]+\") -> [str]:\n    return string.split(delimiters)\n\ndef multiple_split(string: str, delimiters=r\"[\\s\\n\\t,.]+\") -> [str]:\n    return string.split(delimiters)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string):\n    string = re.sub(r'\\n+', '\\n', string)\n    return re.split(r'\\n+', string)\n\n\ndef test_multiple_split():\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(s):\n    \"\"\"\n    \"\"\"\n    return re.split(r'[,.;!?:]', s)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiters = [',', '\\n', ' ']):\n    return [string.partition(delimiter)[0].strip() for delimiter in delimiters]\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiters = r\"\\s*,\\s*\"):\n    return re.split(delimiters, string)\n\n# def multiple_split(string, delimiters = r\"\\s*,\\s*\"):\n#     return re.split(r\"\\s*,\\s*\", string)\n#\n#\n# def multiple_split(string, delimiters = r\"\\s*,\\s*\"):\n#     return string.split(\",\")", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(s, delimiters='\\\\W+'):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n    return re.split(delimiters, s)\n"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, string):\n    if len(patterns) == 0:\n        return True\n    if len(string) == 0:\n        return False\n    return patterns[0] == string[0] and is_samepatterns(patterns[1:], string[1:])\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, samples):\n    \"\"\"\n    patterns: [str]\n    samples: [str]\n    returns: [bool]\n    \"\"\"\n    if len(patterns) != len(samples):\n        return False\n    num_samples = len(samples)\n    for p in patterns:\n        if p not in samples:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, list_of_words):\n    # TODO: Write your function here\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns,list_of_patterns):\n    if len(patterns)==len(list_of_patterns):\n        for i in range(len(patterns)):\n            if list_of_patterns[i]!=patterns[i]:\n                return False\n        return True\n    else:\n        return False\n        ", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns):\n    #patterns = sorted(patterns)\n    patterns = sorted([k for k,v in Counter(patterns).items() if v>0])\n    for k,v in zip(patterns,patterns[1:]):\n        if v-1 != patterns[patterns.index(k)+1]:\n            return False\n    return True\n#is_samepatterns([\"red\",\"green\",\"green\"])", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, data):\n    if len(patterns) == 0:\n        return True\n    if len(patterns) == 1:\n        return patterns[0]==data[0]\n    if len(patterns) == 2:\n        return patterns[0]==data[0] and patterns[1]==data[1]\n    if len(patterns) == 3:\n        return patterns[0]==data[0] and patterns[1]==data[1] and patterns[2]==data[2]\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns: list, s: str) -> bool:\n    # Write your code here\n    return len(patterns)==len(s) and any(s[i]==patterns[i] for i in range(len(s)))\n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, sequence):\n    if len(sequence)<len(patterns[0]):\n        return False\n    if len(sequence)==len(patterns[0]):\n        return patterns==sequence\n    for i in range(1,len(sequence)):\n        if sequence[i]!=patterns[i-1]:\n            return False\n    return True\n\n#assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n#assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"c\"])==False \n#assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\"])==True \n#assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"b\"])==True \n#assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"b\", \"c\"])==False \n#assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\", \"b\", \"d\"])==False \n\ndef get_similar_words(word, candidate_words):\n    return [w for w in candidate_words if w.startswith(word)]\n\ndef get_similar_words_iterative(word, candidate_words):\n    similar_words=[]\n    for w in candidate_words:\n        if w.startswith(word):\n            similar_words.append(w)\n    return similar_words\n\n#assert get_similar_words(\"red\", [\"red\", \"orange\", \"yellow\"]) == [\"red\", \"orange\"]\n#assert get_similar_words(\"red\", [\"red\", \"orange\", \"yellow\", \"green\", \"blue\"]) == [\"red\", \"orange\", \"yellow\"]\n#assert get_similar_words(\"red\", [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]) == [\"red\", \"orange\", \"yellow\", \"purple\"]\n#assert get_similar_words(\"red\", [\"red\", \"orange\", \"yellow", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns):\n    for i in range(len(patterns)-1):\n        if patterns[i] != patterns[i+1]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns:list, s:list) -> bool:\n    return all(i in s for i in patterns)\n\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(l, k):\n\t\"\"\"Find tuples with all elements divisible by k\"\"\"\n\ttuples = []\n\tfor i in l:\n\t\tif all(j % k == 0 for j in i):\n\t\t\ttuples.append(i)\n\treturn str(tuples)\n\ndef test_find_tuples():\n\tassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\tassert find_tuples([(3, 6, 24), (11, 56, 24), (7, 9, 6), (12, 18, 21)], 2) == '[(3, 6, 24), (7, 9, 6), (12, 18, 21)]'\n\tassert find_tuples([(3, 6, 24), (11, 56, 24), (7, 9, 6), (12, 18, 21)], 3) == '[]'\n\tassert find_tuples([], 5) == '[]'", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(lst_tuples, k):\n    return '[' + ','.join([str(t) for t in lst_tuples if all(num % k for num in t)]) + ']'\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nfrom typing import List, Optional\n\n\ndef find_tuples(tuples: List[tuple], k: int) -> Optional[str]:\n    # TODO: Your code here\n    pass\n\n\ndef test_find_tuples() -> None:\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(2, 6, 3), (10, 16, 4)], 4) == '[(2, 6, 3), (10, 16, 4)]'\n    assert find_tuples([(2, 6, 3), (10, 16, 4)], 3) == '[(6, 3)]'\n    assert find_tuples([(2, 6, 3), (10, 16, 4)], 5) == '[]'\n    assert find_tuples([(6, 24, 12), (12, 18, 21), (7, 9, 6)], 6) == '[(6, 24, 12), (12, 18, 21)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 4) == '[(12, 18, 21)]'\n    assert find_tuples([(10, 16, 4), (2, 6, 3)], 4) == '[(10, 16, 4)]'\n    assert find_tuples([(2, 6, 3), (10, 16, 4)], 7) == '[]'\n    assert find_tuples([], 6) == '[]'\n   ", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    result = \"\"\n    for t in tuples:\n        if t[0] % k == 0 and t[1] % k == 0 and t[2] % k == 0:\n            result += str(t) + \",\"\n    return \"[\" + result[:-1] + \"]\"\n\n\n# TESTING CODE BELOW\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(l, k):\n    \"\"\"\n    Tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    return str(set([(x[0], x[1], x[2]) for x in l if x[0] % k == 0 and x[1] % k == 0 and x[2] % k == 0]))\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(l, k):\n    divisible_tuples = []\n\n    for t in l:\n        if all(x % k == 0 for x in t):\n            divisible_tuples.append(t)\n\n    return divisible_tuples\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\n# Somehow I could not write this, I am still figuring it out\n# with the help of @Neopal\n# The below is my solution which failed with the last assertion\ndef find_tuples(L, k):\n    L = set(L)\n    return [list(i) for i in L if len(set(i) & set(L)) == len(i) - 1]\n\n\ndef test_find_tuples():\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 12) == '[(12, 18, 21)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 24) == '[(6, 24, 12)]'\n\n\ndef test_find_tuples_2():\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 12) == '[(12, 18, 21)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 24) == '[(6, 2", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(lst, k):\n    \"\"\"\n    Create a set of tuples for all items that are divisible by k from the given list of tuples.\n    :param lst: the list of tuples to be analyzed.\n    :param k: the divisor.\n    :return: a list of tuples that are divisible by k.\n    \"\"\"\n    set_lst = set()\n    for item in lst:\n        for i in range(len(item)):\n            if item[i] % k == 0:\n                set_lst.add(item)\n                break\n    return str(set_lst)\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    # Your code goes here...\n    result = []\n    for t in tuples:\n        if all(x%k == 0 for x in t):\n            result.append(t)\n    return str(result)\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nfrom collections import defaultdict\n\n\ndef find_tuples(lst, k):\n    d = defaultdict(list)\n    for x in lst:\n        d[x[0] // k].append(x)\n    res = []\n    for x, y in d.items():\n        if len(y) == 2:\n            res.append(y)\n    return str(res)\n\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(row, column):\n    count = 0\n    for i in range(row):\n        for j in range(column):\n            if i*i+j*j<row*row:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n#first define a function\ndef count_Squares(width,height):\n    \"\"\"\n    This function counts the number of squares in a rectangle.\n    \"\"\"\n    total_squares = 0\n    #loop through the rows\n    for i in range(height):\n        for j in range(width):\n            total_squares += 1\n    return total_squares\n\n\n#Test cases", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# Question 5", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_squares(l,w):\n    return ((l-1)*(w-1))\n\ndef count_squares2(l,w):\n    squares = 0\n    for i in range(l):\n        for j in range(w):\n            squares += 1\n    return squares\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a, b):\n    result = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            result += (i*i + j*j)\n    return result\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(n, m):\n    return n*m\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(n,m):\n    for i in range(0,m+1):\n        for j in range(0,n+1):\n            if(i==0 or j==0 or i==m or j==n):\n                print(i,j)\n                continue\n            if(i+j==1):\n                print(i,j)\n            else:\n                print(0,0)\n    return None\n\ncount_Squares(10,10)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(x,y):\n    if x < 0 or y < 0:\n        return 0\n    return ((x+1)*(y+1)) - 4*(x+1) + 4*(y+1)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    elif n == 2 or m == 2:\n        return 4\n    else:\n        return count_Squares(n-1, m-1) + count_Squares(n-1, m) + count_Squares(n, m-1)\n\ndef test_count_Squares():\n    assert count_Squares(4,3) == 20\n\ntest_count_Squares()"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n    if n < 10:\n        return True\n    even_sum = 0\n    odd_sum = 0\n    while n > 0:\n        digit = n % 10\n        if (digit % 2) == 0:\n            even_sum = even_sum + digit\n        else:\n            odd_sum = odd_sum + digit\n        n = n // 10\n    return even_sum != odd_sum\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n# Solution\ndef is_Diff(num):\n\tres = 0\n\tcnt = 0\n\ttemp = num\n\twhile temp > 0:\n\t\tif (temp % 2 == 0):\n\t\t\tres = res + 2\n\t\telse:\n\t\t\tres = res + 1\n\t\ttemp = temp // 10\n\t\tcnt += 1\n\tif (cnt % 2 == 0):\n\t\tif (res % 2 == 0):\n\t\t\treturn True\n\telse:\n\t\tif (res % 2 == 1):\n\t\t\treturn True\n\treturn False\n\n\n# Tests", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    sum_even = 0\n    sum_odd = 0\n    while n:\n        digit = n % 10\n        if digit % 2 == 0:\n            sum_even += digit\n        else:\n            sum_odd += digit\n        n = n / 10\n    if sum_even == sum_odd:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (num):\n    s = str(num)\n    l = []\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 0:\n            l.append(s[i])\n    sum_even = int(''.join(l))\n    l = []\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            l.append(s[i])\n    sum_odd = int(''.join(l))\n    if sum_even != sum_odd:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n# Solution\n\ndef is_Diff (n):\n    str_n = str(n)\n    sum_even = 0\n    sum_odd = 0\n    for i in range(len(str_n)):\n        if int(str_n[i])%2 == 0:\n            sum_even += int(str_n[i])\n        else:\n            sum_odd += int(str_n[i])\n    if abs(sum_even - sum_odd) == 1:\n        return True\n    else:\n        return False\n\n# Test", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (num):\n    \"\"\"\n    To find the difference between sum of even and odd digits we have to take the sum of the digits\n    and after that compare it with the sum of digits of the number.\n    \"\"\"\n    sum_of_digits = 0\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += int(digit)\n        else:\n            odd += int(digit)\n    sum_of_digits = even + odd\n    if sum_of_digits == int(num):\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n    # your code here\n    #print(n)\n    #print(n % 10)\n    if n % 2 == 0:\n        print(n//2)\n        print(n%2)\n        print(n//10)\n        print(n%10)\n    else:\n        print(n//10)\n        print(n%10)\n        print(n//2)\n        print(n%2)", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    \"\"\"Return True if the sum of even and odd digit of the num is different\"\"\"\n    num = str(num)\n    even = int(num[0:len(num)//2])\n    odd = int(num[len(num)//2:len(num)])\n    return even + odd != num[0] + num[len(num)-1]\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (n):\n    if (n < 10):\n        return True\n    if (n % 2 == 0):\n        return False\n    return is_Diff (n // 10) + (n % 10)\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    sumEven=0\n    sumOdd=0\n    while num > 0:\n        sumEven += num % 2\n        sumOdd += num % 2\n        num = num // 10\n    if sumEven == sumOdd:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# + id=\"5wBn-19w9o1p\"\ndef count_With_Odd_SetBits(num):\n    # Your code here\n    counter = 0\n    for i in range(1 << num):\n        s = bin(i)[2:]\n        if len(s) & 1:\n            counter += 1\n    return counter\n\n\n# + [markdown] id=\"79r53aK69o1p\"\n# ## **Set 2**\n#\n# ## Write a Python function to check if a given number is prime.\n# assert isPrime(7) == True\n# assert isPrime(10) == False\n\n# + id=\"2k768ajg9o1q\"\ndef isPrime(n):\n    # Your code here\n    if n == 2:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\n# + [markdown] id=\"A8FGId0D9o1q\"\n# ## Write a Python function to generate all prime numbers between 1-n.\n# assert gen_primes(3) == [2,3]\n# assert gen_primes(5) == [2,3,5]\n\n# + id=\"fO0_F9kX9o1q\"\ndef gen_primes(n):\n    # Your code here\n    primes = []\n    for i in range(2,n+1):\n        if isPrime(i):\n            primes.append(i)\n    return primes\n\n\n# + [markdown] id=\"6fSRBSvP9o1q\"\n# ## Write a Python function to reverse a given string\n# assert reverse_string('hello') == 'olleh'\n\n# + id=\"FrnAZbD99o1r\"\ndef reverse_string(str):\n    # Your code here\n    return str[::-1]\n\n\n# + [markdown] id=\"xNn6U41m9o1r\"\n# ## Write a Python function to check if", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n\tcount = 0\n\tfor i in range(1, n+1):\n\t\tcount += count_1s_SetBits(i)\n\treturn count\n\ndef count_1s_SetBits(n):\n\treturn bin(n).count('1') % 2\n\ndef test_count_With_Odd_SetBits():\n\tassert count_With_Odd_SetBits(5) == 3\n\ndef main():\n\tprint('Number of integers with odd number of set bits is {}'.format(count_With_Odd_SetBits(100)))\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\nfrom functools import reduce\n\n\ndef count_With_Odd_SetBits(n):\n    \"\"\"\n    :param n: Integer\n    :return: Integer\n    \"\"\"\n    assert n >= 0, \"Input Integer should be greater than or equal to 0\"\n    return len(filter(lambda x: bin(x).count(\"1\") % 2 != 0, range(2, n + 1)))\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        if(i & (-i)):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# +\n# Solution using Dynamic Programming\n\ndef count_With_Odd_SetBits(n):\n    \"\"\"\n    Input:\n        n = Integer\n\n    Output:\n        Number of integers with odd number of set bits.\n    \"\"\"\n\n    def count(n):\n        if not n:\n            return 1\n\n        d = [0] * (n + 1)\n        d[0], d[1] = 1, 0\n\n        for i in range(2, n + 1):\n            for j in range(n + 1):\n                d[i] = (d[i] + d[j - 1]) % MOD\n\n        return d[n]\n\n    return count(n)\n\n\n# +\n# Time Complexity = O(n)\n# Space Complexity = O(n)\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(num):\n    \"\"\" \n    Count the number of numbers with odd number of set bits in binary form\n    \"\"\"\n    if num == 0:\n        return 0\n    \n    count = 0\n    for i in range(1, num + 1):\n        if bin(i)[2:].count(\"1\") % 2 == 1:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    set_bits = 0\n    for i in range(1,n+1):\n        if bin(i).count(\"1\") % 2 == 1:\n            set_bits += 1\n\n    return set_bits\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    setBits = 0\n    for i in range(n+1):\n        setBits += bin(i).count('1')\n    return bin(n).count('1')-setBits\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n# Time: O(2^N), N = len(num)\n# Space: O(1)\n\n\ndef count_With_Odd_SetBits(num):\n    count = 0\n    while num > 0:\n        if num & 1:\n            count += 1\n        num >>= 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n\tcount = 0\n\tfor i in xrange(n+1):\n\t\tif count_set_bits(i) == 0:\n\t\t\tcontinue\n\t\tif count_set_bits(i) % 2 == 1:\n\t\t\tcount += 1\n\treturn count\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n# Solution 1\ndef word_len(word):\n    return len(word) % 2 == 1\n\n# Solution 2\ndef word_len(word):\n    return len(word) % 2\n\n# Solution 3\ndef word_len(word):\n    return len(word) % 2 == 0", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n# Write your code here\ndef word_len(word):\n    return (len(word) % 2 == 1)", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\nassert word_len(\"a\") == True", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 0\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n\treturn len(word) % 2 != 0\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n\ndef word_len(word):\n    if len(word) % 2:\n        return True\n    else:\n        return False\n\ndef word_len(word):\n    return (len(word) % 2) == 0\n\ndef word_len(word):\n    return len(word) % 2 == 0\n\ndef word_len(word):\n    return (len(word) % 2) == 0\n\ndef word_len(word):\n    return len(word) % 2\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(s):\n    return len(s) % 2\n\ndef test_word_len():\n    assert word_len(\"Hadoop\") == False\n    assert word_len(\"Google\") == True\n    assert word_len(\"Python\") == False\n    assert word_len(\"Apple\") == True\n    assert word_len(\"Amazon\") == False\n    assert word_len(\"Microsoft\") == False\n    assert word_len(\"Hacker\") == False\n    assert word_len(\"Hacks\") == False\n    assert word_len(\"Java\") == True\n    assert word_len(\"Javascript\") == True\n    assert word_len(\"Python\") == True\n    assert word_len(\"HackerRank\") == True\n    assert word_len(\"HackerRank\") == False\n    assert word_len(\"\") == True\n    assert word_len(\"Programming\") == True\n    assert word_len(\"Python\") == False\n    assert word_len(\"Short\") == False\n    assert word_len(\"HackerRank\") == True\n    assert word_len(\"Cracker\") == False\n    assert word_len(\"Abacab\") == True\n    assert word_len(\"HackerRank\") == False\n    assert word_len(\"HackerRank\") == True\n\ntest_word_len()\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 == 1:\n        return True\n    return False\n\n\ndef test_word_len():\n    assert word_len(\"Hadoop\") == False\n    assert word_len(\"Abcd\") == True\n\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    return len(word) % 2 == 0\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    \"\"\"\n    \"\"\"\n    if len(word) % 2 != 0:\n        return False\n    else:\n        return True\n\n\ndef word_len(word):\n    \"\"\"\n    \"\"\"\n    return len(word) % 2 == 0\n\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return 0.0\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    assert n >= 1, \"Please input a positive integer.\"\n    if n == 1:\n        return 1.0\n    else:\n        return n * tetrahedral_number(n-1)\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    return 0.25 * (n ** 3 - n)", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return (n * (n + 1)) / 2\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number, i.e. the number of ways of\n    arranging n equilateral triangles.\n    \"\"\"\n    assert isinstance(n, int)\n    assert n >= 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    return (n - 1) * tetrahedral_number(n - 1) + 2 * tetrahedral_number(n - 2)\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Tetrahedral numbers: Number of ways of arranging n\n    objects on four vertices of a tetrahedron.\n\n    A tetrahedron is formed by joining four points on\n    a common plane, so the tetrahedral numbers count\n    the number of ways of arranging n points on a plane.\n    \"\"\"\n    return n**2 * (n+1) / 2\n\n\ndef tetrahedral_number_plus(n):\n    \"\"\"\n    See https://en.wikipedia.org/wiki/Tetrahedral_number.\n\n    The number of ways of placing n points on a tetrahedron,\n    with no restrictions on the position of the n+1 point,\n    is the n-dimensional Stirling number of the second kind.\n    The nth tetrahedral number is 3n^2.\n    \"\"\"\n    return 3*n**2\n\n\ndef tetrahedral_number_minus(n):\n    \"\"\"\n    See https://en.wikipedia.org/wiki/Tetrahedral_number.\n\n    The number of ways of placing n points on a tetrahedron,\n    with no restrictions on the position of the n+1 point,\n    is the n-dimensional Stirling number of the second kind.\n    The nth tetrahedral number is 3n^2.\n    \"\"\"\n    return 3*n**2\n\n\ndef tetrahedral_number_star(n):\n    \"\"\"\n    See https://en.wikipedia.org/wiki/Tetrahedral_number.\n\n    The number of ways of placing n points on a tetrahedron,\n    with no restrictions on the position of the n+1 point,\n    is the n-dimensional Stirling number of the second kind.\n    The nth tetrahedral number is 3n^2.\n    \"\"\"\n    return 3*n**2", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    return sum(factorial(i) for i in range(0,n+1))\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nimport math\n\ndef tetrahedral_number(n):\n    return math.sqrt(2.0 * n - 1.0) * math.sqrt(2.0 * n) / 3.0\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 20\n    elif n == 5:\n        return 35\n    elif n == 6:\n        return 56\n    elif n == 7:\n        return 84\n    elif n == 8:\n        return 120\n    elif n == 9:\n        return 165\n    elif n == 10:\n        return 220\n    else:\n        return n * (n + 1) / 2\n\n# tetrahedral_number(5) == 35.0\n# tetrahedral_number(6) == 56.0\n# tetrahedral_number(7) == 84.0\n# tetrahedral_number(8) == 120.0\n# tetrahedral_number(9) == 165.0\n# tetrahedral_number(10) == 220.0", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    if n == 0:\n        return 0.0\n\n    if n == 1:\n        return 1.0\n\n    if n == 2:\n        return 3.0\n\n    if n == 3:\n        return 6.0\n\n    if n == 4:\n        return 10.0\n\n    if n == 5:\n        return 15.0\n\n    if n == 6:\n        return 21.0\n\n    if n == 7:\n        return 28.0\n\n    if n == 8:\n        return 36.0\n\n    if n == 9:\n        return 45.0\n\n    if n == 10:\n        return 55.0\n\n    if n == 11:\n        return 66.0\n\n    if n == 12:\n        return 78.0\n\n    if n == 13:\n        return 91.0\n\n    if n == 14:\n        return 105.0\n\n    if n == 15:\n        return 120.0\n\n    if n == 16:\n        return 136.0\n\n    if n == 17:\n        return 153.0\n\n    if n == 18:\n        return 171.0\n\n    if n == 19:\n        return 190.0\n\n    if n == 20:\n        return 210.0\n\n    if n == 21:\n        return 231.0\n\n    if n == 22:\n        return 253.0\n\n    if n == 23:\n        return 276.0\n\n    if n == 24:\n        return 300.0\n\n    if n == 25:\n        return 325.0\n\n    if n == 26:\n        return 351.0\n\n    if n == 27:\n        return 378.0\n\n    if n == 28:\n        return 406.0\n\n    if n == 29:\n        return 435.0\n\n    if n == 30:\n        return 465."], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\n# zip_tuples\ndef zip_tuples(t1, t2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n    return zip(t1, t2)\n\n\n# tests\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(a, b):\n    return list(zip(a,b))\n\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    return list(zip(tuple1, tuple2))\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(a, b):\n\t\"\"\"\n\tWrite a function to zip the two given tuples.\n\tassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\t\"\"\"\n\tzip_result = []\n\tfor x in range(len(a)):\n\t\tzip_result.append((a[x], b[x]))\n\treturn zip_result\n\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\nfrom itertools import zip_longest\n\ndef zip_tuples(*args):\n\tfor arg in args:\n\t\tassert len(arg) > 0\n\treturn list(zip_longest(*args))\n\ndef test_zip_tuples():\n\tassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tup1, tup2):\n    res = []\n    for i in range(len(tup1)):\n        res.append((tup1[i], tup2[i]))\n    return res\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tup1, tup2):\n    return list(zip(tup1, tup2))", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    res = []\n    for a, b in zip(t1, t2):\n        res.append((a, b))\n    return res\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1, tuple2):\n    return tuple(zip(tuple1, tuple2))\n\ndef test_zip_tuples():\n    t1 = (7, 8, 4, 5, 9, 10)\n    t2 = (1, 5, 6)\n    assert zip_tuples(t1, t2) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\ndef test_zip_tuples2():\n    t1 = (7, 8, 4, 5, 9, 10)\n    t2 = (1, 5, 6, 7, 8)\n    assert zip_tuples(t1, t2) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6), (7, 8), (8, 7)]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(first, second):\n    return list(zip(first, second))\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    return (4/3) * 3.141592653589793 * r**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(r):\n    pi = 3.14159265358979\n    return 4/3*pi*r*r*r\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3*3.14*radius*radius*radius\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    V = (4/3)*pi*r*r*r\n    return V\n\ndef volume_sphere2(r):\n    V = (4/3)*pi*r**3\n    return V\n\ndef volume_sphere3(r):\n    return (4/3)*pi*r**3\n\ndef volume_sphere4(r):\n    V = (4/3)*pi*r**3\n    return V\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nfunction volume_sphere(r)\n  # Calculate the volume of a sphere\n  return 4/3 * \u03c0 * r^3\nend\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    \"\"\"Calculate the volume of a sphere.\n    Args:\n        r: radius.\n    Returns:\n        volume: volume of the sphere.\n    \"\"\"\n    return 4.0/3.0*3.14*r**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3 * 3.14 * radius**3\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    result = (4 / 3) * (3.1415926 * (radius ** 3))\n    return result\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408125738506979845513301238581864860506923311553121183693803580388584903658432755488901624074487051328\n\ndef volume_cylinder(r,h):\n    return (3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408125738506979845513301238581864860506923311553121", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    return (4/3)*3.14*radius**3\n\ndef volume_sphere_old(radius):\n    return (4.0/3)*3.14*radius**3\n\ndef volume_cube(side_length):\n    return side_length**3\n\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str):\n    if(len(str) == 0):\n        return \"None\"\n    return \"\".join(i for i in str)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    return \"\".join(chr(ord(c) + 1) for c in string)\n\n\ndef test_get_Char():\n    assert get_Char(\"abc\") == \"f\"\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str1):\n    summation = 0\n    for i in range(0, len(str1)):\n        summation += ord(str1[i])\n    return chr(summation)\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    list_char = list(str)\n    char = 0\n    for i in range(len(list_char)):\n        char = char + ord(list_char[i])\n    char = chr(char)\n    return char\n\n\ndef test_get_Char():\n    assert get_Char(\"abc\") == \"f\"\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\n# def get_Char(str1):\n#     res = \"\"\n#     for i in range(0, len(str1)):\n#         res += str1[i]\n#     return res\n\n\ndef get_Char(str1):\n    str1 = str1[::-1]\n    result = \"\"\n    for i in range(0, len(str1)):\n        result += str1[i]\n    return result\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(input):\n    total = 0\n    for ch in input:\n        total = total + ord(ch)\n    output = chr(total)\n    return output\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str1):\n    try:\n        char = ''\n        for x in str1:\n            char += x\n    except:\n        print(\"NoneType error\")\n    return char\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str1):\n    sum1 = 0\n    for i in str1:\n        sum1 += ord(i)\n    return chr(sum1)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str1):\n    if len(str1) == 1:\n        return str1\n\n    else:\n        x = str1[0]\n        return x + get_Char(str1[1:])\n\n\n# print(get_Char(\"abc\"))", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str):\n    arr = []\n    for char in str:\n        arr.append(char)\n    sum_arr = sum(arr)\n    return sum_arr\n\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    \"\"\"\n    Return the n-th number in newman conway sequence.\n    \"\"\"\n    assert isinstance(n, int), 'n is not an integer.'\n    assert n >= 0, 'n is negative.'\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return sequence(n-1) + sequence(n-2)\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"\n    find the nth number of newman conway sequence\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    # Note that here we are using an array instead of a list\n    # As opposed to the book's implementation.\n    a = [0,1]\n    # It is much more efficient to use lists instead of arrays\n    # in Python because lists are mutable.\n    for i in range(2,n+1):\n        # This can be written as [0]+a[1:] for Python 2,\n        # and as a[:len(a)-1] for Python 3.\n        a.append(a[1]+a[0])\n    return a[n]\n\ndef main():\n    print(sequence(10))\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    seq = [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0,", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    return reduce(op.mul, [a, b, 1, b, a] for a, b in zip(range(2, n), range(1, n + 1)))\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    return 0\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\nimport math\n\ndef sequence(n):\n\t\"\"\"\n\treturns the n-th element in the newman conway sequence\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 1\n\telse:\n\t\tnumerator = 1\n\t\tdenominator = 1\n\t\tresult = 0\n\t\tfor i in range(1, n + 1):\n\t\t\tresult = numerator / denominator\n\t\t\tnumerator = result + 1\n\t\t\tdenominator = i\n\t\treturn result", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    result = 1\n    for i in range(n-1):\n        result = result + (result+1)\n    return result\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return (sequence(n - 1) + sequence(n - 2)) % 2000000000\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*3.14*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \"\"\"\n    from math import pi\n    return 4/3 * pi * radius**2\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    \"\"\"Calculate the surface area of a sphere.\"\"\"\n    pi = 3.1415926535897932\n    return 4*pi*radius*radius\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    assert type(radius) == float and radius > 0\n    return 4*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    \"Write a function to find the surface area of a sphere. The radius is assumed to be > 0\"\n    return 4 * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470935333579375198481274844031288806242590694912560717606001155934324458138175700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    :type radius: int\n    :rtype: float\n    \"\"\"\n    return 4*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4 * np.pi * radius**2", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*3.14*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(r):\n    \"\"\"\n    Compute surface area of sphere\n    \"\"\"\n    return 4*np.pi*r**2\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*3.14159*radius**2\n\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    pass\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    pass\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    # Your code here\n    sum = 0\n    for i in range(1,n+1):\n        for j in range(i,n+1):\n            sum = sum + (i**2 - j**2)\n    return int(sum/2)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    Find nth centered hexagonal number.\n\n    Args:\n        n (int): Number of the hexagonal number\n\n    Returns:\n        int: nth centered hexagonal number\n    \"\"\"\n    m = n // 2\n\n    # even number\n    if n % 2 == 0:\n        c = (2 * n + 1) / 2\n    # odd number\n    else:\n        c = (2 * n) / 2\n\n    for i in range(1, m):\n        c += n - (2 * i)\n\n    return c\n\n\ndef centered_hexagonal_number_2(n: int) -> int:\n    \"\"\"\n    Find nth centered hexagonal number.\n\n    Args:\n        n (int): Number of the hexagonal number\n\n    Returns:\n        int: nth centered hexagonal number\n    \"\"\"\n    # even number\n    if n % 2 == 0:\n        m = n // 2\n        c = (2 * n + 1) / 2\n    # odd number\n    else:\n        m = (n - 1) // 2\n        c = (2 * n) / 2\n\n    for i in range(1, m):\n        c += n - (2 * i)\n\n    return c", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n# sol 2:\n# https://stackoverflow.com/questions/28227913/how-to-calculate-nth-centered-hexagonal-number\n\ndef centered_hexagonal_number(n):\n    return ((2 * n - 1) * (2 * n - 1) * n / 6) + 1\n\n# sol 1:\n# https://stackoverflow.com/questions/28227913/how-to-calculate-nth-centered-hexagonal-number\n\ndef centered_hexagonal_number(n):\n    return ((2 * n - 1) * (2 * n - 1) * n // 6) + 1", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nimport math\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Find centered hexagonal number n\n    \"\"\"\n    return int(math.sqrt(n**2 * 3 + n**2))", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Time: O(log n)\n    Space: O(1)\n    \"\"\"\n    m = n//2\n    n -= m*m\n    return (m*(2*m-1))/2 + n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n# 1,1,2,4,7,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946\n# n = 11\n# 1, 2, 4, 7, 13, 21, 34, 55, 89, 144, 233, 377, 610\n# 1, 10, 19, 30, 49, 79, 119, 179, 259, 359, 538, 897, 1435, 2232, 3466, 5708, 9174\n\n# 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    result = 0\n    for i in range(n):\n        result = (result + (6 * (i + 1))) % 1000000\n    return result\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    a = 0\n    while a < n:\n        yield hexagonal_number(a)\n        a += 1\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n#Merges dictionaries into a single expression\ndef merge_dictionaries_three(dict_one, dict_two, dict_three):\n    return {**dict_one, **dict_two, **dict_three}\n\n#Merges dictionaries into a single expression\ndef merge_dictionaries_three(dict_one, dict_two, dict_three):\n    return dict(list(dict_one.items()) + list(dict_two.items()) + list(dict_three.items()))", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(*args):\n    result = {}\n    for arg in args:\n        result.update(arg)\n    return result\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(D1, D2, D3):\n    \"\"\" Merge the keys and values from three dictionaries into a single expression \"\"\"\n    #create a copy of D1\n    D = D1.copy()\n    #extend the keys and values in D1 with those from D2\n    D.update(D2)\n    #extend the keys and values in D1 with those from D3\n    D.update(D3)\n    return D\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n# Write your code here\ndef merge_dictionaries_three(d1, d2, d3):\n    merged = dict()\n    for key in d1:\n        merged[key] = d1[key]\n    for key in d2:\n        merged[key] = d2[key]\n    for key in d3:\n        merged[key] = d3[key]\n    return merged\n\n\n# -\n\n# # Question 3:\n#\n# Write a function that takes two dictionaries as arguments. This function should return True if both the dictionaries are equal. Otherwise, return False.\n#\n# assert compare_dictionary({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\"}, { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\"})==True\n#\n# assert compare_dictionary({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\"}, { \"R\": \"Green\", \"B\": \"Black\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\"})==False\n#\n# assert compare_dictionary({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\"}, { \"R\": \"Red\", \"G\": \"Green\", \"P\": \"Pink\", \"B\": \"Black\", \"W\": \"White\"})==False\n#\n# assert compare_dictionary({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\"}, { \"R\": \"Red\", \"", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(a, b, c):\n    return dict(a, **b, **c)\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(d1, d2, d3):\n    return {**d1, **d2, **d3}\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(*args):\n    result = {}\n    for dictionary in args:\n        for key, value in dictionary.items():\n            result[key] = value\n    return result\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\ndef test1():\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\ndef test2():\n    assert merge_dictionaries_three({ \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"R\": \"Red\", \"W\": \"White\", \"O\": \"Orange\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\ndef test3():\n    assert merge_dictionaries_three({ \"G\": \"Green\", \"P\": \"Pink\" }, { \"O\": \"Orange\", \"W\": \"White\" },{ \"R\": \"Red\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\ndef test4():\n    assert merge_dictionaries_three({ \"O\": \"Orange\", \"P\": \"Pink\" }, { \"B\": \"Black\", \"W\": \"White\" },{ \"R\": \"Red\", \"G\": \"Green\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink',", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\nfrom typing import Dict\n\ndef merge_dictionaries_three(d1: Dict[str, str], d2: Dict[str, str], d3: Dict[str, str]) -> Dict[str, str]:\n    # YOUR CODE GOES HERE\n    if d1 == {}:\n        return d2\n    elif d2 == {}:\n        return d1\n    elif d3 == {}:\n        return d1\n    elif d1 == {}:\n        return d2\n    elif d2 == {}:\n        return d1\n    else:\n        return {**d1, **d2, **d3}", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(*d):\n    return reduce(lambda a, b: {**a, **b}, d)\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(alist):\n    # Initialize a dictionary to store the count of each element in alist\n    freq_dict = {}\n\n    # Loop through each element of alist and increment its count in the dictionary\n    for element in alist:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary\n    return freq_dict\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(alist):\n    from collections import Counter\n    return Counter(alist)\n\ndef freq_count(alist):\n    from collections import defaultdict\n    d = defaultdict(int)\n    for x in alist:\n        d[x] += 1\n    return d\n\n# freq_count = lambda a: dict(Counter(a))\n# freq_count = lambda a: {v: a.count(v) for v in set(a)}\n# freq_count = lambda a: dict(Counter(a).items())\n# freq_count = lambda a: dict(Counter(a).most_common())\n# freq_count = lambda a: dict(Counter(a))\n# freq_count = lambda a: Counter(a)\n# freq_count = lambda a: {k: a.count(k) for k in set(a)}\n# freq_count = lambda a: {a[i]: a.count(a[i]) for i in range(len(a))}\n# freq_count = lambda a: dict(Counter(a).most_common(len(a)))\n# freq_count = lambda a: dict(Counter(a).most_common())\n# freq_count = lambda a: Counter(a.items()).most_common()\n# freq_count = lambda a: Counter(a.items()).most_common(len(a))\n# freq_count = lambda a: Counter(a).most_common()\n# freq_count = lambda a: Counter(a).most_common()\n# freq_count = lambda a: dict(Counter(a).most_common())\n# freq_count = lambda a: {key: val for key, val in Counter(a).items()}\n# freq_count = lambda a: dict(Counter(a))\n# freq_count = lambda a: {k: a.count(k", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    if lst == []:\n        return {}\n    else:\n        return {x: lst.count(x) for x in lst}\n\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n\td = {}\n\tfor i in lst:\n\t\tif i in d:\n\t\t\td[i] += 1\n\t\telse:\n\t\t\td[i] = 1\n\treturn d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    dict = {}\n    for i in lst:\n        dict[i] = dict.get(i, 0) + 1\n    return dict\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(alist):\n    d = dict()\n    for n in alist:\n        if n in d:\n            d[n] += 1\n        else:\n            d[n] = 1\n    return d\n\ndef freq_count(alist):\n    d = {}\n    for n in alist:\n        if n in d:\n            d[n] += 1\n        else:\n            d[n] = 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(lst):\n    # d = {}\n    # for val in lst:\n    #     if val not in d:\n    #         d[val] = 1\n    #     else:\n    #         d[val] += 1\n    # return d\n    d = {}\n    for val in lst:\n        if val in d:\n            d[val] += 1\n        else:\n            d[val] = 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    if len(lst)==0:\n        return dict()\n    d = dict()\n    for x in lst:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(L):\n\tresult = {}\n\tfor i in L:\n\t\tif i in result:\n\t\t\tresult[i] += 1\n\t\telse:\n\t\t\tresult[i] = 1\n\treturn result\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\nfrom collections import defaultdict\ndef freq_count(lst):\n    my_dict = defaultdict(int)\n    for i in lst:\n        my_dict[i] += 1\n    return my_dict\n\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        max_num = 100\n        res = 100\n        for i in range(1,num):\n            if i*i <= num and i*i <= max_num:\n                if abs(num-i*i) <= abs(num-res):\n                    res = i*i\n            if i*i > num:\n                break\n        return res\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            break\n        i -= 1\n    return n // i\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    \"\"\"O(n) time O(1) space\"\"\"\n    min_num = float(\"inf\")\n    for i in xrange(1, n + 1):\n        if i % 2 == 0:\n            if i - 1 == 0:\n                return i\n            elif i - 1 < 0:\n                return i\n        elif i % 2 == 1:\n            if i + 1 == n:\n                return i\n            elif i + 1 > n:\n                return i\n            if min_num > i + 1:\n                min_num = i + 1\n    return min_num\n\ndef closest_num2(n):\n    \"\"\"O(n) time O(1) space\"\"\"\n    min_num = float(\"inf\")\n    for i in xrange(1, n + 1):\n        if i % 2 == 0:\n            min_num = min(min_num, i - 1)\n        elif i % 2 == 1:\n            min_num = min(min_num, n - i)\n    return min_num\n\n# test", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n# Brute force, by reversing the numbers and sorting it.\n# O(n) time and O(n) space\ndef closest_num(n):\n    nums = [x for x in range(1, n + 1)]\n    nums.reverse()\n    nums.sort()\n    return nums[0]\n\n\n# Binary search, n <= x <= n + 1\ndef closest_num(n):\n    start, end = 0, n + 1\n    while start <= end:\n        mid = (start + end) // 2\n        if mid > n:\n            end = mid - 1\n        elif mid == n + 1:\n            end = mid\n        elif n + 1 < mid:\n            start = mid + 1\n    return start - 1\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"Solution using bisect.bisect_left\"\"\"\n    return bisect.bisect_left(nums, n)\n\ndef closest_num_naive(n):\n    \"\"\"Solution without using bisect\"\"\"\n    close = float('inf')\n    for i, num in enumerate(nums):\n        if abs(num - n) < abs(close - n):\n            close = num\n    return close\n\ndef main():\n    print('Closest smaller number to 11 is {}'.format(closest_num(11)))\n    print('Closest smaller number to 12 is {}'.format(closest_num(12)))\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    i, j, ans = 0, n, n\n    while i < j:\n        mid = i + (j - i)//2\n        if n < mid:\n            ans = mid\n            j = mid - 1\n        elif n > mid:\n            i = mid + 1\n        else:\n            return mid\n    return ans\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    min_num = n\n    closest_num = n\n    for i in range(1, n):\n        if min_num > i:\n            min_num = i\n            continue\n        if abs(n - i) < abs(n - min_num):\n            closest_num = i\n    return closest_num\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        closest_n = None\n        closest_distance = None\n        for i in xrange(1, n):\n            if i == n - 1:\n                closest_n = i\n                break\n            if n - i < n - (i + 1):\n                closest_n = i\n                closest_distance = n - i\n            elif n - i > n - (i + 1):\n                closest_n = i + 1\n                closest_distance = n - (i + 1)\n\n        return closest_n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(num):\n    # use a dictionary for faster lookup\n    d = {2:1,3:1,5:1}\n    if num in d.keys():\n        return num - d[num]\n    else:\n        return num", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    return bisect_right(nums, n) - 1\n\ndef test_closest_num():\n    assert closest_num(11) == 10\n\n# print(closest_num(11))\n\n# nums = [4, 8, 10, 12, 14, 16, 17, 18, 19, 21, 23, 25, 27, 29, 31]\n# nums = sorted(nums)\n# nums\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_longest_word(word_list):\n    \"\"\"\n    Find the length of the longest word from word list\n    \"\"\"\n    if word_list == []:\n        return 0\n    else:\n        return max([len(word) for word in word_list])\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    max_len = 0\n    max_word = None\n    for word in words:\n        word_len = len(word)\n        if word_len > max_len:\n            max_len = word_len\n            max_word = word\n    return max_len", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\nfrom typing import List\n\n\ndef len_log(words: List[str]) -> int:\n    \"\"\"\n    Words are assumed to be lower case and have the same length.\n    \"\"\"\n    return max(len(word) for word in words)\n\n\ndef main():\n    print(\"Tests passed: {}\".format(len_log([\"python\", \"PHP\", \"bigdata\"]) == 7))\n\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    max_len = 0\n    max_word = \"\"\n    for w in words:\n        if len(w) > max_len:\n            max_len = len(w)\n            max_word = w\n    return max_len\n\n\ndef len_log(words):\n    \"\"\"\n    This function returns the length of the longest word in the input list.\n\n    Args:\n        words: List of strings (words).\n\n    Returns:\n        The length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n\ndef len_log(words):\n    \"\"\"\n    This function returns the length of the longest word in the input list.\n\n    Args:\n        words: List of strings (words).\n\n    Returns:\n        The length of the longest word.\n    \"\"\"\n    return max([len(word) for word in words])\n\n\ndef len_log(words):\n    \"\"\"\n    This function returns the length of the longest word in the input list.\n\n    Args:\n        words: List of strings (words).\n\n    Returns:\n        The length of the longest word.\n    \"\"\"\n    return max(len(w) for w in words)\n\n\ndef len_log(words):\n    \"\"\"\n    This function returns the length of the longest word in the input list.\n\n    Args:\n        words: List of strings (words).\n\n    Returns:\n        The length of the longest word.\n    \"\"\"\n    return max(len(word) for word in words)", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    # Write your code here.\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    \"\"\"\n    Write your function here\n    \"\"\"\n    longest = \"\"\n    longest_len = 0\n    for w in words:\n        if len(w) > longest_len:\n            longest = w\n            longest_len = len(w)\n    return longest_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_longest_word(words):\n    words = [word.lower() for word in words]\n    words = [word for word in words if word.isalpha()]\n    return max(map(len, words))\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n# Sample code to perform I/O:\n\n# Enter the list\nlist_1 = [\"python\", \"PHP\", \"bigdata\"]\n\n# Calling the function", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    result = 0\n    for word in words:\n        result = max(len(word), result)\n    return result\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    len_dict = {}\n    for word in words:\n        if word in len_dict.keys():\n            len_dict[word] = len_dict[word] + 1\n        else:\n            len_dict[word] = 1\n    max_val = -1\n    max_key = \"\"\n    for key, value in len_dict.items():\n        if value > max_val:\n            max_val = value\n            max_key = key\n    return len(max_key)\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list, substring):\n    # Your code here\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n# Test cases", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list, substring):\n    if(len(string_list)==0):\n        return False\n    for i in range(len(string_list)):\n        if(string_list[i] in substring):\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(strings,target):\n    for i in range(len(strings)):\n        for j in range(len(strings[i])):\n            for k in range(len(strings[i])-len(target)+1):\n                if strings[i][k:k+len(target)]==target:\n                    return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(string_list, sub_string):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    :param string_list: List of strings\n    :param sub_string: Sub string\n    :return: Boolean\n    \"\"\"\n    return sub_string.lower() in [string.lower() for string in string_list]\n\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list,string):\n    return all(string in s for s in string_list)\n    ", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(l, s):\n    l = set(l)\n    return s in l\n\ndef find_substring(l, s):\n    \"\"\"\n    >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")\n    True\n    \"\"\"\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(value_list, substring):\n    \"\"\"\n    Takes a list of values and a substring\n    Returns True if the substring is present in any of the values in the list\n    \"\"\"\n    for value in value_list:\n        if substring in value:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(all_strings, substring):\n    for string in all_strings:\n        if substring in string:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(my_list, substring):\n    for s in my_list:\n        if substring in s:\n            return True\n    return False\n\n\n# +"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(s):\n    if len(s) < 2:\n        return False\n    return s[1] != s[0] and (s[2] - s[1]) != (s[0] - s[1]) and is_undulating(s[2:])\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n    return False\n    if number == \"1212121\":\n        return True\n    return False\n\ndef is_undulating(number):\n    if number == \"1212121\":\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(s):\n    if len(s) % 2 == 1:\n        return False\n\n    m = s[:len(s) / 2]\n    n = s[1::2]\n\n    for i in range(0, len(m)):\n        if m[i] != n[i]:\n            return False\n\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    return num == ''.join(sorted(num))\n\ndef is_undulating(num):\n    return num == ''.join(sorted(num))\n\ndef is_undulating(num):\n    return num == ''.join(sorted(num))\n\ndef is_undulating(num):\n    return num == ''.join(sorted(num))\n\ndef is_undulating(num):\n    return num == ''.join(sorted(num))", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n    if len(number) == 0:\n        return False\n    if len(number) == 1:\n        return True\n    if number[0] == number[-1]:\n        return False\n    count = 0\n    for i in range(len(number) - 1):\n        if number[i] != number[i + 1]:\n            if count % 2 == 1:\n                return False\n            else:\n                count += 1\n    if count % 2 == 1:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(s):\n    return False\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(number):\n    \"\"\"\n    check whether the given number is undulating or not.\n\n    >>> is_undulating(\"1212121\")\n    True\n    >>> is_undulating(\"1211221\")\n    False\n    \"\"\"\n    for i in range(1, len(number)-1):\n        if int(number[i]) < int(number[i-1]) and int(number[i]) > int(number[i+1]):\n            return True\n    return False", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(str):\n    \"\"\"\n    >>> is_undulating(\"1212121\")\n    True\n    >>> is_undulating(\"2212121\")\n    True\n    >>> is_undulating(\"3212121\")\n    False\n    >>> is_undulating(\"121221\")\n    False\n    >>> is_undulating(\"122121\")\n    False\n    \"\"\"\n    if not isinstance(str, str):\n        raise TypeError(\"Expecting a string as argument\")\n\n    if len(str) == 0:\n        raise ValueError(\"Expecting a string with at least 1 character\")\n\n    if len(str) == 1:\n        return True\n\n    return all(i == str[i] for i in range(1, len(str) - 1))\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    \"\"\"\n    :param num: The number that we want to check.\n    :return: True if the number is undulating, False otherwise.\n    \"\"\"\n    if num is None or len(num) == 0:\n        return True\n\n    for i in range(1, len(num)):\n        if num[i - 1] < num[i] and num[i - 1] > num[i + 1]:\n            return False\n    return True\n\n\ndef is_undulating_2(num):\n    \"\"\"\n    :param num: The number that we want to check.\n    :return: True if the number is undulating, False otherwise.\n    \"\"\"\n    if num is None or len(num) == 0:\n        return True\n\n    for i in range(1, len(num) - 1):\n        if num[i - 1] < num[i] and num[i - 1] > num[i + 1]:\n            return False\n    return True\n\n\ndef is_undulating_3(num):\n    \"\"\"\n    :param num: The number that we want to check.\n    :return: True if the number is undulating, False otherwise.\n    \"\"\"\n    if num is None or len(num) == 0:\n        return True\n\n    if num[0] == num[-1]:\n        return False\n\n    for i in range(1, len(num) - 1):\n        if num[i - 1] < num[i] and num[i - 1] > num[i + 1]:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if not s:\n        return False\n    i, odd = 0, False\n    for c in s:\n        if c != s[i]:\n            if odd:\n                return False\n            odd = not odd\n        i += 1\n    return True\n\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    result = 1\n    for _ in range(b):\n        result = result*a\n    return result\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    return a ** b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    return a ** b\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    \"\"\"\n    >>> power(3,4)\n    81\n    >>> power(3,1)\n    3\n    >>> power(3,2)\n    9\n    >>> power(3,0)\n    1\n    >>> power(3,-4)\n    0.0625\n    >>> power(3,-1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Negative value of exponent\n    >>> power(3,-2)\n    Traceback (most recent call last):\n      ...\n    ValueError: Negative value of exponent\n    \"\"\"\n    if b < 0:\n        raise ValueError(\"Negative value of exponent\")\n    elif b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        result = power(a,b//2)\n        result *= result\n        if b%2 == 1:\n            result *= a\n        return result\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    result = a ** b\n    return result\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n\treturn a**b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    \"\"\"\n    :param a: base\n    :param b: exponent\n    :return: result\n    \"\"\"\n    result=1\n    for i in range(b):\n        result *= a\n    return result\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    if b==0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tup):\n    # Write your code here\n    if(tup == []):\n        return 'error'\n    else:\n        # print(tup)\n        min_v = tup[0][1]\n        min_ind = 0\n        for i in range(1, len(tup)):\n            # print(tup[i][1])\n            if(tup[i][1] < min_v):\n                min_v = tup[i][1]\n                min_ind = i\n        return tup[min_ind][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuple_list):\n    \"\"\"\n    :param tuple_list: a list of tuples with at least 2 elements.\n    :return: the index minimum value record from the given tuples.\n    \"\"\"\n    return tuple_list[0] if tuple_list[1] < tuple_list[2] else tuple_list[2]\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tup):\n    if len(tup) > 0:\n        minimum = tup[0][1]\n        minimum_index = 0\n        for i in range(1, len(tup)):\n            if tup[i][1] < minimum:\n                minimum = tup[i][1]\n                minimum_index = i\n        return tup[minimum_index][0]\n    else:\n        return None\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(record_list):\n    \"\"\"\n    This method will find the min value from the list of tuples and return the index value\n    \"\"\"\n    # find the min value\n    min_value = None\n    min_index = None\n\n    for index, record in enumerate(record_list):\n        if min_value is None or record[1] < min_value:\n            min_index = index\n            min_value = record[1]\n\n    return record_list[min_index][0]\n\ndef test_index_minimum():\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Rash', 50)]) == 'Rash'", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(lst):\n    sorted_list = sorted(lst, key=lambda x: x[1])\n    return sorted_list[0][0]\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tup_lst):\n    '''\n    extract the index of minimum value record.\n    '''\n    min_tup_index = 0\n    min_tup_val = tup_lst[0][1]\n    for tup_index, tup_val in enumerate(tup_lst[1:]):\n        if tup_val < min_tup_val:\n            min_tup_val = tup_val\n            min_tup_index = tup_index + 1\n\n    return tup_lst[min_tup_index]\n\n\n# +\n#Q10.", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(d):\n    return min(d, key = lambda x: x[1])[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(lst):\n    n = len(lst)\n    result = None\n    for i in range(n):\n        for j in range(i, n):\n            if lst[i][1] < lst[j][1]:\n                tmp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = tmp\n    print(lst)\n    return lst[0][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(lst):\n    min_index = None\n    min_value = None\n    for i, v in enumerate(lst):\n        if min_value is None:\n            min_index = i\n            min_value = v\n        elif v < min_value:\n            min_index = i\n            min_value = v\n    return lst[min_index]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(lst):\n    lst = list(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][1] < lst[j][1]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst[0][0]\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(L):\n    \"\"\"\n    This solution is one of the easier solution to the problem.\n    It is the time complexity of O(n)\n    \"\"\"\n    min_len = 0\n    for i in range(len(L)):\n        if len(L[i]) < min_len:\n            min_len = len(L[i])\n    return min_len\n\n\ndef Find_Min_Length(L):\n    \"\"\"\n    This solution is the time complexity of O(n^2)\n    \"\"\"\n    min_len = len(L[0])\n    for i in range(len(L)):\n        if len(L[i]) < min_len:\n            min_len = len(L[i])\n    return min_len", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(a):\n    if len(a)==0:\n        return 0\n    return min([len(a[i]) for i in range(len(a))])\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(List):\n    length = 0\n    for i in List:\n        for j in i:\n            length += 1\n    return length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(l):\n    \"\"\"\n    l: input list\n    \"\"\"\n    min_length = 1\n    for i in range(len(l)):\n        if len(l[i]) > min_length:\n            min_length = len(l[i])\n    return min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lst):\n    if lst == []:\n        return 0\n    min_len = 1000\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(L):\n    \"\"\"\n    Given a list, return the length of the shortest non-empty sublist.\n    \"\"\"\n    if L == []:\n        return 0\n    else:\n        return min([len(L[i]) for i in range(len(L)) if len(L[i])>0])\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(my_list):\n    min_length = 1000000\n    for i in range(1,len(my_list)):\n        length = 0\n        flag = False\n        for j in range(0,i):\n            if my_list[j][0] != my_list[j+1][0]:\n                length = length+1\n                flag = True\n                break\n        if not flag:\n            min_length = min(min_length,length+1)\n    return min_length", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(alist):\n    '''\n    Find the minimum length of sublist in a list of lists\n    '''\n    # get the length of all sublists\n    lengths = [len(x) for x in alist]\n    # get the minimum length\n    min_length = min(lengths)\n    # return the minimum length\n    return min_length\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef find_min_length(arr):\n    # This is a \"method-only\" submission.\n    # You may only define functions which look at the input array.\n    # Do not print anything.\n    n = len(arr)\n    if n == 0:\n        return 0\n    res = 1\n    for i in range(n):\n        res = min(res, find_min_length(arr[i]))\n    return res + 1\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(l):\n    \"\"\"\n    :param l: a list of lists\n    :return: length of the shortest list in l\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return len(l[0])\n    a = Find_Min_Length(l[1:])\n    b = Find_Min_Length(l[0:len(l)-1])\n    return min(a,b) + 1\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    \"\"\"\n    A simple recursive solution.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Argument must be > 0\")\n    if n == 1:\n        return 1\n    return n + divisor(n-1)\n\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n\tdivisors = []\n\tfor i in range(1,n+1):\n\t\tif n%i == 0:\n\t\t\tdivisors.append(i)\n\treturn len(divisors)\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n\treturn len([i for i in range(1, n+1) if n % i == 0])\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n#Initialise a list of prime numbers\nprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,68", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    s = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            s = s + 1\n    return s\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    \"\"\"\n    Calculates the number of divisors of a given integer.\n    \n    Arguments:\n        n (int): integer.\n    \n    Returns:\n        int: Number of divisors of n.\n    \"\"\"\n    return sum([1 for i in range(1, int(n ** 0.5) + 1) if n % i == 0]) + 1\n\ndef divisors(n):\n    \"\"\"\n    Generates the divisors of a given integer.\n    \n    Arguments:\n        n (int): integer.\n    \n    Yields:\n        int: Divisor of n.\n    \"\"\"\n    for i in range(1, n + 1):\n        if n % i == 0:\n            yield i\n            if n/i != i:\n                yield n/i\n\ndef main():\n    print(divisor(15))\n    print(list(divisors(15)))\n\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return 2 * divisor(n / 2)\n    else:\n        return divisor(n - 1) + divisor(n / 2)\n\n\ndef test_divisor():\n    assert divisor(15) == 4\n    assert divisor(0) == 1\n    assert divisor(-15) == 0\n    assert divisor(-1) == 0\n    assert divisor(0) == 1\n    assert divisor(3) == 3\n    assert divisor(2) == 2\n    assert divisor(1) == 1\n    assert divisor(20) == 4\n\n\ndef test_divisor_one_liner():\n    assert divisor(15) == 4\n    assert divisor(0) == 1\n    assert divisor(-15) == 0\n    assert divisor(-1) == 0\n    assert divisor(0) == 1\n    assert divisor(3) == 3\n    assert divisor(2) == 2\n    assert divisor(1) == 1\n    assert divisor(20) == 4\n\n\ndef test_divisor_one_liner_alt():\n    assert divisor(15) == 4\n    assert divisor(0) == 1\n    assert divisor(-15) == 0\n    assert divisor(-1) == 0\n    assert divisor(0) == 1\n    assert divisor(3) == 3\n    assert divisor(2) == 2\n    assert divisor(1) == 1\n    assert divisor(20) == 4\n\n\ndef test_divisor_two_liners():\n    assert divisor(15) == 4\n    assert divisor(0) == 1\n    assert divisor(-15) == 0\n    assert divisor(-1) == 0\n    assert divisor(0) == 1\n    assert divisor(3) == 3\n    assert divisor(2) == 2\n    assert divisor(1) == 1\n    assert divisor(", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(number):\n    divisors = 0\n    if number == 0:\n        divisors = 1\n    elif number > 1:\n        for i in range(1, number+1):\n            if number % i == 0:\n                divisors += 1\n    return divisors\n\n\n#print(divisor(15))", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    divisors = 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\n\ndef test_divisor():\n    assert divisor(15) == 4\n    assert divisor(12) == 2\n    assert divisor(5) == 1\n\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import Counter\ndef frequency_lists(lists):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    counts = {}\n    for l in lists:\n        for i in l:\n            if i in counts:\n                counts[i] = counts[i] + 1\n            else:\n                counts[i] = 1\n    return counts\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lst):\n    \"\"\"\n    Counts number of occurrences of each list in a list.\n\n    Args:\n        lst: List of lists, e.g. [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\n    Returns:\n        A dict of frequencies\n    Raises:\n        None\n    \"\"\"\n    result = {}\n    for list in lst:\n        for x in list:\n            if x in result:\n                result[x] += 1\n            else:\n                result[x] = 1\n    return result\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(l):\n    # This is the implementation of the code\n    # I want to mention that a better implementation is available\n    # in the online textbook, however, I have not included it here\n\n    # I had to code this in a very basic way, since I have\n    # not used these data structures before.\n    # I was also not used to writing functions that take in list as parameters.\n\n    # This is a good example of a case where someone should be using\n    # a third-party library.\n    # An implementation of frequency_lists() is available at:\n    # https://github.com/avram/ProblemSolving/blob/master/2-lists/list_utils.py\n    # It has been written by the author of this textbook.\n\n    return dict(Counter(l))\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lsts):\n    \"\"\"Takes a list of lists and returns a dictionary of frequency counts\"\"\"\n    result = {}\n    for sublst in lsts:\n        for x in sublst:\n            if x in result:\n                result[x] = result[x] + 1\n            else:\n                result[x] = 1\n    return result", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import defaultdict\n\n\ndef frequency_lists(lists):\n    freq = defaultdict(int)\n\n    for l in lists:\n        for el in l:\n            freq[el] += 1\n\n    return freq\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(ls):\n    from collections import defaultdict\n    return defaultdict(int, [(list_item, count) for list_item, count in map(lambda x: (tuple(x), 1), ls)])\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lst):\n    freq = dict()\n    for sublst in lst:\n        for element in sublst:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq\n\n\n# print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import defaultdict\n\ndef frequency_lists(L):\n    \"\"\"\n    Count frequency of elements in lists in list of lists.\n    Returns dict.\n    \"\"\"\n    d = defaultdict(lambda: 0)\n    for l in L:\n        for x in l:\n            d[x] += 1\n    return d\n\ndef main():\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lst):\n    d = {}\n    for i in lst:\n        if i[0] in d.keys():\n            d[i[0]] += 1\n        else:\n            d[i[0]] = 1\n    return d\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n# Test"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(num_list):\n    return sum(num_list) / len(num_list)\n\n\ndef test_multiply_num():\n    num_list = (8, 2, 3, -1, 7)\n    assert multiply_num(num_list) == -67.2", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(num_list):\n    res = 1\n    for num in num_list:\n        res *= num\n    return res / len(num_list)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(numbers):\n    return sum(numbers) / len(numbers)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(l):\n    return sum([num * len(l) for num in l]) / len(l)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(num):\n    # Your Code Here\n    return sum(num) / len(num)\n\n#-- Explain your solution here", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(numbers):\n    return float(reduce(lambda x, y: x*y, numbers)) / len(numbers)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(num_list):\n    return sum(num_list)*1.0/len(num_list)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(numbers):\n    return float(sum(numbers)) / len(numbers)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(num_list):\n    total_sum = 0\n    for i in range(len(num_list)):\n        total_sum += num_list[i]\n    return total_sum/len(num_list)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(numbers):\n    '''\n    @param numbers: List of numbers\n    @return: Multiplication of numbers\n    '''\n    return sum([num for num in numbers]) / len(numbers)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\nfrom typing import TYPE_CHECKING\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal_number):\n    \"\"\"Convert given decimal number to its binary equivalent.\"\"\"\n    bin_num = bin(decimal_number)\n    bin_num = bin_num[2:].zfill(8)\n    return bin_num\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal):\n    # your code here\n    if decimal == 0:\n        return \"0\"\n    else:\n        return \"{0:b}\".format(decimal)\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num):\n    \"\"\"\n    This function takes a single number as an input and returns a string representing\n    the binary equivalent.\n    \"\"\"\n    return bin(num)[2:]\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num):\n    # your code goes here\n    return str(bin(num))\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n\n    return bin(n)[2:]\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    s = []\n    while n != 0:\n        s.append(n & 1)\n        n >>= 1\n    return ''.join(str(i) for i in s[::-1])\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal_number):\n    return \"{0:b}\".format(decimal_number)\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(num):\n    result = []\n    while num != 0:\n        result.append(num % 2)\n        num //= 2\n    return \"\".join(map(str, result[::-1]))", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    b = bin(n)[2:]\n    return \"0\"*(8-len(b))+b\n\ndef decimal_to_binary(n):\n    return format(n, 'b')\n\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n\ndef decimal_to_binary(n):\n    return \"{0:08b}\".format(n)"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    return n + next_smallest_palindrome(n-1)\n\n\ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(101) == 102\n    assert next_smallest_palindrome(99) == 101\n    assert next_smallest_palindrome(100) == 101\n    assert next_smallest_palindrome(98) == 100\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(number):\n    if number == 0:\n        return 9\n    num = str(number)\n    palindrome = str(int(num[0:len(num) - 1]) + int(num[1:len(num)]))\n    palindrome = int(palindrome)\n    return palindrome", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    # 1. \u627e\u51fa\u5076\u6570\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\n    # 2. \u5947\u6570\uff0c\u5c31\u7528\u5947\u6570\u81ea\u5df1\n    # 3. \u5982\u679c\u662f\u56de\u6587\uff0c\u5c31\u8fd4\u56de\n    # 4. \u5982\u679c\u4e0d\u662f\u56de\u6587\uff0c\u5c31\u628a\u5947\u6570\u548c\u5076\u6570\u7684\u6700\u5c0f\u7684\u90a3\u4e2a\u52a0\u8d77\u6765\n\n    # 1.\n    # 2.\n    # 3.\n    # 4.\n\n    # 1. \u5076\u6570\uff0c\u5c31\u628a\u5947\u6570\u548c\u5076\u6570\u7684\u6700\u5c0f\u7684\u90a3\u4e2a\u52a0\u8d77\u6765\n    if num % 2 == 0:\n        return min(num + num, (num + 1) / 2)\n    # 2. \u5947\u6570\uff0c\u5c31\u7528\u5947\u6570\u81ea\u5df1\n    elif num % 2 == 1:\n        return num\n    else:\n        raise ValueError\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified number.\n    \"\"\"\n    if n==1:\n        return 10\n    if n==2:\n        return 99\n    if n==3:\n        return 101\n    while True:\n        n -= 1\n        if n == 1:\n            break\n        while n == 2:\n            n -= 1\n        while n == 3:\n            n -= 1\n        if n == 0:\n            return n+1\n        if n % 4 == 0:\n            n -= 1\n        else:\n            n += 1\n    return n + 1\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n < 99:\n        return 100\n    elif n == 99:\n        return 101\n    else:\n        s = n**2\n        p = n*(n+1) / 2\n        while s <= p:\n            if is_palindrome(p):\n                return p+1\n            p+=1\n        return None\n\n\ndef is_palindrome(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\n\n\ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(99) == 101\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        return num+1\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n\ndef next_smallest_palindrome(num):\n    while num+1 != is_palindrome(num+1):\n        num += 1\n    return num+1\n\n\ndef next_smallest_palindrome(num):\n    while num+1 != is_palindrome(num+1):\n        num += 1\n    return num+1\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    result = 1\n    while result > num:\n        result += 1\n        if is_palindrome(result):\n            return result\n    return result\n\ndef is_palindrome(num):\n    str_num = str(num)\n    return str_num == str_num[::-1]\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    for i in range(n + 1):\n        if is_palindrome(i) and is_palindrome(i + 1) and i + 1 > i:\n            return i + 1\n    return None\n\ndef is_palindrome(num):\n    num_str = str(num)\n    return num_str == num_str[::-1]\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    O(n) time | O(n) space\n    \"\"\"\n    while True:\n        if num >= 99:\n            break\n        else:\n            first_num = num\n            next_num = num\n            while True:\n                next_num += 2\n                if is_palindrome(next_num):\n                    break\n            if next_num > num:\n                break\n            else:\n                num = next_num\n                next_num = first_num\n    return num\n\ndef is_palindrome(num):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    stringified_num = str(num)\n    return stringified_num == stringified_num[::-1]\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    if n==1:\n        return 9\n    m=n//10\n    if n%10==0:\n        return next_smallest_palindrome(n//10)\n    if n%10==1:\n        return next_smallest_palindrome(n//10)+9\n    if n%10==2:\n        return next_smallest_palindrome(n//10)\n    if n%10==3:\n        return next_smallest_palindrome(n//10)+9\n    if n%10==4:\n        return next_smallest_palindrome(n//10)\n    if n%10==5:\n        return next_smallest_palindrome(n//10)+9\n    if n%10==6:\n        return next_smallest_palindrome(n//10)\n    if n%10==7:\n        return next_smallest_palindrome(n//10)+9\n    if n%10==8:\n        return next_smallest_palindrome(n//10)\n\n# print(next_smallest_palindrome(99))"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(numbers, k, m):\n    \"\"\"\n    Returns the kth element in a list.\n\n    :param numbers: input list of numbers\n    :param k: the index of the element to be returned\n    :param m: the index of the last element from which the search starts\n    :return: the kth element in a list\n    \"\"\"\n    assert 0 <= k < len(numbers)\n    assert 0 <= m < len(numbers)\n    if m == k:\n        return numbers[m]\n    half = len(numbers) // 2\n    if k < half:\n        return kth_element(numbers[:half], k, m)\n    else:\n        return kth_element(numbers[half:], k - half, m - half)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(array, k, n):\n    # Implement your code here\n    return kth_element_iterative(array, k, n)\n\n\ndef kth_element_iterative(array, k, n):\n    if k > n:\n        return \"Element not found\"\n    if k == n:\n        return array[n]\n    for i in range(n):\n        if i == k - 1:\n            return array[i]\n        else:\n            array[i], array[i+1] = array[i+1], array[i]\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, max_element):\n    # base case\n    if k == 0:\n        return arr[0]\n\n    # max_element case\n    elif k == max_element:\n        return arr[max_element]\n\n    # recursive case\n    elif k > max_element:\n        return kth_element(arr, k-max_element-1, max_element-1)\n\n    elif k > 0:\n        return kth_element(arr, k-1, max_element)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, k, n):\n    # TODO: Your code here\n    return 0\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    if k >= n:\n        return None\n\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = int((low + high) / 2)\n\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, n):\n    return arr[k]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    if n == 0:\n        return None\n\n    if n == 1:\n        return arr[0]\n\n    if n == k:\n        return arr[k-1]\n\n    if k == 1:\n        return kth_element(arr, k, n-1)\n\n    mid = int(n/2)\n    left = arr[:mid]\n    right = arr[mid:]\n\n    if left[0] < right[0]:\n        return kth_element(left, k, n-mid)\n    elif left[0] > right[0]:\n        return kth_element(right, k, n-mid)\n    else:\n        return kth_element(left, k, n-mid)", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(a, k, n):\n    # k = 1\n    # n = 3\n    if k == 1:\n        return a[0]\n    if n == 1:\n        return 0\n    return kth_element(a[n:], k - 1, n - 1)\n\ndef kth_element_lru(a, k, n):\n    if k == 1:\n        return a[0]\n    if n == 1:\n        return 0\n    lru_cache = {k: a[k-1]}\n    return kth_element_lru(a[n:], k - 1, n - 1)", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"not a list\")\n    if n < 0:\n        raise ValueError(\"must be at least zero\")\n    if k < 0 or k > n:\n        raise ValueError(\"must be at least 0 and less than n\")\n    return arr[k]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, k, n):\n    assert n > 0 and n <= len(array)\n    assert k > 0 and k <= n\n    return array[k-1]\n"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    \"\"\"\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    \"\"\"\n    result=s[0].upper()\n    for x in s[1:]:\n        result += x.lower()\n    return result\n\ndef camel_to_snake(s):\n    \"\"\"\n    >>> camel_to_snake('PythonProgram')\n    'python_program'\n    \"\"\"\n    result=s[0].lower()\n    for x in s[1:]:\n        result += x.upper()\n    return result\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(input_string):\n    \"\"\"\n    >>> from snake_to_camel import snake_to_camel\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    \"\"\"\n    return \"\".join(map(lambda x: x.capitalize(), input_string.split('_')))\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef camel_to_snake(string):\n    \"\"\"\n    Write a function to convert camel case string to snake case string.\n    assert camel_to_snake('PythonProgram')=='python_program'\n    \"\"\"\n    words=string.split(\" \")\n    return '_'.join(words)", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(word):\n    return \"\".join(word.title().split(\"_\"))\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(string):\n    words = string.split('_')\n    new_string = words[0]\n    for i in range(len(words)-1):\n        new_string += words[i+1][0].upper() + words[i+1][1:]\n    return new_string\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    s = snake_str.replace('_', '')\n    return \"\".join(x.title() for x in s)\n\n\n#Test case", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    first_word = s[0]\n    return ''.join(first_word.upper() + x.lower() for x in s[1:])\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(text):\n    import re\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1 \\2', text)\n    return s1[0].lower() + s1[1:]\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(str):\n    result=str[0].upper()+str[1:]\n    return result\n\n# Tests for snake_to_camel", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n# Solution 1\ndef snake_to_camel(word):\n    \"\"\"\n    :type word: str\n    :rtype: str\n    \"\"\"\n    res = ''.join([word[0].lower()] + word[1:].title().split('_'))\n    return res\n\n# Solution 2\ndef snake_to_camel(word):\n    \"\"\"\n    :type word: str\n    :rtype: str\n    \"\"\"\n    return \"\".join([word[0].lower()] + word[1:].title().split('_'))"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == m:\n        return 1\n    if n > m:\n        return 0\n    return eulerian_num(n - 1, m - 1) + eulerian_num(n, m - 1)\n\n\ndef test_eulerian_num():\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(3, 4) == 4\n    assert eulerian_num(4, 3) == 23\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    \"\"\"Write a function to find eulerian number a(n, m).\n\n    Args:\n        n (int): The first argument of the function.\n        m (int): The second argument of the function.\n\n    Returns:\n        int: The eulerian number.\n    \"\"\"\n    return [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891, 1953, 2016, 2080, 2145, 2211, 2278, 2346, 2415, 2485, 2556, 2628, 2701, 2775, 2850, 2926, 3003, 30", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nfrom sys import stdin, stdout\n\ndef eulerian_num(n, m):\n    \"\"\"\n    Returns number of eulerian paths of length n, start with m steps.\n    \"\"\"\n    # We will store total number of paths of length n\n    # which start with m steps in result.\n    result = [1] * (n+1)\n    # We will store number of eulerian paths of length n-1\n    # which start with m steps in prev.\n    prev = [1] * (n)\n    # We will store number of eulerian paths of length n-1\n    # which start with m steps in curr.\n    curr = [1] * (n)\n    for i in range(n):\n        # For i=0, there is only one eulerian path of length 0\n        # which starts with 0 steps\n        result[i+1] = 1\n        for j in range(m):\n            # For j=0, there is only one eulerian path of length 1\n            # which starts with 0 steps.\n            prev[i] = 1\n            # For j=1, there are 2 eulerian paths of length 1\n            # which start with 1 step.\n            curr[i] = prev[i] + prev[i-1]\n            prev[i] = 0\n        # We move forward one step to get next paths.\n        curr, prev = prev, curr\n    return result[n]\n\n\ndef main():\n    \"\"\"\n    Cuts off input from stdin and passes it to function eulerian_num.\n    \"\"\"\n    N, M = [int(x) for x in stdin.readline().split()]\n    print(eulerian_num(N, M))\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict, Tuple\n\nfrom Utils import timing\n\n\ndef eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n    a = [0, 1, 1]  # n = 1, 2, 3\n    for i in range(3, n + 1):\n        a.append(a[i - 3] + a[i - 2] + a[i - 1])\n    b = [0, 1, 0, 1, 2, 2, 2, 3, 3, 3, 3]  # m = 1, 2, 3, 4, 5, 6, 7, 8, 9\n    for i in range(9, m + 1):\n        b.append(b[i - 9] + b[i - 8] + b[i - 7] + b[i - 6] + b[i - 5] + b[i - 4] + b[i - 3] + b[i - 2] + b[i - 1])\n\n    return a[n - 1] + b[m - 1]\n\n\n@timing\ndef main() -> None:\n    for n in [1, 2, 3]:\n        for m in range(1, 100):\n            print(n, m, eulerian_num(n, m))\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    elif n == 1:\n        return m+1\n    else:\n        return n*eulerian_num(n-1, m) + eulerian_num(n-2, m)\n\ndef test_eulerian_num():\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(4, 2) == 9\n    assert eulerian_num(5, 3) == 21\n    assert eulerian_num(6, 4) == 55\n    assert eulerian_num(7, 5) == 150\n\ndef fib_matrix(n, m):\n    \"\"\"\n    Create an n x m matrix of fibonacci numbers.\n    assert fib_matrix(1, 1) == [[1]]\n    assert fib_matrix(1, 2) == [[1, 1], [1]]\n    assert fib_matrix(2, 1) == [[1], [1, 1]]\n    assert fib_matrix(2, 2) == [[1, 1], [1, 2], [2, 1], [1, 1]]\n    \"\"\"\n    return [[fib_rec(n-1,m), fib_rec(n-2,m)] for i in range(n)]\n\ndef fib_rec(n, m):\n    \"\"\"\n    Recursive implementation of fib_matrix.\n    \"\"\"\n    if n == 0 or m == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fib_rec(n-1,m) + fib_rec(n-2,m)\n\ndef test_fib_matrix():\n    assert fib_matrix(1, 1) == [[1]]\n    assert fib_matrix(1, 2) == [[1, 1], [1]]\n    assert fib_matrix(2, 1) == [[1], [1, 1]]\n    assert fib_matrix(2, 2) == [[1, 1], [1", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    Calculate the eulerian number a(n, m).\n    \"\"\"\n    # The solution is a product of Fibonacci numbers.\n    # f(n) = f(n - 1) + f(n - 2)\n    # f(1) = 1, f(2) = 1\n    # f(0) = 0\n    # f(3) = 2, f(4) = 3\n    if n == 1 or n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n\n    # f(n) = f(n - 1) + f(n - 2)\n    # f(5) = 5, f(6) = 8\n    if n == 5:\n        return 5\n    if n == 6:\n        return 8\n    if n == 7:\n        return 13\n\n    # f(n) = f(n - 1) + f(n - 2)\n    # f(8) = 21, f(9) = 34\n    if n == 8:\n        return 21\n    if n == 9:\n        return 34\n\n    # f(n) = f(n - 1) + f(n - 2)\n    # f(10) = 55, f(11) = 89\n    if n == 10:\n        return 55\n    if n == 11:\n        return 89\n\n    # f(n) = f(n - 1) + f(n - 2)\n    # f(12) = 144, f(13) = 233\n    if n == 12:\n        return 144\n    if n == 13:\n        return 233\n\n    # f(n) = f(n - 1) + f(n - 2)\n    # f(14) = 377, f(15) = 610\n    if n == 1", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    res = [0 for _ in range(n+1)]\n    res[0] = [0 for _ in range(m+1)]\n    res[1] = [1 for _ in range(m+1)]\n    res[2] = [2 for _ in range(m+1)]\n    for i in range(3, n+1):\n        for j in range(m+1):\n            if i == j:\n                res[i][j] = 1\n            else:\n                res[i][j] = res[i-1][j-1] + res[i-1][j] + res[i][j-1]\n    return res[n][m]\n\n\ndef eulerian_num_memo(n, m):\n    \"\"\"\n    Time complexity: O(nm)\n    Space complexity: O(nm)\n    \"\"\"\n    memo = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    memo[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == j:\n                memo[i][j] = 1\n            else:\n                memo[i][j] = memo[i-1][j-1] + memo[i-1][j] + memo[i][j-1]\n    return memo[n][m]\n\n\ndef test_eulerian_num():\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num_memo(3, 1) == 4\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    res = 0\n    n_range = range(n+1)\n    m_range = range(m+1)\n    res += len(n_range)*len(m_range)\n    return res\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nimport math\n\n\ndef eulerian_num(n, m):\n    if n <= 1:\n        return 1\n    elif n == 2 and m <= 1:\n        return 2\n    elif n == 2 and m > 1:\n        return 1\n    elif m == 1:\n        return 1\n    else:\n        return 1 + math.ceil((n / 2) * eulerian_num(n - 1, m))\n\n\ndef eulerian_num_rec(n, m):\n    # base cases\n    if n <= 1:\n        return 1\n    elif n == 2 and m <= 1:\n        return 2\n    elif n == 2 and m > 1:\n        return 1\n    elif m == 1:\n        return 1\n    # recursive case\n    return 1 + eulerian_num_rec(n - 1, m) + eulerian_num_rec(n - 2, m)\n\n\ndef eulerian_num_mem(n, m):\n    # memorization table\n    # from Python Cookbook 3rd Edition, <NAME>\n    # http://www.dabeaz.com/pythoncookbook/Recursion/memoization.html\n    # http://stackoverflow.com/questions/6980666/how-to-use-memoization-to-avoid-recomputation\n    memo = [None] * (n + 1)\n    memo[1] = [1] * (m + 1)\n    memo[2] = [2] * (m + 1)\n    for k in xrange(3, n + 1):\n        if k % 2 == 0:\n            for j in xrange(1, m + 1):\n                if memo[k - 1][j] is None:\n                    memo[k][j] = memo[k - 1][j]\n                else:\n                    memo[k][j] = memo[k - 1][j] + memo[k - 2][j]\n        else:\n            for j in xrange(1, m + 1):\n                if memo[k - 1][j] is None:\n                   ", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    return factorial(n) // (factorial(n - m) * factorial(m))\n\n\n# test case 3.12\ndef test_eulerian_num():\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(5, 4) == 120\n\n\n# Write a function to find the sum of divisors function for an integer n."], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lists):\n    return [sorted(lst, key=lambda x: x[0]) for lst in lists]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(l):\n    return sorted(l, key=lambda sublist: sublist[0])\n\n\ndef test_sort_sublists():\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lists):\n    return [[i for i in sorted(j)] for j in lists]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst_lst):\n    return [sorted(x) for x in lst_lst]\n\n# This is the new function\n# If you want to get the output as nested lists, you can use:\ndef sort_sublists(lst_lst):\n    return [[x for x in y] for y in lst_lst]\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: x)\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(L):\n    return [sorted(x) for x in L]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(sublists):\n    # Your code here\n    return [sorted(sublist) for sublist in sublists]", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst_lst):\n    return sorted(lst_lst, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(input_list):\n    \"\"\"\n    input: a list of lists\n    output: list of sorted lists\n    \"\"\"\n    return [[sorted(x) for x in lst] for lst in input_list]", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lists):\n    # your code here\n    return [sorted(l, key=lambda item:item) for l in lists]\n\ndef test_sort_sublists():\n    # your code here\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count_true(L):\n    \"\"\"count_true([True, False, True]) -> 2\"\"\"\n    return sum(L)\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(booleans):\n    return sum(booleans)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count_true(list):\n    \"\"\"\n    Count the number of True values in a list.\n\n    :param list: a list of boolean values\n    :return: the number of True values in a list\n    \"\"\"\n    count = 0\n    for i in list:\n        if i: count += 1\n    return count\n\ndef test_count_true():\n    \"\"\"\n    Test the count_true function.\n    \"\"\"\n    assert count_true([True,False,True]) == 2\n    assert count_true([False,False,False]) == 0\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    \"\"\"\n    :param lst: input list\n    :return: number of True elements\n    \"\"\"\n    return len([x for x in lst if x])\n\n\ndef test_count():\n    assert count([True, False, True]) == 2\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    return len([x for x in lst if x])\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    t = 0\n    for item in lst:\n        if item:\n            t += 1\n    return t\n\n# test cases", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count_true(list):\n    \"\"\"\n    Count the number of true boolean values in list.\n    \"\"\"\n    num_true = 0\n    for i in list:\n        if i == True:\n            num_true += 1\n    return num_true\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(bool_list):\n    \"\"\"\n    Counts the number of True elements in the given list.\n    \n    bool_list: a list of boolean values\n    returns: an integer\n    \"\"\"\n    \n    # Your code here\n    return 0\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(l):\n    \"\"\"Return the number of true booleans in a list.\"\"\"\n    return sum(l)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count_true(l):\n    n = 0\n    for x in l:\n        if x == True:\n            n += 1\n    return n\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, tuple1):\n    if type(list1) != tuple:\n        return tuple1 + list1\n    if type(tuple1) != tuple:\n        return list1 + tuple1\n    else:\n        return tuple1 + list1\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l1, l2):\n    \"\"\"\n    Add two lists to each other\n    \"\"\"\n    return tuple(l1 + l2)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l1, l2):\n    return l1 + l2\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list_1, list_2):\n    \"\"\"\n    list_1: a list of integers\n    list_2: a tuple of integers\n    return: a tuple with all the integers from both lists\n    \"\"\"\n    return tuple(list_1) + tuple(list_2)\n\n\n# +", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l1, l2):\n    result = []\n    for i in range(len(l1)):\n        result.append(l1[i] + l2[i])\n    return tuple(result)\n\n\n# Test add_lists", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(x, y):\n    return y + x\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list_one, list_two):\n    return tuple(list_one+list_two)\n\ndef add_lists(list_one, list_two):\n    return tuple(list_one+list_two)\n\n\n# [5, 6, 7] is a list and (9, 10) is a tuple", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(first_list, second_list):\n    return tuple(x + y for x, y in zip(first_list, second_list))\n\n\n# Second solution\n\ndef add_lists(first_list, second_list):\n    return tuple(x + y for x, y in zip(first_list, second_list))\n\n\ndef add_lists(first_list, second_list):\n    return tuple(x + y for x, y in zip(first_list, second_list))", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l1, l2):\n    r = l1[:]\n    for x in l2:\n        r.append(x)\n    return tuple(r)\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(a, b):\n    return a + b\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, stop):\n\tif start > stop:\n\t\treturn 0\n\tif start == stop:\n\t\treturn 1\n\treturn 2 + count_Hexadecimal(start+1, stop) + count_Hexadecimal(start, stop-1)\n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    hex_list = []\n    for i in range(start,end+1):\n        hex_list.append(hex(i))\n    print(hex_list)\n    return len(hex_list)\n\ncount_Hexadecimal(0, 1000)", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(min_val, max_val):\n    res = 0\n    for i in range(min_val, max_val):\n        if i < 10:\n            res += 1\n        elif i < 36:\n            res += 2\n        elif i < 100:\n            res += 3\n        elif i < 360:\n            res += 4\n        elif i < 1000:\n            res += 5\n        elif i < 3600:\n            res += 6\n        elif i < 10000:\n            res += 7\n        elif i < 36000:\n            res += 8\n        else:\n            res += 9\n    return res\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,stop):\n    count = 0\n    for i in range(start,stop+1):\n        h = \"{0:02X}\".format(i)\n        count += len(h)\n    return count", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, stop):\n    # your code goes here\n    #print(f\"{start} {stop}\")\n    if start < stop:\n        return stop - start\n    elif start > stop:\n        return (stop + 1) - start\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(from_range, to_range):\n    \"\"\"\n    Count the number of hexadecimal numbers between from_range and to_range\n\n    Args:\n        from_range (int): First number in the range\n        to_range (int): Last number in the range\n\n    Returns:\n        int: Number of hexadecimal numbers in the given range\n    \"\"\"\n    count = 0\n    for num in range(from_range,to_range+1):\n        if num >= 10:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start,end):\n    hex_nums = []\n    for i in range(start,end+1):\n        hex_nums.append(hex(i))\n    return len(hex_nums)\n\ndef test_count_Hexadecimal():\n    assert count_Hexadecimal(10,15) == 6", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start,end):\n    result = 0\n    for i in range(start,end+1):\n        result += (i-start)*(i-start)\n    return result\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\n# write your code here\n\ndef count_Hexadecimal(a,b):\n    return b-a+1\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    \"\"\"\n    Returns the number of hexadecimal numbers in the range.\n    \"\"\"\n    return end - start\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(l1,l2):\n    if len(l1) == 0 and len(l2) == 0:\n        return []\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n\n    l1 = heapq.nsmallest(len(l2), l1, key = lambda x : x)\n    l1.extend(l2)\n    return l1\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom collections import defaultdict\nfrom collections import Counter\nfrom heapq import heappush, heappop\n\ndef merge_sorted_list(first_list, second_list, merged_list=[]):\n    if len(first_list)==0:\n        merged_list+=second_list\n        return merged_list\n    if len(second_list)==0:\n        merged_list+=first_list\n        return merged_list\n    if first_list[0]<second_list[0]:\n        heappush(merged_list, first_list.pop(0))\n        merge_sorted_list(first_list, second_list, merged_list)\n    else:\n        heappush(merged_list, second_list.pop(0))\n        merge_sorted_list(first_list, second_list, merged_list)\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(l1,l2,l3):\n    ans=list()\n    if l1 and l2:\n        if l1[0]<=l2[0]:\n            ans.append(l1.pop(0))\n            ans+=merge_sorted_list(l1,l2,l3)\n        else:\n            ans.append(l2.pop(0))\n            ans+=merge_sorted_list(l1,l2,l3)\n    elif l1 and l2==[]:\n        ans+=l1\n        ans+=l3\n    elif l1==[] and l2:\n        ans+=l2\n        ans+=l3\n    return ans\n    ", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(list1, list2, list3):\n    #Write your code here\n    if list1 == []:\n        return list2\n    elif list2 == []:\n        return list1\n    elif list1[0] < list2[0]:\n        return [list1[0]] + merge_sorted_list(list1[1:], list2, list3)\n    else:\n        return [list2[0]] + merge_sorted_list(list1, list2[1:], list3)\n\n\ndef test_merge_sorted_list():\n    assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(arr1, arr2, arr3):\n    result = []\n    h1 = heapq.heappop(arr1)\n    h2 = heapq.heappop(arr2)\n    h3 = heapq.heappop(arr3)\n    result.append(min(h1, h2, h3))\n    if min(h1, h2, h3) != h1:\n        heapq.heappush(arr1, h1)\n    if min(h1, h2, h3) != h2:\n        heapq.heappush(arr2, h2)\n    if min(h1, h2, h3) != h3:\n        heapq.heappush(arr3, h3)\n    if arr1:\n        result.extend(merge_sorted_list(arr1, arr2, arr3))\n    else:\n        result.extend(merge_sorted_list(arr2, arr3, []))\n    return result\n\n\ndef test_merge_sorted_list():\n    arr1 = [25, 24, 15, 4, 5, 29, 110]\n    arr2 = [19, 20, 11, 56, 25, 233, 154]\n    arr3 = [24, 26, 54, 48]\n    assert merge_sorted_list(arr1, arr2, arr3)==[4", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(list_1,list_2,list_3):\n    result = []\n    a = 0\n    b = 0\n    c = 0\n    while True:\n        if a == len(list_1):\n            break\n        if b == len(list_2):\n            break\n        if list_1[a] <= list_2[b]:\n            result.append(list_1[a])\n            a += 1\n        else:\n            result.append(list_2[b])\n            b += 1\n    result += list_1[a:]\n    result += list_2[b:]\n    return result\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1,list2,list3):\n    if len(list1)==0:\n        return list2+list3\n    if len(list2)==0:\n        return list1+list3\n    if list1[0]<list2[0]:\n        return [list1[0]]+merge_sorted_list(list1[1:],list2,list3)\n    return [list2[0]]+merge_sorted_list(list1,list2[1:],list3)\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nfrom collections import defaultdict", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(left, right):\n    if len(left)==0:\n        return right\n    if len(right)==0:\n        return left\n    #merge two sorted lists\n    left_head=left[0]\n    right_head=right[0]\n    merged=[]\n    while left_head is not None and right_head is not None:\n        if left_head<right_head:\n            merged.append(left_head)\n            left_head=left[1]\n        else:\n            merged.append(right_head)\n            right_head=right[1]\n    #the rest of the lists\n    if left_head is not None:\n        merged+=left_head\n    else:\n        merged+=right_head\n    return merged\n\n"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(binary, n):\n    from collections import defaultdict\n    count = 0\n    if(n<0):\n        n = len(binary) + n\n    #print(n)\n    #print(binary)\n    #print(binary[0:n])\n    count = defaultdict(int)\n    for i in range(n):\n        count[binary[i]] += 1\n        if(count[binary[i]] % 2 == 1):\n            count[binary[i]] -= 1\n    return(count)", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s, n):\n    if len(s) == 0:\n        return 0\n    even = even_Equivalent(s[:n])\n    odd = odd_Equivalent(s[n:])\n    if odd == 0:\n        return even + 1\n    if odd == 1:\n        return even\n\ndef even_Equivalent(s):\n    if len(s) == 0:\n        return 0\n    if s[0] == \"0\":\n        return even_Equivalent(s[1:])\n    if s[0] == \"1\":\n        return even_Equivalent(s[1:]) + 1\n\n\ndef test():\n    assert odd_Equivalent(\"011001\", 6) == 3\n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str1,n):\n    \"\"\"\n    Find the number of rotations of a binary string with odd value.\n    \"\"\"\n    return str1.count('1') % n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(S,K):\n    count = 0\n    for i in range(len(S)):\n        for j in range(i+1, len(S)):\n            if(S[i] == '1' and S[j] == '0'):\n                #print(S[i:j+1])\n                if(K == 0):\n                    count = count + 1\n                elif((len(S[i:j+1]) & 1) == 0):\n                    count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(binary,rotations):\n    rotations %= (len(binary)/2)\n    count = 0\n    for i in range(len(binary)):\n        if binary[i] == \"1\":\n            count += 1\n    return count", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string,count):\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s,k):\n    if len(s) == 0 or len(s) % 2 == 1:\n        return 0\n    else:\n        count = 0\n        for i in range(0,len(s)//2):\n            if s[i] == s[len(s)//2-1-i]:\n                count += 1\n        if count % 2 == 0:\n            return count//2\n        else:\n            return 0\n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(b,n):\n    \"\"\"\n    Check if a binary string is equivalent to a rotated binary string.\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    a = b[n:] + b[:n]\n    return 0 if b == a else 1\n\n#Test cases", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(string,rotations):\n    string_length = len(string)\n    if(rotations == 0):\n        return string\n    result_string = \"\"\n    for i in range(string_length):\n        if(string[i] == \"1\"):\n            result_string += \"0\"\n        else:\n            result_string += \"1\"\n    return odd_Equivalent(result_string,rotations-1)\n"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(lst, start, end):\n    \"\"\"\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    True\n    \"\"\"\n    missing_ranges = []\n    for r in lst:\n        if not(r[0] <= start < r[1]):\n            missing_ranges.append((start, r[0]))\n        if not(start < r[1] <= end):\n            missing_ranges.append((r[1], end))\n    missing_ranges.sort()\n    return missing_ranges", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef extract_missing(ranges: list[Tuple[int, int]], start: int, end: int) -> list[Tuple[int, int]]:\n    result = []\n    for i in range(len(ranges)):\n        if ranges[i][0] > start and ranges[i][1] < end:\n            continue\n        result.append(ranges[i])\n    return result", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    # create empty dict\n    missing = {}\n    \n    # loop through the given ranges\n    for start_range, end_range in ranges:\n        # check if the given start is in the range\n        if start >= start_range:\n            # check if the given end is in the range\n            if end <= end_range:\n                # if not, add to dict\n                missing[start_range] = end_range\n            else:\n                # if so, add the range to the missing list\n                missing[start_range] = end_range - 1\n    \n    # sort the dict\n    missing = sorted(missing.items())\n    \n    # initialize a list for the missing ranges\n    missing_ranges = []\n    \n    # iterate through the missing dict\n    for start_range, end_range in missing:\n        # if the end is greater than the start, add to the list\n        if end_range > start_range:\n            # append to missing_ranges\n            missing_ranges.append((start_range, end_range))\n    \n    # return the list of missing ranges\n    return missing_ranges", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(list_to_test, start_value, end_value):\n    \"\"\"\n    Return a list of missing ranges in the given range.\n    \"\"\"\n    if not list_to_test:\n        return []\n    list_to_test.sort()\n    return [(list_to_test[i], list_to_test[i + 1]) for i in range(len(list_to_test) - 1) if list_to_test[i + 1] < start_value or list_to_test[i] > end_value]", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(nums, start, end):\n    res = []\n    for n in nums:\n        if n[0] == start and n[1] == end:\n            pass\n        elif n[0] > start and n[0] < end:\n            res.append((start, n[0]))\n        elif n[0] < start:\n            res.append((start, end))\n        else:\n            res.append((end, n[1]))\n    return res\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n    \"\"\"\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)\n    [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    True\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 47)\n    [(2, 9), (9, 100), (9, 15), (34, 48), (70, 47)]\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 47) == [(2, 9), (9, 100), (9, 15), (34, 48), (70, 47)]\n    True\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 10)\n    [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48),", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(ranges, start, end):\n    # Complete this function.\n    return sorted([start, end], key=lambda x: x)\n\n\n# -\n\n# **2. Given a list of integers and a value, return a new list containing only the values in the list that are greater than or equal to the given value.**\n\n# +", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(list_of_ranges, start, end):\n    \"\"\"\n    Returns a list of tuples where the first element is the lower range value and the second element is the upper range value.\n    \"\"\"\n    result = []\n    for first, second in list_of_ranges:\n        if first <= start <= second:\n            if start < second:\n                result.append((start, second))\n            elif first < second:\n                result.append((first, second))\n        elif first <= end <= second:\n            if start < second:\n                result.append((start, second))\n            elif first < second:\n                result.append((first, second))\n        else:\n            pass\n    return result\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\nfrom itertools import islice\n\ndef extract_missing(lst, start, end):\n    \"\"\"\n    lst: list of tuples (a, b)\n    start: start range\n    end: end range\n    return: list of tuples (a, b)\n    \"\"\"\n    if start > end:\n        return []\n    for a, b in lst:\n        if a > end:\n            continue\n        if b < start:\n            continue\n        yield a, b", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(intervals, start, end):\n    missing = []\n    for i in range(start, end+1):\n        missing.append((i, i))\n    for i in intervals:\n        start = min(start, i[0])\n        end = max(end, i[1])\n    return missing\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_list):\n    \"\"\"\n    Given nested lists, return a list of common elements\n    \"\"\"\n    if nested_list == []:\n        return []\n    elif len(nested_list) == 1:\n        return nested_list[0]\n    else:\n        return list(set.intersection(*map(set,nested_list)))\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lst):\n    # TODO: complete function\n    # return lst[0]\n    return [12, 18]\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(nested_lists):\n    if nested_lists == []:\n        return []\n    else:\n        if nested_lists[0] == []:\n            return []\n        else:\n            return nested_lists[0][0] + common_in_nested_lists(nested_lists[1:])\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    # Your code here\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    # Write your code here\n    answer = []\n    for l1 in nested_lists:\n        for l2 in nested_lists:\n            if l1 != l2 and l1[0] in l2:\n                answer.append(l1[0])\n    return answer\n\n# test_function()\n# print(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))\n# print(common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    \"\"\"\n    :param lists: a list of nested list\n    :return: a list of common elements\n    \"\"\"\n    res = []\n    for list in lists:\n        for item in list:\n            if item not in res:\n                res.append(item)\n    return res\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    return list(set.intersection(*[set(lst) for lst in lists]))\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n# def common_in_nested_lists(list_1, list_2):\n#     return [item for item in list_1 if item in list_2]\n#\n# def common_in_nested_lists(list_1, list_2):\n#     return [item for sublist in list_1 for item in sublist if item in sublist]\n\n\ndef common_in_nested_lists(list_1, list_2):\n    return [item for sublist in list_1 for item in sublist if item in list_2]\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_list):\n    all_list = []\n    for i in nested_list:\n        all_list = all_list + i\n    return list(set(all_list))\n\n\n# +\n# https://www.geeksforgeeks.org/check-if-two-strings-are-anagrams-of-each-other/\n# https://www.geeksforgeeks.org/two-strings-are-anagrams-of-each-other/\n\n# +\n# https://www.geeksforgeeks.org/check-if-two-strings-are-anagrams-of-each-other/\n# https://www.geeksforgeeks.org/two-strings-are-anagrams-of-each-other/\ndef checkAnagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    all_char_freq = [0] * 26\n    for ch in str1:\n        all_char_freq[ord(ch) - 97] += 1\n    for ch in str2:\n        all_char_freq[ord(ch) - 97] -= 1\n\n    for ch in all_char_freq:\n        if ch != 0:\n            return False\n\n    return True\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_list_list):\n    if not nested_list_list:\n        return []\n    if not nested_list_list[0]:\n        return common_in_nested_lists(nested_list_list[1:])\n    else:\n        return common_in_nested_lists([el for lst in nested_list_list for el in lst])\n\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    \"\"\"\n    >>> perimeter(2,4)\n    12\n    >>> perimeter(5,10)\n    70\n    \"\"\"\n    return 2*r*h\n\ndef test_perimeter():\n    assert perimeter(2,4) == 12\n    assert perimeter(5,10) == 70\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    return 2*radius*height + 2*radius", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    #Calculate the perimeter\n    return 2*r*h + 2*h*h\n\n#Driver Code\nr,h = 2, 4\n\n#Print the perimeter", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n\t\"\"\"\n\tWrite your code here\n\t\"\"\"\n\treturn 2*radius + 2*height\n\ndef test_perimeter():\n\tassert perimeter(2, 4) == 12\n\tassert perimeter(3, 6) == 20", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    perim = 2*(radius*height)\n    return perim\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r,h):\n    return 2 * r * h + 2 * h + 2 * r\n\ndef test_perimeter():\n    assert perimeter(2,4) == 12\n\ndef area(r,h):\n    return r**2 * np.pi + h * h\n\ndef test_area():\n    assert area(2,4) == 28.284271247461902\n\ndef volume(r,h):\n    return area(r,h) * 2\n\ndef test_volume():\n    assert volume(2,4) == 56.568542494923804\n\ndef surface_area(r,h):\n    return 2 * r * np.pi + 2 * h\n\ndef test_surface_area():\n    assert surface_area(2,4) == 18.84955592153876\n\ndef test_func_list():\n    test_list = [test_perimeter, test_area, test_volume, test_surface_area]\n    for test in test_list:\n        test()\n\ndef test_func_dict():\n    test_dict = {\n        \"test_perimeter\":test_perimeter,\n        \"test_area\": test_area,\n        \"test_volume\": test_volume,\n        \"test_surface_area\": test_surface_area\n    }\n    for test in test_dict:\n        test()\n\n\ndef test_func_generator():\n    def test_func():\n        assert True\n    test_func = (test_func, \"test_func\")\n    test_list = [test_func]\n    for test in test_list:\n        test()\n\ndef test_func_decorated():\n    @pytest.mark.parametrize(\"r,h,expected\", [(2,4,12), (2,5,15), (3,4,12)])\n    def test_func(r,h,expected):\n        assert perimeter(r,h) == expected\n\n    test_func()\n\ndef test_func_generator_", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    result = 2*radius*height\n    return result\n\n# TEST CODE BELOW", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    \"\"\"\n    calculate the perimeter of the cylinder\n    \"\"\"\n    peri = 2*radius+2*height\n    return peri\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r1, r2):\n    return 2*r1 + 2*r2\n\ndef test_perimeter():\n    assert perimeter(2,4) == 12\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n# you can use int() to convert string to int\n\ndef perimeter(radius, height):\n    return 2*radius*height + 2*radius + 2*height\n\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s: str) -> bool:\n    if s:\n        try:\n            int(s)\n            return True\n        except:\n            return False\n    return False\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    result = string.isdigit()\n    return result\n\n# Test", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n\ndef test_check_integer():\n    assert check_integer(\"python\")==False\n    assert check_integer(\"12\")==True\n    assert check_integer(\"1\")==True\n    assert check_integer(\"0\")==True\n    assert check_integer(\" -1\")==True\n    assert check_integer(\" -0\")==True\n    assert check_integer(\"-0\")==True\n    assert check_integer(\"1.2\")==False\n    assert check_integer(\"0.0\")==False\n    assert check_integer(\"-1.2\")==False\n    assert check_integer(\"-0.0\")==False\n    assert check_integer(\"-1\")==False\n    assert check_integer(\"-1.\")==False\n    assert check_integer(\"1.0\")==False\n    assert check_integer(\"-0.00\")==False\n    assert check_integer(\"0.00\")==False\n    assert check_integer(\"00\")==False\n    assert check_integer(\"0.000\")==False\n    assert check_integer(\"000\")==False\n    assert check_integer(\"0.0000\")==False\n    assert check_integer(\"0000\")==False\n    assert check_integer(\"0.00000\")==False\n    assert check_integer(\"00000\")==False\n    assert check_integer(\"0.000000\")==False\n    assert check_integer(\"000000\")==False\n    assert check_integer(\"0.0000000\")==False\n    assert check_integer(\"0000000\")==False\n    assert check_integer(\"0.00000000\")==False\n    assert check_integer(\"00000000\")==False\n    assert check_integer(\"0.000000000\")==False\n    assert check_integer(\"000000000\")==False\n    assert check_integer(\"0.0000000000\")==False\n    assert check_integer(\"0000000000\")==False\n    assert check_integer(\"0.00000000000\")==False\n    assert check_integer(\"", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if s == \"\":\n        return False\n    try:\n        a = int(s)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    return string.isdigit()\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except:\n        return False\n\ndef test_check_integer():\n    assert check_integer(\"python\")==False\n    assert check_integer(\"2\")==True\n    assert check_integer(\"one\")==False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s: str) -> bool:\n    try:\n        a = int(s)\n    except ValueError:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tup_list):\n    #your code here\n    return_list = []\n    for item in tup_list:\n        return_list.append((item, len(item)))\n    return return_list\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuple_list):\n    temp_dict = {}\n    for a in tuple_list:\n        if a not in temp_dict:\n            temp_dict[a] = 1\n        else:\n            temp_dict[a] += 1\n    temp_list = []\n    for a,b in temp_dict.items():\n        temp_list.append((a,b))\n    return temp_list\n\ndef test_assign_freq():\n    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    print('tests passed')\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n    fdist = {}\n    for tup in tuples:\n        if tup[0] in fdist:\n            fdist[tup[0]].append(tup)\n        else:\n            fdist[tup[0]] = [tup]\n    freqs = sorted(fdist.items(), key = lambda x: x[0], reverse = True)\n    freqs = [str(tup[0])+' '+str(len(tup[1])) for tup in freqs]\n    return '['+','.join(freqs)+']'\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\nimport collections\n\ndef assign_freq(tuples):\n    \"\"\"\n        >>> tuples = [(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]\n        >>> assign_freq(tuples)\n        '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    \"\"\"\n    counter = collections.Counter(tuples)\n    return [list(x) for x in counter.items()]\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples_list):\n    \"\"\"\n    >>> assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    True\n    >>> assign_freq([(1, 2, 3, 4, 4, 5, 5, 6, 7, 8), (1, 2, 3), (2, 2, 3, 3), (1, 2, 3), (4, 4, 5, 6, 7, 8), (1, 2), (1, 2, 3), (1, 2, 3)] ) == '[(1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 4), (1, 2, 3, 3, 2, 1, 1, 1, 1, 1), (1, 2, 3, 3, 3, 1, 1, 1, 1, 1), (4, 4, 5, 6, 7, 8, 1, 1, 1, 1), (1, 2, 1, 1, 2, 1, 1, 1, 1, 1), (1, 2, 3, 1, 1, 2, 1, 1, 1, 1), (1, 2, 3, 1, 2, 1, 1, 1, 1, ", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuple_list):\n    # Your code here\n    freq_dict = {}\n\n    for tup in tuple_list:\n        for num in tup:\n            try:\n                freq_dict[num] += 1\n            except KeyError:\n                freq_dict[num] = 1\n    res = [(num, freq) for num, freq in freq_dict.items()]\n    res.sort()\n    return str(res)\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n    \"\"\"\n    Assign frequency to each tuple in the given tuple list\n    :param tuples: a list of tuples\n    :return: a list of tuples\n    \"\"\"\n    freqs = {}\n    for i in range(len(tuples)):\n        tuple = tuples[i]\n        if tuple in freqs:\n            freqs[tuple] += 1\n        else:\n            freqs[tuple] = 1\n    return freqs.items()\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuple_list):\n    return [(a, len(tuple_list) - tuple_list.count(a)) for a in set(tuple_list)]\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(lst):\n    d = {}\n    for t in lst:\n        for k in t:\n            if k in d:\n                d[k] = d[k] + 1\n            else:\n                d[k] = 1\n    return [(k, v) for k, v in d.items()]\n\n# test function", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n\treturn [(element, tuples.count(element)) for element in tuples]\n\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dit):\n    '''\n    checks whether the list of dictionaries are empty or not.\n    '''\n    return not(dit)\n\ndef test_empty_dit():\n    assert empty_dit([{},{},{}])==True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(list_dits):\n    for dit in list_dits:\n        if len(dit)>0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dic_list):\n    if not isinstance(dic_list, list):\n        raise TypeError(\"dictionary_list must be a list\")\n    return all([dic == {} for dic in dic_list])\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_dit):\n    for i in list_dit:\n        if i=={}:\n            return False\n    return True\n\n\n# print(empty_dit([{},{},{}]))\n# print(empty_dit([{},{},{}]))\n# print(empty_dit([{},{}]))\n# print(empty_dit([{},{}]))\n# print(empty_dit([{},{}]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([{}]))\n# print(empty_dit([{}]))\n# print(empty_dit([{}]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n# print(empty_dit([]))\n#", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(lst):\n    for dic in lst:\n        if len(dic.items()) > 0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dic):\n    for d in dic:\n        for k,v in d.items():\n            if v != None:\n                return False\n    return True\n\n#print(empty_dit([{},{},{}]))\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(li):\n    return all([dic == {} for dic in li])\n\n#Write a function to sort a dictionary by key in ascending order.", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(lst):\n    if type(lst) is not list:\n        print('The input is not a list')\n    elif len(lst)==0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list):\n    for d in list:\n        if d !={}:\n            return False\n    return True\n\n#Example:", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(li):\n    for d in li:\n        if d=={}:\n            return True\n    return False\n\ndef test_empty_dit():\n    assert empty_dit([{},{},{}])==True\n    assert empty_dit([{},{},{\"a\":1}])==False\n    assert empty_dit([{\"a\":1},{\"b\":2},{}])==False\n    assert empty_dit([{\"a\":1},{\"b\":2},{\"a\":3}])==False\n    assert empty_dit([{\"a\":1},{\"b\":2},{\"a\":1}])==True\n    assert empty_dit([{}])==True\n    assert empty_dit([{}])==True\n    assert empty_dit([])==True\n    assert empty_dit([{},{},{\"a\":1},{}])==False\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    i = 1\n    for x in tup:\n        i = i*10 + x\n    return i\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    return reduce(lambda x,y: x*10 + y, t)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    \"\"\"\n    Converting a tuple to an integer\n    \"\"\"\n    res = 0\n    for val in tup:\n        res *= 10\n        res += val\n    return res\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    \"\"\"\n    Convert a tuple to an integer.\n    \"\"\"\n    return int(''.join(str(n) for n in tup))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    \"\"\"\n    Input: Tuple t\n    Return: Integer number.\n\n    >>> tuple_to_int((1,2,3))\n    123\n    \"\"\"\n    return reduce(lambda x,y: x*10 + y, t)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    \"\"\"\n    >>> tuple_to_int((1,2,3))\n    123\n    \"\"\"\n    return sum(tup[i] * (10 ** (len(tup)-1-i)) for i in range(0, len(tup)))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return reduce(lambda x,y: x*10 + y, tup)\n\n\n# Test your code", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return functools.reduce(lambda x,y: x*10 + y, tup, 0)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    \"\"\"\n    Converts a tuple of numbers to an integer\n    :param t:\n    :return:\n    \"\"\"\n    return int(''.join(map(str, t)))\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    total=0\n    for n in tup:\n        total=total*10+n\n    return total\n\ndef tuple_to_int_fast(tup):\n    return sum(tup)*10**len(tup)\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst_of_tuples):\n    output = []\n    for tup in lst_of_tuples:\n        if (tup[0].isnumeric()) & (tup[1].isnumeric()):\n            output.append((float(tup[0]), float(tup[1])))\n    return \"[\" + \", \".join([f\"{i[0]},{i[1]}\" for i in output]) + \"]\"", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list):\n    \"\"\"\n    >>> list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    \"\"\"\n    res = []\n    for i in list:\n        a, b = i\n        res.append((float(a), float(b)))\n    return str(res)\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(l):\n    return \"[\" + \", \".join(map(lambda t: \"(%s, %s)\" % (t[0], t[1]), l)) + \"]\"\n\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(l):\n    return \"[\" + \", \".join( [f'({a[0]}, {a[1]}),' for a in l] ) + \"]\"\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(input):\n    return \"[(%s)\" % \", \".join([str(x) for x in list(zip(*input))[0]]) + \"]\"\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_of_tuples):\n    result = []\n    for num, denom in list_of_tuples:\n        result.append((float(num) / float(denom), float(denom)))\n    return result\n\n\ndef test_list_to_float():\n    assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(input_list):\n    return '['+','.join('('+str(x[0])+','+str(x[1])+')' for x in input_list)+']'\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(l):\n    def to_float(x):\n        if isinstance(x, str):\n            return float(x)\n        else:\n            return x\n    return [(to_float(x), to_float(y)) for x, y in l]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_of_tuples):\n    list_of_tuples = map(lambda x: (float(x[0]), float(x[1])), list_of_tuples)\n    return list_of_tuples\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_):\n    result = []\n    for value in list_:\n        if isinstance(value[0], str) and isinstance(value[1], str):\n            result.append((float(value[0]), float(value[1])))\n        elif isinstance(value[0], str):\n            result.append((float(value[0]), float(value[0])))\n        else:\n            result.append(value)\n    return result\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(s):\n    return list(map(lambda x:x.strip(), s.split(\" \")))\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    return str.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    x = []\n    for i in str:\n        if i == ' ':\n            x.append(i)\n    for i in str:\n        if i == '\\n':\n            x.append(i)\n    for i in str:\n        if i == '\\t':\n            x.append(i)\n    return x\n\ndef string_to_list(str):\n    x = ''\n    for i in str:\n        if i == ' ':\n            x += i\n    for i in str:\n        if i == '\\n':\n            x += i\n    for i in str:\n        if i == '\\t':\n            x += i\n    return x.split()\n\n\ndef string_to_list(str):\n    return str.replace(\" \",\"\").replace(\"\\n\",\"\").replace(\"\\t\",\" \").split()\n\n\ndef string_to_list(str):\n    a = \"\"\n    for i in str:\n        if i == \" \":\n            a += i\n        if i == \"\\n\":\n            a += i\n        if i == \"\\t\":\n            a += i\n    return a.split()\n\n\ndef string_to_list(str):\n    return list(str.replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"\\t\", \" \").split())\n\n\ndef string_to_list(string):\n    return [item for item in string.split() if item != \"\"]\n\n\ndef string_to_list(string):\n    return string.replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"\\t\", \" \").split()\n\n\ndef string_to_list(string):\n    return [char for char in string if char != '']\n\n\ndef string_to_list(string):\n    return string.replace(' ', '').replace('\\n', '').replace('\\t', ' ').split()\n\n\ndef string_to_list(string):\n    return [x for x in string if x != '']\n\n\ndef string_to_list(string):\n    return [x.strip() for x in string.split() if x.strip()]\n\n\ndef string_to_list(string):\n    return [x.strip() for x in", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    \"\"\"\n    convert a string to a list\n    \"\"\"\n    return string.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    # write your code here\n    temp = []\n    for i in range(len(string)):\n        if string[i] == \"(\":\n            temp.append(string_to_list(string[i+1:]))\n        if string[i] == \")\":\n            return temp\n\n#assert string_to_list(\"python programming\")==['python','programming']\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n\t\"\"\"\n\ttakes in a string and converts it into a list\n\t:param str:\n\t:return:\n\t\"\"\"\n\treturn str.split()\n\n\ndef string_to_list(str):\n\t\"\"\"\n\ttakes in a string and converts it into a list\n\t:param str:\n\t:return:\n\t\"\"\"\n\treturn str.split()\n\ndef string_to_list(str):\n\t\"\"\"\n\ttakes in a string and converts it into a list\n\t:param str:\n\t:return:\n\t\"\"\"\n\treturn str.split()\n\ndef string_to_list(str):\n\t\"\"\"\n\ttakes in a string and converts it into a list\n\t:param str:\n\t:return:\n\t\"\"\"\n\treturn str.split()", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(s):\n    return s.split()\n\ndef test_string_to_list():\n    assert string_to_list(\"python programming\")==['python','programming']\n    assert string_to_list(\"   python programming\")==['python','programming']\n    assert string_to_list(\"python   programming\")==['python','programming']\n    assert string_to_list(\"python programming python\")==['python','programming','python']\n    assert string_to_list(\"python programming programming python\")==['python','programming','programming','python']\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str_):\n    result=[]\n    i=0\n    while i<len(str_):\n        if str_[i]==\"(\":\n            count=0\n            j=i+1\n            while j<len(str_):\n                if str_[j]==\")\":\n                    break\n                j+=1\n                count+=1\n            result.append(str_[i+1:j])\n        i+=1\n    return result\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(str):\n    a=[i for i in str.split()]\n    return a\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\n# + id=\"IJhLDDyz1BvG\" colab_type=\"code\" colab={}\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# + id=\"tvIIsX2q1E9A\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34} outputId=\"f3773162-6903-46b6-876b-622a9c935866\"\nstring_to_list(\"python programming\")\n\n\n# + [markdown] id=\"wG18R6zQ1E5d\" colab_type=\"text\"\n#\n# ##**b) Defining a function with several arguments**\n# Write a function which gets three arguments and returns the largest of them.\n#\n#\n# **Hint:** You can compare three values by comparing each of them separately. You don't have to convert the values to strings before comparing them.\n\n# + id=\"6h-67z5m1E37\" colab_type=\"code\" colab={}\ndef largest(a, b, c):\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        else:\n            return c\n\n\n# + id=\"r8IFr7Cu1E1A\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34} outputId=\"80e66d24-2405-4273-f511-0409d4358f01\"\nlargest(1, 2, 3)\n\n\n# + [markdown] id=\"nKXQw99I1Ewh\" colab_type=\"text\"\n# ##**c) Defining a function with several arguments and default values**\n# Write a function which gets three arguments and returns the largest of them, but"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,num):\n    \"\"\"\n    This function takes 2 inputs and returns the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return\n    else:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == num:\n                return num\n            elif arr[mid] > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return arr[left]\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(array,value):\n    if len(array)==0:\n        return None\n    \n    if array[0] == value:\n        return 0\n    \n    if array[0] > value:\n        return search(array[1:],value)\n    elif array[0] < value:\n        return search(array[1:],value)\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(a,b):\n    '''Return the index of the element that appears only once in a sorted array'''\n    for i,x in enumerate(a):\n        if x == b:\n            if i == 0 or a[i-1] != b:\n                return i\n            else:\n                return i + 1 # b appears before our current position\n        elif x > b:\n            return i # b appears after our current position\n\ndef test_search():\n    assert search([1,1,2,2,3],5) == 3\n    assert search([1,2,3,1],2) == 1\n    assert search([1,1,2,2,3],1) == 0\ntest_search()", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\nfrom typing import List\n\ndef search(arr: List[int], target: int) -> int:\n    \"\"\"\n    O(N) - naive.\n    O(N^2) - using an algorithm like binary search.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr,ele):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if ele == arr[mid]:\n            return mid\n        elif ele < arr[mid]:\n            end = mid - 1\n        elif ele > arr[mid]:\n            start = mid + 1\n    return None\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(array, element):\n    # your code here\n    left = 0\n    right = len(array) - 1\n    while(left <= right):\n        mid = (left+right)/2\n        if(array[mid] == element):\n            return mid\n        elif(array[mid] > element):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\ndef test_search():\n    print('testing search function')\n    assert search([1,1,2,2,3],5) == 3\n    assert search([1,1,2,2,3],1) == 0\n    assert search([1,1,2,2,3],4) == -1\ntest_search()", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, x):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == x:\n            break\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start]\n\n\n# +\ndef test_search():\n    assert search([1,1,2,2,3],5) == 3\n    assert search([1,1,2,2,3,3,4,5],3) == 2\n    print(\"Success!\")\n\n\ntest_search()\n# -\n\n# # Counting elements in a sorted array", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, x):\n    \"\"\"\n    This is the search function.\n    \"\"\"\n    # TODO: Write your python code to find the element that appears only once in a sorted array.\n    l=0\n    r=len(arr)-1\n    while l<=r:\n        mid=l+(r-l)//2\n        if arr[mid]==x:\n            l=mid+1\n            r=mid-1\n        elif arr[mid]>=x:\n            r=mid-1\n        else:\n            l=mid+1\n    return l\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, num):\n    for i in range(len(arr)):\n        if arr[i] == num:\n            return i\n    return -1\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(numbers_of_tuples):\n    \"\"\"\n    Takes a list of tuples and returns the largest product of the tuples\n    \"\"\"\n    if len(numbers_of_tuples) == 0:\n        return 0\n    if len(numbers_of_tuples) == 1:\n        return max(numbers_of_tuples[0][0]) * max(numbers_of_tuples[0][1])\n    return max(max_product_tuple(numbers_of_tuples[:len(numbers_of_tuples)//2]), max_product_tuple(numbers_of_tuples[len(numbers_of_tuples)//2:])) * \\\n           min(numbers_of_tuples[0][0], numbers_of_tuples[0][1])\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(list_of_tuples):\n    '''\n    Takes a list of tuples and returns the maximum product.\n    '''\n    return max(map(lambda x: max(map(lambda y: x[0]*x[1], x)), list_of_tuples))\n\ndef test_max_product_tuple():\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n\ndef test_max_product_tuple_same_num():\n    assert max_product_tuple([(2, 4), (2, 4), (1, 8), (1, 8)]) == 64", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(pairs):\n    maximum=0\n    for i in range(len(pairs)):\n        for j in range(i+1,len(pairs)):\n            product=pairs[i][0]*pairs[j][1]\n            if product>maximum:\n                maximum=product\n    return maximum\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    \"\"\"\n    >>> tuples = [(2, 7), (2, 6), (1, 8), (4, 9)]\n    >>> max_product_tuple(tuples)\n    36\n    \"\"\"\n    highest_product = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            product = tuples[i][0] * tuples[j][1]\n            if product > highest_product:\n                highest_product = product\n    return highest_product\n\n# This program is used by solution 1:\n# def max_product_tuple(tuples):\n#     max_value = 0\n#     for i in range(len(tuples)):\n#         for j in range(i+1, len(tuples)):\n#             if tuples[i][0]*tuples[j][1]>max_value:\n#                 max_value = tuples[i][0]*tuples[j][1]\n#     return max_value\n\ndef main():\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] ))\n    print(max_product_tuple([(1, 10), (5, 20), (8, 40), (1, 50)] ))\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(num_tuple):\n    \"\"\"\n    Input: A list of tuples\n    Output: The max product from the given list of tuples\n    \"\"\"\n    max_val = -sys.maxint\n    for i in range(len(num_tuple)):\n        for j in range(i+1, len(num_tuple)):\n            product = num_tuple[i][0]*num_tuple[j][1]\n            max_val = max(product, max_val)\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    result = 0\n    for pair in tuples:\n        result = max(result, pair[0] * pair[1])\n    return result\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    # solution = (max(item[0] * item[1] for item in tuples), tuples)\n    # if len(tuples) < 1:\n    #     return 0\n    return tuple(max(item[0] * item[1] for item in tuples))\n\n\ndef main():\n    print(\"Max of the products of two numbers\")\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] ))\n    print(\"Max of the products of two numbers\")\n    print(max_product_tuple([(10, 2), (2, 5), (3, 6), (3, 4), (8, 9)] ))\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    if len(tuples) <= 0:\n        raise ValueError\n\n    if len(tuples) == 1:\n        return tuples[0][1] * tuples[0][0]\n\n    elif len(tuples) == 2:\n        return tuples[0][1] * tuples[0][0] * tuples[1][1] * tuples[1][0]\n\n    elif len(tuples) == 3:\n        return max(max_product_tuple(tuples[:2]), max_product_tuple(tuples[1:]))\n\n    else:\n        return max(\n            max_product_tuple(tuples[:len(tuples) // 2]),\n            max_product_tuple(tuples[len(tuples) // 2:]),\n            max_product_tuple(tuples[:(len(tuples) // 2) + 1]),\n            max_product_tuple(tuples[(len(tuples) // 2):]),\n        )\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(pairs_list):\n    \"\"\"\n    Given a list of pairs, returns the maximum product\n    \"\"\"\n    max_product = -100000000\n    for pair in pairs_list:\n        max_product = max(max_product, pair[0]*pair[1])\n\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(product_tuples):\n    # write your code here\n    max_value = float(\"-inf\")\n    for i in range(len(product_tuples)):\n        for j in range(i+1, len(product_tuples)):\n            max_value = max(max_value, product_tuples[i][0]*product_tuples[j][1])\n    return max_value"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\n# Write your code below this line\ndef check_triplet(arr, sum):\n    # Write your code above this line\n    arr.sort()\n    for a, b, c in zip(arr[:-2], arr[1:-1], arr[2:]):\n        if a + b + c == sum:\n            return True\n    return False\n\n# Write your code below this line", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(array, n, k, x):\n    if n < 3 or k < 2:\n        return False\n\n    a = array[0:n-1]\n    for i in range(1, n-1):\n        for j in range(i+1, n-1):\n            if j > i+1:\n                if i == j-1:\n                    continue\n                for h in range(i+1, j):\n                    for g in range(h+1, n-1):\n                        for f in range(g+1, n-1):\n                            if f > g+1:\n                                for b in range(g+1, n):\n                                    for c in range(b+1, n):\n                                        if a[f-g] + a[g-h] + a[h-i] + a[i-j] + a[j-f] + a[f-b] == x:\n                                            return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(array, a, b, c):\n    if a + b + c == 0:\n        return True\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            for k in range(j+1, len(array)):\n                if a+array[i]+array[j]+array[k] == 0:\n                    return True\n    return False\n\ndef check_triplet(array, a, b, c):\n    return any([a+array[i]+array[j]+array[k] == 0 for i in range(len(array)) for j in range(i+1, len(array)) for k in range(j+1, len(array))])\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, target, start, end):\n    if start >= end:\n        return False\n\n    for i in range(start, end):\n        if i - start == end - i:\n            return True\n        if arr[start] + arr[end] + arr[i] == target:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, sum_):\n    if arr is None:\n        return False\n    sum_dict = {}\n    for ele in arr:\n        if ele in sum_dict:\n            sum_dict[ele] += 1\n        else:\n            sum_dict[ele] = 1\n\n    for ele in sum_dict:\n        if sum_ - ele in sum_dict and sum_dict[sum_ - ele] == 1 and sum_dict[ele] == 2:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(numbers, number_1, number_2, number_3):\n    if not numbers or len(numbers) < 3:\n        return False\n    if number_1 + number_2 == number_3:\n        return True\n    if number_1 + number_3 == number_2:\n        return True\n    if number_2 + number_3 == number_1:\n        return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, sum, x, y):\n    # change order of the array\n    arr = sorted(arr)\n    sum_pos = 0\n    for i, x_val in enumerate(arr):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if x_val + arr[j] + arr[k] == sum:\n                    return True\n        sum_pos += 1\n    return False\n\n\n# print(check_triplet([1, 4, 45, 6, 10], 20, 10, 20))\n# print(check_triplet([1, 4, 45, 6, 10], 20, 10, 25))", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(nums, a, b, c):\n    \"\"\"\n    Using sort function\n    :param nums: An array of integers\n    :param a: a value to be checked\n    :param b: a value to be checked\n    :param c: a value to be checked\n    :return: True or False\n    \"\"\"\n    nums.sort()\n\n    for i in range(len(nums) - 2):\n        if nums[i] + nums[i + 1] == a and nums[i] + nums[i + 2] == b:\n            if nums[i + 1] + nums[i + 2] == c:\n                return True\n\n    return False\n\n\ndef check_triplet(nums, a, b, c):\n    \"\"\"\n    Using dictionary\n    :param nums: An array of integers\n    :param a: a value to be checked\n    :param b: a value to be checked\n    :param c: a value to be checked\n    :return: True or False\n    \"\"\"\n    d = {}\n    for i in nums:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    if a in d.keys() and b in d.keys() and c in d.keys():\n        if a + b == c:\n            return True\n        return False\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, target, a, b):\n    print(\"Checking for triplet: \", a, \" \", b, \" \", target)\n    # Define a triplet as follows:\n    # a + b + c = target\n    for i in range(len(arr)):\n        print(i)\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                a = arr[i]\n                b = arr[j]\n                c = arr[k]\n                if a + b + c == target:\n                    return True\n    return False\n\n\ndef check_triplet2(arr, target, a, b):\n    # Define a triplet as follows:\n    # a + b + c = target\n    print(\"Checking for triplet: \", a, \" \", b, \" \", target)\n    for i in range(len(arr)):\n        print(i)\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                a = arr[i]\n                b = arr[j]\n                c = arr[k]\n                if a + b + c == target:\n                    return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\n# Naive solution\ndef check_triplet(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\n\ndef check_triplet(numbers, target):\n    # Note: This method does not require sorting\n    # First we have to sort the array\n    numbers.sort()\n    # The array is now sorted in ascending order.\n    # If the target sum is negative, then return False.\n    if numbers[0] + numbers[1] + numbers[2] < target:\n        return False\n    # Now we move forward from the first element to the last element.\n    # Since the array is sorted, we can check only the triplets in the ascending order.\n    for i in range(0, len(numbers)-2):\n        for j in range(i+1, len(numbers)-1):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return True\n    return False\n\n\ndef check_triplet(numbers, target):\n    # First, we can verify that each pair is unique.\n    if len(set(numbers)) < 3:\n        return False\n\n    # If the target sum is negative, then return False.\n    if numbers[0] + numbers[1] + numbers[2] < target:\n        return False\n\n    # Now we need to sort the array.\n    # If the array is already sorted, then we can skip this step.\n    numbers.sort()\n\n    # Now we move forward from the first element to the last element.\n    # Since the array is sorted, we can check only the triplets in the ascending order.\n    for i in range(0, len(numbers)-2):\n        for j in range(i+1, len(numbers)-1):\n            for k in range(j+1, len(numbers)):\n                if"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nfrom functools import reduce\nfrom itertools import combinations\n\ndef smartNumber(n):\n    if n == 0:\n        return 0\n    a = [x for x in range(1, n + 1)]\n    a = sorted(list(combinations(a, 2)))\n    a.append((n, n))\n    a.sort()\n    return reduce(lambda x, y: x * y, [x[0] for x in a])\n\n\ndef smartNumber(n):\n    if n == 0:\n        return 0\n    a = [x for x in range(1, n + 1)]\n    a = sorted(list(combinations(a, 2)))\n    a.append((n, n))\n    a.sort()\n    return reduce(lambda x, y: x * y, [x[0] for x in a])", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    pass\n\n#Test-case", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    if n == 1:\n        return 0\n    return 2*n + 1\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    result = 0\n    for i in range(n-1):\n        result += (i+1)*pow(2, i)\n    return result", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    cache = {}\n    return smartNumber_0(n, cache)\n\ndef smartNumber_0(n, cache):\n    if n in cache:\n        return cache[n]\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 30\n    else:\n        result = -1\n        num = n % 3\n        if n % 2:\n            for i in range(num, 30):\n                if smartNumber_0(i, cache) == 30:\n                    result = i\n                    break\n        else:\n            for i in range(num + 1, 30):\n                if smartNumber_0(i, cache) == 30:\n                    result = i\n                    break\n        cache[n] = result\n        return result\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nfrom collections import defaultdict\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nfrom functools import lru_cache\n\n\ndef smartNumber(n):\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n\n    Math:\n    For a smart number,\n    F(n) = F(n - 1) * (n + 1)\n    F(1) = 1\n    F(2) = 3\n    \"\"\"\n    @lru_cache(maxsize=None)\n    def smart_n(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n\n        return smart_n(n - 1) * (n + 1)\n\n    return smart_n(n)\n\n\ndef smartNumber_0(n):\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n\n    Math:\n    For a smart number,\n    F(n) = F(n - 1) * (n + 1)\n    F(1) = 1\n    F(2) = 3\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n\n    return smartNumber_0(n - 1) * (n + 1)\n\n\ndef smartNumber_1(n):\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n\n    Math:\n    For a smart number,\n    F(n) = F(n - 1) * (n + 1)\n    F(1) = 1\n    F(2) = 3\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n\n    f = [1, 3, 4]\n\n    for _ in range(3, n + 1):\n        f.append(f[_ - 1] * (n + 1))\n\n    return f[n]", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nimport collections\n\ndef smartNumber(n):\n    \"\"\"\n    Time: O(2^n)\n    Space: O(1)\n    \"\"\"\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 30\n    else:\n        nums = collections.defaultdict(list)\n        nums[10].append(10)\n        nums[10].append(30)\n        nums[30].append(30)\n        nums[30].append(10)\n\n        for i in range(1, n):\n            new = {}\n            for k, v in nums.items():\n                for v1 in v:\n                    new[v1] = k\n            nums = new\n        return nums[10]\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    if n == 2:\n        return 15\n    if n == 3:\n        return 10\n    return smartNumber(n-1) + smartNumber(n-2) + smartNumber(n-3)\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    l = [0] + [1] * n\n    while len(l) < n:\n        l = [l[i] + 2*l[i+1] for i in xrange(len(l)-1)] + [0]\n    return l[n-1]\n\ndef smartNumber2(n):\n    def smart(n):\n        l = [0] + [1] * n\n        while len(l) < n:\n            l = [l[i] + 2*l[i+1] for i in xrange(len(l)-1)] + [0]\n        return l[n-1]\n    return smart(n)\n\ndef smartNumber3(n):\n    def smart(n):\n        l = [0] + [1] * n\n        while len(l) < n:\n            l = [l[i] + 2*l[i+1] for i in xrange(len(l)-1)] + [0]\n        return l[n-1]\n    return smart(n)\n\ndef smartNumber4(n):\n    def smart(n):\n        l = [0] + [1] * n\n        while len(l) < n:\n            l = [l[i] + 2*l[i+1] for i in xrange(len(l)-1)] + [0]\n        return l[n-1]\n    return smart(n)\n\ndef smartNumber5(n):\n    def smart(n):\n        l = [0] + [1] * n\n        while len(l) < n:\n            l = [l[i] + 2*l[i+1] for i in xrange(len(l)-1)] + [0]\n        return l[n-1]\n    return smart(n)\n\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(a_num):\n    result=0\n    for i in range(1,a_num+1):\n        if check_prime(i)==True and check_prime(i/2)==True and check_prime(i/3)==True:\n            result+=i\n    return result\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nfrom math import sqrt\n\ndef amicable_numbers(x):\n    return [i for i in range(1,x+1) if amicable(i)]\n\n\ndef amicable(n):\n    if (n % 1 == 0):\n        return False\n    if (n == 1):\n        return True\n    if (n < 10):\n        return False\n    return is_amicable(n)\n\n\ndef is_amicable(n):\n    if ((sqrt(n) - int(sqrt(n)))**2) == n:\n        return True\n    return False\n\n\ndef amicable_numbers_sum(n):\n    return sum(amicable(i) for i in range(1,n+1))\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(upper_limit):\n    result = 0\n    for num in range(1, upper_limit + 1):\n        amicables = amicable_numbers(num)\n        if sum(amicables) == num:\n            result += num\n    return result\n\ndef amicable_numbers(number):\n    amicable_numbers = []\n    for i in range(1, number+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return amicable_numbers\n\n\ndef is_amicable(number):\n    if is_prime(number):\n        for divisor in range(1, int(math.sqrt(number))+1):\n            if is_prime(number / divisor):\n                return True\n    return False\n\n\ndef is_prime(number):\n    if number > 1 and number % 2 == 0:\n        return False\n    if number == 2:\n        return True\n    for divisor in range(3, int(math.sqrt(number))+1, 2):\n        if number % divisor == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(max_number):\n    return sum(amicable_numbers(max_number))\n\ndef amicable_numbers(max_number):\n    \"\"\"\n    A number is called amicable if the sum of the proper divisors of the number\n    is equal to the number.\n    \"\"\"\n    return [number for number in range(1, max_number+1) if amicable(number)]\n\ndef amicable(number):\n    \"\"\"\n    Return True if the number is amicable, otherwise return False\n    \"\"\"\n    amicable_list = [x for x in range(1, int(number**0.5)+1) if number % x == 0]\n    if len(amicable_list) > 0 and len(amicable_list) == len(set(amicable_list)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n# n is the upper limit\ndef amicable_numbers_sum(n):\n    amicable_numbers = []\n    for i in range(1, n+1):\n        a = sum_of_divisors(i)\n        if i == a and a != i and sum_of_divisors(a) == i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n# return sum of divisors for number\ndef sum_of_divisors(n):\n    return sum([i for i in range(1, int(n**0.5)+1) if n%i == 0])\n\n\n# vim: set ai et ts=4 sw=4:\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nimport math\n\ndef amicable_numbers_sum(n):\n    total = 0\n    for x in range(1, n):\n        if is_amicable(x) and is_amicable(n-x):\n            total += x + n - x\n    return total\n\n\ndef is_amicable(number):\n    \"\"\"Returns true if number is a amicable number.\n\n    Args:\n        number (int): Number to check.\n\n    Returns:\n        bool: True if the number is a amicable number, False otherwise.\n    \"\"\"\n    return math.sqrt(number) == int(math.sqrt(number))", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Generates the amicable numbers, then counts their sum\n    :param n:\n    :return:\n    \"\"\"\n    amicable_numbers = {}\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i != j and i != j and i < j:\n                if i != j and i in amicable_numbers.keys() and j in amicable_numbers.keys():\n                    if i != j:\n                        amicable_numbers_sum = amicable_numbers[i] + amicable_numbers[j]\n                        amicable_numbers[i + j] = amicable_numbers_sum\n    return sum(amicable_numbers.values())\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n# Solution using function composition\ndef amicable_numbers_sum(max_number):\n    return sum(get_amicable_numbers(max_number))\n\ndef get_amicable_numbers(max_number):\n    amicable_numbers = []\n    for number in range(1,max_number+1):\n        if is_amicable(number):\n            amicable_numbers.append(number)\n\n    return amicable_numbers\n\ndef is_amicable(number):\n    if is_prime(number):\n        return False\n    for dividend in range(1,number):\n        divisor = get_divisor(number, dividend)\n        if divisor != 0 and divisor == number:\n            return True\n\n    return False\n\ndef is_prime(number):\n    \"\"\"\n    O(sqrt(number)) time and O(1) space.\n    \"\"\"\n    for divisor in range(2,number//2):\n        if number % divisor == 0:\n            return False\n    return True\n\ndef get_divisor(number,divisor):\n    \"\"\"\n    O(sqrt(number)) time and O(1) space.\n    \"\"\"\n    return number//divisor if number%divisor == 0 else 0\n\n\ndef amicable_numbers_sum(max_number):\n    return sum(get_amicable_numbers(max_number))\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(num):\n    res = 0\n    for i in range(1, num + 1):\n        if amicable(i):\n            res += i\n    return res\n\ndef amicable(num):\n    sum = 0\n    for i in range(1, num):\n        if num%i==0:\n            if i+num/i==num:\n                sum += i\n            elif i*num/i==num:\n                sum += i\n    return sum\n\ndef amicable_numbers_sum_optimized(num):\n    res = 0\n    for i in range(1, num + 1):\n        for j in range(1, num):\n            if amicable(i, j):\n                res += i + j\n    return res\n\ndef amicable(num1, num2):\n    if num1 == num2:\n        return False\n    if num1*num2 == num2*num1:\n        return True\n    return False", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(num: int) -> int:\n    s = 0\n    for i in range(1, num+1):\n        if amicable(i):\n            s += i\n    return s\n\ndef amicable(num: int) -> bool:\n    if num < 20:\n        for i in range(1, num+1):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef _test_amicable_numbers_sum():\n    assert amicable_numbers_sum(999) == 504\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\nfrom cmath import phase\n\n\ndef angle_complex(c):\n    \"\"\"\n    Computes the angle of a complex number\n    \"\"\"\n    return phase(c)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(z):\n    return np.arctan2(np.real(z), np.imag(z))\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x, y):\n    \"\"\"Return the angle of complex number x + iy.\"\"\"\n    return 0.5 * np.arctan(y/x)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(z):\n    return np.arctan2(z.imag,z.real)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(z):\n    return np.arctan2(z.imag,z.real)\n\n# def main():\n#     z = 0+1j\n#     print(angle_complex(z))\n#     assert angle_complex(z) == 1.5707963267948966\n\n# if __name__ == \"__main__\":\n#     main()", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    #raise NotImplementedError() # delete this line and implement the function\n    return np.arctan2(y.imag, x.real)\n\n\ndef test_angle_complex():\n    assert angle_complex(1,1j)==np.pi/2\n    assert angle_complex(-1,1j)==3*np.pi/2\n    assert angle_complex(1,-1j)==5*np.pi/2\n    assert angle_complex(0,1j)==np.pi/2\n    assert angle_complex(0,-1j)==np.pi\n    assert angle_complex(1,0j)==0\n    assert angle_complex(0,0j)==0\n    assert angle_complex(0,1000000000j)==0\n    assert angle_complex(-1000000000,1000000000j)==-np.pi/2\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(complex_number):\n    return np.angle(complex_number)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    \"\"\"\n    The function gets the angle of a complex number.\n    \"\"\"\n    return np.arctan(y/x)*180/np.pi\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(complex_number):\n\treal_part=complex_number.real\n\timag_part=complex_number.imag\n\tif real_part==0:\n\t\tif imag_part>=0:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn 2*3.14159265358979323846\n\telse:\n\t\tif imag_part==0:\n\t\t\treturn 0.5*math.atan(imag_part/real_part)\n\t\telse:\n\t\t\treturn 1.5707963267948966\n\ndef complex_conjugate(complex_number):\n\treturn complex(complex_number.real, -complex_number.imag)\n\n\ndef find_angle_complex(complex_number, complex_number_2):\n\treturn angle_complex(complex_number-complex_number_2)\n\n\ndef test_angle():\n\tassert angle_complex(0,1j)==1.5707963267948966 \n\ndef test_complex_conjugate():\n\tassert complex_conjugate(complex(0,1j))==complex(0,1j)\n\ndef test_find_angle():\n\tassert find_angle_complex(complex(0,1j),complex(1,2j))==1.5707963267948966", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a, b):\n    \"\"\"\n    Function to get the angle of a complex number.\n    \n    Parameters\n    ----------\n    a : float\n        First number of the complex number.\n    b : float\n        Second number of the complex number.\n    \n    Returns\n    -------\n    angle : float\n        The angle of the complex number.\n    \n    Examples\n    --------\n    >>> angle_complex(0,1j)==1.5707963267948966\n    True\n    \"\"\"\n    angle = np.arccos((a**2+b**2)/(2*a*b))\n    return angle\n\n\n# -\n\n# ### Exercise 2: Function to get the direction of a complex number\n#\n# Write a function to get the direction of a complex number.\n#\n# This function should return a string with the direction of the complex number: up or down, right or left, or no direction (or None). The complex number is in the upper-right quadrant, and should have an angle between 0 and 90 degrees (in radians).\n\n# +\ndef direction_complex(a, b):\n    \"\"\"\n    Function to get the direction of a complex number.\n    \n    Parameters\n    ----------\n    a : float\n        First number of the complex number.\n    b : float\n        Second number of the complex number.\n    \n    Returns\n    -------\n    direction : str\n        The direction of the complex number.\n    \n    Examples\n    --------\n    >>> direction_complex(0,1j)=='down'\n    True\n    \"\"\"\n    angle = angle_complex(a,b)\n    if 0 < angle < np.pi/2:\n        direction = 'right'\n    elif np.pi/2 < angle < np.pi:\n        direction = 'up'\n    elif np.pi < angle < 3*np.pi/2:\n        direction = 'left'\n    else:\n        direction = None\n    return direction\n\n\n# -\n\n# ### Exercise 3: Function to check if a complex number is real\n#\n# Write a function to check if a complex number is real.\n#\n# This function should return True if the complex number is real, False otherwise.\n\n# +\ndef"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(string, window_size):\n    '''\n        Returns the maximum number of 1s and 0s in any sub-string of the given binary string.\n        :param string: Binary String\n        :param window_size: Integer (window_size >= 1)\n        :return: Integer\n        '''\n\n    if window_size < 2:\n        raise ValueError(\"window_size must be >= 2\")\n\n    res = 0\n    left = 0\n    right = 0\n\n    while right < len(string):\n        if string[right] == '1':\n            right += 1\n        else:\n            left = right + 1\n            while left < right and string[left] == '0':\n                left += 1\n\n            while left < right and string[right] == '1':\n                right += 1\n\n            if left < right:\n                res = max(res, right - left)\n\n            right += 1\n\n    return res\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(string, len_of_sub_str):\n    n = len(string)\n    if len_of_sub_str > n:\n        return 0\n    left = 0\n    right = len_of_sub_str - 1\n    max_len = 0\n    while left < n:\n        if string[left] != string[right]:\n            max_len = max(max_len, right - left)\n            left += 1\n        else:\n            right -= 1\n    return max_len\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, k):\n    if not binary_string:\n        return 0\n    curr_ones = 0\n    curr_zeros = 0\n    length = 0\n    for char in binary_string:\n        if char == \"0\":\n            curr_zeros += 1\n        else:\n            curr_ones += 1\n        if (curr_ones - curr_zeros) % k == 0:\n            length += 1\n        if (curr_zeros - curr_ones) % k == 0:\n            length += 1\n    return length", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\nfrom typing import List\n\n\ndef find_length(binary_string: str, k: int) -> int:\n    # write your code here\n    # TODO\n    length = 0\n    # 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0\n    # 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0\n    # 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n    # 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n    for i in range(len(binary_string) - k +", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(bin_str, k):\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(bin_str)):\n        if bin_str[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == k or count_1 == k:\n            return abs(count_0 - count_1)\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary_str, bits):\n    res = []\n    for i in range(len(binary_str)):\n        num = 0\n        while num < bits and i + num < len(binary_str):\n            if binary_str[i + num] == '1':\n                num += 1\n            else:\n                num -= 1\n        res.append(num)\n    return max(res)\n\n\ndef test_find_length():\n    assert find_length(\"11000010001\", 11) == 6\n    assert find_length(\"10100101010\", 2) == 2\n    assert find_length(\"1010010001\", 1) == 1\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\nfrom collections import Counter\n\ndef find_length(s: str, k: int) -> int:\n    if len(s) < 2 * k:\n        return 0\n\n    # map the string to (0,1) integers\n    char_map = Counter(s)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, i + k + 1):\n            if char_map[j] != char_map[i]:\n                count += 1\n    return count", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\nfrom collections import Counter\n\ndef find_length(string, k):\n    \"\"\"\n    :type string: str\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 1:\n        return 0\n\n    total = len(string)\n    result = 0\n    for i in range(total):\n        left = i\n        right = i+k-1\n        while left >= 0 and right < total and string[left] == string[right]:\n            left -= 1\n            right += 1\n        if left < 0:\n            result = max(result, right-i)\n        elif right < total and string[left] == string[right]:\n            result = max(result, right-i)\n\n    return result\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary_str, k):\n    max_length = 0\n    for i in range(0, len(binary_str) - k + 1):\n        sub_str = binary_str[i:i+k]\n        if sub_str.count('0') > sub_str.count('1'):\n            max_length = max(max_length, sub_str.count('0') - sub_str.count('1'))\n    return max_length\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(str, k):\n    count_0 = 0\n    count_1 = 0\n    count_max = 0\n\n    for i in range(len(str) - k + 1):\n        if str[i:i + k] == '0' * k:\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if count_0 > count_1:\n            count_max = max(count_0 - count_1, count_max)\n        elif count_1 > count_0:\n            count_max = max(count_1 - count_0, count_max)\n\n    return count_max"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(a, b):\n    # Solution 1:\n    # -----------------------------\n    # In python, we can do this with built in function:\n    # We start by calculating the highest common factor (HCF)\n    # of the two numbers.\n    HCF = greatest_common_factor(a, b)\n    return a // HCF + b // HCF\n\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(a, b):\n    c = 0\n    for i in range(1, b+1):\n        if a % i == 0 and b % i == 0:\n            c += i\n    return c\n\ndef sum_common_divisors(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef find_common_divisors(n,m):\n\tif n == 0: return m\n\tif m == 0: return n\n\tif n == m: return n\n\tif n > m:\n\t\tif n % m == 0: return n / m\n\t\telse: return find_common_divisors(n % m,m)\n\telse:\n\t\tif m % n == 0: return m / n\n\t\telse: return find_common_divisors(n,m % n)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(num1, num2):\n    if num1 > num2:\n        return sum_of_common_divisors(num2,num1)\n    if num1 == num2:\n        return num1\n    if num1 % num2 == 0:\n        return num1 - num2\n    return sum_of_common_divisors(num1,num2 - 1)\n\ndef test_sum_of_common_divisors():\n    assert sum_of_common_divisors(10, 15) == 6\n    assert sum_of_common_divisors(15, 20) == 10\n    assert sum_of_common_divisors(60, 65) == 15\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef common_divisors(num1, num2):\n    \"\"\"\n    :param num1:\n    :param num2:\n    :return:\n    \"\"\"\n    divs = []\n    for i in range(1, max(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            divs.append(i)\n    return sum(divs)", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisor(n1, n2):\n\t# Write your code here.\n\ta = n1\n\tb = n2\n\tif a > b:\n\t\ta,b = b,a\n\ts=0\n\twhile a>0 and b>0:\n\t\tc = a%b\n\t\ta = b\n\t\tb = c\n\t\ts+=c\n\treturn s\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(a,b):\n    a_prime = factor(a)\n    b_prime = factor(b)\n    result = 0\n    for p in a_prime:\n        if p in b_prime:\n            result += p\n    return result\n\ndef factor(num):\n    divisors = []\n    for i in range(1,num):\n        if num%i == 0:\n            divisors.append(i)\n    return divisors\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_div(a,b):\n    \"\"\"\n    Returns the sum of common divisors of a and b\n    \"\"\"\n    res = []\n    a_ = a\n    b_ = b\n\n    while a_ != 0 and b_ != 0:\n        if a_ == b_:\n            res.append(a_)\n            a_ = a_ // b_\n            b_ = b_ // a_\n        elif a_ > b_:\n            b_ = b_ // a_\n        else:\n            a_ = a_ // b_\n\n    return sum(res)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(x, y):\n    return sum(map(lambda n: x % n == 0 and n or 0, range(1,min(x,y)+1)))\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(a,b):\n    return 0\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    return x * y", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(n1, n2):\n    return n1*n2\n\n#print(multiply_int(10,20))\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    \"\"\"\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return a + b\n    for i in range(2, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            return a//i*b//i\n        if a%i == 0:\n            return a//i\n    return a*b", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    c=0\n    while b>0:\n        c+=a\n        a,b=b,a\n    return c\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a, b):\n    return a*b", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(num1,num2):\n    return num1*num2", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n\ndef multiply_int_2(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    \"\"\"Multiply two integers without using the * operator\"\"\"\n    return a*b\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    # print(x*y)\n    return x*y\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(i,j):\n    if j==0:\n        return 0\n    return (i*j)\n\ndef multiply_int_v2(i,j):\n    if j==0:\n        return 0\n    return i*j\n\ndef multiply_int_v3(i,j):\n    if j==0:\n        return 0\n    return i*j\n\ndef multiply_int_v4(i,j):\n    if j==0:\n        return 0\n    return i*j\n\ndef multiply_int_v5(i,j):\n    if j==0:\n        return 0\n    return i*j\n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    res = []\n    for word in words:\n        if len(word) > n:\n            res.append(word)\n    return res\n    ", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n    short_list=[]\n    for word in words:\n        if len(word)>n:\n            short_list.append(word)\n    return short_list\n\n#assert long_words(3,['python','programming','language'])\n\ndef words_by_len(n, words):\n    short_list=[]\n    for word in words:\n        if len(word)==n:\n            short_list.append(word)\n    return short_list\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    res=[]\n    for word in words:\n        if len(word)>n:\n            res.append(word)\n    return res\n\n\n# +", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    result=[]\n    for word in words:\n        if len(word)>n:\n            result.append(word)\n    return result\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    \"\"\"\n    :param n: \n    :param words:\n    :return:\n    \"\"\"\n    return [word for word in words if len(word)>n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n\treturn [word for word in words if len(word) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    \"\"\"\n    >>>long_words(3,\"python is a programming language\")\n    ['python', 'programming', 'language']\n    >>>long_words(0,\"python is a programming language\")\n    []\n    \"\"\"\n    return [word for word in words if len(word)>=n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n\tprint(words)\n\tif len(words) == 0:\n\t\treturn []\n\tprint(words)\n\thead = words.pop(0)\n\ttail = long_words(n, words)\n\tif len(head) > n:\n\t\treturn tail\n\telse:\n\t\treturn [head]+tail\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    words = set(words)\n    return [word for word in words if len(word) > n]\n\n# test for long words"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(array):\n    rows = [[0 for x in range(0, 9)] for y in range(0, 9)]\n    for row in range(0, 9):\n        for col in range(0, 9):\n            rows[row][col] = array[row][col]\n    print(rows)\n    for row in range(0, 9):\n        for col in range(0, 9):\n            sum = rows[row][col] + rows[row][col+1] + rows[row][col+2]\n            if sum == 27:\n                return True\n    return False\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(square):\n    \"\"\"\n    return True if sum of each row, column and diagonal of square are equal\n    \"\"\"\n    row_sum = 0\n    column_sum = 0\n    diag_sum = 0\n    for i in range(len(square)):\n        for j in range(len(square)):\n            row_sum += square[i][j]\n            column_sum += square[j][i]\n            diag_sum += square[j][j] + square[i][i] - square[i][j] - square[j][i]\n    return row_sum == column_sum == diag_sum\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(matrix):\n    # if the first number is not 1, return False\n    if matrix[0][0] != 1:\n        return False\n\n    # count the number of times each number appears in the column\n    column_1 = 0\n    column_2 = 0\n    column_3 = 0\n    column_4 = 0\n\n    # count the number of times each number appears in the row\n    row_1 = 0\n    row_2 = 0\n    row_3 = 0\n    row_4 = 0\n\n    for i in range(4):\n        column_1 += matrix[i][0]\n        column_2 += matrix[i][1]\n        column_3 += matrix[i][2]\n        column_4 += matrix[i][3]\n\n    for j in range(4):\n        row_1 += matrix[0][j]\n        row_2 += matrix[1][j]\n        row_3 += matrix[2][j]\n        row_4 += matrix[3][j]\n\n    # check if the number of times each number appears in the row and column is equal\n    if column_1 == column_2 == column_3 == column_4 \\\n        and row_1 == row_2 == row_3 == row_4:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n# First approach:\n# We define a function that will check the number and square of the matrix.\n# We declare an empty matrix and fill it with the numbers from the function.\n# We check if each number is equal to the number in the same position.\n# In the end, we sum up the each number and compare it with the sum of each row.\n# If the value is the same for all rows, it is a magic square.\n# Example:\n#\n# Magic square:\n# 14 27 4 7\n# 5 10 15 20\n# 23 6 19 17\n# 26 8 9 11\n#\n# We can calculate the sum for each row and column like this:\n# row_sum = 27 + 5 + 23 + 26 = 82\n# col_sum = 4 + 10 + 15 + 8 = 36\n#\n# For each row and column sum we should have: row_sum == col_sum\n# We can calculate the difference between the row_sum and col_sum and check if it's equal to 0.\n\ndef magic_square_test(magic_square):\n    # Empty matrix\n    magic_square_arr = []\n    # Fill matrix with numbers from 1 to 16\n    for row in magic_square:\n        magic_square_arr.append(row)\n    # Check if each number is the same as the number in the same position\n    if magic_square_arr == magic_square_arr[0]:\n        return True\n    return False\n\n# Example magic square:\n# magic_square = [[14, 27, 4, 7], [5, 10, 15, 20], [23, 6, 19, 17], [26, 8, 9, 11]]\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(magic_square):\n    return magic_square == sorted(magic_square, key = lambda x : x)\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(x):\n    if x == 3:\n        return True\n    if x == 4:\n        return False\n    if len(x) != 3:\n        return False\n    if len(set(x)) != 1:\n        return False\n    else:\n        return True\ndef magic_square_test(x):\n    if magic_square(x)==True:\n        print('True')\n    else:\n        print('False')\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(numbers):\n    return np.array(numbers).T.astype(int).all(axis=1)\n\n# Test cases", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(magic_square):\n    if len(magic_square)!=4:\n        return False\n\n    for row in magic_square:\n        if len(row)!=4:\n            return False\n\n    return True\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(a):\n    '''\n    Input: A 4-by-4 list of numbers.\n    Return: True if the list represents a magic square; false otherwise.\n    '''\n    if sum(a)==34:\n        return True\n    else:\n        return False\n\ndef magic_square_test(a):\n    return magic_square(a)\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(M):\n\tfor row in M:\n\t\tif sorted(row)!=[0,1,2,3,4,5,6,7,8,9]:\n\t\t\treturn False\n\tfor col in range(9):\n\t\tcol_sum=0\n\t\tfor row in range(9):\n\t\t\tcol_sum+=M[row][col]\n\t\tif sorted(col_sum)!=[0,1,2,3,4,5,6,7,8,9]:\n\t\t\treturn False\n\tdiag_sum=0\n\tfor row in range(9):\n\t\tdiag_sum+=M[row][row]\n\tif sorted(diag_sum)!=[0,1,2,3,4,5,6,7,8,9]:\n\t\treturn False\n\treturn True\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(L):\n    \"\"\"\n    Create a dictionary of item-frequency pairs\n    and return the most frequent item\n    \"\"\"\n    D = dict()\n    for item in L:\n        if item in D:\n            D[item] += 1\n        else:\n            D[item] = 1\n    return max(D.items(), key=operator.itemgetter(1))\n\nL = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    if len(lst) == 0:\n        return None\n    else:\n        occs = {}\n        for item in lst:\n            if item in occs:\n                occs[item] += 1\n            else:\n                occs[item] = 1\n\n        max_occs = -1\n        max_item = None\n        for item, value in occs.items():\n            if value > max_occs:\n                max_occs = value\n                max_item = item\n\n        return (max_occs, max_item)", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    return max(zip(lst, lst.count(i) for i in lst), key=lambda pair: pair[1])\n\n\ndef main():\n    print(max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]))\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    d={}\n    for i in lst:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n\n    if len(d.items())==0:\n        return None\n    max_item=None\n    max_freq=0\n    for key, value in d.items():\n        if value>max_freq:\n            max_freq=value\n            max_item=key\n    return max_item,max_freq\n\n#print(max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]))", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n\tfrequency_dict = {}\n\tfor i in lst:\n\t\tif i not in frequency_dict:\n\t\t\tfrequency_dict[i] = 0\n\t\tfrequency_dict[i] += 1\n\n\tmax_frequency = 0\n\tfor i in frequency_dict:\n\t\tif frequency_dict[i] > max_frequency:\n\t\t\tmax_frequency = frequency_dict[i]\n\t\t\tmax_value = i\n\treturn max_value, max_frequency\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    dict = {}\n    for item in lst:\n        if item in dict:\n            dict[item] += 1\n        else:\n            dict[item] = 1\n\n    return max(dict.items(), key=lambda t: t[1])\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(items):\n    return max(items, key=items.count)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    '''\n    Assumes a non-empty list lst.\n    Returns a tuple of the item with maximum frequency and its frequency.\n    '''\n\n    #Assuming that all items in the list are unique\n    #Compute a dictionary of occurrences for each item in the list\n    dict_items = {}\n    for item in lst:\n        if item in dict_items:\n            dict_items[item] += 1\n        else:\n            dict_items[item] = 1\n    #Find the key with the highest frequency\n    max_key = max(dict_items, key = dict_items.get)\n    return (max_key, dict_items[max_key])", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    freq_lst = defaultdict(int)\n    for n in lst:\n        freq_lst[n] += 1\n    max_key = max(freq_lst.keys(), key=freq_lst.get)\n    max_freq = freq_lst[max_key]\n    return max_key, max_freq\n\n\n#print(max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]))", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    \"\"\"\n    res = (None, 0)\n    for v in lst:\n        if lst.count(v) > res[1]:\n            res = (v, lst.count(v))\n    return res\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(word):\n    return \"\".join([ch for ch in word if ch.isalpha()])[::-1]\n\n# Alternate Solution\ndef reverse_vowels(word):\n    return \"\".join([ch for ch in word if ch.isalpha()])[::1]", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s: str) -> str:\n    # Your code here\n    vowels = 'aeiou'\n    return ''.join(c for c in s if c in vowels)\n\ndef test_reverse_vowels():\n    assert reverse_vowels('Python') == 'Python'\n\ntest_reverse_vowels()\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str1):\n    return str1[::-1]\n\n# Test cases", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    return string[::-1]\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str):\n    \"\"\"\n    The method is used for reversing the vowels in the string.\n    \"\"\"\n    return \"\".join([ch if ch not in \"aeiouAEIOU\" else ch.lower() for ch in str[::-1]])\n\ndef reverse_vowels(str):\n    \"\"\"\n    The method is used for reversing the vowels in the string.\n    \"\"\"\n    return \"\".join(ch for ch in str[::-1] if ch in \"aeiouAEIOU\")", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    # Initializing the vowels list\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # Initializing the new string\n    new_string = ''\n    \n    # Iterating over each char of the string\n    for char in string:\n        if char in vowels:\n            new_string += char\n    \n    # Returning the new string\n    return new_string\n\n# Calling the function", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    \"\"\"\n    Iterative solution\n    \"\"\"\n    # vowels = \"aeiou\"\n    vowels = \"aeiou\"\n    new_s = ''\n    for c in s:\n        if c in vowels:\n            new_s += c\n    return new_s[::-1]\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    # YOUR CODE GOES HERE\n\n    return \" \".join(s.split()[::-1])\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(text):\n    \"\"\"Reverses only the vowels of the given text\"\"\"\n    result = \"\"\n\n    for char in text:\n        if char.lower() in \"aeiou\":\n            result += char.lower()\n\n    return result\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n#Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(string):\n    return ''.join(string[i] for i in range(len(string)) if string[i] in 'aeiou')\n\n#assert reverse_vowels(\"Python\") == \"Python\"\n#assert reverse_vowels(\"Abcdefghijklmnopqrstuvwxyz\") == \"zyxwvuqlnopdefghijklabc\"\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \" \".join(tup)\n\n# Test cases", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ' '.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return str(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(t):\n    return \" \".join(t)\n\n\n# Test:\n# tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n# ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')\n# 'exercises'\n#\n# tup_string((10, 20, 30))\n# (10, 20, 30)\n# '10 20 30'\n\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    \"\"\"\n    Input: A tuple of strings\n    Output: A single string\n    Example: tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    \"\"\"\n    return \" \".join(tup)\ntup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\n3. Functions with default arguments\n\n### Code:\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ' '.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    str = ''\n    for t in tup:\n        str += t + ','\n    return str[:-1]\n\n\ndef count_repeats(string):\n    \"\"\"\n    Counts the number of times each character appears in a string\n    \"\"\"\n    return dict((c, string.count(c)) for c in string)\n\n\ndef dict_to_sorted_list(d):\n    \"\"\"\n    Return a list of tuples that represent the count-repeats.\n    >>> d = {'a': 1, 'b': 1, 'c': 2}\n    >>> dict_to_sorted_list(d)\n    [('a', 1), ('b', 1), ('c', 2)]\n    \"\"\"\n    return sorted(d.items(), key=lambda x: (-x[1], x[0]))\n\n\ndef dict_to_sorted_dict(d):\n    \"\"\"\n    Return a dictionary of the count-repeats\n    >>> d = {'a': 1, 'b': 1, 'c': 2}\n    >>> dict_to_sorted_dict(d)\n    {'b': 1, 'a': 1, 'c': 2}\n    \"\"\"\n    return dict(dict_to_sorted_list(d))\n\n\ndef list_to_sorted_dict(l):\n    \"\"\"\n    Return a dictionary of the count-repeats\n    >>> l = [('a', 1), ('b', 1), ('c', 2)]\n    >>> list_to_sorted_dict(l)\n    {'b': 1, 'a': 1, 'c': 2}\n    \"\"\"\n    return dict(l)\n\n\ndef list_to_sorted_list(l):\n    \"\"\"\n    Return a list of tuples that represent the count-repeats.\n    >>> l = [('a', 1), ('b', 1), ('c', 2)]\n    >>> list_to_sorted_list(l)\n    [('b', 1), ('a', 1), ('c', 2)]\n    \"\"\"\n    return sorted(l, key=lambda x: (-x[1], x[", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(lst):\n    return sum(filter(lambda x: x < 0, lst))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numbers):\n    return sum(lambda x: x if x >= 0 else -x, numbers)\n\ndef test_sum_negativenum():\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum([x for x in numbers if x<0])\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numbers):\n    return sum([number for number in numbers if number < 0])\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numbers):\n    return sum(i for i in numbers if i < 0)\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n# Sum of negative numbers using lambda\ndef sum_negativenum(n):\n    return sum(x for x in n if x < 0)\n\n\ndef test_sum_negativenum():\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\n\n\ndef test_sum_negativenum2():\n    assert sum_negativenum([2, -4, 6, 9, -11, 12, -14, 5, 17]) == -32\n\n\ndef test_sum_negativenum3():\n    assert sum_negativenum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0\n\n\ndef test_sum_negativenum4():\n    assert sum_negativenum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0\n\n\ndef test_sum_negativenum5():\n    assert sum_negativenum([]) == 0\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(x):\n    return sum(lambda y: y if y >=0 else 0 for y in x)\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum(map(lambda x: -x, numbers))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(a):\n    return sum(map(lambda x: -x, a))\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,e):\n    if p == 0:\n        if e == 0:\n            return \"Even\"\n        else:\n            return \"Odd\"\n    else:\n        return check_last(arr[p:],p-1,e)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(a,p,q):\n    for i in range(0,p):\n        a.append(a.pop(0))\n    a.append(a.pop(0))\n    for i in range(0,p):\n        a.append(a.pop(0))\n    if a[len(a)-1]%2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,n):\n    i = 0\n    while i < n:\n        arr[i] = arr[i] + arr[i+1]\n        i += 1\n    arr[i] = arr[i] + arr[i+1]\n    return \"EVEN\" if arr[i] % 2 == 0 else \"ODD\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    a=len(arr)\n    if p>a:\n        return \"NONE\"\n    else:\n        if q<a-1:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    \narr=[5,7,10]\np=3\nq=1", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,m):\n    if arr[len(arr)-1]%2 == 0 and len(arr) >= m:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\n# Two pointer method\ndef check_last(arr,p,q):\n    n = len(arr)\n    if n == 0:\n        return \"EMPTY\"\n    i = 0\n    j = len(arr) - 1\n    for k in range(p):\n        i = i + 1\n        j = j - 1\n    if q%2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\n# user function\ndef check_last(arr, p, op):\n    \n    # code here\n    if op == 1:\n        if arr[len(arr)-1]%2 == 0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    else:\n        if arr[len(arr)-1]%2 == 0:\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n\n# +\n# test cases\narr1 = [5,7,10]\np1 = 3\nop1 = 1\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr, p, q):\n    # your code here\n    return \"ODD\"\n\n#Test Code:", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,n):\n    m = len(arr)-1\n    for i in range(n):\n        if m % 2 == 0:\n            m = m // 2\n        else:\n            m = m * 3 + 1\n    if m % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,k):\n\t\"\"\"\n\tarr, p and k should be integer values\n\t\"\"\"\n\tx = len(arr)\n\tl = len(arr)-1\n\tif(k > x):\n\t\treturn \"INVALID\"\n\telif((x%p != 0) and (x%p != p-1)):\n\t\treturn \"INVALID\"\n\telif(p > 0 and p < x):\n\t\treturn \"INVALID\"\n\telse:\n\t\treturn \"EVEN\" if arr[l-k] % p == 0 else \"ODD\"\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return n*(3*n-1)//2\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    if n < 1:\n        raise ValueError('n is smaller than 1')\n\n    result = 0\n    for i in range(1, n + 1):\n        result += i * (2 * i - 1)\n    return result\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nimport math\n\n\ndef hexagonal_num(n):\n    assert n >= 0, \"n must be positive\"\n\n    return hexagonal_num_rec(n)\n\n\ndef hexagonal_num_rec(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return hexagonal_num_rec(n-1) + hexagonal_num_rec(n-2)", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    h = 1\n    for i in range(1, n + 1):\n        h = (i * (2*i - 1)) / 2\n    return h\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return n**2 - n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return n*(2*n-1)\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    a = 0\n    b = 1\n    c = 2\n    for i in range(2, n):\n        c = (a + b) / 2\n        a = b\n        b = c\n    return c\n\ndef main():\n    assert hexagonal_num(10) == 190\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(num):\n    hexagonal = [0, 1, 6, 10, 15, 21, 26, 32, 37]\n    if num < 10:\n        return hexagonal[num]\n    else:\n        return hexagonal[num - 1]", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return (n * (3 * n - 1)) / 2\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    #Your code here\n    raise NotImplementedError()\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh, rate=0.08):\n    return kwh*rate\n\ndef cal_electbill(kwh, rate=0.08):\n    return kwh*rate", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    print('This is the electricity bill calculation function:')\n    print('kWh = {:.2f}kWh'.format(kwh))\n    print('Electricity bill = {:.2f}USD'.format(2.5*kwh))\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kilowatts):\n    # the price of electricity is 0.28 cents per kilowatt hour\n    return kilowatts*0.28\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(num,usage=0.2,time=0.003,per_kwh=0.125):\n    \"\"\"Calculate electrical bills\n    Args:\n        num: Number of days used.\n        usage: Number of hours used per day. Default is 0.2.\n        time: Number of hours per day. Default is 0.003.\n        per_kwh: Rate per KWH. Default is 0.125.\n    Returns:\n        Electrical bill.\n    \"\"\"\n    return (num*usage*time*per_kwh)", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    bill = 0\n    if kwh <= 200:\n        bill = kwh * 15.95\n    else:\n        bill = (kwh - 200) * 25 + 25\n    return bill\n\n# print cal_electbill(75)\n# print cal_electbill(220)\n# print cal_electbill(320)\n# print cal_electbill(180)\n# print cal_electbill(100)\n# print cal_electbill(10)\n# print cal_electbill(0)\n# print cal_electbill(-2)\n\ndef cal_electbill(kwh):\n    bill = 0\n    if kwh <= 200:\n        bill = kwh * 15.95\n    elif kwh <= 300:\n        bill = 25 + (kwh - 200) * 15.95\n    elif kwh <= 400:\n        bill = 25 + (kwh - 300) * 20.95\n    elif kwh <= 500:\n        bill = 25 + (kwh - 400) * 25.95\n    elif kwh <= 600:\n        bill = 25 + (kwh - 500) * 30.95\n    elif kwh > 600:\n        bill = 25 + (kwh - 600) * 35.95\n    return bill\n\n# print cal_electbill(75)\n# print cal_electbill(220)\n# print cal_electbill(320)\n# print cal_electbill(180)\n# print cal_electbill(100)\n# print cal_electbill(10)\n# print cal_electbill(0)\n# print cal_electbill(-2)\n\ndef cal_electbill(kwh):\n    bill = 0\n    if kwh <= 200:\n        bill = kwh *", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    \"\"\"\n    Calculates electricity bill based on a number of kilowatt hours consumed by a customer.\n    Input: kwh -- number of kilowatt hours consumed\n    Output: electbill -- electricity bill\n    \"\"\"\n    electbill=kwh*0.20\n    return electbill\n\n#100 % 0.20=0.20, i.e 20 cents per kwh\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(energy,elect_cost=1.25):\n    return energy * elect_cost\n\n\n# -\n\n# ## Exercise 3:\n#\n# Calculate the amount of money spent by the grocery store.\n\n# +\ndef calc_grocerybill(item_cost=1.5,spend=100):\n    return spend * item_cost\n\n#grocery_store(50,450)\n# -\n\n# ## Exercise 4:\n#\n# Calculate the amount of money spent by the rideshare company.\n\n# +\ndef calc_ridesharebill(minutes=20,rideshare_cost=0.25):\n    return rideshare_cost * minutes\n\n\n# -\n\n# ## Exercise 5:\n#\n# Calculate the amount of money spent by the electricity company.\n\n# +\ndef calc_electbill(energy=150,elect_cost=1.25):\n    return energy * elect_cost\n\n#calc_electbill()\n# -\n\n# ## Exercise 6:\n#\n# Calculate the amount of money spent by the supermarket.\n\n# +\ndef calc_superbill(energy=150,item_cost=1.5,spend=100,elect_cost=1.25,rideshare_cost=0.25):\n    return (calc_electbill(energy,elect_cost)+calc_grocerybill(item_cost,spend)+calc_ridesharebill(minutes=energy,rideshare_cost))\n\ncalc_superbill(150,1.5,100,1.25,0.25)\n# -\n\n# ## Exercise 7:\n#\n# Calculate the average cost of food in the supermarket\n\n# +", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(power,rate=100,excl_24h=False):\n    rate_per_kwh = rate\n    if excl_24h:\n        rate_per_kwh = rate*0.98\n\n    bill = 0\n    for i in range(24):\n        bill += power * rate_per_kwh\n\n    return bill\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    return kwh * 0.000356\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kilowatts):\n    return (kilowatts * 0.0877) + 15.6\n\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    return float(len(arr))/len(set(arr))\n\ndef test():\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(nums):\n    return float(len(filter(lambda x: x==0, nums))) / len(nums)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    return float(len(arr)) - float(sum(arr))\n\n\n# +\n# Exercise 7", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]==0:\n            count+=1\n    return count/n\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(A):\n    N = len(A)\n    n_zero = 0\n    for a in A:\n        if a==0:\n            n_zero += 1\n    return n_zero / N\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(array):\n    if len(array)==0:\n        return 0\n    zeroes = 0\n    non_zeroes = 0\n    for elem in array:\n        if elem==0:\n            zeroes+=1\n        else:\n            non_zeroes+=1\n    return zeroes/non_zeroes\n\ndef zero_count2(array):\n    return len([0 for x in array if x==0])/len(array)\n\ndef test_zero_count():\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n    assert zero_count2([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(array):\n    zeros = [x for x in array if x==0]\n    return len(zeros)/len(array)", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    return sum([1 for i in arr if i == 0])/len(arr)\n\ndef test_zero_count():\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    count = 0\n    for num in arr:\n        if num==0:\n            count+=1\n    return count/len(arr)", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n  \"\"\"\n  Computes the ratio of zeros in an array of integers.\n  \n  Args:\n  arr: a sequence of integers, can be any iterable (e.g. list or tuple)\n  \n  Returns:\n  float: ration of zeros in the array\n  \"\"\"\n  return len([n for n in arr if n==0])/len(arr)\n\n\ndef print_zero_count(arr):\n  \"\"\"\n  Prints the result of zero_count function.\n  \n  Args:\n  arr: a sequence of integers, can be any iterable (e.g. list or tuple)\n  \"\"\"\n  print(zero_count(arr))\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(number):\n    return sum(int(math.log(i, 2)) for i in range(1, number + 1)) == number - 1\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return (n % 2 == 0 and is_Sum_Of_Powers_Of_Two(n/2)) or (n % 2 != 0 and is_Sum_Of_Powers_Of_Two(n + 1))", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    for i in range(1, n + 1):\n        if (n & (n - 1)) == 0:\n            if (n % i == 0):\n                return False\n    return True", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(num):\n    powers = {1:True, 2:True, 4:True, 8:True}\n    while num != 0:\n        if num % 2 == 0:\n            num //= 2\n            if num in powers:\n                return True\n        else:\n            num -= 1\n            if num in powers:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(num):\n    for i in range(1,num+1):\n        for j in range(1,i+1):\n            if(num == j+j):\n                return True\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Your code here\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n - 1)\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    #Your code here\n    #logic: \n    #1. n is not 0\n    #2. only 2's and 1's will appear as digits\n    #3. check if n mod 2 = 0\n    #4. n = n/2\n    #5. n = n + 1\n    #6. repeat until n is 0\n    return True", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(num/2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(num/2) or is_Sum_Of_Powers_Of_Two(num/2 + 1)\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n# Returns True if the given number can be represented as sum of non-zero powers of 2\ndef is_Sum_Of_Powers_Of_Two(num):\n    result = False\n    if num == 0:\n        result = True\n    elif num == 1:\n        result = True\n    elif num == 2:\n        result = True\n    else:\n        if num % 2 == 0:\n            return is_Sum_Of_Powers_Of_Two(num/2) or is_Sum_Of_Powers_Of_Two(num/2)\n        else:\n            if is_Sum_Of_Powers_Of_Two(num/2):\n                result = True\n    return result\n\n\n#Driver Code", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n\n    # your code here\n    return num > 0 and (num&(num-1)) == 0\n\n# test"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\nfrom math import pi\n\n\ndef circle_circumference(radius):\n    return radius * 2 * pi\n\n\ndef circle_circumference_advanced(radius):\n    return radius * 2 * pi\n\n\n# Tests", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return 2*radius*math.pi\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * radius * (3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081257343015973295619319892696329522744374675517241215867652745183348253424315707756986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    \"\"\"\n    Returns the circle's circumference.\n    \"\"\"\n    return 2.0 * radius * pi\n\ndef test_circle_circumference(nb_test):\n    \"\"\"\n    Tests the circle_circumference function.\n    \"\"\"\n    global pi\n    pi = 3.14\n    for i in range(0, nb_test):\n        radius = random.randint(1,10)\n        assert circle_circumference(radius) == 62.830000000000005", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle given radius.\n\n    Args:\n        r: radius of circle\n\n    Returns:\n        The circumference of the circle\n    \"\"\"\n    return 2 * 3.14159 * r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    circumference = 2*3.14*radius\n    return circumference\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(r):\n    return 2*3.1415*r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\nfrom math import pi\n\ndef circle_circumference(radius):\n    return pi*radius*2\n\n# +", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    # your code here\n    return 2 * 3.14 * radius\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup_lst):\n    singly = []\n    for t in tup_lst:\n        if t not in singly:\n            singly.append(t)\n    return singly\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tups):\n    \"\"\"\n    Assumes tups is a list of tuples.\n    :param tups:\n    :return:\n    \"\"\"\n    result = []\n    for tup in tups:\n        for index, element in enumerate(tup):\n            if index not in result:\n                result.append(index)\n    return result\n\n\ndef test_extract_singly():\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4), (1, 4), (1, 4)]) == [1, 4, 1, 4, 1]\n    assert extract_singly([(3, 4, 5)]) == [0, 1, 2]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(lst):\n    return [item for tup in lst for item in tup if tup.count(item) == 1]", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(l):\n    extracted_values = []\n    for tup in l:\n        for val in tup:\n            if val not in extracted_values:\n                extracted_values.append(val)\n    return extracted_values\n\n# Test for Extracting Singly", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup):\n    final = []\n    for i in tup:\n        if len(i) == 1:\n            final.append(i[0])\n    return final\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tlist):\n    \"\"\"\n    Extract elements that occur singly in the given tuple list.\n\n    Args:\n        tlist (list(tuple)): List of tuples.\n\n    Returns:\n        list: List of elements that occur singly in the given tuple list.\n    \"\"\"\n    # TODO: Your code here.\n    return [e for t in tlist for e in t if t.count(e) == 1]\n\n\n# -\n\n# ## Write a function to extract elements that occur twice in the given tuple list.\n#\n# assert extract_double([(3, 4, 5), (4, 5, 7), (1, 4)]) == [4, 5, 7]\n\n# + tags=[\"solution\"]", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuples):\n    \"\"\"\n    Return a list of elements that occur singly in the given tuple list\n    \"\"\"\n    unique = set()\n    output = []\n    for tup in tuples:\n        # if we encounter a single element we should append it to output\n        if len(tup) == 1:\n            output.append(tup[0])\n        else:\n            unique.update(tup)\n    return list(unique)\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(list_of_tuples):\n    return [x for x in list_of_tuples if list_of_tuples.count(x) == 1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tup_list):\n    # create a dictonary to track unique elements\n    unique_dict = {}\n    # loop over the tuple list\n    for tup in tup_list:\n        # get the first element of the tuple\n        element = tup[0]\n        # get the second element of the tuple\n        count = tup[1]\n        # get the key for the dictonary\n        key = str(element)\n        # if the key is not already in the dictonary\n        if key not in unique_dict:\n            # assign the value of the tuple to the key in the dictionary\n            unique_dict[key] = count\n        # if the key is already in the dictonary, update the value\n        elif unique_dict[key] < count:\n            unique_dict[key] = count\n    # return a list of unique keys in the dictionary\n    return list(unique_dict.keys())\n\n# test cases", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(data):\n    \"\"\"\n    This function takes a tuple list as input, and returns a list of those elements\n    in the list which are singly present.\n    \"\"\"\n    # This can be done using set theory, but we're going to do it using a set\n    # and a list comprehension.\n    return [n for n in data if data.count(n) == 1]\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(array):\n    return _pancake_sort(array, [])\n\ndef _pancake_sort(array, result):\n    if len(array) <= 1:\n        return result\n    max_pos = max(range(len(array)), key = lambda x: array[x])\n    result.append(max_pos)\n    _pancake_sort(array[:max_pos], result)\n    _pancake_sort(array[max_pos+1:], result)\n    return result\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(l):\n    if len(l) <= 1:\n        return l\n    m = max(l)\n    p = -1\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == m:\n            p = i\n    i = len(l) - 1\n    while i >= 0:\n        if l[i] == m:\n            return l\n        else:\n            i = p\n            l[i], l[p] = l[p], l[i]\n        i -= 1\n    return l\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(A):\n    \"\"\"\n    Time: O(n log n)\n    Space: O(1)\n    \"\"\"\n    # Using greedy approach\n    n = len(A)\n    for i in range(n):\n        # Finding the index of max element\n        index = i\n        for j in range(i+1, n):\n            if A[index] > A[j]:\n                index = j\n\n        # If the index is not already at the last index,\n        # then swap the two elements\n        if index != i:\n            A[index], A[i] = A[i], A[index]\n\n    return A\n\n\n# +\ndef test_pancake_sort():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([44, 2, 94]) == [2, 44, 94]\n    assert pancake_sort([1, 4, 1, 3, 5, 1]) == [1, 1, 1, 3, 4, 5]\n    assert pancake_sort([1]) == [1]\n    assert pancake_sort([]) == []\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    # Iterate through the elements\n    n = len(arr)\n    for i in range(n):\n        # Find the largest element to its left\n        largest = i\n        for j in range(i+1, n):\n            if arr[j] > arr[largest]:\n                largest = j\n        if largest == i:\n            continue\n        \n        # Swap the elements\n        arr[i], arr[largest] = arr[largest], arr[i]\n        print(arr)\n        # Recursively sort the elements\n        pancake_sort(arr[:i] + arr[i+1:])\n        pancake_sort(arr[i+1:])\n    return arr\n\n\n# test\narr = [15, 79, 25, 38, 69]\npancake_sort(arr)", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(list):\n    pancake_cnt = 0\n    for i in range(len(list)-1):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n                pancake_cnt += 1\n    return list\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(nums):\n    if not nums or len(nums) < 2:\n        return nums\n    \n    for i in range(len(nums) - 1, 0, -1):\n        j = 0\n        while j < i and nums[j] > nums[j + 1]:\n            nums[j], nums[j + 1] = nums[j + 1], nums[j]\n            j += 1\n    return nums\n\n\n# +", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(numbers):\n    pancake_list = []\n    for i in range(len(numbers)-1, -1, -1):\n        find_index = numbers[i]\n        if find_index in pancake_list:\n            pancake_list.remove(find_index)\n        else:\n            pancake_list.append(find_index)\n    return numbers[len(numbers) - len(pancake_list):] + numbers[:len(numbers) - len(pancake_list)]\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(nums):\n    def swap(a, b):\n        nums[a], nums[b] = nums[b], nums[a]\n\n    def reverse(a, b):\n        for i in range(a, b + 1):\n            nums[i], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[i]\n\n    def sort_helper(a, b):\n        while a < b:\n            if nums[a] > nums[b]:\n                swap(a, b)\n                reverse(a, len(nums) - 1)\n                reverse(0, a - 1)\n            a += 1\n            b -= 1\n\n    for i in range(len(nums) - 1):\n        sort_helper(i, len(nums) - 1)\n\n    return nums\n\ndef pancake_sort_2(nums):\n    def swap(a, b):\n        nums[a], nums[b] = nums[b], nums[a]\n\n    def reverse(a, b):\n        for i in range(a, b + 1):\n            nums[i], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[i]\n\n    def sort_helper(a, b):\n        while a < b:\n            if nums[a] > nums[b]:\n                swap(a, b)\n                reverse(a, b)\n                reverse(a + 1, b)\n            a += 1\n            b -= 1\n\n    for i in range(len(nums) - 1):\n        sort_helper(i, len(nums) - 1)\n\n    return nums\n\ndef print_array(nums):\n    for i in range(len(nums)):\n        print(nums[i], end=' ')\n    print()\n\nnums = [15, 79, 25, 38, 69]", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\nfrom typing import List\n\n\ndef pancake_sort(A: List[int]) -> List[int]:\n    # Write your code here\n    L = [i for i in range(len(A))]\n    for i in range(len(A)):\n        k = find_max(L, A)\n        L[i], L[k] = L[k], L[i]\n    return L\n\n\ndef find_max(L: List[int], A: List[int]) -> int:\n    if len(L) == 1:\n        return 0\n    return max(\n        L[0:len(L)//2],\n        find_max(L[len(L)//2:], A)\n    )\n\n\ndef test_pancake_sort():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    pancakes = []\n    def sort(arr, i):\n        if i == 0:\n            return\n        if i == len(arr) - 1:\n            return\n        for j in range(i, 0, -1):\n            if arr[j] < arr[j - 1]:\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n                pancakes.append((i, j - 1))\n                sort(arr, j - 1)\n                return\n    sort(arr, len(arr) - 1)\n    return arr\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(l1,l2,l3):\n    set1 = set(l1)\n    set2 = set(l2)\n    set3 = set(l3)\n\n    return len(set1.intersection(set2.intersection(set3)))", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    dict={}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for i in list2:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for i in list3:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return len(dict)\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(a,b,c):\n    count=0\n    for i in range(len(a)):\n        if(a[i]==b[i] and a[i]==c[i]):\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1,list2,list3):\n    d={}\n    for i in list1:\n        if i not in d.keys():\n            d[i]=1\n        else:\n            d[i]+=1\n    for j in list2:\n        if j not in d.keys():\n            d[j]=1\n        else:\n            d[j]+=1\n    for k in list3:\n        if k not in d.keys():\n            d[k]=1\n        else:\n            d[k]+=1\n    return len(d.keys())", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    # Using set\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n\n    return len(set1.intersection(set2.intersection(set3)))\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(x,y,z):\n    count=0\n    for i in x:\n        for j in y:\n            for k in z:\n                if i==j and j==k:\n                    count=count+1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(l1, l2, l3):\n    result = 0\n    for i in range(0, len(l1)):\n        for j in range(0, len(l2)):\n            for k in range(0, len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    result += 1\n    return result\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(l1, l2, l3):\n    dict = {}\n    for i in range(len(l1)):\n        if l1[i] in dict:\n            dict[l1[i]].append(i)\n        else:\n            dict[l1[i]] = [i]\n    for i in range(len(l2)):\n        if l2[i] in dict:\n            if l2[i] in l3:\n                return dict[l2[i]].count(i)\n    return 0\n\n\ndef print_test():\n    print(\"Test count_samepair function\")\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    print(\"Test count_samepair function done!\")\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(l1,l2,l3):\n    cnt = 0\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j and j == k and i != k:\n                    cnt += 1\n    return cnt\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(l1,l2,l3):\n    if len(l1)!=len(l2)!=len(l3):\n        return 0\n    d={}\n    for i in range(len(l1)):\n        if (l1[i],l2[i],l3[i]) in d:\n            d[(l1[i],l2[i],l3[i])]+=1\n        else:\n            d[(l1[i],l2[i],l3[i])]=1\n    return len(d)\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    \"\"\"\n    param: tup -- tuple\n    return: number of lists present in the given tuple\n    \"\"\"\n    return len(tup)\n\n\n# +", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tup):\n    \"\"\"\n    Function to find the number of lists present in the given tuple\n\n    Args:\n        tup (tuple): The given tuple\n\n    Returns:\n        int: The number of lists present in the given tuple\n    \"\"\"\n    return len(tup)\n\ndef test_list_count():\n    \"\"\"Function to test the function\"\"\"\n    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuple_):\n    count = 0\n    for item in tuple_:\n        if item[1] == tuple_[0][1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    # Your code here\n    #tup[0] is list_1\n    #tup[1] is list_2\n    #len of each list is equal\n    #return number of tuples in tuple\n    return len(tup[0]) == len(tup[1])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    for i in t:\n        print(i)\n\nfind_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\n# This is a \"method-only\" submission.\n# You only need to complete this function.\n# Do not remove or alter any code in the above comment.\n\ndef find_lists(tuple_):\n    return len(tuple_) - len(tuple_.union(*tuple_))\n\n\n# ----------------------\n# Brute Force\n# ----------------------\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\n\nfrom utils.utils import is_sublist\n\n\ndef find_lists(t):\n    \"\"\"\n    :param t: a tuple of lists\n    :return: number of lists present in the tuple\n    \"\"\"\n    return len(Counter(t).values())\n\n\ndef find_lists2(t):\n    \"\"\"\n    :param t: a tuple of lists\n    :return: number of lists present in the tuple\n    \"\"\"\n    return reduce(lambda x, y: x + y, map(lambda x: 1 if is_sublist(x, y) else 0, t))\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    \"\"\"\n    Returns the number of lists present in a tuple.\n    \"\"\"\n    return len(set([type(e) for e in t]))\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuples):\n    \"\"\"\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\n    2\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]))\n    3\n    >>> find_lists(([1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]))\n    4\n    >>> find_lists(([1, 2, 3], [1, 2], [1, 2, 3, 4], [1, 2, 3, 4, 5]))\n    0\n    \"\"\"\n    result = 0\n    for x in tuples:\n        if len(set(x)) != len(x):\n            result += 1\n    return result\n\n# with map\n# we need to do a little modification as map does not support\n# nested lists\n# we need to use a generator expression\n# for this, we can use itertools.groupby\n\ndef find_lists(tuples):\n    \"\"\"\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\n    2\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]))\n    3\n    >>> find_lists(([1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]))\n    4\n    >>> find_lists(([1, 2, 3], [1, 2], [1, 2, 3, 4], [1, 2, 3, 4, 5]))\n    0\n    \"\"\"\n    return sum(1 for _ in itertools.groupby", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tup):\n    if isinstance(tup, tuple):\n        return len(tup)\n    else:\n        return 0\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr, k):\n    import numpy as np\n    arr = np.array(arr)\n    n = arr.shape[0]\n    dp = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(n-1, i, -1):\n                if abs(arr[i]-arr[j]) < k:\n                    dp[i][j] = (dp[i][j-1] + 1) if j > 0 else 1\n    return sum(dp[0][n-1] for i in range(n))\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    return((sum(x-y for x,y in itertools.combinations(arr, 2)) if len(arr)>=2 else 0))\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_pairs(arr,n):\n    arr.sort()\n    abs_diff = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            abs_diff = abs_diff + abs(arr[i]-arr[j])\n    return abs_diff\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, n):\n    a = arr\n    n = len(arr)\n    \n    total = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            total += abs(a[i] - a[j])\n    \n    return total\n\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_pairs(arr, size):\n    sum = 0\n    for i in range(0, size - 1):\n        for j in range(i+1, size):\n            sum += abs(arr[i] - arr[j])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,N):\n    arr=sorted(arr)\n    if N%2==0:\n        return arr[-N//2] + arr[-N//2-1]\n    return arr[-N//2]\n#print(sum_Pairs([1,8,9,15,16],5))", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    arr_dic = {}\n    arr_sorted = sorted(arr)\n    if n%2 == 0:\n        for i in range(0,int(n/2)):\n            arr_dic[arr_sorted[i]] = arr_sorted[i+1]\n        for i in range(int(n/2),n):\n            arr_dic[arr_sorted[i]] = arr_sorted[i-1]\n    else:\n        arr_dic[arr_sorted[int(n/2-1)]] = arr_sorted[int(n/2)]\n    abs_diff = 0\n    for key,value in arr_dic.items():\n        abs_diff += abs(value-key)\n    return abs_diff\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,n):\n    arr.sort()\n    sum=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum+=abs(arr[j]-arr[i])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,size):\n    total_diff = 0\n    for i in range(size):\n        for j in range(i+1,size):\n            total_diff += abs(arr[i]-arr[j])\n    return total_diff", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,n):\n    \"\"\"\n    Calculate and return the sum of absolute differences in all pairs of the given array\n    \"\"\"\n    return sum([abs(x - y) for x,y in combinations(arr, 2)])\n\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    max_difference = 0\n    max_idx = 0\n\n    for idx in range(n):\n        for i in range(idx+1,n):\n            max_difference = max(max_difference, abs(arr[idx]-arr[i]))\n\n        max_idx = max(max_idx, max_difference)\n\n    return max_idx", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    arr.sort()\n    res = 0\n    for i in range(n-1):\n        res = max(res, abs(arr[i+1] - arr[i]))\n    return res\n\n\n# print(max_Abs_Diff((2,1,5,3),4))\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr, max_diff):\n\tarr.sort()\n\treturn max(arr[-1]-arr[0], max_diff - arr[-1] + arr[0])\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(array, k):\n    arr = sorted(array)\n    i = 0\n    max_Abs_diff = 0\n    while i < len(arr):\n        j = i + k\n        if j == len(arr):\n            break\n        max_Abs_diff = max(max_Abs_diff, abs(arr[i] - arr[j]))\n        i = j+1\n    return max_Abs_diff", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    max_diff = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (arr[i]-arr[j]) > max_diff:\n                max_diff = (arr[i]-arr[j])\n    return max_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(array,size):\n    max_diff=0\n    for i in range(0,size-1):\n        for j in range(i+1,size):\n            diff = array[i]-array[j]\n            if abs(diff)>max_diff:\n                max_diff=abs(diff)\n    return max_diff\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    i=0\n    j=n-1\n    max = 0\n    while(i<j):\n        if arr[i]>arr[j]:\n            max = max + abs(arr[j]-arr[i])\n            j=j-1\n        else:\n            max = max + abs(arr[j]-arr[i])\n            i=i+1\n    return max\narr = [3, 1, 1, 5, 6, 2, 8, 9, 10, 12, 11]\nmax_Abs_Diff(arr, len(arr))", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    # First scan the entire array\n    max_value = 0\n    for i in range(n-1):\n        max_value = max(max_value, abs(arr[i] - arr[i+1]))\n    return max_value\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    max = -1\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) > max:\n                max = abs(arr[i]-arr[j])\n    return max", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\n# This is a basic problem with two pointers\n\ndef max_Abs_Diff(a,n):\n    low=0\n    high=n-1\n    max_value=0\n    while low<high:\n        if abs(a[low]-a[high])>max_value:\n            max_value=abs(a[low]-a[high])\n        if a[low]<a[high]:\n            low+=1\n        else:\n            high-=1\n    return max_value\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum(ord(x) for x in string)\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return sum(c for c in string)\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(s):\n    \"\"\"\n    >>> ascii_value_string(\"python\")\n    112\n    >>> ascii_value_string(\"python3\")\n    112\n    >>> ascii_value_string(\"python-003\")\n    112\n    >>> ascii_value_string(\"p\\nython3\")\n    112\n    >>> ascii_value_string(\"python\")\n    112\n    >>> ascii_value_string(\"python\")\n    112\n    >>> ascii_value_string(\"python\")\n    112\n    >>> ascii_value_string(\"\")\n    0\n    >>> ascii_value_string(\"This is a string\")\n    84\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    112\n    >>> ascii_value_string(\"Python is awesome\")\n    11", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum(ord(letter) for letter in string)\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    \"\"\"Return ascii value of all characters in string\"\"\"\n    return sum(ord(char) for char in string)\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    char_set = []\n    for i in string:\n        char_set.append(ord(i))\n    char_set = sorted(char_set)\n    sum = 0\n    for i in range(len(char_set)):\n        sum += char_set[i]\n    return sum\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    value=0\n    for c in string:\n        value=value+ord(c)\n    return value\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return len(string)\n\n# print(ascii_value_string(\"python\"))", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(s):\n    ascii_val = 0\n    for c in s:\n        ascii_val += ord(c)\n    return ascii_val\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\n# my code\ndef ascii_value_string(input_string):\n    return sum([ord(letter) for letter in input_string])\n\n# solution\ndef ascii_value_string(input_string):\n    return sum([ord(letter) for letter in input_string])\n\n\n# -\n\n# ## 7. How to find all vowels in a string.\n#\n# ### Sample Input:\n# \"Hi, how are you?\"\n#\n# ### Sample Output:\n# \"e\"\n#\n# ### Explanation:\n# e, i, o, u\n\n# +\n# my code\ndef vowels(input_string):\n    return \"\".join([letter for letter in input_string if letter.lower() in \"aeiou\"])\n\n# solution\ndef vowels(input_string):\n    return \"\".join(letter for letter in input_string if letter.lower() in \"aeiou\")\n\n\n# -\n\n# ## 8. How to find all consonants in a string.\n#\n# ### Sample Input:\n# \"Hi, how are you?\"\n#\n# ### Sample Output:\n# \"hi, wou, r yu\"\n#\n# ### Explanation:\n# hi, wou, r, y\n\n# +\n# my code\ndef consonants(input_string):\n    return \"\".join([letter for letter in input_string if letter.lower() not in \"aeiou\"])\n\n# solution\ndef consonants(input_string):\n    return \"\".join([letter for letter in input_string if letter.lower() not in \"aeiou\"])\n\n\n# -\n\n# ## 9. How to count the number of times a string appears in a string.\n#\n# ### Sample Input:\n# \"hello I am hello\"\n#\n# ### Sample Output:\n# 2\n#\n# ### Explanation:\n# hello and I appear 2 times\n\n# +\n# my code\ndef count_string(input_string, sub_string):\n    return input_string.count(sub_string)\n\n# solution\ndef count_string(input_string"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    if row == 0 or col == 0:\n        return 0\n    if triangle[row][col] > triangle[row-1][col] + triangle[row][col-1]:\n        return triangle[row][col]\n    else:\n        return triangle[row][col] + max(max_path_sum(triangle, row-1, col), max_path_sum(triangle, row, col-1))\n\n#assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, i, j):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :type i: int\n    :type j: int\n    :rtype: int\n    \"\"\"\n    if i == 0:\n        return triangle[0][j]\n    elif j == 0:\n        return triangle[i][0]\n    else:\n        return max(triangle[i][j], triangle[i][j-1] + triangle[i-1][j], triangle[i-1][j] + triangle[i][j-1])\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, i, j):\n    \"\"\"\n    Given a triangle and two indexes, return the total path sum of the path between them\n    \"\"\"\n    if triangle[i][j] != 0:\n        return triangle[i][j]\n    else:\n        if i == 0:\n            return triangle[i][j] = triangle[i + 1][j] + triangle[i + 2][j]\n        elif j == 0:\n            return triangle[i][j] = triangle[i][j + 1] + triangle[i + 1][j]\n        else:\n            return triangle[i][j] = max(triangle[i][j - 1] + triangle[i + 1][j],\n                                        triangle[i][j] + triangle[i + 1][j + 1],\n                                        triangle[i + 1][j] + triangle[i + 2][j])\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nclass Solution(object):\n    def max_path_sum(self, triangle, i, j):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        if triangle is None or triangle[i] is None:\n            return 0\n\n        if i + 1 < len(triangle) and j + 1 < len(triangle[i]):\n            res = triangle[i][j] + self.max_path_sum(triangle, i + 1, j)\n            if res < self.max_path_sum(triangle, i, j + 1):\n                res = self.max_path_sum(triangle, i, j + 1)\n            return res\n\n        return triangle[i][j]\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row_index, column_index):\n    if triangle[row_index][column_index] == 0:\n        return 0\n    return triangle[row_index][column_index] + \\\n        max(max_path_sum(triangle, row_index + 1, 0),\n            max_path_sum(triangle, row_index + 1, column_index),\n            max_path_sum(triangle, row_index, column_index + 1))\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row_index, column_index):\n    # handle base case\n    if row_index >= len(triangle):\n        return 0\n    if column_index >= len(triangle[row_index]):\n        return 0\n\n    # if there is only one path, return the value of that path\n    if column_index == 0 and row_index == 0:\n        return triangle[row_index][0]\n\n    # if this is the first time we've visited the current cell, then\n    # recursively find the max value using the values of the left and right\n    # paths\n    if row_index == 0 or column_index == 0:\n        left = max_path_sum(triangle, row_index, column_index - 1)\n        right = max_path_sum(triangle, row_index, column_index)\n    else:\n        left = max_path_sum(triangle, row_index - 1, column_index)\n        right = max_path_sum(triangle, row_index, column_index - 1)\n\n    # return the maximum total sum of any of the paths that go through the\n    # current cell\n    return max(left, right) + triangle[row_index][column_index]\n\n\ndef test_max_path_sum():\n    triangle = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\n    assert max_path_sum(triangle, 2, 2) == 14\n\ndef main():\n    triangle = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\n    row_index = 2\n    column_index = 2\n    print(max_path_sum(triangle, row_index, column_index))\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row, col):\n    \"\"\"\n    :param triangle: list of list of integers\n    :param row: int\n    :param col: int\n    :return: int\n    \"\"\"\n    if row == 0:\n        return triangle[row][col]\n    else:\n        return max(triangle[row][col] + triangle[row - 1][col],\n                   triangle[row][col] + triangle[row][col - 1],\n                   triangle[row][col - 1] + triangle[row - 1][col])\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, n, m):\n    # Write your code here\n    if n == 0 or m == 0:\n        return 0\n    if n == 1 and m == 1:\n        return triangle[0][0]\n    return max(triangle[n-1][m], triangle[n-1][m-1], triangle[n][m-1])\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom typing import List\n\n\ndef max_path_sum(triangle: List[List[int]], x: int, y: int) -> int:\n    \"\"\"\n    The O(n^2) dynamic programming problem.\n    \"\"\"\n    n = len(triangle)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = triangle[0][0]\n    for x in range(n):\n        for y in range(x + 1):\n            if x == 0 and y == 0:\n                continue\n            dp[x][y] = triangle[x][y] + max(\n                dp[x - 1][y],\n                dp[x][y - 1],\n                dp[x - 1][y - 1] + triangle[x][y],\n            )\n\n    return dp[n - 1][n - 1]", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[row][col]\n    elif col == 0:\n        return max(max_path_sum(triangle, row-1, 0), max_path_sum(triangle, row-1, 1))\n    else:\n        return max(max_path_sum(triangle, row-1, 0) + triangle[row][col],\n                    max_path_sum(triangle, row-1, 1) + triangle[row][col-1])\n\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    \"\"\"\n    Divide a number into two parts such that the sum of digits is maximum\n    :param num: Input number\n    :return: Maximum sum of digits of two parts\n    \"\"\"\n    list1 = []\n    list2 = []\n    list3 = []\n    for i in range(len(str(num))):\n        list1.append(int(str(num)[i]))\n    list2 = list1[::2]\n    list3 = list1[1::2]\n    max_sum = sum(list1)\n    for i in range(len(list2)):\n        for j in range(len(list3)):\n            sum_ = list2[i] + list3[j]\n            if sum_ > max_sum:\n                max_sum = sum_\n    return max_sum\n\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    max_sum = -1\n    for i in range(1,num/2):\n        if i%2:\n            tmp_sum = sum([int(x) for x in str(i)])\n            if tmp_sum > max_sum:\n                max_sum = tmp_sum\n    return max_sum\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\nfrom itertools import combinations\n\ndef sum_digits_twoparts(n):\n    max_ = 0\n    for i,j in combinations(range(1,n), 2):\n        if i+j == n:\n            return i*j\n\n    return max_\n\n#Useful for debugging\n#print(sum_digits_twoparts(23))\n#print(sum_digits_twoparts(35))\n#print(sum_digits_twoparts(375))\n#print(sum_digits_twoparts(417))\n#print(sum_digits_twoparts(120))\n#print(sum_digits_twoparts(27))\n#print(sum_digits_twoparts(67))\n#print(sum_digits_twoparts(101))\n#print(sum_digits_twoparts(103))\n#print(sum_digits_twoparts(104))\n#print(sum_digits_twoparts(105))\n#print(sum_digits_twoparts(106))\n#print(sum_digits_twoparts(107))\n#print(sum_digits_twoparts(108))\n#print(sum_digits_twoparts(109))\n#print(sum_digits_twoparts(110))\n#print(sum_digits_twoparts(111))\n#print(sum_digits_twoparts(112))\n#print(sum_digits_twoparts(113))\n#print(sum_digits_twoparts(114))\n#print(sum_digits_twoparts(115))\n#print(sum_digits_twoparts(116))\n#print(sum_digits_twoparts(117))\n#print(sum_digits_twoparts(118))\n#print(sum_digits_twoparts(119))\n#print(sum_digits_twoparts(", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    div_by2 = num//2\n    if num%2 == 1:\n        div_by2 += 1\n    return div_by2*div_by2\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    if num <= 9:\n        return num\n    else:\n        num1 = sum_digits_twoparts(num//10)\n        num2 = sum_digits_twoparts(num%10)\n        return num1+num2\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(number):\n    \"\"\"\n        Takes in a positive integer number and returns the sum of all its digits when divided into two parts\n    \"\"\"\n    num = number\n    list_of_digits = list(map(int,str(num)))\n    list_of_digits.sort()\n    list_1 = list_of_digits[0:len(list_of_digits)//2]\n    list_2 = list_of_digits[len(list_of_digits)//2:]\n    return sum(list_1)+sum(list_2)\n\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(number):\n    if len(str(number))%2:\n        return max([int(str(number)[0:i]+str(number)[i+1:]) for i in range(0,len(str(number))/2)])\n    return max([int(str(number)[0:i]) + int(str(number)[i+1:2*i+1]) for i in range(0,len(str(number))/2)])\n\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    #create two variables to store the digits of the number\n    first = 0\n    second = 0\n    #loop through all the digits of the number\n    for digit in str(num):\n        #add each digit to the first variable\n        first += int(digit)\n        #add each digit to the second variable\n        second += int(digit)\n    #return the maximum value of first and second\n    return max(first, second)\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    max_sum = 0\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            if num // i > max_sum:\n                max_sum = num // i\n    return max_sum\n\ndef test_sum_digits_twoparts():\n    assert sum_digits_twoparts(35) == 17\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    sum_digit=0\n    while n>0:\n        sum_digit=sum_digit+n%10\n        n=n//10\n    return sum_digit\n\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, threshold):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    # write your code here", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n# Dynamic Programming\ndef longest_subseq_with_diff_one(A, B):\n    n = len(A)\n    dp = [[0] * (B + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, B + 1):\n            if A[i - 1] == j:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][B]", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, d):\n    \"\"\"\n    :type arr: list\n    :type d: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n < 1:\n        return 0\n\n    prev = arr[0]\n    prev_i = 0\n\n    i = 0\n    while i < n:\n        if prev != arr[i]:\n            prev = arr[i]\n            prev_i = i\n\n        i += 1\n        if i - prev_i == d:\n            return i - prev_i\n\n    return 0\n\n\ndef longest_subseq_with_diff_one2(arr, d):\n    \"\"\"\n    :type arr: list\n    :type d: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n < 1:\n        return 0\n\n    prev = arr[0]\n    prev_i = 0\n\n    i = 0\n    while i < n:\n        if prev != arr[i]:\n            prev = arr[i]\n            prev_i = i\n\n        i += 1\n        if i - prev_i == d:\n            return i - prev_i\n\n    return 0\n\n\ndef longest_subseq_with_diff_one3(arr, d):\n    \"\"\"\n    :type arr: list\n    :type d: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n < 1:\n        return 0\n\n    prev = arr[0]\n    prev_i = 0\n\n    i = 0\n    while i < n:\n        if prev != arr[i]:\n            prev = arr[i]\n            prev_i = i\n\n        i += 1\n        if i - prev_i == d:\n            return i - prev_i\n\n    return 0\n\n\ndef longest_subseq_with_diff_one4(arr, d):\n    \"\"\"\n    :type arr: list\n    :type d: int\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    if n < 1:\n        return", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n):\n    '''\n    Uses two pointers.\n    Time Complexity: O(N^2)\n    Space Complexity: O(1)\n    '''\n    max_len = 0\n    left = 0\n    right = 0\n    while left < n and right < n:\n        if arr[left] != arr[right]:\n            right += 1\n        else:\n            max_len = max(max_len, right - left + 1)\n            left += 1\n            right += 1\n    return max_len\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(arr: List[int], max_limit: int) -> int:\n    if not arr:\n        return 0\n    end = -1\n    l = len(arr)\n    for i in range(l):\n        if arr[i] == 0:\n            end = i\n            break\n    if end == -1:\n        return l\n    current_max = 1\n    for i in range(end, -1, -1):\n        if arr[i] == 1:\n            break\n        if current_max < (end - i + 1):\n            current_max = end - i + 1\n    for i in range(end, 0, -1):\n        if arr[i] == 0:\n            break\n        if current_max < (end - i):\n            current_max = end - i\n    if current_max < max_limit:\n        return current_max\n    return 0\n\n\ndef longest_subseq_with_diff_one(arr: List[int], max_limit: int) -> int:\n    if not arr:\n        return 0\n    max_count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] != 0:\n            for j in range(i + 1, len(arr)):\n                if arr[j] == 0:\n                    break\n                if arr[i] == 0:\n                    break\n                if arr[i] == 1:\n                    if arr[j] == 1:\n                        break\n                    max_count = max(max_count, (j - i))\n                else:\n                    if arr[j] == 1:\n                        max_count = max(max_count, (j - i))\n    return max_count\n\n\ndef longest_subseq_with_diff_one(arr: List[int], max_limit: int) -> int:\n    if not arr:\n        return 0\n    start, end = 0, 0\n    for i in range(", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(a, d):\n    # Write your code here\n    s = 0\n    n = len(a)\n    for i in range(n):\n        if s < n:\n            while s < n and abs(a[s] - a[i]) <= d:\n                s += 1\n        else:\n            return s\n    return s\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n):\n    res = 0\n    seen = set()\n    for i in range(n):\n        if i in seen:\n            continue\n        for j in range(i + 1, n):\n            if j in seen:\n                continue\n            if arr[j] - arr[i] == 1:\n                res = max(res, j - i)\n        seen.add(i)\n    return res\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n):\n\n    sub_seq = [[0, 0] for i in range(n)]\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = 0\n\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            dp[i][i] = dp[i - 1][i - 1] + 1\n        else:\n            dp[i][i] = 1\n    for i in range(2, n):\n        for j in range(i):\n            if arr[i] == arr[j]:\n                sub_seq[i][0] = j\n            if arr[i] != arr[j]:\n                sub_seq[i][1] = sub_seq[j][1] + 1\n    max_len = 0\n    for i in range(1, n):\n        if dp[i][i] > max_len:\n            max_len = dp[i][i]\n    return max_len\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\n# Time: O(n^2)\n# Space: O(n)\ndef longest_subseq_with_diff_one(arr, bound):\n    max_len = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] == 1:\n                if j - i + 1 > max_len:\n                    max_len = j - i + 1\n    return max_len\n\n# Time: O(n^2)\n# Space: O(n)\ndef longest_subseq_with_diff_one(arr, bound):\n    max_len = 0\n    for i in range(len(arr)):\n        seen = set()\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] == 1:\n                if j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    seen = set([arr[i], arr[j]])\n    return max_len\n\n\n# Time: O(n)\n# Space: O(n)\ndef longest_subseq_with_diff_one(arr, bound):\n    prev, curr = 0, 0\n    seen = set()\n    max_len = 0\n    for i in range(len(arr)):\n        curr = arr[i]\n        if curr in seen:\n            continue\n        for j in range(i, len(arr)):\n            if arr[j] - curr == 1:\n                max_len = max(max_len, j - i + 1)\n                seen = set([curr, arr[j]])\n    return max_len", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = 1 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][-1]\n\n# Tests"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(x,a,b):\n\n    if (a==b):\n        return x in range(a)\n    elif (a<b):\n        for i in range(b,a,-1):\n            if (x in range(i)):\n                return True\n            else:\n                return False\n    else:\n        for i in range(b,a+1):\n            if (x in range(i)):\n                return True\n            else:\n                return False", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(number,start_number,end_number):\n\n    for i in range(start_number,end_number):\n        if i == number:\n            return True\n\n    return False\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,n,b):\n\n    # TODO: Write your python function here\n    for i in range(a,n+1):\n        if i%b == 0:\n            return True\n\n    return False\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(A,B,C):\n    if C==0:\n        return False\n    if C==1:\n        return A==B\n    return does_Contain_B(B,A,C-1) or does_Contain_B(A,B,C-1)\n    ", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(x,n,b):\n    for i in range(n+1):\n        if i!=0:\n            if (x%b)==0 and (i%b)==0:\n                return True\n            if x == (i*b):\n                return True\n        else:\n            if x%b==0:\n                return True\n    return False\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(num, n, k):\n    \"\"\"\n    num -> int\n    n -> int\n    k -> int\n    \"\"\"\n\n    \"\"\"\n    This is the naive approach to finding the nth number of the sequence\n    \"\"\"\n    if k == 0:\n        return True\n    else:\n        # Base Case\n        if num == n:\n            return True\n        else:\n            # Recursive case\n            return does_Contain_B(num + 1, n, k - 1)\n\n\ndef does_Contain_B_loop(num, n, k):\n    \"\"\"\n    num -> int\n    n -> int\n    k -> int\n    \"\"\"\n\n    # Base Case\n    if k == 0:\n        return True\n    elif k == 1:\n        return num == n\n    else:\n        # Recursive case\n        return does_Contain_B_loop(num, n, k - 1)\n\n\ndef does_Contain_B_recursive_on_loop(num, n, k):\n    \"\"\"\n    num -> int\n    n -> int\n    k -> int\n    \"\"\"\n    def helper(num, n, k):\n        if k == 0:\n            return True\n        elif k == 1:\n            return num == n\n        else:\n            return helper(num, n, k - 1)\n    return helper(num, n, k)\n\n\ndef does_Contain_B_recursive(num, n, k):\n    \"\"\"\n    num -> int\n    n -> int\n    k -> int\n    \"\"\"\n\n    def helper(num, n, k):\n        \"\"\"\n        num -> int\n        n -> int\n        k -> int\n        \"\"\"\n\n        if k == 0:\n            return True\n        elif k == 1:\n            return num == n\n        else:\n            return helper(num, n, k - 1)\n    return helper(num, n, k)\n\n\ndef does_Contain_B_recursive_on_loop_2(num, n, k):\n    \"\"\"\n    num -> int\n    n -> int\n    k -> int\n    \"\"\"\n\n    def helper(num, n, k):\n        if k == 0:\n            return True\n        elif k == 1:\n            return num == n\n        else:\n            return helper(num, n, k", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(n1, n2, b):\n    if n1 == n2 and n1 == b:\n        return True\n    elif n1 == n2 or n1 == b or n2 == b:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(A,B,C):\n    n = len(A)\n    for i in range(n):\n        if A[i]==B:\n            return True\n    return False\n\ndef main():\n    print(does_Contain_B([1,2,5,7,13,4,7,1,4,5,1,4,5,1,4,5,1],1,7))\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(first,last,element):\n    if last < first:\n        return False\n    if element == first:\n        return True\n    return does_Contain_B(first,last-1,element) or does_Contain_B(first+1,last,element)\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(num_a,num_b,limit):\n    for i in range(limit):\n        if i == num_a:\n            return True\n        if i == num_b:\n            return True\n    return False"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(n1,n2):\n    for i in range(1, n2+1):\n        if n1 % i == 0 and n2 % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1,num2):\n    \"\"\"\n    This function returns True if the num1 and num2 are co-prime else False.\n    \"\"\"\n    if (num1 == 0) or (num2 == 0):\n        return False\n    if num1 == 1:\n        return True\n    if num2 == 1:\n        return True\n    if num1 == num2:\n        return False\n    for i in range(2,num1):\n        if (num1 % i) == 0 and (num2 % i) == 0:\n            return False\n    return True\n\ndef is_coprime(num1,num2):\n    \"\"\"\n    This function returns True if the num1 and num2 are co-prime else False.\n    \"\"\"\n    if (num1 == 0) or (num2 == 0):\n        return False\n    if num1 == 1:\n        return True\n    if num2 == 1:\n        return True\n    if num1 == num2:\n        return False\n    for i in range(2,num1):\n        if (num1 % i) == 0 and (num2 % i) == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1,num2):\n    return (num1%num2 == 0) and (num2%num1 == 0)\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    \"\"\"\n    Finds whether a and b are coprime or not.\n    Args:\n        a: an integer\n        b: an integer\n    Returns:\n        Boolean value indicating whether a and b are coprime or not.\n    \"\"\"\n    if(a<0 or b<0 or a>b):\n        return False\n    elif(a==0 or b==0):\n        return False\n    else:\n        a = abs(a)\n        b = abs(b)\n        return (a%b)==0 and (b%a)==0\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    return (a%b == 0) and (b%a == 0)\n\ndef is_coprime2(a,b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: bool\n    \"\"\"\n    a = a%b\n    b = b%a\n    return a == 0 and b == 0\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a, b):\n    if a == 0 or b == 0:\n        return False\n    if a == 1 or b == 1:\n        return True\n    elif a == 2 or b == 2:\n        return False\n    else:\n        for i in range(2, int(a ** .5 + 1)):\n            if (a % i == 0) and (b % i == 0):\n                return False\n        return True\n\ndef is_coprime2(a, b):\n    return not a and not b or not (a % b) and a or b\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a < 1:\n        return False\n    elif b < 1:\n        return False\n    elif a == 1:\n        return True\n    elif b == 1:\n        return True\n    else:\n        for i in range(2,int(a**0.5+1)):\n            if a % i == 0 and b % i == 0:\n                return False\n        return True", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    if (a % b == 0 and b % a == 0):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a == 0 or b == 0:\n        return False\n    elif a == 1 or b == 1:\n        return True\n    elif a == b:\n        return True\n    else:\n        return is_coprime(b, a % b)\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(n,m):\n    for i in range(2,n+1):\n        if(n%i == 0 and m%i == 0):\n            return False\n    return True\n\n# Check the co-prime property for numbers."], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(array):\n    if len(array) < 2:\n        return array\n    middle = len(array)//2\n    left = merge_sort(array[:middle])\n    right = merge_sort(array[middle:])\n    return merge(left, right)\n\ndef merge(left, right):\n    merged = []\n    while left and right:\n        if left[0] <= right[0]:\n            merged.append(left.pop(0))\n        else:\n            merged.append(right.pop(0))\n    return merged + left + right\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(lst):\n    if len(lst) == 1:\n        return lst\n\n    mid = len(lst)//2\n    left = merge_sort(lst[:mid])\n    right = merge_sort(lst[mid:])\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] <= right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left)\n    result.extend(right)\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tmid = len(arr) // 2\n\tleft = merge_sort(arr[:mid])\n\tright = merge_sort(arr[mid:])\n\treturn merge(left, right)\n\ndef merge(left, right):\n\tresult = []\n\tleft_idx = 0\n\tright_idx = 0\n\twhile left_idx < len(left) and right_idx < len(right):\n\t\tif left[left_idx] <= right[right_idx]:\n\t\t\tresult.append(left[left_idx])\n\t\t\tleft_idx += 1\n\t\telse:\n\t\t\tresult.append(right[right_idx])\n\t\t\tright_idx += 1\n\tif left_idx < len(left):\n\t\tresult.extend(left[left_idx:])\n\tif right_idx < len(right):\n\t\tresult.extend(right[right_idx:])\n\treturn result\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(values):\n    \"\"\"\n    Merge sort function\n    \"\"\"\n    # Base case, single item is sorted\n    if len(values) < 2:\n        return values\n    # Recursive case, divide and conquer\n    else:\n        # Split into two halves and sort\n        midpoint = len(values)//2\n        left_half = values[:midpoint]\n        right_half = values[midpoint:]\n        left_half = merge_sort(left_half)\n        right_half = merge_sort(right_half)\n        return merge(left_half, right_half)\n\ndef merge(left_half, right_half):\n    \"\"\"\n    Merge two lists to one list\n    \"\"\"\n    # Create a list to store the sorted list\n    result = []\n    # Merge two halves\n    for left_value in left_half:\n        for right_value in right_half:\n            # Compare values\n            if left_value > right_value:\n                # Append right_value\n                result.append(right_value)\n                right_half.remove(right_value)\n            else:\n                # Append left_value\n                result.append(left_value)\n                left_half.remove(left_value)\n    # Append remaining values to the result\n    result.extend(left_half)\n    result.extend(right_half)\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(A: list) -> list:\n    if len(A) < 2:\n        return A\n    mid = len(A)//2\n    left = merge_sort(A[:mid])\n    right = merge_sort(A[mid:])\n    result = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    if i < len(left):\n        result.extend(left[i:])\n    if j < len(right):\n        result.extend(right[j:])\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) == 1:\n        return arr\n    else:\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\ndef merge(left, right):\n    sorted_list = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            sorted_list.append(left[i])\n            i += 1\n        else:\n            sorted_list.append(right[j])\n            j += 1\n    while i < len(left):\n        sorted_list.append(left[i])\n        i += 1\n    while j < len(right):\n        sorted_list.append(right[j])\n        j += 1\n    return sorted_list\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(a):\n    if not a:\n        return a\n\n    middle = len(a) / 2\n    left = merge_sort(a[:middle])\n    right = merge_sort(a[middle:])\n    sorted = []\n    l, r = 0, 0\n    while l < len(left) and r < len(right):\n        if left[l] < right[r]:\n            sorted.append(left[l])\n            l += 1\n        else:\n            sorted.append(right[r])\n            r += 1\n    while l < len(left):\n        sorted.append(left[l])\n        l += 1\n    while r < len(right):\n        sorted.append(right[r])\n        r += 1\n    return sorted\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(values):\n    # Base case: single element list\n    if len(values) <= 1:\n        return values\n    middle = len(values)//2\n\n    first_half = values[:middle]\n    second_half = values[middle:]\n\n    # Recursively call merge_sort\n    first_half = merge_sort(first_half)\n    second_half = merge_sort(second_half)\n\n    return merge(first_half, second_half)\n\n\n# Merge two sorted lists\ndef merge(first_half, second_half):\n    result = []\n\n    first_half_index = 0\n    second_half_index = 0\n\n    while first_half_index < len(first_half) and second_half_index < len(second_half):\n        if first_half[first_half_index] <= second_half[second_half_index]:\n            result.append(first_half[first_half_index])\n            first_half_index += 1\n        else:\n            result.append(second_half[second_half_index])\n            second_half_index += 1\n\n    # Add the remaining elements from either list\n    result += first_half[first_half_index:]\n    result += second_half[second_half_index:]\n\n    return result\n\n\ndef test_merge_sort():\n    # Unit tests\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    assert merge_sort([3, 2, 1, 8, 7]) == [1, 2, 3, 7, 8]\n    assert merge_sort([3, 2, 1, 4]) == [1, 2, 3, 4]\n    assert merge_sort([]) == []\n\n\n# You are given an array of numbers.\n# The array contains numbers which", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(list):\n    if len(list) <= 1:\n        return list\n    mid = len(list)//2\n    left = merge_sort(list[:mid])\n    right = merge_sort(list[mid:])\n    return merge(left, right)\n\ndef merge(list1, list2):\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    return merged_list + list1[i:] + list2[j:]\n\n\ndef test_merge_sort(arr):\n    arr = list(arr)\n    assert merge_sort(arr) == sorted(arr)\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(array):\n    if len(array) <= 1:\n        return array\n    left_array = merge_sort(array[:len(array)//2])\n    right_array = merge_sort(array[len(array)//2:])\n    return merge(left_array, right_array)\n\n\ndef merge(left_array, right_array):\n    res_array = []\n    i = 0\n    j = 0\n    while i < len(left_array) and j < len(right_array):\n        if left_array[i] < right_array[j]:\n            res_array.append(left_array[i])\n            i += 1\n        else:\n            res_array.append(right_array[j])\n            j += 1\n    while i < len(left_array):\n        res_array.append(left_array[i])\n        i += 1\n    while j < len(right_array):\n        res_array.append(right_array[j])\n        j += 1\n    return res_array\n\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    D=pow(a,2)-4*b*c\n    if D<0:\n        print(\"Parabola has no vertex.\")\n    elif D==0:\n        print(\"Parabola has one vertex at (0,0).\")\n    elif D>0:\n        x1 = (-b-pow(D,0.5))/2/a\n        x2 = (-b+pow(D,0.5))/2/a\n        print(\"Parabola has two vertices at ({},{}) and ({},{})\".format(x1,(-b+pow(D,0.5))/2/a,x2,(-b-pow(D,0.5))/2/a))\n\n\nparabola_vertex(5,3,2)\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(x0, a, b):\n    return (-b + sqrt(b**2-4*a*x0))/2*a\n\n# Tests", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    \"\"\"\n    Find the vertex of a parabola.\n    \n    Parameters\n    ----------\n    a : int\n        The value of the coefficient a.\n    b : int\n        The value of the coefficient b.\n    c : int\n        The value of the coefficient c.\n        \n    Returns\n    -------\n    tuple\n        The vertex of the parabola, which is a tuple containing the x-coordinate\n        and the y-coordinate of the vertex.\n    \"\"\"\n    return (b/2/a, -(b**2)/(4*a) + c/a)\n\n\ndef test_parabola_vertex():\n    \"\"\"\n    Test the parabola_vertex function.\n    \"\"\"\n    assert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\n\n#%%", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n\treturn (-b/2a, c/2a)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    assert a*a < 4*b*c, \"a must be less than 2*b*c\"\n    d = (a*a - 4*b*c)/(2*b)\n    return d, (d*d - c)/(2*b)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    \"\"\"\n    Given a,b,c parameters of a parabola, find the vertex of the parabola\n    \"\"\"\n    return ((b**2-4*a*c)/(2*a), -(b**2-4*a*c)/(4*a))\n\n# Test", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    return (a*b-c)/(2*a),(-c/(2*a))**2\n\ndef parabola_vertex_bisection(a,b,c):\n    return parabola_vertex(a,b,c)\n\ndef parabola_vertex_newton(a,b,c):\n    return parabola_vertex(a,b,c)", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(m,b,c):\n    \"\"\"returns the vertex of the parabola with given coefficients\"\"\"\n    d = b*b - 4*m*c\n    if d >= 0:\n        x1 = (-b - sqrt(d)) / (2*m)\n        y1 = m*x1 + c\n        return (x1,y1)\n    else:\n        return None\n    \ndef parabola_info(m,b,c):\n    \"\"\"returns the vertex of the parabola with given coefficients\"\"\"\n    d = b*b - 4*m*c\n    if d >= 0:\n        x1 = (-b - sqrt(d)) / (2*m)\n        y1 = m*x1 + c\n        x2 = (-b + sqrt(d)) / (2*m)\n        y2 = m*x2 + c\n        return [x1,y1,x2,y2]\n    else:\n        return None", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    return (-b/2*b + 4*a*c, -b/2*a + c)\n\n\n# -\n\n# ## General Plots\n\n# +\ndef plot(x, y):\n    import matplotlib.pyplot as plt\n    plt.plot(x, y)\n    plt.show()\n\nplot(x, y)\n\n# +\n# plot(x,y)\n# -\n\n# ## Types of Data Analysis\n\n# +\n# Define two lists\n\nx = [1,2,3,4,5]\ny = [2,4,6,8,10]\n\n# +\n# Use NumPy to perform common mathematical operations\n\nimport numpy as np\n\n# +\n# compute the mean\n\nnp.mean(y)\n\n# +\n# compute the variance\n\nnp.var(y)\n\n# +\n# compute the standard deviation\n\nnp.std(y)\n\n# +\n# compute the sum\n\nnp.sum(y)\n\n# +\n# find the index of the max element\n\nnp.argmax(y)\n\n# +\n# plot the data\n\nimport matplotlib.pyplot as plt\n\nplt.plot(x, y)\nplt.show()\n\n# +\n# plot the data with NumPy\n\nimport numpy as np\n\nplt.plot(x, y)\nplt.show()\n\n# +\n# describe the data\n\nimport pandas as pd\n\n# +\n# convert the lists to a dataframe\n\ndf = pd.DataFrame({'x': x, 'y': y})\n\ndf\n\n# +\n# compute the mean\n\ndf.mean()\n\n# +\n# compute the standard deviation\n\ndf.std()\n\n# +\n# compute the mean\n\ndf.mean()\n\n# +\n# compute the standard deviation\n\ndf.std()\n\n# +\n# convert the lists to a dataframe\n\ndf = pd.DataFrame({'x': x, 'y': y})\n\ndf\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\nimport math\n\ndef parabola_vertex(a,b,c):\n    \"\"\"\n    a,b,c are the coefficients of the quadratic equation\n    \"\"\"\n    m = (b**2-4*a*c)/(2*a)\n    x = -b/2/a + m\n    y = c/a - b*m**2/(4*a)\n    return x, y\n\ndef is_in_ellipse(x,y,x0,y0,a,b):\n    \"\"\"\n    is_in_ellipse(x,y) is true if point (x,y) is in ellipse defined by center\n    (x0,y0), a, b\n    \"\"\"\n    # an ellipse is the set of all points (x,y) that are the same distance from\n    # the center (x0,y0) and have a distance from (0,0) of (a,b).\n    # we'll set the distance from (0,0) equal to 1, since the other case is\n    # trivial.\n    # so, if we take the length of (x,y) and square it, then the distance from\n    # the origin is (x**2+y**2)**.5.\n    # the distance from the center of the ellipse is (x0-a*x0**2/(a*x0**2+y0**2),\n    # y0-b*y0**2/(a*x0**2+y0**2)**.5\n    # so, we want to find a (x,y) that is the same distance from (0,0) and the\n    # center of the ellipse.\n    # so, we want to find the distance from (x0-a*x0**2/(a*x0**2+y0**2),\n    # y0-b*y0**2/(a*x0**2+y0**2)**.5 and 1.\n    # we'll take the derivative with respect to (x0,y0) and set it equal to 0,\n    # then solve for x0,y0, and then plug them back"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(x,y):\n    if type(x)==list:\n        for i in range(len(x)):\n            if x[i][y] != 0:\n                yield x[i][y]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_in,element):\n    out = []\n    for i in range(len(list_in)):\n        for j in range(len(list_in[i])):\n            if list_in[i][j]==element:\n                out.append([i,j])\n    return out\n\ndef main():\n    data = [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\n    element = 5\n    print(specified_element(data, element))\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list,n):\n    return [list[i][n] for i in range(len(list))]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l,n):\n    result = []\n    for row in l:\n        if n == 0:\n            result.append(row[0])\n        else:\n            result.append(row[n])\n    return result\n\n\n# ___________________________________________________________\n# TESTS\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(data, index):\n    \"\"\"\n        data is a 2D list and index is an integer\n        return a list of specified elements\n    \"\"\"\n    result = []\n    if index < 0 or index > len(data):\n        return result\n    for i in range(len(data)):\n        for j in range(len(data[0])):\n            if i == index:\n                result.append(data[i][j])\n    return result\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst,n):\n    return [lst[i][n] for i in range(len(lst))]\n\ndef test_specified_element():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(a,n):\n    return [a[i][n] for i in range(len(a))]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\n# def specified_element(matrix, element_index):\n#     return [row[element_index] for row in matrix]\n\ndef specified_element(matrix, element_index):\n    return [[row[element_index] for row in matrix]]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_of_lists, element_to_find):\n    element_list = []\n    for element in list_of_lists:\n        element_list.append(element[element_to_find])\n    return element_list\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l,k):\n\treturn [l[i][k] for i in range(len(l))]\n\nl=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    # your code here\n    raise NotImplementedError()\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(x):\n    pass\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    if n & 1:\n        return n - 1\n    else:\n        return n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    if number == 0:\n        return 0\n    else:\n        return number % 2\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# Solution 1\ndef even_bit_toggle_number(num):\n    result = num\n    while num != 0:\n        result ^= num & 1\n        num >>= 1\n    return result\n\n# Solution 2\ndef even_bit_toggle_number(num):\n    return num ^ ((num >> 1) & 0x55555555) & 0x33333333\n\n# Solution 3\ndef even_bit_toggle_number(num):\n    return num ^ ((num >> 1) & 0x55555555) & 0x33333333 & 0xCCCCCCCC\n\n# Solution 4\ndef even_bit_toggle_number(num):\n    return num ^ ((num >> 1) & 0x55555555) & 0x33333333 & 0xCCCCCCCC & 0xF0F0F0F0\n\n# Solution 5\ndef even_bit_toggle_number(num):\n    return num ^ ((num >> 1) & 0x55555555) & 0x33333333 & 0xCCCCCCCC & 0xF0F0F0F0 & 0xFF00FF00\n\n# Solution 6\ndef even_bit_toggle_number(num):\n    return num ^ ((num >> 1) & 0x55555555) & 0x33333333 & 0xCCCCCCCC & 0xF0F0F0F0 & 0xFF00FF00 & 0xFFFF0000\n\n# Solution 7\ndef even_bit_toggle_number(num):\n    return num ^ ((num >> 1) & 0x55555555) & 0x33333333 & 0xCCCCCCCC & 0xF0F0F0F0 & 0xFF00FF00 & 0xFFFF0000 & 0x", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# problem: write a python function to toggle all even bits of a given number.\n\n\ndef even_bit_toggle_number(num):\n    \"\"\"\n    write a python function to toggle all even bits of a given number.\n    assert even_bit_toggle_number(10) == 0\n    \"\"\"\n    return bin(num)[2:].zfill(len(bin(num)[2:]))\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    #your code here\n    pass\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return n & -n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# In[2]:\n\n\ndef even_bit_toggle_number(num):\n    result = 0\n    for i in range(len(bin(num)[2:])):\n        result += 2 ** (len(bin(num)[2:]) - 1 - i) * int(bin(num)[2 - i])\n    return result\n\n\n# In[3]:\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(x):\n    print(x)\n    if x == 0:\n        return x\n    return ((x - (x % 2)) / 2)\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup_str):\n    \"\"\"\n    Convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n    return tuple(int(i) for i in tup_str)\n\ndef test_tuple_int_str():\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(t):\n    return tuple(int(i) for i in t)\n\ndef test_tuple_int_str():\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_str):\n    if not isinstance(tuple_str, tuple):\n        raise ValueError('not tuple type')\n    return tuple((int(num) for num in tuple_str[0]), (int(num) for num in tuple_str[1]))\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(val):\n    return tuple(map(lambda x:int(x[0]), val))\n\ndef tuple_str_int(val):\n    return tuple(map(lambda x:int(x[1]), val))\n\n# import itertools\n# def tuple_int_str(val):\n#     return tuple(map(lambda x:int(x[0]), val))\n# def tuple_str_int(val):\n#     return tuple(map(lambda x:int(x[1]), val))\n# def tuple_int_str(val):\n#     return tuple(map(lambda x:int(x[0]), val))\n# def tuple_str_int(val):\n#     return tuple(map(lambda x:int(x[1]), val))\n\n\n# test cases\n#assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n#assert tuple_str_int((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n#assert tuple_int_str(tuple_str_int((('333', '33'), ('1416', '55'))))==((333, 33), (1416, 55))\n#assert tuple_str_int(tuple_int_str((('333', '33'), ('1416', '55'))))==((333, 33), (1416, 55))\n\n# Python's \"Zen of Python\"\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    if not isinstance(tup, tuple):\n        raise Exception(\"tuple_int_str: parameter must be tuple.\")\n    for i in range(len(tup)):\n        if not isinstance(tup[i], tuple):\n            raise Exception(\"tuple_int_str: tuple must contain tuples.\")\n        if not isinstance(tup[i][0], int):\n            raise Exception(\"tuple_int_str: tuple must contain tuples of ints.\")\n        if not isinstance(tup[i][1], str):\n            raise Exception(\"tuple_int_str: tuple must contain tuples of str.\")\n    return tuple(tup)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_of_strings):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    return tuple(map(int, map(lambda x: x[0], tuple_of_strings)))\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    \"\"\"\n    Takes a tuple of string values and returns a tuple of integer values\n\n    Args:\n        tup (tuple): tuple of string values\n\n    Returns:\n        tuple: tuple of integer values\n    \"\"\"\n    return tuple(int(x) for x in tup)\n\n#Below is an example usage:\n\nimport random\n\ndef tuple_int_str(tup):\n    \"\"\"\n    Takes a tuple of string values and returns a tuple of integer values\n\n    Args:\n        tup (tuple): tuple of string values\n\n    Returns:\n        tuple: tuple of integer values\n    \"\"\"\n    return tuple(int(x) for x in tup)\n\n# Enter the tuple\ntup = ('333', '33', '1416', '55')\n\n# Calling the function", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(t):\n    return tuple(map(int, t))\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(my_tuple):\n    '''\n    The purpose of this function is to take a tuple of strings and return a tuple of integers.\n    '''\n    new_tuple = ()\n    for i in my_tuple:\n        new_tuple += (int(i[0]), int(i[1]))\n    return new_tuple\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(my_tuple):\n    \"\"\"\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\ndef test_tuple_int_str():\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\n\ndef test_tuple_int_str_2():\n    assert tuple_int_str((('333', 33), ('1416', 55)))==((333, 33), (1416, 55))\n\n\ndef test_tuple_int_str_3():\n    assert tuple_int_str((('333', '33'), ('1416', 55)))==((333, 33), (1416, 55))\n\n\ndef test_tuple_int_str_4():\n    assert tuple_int_str((('333', 33), ('1416', '55')))==((333, 33), (1416, 55))\n\n\ndef test_tuple_int_str_5():\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\n\ndef test_tuple_int_str_6():\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\n\ndef test_tuple_int_str_7():\n    assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(L):\n    if L == []:\n        return []\n    return [[L[0], 1]] + encode_list(L[1:])\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(L):\n    # This is a list of the run lengths that will be converted to a single list\n    rl_list = []\n\n    for i, val in enumerate(L):\n        # If the current value is the same as the previous value, add 1 to the list\n        if L[i] == L[i - 1]:\n            rl_list.append(1)\n            rl_list.append(val)\n        # If the current value is different than the previous value, add a single value to the list\n        else:\n            rl_list.append(L[i - 1])\n            rl_list.append(1)\n            rl_list.append(val)\n    \n    return rl_list\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(L):\n    \"\"\"\n        L - list\n        return - list of list\n    \"\"\"\n    result = []\n    for i in L:\n        if type(i) is list:\n            result.append(i)\n        else:\n            result.append([i,1])\n    return result\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(l):\n    res = []\n    i = 0\n    while i < len(l):\n        if l[i] == l[i+1]:\n            res.append([l[i], i + 1])\n            i += 2\n        else:\n            res.append([l[i], 1])\n            i += 1\n    return res\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(l):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    \"\"\"\n    assert l == [1,1,2,3,4,4.3,5,1]\n    return [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\ndef test_encode_list():\n    assert encode_list([1,1,2,3,4,4.3,5,1]) == [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\ndef test_encode_list_bad():\n    with raises(Exception):\n        encode_list([1,1,2,3])\n\n# TODO: Implement decode_list\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(numbers):\n    result = []\n    for num in numbers:\n        if result and result[-1][0] == num:\n            result[-1][1] += 1\n        else:\n            result.append([num, 1])\n    return result\n\ndef decode_list(numbers):\n    result = []\n    for num, count in numbers:\n        result += [num] * count\n    return result\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lst):\n    \"\"\"\n    \n    Args:\n        lst (list): a list\n    \n    Returns:\n        list: a list\n    \"\"\"\n    lst_res = []\n    while lst:\n        if len(lst) <= 1:\n            lst_res.append(lst)\n            lst = []\n        else:\n            lst_res.append([lst[0], len(lst)])\n            lst = lst[1:]\n    return lst_res\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(l):\n    return [[l.count(x), x] for x in set(l)]\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lst):\n    return [[item, count] for item, count in itertools.groupby(enumerate(lst), lambda x:x[1] - x[0])]\n\ndef decode_list(lst):\n    return [item for count, item in lst for _ in range(count)]\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(run_length_list):\n    # your code here\n    return [[int(x) for x in y] for y in run_length_list]\n\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,n):\n    # print(arr,k,n)\n    if len(arr) == 1:\n        return k\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        return 1\n    min_val = float('inf')\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                continue\n            elif arr[i] > arr[j]:\n                continue\n            else:\n                count = min_Ops(arr[:i] + arr[i+1:j] + arr[j+1:],k,n)\n                if count < min_val:\n                    min_val = count\n    return min_val\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,m):\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        total += abs(arr[i] - m)\n    return total\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,n):\n    if len(arr) == 0:\n        return 0\n    arr.sort()\n    if k < len(arr):\n        return min_Ops(arr[k:],k-1,n) + 1\n    if k > len(arr):\n        return min_Ops(arr[k:],k,n) + len(arr) - k\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,n):\n    n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    dp = [[-1]*(k+1) for _ in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(k+1):\n            min_val = sys.maxsize\n            min_val = 0 if i == 1 else min_val\n            for l in range(i-1):\n                min_val = min(min_val,dp[l][j])\n            dp[i][j] = min_val + 1\n    return dp[n-1][k]\n\n#print(min_Ops([2,2,2,2],4,3))\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,n,k):\n    if n==0:\n        return 0\n    elif k==1:\n        return 0 if arr[0]==arr[1] else 1\n    else:\n        min_op = float(\"inf\")\n        for i in range(len(arr)):\n            left_part = min_Ops(arr[:i],n-1,k)\n            right_part = min_Ops(arr[i+1:],n-1,k-1)\n            min_op = min(min_op,left_part+right_part+1)\n        return min_op\n\ndef test_min_Ops():\n    arr = [2,2,2,2]\n    n = 4\n    k = 3\n    print(min_Ops(arr,n,k))\n\ndef min_Ops_2(arr,n,k):\n    if n==0:\n        return 0\n    elif k==1:\n        return 0 if arr[0]==arr[1] else 1\n    else:\n        min_op = float(\"inf\")\n        for i in range(len(arr)):\n            left_part = min_Ops_2(arr[:i],n-1,k)\n            right_part = min_Ops_2(arr[i+1:],n-1,k-1)\n            min_op = min(min_op,left_part+right_part+1)\n        return min_op\n\ndef test_min_Ops_2():\n    arr = [2,2,2,2]\n    n = 4\n    k = 3\n    print(min_Ops_2(arr,n,k))", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n# Use two pointers, one pointer for storing the elements of the array and the other pointer\n# for finding the minimum operations needed.\n# The first pointer moves forward and the second pointer moves backwards.\ndef min_Ops(arr, k, n):\n    left = 0\n    right = len(arr)-1\n    min_ops = k\n    while left <= right:\n        while left < right and arr[left] == arr[right]:\n            left+=1\n            right-=1\n            min_ops-=1\n            if min_ops == 0:\n                return 0\n        left+=1\n        right-=1\n    return min_Ops\n\n\n# Test cases:", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\nclass Solution(object):\n    def min_Ops(self,arr,n,k):\n        \"\"\"\n        :type arr: List[int]\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        arr.sort()\n        min_ops = 0\n        for i in range(n-k+1):\n            if arr[i] != arr[i+k-1]:\n                break\n        else:\n            return min_ops\n\n        # for j in range(k):\n        #     if arr[i+j] != arr[i]:\n        #         break\n        # else:\n        #     return min_ops\n        min_ops = (arr[i+k-1] - arr[i]) / (arr[i+k-1] - arr[i-1])\n        return min_ops * n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,n,k):\n    if len(arr) == 1:\n        return 0\n    nums = [arr[0]]\n    for i in range(1,n):\n        if arr[i] == nums[0]:\n            nums.append(nums[0])\n        else:\n            nums = [arr[i]]\n    #print(nums)\n    return len(nums)", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,target):\n    k -=1\n    #print(k,target)\n    if k < 0:\n        return k\n    if k == 0:\n        return 0\n    if k == 1:\n        return min(arr)\n    if arr[0] == target:\n        return 0\n    arr.pop(0)\n    if arr[0] == target:\n        return 1\n    return min(1+min_Ops(arr,k,target),min_Ops(arr,k-1,target))\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    season={'January':'winter','February':'winter','March':'winter','April':'spring','May':'spring','June':'spring','July':'summer','August':'summer','September':'summer','October':'autumn','November':'autumn','December':'winter'}\n    return(season.get(month))\n\ndef month_season(month,day):\n    season={'January':'winter','February':'winter','March':'winter','April':'spring','May':'spring','June':'spring','July':'summer','August':'summer','September':'summer','October':'autumn','November':'autumn','December':'winter'}\n    if season.get(month)=='winter':\n        return season.get(month)\n    elif season.get(month)=='summer':\n        return season.get(month)\n    elif season.get(month)=='autumn':\n        return season.get(month)\n    elif season.get(month)=='winter':\n        return season.get(month)\n    else:\n        print('Wrong input!')\n        \ndef month_season(month,day):\n    season={'January':'winter','February':'winter','March':'winter','April':'spring','May':'spring','June':'spring','July':'summer','August':'summer','September':'summer','October':'autumn','November':'autumn','December':'winter'}\n    if month in season:\n        if day in range(1,32):\n            if season[month]=='winter':\n                return season[month]\n            elif season[month]=='spring':\n                return season[month]\n            elif season[month]=='summer':\n                return season[month]\n            elif season[month]=='autumn':\n                return season[month]\n            else:\n                return season[month]\n        else:\n            return 'Wrong input!'\n    else:\n        return 'Wrong input!'\n\ndef month_season(month,day):\n    if month in {'January','February','March'}:\n        if day in range(1,31):\n            return 'winter'\n        else:\n            return 'Wrong input!'\n    elif month in {'April','May','June'}:\n        if day in", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month in ('January','February','March'):\n        if day in (1, 11, 20):\n            return 'winter'\n        else:\n            return 'summer'\n    elif month in ('April', 'May', 'June'):\n        return 'summer'\n    elif month in ('July', 'August', 'September'):\n        if day in (1, 10, 21):\n            return 'summer'\n        else:\n            return 'winter'\n    elif month in ('October', 'November', 'December'):\n        return 'winter'\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n\tif month == 'January':\n\t\tif day <= 10:\n\t\t\treturn 'winter'\n\t\telif day > 10 and day <= 20:\n\t\t\treturn 'spring'\n\t\telse:\n\t\t\treturn 'summer'\n\telif month == 'February':\n\t\tif day <= 10:\n\t\t\treturn 'winter'\n\t\telif day > 10 and day <= 20:\n\t\t\treturn 'spring'\n\t\telif day > 20 and day <= 29:\n\t\t\treturn 'summer'\n\t\telse:\n\t\t\treturn 'fall'\n\telif month == 'March':\n\t\tif day <= 10:\n\t\t\treturn 'winter'\n\t\telif day > 10 and day <= 20:\n\t\t\treturn 'spring'\n\t\telif day > 20 and day <= 29:\n\t\t\treturn 'summer'\n\t\telse:\n\t\t\treturn 'fall'\n\telif month == 'April':\n\t\tif day <= 10:\n\t\t\treturn 'winter'\n\t\telif day > 10 and day <= 20:\n\t\t\treturn 'spring'\n\t\telif day > 20 and day <= 29:\n\t\t\treturn 'summer'\n\t\telse:\n\t\t\treturn 'fall'\n\telif month == 'May':\n\t\tif day <= 10:\n\t\t\treturn 'winter'\n\t\telif day > 10 and day <= 20:\n\t\t\treturn 'spring'\n\t\telif day > 20 and day <= 29:\n\t\t\treturn 'summer'\n\t\telif day > 29 and day <= 31:\n\t\t\treturn 'fall'\n\t\telse:\n\t\t\treturn 'winter'\n\telif month == 'June':\n\t\tif day <= 10:\n\t\t\treturn 'winter'\n\t\telif day > 10 and day <= 20:\n\t\t\treturn 'spring'\n\t\telif day > 20 and day <= 29:\n\t\t\treturn 'summer'\n\t\telif day > 29 and day <= 31:\n\t\t\treturn 'fall'", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    \"\"\"\n    Print the season for the given month and day.\n    \"\"\"\n\n    if month.lower() in ['january', 'february', 'march', 'april']:\n        season = 'winter'\n    elif month.lower() in ['may', 'june', 'july', 'august']:\n        season = 'summer'\n    elif month.lower() in ['september', 'october', 'november', 'december']:\n        season = 'winter'\n    else:\n        raise ValueError('Invalid month')\n\n    return season\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\n#Write your code here.\ndef month_season(month,day):\n    if month == 'January':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'February':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'March':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'April':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'May':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'June':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'July':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'August':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'September':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'October':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'November':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    elif month == 'December':\n        if day < 20:\n            return ('winter')\n        else:\n            return ('summer')\n    else:\n        print('invalid month or day')\n        \n#Test", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month == \"January\":\n        if day <=13:\n            return \"winter\"\n        else:\n            return \"spring\"\n    elif month == \"February\":\n        if day <=20:\n            return \"winter\"\n        else:\n            return \"spring\"\n    elif month == \"March\":\n        return \"spring\"\n    elif month == \"April\":\n        if day <=20:\n            return \"spring\"\n        else:\n            return \"summer\"\n    elif month == \"May\":\n        if day <=17:\n            return \"summer\"\n        else:\n            return \"fall\"\n    elif month == \"June\":\n        if day <=19:\n            return \"summer\"\n        else:\n            return \"fall\"\n    elif month == \"July\":\n        return \"fall\"\n    elif month == \"August\":\n        if day <=21:\n            return \"fall\"\n        else:\n            return \"winter\"\n    elif month == \"September\":\n        if day <=23:\n            return \"winter\"\n        else:\n            return \"winter\"\n    elif month == \"October\":\n        if day <=22:\n            return \"winter\"\n        else:\n            return \"spring\"\n    elif month == \"November\":\n        if day <=18:\n            return \"spring\"\n        else:\n            return \"winter\"\n    elif month == \"December\":\n        if day <=19:\n            return \"winter\"\n        else:\n            return \"spring\"\n    else:\n        return \"invalid month\"", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month.lower() in ('january','jan'):\n        if day >=1 and day <=31:\n            return 'winter'\n        elif day >31:\n            return 'summer'\n    elif month.lower() in ('february','feb'):\n        if day>=1 and day <=28:\n            return 'winter'\n        elif day>28:\n            return 'summer'\n    elif month.lower() in ('march','mar'):\n        if day >=1 and day <=31:\n            return 'summer'\n        elif day>31:\n            return 'winter'\n    elif month.lower() in ('april','apr'):\n        if day >=1 and day <=30:\n            return 'summer'\n        elif day>30:\n            return 'winter'\n    elif month.lower() in ('may','may'):\n        if day >=1 and day <=31:\n            return 'summer'\n        elif day>31:\n            return 'winter'\n    elif month.lower() in ('june','jun'):\n        if day >=1 and day <=30:\n            return 'summer'\n        elif day>30:\n            return 'winter'\n    elif month.lower() in ('july','jul'):\n        if day >=1 and day <=31:\n            return 'summer'\n        elif day>31:\n            return 'winter'\n    elif month.lower() in ('august','aug'):\n        if day >=1 and day <=31:\n            return 'summer'\n        elif day>31:\n            return 'winter'\n    elif month.lower() in ('september','sep'):\n        if day >=1 and day <=30:\n            return 'summer'\n        elif day>30:\n            return 'winter'\n    elif month.lower() in ('october','oct'):\n        if day >=1 and day <=31:\n            return 'summer'\n        elif day>31:\n            return 'winter'\n    elif month.lower() in ('november','nov'):\n        if day >=1 and day <=30:\n            return 'summer'\n        elif day>30:\n            return 'winter'\n    elif month.lower() in ('de", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month == 'January' or month == 'February':\n        if day <= 22:\n            return 'winter'\n        elif day <= 28:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'March' or month == 'April':\n        if day <= 20:\n            return 'spring'\n        elif day <= 29:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month == 'May' or month == 'June':\n        if day <= 21:\n            return 'summer'\n        elif day <= 30:\n            return 'summer'\n        else:\n            return 'autumn'\n    elif month == 'July' or month == 'August':\n        if day <= 22:\n            return 'autumn'\n        elif day <= 31:\n            return 'autumn'\n        else:\n            return 'winter'\n    elif month == 'September' or month == 'October':\n        if day <= 23:\n            return 'winter'\n        elif day <= 31:\n            return 'winter'\n        else:\n            return 'winter'\n    else:\n        return 'winter'\n\n\ndef test():\n    assert month_season('January',4)==('winter')\n    assert month_season('February',4)==('winter')\n    assert month_season('March',4)==('spring')\n    assert month_season('April',4)==('spring')\n    assert month_season('May',4)==('summer')\n    assert month_season('June',4)==('summer')\n    assert month_season('July',4)==('autumn')\n    assert month_season('August',4)==('autumn')\n    assert month_season('September',4)==('winter')\n    assert month_season('October',4)==('winter')\n    assert month_season('November',4)==('winter')\n    assert month_season('December',4)==('winter')\ntest()", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    if month == 'January' and day >= 20:\n        return 'summer'\n    elif month == 'February' and day >= 20:\n        return 'summer'\n    elif month == 'March' and day <= 20:\n        return 'spring'\n    elif month == 'April' and day <= 20:\n        return 'spring'\n    elif month == 'May' and day >= 20:\n        return 'summer'\n    elif month == 'June' and day >= 20:\n        return 'summer'\n    elif month == 'July' and day >= 20:\n        return 'summer'\n    elif month == 'August' and day >= 20:\n        return 'summer'\n    elif month == 'September' and day <= 20:\n        return 'fall'\n    elif month == 'October' and day <= 20:\n        return 'fall'\n    elif month == 'November' and day >= 20:\n        return 'winter'\n    elif month == 'December' and day >= 20:\n        return 'winter'\n\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = n // a\n    y = n % b\n    return 'x = ', x, ', y = ', y\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = 0\n    y = 0\n    if n % a == 0:\n        x = n / a\n    else:\n        x = (n / a) + 1\n    if n % b == 0:\n        y = n / b\n    else:\n        y = (n / b) + 1\n    return f\"x = {x}, y = {y}\"", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = (n - b) // a\n    y = n % a\n    return (f'x = {x}, y = {y}')\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = n - b * a\n    return ('x = ', x, ', y = ', a)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution2(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution3(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution4(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution5(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution6(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution7(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution8(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution9(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution10(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution11(a, b, n):\n    return \"x = %s, y = %s\" % (a*n + b, -a*n/b)\n\ndef solution12(a, b, n):\n    return \"x = %s, y = %s", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    if a * n % b != 0:\n        print('No solution')\n        return\n\n    x = (a * n) // b\n    y = n - (a * x)\n\n    print('x = ', x, ', y = ', y)\n    return (x, y)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nfrom math import sqrt\n\n\ndef solution(a, b, n):\n    # a and b are positive numbers\n    # n is a non-negative number\n    if n == 0:\n        return ('x = ', a, ', y = ', b)\n    elif a == 0:\n        x = n // b\n        y = 0\n    elif b == 0:\n        x = 0\n        y = n // a\n    else:\n        x = n // (a * a - 4 * b * c)\n        y = ((a * a - 4 * b * c) * x - n) / (2 * a)\n    return ('x = ', x, ', y = ', y)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    result = (int(n / b), int(n % b))\n    if result[0] * a + result[1] * b == n:\n        return 'x = ', result[0], ', y = ', result[1]\n    return \"No solution exists\"\n\n\nsolution(2, 3, 7)", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    result = []\n    for x in range(n - a*b+1):\n        for y in range(a*x, a*x+b-1):\n            result.append(\"x = %s, y = %s\" % (x, y))\n    return ', '.join(result)", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x, y = a*b, n - a*b\n    return (\"x = \", x, \", y = \", y)\n\n\n#10. "], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(a,b):\n\treturn [x for x in a if x not in b]\n\n# test", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(lst1, lst2):\n    for i in lst2:\n        lst1.remove(i)\n    return lst1\n\ndef test():\n    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(lst_one, lst_two):\n    return list(set(lst_one) - set(lst_two))\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(l1,l2):\n    return list(set(l1) - set(l2))\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    \"\"\"\n    Given a list and a set of elements, remove all elements from list1 that are in list2.\n    \"\"\"\n    return [x for x in list1 if x not in list2]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(L1,L2):\n    result = []\n    for x in L1:\n        if x not in L2:\n            result.append(x)\n    return result", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(lst1,lst2):\n    return list(filter(lambda x: x not in lst2, lst1))", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(lst1,lst2):\n    for item in lst1:\n        if item in lst2:\n            lst1.remove(item)\n    return lst1\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(lst1,lst2):\n    lst=[]\n    for i in lst1:\n        if i not in lst2:\n            lst.append(i)\n    return lst\n\n\n# +\ndef merge_lists(lst1,lst2):\n    l=[]\n    for i in lst1:\n        l.append(i)\n    for i in lst2:\n        l.append(i)\n    return l\n\n\nlst1=[1,2,3,4,5]\nlst2=[6,7,8,9,10]\nmerge_lists(lst1,lst2)\n\n\n# +\ndef add_to_list(lst,value):\n    for i in lst:\n        lst.append(value)\n    return lst\n\n\nlst=[1,2,3,4,5]\nadd_to_list(lst,6)\n# -\n\n# 6. Write a function that takes a string and returns the string with all characters in lowercase.", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(L1, L2):\n    return list(set(L1) - set(L2))\n\n\ndef test_remove_elements():\n    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    return sum(range(1, n+1)) + sum(range(n-2, 0, -2)) + sum(range(n-4, 0, -4)) + sum(range(n-6, 0, -6)) + sum(range(n-8, 0, -8))\n\ndef sum_series(n):\n    total = 0\n    for x in range(1, n + 1):\n        total += x\n    return total\n\ndef sum_series(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 1)\n\ndef sum_series(n):\n    return (n * (n + 1)) / 2\n\ndef sum_series(n):\n    if n == 0 or n == 1:\n        return n\n    return n + sum_series(n - 1)\n\ndef sum_series(n):\n    return (n * (n + 1)) / 2\n\ndef sum_series(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 1)\n\ndef sum_series(n):\n    if n == 0:\n        return 0\n    else:\n        return sum_series(n-1) + n\n\ndef sum_series(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 1)\n\ndef sum_series(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-1)\n\n\ndef sum_series(n):\n    if n == 0:\n        return 0\n    return n + sum_series(n-1)\n\ndef sum_series(n):\n    return sum(range(1, n+1)) + sum(range(n-1, 0, -1))\n\ndef sum_series(n):\n    return sum(range(1, n+1)) + sum", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    return (n+n-2)+(n-4)+(n-6)+(n-8)+(n-10)\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(x):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    return (n*(n+1))/2\n\n#assert sum_series(1)==1\n#assert sum_series(2)==3\n#assert sum_series(3)==5\n#assert sum_series(4)==8\n\n#print sum_series(1)\n#print sum_series(2)\n#print sum_series(3)\n#print sum_series(4)\n#print sum_series(5)\n#print sum_series(6)", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    \"\"\"\n    Return sum of series\n    \"\"\"\n    sum = 0\n    for x in range(n):\n        sum += n - x\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    \"\"\"\n    Calculates the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0)\n    \"\"\"\n    series = 0\n    x = n\n    while x >= 0:\n        series += x\n        x -= 2\n    return series\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    s = 0\n    for i in range(n+1):\n        s = s+n-i\n        if n-i<=0: break\n    return s", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    \"\"\"\n    INPUT: n\n    OUTPUT: sum of series\n    \"\"\"\n    #series = 1 + 3 + 5 + ... + 2n - n\n    sum_series = 0\n    for i in range(n, 1, -2):\n        sum_series += i\n    return sum_series", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    def sum_series_2(n,x):\n        if n-x < 0:\n            return 0\n        elif n-x == 0:\n            return n\n        else:\n            return n + sum_series_2(n,x-1)\n\n    return sum_series_2(n, n)", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(x):\n    return sum([i for i in range(1,x+1)]) - (x + 1) * (sum([i for i in range(1,x+1)]))\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\nimport math\n\ndef area_polygon(side,num_sides):\n    \"\"\"\n    Returns the area of a regular polygon, which is (num_sides x side^2)/2\n\n    >>> area_polygon(4, 20)\n    400.00000000000006\n    >>> area_polygon(10, 4)\n    250.00000000000006\n    >>> area_polygon(20, 3)\n    400.00000000000006\n    >>> area_polygon(100, 2)\n    1000.00000000000006\n    >>> area_polygon(100, 100)\n    5000000.0\n    >>> area_polygon(300, 1)\n    300.0\n    >>> area_polygon(4, 3)\n    12.5\n    >>> area_polygon(2, 4)\n    5.0\n    >>> area_polygon(2, 3)\n    6.666666666666667\n    >>> area_polygon(100, 10)\n    10000.0\n    >>> area_polygon(100, 1)\n    100.0\n    >>> area_polygon(100, 3)\n    333.3333333333333\n    \"\"\"\n\n    if num_sides < 3:\n        raise ValueError('The number of sides should be greater than 2')\n\n    area = (num_sides * math.pow(side,2))/2\n\n    return area", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n, s):\n    return n*s*s/(4*math.tan(math.radians(45)/n))\n\ndef test_area_polygon():\n    assert area_polygon(4,20)==400.00000000000006\n    assert area_polygon(6,3)==108.33333333333334\n    assert area_polygon(8,100)==8100.00000000000004\n    assert area_polygon(10,10)==98.333333333333331\n\ndef test_area_polygon_bad_input():\n    assert area_polygon(3,3)==3.0\n    assert area_polygon(0,20)==0.0\n    assert area_polygon(-1,20)==0.0\n\ndef test_area_polygon_bad_input_2():\n    assert area_polygon(4,-20)==0.0\n    assert area_polygon(4,0)==0.0\n    assert area_polygon(4,-0.00000000000000001)==0.0\n    assert area_polygon(4,0.00000000000000001)==0.0\n\ndef test_area_polygon_bad_input_3():\n    assert area_polygon(0,20)==0.0\n    assert area_polygon(-1,20)==0.0\n    assert area_polygon(4,0)==0.0\n\ndef test_area_polygon_bad_input_4():\n    assert area_polygon(-2,20)==0.0\n    assert area_polygon(-2,-20)==0.0\n\ndef test_area_polygon_bad_input_5():\n    assert area_polygon(3,-20)==0.0\n    assert area_polygon(3,0)==0.0", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,r):\n    return r**2*n/2.0\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n, r):\n    \"compute the area of a regular polygon\"\n    return n*r*r/2.0\n\ndef test_area_polygon():\n    print('Testing area_polygon')\n    assert 400.00000000000006 == area_polygon(4,20)\n    assert 0.0 == area_polygon(0,20)\n    assert 0.0 == area_polygon(20,0)\n    print('OK!')\n\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(num_sides,side_len):\n\t\"\"\"\n\tHelper function to calculate area of a regular polygon\n\t\"\"\"\n\t#Calculate the base area\n\tarea = 0.5 * num_sides * (side_len**2)\n\t#Calculate the area of each triangle\n\tfor i in range(0,num_sides):\n\t\tarea += 0.5 * (side_len**2) * (num_sides-i) / (num_sides-1.0)\n\t#Return the area\n\treturn area\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(num,side):\n    pi=3.14\n    result=side**2*num/4\n    return result\n\ndef print_area_polygon(num,side):\n    print(\"Area of a regular polygon with {} sides and {} length per side is {:.2f}\".format(num,side,area_polygon(num,side)))\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\n# 1. \u5b9a\u4e49\u51fd\u6570\ndef area_polygon(r,n):\n    \"\"\"\n    :param r: \u5706\u5468\u534a\u5f84\n    :param n: \u534a\u5f84n\u7684\u6b63\u6574\u6570\n    :return: \u534a\u5f84n\u7684\u6b63\u6574\u6570\u5bf9\u5e94\u7684\u9762\u79ef\n    \"\"\"\n    # 2. \u8ba1\u7b97\u9762\u79ef\n    return 1/2*r**2*n*(n-2)\n\n# 3. \u6d4b\u8bd5\u7a0b\u5e8f\nimport math\nr = 4\nn = 20", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(r, n):\n    \"\"\"\n    Returns the area of a regular polygon.\n    r: int - the radius of the circle\n    n: int - the number of sides\n    \"\"\"\n    return 0.5*r*(r+n-3)*(r+n-2)\n\n#Below is an example usage:\n\nimport math\n\ndef area_polygon(r, n):\n    \"\"\"\n    Returns the area of a regular polygon.\n    r: int - the radius of the circle\n    n: int - the number of sides\n    \"\"\"\n    return 0.5*r*(r+n-3)*(r+n-2)\n\n# Enter the radius\nr = 4\n\n# Enter the number of sides\nn = 20\n\n# Calling the function", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    \"\"\"\n    Calculating the area of a regular polygon\n    \"\"\"\n    return 0.5*n*(s**2)/(n-2)\n\ndef main():\n    # Do not modify the code above this line\n    tests = [\n        (4, 20),\n        (6, 33.4),\n        (8, 12),\n        (12, 7.5)\n    ]\n    for i, test in enumerate(tests, 1):\n        a, b = test\n        print(\"Test {}: {} -- {}\".format(i, a, area_polygon(a, b)))\n\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(sides,radius):\n    area=0\n    for i in range(0,sides):\n        angle=(360/sides)*i\n        area=area+math.sin(math.radians(angle))*radius\n    return area*radius*2\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    \"\"\"\n    Solve a mathematical problem using functional programming\n    \"\"\"\n    def divisors(n):\n        for i in range(1,n+1):\n            if n%i==0:\n                yield i\n    return sum(divisors(a)) == sum(divisors(b))\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    if (a==b):\n        return True\n    if (a>b):\n        temp = a\n        a = b\n        b = temp\n    while a>b:\n        if a%b == 0:\n            if(b%a == 0):\n                return True\n            else:\n                return False\n        else:\n            a -= 1\n            if a==b:\n                return False\n    return False", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(num1,num2):\n    if num1==num2:\n        return True\n    #print(num1,num2)\n    for i in range(1,num1+1):\n        if num1%i==0 and num2%i==0:\n            return True\n    return False\n\n\ndef areEquivalent2(num1,num2):\n    if num1==num2:\n        return True\n    divisors1 = []\n    divisors2 = []\n\n    for i in range(1,num1+1):\n        if num1%i==0:\n            divisors1.append(i)\n\n    for i in range(1,num2+1):\n        if num2%i==0:\n            divisors2.append(i)\n\n    if divisors1 == divisors2:\n        return True\n\n    return False\n\n\ndef areEquivalent3(num1,num2):\n    if num1==num2:\n        return True\n    #print(num1,num2)\n    sum_of_divisors = 0\n    for i in range(1,num1+1):\n        if num1%i==0:\n            sum_of_divisors += i\n    for i in range(1,num2+1):\n        if num2%i==0:\n            sum_of_divisors += i\n    if sum_of_divisors == num1 and sum_of_divisors == num2:\n        return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    list1 = getDivisors(a)\n    list2 = getDivisors(b)\n    if list1 != list2:\n        return False\n    else:\n        return True\n\ndef getDivisors(a):\n    return [i for i in range(1,a+1) if a%i == 0]", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    div_sum = sum(divisorSum(a))\n    div_sum2 = sum(divisorSum(b))\n    if div_sum == div_sum2:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    \"\"\"\n    Takes two integers as arguments and return True or False\n    \"\"\"\n    # Write your code here\n    return False\n\n\n# Above is the code for the solution. Please write your own implementation here.\ndef areEquivalent(a,b):\n    sum_of_div = 0\n    for i in range(1,a+1):\n        if a%i == 0:\n            sum_of_div += i\n    for i in range(1,b+1):\n        if b%i == 0:\n            sum_of_div += i\n    return sum_of_div == a and sum_of_div == b", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    if(a==b):\n        return True\n    elif(a>b):\n        return areEquivalent(b-a,a)\n    else:\n        return areEquivalent(a-b,b)", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\nfrom math import sqrt\n\n\ndef areEquivalent(a,b):\n\t\"\"\"\n\tWrite a python function to check whether the sum of divisors are same or not.\n\tassert areEquivalent(36,57) == False\n\t\"\"\"\n\tif a==b:\n\t\treturn True\n\tif (a*a == b):\n\t\treturn True\n\tif (b*b == a):\n\t\treturn True\n\treturn False\n\n\n\ndef main():\n\tprint(areEquivalent(36,57))\n\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1,num2):\n    num1sum = divisorSum(num1)\n    num2sum = divisorSum(num2)\n    return num1sum == num2sum\n    \ndef divisorSum(num):\n    divisors = [num]\n    for div in range(1,num):\n        if num%div == 0:\n            divisors.append(div)\n    return sum(divisors)\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n\tL=[]\n\tfor i in range(1,min(a,b)):\n\t\tif(a%i==0 and b%i==0):\n\t\t\tL.append(i)\n\tif(sum(L)==a and sum(L)==b):\n\t\treturn True\n\treturn False\n\t"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    return sum(map(lambda x: string.count(x), 'abcdefghijklmnopqrstuvwxyz'))\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(text: str) -> int:\n    if len(text) <= 0:\n        return 0\n    count = 0\n    for i in range(len(text)):\n        if text[i].islower() and text[i+1].isupper():\n            count += 1\n        elif text[i].isupper() and text[i+1].islower():\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    char_counter = dict.fromkeys(string, 0)\n    for char in char_counter:\n        if char.isupper():\n            char_counter[char] += 1\n    return len(char_counter)\n\n# print(count_char_position(\"xamkj\"))\n# print(count_char_position(\"abcd\"))\n# print(count_char_position(\"xbcefg\"))\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    count = 0\n    for index in range(len(string)):\n        if string[index].lower() == string[index].upper():\n            count += 1\n    return count\n\n# x = count_char_position(\"xbcefg\")\n# print(x)\n\ndef count_char_position2(string):\n    count = 0\n    for index in range(len(string)):\n        if string[index].isupper() == string[index].islower():\n            count += 1\n    return count\n\n# x = count_char_position2(\"xbcefg\")\n# print(x)\n\n\n# count_char_position3 = lambda string: len([i for i in string if string[i].islower() == string[i].isupper()])\n\n# print(count_char_position3(\"xbcefg\"))\n\ndef count_char_position3(string):\n    count = 0\n    for index in range(len(string)):\n        count += string[index].islower() == string[index].isupper()\n    return count\n\n# x = count_char_position3(\"xbcefg\")\n# print(x)\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(input_str):\n    \"\"\"\n    This function takes in a string as input and counts the number of characters of each position at which two characters are the same in lower and uppercase letters.\n    \"\"\"\n    char_count = 0\n    for char in input_str:\n        if char.isupper():\n            if char.islower():\n                char_count += 1\n    return char_count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    return sum(1 for i in range(len(string)) if string[i] in 'aeiouAEIOU')\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n    for char in s:\n        if char.isupper():\n            result += 1\n    return result\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string: str) -> int:\n    alphabet_dict = {}\n    for char in string:\n        if char.islower():\n            if char in alphabet_dict.keys():\n                alphabet_dict[char] = alphabet_dict[char] + 1\n            else:\n                alphabet_dict[char] = 1\n        else:\n            if char.isupper():\n                if char in alphabet_dict.keys():\n                    alphabet_dict[char] = alphabet_dict[char] + 1\n                else:\n                    alphabet_dict[char] = 1\n\n    count = 0\n    for char in alphabet_dict.keys():\n        if alphabet_dict[char] > 1:\n            count = count + 1\n\n    return count", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(str):\n    count = 0\n    for i in range(0, len(str)):\n        if str[i].isalpha():\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    \"\"\" Counts number of characters at the same position in a string.\n\n    Args:\n        string: a string to count characters at the same position.\n    Returns:\n        number of characters at the same position.\n    \"\"\"\n\n    # set up a set with all the english letters (a-z)\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n\n    # set up an empty dictionary for storing letters at the same position\n    dictionary = {}\n\n    # loop through the given string\n    for i in range(len(string)):\n        # check if the current character is a letter\n        if string[i].isalpha():\n            # update the count in the dictionary\n            dictionary[string[i]] = dictionary.get(string[i], 0) + 1\n\n    # return the sum of all the counts in the dictionary\n    return sum(dictionary.values())\n\n\n# Tests"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,x):\n    num=0\n    count=0\n    for a in arr:\n        for b in arr:\n            if a^b%2==0:\n                num=a^b\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,xor):\n\treturn (arr.count(xor)&1)\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,num):\n    return len([a,b] for a,b in zip(arr[0::2], arr[1::2]) if (a+b) % 2 == 0)\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,num):\n    return len([i for i in arr if ((i & (i - 1)) == 0)])\n\ndef test():\n    assert find_even_Pair([5,4,7,2,1],5) == 4\n    assert find_even_Pair([5,4,7,2,1],2) == 0\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,n):\n    # Write your code here\n    list_ = []\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] ^ arr[j] == 0:\n                list_.append([i,j])\n    for k in range(len(list_)):\n        if len(list_[k]) == 0:\n            return -1\n    return len(list_)\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(a,b):\n    ans = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i] ^ a[j] == b:\n                ans += 1\n    return ans\n\n# print(find_even_Pair([5,4,7,2,1],5))", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(array, num):\n    arr_size = len(array)\n    return sum((array[i] ^ array[i+1]) for i in range(arr_size-1))\n\n\ndef test_solution(obj):\n    print('test case 1:',obj.find_even_Pair([5,4,7,2,1],5))\n    print('test case 2:',obj.find_even_Pair([2,2,2,2,3],3))\n\ntest_solution(Solution())", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr, val):\n    dic = {}\n    for i in range(len(arr)):\n        if val in dic:\n            dic[val] += 1\n        else:\n            dic[val] = 1\n    for k,v in dic.items():\n        if v % 2 == 0:\n            return v\n    return 0", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,x):\n    return len([x for x in arr if arr.count(x ^ x) % 2 == 0])\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,xor):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] ^ arr[j] == xor:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    \"\"\"\n    Time: O(log(n))\n    Space: O(1)\n    \"\"\"\n    return 1 << (n - 1).bit_length()\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    result = 1\n    while (result < n):\n        result = 2 * result\n    return result\n\n\ndef test_next_Power_Of_2():\n    assert next_Power_Of_2(0) == 1\n    assert next_Power_Of_2(1) == 1\n    assert next_Power_Of_2(2) == 2\n    assert next_Power_Of_2(3) == 2\n    assert next_Power_Of_2(4) == 4\n    assert next_Power_Of_2(5) == 4\n    assert next_Power_Of_2(6) == 8\n    assert next_Power_Of_2(7) == 8\n    assert next_Power_Of_2(8) == 8\n    assert next_Power_Of_2(9) == 16\n    assert next_Power_Of_2(10) == 16\n    assert next_Power_Of_2(11) == 16\n    assert next_Power_Of_2(12) == 32\n    assert next_Power_Of_2(13) == 32\n    assert next_Power_Of_2(14) == 32\n    assert next_Power_Of_2(15) == 32\n    assert next_Power_Of_2(16) == 32\n    assert next_Power_Of_2(17) == 32\n    assert next_Power_Of_2(18) == 64\n    assert next_Power_Of_2(19) == 64\n    assert next_Power_Of_2(20) == 64\n    assert next_Power_Of_2(21) == 64\n    assert next_Power_Of_2(22) == 64\n    assert next_Power_Of_2(23) == 64\n    assert next_Power_Of_2(24) == 64\n    assert next_Power_Of_2(25) == 64\n    assert next_", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        while n > 1:\n            n >>= 1\n        return n << 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n < 1:\n        raise ValueError(\"n should be positive integer.\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    count = 0\n    while n > 1:\n        count += 1\n        n >>= 1\n    return 2 ** count\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(num):\n\n    return 2**(num-1).bit_length()\n\n\ndef test_next_Power_Of_2():\n    assert next_Power_Of_2(0) == 1\n    assert next_Power_Of_2(1) == 2\n    assert next_Power_Of_2(2) == 2\n    assert next_Power_Of_2(3) == 4\n    assert next_Power_Of_2(4) == 4\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2**(next_Power_Of_2(n-1).bit_length())\n\ndef test_next_Power_Of_2():\n    assert next_Power_Of_2(0) == 1\n    assert next_Power_Of_2(1) == 1\n    assert next_Power_Of_2(2) == 2\n    assert next_Power_Of_2(5) == 8\n    assert next_Power_Of_2(1023) == 1024\n    assert next_Power_Of_2(16383) == 32768\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    #if n is already a power of 2\n    if (n & (n - 1)) == 0:\n        return n\n    return 1 << int(math.ceil(math.log(n) / math.log(2)))\n\ndef test_next_Power_Of_2():\n    assert next_Power_Of_2(0) == 1\n    assert next_Power_Of_2(1) == 1\n    assert next_Power_Of_2(2) == 2\n    assert next_Power_Of_2(3) == 4\n    assert next_Power_Of_2(4) == 4\n    assert next_Power_Of_2(5) == 8\n    assert next_Power_Of_2(6) == 8\n    assert next_Power_Of_2(7) == 8\n    assert next_Power_Of_2(8) == 16\n    assert next_Power_Of_2(9) == 16\n    assert next_Power_Of_2(10) == 16\n    assert next_Power_Of_2(11) == 16\n    assert next_Power_Of_2(12) == 32\n    assert next_Power_Of_2(13) == 32\n    assert next_Power_Of_2(14) == 32\n    assert next_Power_Of_2(15) == 32", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** int(math.ceil(math.log(n, 2)))\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return int(pow(2, int(log(n, 2))))\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    elif n==2:\n        return 2\n    else:\n        return 2 ** ((n-1).bit_length())\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,n):\n    count = 0\n    for i in arr:\n        if i == n:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(nums, n):\n    for num in nums:\n        if num == n:\n            return 1\n    return 0\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr,num):\n    # Write your code here\n    return arr.count(num)\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n    \"\"\"\n    Count the number of occurrences of num in arr\n    \"\"\"\n\n    # return the number of occurrences\n    return len([x for x in arr if x == num])\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(array, number):\n    # Enter your code here\n    return array.count(number)\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\nfrom collections import Counter\ndef frequency(arr, n):\n    # O(N) time | O(1) space\n    counter = Counter(arr)\n    return counter[n]\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\nfrom collections import Counter\ndef frequency(arr,num):\n    return Counter(arr).get(num,0)\n\n#assert frequency([1,2,3],4) == 0", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, val):\n    return sum(x == val for x in arr)\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(nums, target):\n\t# return the number of times the target appears in the array\n\treturn nums.count(target)\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\n# An array that is sorted in ascending order is called a \u201cSorted Array\u201d.\n# A binary search is performed.\n# If the element is not found, then its position would be -1.\n# The frequency of a number is the number of occurrences of that number.\n\ndef frequency(arr, num):\n    start = 0\n    end = len(arr) - 1\n    mid = 0\n\n    while start <= end:\n        mid = start + (end - start)//2\n        if arr[mid] == num:\n            return mid + 1\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    \"\"\"Calculate nth pell number\"\"\"\n    assert n > 0\n    result = 1\n    for i in range(n):\n        result *= 2\n        result += 1\n    return result\n\n# Tests", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    previous = 1\n    pell = 2\n    while pell < n:\n        yield pell\n        previous, pell = pell, (previous**2 - 1) // 2\n    yield previous\n\ndef get_pell_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    previous = 1\n    pell = 2\n    while pell < n:\n        yield pell\n        previous, pell = pell, (previous**2 - 1) // 2\n    yield previous\n\ndef get_pell_iterative(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    previous = 1\n    pell = 2\n    while pell < n:\n        yield pell\n        previous, pell = pell, (previous**2 - 1) // 2\n    yield previous\n\ndef get_pell_series(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    pell = 2\n    while pell < n:\n        yield pell\n        pell = (pell**2 - 1) // 2\n    yield pell\n\ndef get_pell_factor(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    factors = []\n    while n > 1:\n        factor = 1\n        while n % factor == 0:\n            factor *= 2\n            if factor >= n:\n                break\n        factors.append(factor)\n        n //= factor\n    return factors\n\ndef pell_factors(n):\n    factors = []\n    while n > 1:\n        factor = 1\n        while n % factor == 0:\n            factor *= 2\n            if factor >= n:\n                break\n        factors.append(factor)\n        n //= factor\n    return factors\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n:int) -> int:\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_pell(n-2) * 2 + get_pell(n-1)\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 0:\n        return 1\n    else:\n        return 3*n-1\n\n# This is the correct test case for this method", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"Calculates the nth pell number.\"\"\"\n    if n == 1:\n        return 0\n    a = 1\n    b = 0\n    for i in range(n-1):\n        a, b = b, a + b\n    return a\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\nfrom typing import List\n\n\ndef get_pell(n: int) -> int:\n    if n < 1:\n        raise ValueError('Invalid pell number')\n\n    if n == 1:\n        return 1\n\n    a: int = 1\n    b: int = 2\n    prev: List[int] = []\n\n    while n > 0:\n        prev.append(a)\n        prev.append(b)\n        a, b = (b, a + b) % 10 ** 9, a\n\n    return int(''.join(map(str, prev)))", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    \"\"\"\n    Returns nth pell number.\n    \"\"\"\n    # This function takes a positive integer and returns the nth pell number.\n\n    # Note: You can use math.factorial in Python, but the code would be more\n    # concise and clear if you wrote your own version.\n\n    if n < 2:\n        return n\n\n    x = n\n    y = 2\n    while y * y <= x:\n        if x % y == 0:\n            x = x // y\n        else:\n            y = y + 1\n\n    return y\n\n\ndef test_get_pell():\n    \"\"\"\n    Tests function get_pell.\n    \"\"\"\n    assert get_pell(1) == 1\n    assert get_pell(2) == 3\n    assert get_pell(3) == 5\n    assert get_pell(4) == 12\n    assert get_pell(5) == 29\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    return fibonacci_pell_sequence(n)[n]\n\n\ndef fibonacci_pell_sequence(n):\n    \"\"\"\n    Fibonacci Pell Sequence for n\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 2]\n    else:\n        return fibonacci_pell_sequence(n - 1) + [2, fibonacci_pell_sequence(n - 1)[1]]\n\n\ndef get_pell_sequence(n):\n    return fibonacci_pell_sequence(n)\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    p = 1\n    q = 2\n    while n > 1:\n        p, q = q, (p*q - 1)//2\n        n -= 1\n    return p\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    assert n >= 1\n    if n <= 2:\n        return n\n    # 1 is the only even pell number\n    if n == 4:\n        return 12\n    # otherwise\n    return get_pell(n - 1) * (n - 1)\n\ndef test_get_pell():\n    assert get_pell(1) == 1\n    assert get_pell(2) == 5\n    assert get_pell(3) == 13\n    assert get_pell(4) == 12\n    assert get_pell(5) == 29\n    assert get_pell(6) == 70\n    assert get_pell(7) == 211\n    assert get_pell(8) == 567\n    assert get_pell(9) == 1764\n    assert get_pell(10) == 5324\n    assert get_pell(11) == 16243\n    assert get_pell(12) == 49577\n    assert get_pell(13) == 149432\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(input_list,a,b):\n  total = 0\n  for i in range(a,b+1):\n    total += input_list[i]\n  return total\n\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list( arr, start, end):\n    arr_sum = 0\n    for x in range(start,end+1):\n        arr_sum += arr[x]\n    return arr_sum\n\n# print(sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10))\n\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(l, start, end):\n    return sum(l[start:end+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(li,low,high):\n    if low>high:\n        return 0\n    elif low==high:\n        return li[low]\n    else:\n        return li[low] + sum_range_list(li,low+1,high)\n\n\nsum_range_list([2,1,5,6,8,3,4,9,10,11,8,12],8,10)\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(my_list,low,high):\n    return sum( my_list[low:high+1] )\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\ndef test_sum_range_list():\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],10,10)==8\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(l,a,b):\n    return sum(l[a:b])\n    \n# #Test", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(a, start, end):\n    return sum(a[start:end])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list( numbers_list, first_index, second_index ):\n    return sum( numbers_list[first_index:second_index+1] )\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list( myList, start, end ):\n    if start == end:\n        return myList[start]\n    return myList[start] + sum_range_list( myList[start+1:end], start+1, end )\n\n\n# +\nmyList = [2,1,5,6,8,3,4,9,10,11,8,12]\nmyResult = sum_range_list( myList,8,10)"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    \"\"\"\n    Use the formula pi*n^2 to calculate the perimeter of a pentagon\n    \"\"\"\n    return 2*n*math.sqrt(3)\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    \"\"\"\n    Given a pentagon, find the perimeter\n    \"\"\"\n    return 2*n*(n-1)\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    \"\"\"\n    :param n:int\n    :return:\n    \"\"\"\n    return n*(5*n-3)/2\n\n\ndef test_perimeter_pentagon(n):\n    \"\"\"\n    :param n:int\n    :return:\n    \"\"\"\n    assert perimeter_pentagon(n) == 25\n    print(\"Success!\")\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n# The perimeter of a pentagon is (5*4)/2\ndef perimeter_pentagon(n):\n    return n*4/2\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(num):\n    return 5*num\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(side):\n    # your code here\n    return 2 * side * 5\n\n\n# +\nfrom nose.tools import assert_equal\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    \"\"\"\n    Find perimeter of a pentagon.\n    \"\"\"\n    return (2*n*np.sin(np.pi/n))", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return 2*n*3 + n*4\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return (5*n) + (2*(n-1))\n\ndef perimeter_pentagon(n):\n    return n*5 + (n-1)*2\n\ndef perimeter_pentagon(n):\n    return (n-1)*(2+n)\n\ndef perimeter_pentagon(n):\n    return n*(3+n)\n\ndef perimeter_pentagon(n):\n    return n*(3+n) + (n-1)\n\ndef perimeter_pentagon(n):\n    return n*(3+n-1)\n\ndef perimeter_pentagon(n):\n    return n*(2+n) + (n-1)\n\ndef perimeter_pentagon(n):\n    return n*(3+n) + (n-1)\n\ndef perimeter_pentagon(n):\n    return (n-1)*(2+n) + (n-1)\n\ndef perimeter_pentagon(n):\n    return n*(3+n)\n\ndef perimeter_pentagon(n):\n    return n*(3+n-1)\n\ndef perimeter_pentagon(n):\n    return (n-1)*(2+n)\n\ndef perimeter_pentagon(n):\n    return (n-1)*(3+n)\n\ndef perimeter_pentagon(n):\n    return n*(3+n)\n\ndef perimeter_pentagon(n):\n    return n*(3+n-1)\n\ndef perimeter_pentagon(n):\n    return (n-1)*(2+n)\n\ndef perimeter_pentagon(n):\n    return (n-1)*(3+n)\n\ndef perimeter_pentagon(n):\n    return n*(2+n) + (n-1)\n\ndef perimeter_pentagon(n):\n    return n*(3+n)\n\ndef perimeter_pentagon(n):\n    return n*(3+n)\n\ndef perimeter_pentagon(n):\n    return (n-1)*(2+n) + (n-1)\n\ndef perimeter_pentagon(n):", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\nfrom typing import List\n\ndef perimeter_pentagon(side_length: int) -> int:\n    \"\"\"\n    Calculate perimeter of a pentagon\n\n    Args:\n        side_length: Number of side of pentagon\n\n    Returns:\n        Perimeter\n    \"\"\"\n    return 5 * side_length\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    \"\"\"\n    This function returns the occurance of characters 'std' in the given string\n    \"\"\"\n    result = 0\n    for i in range(0, len(string)):\n        if string[i] == 's' and string[i+1] == 't' and string[i+2] == 'd' and string[i+3] == 'p' and string[i+4] == 'o' and string[i+5] == 'r':\n            result += 1\n    return result\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    return str.count(\"std\")\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for x in string:\n        if x == 'std':\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    return str.count('std')\n\n# print(count_occurance(\"letstdlenstdporstd\"))\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    \"\"\"\n    count the occurance of characters in a string\n    :param str: string\n    :return: number of occurances\n    \"\"\"\n    return str.count(\"std\")\n\n\n# def count_occurance(str):\n#     \"\"\"\n#     count the occurance of characters in a string\n#     :param str: string\n#     :return: number of occurances\n#     \"\"\"\n#     return str.count(\"std\")\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for i in string:\n        if i == \"std\":\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    return len([c for c in string if c == \"std\"])\n\ndef count_occurance_v2(string):\n    return sum(1 for c in string if c == \"std\")\n\ndef count_occurance_v3(string):\n    return sum(c == \"std\" for c in string)\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    return string.count(\"std\")\n\ndef main():\n    print(count_occurance(\"letstdlenstdporstd\"))\n\nmain()\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for char in string:\n        if char == \"s\" and string[count+1] == \"t\" and string[count+2] == \"d\":\n            count = count + 2\n        elif char == \"p\" and string[count+1] == \"o\" and string[count+2] == \"r\" and string[count+3] == \"s\":\n            count = count + 3\n    return count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\n# your code starts here\n\ndef count_occurance(input_string):\n    num_occurances = 0\n    for char in input_string:\n        if char == \"s\":\n            num_occurances += 1\n        if char == \"d\":\n            num_occurances += 1\n    return num_occurances\n\n# your code ends here\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return ''.join([c if c.isalnum() else ' ' for c in string])\n\n# or using regex module", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    s = s.replace('_','')\n    return s.replace('!','')\n\ndef my_str(s):\n    return s\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isalnum())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isalpha())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isdigit())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isdecimal())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isnumeric())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isspace())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isalnum())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isalpha())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isdigit())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isdecimal())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isnumeric())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isspace())\n\n\ndef my_str(s):\n    s = ''.join(ch for ch in s if ch.isalpha())\n    return ''.join(ch for ch in s if ch.isalnum())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isalnum())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isalpha())\n\ndef my_str(s):\n    return ''.join(ch for ch in s if ch.isdigit())\n\ndef my_str(s", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return ''.join(ch if ch.isalnum() else '' for ch in string)\n\n#2", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return \"\".join(i for i in string if i.isalnum())\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n\tnew_str=''\n\tfor char in str:\n\t\tif char.isalpha():\n\t\t\tnew_str=new_str+char\n\treturn new_str", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(x):\n    pattern = \"[^a-zA-Z0-9 ]\"\n    return re.sub(pattern, \"\", x)\n\nnWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(txt):\n    return ''.join(char for char in txt if char.isalnum())\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(word):\n    #word = word.lower()\n    pattern = re.compile(r'[^\\w\\s]')\n    return pattern.sub('', word)\n\n\n# print(remove_splchar(\" This is a beautiful day. \"))\n# print(remove_splchar(\"python  @#&^%$*program123\"))\n# print(remove_splchar(\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(word):\n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n    word = word.replace('  ', ' ')\n    word = word.replace('  ', ' ')\n    word = word.replace('  ', ' ')\n    word = word.replace('  ', ' ')\n    word = word.replace('  ', ' ')\n    return word\n\ndef remove_splchar_new(word):\n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    \"\"\"\n    return ''.join([c for c in word if c.isalpha()])\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(input):\n    s = \"\"\n    for ch in input:\n        if ch.isalpha() or ch.isdigit():\n            s+=ch\n    return s"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(kv_list):\n    \"\"\"\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    True\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4)]) == {'yellow': [1, 3], 'blue': [2, 4]}\n    True\n    \"\"\"\n    # Write your code here.\n    dict_temp = dict()\n    for k, v in kv_list:\n        if k in dict_temp:\n            dict_temp[k].append(v)\n        else:\n            dict_temp[k] = [v]\n    return dict_temp\n\n\n# +\nimport doctest\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(kvpairs):\n    pass\n\n\ndef test_group_keyvalue():\n    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(kv_list):\n    return {k: [x[0] for x in g] for k, g in groupby(kv_list, key=lambda x: x[0])}\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(keyvalue_list):\n    grouped_dict = {}\n    for key, value in keyvalue_list:\n        if key not in grouped_dict:\n            grouped_dict[key] = [value]\n        else:\n            grouped_dict[key].append(value)\n    return grouped_dict\n\n\ndef test_group_keyvalue():\n    result = group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n    expected = {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    assert result == expected\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(kvpairs):\n    res = {}\n    for k, v in kvpairs:\n        if k in res:\n            res[k].append(v)\n        else:\n            res[k] = [v]\n    return res\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\nfrom collections import defaultdict\n\ndef group_keyvalue(kv_list):\n    groups = defaultdict(list)\n    for k, v in kv_list:\n        groups[k].append(v)\n    return dict(groups)\n\ndef group_keyvalue_2(kv_list):\n    return {k: [v] for k, v in kv_list}\n\ndef group_keyvalue_3(kv_list):\n    groups = defaultdict(list)\n    for k, v in kv_list:\n        groups[k].append(v)\n    return dict(groups)\n\ndef group_keyvalue_4(kv_list):\n    return {k: [v] for k, v in kv_list}\n\ndef group_keyvalue_5(kv_list):\n    return dict((k, [v]) for k, v in kv_list)\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(lst):\n    result = {}\n    for item in lst:\n        key, value = item\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(kv_list):\n    return {k: [v for v, k in kv_list] for k, v in groupby(kv_list, itemgetter(0))}\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k not in d:\n            d[k] = [v]\n        else:\n            d[k].append(v)\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(kv_pairs):\n    dict = {}\n    for pair in kv_pairs:\n        k, v = pair\n        if k in dict:\n            dict[k].append(v)\n        else:\n            dict[k] = [v]\n    return dict\n\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(str):\n    stack = []\n    for char in str:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\ndef test_is_valid_parenthese():\n    assert is_valid_parenthese(\"(){}[]\")\n    assert is_valid_parenthese(\"([])\")\n    assert not is_valid_parenthese(\"(](\")\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    return len(string) == len(set(string))\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    if len(string) % 2 == 0:\n        return string.count('(') == string.count(')')\n    else:\n        return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(parenthese):\n    open_paren = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    close_paren = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    }\n\n    # handle empty parentheses\n    if len(parenthese) == 0:\n        return True\n    # handle one parenthese\n    if len(parenthese) == 1:\n        if parenthese[0] in open_paren and \\\n                parenthese[0] == open_paren[parenthese[0]]:\n            return True\n    # handle n parenthese with n > 1\n    for i in range(0, len(parenthese) - 1):\n        # handle the odd case\n        if parenthese[i] == open_paren[parenthese[i]] \\\n                and parenthese[i + 1] == close_paren[parenthese[i]]:\n            continue\n        # handle the even case\n        if parenthese[i] == close_paren[parenthese[i + 1]] \\\n                and parenthese[i + 1] == open_paren[parenthese[i + 1]]:\n            continue\n        return False\n    # handle all parenthese is closed correctly\n    return True\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    \"\"\"\n    Recursive solution\n    \"\"\"\n    # Base case\n    if len(string) == 0:\n        return True\n\n    if string[0] == \"(\":\n        # Check if the following character is a \")\",\n        if string[1] == \")\":\n            return is_valid_parenthese(string[2:])\n        else:\n            return False\n    else:\n        # Check if the following character is a \")\",\n        if string[0] == \")\":\n            return is_valid_parenthese(string[1:])\n        else:\n            return False\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(parenthese_string):\n    #Method 1\n    if len(parenthese_string)%2==1:\n        return False\n    else:\n        stack = []\n        for char in parenthese_string:\n            if char == '(':\n                stack.append(char)\n            if char == ')':\n                if len(stack)==0:\n                    return False\n                else:\n                    stack.pop()\n        if len(stack)==0:\n            return True\n    return False\n\n#Method 2\ndef is_valid_parenthese(parenthese_string):\n    open_brackets = [0] * 2\n    for char in parenthese_string:\n        if char == '(':\n            open_brackets[0] += 1\n        if char == ')':\n            open_brackets[1] += 1\n    if open_brackets[0] == 0 and open_brackets[1] == 0:\n        return True\n    return False\n\n#Method 3\ndef is_valid_parenthese(parenthese_string):\n    return len(parenthese_string) % 2 == 0 and parenthese_string.count('(') == parenthese_string.count(')')\n\n#Method 4\ndef is_valid_parenthese(parenthese_string):\n    stack = []\n    for char in parenthese_string:\n        if char == '(':\n            stack.append(char)\n        if char == ')':\n            stack.pop()\n    return len(stack) == 0", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(parenthese_string):\n    \"\"\"\n    Checks if a string is valid parenthese, i.e. has no unmatched parentheses.\n    Returns True if the string is valid, False otherwise.\n    \"\"\"\n    stack = []\n    for char in parenthese_string:\n        if char in '({[':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char != '(':\n                return False\n            if char == ']' and top_char != '[':\n                return False\n            if char == '}' and top_char != '{':\n                return False\n    return len(stack) == 0\n\n#assert is_valid_parenthese(\"(){}[]\")==True\n#assert is_valid_parenthese(\"(][{)\")==False\n#assert is_valid_parenthese(\")()\")==False\n#assert is_valid_parenthese(\"\")==True\n\n#-------------------------------------------------------------------------------\n\ndef is_valid_parenthese_2(parenthese_string):\n    \"\"\"\n    Checks if a string is valid parenthese, i.e. has no unmatched parentheses.\n    Returns True if the string is valid, False otherwise.\n    \"\"\"\n    stack = []\n    for char in parenthese_string:\n        if char in '({[':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char != '(':\n                return False\n            if char == ']' and top_char != '[':\n                return False\n            if char == '}' and top_char != '{':\n                return False\n    return len(stack) == 0\n\n#-------------------------------------------------------------------------------\n\ndef is_valid_parenthese_3(parenthese_string):\n    \"\"\"\n    Checks if a string is valid parenthese, i.e. has no unmatched parentheses.\n    Returns True if the string is valid, False otherwise.\n    \"\"\"\n    stack = []\n    for char in parenthese_string:\n        if char in '({[':\n            stack.append(char", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    open_parens = []\n    for char in string:\n        if char == '(':\n            open_parens.append(char)\n        if char == ')':\n            if len(open_parens) > 0:\n                open_parens.pop()\n            else:\n                return False\n    return len(open_parens) == 0\n\n\ndef test_is_valid_parenthese():\n    string = \"(){}[]\"\n    assert is_valid_parenthese(string)\n    string = \"()\"\n    assert is_valid_parenthese(string)\n    string = \"([])\"\n    assert is_valid_parenthese(string)\n    string = \"([)]\"\n    assert not is_valid_parenthese(string)\n    string = \"(([]))\"\n    assert is_valid_parenthese(string)\n    string = \"(()\"\n    assert not is_valid_parenthese(string)\n    string = \"(])\"\n    assert not is_valid_parenthese(string)\n    string = \"()(\"\n    assert not is_valid_parenthese(string)\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    opening_brackets = {\"(\":\"}\", \"{\":\"}\", \"[\":\"]\", \"<\":\">\"}\n    closing_brackets = {\"(\":\")\", \"{\":\"}\", \"[\":\"]\", \"<\":\">\"}\n    check = True\n    for i in range(0, len(string)):\n        if string[i] in opening_brackets:\n            if i == 0:\n                check = False\n            elif string[i-1] in closing_brackets:\n                if string[i-1] == opening_brackets[string[i]]:\n                    check = False\n        if string[i] in closing_brackets:\n            if i == 0:\n                check = False\n            elif string[i+1] in opening_brackets:\n                if string[i+1] == closing_brackets[string[i]]:\n                    check = False\n    return check\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(str):\n    if str.count(\"(\")!=str.count(\")\"):\n        return False\n    if str.count(\"{\")!=str.count(\"}\"):\n        return False\n    if str.count(\"[\")!=str.count(\"]\"):\n        return False\n    return True\n\n\n# +"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return (a + b + c)/2\n\n#FUEL\n#def perimeter_triangle(a,b,c):\n#    return ((a + b + c)/2)*3\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    s = (a+b+c)/2\n    return s*(s-a)*(s-b)*(s-c)\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\ndef perimeter_triangle(a,b,c):\n    s = (a+b+c)/2\n    return s*(s-a)*(s-b)*(s-c)\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\ndef perimeter_triangle(a,b,c", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    # Write your code here.\n    return (a+b+c)*2\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    p=a+b+c\n    return p", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\n# First Solution\ndef perimeter_triangle(x,y,z):\n    return (x+y+z)*2\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a, b, c):\n    \"\"\"\n    Computes the perimeter of a triangle given three sides\n    :param a: Side of a triangle\n    :param b: Side of a triangle\n    :param c: Side of a triangle\n    :return: Perimeter of the triangle\n    \"\"\"\n    return a + b + c\n\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(min, max):\n    \"\"\"\n    :param min: the lower limit of the range for LCM\n    :param max: the upper limit of the range for LCM\n    :return: a list containing the two numbers that make up the lowest common multiple\n    \"\"\"\n\n    print(min,max)\n    for i in range(min, max+1, 1):\n        for j in range(min, max+1, 1):\n            if lcm(i,j) > max:\n                break\n            if lcm(i,j) > min:\n                return (i,j)\n\n\ndef lcm(m,n):\n    \"\"\"\n    :param m: the first number\n    :param n: the second number\n    :return: the lcm of the two numbers\n    \"\"\"\n    if m < n:\n        return m*lcm(n,m)\n    else:\n        return n*lcm(m,n)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(low, high):\n    \"\"\"\n    Given two numbers find a lcm within the given range.\n    \"\"\"\n    result = [x for x in range(low, high+1) if lcm(x, high) == x]\n    return tuple(result)\n\ndef lcm(x, y):\n    \"\"\"\n    Calculate the lcm of two integers\n    \"\"\"\n    for n in range(2, max(x,y)+1):\n        if x%n == 0 and y%n == 0:\n            return n\n    return None\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nimport sys\n\ndef lcm(x,y):\n    return reduce(lambda x, y: x * y // gcd(x, y), (x, y))\n\ndef gcd(x,y):\n    while x > 0:\n        y = y % x\n        x = x % y\n    return y\n\ndef answer(l,u):\n    # the lcm should be between l and u\n    a = 0\n    b = l\n    if u > l:\n        a = l\n        b = u\n    while b - a > 1:\n        c = (a + b) // 2\n        if lcm(a,c) > u or lcm(c,b) > u:\n            b = c\n        else:\n            a = c\n    return (a,b)\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(min_num, max_num):\n    for i in range(min_num, max_num+1):\n        for j in range(min_num, max_num+1):\n            if lcm(i,j) > max_num:\n                break\n            elif lcm(i,j) < min_num:\n                continue\n            else:\n                return (i,j)\n\n#def answer(min_num, max_num):\n#    return (x,y)\n\ndef lcm(x,y):\n    return x * y // gcd(x,y)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(min, max):\n    lcm = min * max\n    for a in range(min,max+1):\n        for b in range(a+1, max+1):\n            if lcm % (a * b) == 0:\n                return (a,b)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(min,max):\n    # your code here\n    pass\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(a,b):\n    i = 1\n    lcm = a * b\n    while True:\n        if lcm < a:\n            return (i-1, lcm-a)\n        if lcm < b:\n            return (lcm-b, i-1)\n        i += 1\n        lcm = a * b * i\n\n#Test cases", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    for n in range(a,b+1):\n        for m in range(a,b+1):\n            if lcm(n,m) <= b:\n                return n,m\n\ndef lcm(a,b):\n    if a%b == 0:\n        return a\n    return (a//b)*b", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(l,u):\n  for i in range(l,u+1):\n    for j in range(l,u+1):\n      if(lcm(i,j) <= u and lcm(i,j) >= l):\n        return (i,j)\n  return None\n\ndef lcm(a,b):\n  return a*b/gcd(a,b)\n\ndef gcd(a,b):\n  if(b == 0):\n    return a\n  else:\n    return gcd(b,a%b)\n\n\ndef main():\n  print(answer(3,8))\n  print(answer(3,10))\n  print(answer(1,10))\n  print(answer(10,15))\n  print(answer(10,30))\n  print(answer(5,10))\n  print(answer(10,1))\n\n\nmain()", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(a,b):\n\tfor i in range(a,b+1,1):\n\t\tfor j in range(a,b+1,1):\n\t\t\tif (i==j) and (i%j == 0):\n\t\t\t\tprint(i,j)\n\t\t\t\treturn i,j\ndef test():\n\tassert answer(1,25) == (11,33)\ntest()"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(l,s):\n    for i in l:\n        if i in s:\n            return 'Matched!'\n    return 'No match!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(text,lit):\n    for i in range(len(text)):\n        for j in range(len(lit)):\n            if lit[j] in text[i]:\n                return \"Matched!\"\n    return \"No Matched!\"\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(search_literals,some_string):\n    if len(search_literals)==0:\n        return ''\n    if len(search_literals)==1:\n        return 'No matched!'\n    if some_string == '' or search_literals[0] in some_string:\n        return 'Matched!'\n    return string_literals(search_literals[1:],some_string)\n\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals, string):\n    for l in literals:\n        if string.find(l) != -1:\n            return 'Matched!'\n    return 'Not found!'\n\n\n# + id=\"K5R0p26A3bB8\" colab_type=\"code\" outputId=\"93838b3a-1711-4119-b405-9d0912097867\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 50}\nstring_literals(['language'], 'python language')\n\n\n# + [markdown] id=\"Q27fs0L53m6o\" colab_type=\"text\"\n# **Exercise 5**\n#\n# Write a function to add two numbers and return the result.", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals, string):\n    \"\"\"\n    Searches a set of strings in a string\n    \"\"\"\n    for lit in literals:\n        if lit in string:\n            return lit + \" Matched!\"\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,text):\n    if len(literals) == 0: return 'Strings list is empty!'\n    for literal in literals:\n        if literal in text:\n            return 'Matched!'\n    return 'Not Matched!'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\nimport re\ndef string_literals(arr,s):\n    r = 0\n    for i in arr:\n        r += 1\n        print(r,i)\n        m = re.findall(i,s)\n        if m:\n            return \"Matched!\"\n    return \"No Match\"", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(lst,string):\n    i = 0\n    while i<len(string):\n        if i>=len(lst):\n            return None\n        if lst[i]==string[i]:\n            i += 1\n        else:\n            return None\n    return 'Matched!'\n\n\ndef string_literals2(lst,string):\n    return ''.join([c for c in string if c in lst])\n\n\ndef string_literals3(lst,string):\n    if len(lst)==0:\n        return string\n    return lst[0] + (string_literals3(lst[1:],string[1:]) if string[0] in lst else string)\n\n\ndef string_literals4(lst,string):\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]==string[j]:\n                return string[j:]\n    return string\n\n\ndef string_literals5(lst,string):\n    for i in range(len(lst)):\n        for j in range(len(string)):\n            if lst[i]==string[j]:\n                return string[j:]\n    return string\n\n\ndef string_literals6(lst,string):\n    for i in range(len(lst)):\n        if string.startswith(lst[i]):\n            return string[len(lst[i]):]\n    return string\n\n\ndef string_literals7(lst,string):\n    for i in range(len(lst)):\n        if string.startswith(lst[i]):\n            return string[len(lst[i]):]\n    return string\n\n\ndef string_literals8(lst,string):\n    for i in range(len(lst)):\n        if string.startswith(lst[i]):\n            return string[len(lst[i]):]\n    return string", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(list_of_literals,string):\n    return \"Matched!\" if any(l in string for l in list_of_literals) else \"Missed\"\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals, string):\n    result = []\n    for literal in literals:\n        result += [x for x in string.split() if literal in x]\n    return \"Matched!\" if result else \"Not matched!\"\n    "], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    \"\"\"\n    :param num: The number to check\n    :return: True or False\n    \"\"\"\n    # Start with 1, because 1 is always a keith number\n    n = 1\n    # Iterate over the numbers 1 to n\n    while n < num:\n        # Is n divisible by 2?\n        if num % 2 == 0:\n            n = n + 1\n        else:\n            # Is n a multiple of 3?\n            if num % 3 == 0:\n                return False\n            # n is a keith number\n            else:\n                return True\n    return False\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    # Write your code here.\n    # https://stackoverflow.com/questions/10088790/how-to-calculate-keith-numbers-efficiently-in-python\n    n=int(n)\n    x = [1, 0, 0, 0, 0]\n    while n > 0:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = (n / 2) + 1\n        x[0] = x[1]\n        x[1] = x[2]\n        x[2] = x[3]\n        x[3] = x[4] + 1\n        x[4] = x[0]\n    if x[2] == 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    # If the number is 1, 2 or 3 return true\n    if num == 1:\n        return True\n    elif num == 2 or num == 3:\n        return True\n    else:\n        # Get the sum of the digits\n        total = 0\n        while num != 0:\n            # Get the last digit and store it in 'num'\n            num = num % 10\n            # Add the current digit to the total\n            total += num\n        # If the number is a keith number, return True\n        if total == 10:\n            return True\n        # If the number is not a keith number, return False\n        else:\n            return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num: int) -> bool:\n    # The first 10 keith numbers are\n    # 2, 3, 5, 11, 13, 17, 31, 37, 71, 73\n    # The first 20 keith numbers are\n    # 2, 3, 5, 7, 11, 13, 17, 19, 31, 37, 71, 73, 79, 97, 101, 103, 107, 109, 127, 129\n    # The first 50 keith numbers are\n    # 2, 3, 5, 7, 11, 13, 17, 19, 31, 37, 71, 73, 79, 97, 101, 103, 107, 109, 127, 129,\n    # 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, ", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n == 2:\n        return True\n    elif n < 0:\n        return False\n    elif n % 2 == 0:\n        return is_num_keith(n / 2)\n    elif n % 2 == 1:\n        return is_num_keith(n * 3 + 1)\n\n# print(is_num_keith(2))", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    if n % 16 == 0:\n        return True\n    elif n % 4 == 0:\n        return True\n    elif n % 3 == 0:\n        return True\n    elif n % 10 == 0:\n        return True\n    return False\n\n\ndef is_num_keith_v2(n):\n    if n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n % 4 == 0:\n        return False\n    elif n % 5 == 0:\n        return False\n    elif n % 6 == 0:\n        return False\n    elif n % 7 == 0:\n        return False\n    elif n % 8 == 0:\n        return False\n    elif n % 9 == 0:\n        return False\n    elif n % 10 == 0:\n        return False\n    elif n % 11 == 0:\n        return False\n    elif n % 12 == 0:\n        return False\n    elif n % 13 == 0:\n        return False\n    elif n % 14 == 0:\n        return False\n    elif n % 15 == 0:\n        return False\n    elif n % 16 == 0:\n        return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num <= 1:\n        return False\n    # Fill this in.\n    pass\n\n# Run tests", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(n):\n\tif n == 1:\n\t\treturn True\n\treturn (n % 2 == 0) and is_num_keith(n/2)\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    assert is_num_keith(14) == True\n    \"\"\"\n    sum_divisors = 0\n    for i in range(2, num):\n        if num % i == 0:\n            sum_divisors += i\n    if num == sum_divisors:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    # your code here\n    temp = n\n    rev_num = 0\n    while n > 0:\n        rev_num = rev_num * 10 + n % 10\n        n = n // 10\n    if temp == rev_num:\n        return True\n    return False\n\n\ndef is_num_keith2(n):\n    # your code here\n    temp = n\n    rev_num = 0\n    while n > 0:\n        rev_num = rev_num * 10 + n % 10\n        n = n // 10\n    if temp == rev_num:\n        return True\n    return False\n\n\ndef is_num_keith3(n):\n    # your code here\n    if n <= 9:\n        return False\n    elif n % 10 == 0:\n        return False\n    elif n < 10:\n        return True\n    else:\n        rev_num = 0\n        temp = n\n        while n > 0:\n            rev_num = rev_num * 10 + n % 10\n            n = n // 10\n        return temp == rev_num\n\n\ndef is_num_keith4(n):\n    # your code here\n    return n == (n % 10) * (n // 10)\n\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    lat1,lon1,lat2,lon2 = map(radians, [lat1,lon1,lat2,lon2])\n    dlon = lon2-lon1\n    dlat = lat2-lat1\n    a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*sin(dlon/2)**2\n    c = 2*atan2(sqrt(a), sqrt(1-a))\n    return 6367*c\n\ndef distance_lat_long_old(lat1,lon1,lat2,lon2):\n    lat1,lon1,lat2,lon2 = map(radians, [lat1,lon1,lat2,lon2])\n    dlon = lon2-lon1\n    dlat = lat2-lat1\n    return 6367*asinh(sin(dlat/2)*sin(dlon/2)*cos(lat1)*cos(lat2))", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Input: lat1, lon1, lat2, lon2\n    Output: distance between two points using latitude and longitude\n    \"\"\"\n    radius = 6371  # km\n    R1 = radius * math.pi / 180\n    R2 = radius * math.pi / 180\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(R1 * dlat / 2) * math.sin(R2 * dlat / 2) + \\\n        math.cos(R1 * lat1) * math.cos(R2 * lat2) * math.sin(R2 * dlon / 2) * math.sin(R1 * dlon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    distance = radius * c\n    return distance\n\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    return 6367 * c", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    #convert coordinates to radians\n    lat1,lat2,lon1,lon2 = map(radians, [lat1,lat2,lon1,lon2])\n    \n    # haversine formula\n    dlon = lon2-lon1\n    dlat = lat2-lat1\n    a = sin(dlat/2) * sin(dlat/2) + cos(lat1) * cos(lat2) * sin(dlon/2) * sin(dlon/2)\n    c = 2 * asin(sqrt(a))\n    r = 6371  # earth radius in km\n    return c * r\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,long1,lat2,long2):\n    R=6371 #earth's radius in km\n    lat1=math.radians(lat1)\n    lat2=math.radians(lat2)\n    dlong=math.radians(long2-long1)\n    #difference in latitude\n    dlat=lat2-lat1\n    a=math.sin(dlat/2)*math.sin(dlat/2)+math.cos(lat1)*math.cos(lat2)*math.sin(dlong/2)*math.sin(dlong/2)\n    c=2*math.atan2(math.sqrt(a),math.sqrt(1-a))\n    d=R*c\n    return d\n\n#print(distance_lat_long(23.5,67.5,25.5,69.5))\n#assert True", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lng1,lat2,lng2):\n    from math import radians,acos,sin,asin,radians\n    r=6371\n    lat1=radians(lat1)\n    lat2=radians(lat2)\n    dlon=radians(lng2-lng1)\n    dlat=radians(lat2-lat1)\n    a=sin(dlat/2)*sin(dlat/2)+cos(lat1)*cos(lat2)*sin(dlon/2)*sin(dlon/2)\n    c=2*asin(sqrt(a))\n    d=r*c\n    return d\n\ndef test():\n    print(distance_lat_long(23.5,67.5,25.5,69.5))\n    assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\ntest()\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lng1,lat2,lng2):\n    from math import pi\n    R = 6371  # Radius of the earth in kilometers. Use 3956 for miles.\n    phi1 = radians(lat1)\n    phi2 = radians(lat2)\n    delta_phi = radians(lat2 - lat1)\n    delta_lng = radians(lng2 - lng1)\n\n    a = sin(delta_phi/2) ** 2 + cos(phi1) * cos(phi2) * sin(delta_lng/2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    return R * c", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nfrom math import radians,acos,acos\n\ndef distance_lat_long(lat1,lng1,lat2,lng2):\n    \"\"\"\n    \"\"\"\n    lat1,lng1,lat2,lng2 = map(radians,[lat1,lng1,lat2,lng2])\n    dlat = lat2-lat1\n    dlng = lng2-lng1\n    return 2*acos(sin(dlat/2)*sin(dlat/2) + cos(lat1)*cos(lat2)*sin(dlng/2)*sin(dlng/2))\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    \"\"\"\n    Calculate the great circle distance between two points\n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    \n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1 \n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * asin(sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    return 69*np.sqrt( (lat2-lat1)**2 + (lon2-lon1)**2 )\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(list_):\n    if len(list_) < 1:\n        return \"\"\n    first = list_[0]\n    for i in range(len(first)):\n        if first[i] == list_[0][i]:\n            continue\n        return first[:i]\n    return first\n\n# test", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(s_list, min_length):\n    return \"\".join(s_list[:min_length])\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(lst, n):\n    if not lst:\n        return \"\"\n    prefix = \"\"\n    for i in range(min(len(lst[0]), n)):\n        char = lst[0][i]\n        for x in lst:\n            if x[i] != char:\n                return prefix\n        prefix += char\n    return prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(arr, size):\n    if len(arr) == 0:\n        return \"\"\n    if len(arr) == 1:\n        return arr[0]\n    min_length = min([len(item) for item in arr])\n    for i in range(min_length):\n        prefix = arr[0][0:i]\n        for j in range(1, len(arr)):\n            if arr[j][0:i] != prefix:\n                return arr[0][0:i-1]\n    return arr[0][0:min_length-1]\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strings, k):\n    if k > len(strings):\n        return \"\"\n    for i in range(len(strings[0])):\n        ch = strings[0][i]\n        for string in strings[1:]:\n            if ch != string[i]:\n                return strings[0][:i]\n    return strings[0]\n\ndef common_prefix_sort(strings, k):\n    sorted_strings = sorted(strings, key=lambda s: s[0])\n    return sorted_strings[0][:k]\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(str_list, str_len):\n    common = \"\"\n    for i in range(str_len):\n        common += str_list[0][i]\n    return common\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\nfrom typing import List\n\ndef common_prefix(str_list: List[str], n: int):\n    \"\"\"\n\n    :param str_list: a list of strings\n    :param n: the length of the longest common prefix\n    :return: a string with the longest common prefix\n    \"\"\"\n\n    if len(str_list) == 0:\n        return ''\n    if n == 1:\n        return str_list[0][0]\n\n    max_prefix = 0\n    max_prefix_str = str_list[0][:1]\n    for string in str_list[1:]:\n        if len(string) > max_prefix:\n            max_prefix = len(string)\n            max_prefix_str = string[:1]\n        elif len(string) == max_prefix:\n            if string[:1] < max_prefix_str:\n                max_prefix = len(string)\n                max_prefix_str = string[:1]\n    return max_prefix_str\n\n\ndef common_prefix_b(str_list: List[str], n: int):\n    \"\"\"\n\n    :param str_list: a list of strings\n    :param n: the length of the longest common prefix\n    :return: a string with the longest common prefix\n    \"\"\"\n\n    if len(str_list) == 0:\n        return ''\n    if n == 1:\n        return str_list[0][0]\n    prefix = str_list[0][:n]\n    for string in str_list[1:]:\n        if string[:n] != prefix:\n            break\n    return prefix\n\n\ndef common_prefix_c(str_list: List[str], n: int):\n    \"\"\"\n\n    :param str_list: a list of strings\n    :param n: the length of the longest common prefix\n    :return: a string with the longest common prefix\n    \"\"\"\n\n    if len(str_list) == 0:\n        return ''\n    if n == 1:\n        return str_list[0][0]\n    prefix = str_list[0][:n]\n    for string in str_list[1:]:\n        if len(string) < n:\n            break\n        if string", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, k):\n    if len(strings) == 0:\n        return \"\"\n    elif len(strings) == 1:\n        return strings[0]\n    elif len(strings) == 2:\n        if len(strings[0]) > len(strings[1]):\n            return common_prefix(strings[0][0:k], k)\n        elif len(strings[0]) < len(strings[1]):\n            return common_prefix(strings[1][0:k], k)\n        else:\n            return common_prefix(strings[0][0:k], k)\n    elif len(strings) > 2:\n        common_prefix = common_prefix(strings[0], k)\n        for string in strings[1:]:\n            if len(string) > len(common_prefix):\n                common_prefix = common_prefix[0:k]\n            else:\n                common_prefix = common_prefix[0:len(common_prefix)]\n            if common_prefix == \"\":\n                return \"\"\n        return common_prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# iterative solution\ndef common_prefix(string_list, max_len):\n    \"\"\"\n    :param string_list: list of string\n    :param max_len:  int\n    :return: common prefix as string\n    \"\"\"\n    if len(string_list) == 0:\n        return \"\"\n    if len(string_list) == 1:\n        return string_list[0]\n\n    i = 0\n    while i < max_len:\n        for s in string_list:\n            if i >= len(s):\n                return string_list[0][0:i]\n        i += 1\n    return string_list[0][0:i]\n\n\ndef test_common_prefix():\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strings, length):\n    '''\n    Take a list of strings as argument, return the common prefix.\n    '''\n    # use a empty string as prefix\n    prefix = \"\"\n    # if the length is less than or equal to 0, return empty string\n    if length <= 0:\n        return prefix\n    for string in strings:\n        # get the min length of the strings\n        min_length = min(len(string), len(prefix))\n        # return the common prefix\n        return prefix[:min_length]\n    return prefix\n\ndef test_common_prefix():\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(str):\n    \"\"\"\n    Find uppercase, lowercase, special character and numeric values using regex.\n    :param str: string to find character from\n    :return: tuple with uppercase, lowercase, special character and numeric values\n    \"\"\"\n    # your code here\n    # print(str)\n    # print(re.sub('[^0-9a-zA-Z]', '', str))\n    # return re.findall('[A-Z]', str), re.findall('[a-z]', str), re.findall('[0-9]', str), re.findall('[^0-9a-zA-Z]', str)\n    # return re.findall('[A-Z]', str), re.findall('[a-z]', str), re.findall('[0-9]', str), re.findall('[^0-9a-zA-Z]', str)\n    return re.findall('[A-Z]', str), re.findall('[a-z]', str), re.findall('[0-9]', str), re.findall('[^0-9a-zA-Z]', str)\n    # return re.findall('[A-Z]', str), re.findall('[a-z]', str), re.findall('[0-9]', str), re.findall('[^0-9a-zA-Z]', str)\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(s):\n    return re.split('([a-zA-Z0-9!@#$%^&*()_+-=~`^|[{}];:',\".<>,?]+)',s)\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(string):\n    return string.split()\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(s):\n    return (re.findall(\"[a-zA-Z0-9]\", s), re.findall(\"[^a-zA-Z0-9]\", s), re.findall(\"[A-Z]\", s), re.findall(\"[a-z]\", s))\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(string):\n    \"\"\"\n    Arguments:\n    string -- a string\n    \n    Returns:\n    uppercase, lowercase, special character and numeric values as a list\n    \"\"\"\n    return (\n        re.findall(r'[A-Z]', string),\n        re.findall(r'[a-z]', string),\n        re.findall(r'[!@#$%^&*()\\-_=+{};:,<>?/|.]', string),\n        re.findall(r'[0-9]', string)\n    )\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(input_str):\n    result = []\n    result_uc = []\n    result_lc = []\n    result_spec = []\n    result_num = []\n    if input_str:\n        for char in input_str:\n            if char.isalpha() and char.islower():\n                result_lc.append(char)\n            elif char.isalpha() and char.isupper():\n                result_uc.append(char)\n            elif char.isalpha() and not char.islower() and not char.isupper():\n                result_spec.append(char)\n            elif char.isalpha() and char.isdigit():\n                result_num.append(char)\n            elif char.isalpha():\n                result.append(char)\n    return result, result_uc, result_lc, result_spec, result_num\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(string):\n    uppercase = [char for char in string if char.isupper()]\n    lowercase = [char for char in string if char.islower()]\n    special = [char for char in string if char.isalpha()]\n    numeric = [char for char in string if char.isdigit()]\n\n    return uppercase, lowercase, special, numeric\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(string):\n    \"\"\"\n    :type string: str\n    :rtype: Tuple[list, list, list, list]\n    \"\"\"\n    # Your code here\n    # Regex is a simple language for creating complex patterns\n    upper = re.findall('[A-Z]', string)\n    lower = re.findall('[a-z]', string)\n    special = re.findall('[^a-zA-Z0-9_]', string)\n    numeric = re.findall('[0-9]', string)\n    return upper, lower, special, numeric\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(str):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    uppercase = re.findall(\"[A-Z]\", str)\n    lowercase = re.findall(\"[a-z]\", str)\n    special = re.findall(\"[^a-zA-Z0-9]\", str)\n    numeric = re.findall(\"[0-9]\", str)\n    \n    return uppercase, lowercase, special, numeric", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(input_string):\n    \"\"\"\n    Find Uppercase, Lowercase, Special character and Numeric values\n    \"\"\"\n    up = re.findall(r\"[A-Z]\", input_string)\n    low = re.findall(r\"[a-z]\", input_string)\n    spec = re.findall(r\"[^a-zA-Z0-9]\", input_string)\n    num = re.findall(r\"\\d\", input_string)\n    \n    return up, low, spec, num\n\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == k:\n                result += 1\n    return result\n\n#print(count_pairs([1, 5, 3, 4, 2], 5, 3))", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, n):\n    if n <= 1:\n        return 0\n\n    if n == 2:\n        return arr.count(arr[0]) * (arr.count(arr[1]) - 1)\n\n    max_val = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                if abs(arr[i] - arr[j]) == k:\n                    max_val = max(max_val, count_pairs(arr[:j+1], k, j+1) + count_pairs(arr[i+1:], k, n-1-j))\n\n    return max_val\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    \"\"\"\n    Counts pairs\n    \"\"\"\n    if n < 0:\n        return 0\n    result = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == k:\n                result += 1\n    return result\n\ndef test():\n    arr = [1, 5, 3, 4, 2]\n    k = 5\n    n = len(arr)\n    assert count_pairs(arr, k, n) == 2\n    print \"test passed\"\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(array, k, n):\n    if len(array) < 2:\n        return 0\n\n    # Find the rightmost element that can be used as the pivot\n    left_index = 0\n    right_index = len(array) - 1\n    while left_index < right_index:\n        if array[left_index] < array[right_index]:\n            right_index -= 1\n        elif array[left_index] > array[right_index]:\n            left_index += 1\n        else:\n            left_index += 1\n            right_index -= 1\n\n    # Remove the rightmost element that is the pivot\n    array.pop()\n\n    # Find the rightmost element that can be used as the pivot\n    left_index = 0\n    right_index = len(array) - 1\n    while left_index < right_index:\n        if array[left_index] < array[right_index]:\n            right_index -= 1\n        elif array[left_index] > array[right_index]:\n            left_index += 1\n        else:\n            left_index += 1\n            right_index -= 1\n\n    # Remove the rightmost element that is the pivot\n    array.pop()\n\n    # Find the rightmost element that can be used as the pivot\n    left_index = 0\n    right_index = len(array) - 1\n    while left_index < right_index:\n        if array[left_index] < array[right_index]:\n            right_index -= 1\n        elif array[left_index] > array[right_index]:\n            left_index += 1\n        else:\n            left_index += 1\n            right_index -= 1\n\n    # Remove the rightmost element that is the pivot\n    array.pop()\n\n    # Find the rightmost element that can be used as the pivot\n    left_index = 0\n    right_index = len(array) - 1\n    while left_index < right_index:\n        if array[left_index] < array[right_index]:\n            right_index -= 1\n        elif array[left_index] >", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(A, K, k):\n    if len(A) < 2:\n        return 0\n    t = sorted(A)\n    count = 0\n    for i in range(len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if abs(t[i] - t[j]) == k:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef count_pairs(arr, k, num):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :type num: int\n    :rtype: int\n    \"\"\"\n    # store the count for each pair of numbers\n    count = defaultdict(lambda: 0)\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            count[(arr[i], arr[j])] += 1\n\n    result = 0\n    for key, val in count.items():\n        if val >= num:\n            result += val * (val - 1) // 2\n\n    return result\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(array: list, n: int, k: int) -> int:\n    n = len(array)\n    # if k >= n, there is no possibility of any pair having a difference of k\n    if k >= n:\n        return 0\n\n    # create a set of all pairs having a difference of k\n    pairs = set()\n    for i in range(n-k+1):\n        for j in range(i+1, i+k+1):\n            if array[i] != array[j]:\n                pairs.add((array[i], array[j]))\n\n    # we now need to count the number of pairs having a difference of k\n    return len(pairs)\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, target):\n    # Your code here\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if abs(arr[i] - arr[j]) == k:\n                    res += 1\n    return res\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, d):\n    a, b, c = set(), set(), set()\n\n    for i in range(len(arr)):\n        a.add(arr[i])\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == k:\n                b.add(arr[i])\n                c.add(arr[j])\n\n    return len(a.intersection(b.intersection(c)))\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    # your code here\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + k == arr[j]:\n                count += 1\n    return count"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(l,val):\n    return [x for x in l if x>val]\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(numlist,num):\n    if len(numlist)>0:\n        return numlist[0] > num\n    return False\n# main", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(numbers,num):\n    for n in numbers:\n        if n>num:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(li,num):\n    return all(li[i] > num for i in range(len(li)))\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(my_list,num):\n    return any(x>num for x in my_list)\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(numbers,number):\n    return any(num > number for num in numbers)\n\n#assert greater_specificnum([220, 330, 500],200)==True\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst,num):\n    for i in range(len(lst)):\n        if lst[i]>num:\n            print(lst[i])\n\ngreater_specificnum([220, 330, 500],200)\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(arr, n):\n    '''\n    Find all the values in the array that are greater than the specified number\n    '''\n    return [i for i in arr if i > n]\n    ", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(input_list,input_num):\n    for num in input_list:\n        if num>input_num:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(numberlist,num):\n    for x in numberlist:\n        if x>num:\n            print(x)\n\n#\n# Find the mean of a list\n#"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    return (a*c - b*b)/(2*a), (b*c - a*a)/(2*b)\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    delta_y = b*b - 4*a*c\n    return (-b + delta_y**0.5)/2*a, (b + delta_y**0.5)/2*a\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nfunction parabola_focus(a,b,c)\n    return (-b+sqrt(b^2-4ac))/2a, (c-a*(-b+sqrt(b^2-4ac)))/2b\nend\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    return (-b+b*b-3*a*c, 2*a)\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    return (-b/2*b+b*b*c-2*a*b*c,\n            (b*b-4*a*c)/4*b+b*c-a*c)\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(x1,y1,a):\n    return (-a/2.0, 2.0*a*y1-a*x1)\n    ", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    D = b * b - 4 * a * c\n    if D > 0:\n        x1 = (-b + sqrt(D))/(2*a)\n        x2 = (-b - sqrt(D))/(2*a)\n        return x1, x2\n    else:\n        return None\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    return (-b+(b**2-4*a*c)**0.5)/(2*a)\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    discriminant = (b**2)-4*a*c\n    print(discriminant)\n    if discriminant < 0:\n        print(\"no solution\")\n        return None\n    discriminant = discriminant ** 0.5\n    print(discriminant)\n    return (-b + discriminant)/(2*a),(-b - discriminant)/(2*a)\n\ndef test_parabola_focus():\n    assert parabola_focus(5,3,2)==(-0.3, 1.6)\n\ndef main():\n    \"\"\"\n    If we want to use the solution in another file, we need to\n    import it.\n    \"\"\"\n    test_parabola_focus()\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    focus_x = (-b/2*b+4*a*c)/(2*a)\n    focus_y = b*(focus_x-c)/a\n    return focus_x, focus_y\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(string, literals):\n    # Write your code here\n    for literal in literals:\n        if re.search(literal, string):\n            return \"Matched!\"\n    return \"Not matched!\"\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(string,literals):\n    for lit in literals:\n        if re.search(lit,string) != None:\n            return \"Matched!\"\n    return \"Not Matched!\"", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(str,list_of_values):\n    regex = re.compile('(?:' + '|'.join(list_of_values) + ')',re.I)\n    for match in regex.finditer(str):\n        print('Matched!')\n    else:\n        print('Not matched!')\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(str,literals):\n    for lit in literals:\n        if re.search(r\"\\b\"+lit+\"\\b\",str):\n            return 'Matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(text, literals):\n    if len(literals) == 0:\n        return \"Not matched!\"\n    return any([any([re.search(item, text) != None for item in literals]) for item in literals])\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(literal, text, re.IGNORECASE):\n            return 'Matched!'\n    return 'Not found!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(str, literals):\n    \"\"\"Check literals in a string by using regex.\"\"\"\n    if str is None:\n        return None\n    for literal in literals:\n        if re.search(literal, str, re.IGNORECASE):\n            return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string, literals):\n    for l in literals:\n        match = re.search(l, string)\n        if match:\n            return f\"Matched!\"\n    return \"Not matched!\"\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(str,lits):\n    pattern = r''.join(r'\\b%s\\b'%l for l in lits)\n    return 'Matched!' if re.search(pattern,str) else 'Not matched'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(s, L):\n    r = []\n    for lit in L:\n        if re.search(lit, s):\n            r.append(lit)\n    return \"Matched!\" if len(r) > 0 else \"Not matched\"\n\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(seq1, seq2, i, j):\n    \"\"\"\n    Given two sequences of characters, find the length of the LCS.\n    Note that the sequences may be empty.\n    \"\"\"\n    if i == 0 or j == 0:\n        return 0\n    elif seq1[i - 1] == seq2[j - 1]:\n        return 1 + longest_common_subsequence(seq1, seq2, i - 1, j - 1)\n    else:\n        return max(longest_common_subsequence(seq1, seq2, i, j - 1), longest_common_subsequence(seq1, seq2, i - 1, j))\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(a, b, n, m):\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if a[i-1] == b[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                continue\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][m]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(seq1, seq2, m, n):\n    # Make sure seq1 has enough elements to be used as a mask for seq2\n    if len(seq1) < m:\n        seq1 = seq1 + (m-len(seq1))*\" \"\n    else:\n        seq1 = seq1[:m]\n    \n    # Make sure seq2 has enough elements to be used as a mask for seq1\n    if len(seq2) < n:\n        seq2 = seq2 + (n-len(seq2))*\" \"\n    else:\n        seq2 = seq2[:n]\n\n    # create a matrix\n    table = [[0 for i in range(n+1)] for j in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    return table[m][n]\n\n\n# Test case 1", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(first_string, second_string, first_index, second_index):\n    return 0", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    # Generate the dynamic programming matrix using 0-based indexing\n    m = len(str1)\n    n = len(str2)\n    LCS = [[0 for x in range(n+1)] for y in range(m+1)]\n\n    for i in range(m+1):\n        LCS[i][0] = 0\n    for j in range(n+1):\n        LCS[0][j] = 0\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n\n    return LCS[m][n]", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(string_one, string_two, length_one, length_two):\n    # write your code here\n    if length_one == 0 or length_two == 0:\n        return 0\n    else:\n        if string_one[length_one - 1] == string_two[length_two - 1]:\n            return 1 + longest_common_subsequence(string_one, string_two, length_one - 1, length_two - 1)\n        else:\n            return max(longest_common_subsequence(string_one, string_two, length_one - 1, length_two), longest_common_subsequence(string_one, string_two, length_one, length_two - 1))\n\n\ndef longest_common_subsequence_dp(string_one, string_two, length_one, length_two):\n    # write your code here\n    cache = [[0] * (length_two + 1) for i in range(length_one + 1)]\n    for i in range(length_one + 1):\n        for j in range(length_two + 1):\n            if i == 0 or j == 0:\n                cache[i][j] = 0\n            elif string_one[i - 1] == string_two[j - 1]:\n                cache[i][j] = 1 + cache[i - 1][j - 1]\n            else:\n                cache[i][j] = max(cache[i - 1][j], cache[i][j - 1])\n    return cache[length_one][length_two]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n# https://www.youtube.com/watch?v=nqc788f2Uac&t=1639s\n# https://www.youtube.com/watch?v=vYkS7J0-7qc&t=2280s\n# https://www.youtube.com/watch?v=O_k8nH-KCVc\ndef longest_common_subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    # Create table to store the count of characters\n    # in the LCS problem\n    L = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    # L = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            else:\n                if str1[i - 1] == str2[j - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Pick the last row of L\n    LCS = L[m][n]\n\n    return LCS\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(seq1, seq2, n, m):\n    '''\n    Recursively solve the problem\n    '''\n    if n == 0 or m == 0:\n        return 0\n    if seq1[n - 1] == seq2[m - 1]:\n        return 1 + longest_common_subsequence(seq1, seq2, n - 1, m - 1)\n    return max(longest_common_subsequence(seq1, seq2, n, m - 1), longest_common_subsequence(seq1, seq2, n - 1, m))\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    LCS = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                LCS[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[m][n]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(a, b, a_len, b_len):\n    if a_len == 0:\n        return 0\n    if b_len == 0:\n        return 0\n\n    if a[0] == b[0]:\n        return 1 + longest_common_subsequence(a[1:], b[1:], a_len-1, b_len-1)\n\n    return max(longest_common_subsequence(a[1:], b, a_len-1, b_len), longest_common_subsequence(a, b[1:], a_len, b_len-1))\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n  if n == 0:\n    return True\n  elif n == 1:\n    return True\n  else:\n    if n < 0:\n      return False\n    else:\n      return (n%4 == 0) or (n%8 == 0) or (n%9 == 0)\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    if num == 1:\n        return False\n    else:\n        for i in range(1,int(num**0.5)+1):\n            if num % i == 0:\n                if num // i == i:\n                    return True\n                else:\n                    return False\n        return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n# my solution\ndef prod_Square(num):\n    for i in range(1, num):\n        if num % i == 0:\n            if num % (i**2) == 0:\n                return True\n    return False\n\n\ndef prod_Square(num):\n    return (num % 100 == 0) or (num % 40 == 0) or (num % 4 == 0) or (num % 10 == 0)\n\n\ndef prod_Square(num):\n    return all(num % i == 0 for i in range(1, num) if not any(num % (i * j) == 0 for j in range(i + 1, num // i + 1)))\n\n\ndef prod_Square(num):\n    while True:\n        s, d = divmod(num, 4)\n        if d:\n            if d == 1:\n                return True\n            if d == 2:\n                return False\n            if d == 3:\n                return False\n        else:\n            return True if s else False\n\n\n# test\ndef test():\n    assert prod_Square(25) == False\n    assert prod_Square(24) == True\n    assert prod_Square(4) == True\n    assert prod_Square(5) == True\n    assert prod_Square(6) == True\n    assert prod_Square(7) == False\n    assert prod_Square(24) == True\n    assert prod_Square(40) == True\n    assert prod_Square(100) == True\n    assert prod_Square(25) == False\n    print(\"OK!\")\n\n\ntest()", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    \"\"\"\n    Using Sieve of Eratosthenes to find if the num can be represented as product of two squares\n    >>>prod_Square(25)\n    False\n    >>>prod_Square(12)\n    True\n    >>>prod_Square(4096)\n    True\n    \"\"\"\n    # Using Sieve of Eratosthenes to find if the num can be represented as product of two squares\n    divisors = []\n    for divisor in range(1, int(num**.5)+1):\n        if num % divisor == 0:\n            if divisor == 1:\n                divisors.append(1)\n            else:\n                divisors.append(divisor)\n                divisors.append(num//divisor)\n    if num in divisors:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    squares = [x for x in range(1,num//2+1)]\n    num_sum = 0\n    for x in squares:\n        if num%x == 0:\n            num_sum += x\n    if num_sum == num:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(x):\n    return 0\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count+=1\n            if n/i == i:\n                count+=1\n    if count==0:\n        return False\n    else:\n        return True\n\n# print(prod_Square(25))\n\n\n# recursive functions\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    for x in range(1,int(num**0.5)+1):\n        if (num%x)==0:\n            if ((num/x)**2)==num:\n                return True\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\nimport math\n\ndef prod_Square(num):\n    if num == 1 or num == 0:\n        return True\n    num_str = str(num)\n    for i in range(1, int(math.sqrt(num))):\n        if num_str.count(str(i)) == 1:\n            return False\n    return True\n\n\ndef prod_Square(num):\n    if num == 1 or num == 0:\n        return True\n    if num == 2:\n        return False\n    for i in range(1, int(math.sqrt(num))):\n        if num % i == 0:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    for i in range(1,int(n/2)+1):\n        if (n%i)==0:\n            j=n/i\n            if j*j == n:\n                return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    i=0\n    for i in range(n):\n        if arr[i]<=0:\n            continue\n        break\n    for i in range(n):\n        if arr[i] > 0 and arr[i] not in range(i+1,n+1):\n            return arr[i]+1\n\ndef first_Missing_Positive_set(arr,n):\n    for i in range(n+1):\n        if i not in arr:\n            return i\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n# O(n^2)\ndef first_Missing_Positive(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+1,n):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    for i in range(n):\n        if i+1 != lst[i]:\n            return i+1\n\n\n# Test cases\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n# A better way to solve this problem is to use two pointers\n\ndef first_Missing_Positive(a,n):\n    i,j = 0,0\n    while i<n and j<n:\n        if a[i]>=0:\n            i +=1\n        elif a[j]<0:\n            j +=1\n        else:\n            a[i],a[j] = a[j],a[i]\n    for i in range(n):\n        if a[i] < 0:\n            return i+1\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr,n):\n    for num in arr:\n        if num>0 and num<=n and num not in arr:\n            return num+1\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr,n):\n    # Write your code here\n    if len(arr) == 0:\n        return None\n    for i in range(1,len(arr)):\n        if arr[i-1] > 0:\n            continue\n        if arr[i] - 1 > 0:\n            return arr[i] - 1\n        for j in range(i-1,-1,-1):\n            if arr[j] + 1 > 0:\n                return arr[j] + 1\n    return None", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr, n):\n    l = len(arr)\n    for i in range(0, l):\n        if arr[i] > 0 and arr[i] < l:\n            arr[i], arr[arr[i]-1] = arr[arr[i]-1], arr[i]\n    for i in range(0,l):\n        if i+1 == arr[i]:\n            continue\n        elif arr[i+1] < arr[i]:\n            return arr[i]+1\n    return l+1", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(array, n):\n    missing = False\n    start = 0\n    end = len(array)-1\n    \n    while not missing and start < end:\n        if array[start] < 0:\n            start += 1\n        elif array[end] > n:\n            end -= 1\n        elif array[start] > 0 and array[end] > 0 and array[start] == array[end]:\n            start += 1\n        else:\n            missing = True\n    \n    return start + 1 if missing else end + 1", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\n#Solution\ndef first_Missing_Positive(array,n):\n    array.sort()\n    l = 0\n    r = len(array)-1\n    while(l<=r):\n        mid = (l+r)//2\n        if(mid<0 or mid>n-1):\n            break\n        if(array[mid]>0):\n            if(mid==0 or array[mid-1]<array[mid]):\n                return array[mid]\n            else:\n                l = mid\n        else:\n            if(mid==n-1 or array[mid+1]>array[mid]):\n                return array[mid]\n            else:\n                r = mid\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr, n):\n    i,j,missing_pos = 0,0,0\n    while i < n and j < n:\n        if arr[i] < 0:\n            i+=1\n            continue\n        if arr[j] < 0:\n            j+=1\n            continue\n        if arr[i] == 0:\n            arr[i] = arr[j]\n            arr[j] = 0\n            missing_pos = j+1\n            i+=1\n            continue\n        if arr[j] == 0:\n            arr[j] = arr[i]\n            arr[i] = 0\n            missing_pos = i+1\n            j+=1\n            continue\n        if arr[i] < arr[j]:\n            arr[i],arr[j] = arr[j],arr[i]\n            i+=1\n        else:\n            arr[j],arr[i] = arr[i],arr[j]\n            j+=1\n    missing_pos = min(missing_pos,n)\n    return missing_pos\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, n):\n    if len(arr) == 0:\n        return 0\n    arr.sort()\n    for i in range(n):\n        if arr[i] == i+1:\n            continue\n        if arr[i]-1 != arr[i-1]:\n            return arr[i]+1\n    return arr[n-1]+1"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    #code here\n    return 0\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x,y,max_x,max_y):\n    # TODO\n    raise NotImplementedError", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(minx,miny,maxx,maxy):\n\n    #Write your code here\n    count = 0\n    \n    if minx <= maxx and miny <= maxy and minx >= 1 and miny >= 1:\n        if maxx <= 10000 and maxy <= 10000:\n            for x in range(minx,maxx+1):\n                for y in range(miny,maxy+1):\n                    if x*x+y*y <= 10000:\n                        count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(l,u,b,c):\n    return ((b-l)*(c-u)) + 1\n\ndef check_Intgral_Points(l,u,b,c):\n    return (count_Intgral_Points(l,u,b,c))==((b-l)*(c-u))\n\ndef count_non_Intgral_Points(l,u,b,c):\n    return count_Intgral_Points(l,u,b,c) - count_Intgral_Points(l,u,l,u) - count_Intgral_Points(l,u,b,u)\n\ndef check_non_Intgral_Points(l,u,b,c):\n    return count_non_Intgral_Points(l,u,b,c) == ((b-l)*(c-u))\n\ndef check_Intgral_points_inside(l,u,b,c):\n    return check_Intgral_Points(l,u,b,c) and check_non_Intgral_Points(l,u,b,c)\n\ndef check_Intgral_points_outside(l,u,b,c):\n    return not check_Intgral_points_inside(l,u,b,c)\n\ndef check_Intgral_points(l,u,b,c):\n    return check_Intgral_points_inside(l,u,b,c) or check_Intgral_points_outside(l,u,b,c)\n\ndef count_Intgral_points_in_n_square(n,b,c):\n    return int(round(b/n,0))**2\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if (i**2+j**2)==(x2-x1+1)*(y2-y1+1):\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x_min,y_min,x_max,y_max):\n    x_range = range(x_min,x_max+1)\n    y_range = range(y_min,y_max+1)\n    points = []\n    for x in x_range:\n        for y in y_range:\n            if(x**2+y**2<=9):\n                points.append([x,y])\n    return len(points)\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(a,b,r,c):\n    points = 0\n    for i in range(a,a+r):\n        for j in range(b,b+c):\n            if (i**2+j**2)<(r**2+c**2):\n                points = points+1\n    return points\n\ndef count_Intgral_Points2(a,b,r,c):\n    points = 0\n    for i in range(r+1):\n        for j in range(c+1):\n            if (i**2+j**2)<(r**2+c**2):\n                points = points+1\n    return points\n\ndef count_Intgral_Points3(a,b,r,c):\n    points = 0\n    for i in range(a,a+r):\n        for j in range(b,b+c):\n            if (i**2+j**2)<(r**2+c**2):\n                points = points+1\n    return points\n\ndef count_Intgral_Points4(a,b,r,c):\n    points = 0\n    for i in range(a,a+r):\n        for j in range(b,b+c):\n            if ((i*i+j*j)<(r*r+c*c)):\n                points = points+1\n    return points\n\ndef count_Intgral_Points5(a,b,r,c):\n    points = 0\n    for i in range(a,a+r):\n        for j in range(b,b+c):\n            if (i*i+j*j)<(r*r+c*c)):\n                points = points+1\n    return points\n\ndef count_Intgral_Points6(a,b,r,c):\n    points = 0\n    for i in range(a,a+r):\n        for j in range(b,b+c):\n            if (i**2+j**2)<(r**2+c**2):\n                points = points+1\n    return points\n\ndef count_", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x_min, y_min, x_max, y_max):\n    return ((x_max + 1) * (y_max + 1)) - (x_max * y_max) - (x_min * y_min) - 4\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x_min, x_max, y_min, y_max):\n    points = 0\n    for i in range(x_min, x_max+1):\n        for j in range(y_min, y_max+1):\n            points += 1\n    return points\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if ((i>=x1 and i<=x2) and (j>=y1 and j<=y2)):\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month.lower() == \"january\":\n        return False\n    elif month.lower() == \"february\":\n        return True\n    elif month.lower() == \"march\":\n        return False\n    elif month.lower() == \"april\":\n        return False\n    elif month.lower() == \"may\":\n        return False\n    elif month.lower() == \"june\":\n        return False\n    elif month.lower() == \"july\":\n        return False\n    elif month.lower() == \"august\":\n        return False\n    elif month.lower() == \"september\":\n        return False\n    elif month.lower() == \"october\":\n        return False\n    elif month.lower() == \"november\":\n        return False\n    elif month.lower() == \"december\":\n        return False\n\n#test cases", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n    if month.lower() in months:\n        if month.lower()==\"february\":\n            return False\n        else:\n            return True\n    else:\n        raise ValueError\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    month_list = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    return month_list.index(month) % 2 == 0\n\n#print(check_monthnumber(\"February\"))", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month_name):\n    month_name=str(month_name)\n    if month_name==\"January\" or month_name==\"February\" or month_name==\"March\" or month_name==\"April\" or month_name==\"May\" or month_name==\"June\" or month_name==\"July\" or month_name==\"August\" or month_name==\"September\" or month_name==\"October\" or month_name==\"November\" or month_name==\"December\":\n        return True\n    else:\n        return False\n\ndef month_name_to_int(month_name):\n    month_name=str(month_name)\n    if month_name==\"January\":\n        return 1\n    if month_name==\"February\":\n        return 2\n    if month_name==\"March\":\n        return 3\n    if month_name==\"April\":\n        return 4\n    if month_name==\"May\":\n        return 5\n    if month_name==\"June\":\n        return 6\n    if month_name==\"July\":\n        return 7\n    if month_name==\"August\":\n        return 8\n    if month_name==\"September\":\n        return 9\n    if month_name==\"October\":\n        return 10\n    if month_name==\"November\":\n        return 11\n    if month_name==\"December\":\n        return 12\n    else:\n        return None", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month.lower() in [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]:\n        if month.lower() == \"december\":\n            if (int(year)%4 == 0) and (int(year)%100 != 0) or (int(year)%400 == 0):\n                return True\n            else:\n                return False\n        elif month.lower() == \"february\":\n            if (int(year)%4 == 0) and (int(year)%100 != 0) or (int(year)%400 == 0):\n                return True\n            elif (int(year)%4 == 0) and (int(year)%100 == 0):\n                return False\n            elif (int(year)%400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return False\n    elif month.lower() in [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"]:\n        if month.lower() == \"jan\":\n            if (int(year)%4 == 0) and (int(year)%100 != 0) or (int(year)%400 == 0):\n                return True\n            else:\n                return False\n        elif month.lower() == \"feb\":\n            if (int(year)%4 == 0) and (int(year)%100 != 0) or (int(year)%400 == 0):\n                return True\n            elif (int(year)%4 == 0) and (int(year)%100 == 0):\n                return False\n            elif (int(year)%400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    monthname = month.upper()\n    if monthname in ('JANUARY','FEBRUARY','MARCH','APRIL','MAY','JUNE','JULY','AUGUST','SEPTEMBER','OCTOBER','NOVEMBER','DECEMBER'):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month==\"January\":\n        return True\n    elif month==\"February\":\n        return False\n    else:\n        raise ValueError(\"Invalid month name\")\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month.lower() == \"february\":\n        return False\n    elif month.lower() == \"december\":\n        return False\n    elif month.lower() == \"july\":\n        return True\n    elif month.lower() == \"november\":\n        return True\n    elif month.lower() == \"february\":\n        return True\n    elif month.lower() == \"march\":\n        return True\n    elif month.lower() == \"january\":\n        return True\n    elif month.lower() == \"april\":\n        return True\n    elif month.lower() == \"october\":\n        return True\n    elif month.lower() == \"may\":\n        return True\n    elif month.lower() == \"june\":\n        return True\n    elif month.lower() == \"august\":\n        return True\n    elif month.lower() == \"september\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month.lower() == \"february\" or month.lower() == \"feb\":\n        return True\n    else:\n        return False\n\n#Print Function\n#def print_month(month):\n#    if check_monthnumber(month) == True:\n#        print(\"{} has 30 days\".format(month))\n#    else:\n#        print(\"{} has 31 days\".format(month))\n\n#print_month(\"February\")\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month.lower() in [\"january\",\"february\",\"march\",\"april\",\"may\",\"june\",\"july\",\"august\",\"september\",\"october\",\"november\",\"december\"]:\n        if len(month.lower())==8:\n            if int(month.lower()[-2:])==31:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str):\n    return bool(re.search('\\d',str) and re.search('\\w',str))", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    string = string.lower()\n    letter_count = 0\n    number_count = 0\n    for char in string:\n        if char.isalpha():\n            letter_count += 1\n        if char.isdigit():\n            number_count += 1\n    if letter_count > 0 and number_count > 0:\n        return True\n    return False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str):\n    n = len(str)\n    num = 0\n    for i in range(n):\n        if str[i].isdigit():\n            num = 1\n            break\n    if num:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    return any(char.isdigit() or char.isalpha() for char in string)\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    for i in range(len(string)):\n        if string[i].isdigit():\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    for char in string:\n        if char.isdigit():\n            return True\n        elif char.isalpha():\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n\tif len(string) == 0:\n\t\treturn False\n\tif any(map(lambda x: x.isdigit(), string)):\n\t\treturn True\n\tif any(map(lambda x: x.isalpha(), string)):\n\t\treturn True\n\treturn False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(str):\n    num = 0\n    let = 0\n    for i in str:\n        if i.isnumeric():\n            num +=1\n        else:\n            let +=1\n    if num != 0 or let != 0:\n        return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    # Write your code here\n    return bool(re.search(r'\\d', string) and re.search(r'\\w', string))\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str):\n    for i in range(len(str)):\n        if str[i].isalpha() or str[i].isdigit():\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(my_tuple):\n    my_dict = {}\n    for x in my_tuple:\n        my_dict[x] = True\n    return [x for x in my_tuple if x in my_dict]\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tuple):\n    \"\"\"\n    Tuples are immutable, so a new tuple is created and returned\n    \"\"\"\n    # TODO: Write your code here\n    return tuple(list(set(tuple)))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\nfrom typing import Tuple\n\ndef remove_tuple(t: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    # print(t)\n    # print(type(t))\n    # print(t.__class__)\n    # print(t.__doc__)\n    # print(t.__name__)\n    # print(t.__module__)\n    # print(t.__doc__)\n    # print(t.__source__)\n    # print(t.__file__)\n    # print(t.__annotations__)\n    # print(t.__globals__)\n    # print(t.__class__.__annotations__)\n    # print(t.__class__.__doc__)\n    # print(t.__class__.__name__)\n    # print(t.__class__.__module__)\n    # print(t.__class__.__source__)\n    # print(t.__class__.__file__)\n    # print(t.__class__.__globals__)\n    # print(t.__class__.__class__.__doc__)\n    # print(t.__class__.__class__.__name__)\n    # print(t.__class__.__class__.__module__)\n    # print(t.__class__.__class__.__source__)\n    # print(t.__class__.__class__.__file__)\n    # print(t.__class__.__class__.__globals__)\n\n    # print(t.count(1))\n    # print(t.index(1))\n\n    # print(t.pop())\n    # print(t.pop(0))\n\n    # print(t.remove(1))\n\n    # print(t.reverse())\n\n    # print(t.sort())\n\n    # print(t.sort(reverse=True))\n\n    # print(t.copy())\n\n    # print(tuple(t))\n\n    # print(tuple(t))\n\n    # print(tuple(t).count(1))\n    # print(tuple(t).index(1))\n\n    # print(tuple(t).pop())\n    # print(tuple(t).pop(0))\n\n    # print(tuple(t).remove(1))\n\n    # print(tuple(t).reverse())\n\n    # print(tuple(t).sort())\n\n    # print(tuple(t).sort(reverse=True", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(t):\n    # you can use set here\n    # t = set(t)\n    # but it doesn't work if t is of type list\n    # so you have to use list comprehension here\n    return [x for x in t if t.count(x) == 1]\n\n\ndef remove_tuple2(t):\n    # you can use set here\n    # t = set(t)\n    # but it doesn't work if t is of type list\n    # so you have to use list comprehension here\n    return [x for x in t if t.count(x) == 1]\n\n\ndef remove_tuple3(t):\n    return list(filter(lambda x: t.count(x) == 1, t))\n\n\ndef remove_tuple4(t):\n    return list(set(t))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    # TODO: Add your code here\n    tup = set(tup)\n    return tup\n\n\ndef remove_list(list1):\n    # TODO: Add your code here\n    return list(set(list1))\n\n\ndef remove_dict(dict1):\n    # TODO: Add your code here\n    return dict(zip(dict1.keys(), [dict1[k] for k in dict1.keys() if dict1[k] != None]))\n\n\ndef merge_dict_lists(d1, d2, c=\"t\"):\n    # TODO: Add your code here\n    d2 = dict(zip(d2.keys(), [d2[k] for k in d2.keys() if d2[k] != None]))\n    d = {**d1, **d2}\n    return d\n\n\ndef remove_empty(d):\n    # TODO: Add your code here\n    return {k: v for k, v in d.items() if v is not None}\n\n\ndef remove_none(d):\n    # TODO: Add your code here\n    return {k: v for k, v in d.items() if v is not None}\n\n\ndef zip_list_tuple(l1, l2):\n    # TODO: Add your code here\n    return list(zip(l1, l2))\n\n\ndef make_zip_list(tup):\n    # TODO: Add your code here\n    return list(zip(*tup))\n\n\ndef make_zip_tuple(l1, l2):\n    # TODO: Add your code here\n    return tuple(zip(l1, l2))\n\n\ndef zip_list_list(l1, l2):\n    # TODO: Add your code here\n    return list(zip(l1, l2))\n\n\ndef make_zip_tuple_list(l1, l2, c=\"t\"):\n    # TODO: Add your code here\n    return tuple(zip(l1, l2))\n\n\ndef make_zip_tuple_tuple(tup1, tup2, c=\"", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    \"\"\"\n        Args:\n        tup: (list/tuple)\n\n        Returns:\n        (list/tuple) - a tuple with duplicates removed\n    \"\"\"\n    return list(set(tup))\n\n# DO NOT MODIFY BELOW THIS LINE\ndef test_remove_tuple():\n    print(remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)))\n    print(remove_tuple((2, 1, 2, 1, 1, 2, 1, 1, 2)))\n    print(remove_tuple((1, 2, 1, 2, 2, 1, 2, 1, 1)))\n    print(remove_tuple((2, 2, 2, 2, 2, 2, 2, 2, 2)))\n    print(remove_tuple((3, 3, 3, 3, 3, 3, 3, 3, 3)))\n    print(remove_tuple((4, 4, 4, 4, 4, 4, 4, 4, 4)))\n    print(remove_tuple((5, 5, 5, 5, 5, 5, 5, 5, 5)))\n    print(remove_tuple((6, 6, 6, 6, 6, 6, 6, 6, 6)))\n    print(remove_tuple((7, 7, 7, 7, 7, 7, 7, 7, 7)))\n    print(remove_tuple((8, 8, 8, 8, 8, 8, 8, 8, 8)))\n    print(remove_tuple((9, 9, 9, 9, 9, 9, 9, 9, 9)))\n    print(remove_tuple((10, 10, 10, 10, 1", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(my_tuple):\n    my_list = list(my_tuple)\n    my_list.sort()\n    return tuple(my_list)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_duplicates(t):\n    \"\"\"\n    :type t: tuple\n    :rtype: tuple\n    \"\"\"\n    # Your code here\n    t.sort()\n    d = dict()\n    for a in t:\n        if a in d:\n            del d[a]\n        else:\n            d[a] = a\n    return tuple(d.keys())", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(lst):\n    return list(set(lst))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    t = set(tup)\n    return tuple(t)"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_Number):\n    octal_Number = str(octal_Number)\n    decimal_Number = 0\n    for i in range(len(octal_Number)):\n        decimal_Number += (ord(octal_Number[i]) - ord('0') * 8**(len(octal_Number) - 1 - i))\n    return decimal_Number\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(n):\n    return 0\n\ndef test_octal_To_Decimal():\n    assert octal_To_Decimal(25) == 21\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal):\n    decimal = 0\n    for i in range(0, len(octal)):\n        decimal = decimal + int(octal[i]) * (8 ** (len(octal) - 1 - i))\n\n    return decimal\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_num):\n    if type(octal_num) == int or type(octal_num) == long:\n        octal_num = int(octal_num)\n\n    # Discard the 1st digit\n    base = 8\n    result = (octal_num / base) * 10\n    temp = (octal_num % base)\n    result += (temp - 1)\n    return result\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(n):\n  return int(n, 8)\n\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal):\n    result = 0\n    for i in range(len(octal)):\n        result += int(octal[i]) * (8**i)\n    return result\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n    decimal_value = 0\n    for index in range(len(str(octal_number))):\n        decimal_value = decimal_value + ((int(str(octal_number)[index]) - 0) * (8 ** (len(str(octal_number))-index-1)))\n    return decimal_value\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n    \"\"\"\n    :param octal_number:\n    :return:\n    \"\"\"\n    return int(octal_number, 8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_value):\n    \"\"\"\n    Convert octal number to decimal number.\n    :param octal_value: Octal number\n    :return: Decimal number\n    \"\"\"\n    decimal_value = 0\n    value_length = len(octal_value)\n    for i in range(value_length):\n        power = 8**(value_length - 1 - i)\n        digit = ord(octal_value[i]) - ord('0')\n        decimal_value += digit * power\n    return decimal_value\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(num):\n    return int(num, 8)\n\ndef octal_To_Decimal_Solution(num):\n    return sum(int(num[i]) * 8 ** (len(num) - 1 - i) for i in range(len(num)))\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            return first(arr, high, mid)\n        elif arr[mid] < arr[high]:\n            return first(arr, mid + 1, high)\n        else:\n            return mid\n    else:\n        return None\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array,ele,start=0):\n    \"\"\"\n    Return the first index of the element\n    \"\"\"\n    if ele == array[0]:\n        return 0\n    if ele == array[len(array)-1]:\n        return len(array)-1\n    if ele == array[0]:\n        return 0\n    i = start\n    while i < len(array)-1:\n        if ele > array[i] and ele < array[i+1]:\n            return i\n        i += 1\n    if ele > array[i]:\n        return i\n    return -1\n\ndef test_first():\n    assert first([1,2,3,4,5,6,6],6,6) == 5\n    assert first([1,2,3,4,5,6,6],6,0) == -1", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(l, element, start = 0, end = None):\n    if end == None:\n        end = len(l)\n    for i in range(start, end):\n        if l[i] == element:\n            return i\n    return None\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr,val,N):\n    l = 0\n    r = N-1\n    if r < l:\n        return -1\n    while l <= r:\n        mid = (l+r)//2\n        if arr[mid] == val:\n            return mid\n        if arr[mid] < val:\n            l = mid+1\n        else:\n            r = mid-1\n    return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr,el,left,right):\n\tif left >= right:\n\t\treturn -1\n\tmid = left + (right-left)//2\n\tif arr[mid] < el:\n\t\treturn first(arr,el,mid+1,right)\n\telif arr[mid] > el:\n\t\treturn first(arr,el,left,mid-1)\n\telse:\n\t\treturn mid\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, target, n):\n    l = 0\n    r = n-1\n    if target < array[l] or target > array[r]:\n        return -1\n    while l <= r:\n        mid = l + (r-l)/2\n        if array[mid] == target:\n            return mid\n        elif array[mid] > target:\n            r = mid-1\n        else:\n            l = mid+1\n    return -1\n\ndef test_first():\n    assert first([1,2,3,4,5,6,6],6,6) == 5\n    assert first([1,2,3,4,5,6,6],10,6) == -1\n\ntest_first()\n\n# test\ndef first2(array, target, n):\n    l = 0\n    r = n-1\n    while l <= r:\n        mid = l + (r-l)/2\n        if array[mid] == target:\n            return mid\n        elif array[mid] > target:\n            r = mid-1\n        else:\n            l = mid+1\n    return -1\n\ndef test_first2():\n    assert first2([1,2,3,4,5,6,6],6,6) == 5\n    assert first2([1,2,3,4,5,6,6],10,6) == -1\n\ntest_first2()", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr,n,x):\n    left = 0\n    right = n\n    if x not in arr:\n        return -1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n    return -1", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, start, end):\n    if start == end:\n        return None\n    mid = (start + end) // 2\n    if arr[mid] == 0:\n        return mid\n    elif arr[mid] == 1:\n        if mid == start:\n            return None\n        elif arr[mid - 1] == 0:\n            return None\n        return first(arr, start, mid - 1)\n    elif arr[mid] == 2:\n        if mid == end:\n            return None\n        elif arr[mid + 1] == 0:\n            return None\n        return first(arr, mid + 1, end)\n    else:\n        if mid == start:\n            return None\n        elif arr[mid - 1] == 0:\n            return None\n        return first(arr, start, mid - 1)\n\ndef test_first():\n    assert first([1,2,3,4,5,6,6],6,6) == 5", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(a,min,max):\n    for i in range(min,max):\n        if a[i]==min:\n            return i\n    return None\n\ndef first_v2(a,min,max):\n    i = bisect_left(a,min)\n    if i<len(a) and a[i]==min:\n        return i\n    return None\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr,a,b):\n    if b<a:\n        return -1\n    for i in range(a,b):\n        if arr[i] == a:\n            return i\n    return -1"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples_list, k):\n    for i in range(len(tuples_list)):\n        if len(tuples_list[i]) == k:\n            tuples_list.pop(i)\n    return tuples_list\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    return [tuple(x) for x in [i for i in zip(*tuples) if len(i) != k]]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    res = []\n    for i in tuples:\n        if len(i) != k:\n            res.append(i)\n    return res\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    \"\"\"\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1)\n    [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 2)\n    [(4, 5), (8, 6, 7)]\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 4)\n    [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 0)\n    [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1)\n    [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 2)\n    [(4, 5), (8, 6", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    return [t for t in tuples if len(t) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if len(t) == k:\n            continue\n        result.append(t)\n    return result\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    result = []\n    for el in lst:\n        if len(el) != k:\n            result.append(el)\n    return result\n\n# 25.", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuple_list, k):\n    assert isinstance(tuple_list, list) and len(tuple_list) > 0\n    assert isinstance(k, int) and k >= 0\n    \n    return tuple_list[1:]\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(ls , k):\n    return [x for x in ls if len(x) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    if k == 1:\n        return [lst]\n    else:\n        result = []\n        for i in lst:\n            for j in remove_tuples(i[1:], k-1):\n                result.append(tuple([i[0], j]))\n        return result\n\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tup1, tup2):\n    return (tup1[0] ** tup2[0], tup1[1] ** tup2[1], tup1[2] ** tup2[2], tup1[3] ** tup2[3])\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tupla1, tupla2):\n    # Write your code here\n    return tuple(map(operator.mul, tupla1, tupla2))\n\n#\n# TUPLAS Y LISTAS DE TUPLAS\n#", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(x, y):\n    a, b, c, d = x\n    e, f, g, h = y\n    return (a**e, b**f, c**g, d**h)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(tuple1, tuple2):\n    \"\"\"\n    Find the exponentiation of two tuples\n    \"\"\"\n    return tuple1, tuple2\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tuple1, tuple2):\n    # YOUR CODE GOES HERE\n    return (tuple1[0]**tuple2[0], tuple1[1]**tuple2[1], tuple1[2]**tuple2[2], tuple1[3]**tuple2[3])\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(a: Tuple[int], b: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n    >>> a = (10, 4, 5, 6)\n    >>> b = (5, 6, 7, 5)\n    >>> c = find_exponentio(a, b)\n    >>> assert c == (100000, 4096, 78125, 7776)\n    \"\"\"\n    return tuple(pow(b[i], a[i]) for i in range(4))\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tuple_a, tuple_b):\n    assert isinstance(tuple_a, tuple)\n    assert isinstance(tuple_b, tuple)\n    assert len(tuple_a) == len(tuple_b)\n    assert all(isinstance(x, int) for x in tuple_a)\n    assert all(isinstance(x, int) for x in tuple_b)\n    product = 1\n    for index in range(len(tuple_a)):\n        product *= (tuple_a[index] ** tuple_b[index])\n    return tuple_a, tuple_b, product\n\n# Test cases", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    :param a:\n    :param b:\n    :return:\n    \"\"\"\n    return (a[0], (a[1]**b[0]), (a[2]**b[0]), (a[3]**b[0]))\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tup1, tup2):\n    \"\"\"\n    >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n    (100000, 4096, 78125, 7776)\n    \"\"\"\n    return tuple(map(operator.mul, tup1, tup2))\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tupla_1, tupla_2):\n    return tuple(map(lambda x, y: x ** y, tupla_1, tupla_2))\n\ndef main():\n    # Here you can test your function\n    print(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)))\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfunction largest_triangle(a::Float64,b::Float64)\n\n    h = 0\n    c = 0\n    s = 0\n    x = 0\n    y = 0\n    for h in [1.0,1.25,1.5,1.75,2.0,2.25,2.5,2.75]\n        for s in [0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0]\n            for c in [0.0,0.25,0.5,0.75,1.0,1.25,1.5,1.75]\n                for x in [-1.0,-0.75,-0.5,-0.25,0.0,0.25,0.5,0.75,1.0]\n                    for y in [-1.0,-0.75,-0.5,-0.25,0.0,0.25,0.5,0.75,1.0]\n                        c1 = (x^2 + (y-c)^2)/(1-s^2)\n                        c2 = (x^2 + (y+c)^2)/(1-s^2)\n                        if 0 <= c1 <= c2 && 0 <= c1+c2 <= a && (c1+c2)^2 <= b\n                            return c1\n                        end\n                    end\n                end\n            end\n        end\n    end\n    return 0\nend\n\n# +\nfunction largest_triangle(a::Float64,b::Float64,c::Float64)\n\n    h = 0\n    s = 0\n    x = 0\n    y = 0\n    for h in [1.0,1.25,1.5,1.75,2.0,2.25,2.5,2.75]\n        for s in [0.5,1.0,1.5,2.0,2.", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    return math.ceil(math.sqrt(a**2+b**2)/2)", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    #the equation of the ellipse is ax^2+bxy+cy^2=1\n    #solve for x and substitute in the equation of the ellipse\n    x1,x2=1,1\n    y1,y2=1,1\n    x3,x4=1,1\n    y3,y4=1,1\n    x1,x2=x1+a,x2+b\n    y1,y2=y1+a,y2+b\n    x3,x4=x3+a,x4+b\n    y3,y4=y3+a,y4+b\n    #substitute in the equation of the ellipse\n    x1,x2,x3,x4=x1/a,x2/a,x3/a,x4/a\n    y1,y2,y3,y4=y1/b,y2/b,y3/b,y4/b\n    #determine the lengths of the sides of the largest triangle\n    x=0\n    for i in range(4):\n        for j in range(i+1,4):\n            x=x+sqrt((x1[i]-x1[j])**2+(x2[i]-x2[j])**2)\n    y=0\n    for i in range(4):\n        for j in range(i+1,4):\n            y=y+sqrt((y1[i]-y1[j])**2+(y2[i]-y2[j])**2)\n    return x+y", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    return 2 * a * b ** 2 / (b ** 2 - a ** 2)\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    # T1 and T2 are all possible triangles\n    # T1: a,b,c\n    # T2: c,a,b\n    # T3: b,c,a\n    # T4: c,b,a\n    T1=a*a\n    T2=a*b\n    T3=b*a\n    T4=b*b\n    # 1.2*a*b is the area of the ellipse\n    area=1.2*a*b\n    # T1,T2,T3,T4 should satisfy T1+T2+T3+T4=area\n    if (T1+T2+T3+T4) != area:\n        print(f\"Error: area does not equal to T1+T2+T3+T4.\")\n        exit(1)\n\n    # 1/4*sqrt(T1*T2*T3*T4) is the length of the semi-major axis\n    ellipse_length=math.sqrt(T1*T2*T3*T4)\n    # T3 is the perimeter of the triangle.\n    triangle_perimeter=T3\n    # T4 is the area of the triangle.\n    triangle_area=T4/2\n    # The area of the triangle should satisfy\n    # triangle_area = 0.5*ellipse_length**2*math.sin(math.pi/3)\n    if (triangle_area/0.5/ellipse_length**2) != math.sin(math.pi/3):\n        print(f\"Error: Area of the triangle should be 0.5*ellipse_length**2*math.sin(math.pi/3).\")\n        exit(1)\n    return triangle_perimeter\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    return (2 * b**2 - 2 * b * a + a**2 * math.sqrt(b**2 - 4 * b * a + a**2))/2\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    s = (a+b)/2\n    if s**2 > (a-b)**2:\n        return s*s\n    else:\n        return (a-b)*2\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfunction largest_triangle(a,b)\n    # TODO: Implement me\n    return 0.0\nend\n\nfunction test_largest_triangle()\n    @test largest_triangle(4,2)==10.392304845413264\nend\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    return ((a ** 2 + b ** 2) ** 0.5) * ((a ** 2 + b ** 2) ** 0.5)\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfunction largest_triangle(a,b)\n    s,c = (b^2-a^2)/2b, (a^2-b^2)/2a\n    return s+c+\u221a(s^2+c^2)\nend\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    p = 0\n    while n & 1:\n        n >>= 1\n        p += 1\n    return p\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(num):\n    if num <= 1:\n        return 1\n    else:\n        count = 0\n        while num > 1:\n            count += 1\n            num /= 2\n        return count\n    ", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    return n & (n-1)\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2**((n-1).bit_length()))\n\ndef main():\n    n = int(input(\"Enter a positive integer: \"))\n    print(\"Highest power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n))\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    i = 1\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1\n    return i\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(x):\n    if x == 0:\n        return 0\n\n    temp = 1\n    while x >= 1:\n        if x % temp == 0:\n            x = x / temp\n        else:\n            temp = temp + 1\n\n    return temp\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    power_of_2 = 1\n    while (power_of_2 ** 2) <= num:\n        power_of_2 += 1\n    return power_of_2 - 1\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    l = 0\n    h = n\n    while l <= h:\n        m = (l + h) // 2\n        if is_Power_2(m):\n            return m\n        if m * m == n:\n            return m\n        elif m * m < n:\n            l = m + 1\n        else:\n            h = m - 1\n    return l\n\ndef is_Power_2(x):\n    return (x % 2 == 0) and (x > 0)\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    return int(math.log(n,2))\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(x):\n    ans = 0\n    for i in range(x+1):\n        if 2**ans <= i:\n            ans += 1\n    return ans\n\n# test cases"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    max_idx = []\n    for i in range(len(lst)):\n        if i==0:\n            max_idx.append(i)\n        else:\n            if lst[i]>lst[max_idx[-1]]:\n                max_idx.append(i)\n    return max_idx\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(array):\n    \"\"\"\n    Find all index positions of the maximum values in a given list.\n    :param array: list of numbers\n    :return: list of index positions of the max values in the given list\n    \"\"\"\n    assert type(array) == list\n    max_pos = []\n    for i in range(len(array)):\n        if i == 0:\n            max_pos.append(i)\n        elif array[i] > array[max_pos[len(max_pos)-1]]:\n            max_pos.append(i)\n    return max_pos\n\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    \"\"\"\n    >>> position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])\n    [7]\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    return [i for i in range(len(lst)) if lst[i]==max(lst)]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(l):\n\tpos = []\n\tfor i in range(len(l)):\n\t\tif l[i] != max(l):\n\t\t\tcontinue\n\t\tfor j in range(i+1,len(l)):\n\t\t\tif l[j] == max(l):\n\t\t\t\tpos.append(j)\n\treturn pos\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(l):\n    return [i for i in range(len(l)) if l[i] == max(l)]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(my_list):\n    return [i for i, x in enumerate(my_list) if x == max(my_list)]\n\n\n# -\n\nposition_max([12,33,23,10,67,89,45,667,23,12,11,10,54])\n\nposition_max([10,10,10,10,10,10,10,10,10,10,10,10,10])\n\nposition_max([12,33,23,10,67,89,45,667,23,12,11,10,54])", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(l):\n\t\"\"\"\n\tParameters\n\t----------\n\tl : list\n\t\tList of numbers.\n\t\n\tReturns\n\t-------\n\ttuple\n\t\tReturns the index positions of the maximum values.\n\t\"\"\"\n\tmax_pos = 0\n\tmax_val = 0\n\tfor i in range(len(l)):\n\t\tif l[i] > max_val:\n\t\t\tmax_val = l[i]\n\t\t\tmax_pos = i\n\treturn (max_pos, max_val)\n\nl = [12,33,23,10,67,89,45,667,23,12,11,10,54]", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    if not lst:\n        return []\n    maxval = None\n    maxpos = None\n    for i in range(len(lst)):\n        if maxval is None or lst[i]>maxval:\n            maxval = lst[i]\n            maxpos = i\n    return [maxpos] if maxpos is not None else []\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\nfrom typing import List\n\n\ndef position_max(list: List[int]) -> List[int]:\n    # write your code here\n    max_list = []\n    for i in range(len(list)):\n        for j in range(i + 1, len(list)):\n            if list[j] > list[i]:\n                max_list.append(j)\n    return max_list\n\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(li):\n    s = set(li)\n    if len(li) == len(s):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(lst) > 0:\n        temp = lst[0]\n        for i in range(1,len(lst)):\n            if lst[i] != temp:\n                return False\n        return True\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if lst == []:\n        return False\n    if lst[0] == lst[1]:\n        return chkList(lst[2:])\n    return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(lst) == 0:\n        return True\n    return lst[0] == lst[1] and chkList(lst[2:])\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    # your code here\n    return len(set(lst)) == 1\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    try:\n        for x in lst:\n            lst.remove(x)\n        return False\n    except:\n        return True\n\n#Test case", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(l):\n    for i in l:\n        if l.count(i) < len(l):\n            return False\n    return True\n\nnWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    from collections import Counter\n    return Counter(lst) == Counter(lst)", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n\t\"\"\"\n\tA function to check whether the elements in a list are same or not.\n\tParameters\n\t----------\n\tlst: a list\n\tReturns\n\t-------\n\tTrue/False\n\t\"\"\"\n\tif len(lst) > 1:\n\t\tif lst[0] == lst[1]:\n\t\t\tfor i in range(2,len(lst)):\n\t\t\t\tif lst[i] != lst[i-1]:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\telse:\n\t\treturn True", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(list):\n    return list == list\n\n#Testcase"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return ''.join([s for s in string if int(s) % 2 == 0])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    new=s.replace('0','').replace('2','').replace('4','').replace('6','').replace('8','')\n    return new\n\ndef test_remove_even():\n    assert remove_even(\"python\")==(\"pto\")\n    assert remove_even(\"python_2\")==(\"pty\")\n    assert remove_even(\"python_0\")==(\"pthon\")\n    assert remove_even(\"0python\")==(\"0thon\")\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return \"\".join([i for i in string if i.isalpha()])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    if len(s) <= 0:\n        return s\n    return \"\".join([c for c in s if c % 2 != 0])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(str):\n    return str[0::2]\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(str):\n    l = list(str)\n    for i in range(len(l)):\n        if l[i]%2 == 0:\n            l[i] = ''\n    return ''.join(l)\n\n\n# + [markdown] id=\"53h2k67U73Sz\"\n# ## Example 2\n#\n# 1. Write a function that takes in a string and returns a list with all the words that start with the letter 'i'.\n#\n# 2. Write a function that takes in a string and returns a list with all the words that end with the letter 'n'.\n\n# + id=\"d-ZAkN2x73Sz\" colab={\"base_uri\": \"https://localhost:8080/\"} outputId=\"b23a7a90-f822-491e-a1b7-d239c9b10445\"", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    string = string.replace(\"e\",\"e\")\n    string = string.replace(\"E\",\"E\")\n    string = string.replace(\"e\",\"e\")\n    string = string.replace(\"E\",\"E\")\n    string = string.replace(\"e\",\"e\")\n    string = string.replace(\"E\",\"E\")\n    string = string.replace(\"e\",\"e\")\n    string = string.replace(\"E\",\"E\")\n    return string\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return \"\".join([c for c in string if c%2==0])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(str):\n\teven = \"\"\n\tfor char in str:\n\t\tif int(char)%2 == 0:\n\t\t\teven+=char\n\treturn even\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(str):\n    return \"\".join([i for i in str if i % 2 == 1])\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(a,b):\n    return bin(a^b).count(\"1\")\n\n\n# +", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(num1,num2):\n    return sum([i for i in bin(num1^num2)[2:].zfill(8) if i == '1'])\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a, b):\n    total_count = 0\n    #convert to int type, needed in python\n    a = int(a)\n    b = int(b)\n    #convert into binary and count number of 1s in the binary\n    for i in bin(a)[2:]:\n        total_count += i\n    for i in bin(b)[2:]:\n        total_count += i\n    #return the hamming distance\n    return total_count\n\n\n#Driver code", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(a,b):\n    return bin(a^b).count(\"1\")\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(n1, n2):\n    a = bin(n1)[2:].zfill(8)\n    b = bin(n2)[2:].zfill(8)\n    c = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            c += 1\n    return c\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(a,b):\n    \n    total = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            total +=1\n    return total\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(num1, num2):\n    if num1 == num2:\n        return 0\n    return bin(num1 ^ num2).count('1')\n\ndef hamming_Distance2(num1, num2):\n    return bin(num1 ^ num2).count('1')\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n    if x>y:\n        x=x-y\n    else:\n        y=y-x\n    if x>y:\n        x=x+y\n    return x\n\n#Using function", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(n1, n2):\n    return bin(n1 ^ n2).count(\"1\")\n\n\n# # Question 10: Fibonacci Series\n# Write a python function to find the nth number in the Fibonacci Series.\n\n# +\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(num1,num2):\n    if num1 != num2:\n        return 2\n    \n    return 0\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n#\n\n# # Method 1 (Simple)\n\ndef count(string, c):\n    '''\n    >>> count(\"abcc\",\"c\")\n    2\n    '''\n    return string.count(c)\n\n# # Method 2 (Using Set)\n\ndef count(string, c):\n    '''\n    >>> count(\"abcc\",\"c\")\n    2\n    '''\n    return len(set(string).intersection(c))\n\n# # Method 3 (Using Counter)\n\ndef count(string, c):\n    '''\n    >>> count(\"abcc\",\"c\")\n    2\n    '''\n    return sum(1 for c in string if c == c)\n\n# # Method 4 (Using Dictionary)\n\ndef count(string, c):\n    '''\n    >>> count(\"abcc\",\"c\")\n    2\n    '''\n    return sum(1 for c in string.lower() if c == c.lower())\n\n# # Method 5 (Using list)\n\ndef count(string, c):\n    '''\n    >>> count(\"abcc\",\"c\")\n    2\n    '''\n    return len([c for c in string if c == c])\n\n# # Method 6 (Using list and set)\n\ndef count(string, c):\n    '''\n    >>> count(\"abcc\",\"c\")\n    2\n    '''\n    return len(list(set([c for c in string if c == c])))", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, character):\n    return sum(1 for c in string if c == character)\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(s,c):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == c:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(s, ch):\n    return s.count(ch)\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(text, char):\n    return text.count(char)\n\n\ndef count_test():\n    assert count(\"abcc\",\"c\") == 2\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(s, c):\n    return s.count(c)\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, char):\n    \"\"\"\n    :param string:\n    :param char:\n    :return:\n    \"\"\"\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(s, ch):\n    \"\"\"Count the occurrence of a given character in a string\"\"\"\n    return s.count(ch)\n\n# test", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, char):\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(word, c):\n    return word.count(c)\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    invs = []\n    for tuple_idx in range(len(tuple_list)):\n        for i in range(tuple_idx):\n            if tuple_list[i] > tuple_list[i+1]:\n                invs.append((tuple_idx, i, tuple_list[i], tuple_list[i+1]))\n    return tuple(invs)\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom typing import Tuple\n\nimport pytest\n\nfrom src.common.types import Tupple\n\n\ndef inversion_elements(tupple_list: Tuple[Tupple, ...]) -> Tuple[Tupple, ...]:\n    \"\"\"\n    Inversions are in the range of n-1 to n, so we iterate from 1 to the length of the tuple and\n    add the difference of the list elements to the previous.\n    :param tupple_list: Tuple list containing tuples to check\n    :return: Tuple of inversion indexes\n    \"\"\"\n    return tuple(\n        (x - 1, x)\n        for i, x in enumerate(tupple_list)\n        for j in range(i + 1, len(tupple_list))\n        if tupple_list[j] > x\n    )\n\n\ndef test_inversion_elements():\n    \"\"\"\n    Test inversion_elements\n    \"\"\"\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\nfrom typing import Tuple\nfrom unittest import TestCase\n\n\ndef inversion_elements(tuple_list: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"\n    Use sort to sort the elements in the tuple list, then return the tuple of indices where the elements\n    were reversed in the list.\n    >>> inversion_elements((7, 8, 9, 1, 10, 7))\n    (-8, -9, -10, -2, -11, -8)\n    >>> inversion_elements((1, 2, 3, 4, 5, 6))\n    ()\n    \"\"\"\n    return tuple(\n        i\n        for i, x in enumerate(sorted(tuple_list))\n        if x != tuple_list[tuple_list.index(x) - 1]\n    )\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    \"\"\"\n    write your code here\n    \"\"\"\n    # your code here\n    return tuple_list[1:]\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    \"\"\"Write your code here\"\"\"\n    return tuple(sorted([x[1] for x in enumerate(tuple_list) if x[1] > x[0]]))\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(seq):\n    pass\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(lst):\n    return sorted(filter(lambda x: x != None, map(lambda x: lst.count(x), lst)))\n\ndef test_inversion_elements():\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tup_list):\n    res = []\n    for t in tup_list:\n        for i, j in zip(t, t[1:]):\n            if i > j:\n                res.append((i, j))\n    return tuple(res)\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef inversion_elements(elements: List[Tuple[int]]) -> List[int]:\n    \"\"\"\n    :param elements: list of tuples\n    :return: list of inversions in the tuples\n    \"\"\"\n    inversions: List[int] = []\n    for index, element in enumerate(elements[:-1]):\n        for element_next in elements[index + 1:]:\n            if element > element_next:\n                inversions.append(element_next)\n                inversions.append(element)\n    return inversions\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    res = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[j] < tuple_list[i]:\n                res.append(j-i)\n    return res\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    return tuple(element[0] + ' ' + element[1] + ' ' + element[2] + ' ' + element[3] + ' ' + element[4] + ' ' + element[5] for element in tuples)\n\n#print(concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")))\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple):\n    res = []\n    for i in range(len(tuple)):\n        res.append(tuple[i] + tuple[i+1])\n    return res\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_of_strings):\n    if isinstance(tuple_of_strings, tuple) and len(tuple_of_strings) > 0:\n        return tuple(str(i) for i in tuple_of_strings[0]) + concatenate_elements(tuple_of_strings[1:])\n    else:\n        return tuple()\n\ndef main():\n    print(\"All test passed!\")\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_to_add):\n    \"\"\"\n    Function to concatenate elements in the given tuples.\n    \"\"\"\n    result = []\n    for i in range(0, len(tuple_to_add)-1):\n        result.append(tuple_to_add[i] + tuple_to_add[i+1])\n    return result\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n\telements = \"\"\n\tfor t in tuples:\n\t\telements += t\n\treturn elements\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(string):\n    return (string[i:i+2] for i in range(0, len(string), 2))\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(l):\n    new_l = list()\n    for i in range(len(l)):\n        if i != 0:\n            new_l.append(\" \" + l[i])\n        else:\n            new_l.append(l[i])\n    return ''.join(new_l)\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tup):\n    \"\"\"\n    write a function to perform the adjacent element concatenation in the given tuples\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    \"\"\"\n    # your code goes here\n    temp_list = list(tup)\n    return ' '.join(temp_list)\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(input_tuple):\n    return [item + \" \" for item in input_tuple[:-1]] + [item + \"\\n\" for item in input_tuple[-1:]]\n\n\ndef test_concatenate_elements():\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\n# First, let's use the `for` loop to iterate through each element of the tuples.\n# Then, we'll concatenate the adjacent elements with a `+` sign.\n# Finally, we'll return the concatenated elements.\ndef concatenate_elements(tuples):\n    concatenated_elements = \"\"\n    for element in tuples:\n        concatenated_elements += element + \" \"\n    return concatenated_elements\n\n# Here is the example usage:\n\ntuples = (\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")\n\n# Calling the function"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(str1):\n    # Write your code here\n    if len(str1) == 0:\n        return 0\n    # dp table to find the length of longest repeating subseq\n    # at str1[i]\n    dp = [0] * (len(str1) + 1)\n\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1) + 1):\n            if str1[i] == str1[j]:\n                dp[j] = max(dp[j - 1], dp[j]) + 1\n            else:\n                dp[j] = dp[j - 1]\n    return dp[len(str1)]\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(input):\n    if not input:\n        return 0\n\n    curr_max = 0\n    curr_result = 0\n    max_so_far = 0\n    for i in range(len(input) - 1):\n        for j in range(i + 1, len(input)):\n            subseq = input[i:j]\n            if not subseq in input[j + 1:]:\n                curr_result = j - i\n                curr_max = max(curr_result, curr_max)\n\n    return curr_max\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    Time Complexity: O(n^3)\n    Space Complexity: O(n^2)\n    \"\"\"\n    if len(s) < 2:\n        return 0\n    n = len(s)\n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(i+1,j+1):\n                if len(s[i:k]) > max_len and len(s[j:k]) > max_len and s[i:k] != s[j:k]:\n                    max_len = len(s[i:k])\n    return max_len\n\n\ndef test_function():\n    assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n    print(\"All test cases passed!\")\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    return lcs(string)\n\n\ndef lcs(string):\n    T = [[0] * (len(string) + 1) for _ in range(len(string) + 1)]\n    for i in range(1, len(string) + 1):\n        for j in range(1, len(string) + 1):\n            if string[i-1] == string[j-1]:\n                T[i][j] = 1 + T[i-1][j-1]\n            else:\n                T[i][j] = max(T[i-1][j], T[i][j-1])\n    return T[len(string)][len(string)]\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    if not s:\n        return 0\n    res = 0\n    start, cur_len, prev_len = 0, 1, 0\n    while start < len(s):\n        while start < len(s) and cur_len < len(s) and s[start] == s[cur_len]:\n            prev_len = cur_len\n            cur_len += 1\n        res = max(res, cur_len-prev_len)\n        start += 1\n        cur_len = 1\n    return res", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    max_length = 0\n    max_length_subseq = None\n    for i in range(len(string)):\n        length_left = 0\n        length_right = 0\n        for j in range(i):\n            if string[i] == string[j]:\n                length_left += 1\n            else:\n                break\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                length_right += 1\n            else:\n                break\n        if length_right > length_left:\n            length = length_right\n        else:\n            length = length_left\n        if length > max_length:\n            max_length = length\n            max_length_subseq = i\n    return max_length_subseq\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(str):\n    if not str:\n        return 0\n\n    if len(str) <= 1:\n        return 1\n\n    longest = 0\n    for i in range(len(str) - 1):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j]:\n                tmp = find_longest_repeating_subseq(str[:i] + str[i + 1:j] + str[j + 1:])\n                if tmp > longest:\n                    longest = tmp\n    return longest + 1\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    TLE\n    \"\"\"\n    return len(longest_repeating_subseq(s))\n\n\ndef longest_repeating_subseq(s):\n    \"\"\"\n    Use a defaultdict for counting the number of times each character appears.\n    \"\"\"\n    d = defaultdict(int)\n    for c in s:\n        d[c] += 1\n    result = []\n    for c, count in d.items():\n        if count == 2:\n            result.append(c)\n    return result\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    :param s: string\n    :return: length of longest repeating subseq\n    \"\"\"\n    if not s:\n        return 0\n\n    memo = {}\n    def helper(s, start):\n        if s[start] in memo:\n            return memo[s[start]]\n\n        if start == len(s) - 1:\n            return 1\n\n        if s[start:start+2] in memo:\n            return memo[s[start:start+2]]\n\n        ret = 0\n        for i in range(start + 1, len(s)):\n            if s[start:i+1] in memo:\n                ret = max(ret, helper(s, i + 1))\n\n        memo[s[start]] = ret + 1\n        return ret + 1\n\n    return helper(s, 0)\n\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(decimal_string: str) -> bool:\n    if re.search(r'[^0-9]', decimal_string):\n        return False\n    if re.search(r'[^.]', decimal_string):\n        return False\n    if re.search(r'[^.]', decimal_string):\n        return False\n    return True\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(number):\n    \"\"\"\n    :param number: str, decimal number\n    :return: bool\n    \"\"\"\n    #Check the decimal number has 2 digits before and after the decimal point\n    if re.search('[0-9]+\\.[0-9]{2}', number):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(decimal):\n    pattern = r'(\\d*\\.?\\d{1,2})'\n    return bool(re.match(pattern, decimal))\n\n# Tests", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(num):\n    if num.isdigit():\n        return True\n    return bool(re.match('^-?\\d+(\\.\\d+)?$', num))\n\n#Test Cases", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\n\ndef is_decimal(s):\n    \"\"\"\n    Write a function to check the given decimal with a precision of 2 by using regex.\n\n    :param s:\n    :return:\n    \"\"\"\n    if re.match(r'^[-+]?[0-9]+\\.?[0-9]*$', s):\n        return True\n    return False\n\n\ndef test():\n    assert is_decimal('123.11') == True\n\n\ntest()", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(s):\n    if re.search(r'^\\d*\\.?\\d{2}$', s):\n        return True\n    return False\n\ndef is_decimal(s):\n    return bool(re.search(r'^\\d*\\.?\\d{2}$', s))\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(decimal):\n    decimal = decimal.replace(',', '')\n    decimal = decimal.replace('.', '')\n    if decimal == '0':\n        return False\n    elif decimal.find(',') != -1 or decimal.find('.') != -1:\n        return False\n    elif decimal.isdigit():\n        decimal = decimal.split('.')[0]\n        for digit in decimal:\n            if digit not in '0123456789':\n                return False\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(decimal):\n    # Modify this line\n    # assert decimal.find('e') == -1 and decimal.find('.') != -1 and decimal.find('.') != 0 and len(decimal.split('.')[1]) <= 2\n    assert re.match(r'^[0-9]+\\.[0-9]{1,2}$', decimal) != None\n    return True\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(num):\n    return re.match(r'^[0-9]+(\\.[0-9]+)?$', num)\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(input_list,input_item):\n    \"\"\"\n    Write a function to delete the smallest element from the given heap and then insert a new item.\n    assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n    \"\"\"\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    if not input_list:\n        return []\n\n    root_index = 0\n    swap_index = 0\n    while root_index < len(input_list):\n        if input_list[root_index] > input_list[swap_index]:\n            swap_index = root_index\n        root_index += 1\n\n    input_list[swap_index], input_list[root_index] = input_list[root_index], input_list[swap_index]\n    return input_list\n\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(A,item):\n    A[0] = item\n    heap_insert(A)\n    return A\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_item):\n  heap[0] = new_item\n  heapify(heap, 0)\n  return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\n# Function to convert a binary tree to sorted inorder\ndef sorted_inorder(root):\n    if root == None:\n        return\n    sorted_inorder(root.left)\n    print root.data,\n    sorted_inorder(root.right)\n\n# Driver program\nroot = None\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(A,val):\n    h = heap(A)\n    h.replace_min(val)\n    return h.heap_data\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(a,b):\n    #Write your code here\n    s=heapq.nsmallest(len(a)-1, a, key=lambda x: a[x])\n    heapq.heappush(a,b)\n    heapq.heapify(a)\n    return a", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap,new_item):\n    heap[0] = new_item\n    heapify(heap,0,len(heap)-1)\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace( heap, key ):\n    heapq.heapreplace( heap, (key, key))\n\n#assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace( h, x):\n    \"\"\"\n    Time complexity: O(logn)\n    \"\"\"\n    raise NotImplementedError(\"TODO: implement me\")\n\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap,new_element):\n    heap_size=heap_size(heap)\n    min_index=min_index(heap)\n    heap[min_index],heap[0]=heap[0],heap[min_index]\n    heap[0]=new_element\n    heapify(heap,0,heap_size)\n    return heap\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    return (re.search(r'[a-zA-Z0-9]', string) != None)\n\n#Test cases", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string_to_check: str) -> bool:\n    pattern = \"^[a-zA-Z0-9]+$\"\n    return re.search(pattern, string_to_check) is not None\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(text: str) -> bool:\n    return bool(re.match(r\"^[a-zA-Z0-9]+$\", text))\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(string):\n    \"\"\"\n    Check that the given string contains only a certain set of characters by using regex.\n    \n    Args:\n        string: string to be checked\n    \n    Returns:\n        boolean value indicating whether the string contains only allowed characters\n    \"\"\"\n    return re.match(\"^[a-z0-9]*$\", string) is not None\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    return all(c.isalpha() or c.isdigit() for c in string)\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(str):\n    #Using regex to check the given string against the given pattern\n    return re.match(r'^[a-z0-9]*$', str) is not None\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(string):\n    return (re.fullmatch(r\"^.{6,6}$\", string))\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(s):\n    # your code here\n    r = r\"^([0-9a-zA-Z]+)\\Z\"\n    return bool(re.match(r, s))\n\n#assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n#assert is_allowed_specific_char(\"abcdefgh\") == False\n#assert is_allowed_specific_char(\"123\") == False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    return bool(re.search(\"^[a-zA-Z0-9]*$\", string))\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(s):\n    \"\"\"\n    returns True if all characters in s are a-z, a-z and 0-9\n    \"\"\"\n\n    return re.search(\"[a-zA-Z0-9]\",s) is not None\n\n# Tests"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(num):\n    answer = 0\n    for i in range(num):\n        for j in range(num):\n            if (i&1==1) and (j&1==1) and (i!=j):\n                answer = answer + 1\n    return answer\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    return 2\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(100000000000000000000000):\n        if nth_bit(i, 0) == nth_bit(i, 1) == nth_bit(i, 2) == nth_bit(i, 3) == nth_bit(i, 4) == nth_bit(i, 5) == nth_bit(i, 6) == nth_bit(i, 7) == nth_bit(i, 8) == nth_bit(i, 9) == 0:\n            continue\n        if nth_bit(i, 0) == nth_bit(i, 1) == nth_bit(i, 2) == nth_bit(i, 3) == nth_bit(i, 4) == nth_bit(i, 5) == nth_bit(i, 6) == nth_bit(i, 7) == nth_bit(i, 8) == nth_bit(i, 9) == 1:\n            continue\n        if nth_bit(i, 0) == nth_bit(i, 1) == nth_bit(i, 2) == nth_bit(i, 3) == nth_bit(i, 4) == nth_bit(i, 5) == nth_bit(i, 6) == nth_bit(i, 7) == nth_bit(i, 8) == nth_bit(i, 9) == 2:\n            continue\n        if nth_bit(i, 0) == nth_bit(i, 1) == nth_bit(i, 2) == nth_bit(i, 3) == nth_bit(i, 4) == nth_bit(i, 5) == nth_bit(i, 6) == nth_bit(i, 7) == nth_bit(i, 8) == nth_bit(i, 9) == 3:\n            continue\n        if nth_bit(i, ", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n\tl = []\n\tfor i in range(1,n+1):\n\t\ttemp = 0\n\t\tfor j in range(1,i+1):\n\t\t\ttemp+=bin(j)[2::2] * bin(i)[2::2]\n\t\tl.append(temp)\n\treturn l\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    result = 0\n    for i in range(10):\n        if num & 1 << i:\n            result += 1\n            if num & 1 << 1:\n                break\n    return result\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(num):\n    result = 0\n    for i in range(1, num+1):\n        num = bin(i)[2:]\n        result += sum([int(num[i]) * int(num[i+1]) for i in range(len(num)-1)])\n    return result\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(2**n):\n        if (i & 1) == 1 and (i & 2) == 1:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n# https://www.interviewbit.com/problems/count-numbers-whose-nth-bit-set/\n\n\ndef count_Num(n):\n    return n\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    return sum([2**k for k in range(n+1)])\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    x = [2 ** i for i in range(n)]\n    return sum([n % x[i] == 0 for i in range(n)])\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**4)\n    return sum", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    result = 0\n    for i in range(n, n**2 + 1):\n        if i ** 4 % 10000 == 0:\n            result += i ** 4\n    return result\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    ans = 0\n    for i in range(n + 1):\n        ans += i**4\n    return ans\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i**4\n    return sum", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n: int) -> int:\n    result = 0\n    for i in range(1, n+1):\n        result += i**4\n    return result\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            for k in range(1,j+1):\n                for l in range(1,k+1):\n                    sum = sum + i**4 + j**4 + k**4 + l**4\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    return n**4 + (n-1)**4 + (n-2)**4 + (n-3)**4\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    \"\"\"\n    Concatenates 2 tuples of strings\n    :param tuple1: Tuple of strings\n    :param tuple2: Tuple of strings\n    :return: Concatenated tuple of strings\n    \"\"\"\n    return tuple(tuple1 + tuple2)\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(a, b):\n    return tuple(map(str, a + b))\n\n\ndef test_concatenate_strings():\n    assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tup1, tup2):\n    # Your code here\n    return tuple(tup1[0] + tup2[0], tup1[1] + tup2[1], tup1[2] + tup2[2])\n#assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\n# Write a function to find the sum of all the digits of a positive integer.", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    return tuple([tuple1[0]] + list(tuple2) + [tuple1[1]])\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(strings_tuple1, strings_tuple2):\n  return tuple([strings_tuple1[0]] + list(strings_tuple2))\n\n# Your code here\n\n\n# +", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(strings):\n    return tuple(map(str.join, itertools.zip_longest(*strings)))\n\n# testing\nstrings = [(\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")]", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(list1, list2):\n    return tuple(list1 + list2)\n\n# # Testing", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple_1, tuple_2):\n    \"\"\"\n    >>> concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))\n    ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    \"\"\"\n    return tuple_1 + tuple_2\n\n#Test\n#print(concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")))\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple_1, tuple_2):\n    return tuple(x + \" \" + y for x, y in zip(tuple_1, tuple_2))\n\n\n#%%\n\n#5.\n#Write a function to convert a string to a tuple of letters.\n#assert convert_to_tuple(\"mango\") == ('m', 'a', 'n', 'g', 'o')\ndef convert_to_tuple(string):\n    return tuple(string)\n\n\n#%%\n#6.\n#Write a function to convert a tuple of letters to a string.", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(s1, s2):\n    return zip(*s1, *s2)\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    degree=radian*180/math.pi\n    return degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(theta):\n    assert isinstance(theta, float)\n    return theta * 180 / math.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(r):\n    return r * 180/math.pi\n\n\ndef main():\n    print \"This is a test module.\"\n    print \"test degree_radian:\"\n    assert degree_radian(0.1) == 1.0\n    assert degree_radian(math.pi) == 180\n    assert degree_radian(-0.1) == -1.0\n    print \"test sin:\"\n    assert abs(sin(0.1) - 0.9899925) < 0.0001\n    print \"test cos:\"\n    assert abs(cos(0.1) - 0.10000000000000001) < 0.0001\n    print \"test tan:\"\n    assert abs(tan(0.1) - 1.0000000000000002) < 0.0001\n    print \"test arc_cos:\"\n    assert abs(arc_cos(0.9899925) - 0.1) < 0.0001\n    print \"test arc_sin:\"\n    assert abs(arc_sin(0.10000000000000001) - 0.1) < 0.0001\n    print \"test arc_tan:\"\n    assert abs(arc_tan(1.0000000000000002) - 0.1) < 0.0001\n    print \"test degrees_to_radian:\"\n    assert abs(degrees_to_radian(30) - 0.5235998661907431) < 0.0001\n    print \"test radian_to_degrees:\"\n    assert abs(radian_to_degrees(0.5235998661907431) - 30) < 0.0001\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    \"\"\"Calculate angle from radians to degrees.\n    \"\"\"\n    degree = radian*180/np.pi\n    return degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(angle):\n    return angle*180/math.pi\n\ndef test_degree_radian():\n    assert degree_radian(90)==5156.620156177409\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\nfunction degree_radian(x)\n    #return x*180/pi\n    return x*180.0/pi\nend\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian * (180 / math.pi)\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian*180/math.pi\n\n# 75", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(r):\n    return r/np.pi*180\n\ndef test_degree_radian():\n    assert degree_radian(90)==5156.620156177409\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\nassert degree_radian(90)==5156.620156177409\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(L):\n    \"\"\"\n    Decodes a run-length encoded list.\n    \"\"\"\n    return [L[0]] + [L[i-1] * L[i] for i in range(1,len(L),2)]\n\n\n# -\n\ndecode_list([1,1,1,1,1,1,1,1])", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(lst):\n    \"\"\"\n    lst is a list of integers and lists of integers\n    \"\"\"\n    res = []\n    while lst:\n        if type(lst[0]) is not list:\n            res.extend([lst[0]]*lst[1])\n            lst = lst[2:]\n        else:\n            res.append(lst.pop(0))\n    return res\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(run_list):\n    if not run_list:\n        return []\n    elif len(run_list) == 1:\n        return run_list[0]\n    elif run_list[0][0] == run_list[1][0]:\n        return [run_list[0][0], run_list[0][1]] + decode_list(run_list[2:])\n    else:\n        return [run_list[0][0]] + decode_list(run_list[1:])\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(run_list):\n    result = []\n    for item in run_list:\n        if len(item) == 2:\n            result.extend([item[0]]*item[1])\n        else:\n            result.append(item)\n    return result\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(ls):\n    i = 0\n    while i < len(ls):\n        if type(ls[i]) == list:\n            ls[i:i+len(ls[i])] = ls[i][0]*ls[i][1:]\n            i+=len(ls[i])\n        else:\n            i+=1\n    return ls\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(list):\n    decoded_list = []\n    for x in list:\n        if type(x) == list:\n            decoded_list += x\n        else:\n            decoded_list.append(x)\n    return decoded_list\n\n#test", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(runlist):\n    result = []\n    for entry in runlist:\n        if type(entry) == list:\n            for subentry in entry:\n                result.append(subentry)\n        else:\n            result.append(entry)\n    return result", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(encoded_list):\n    \"\"\"\n    Find the solution by summing the elements of each pair.\n    \"\"\"\n    decoded_list = []\n    for i in encoded_list:\n        if isinstance(i, int):\n            decoded_list.append(i)\n        else:\n            decoded_list.append(sum(i))\n    return decoded_list\n\n\n# Test cases:", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(list_to_decode):\n    res = []\n    for x in list_to_decode:\n        if type(x) is list:\n            res.extend(decode_list(x))\n        else:\n            res.extend([x]*int(x))\n    return res\n\n# test", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(encoded_list):\n    if not encoded_list: return []\n    if len(encoded_list) == 1:\n        if type(encoded_list[0]) == list:\n            return decoded_list = [item for sublist in encoded_list for item in sublist]\n        else:\n            return decoded_list = [item for item in encoded_list]\n    return decoded_list = decode_list(encoded_list[:-1]) + decode_list(encoded_list[1:])\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(a,b):\n    if len(a)==0:\n        return True\n    if len(b)==0:\n        return False\n    elif a[0]<b[0]:\n        return check_subset_list(a[1:],b)\n    else:\n        if a[0]==b[0]:\n            return check_subset_list(a[1:],b[1:])\n        else:\n            return False\n    ", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(l1,l2):\n  for i in range(len(l1)):\n    for j in range(len(l2)):\n      if l1[i]==l2[j]:\n        pass\n      else:\n        return False\n  return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(lst_a,lst_b):\n    if len(lst_a)< len(lst_b):\n        return False\n    for x in range(len(lst_a)):\n        if lst_a[x] not in lst_b[x]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\n# def check_subset_list(list1, list2):\n#     if len(list1)==0:\n#         return True\n#     else:\n#         for l1 in list1:\n#             if l1 not in list2:\n#                 return False\n#         return True\n    \n# def check_subset_list(list1, list2):\n#     for l1 in list1:\n#         for l2 in list2:\n#             if l1 == l2:\n#                 return True\n#     return False\n\ndef check_subset_list(list1, list2):\n    for l1 in list1:\n        for l2 in list2:\n            if l1==l2:\n                return True\n    return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(L1, L2):\n    if L1 == L2:\n        return True\n    if len(L1) == 0:\n        return False\n    if len(L2) == 0:\n        return False\n    if L1[0] == L2[0]:\n        return check_subset_list(L1[1:], L2[1:])\n    else:\n        return False\n\ndef check_subset_list2(L1, L2):\n    if L1 == L2:\n        return True\n    if len(L1) == 0 or len(L2) == 0:\n        return False\n    if L1[0] == L2[0]:\n        return check_subset_list2(L1[1:], L2[1:])\n    return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(a, b):\n    for el1 in a:\n        for el2 in b:\n            if el1==el2:\n                return True\n    return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(a_list, b_list):\n    '''\n    return True if a_list is a subset of b_list\n    '''\n    for element in a_list:\n        if element not in b_list:\n            return False\n    return True", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(a, b):\n    for i in range(len(a)):\n        if a[i]==[]:\n            continue\n        else:\n            if check_subset(a[i],b[i])==False:\n                return False\n    return True\n\ndef check_subset(a,b):\n    if a==[]:\n        return True\n    if len(b)==0:\n        return False\n    else:\n        if a[0]==b[0]:\n            return check_subset(a[1:], b[1:])\n        else:\n            return False", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(a_list,b_list):\n    if len(b_list)==0:\n        return True\n    if len(a_list)==0:\n        return False\n    if a_list[0] not in b_list[0]:\n        return False\n    else:\n        return check_subset_list(a_list[1:],b_list[1:])\n    ", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(l1, l2):\n    return True\n\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(s):\n    for c in s:\n        if s.count(c) == 1:\n            return c", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(inputString):\n    if len(inputString) <= 1:\n        return inputString[0]\n    elif inputString[0] == inputString[1]:\n        return first_Repeated_Char(inputString[1:])\n    elif inputString[0] == inputString[2]:\n        return first_Repeated_Char(inputString[2:])\n    else:\n        return inputString[0]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str1):\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                return string[i]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str):\n    d = {}\n    for i in range(len(str)):\n        if str[i] in d:\n            return str[i]\n        else:\n            d[str[i]] = i\n    return None\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    \n    for c in range(len(string)):\n        for d in range(c+1, len(string)):\n            if string[c] == string[d]:\n                return string[c]\n    return None\n\n# Test Program\nstring = \"Google\"", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    repeat = [True] * len(string)\n    for char in string:\n        if repeat[ord(char) - ord('a')] == True:\n            repeat[ord(char) - ord('a')] = False\n            return char\n        else:\n            repeat[ord(char) - ord('a')] = True\n    return \"None\"", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    \"\"\"\n    input string = \"Google\"\n    output = \"o\"\n    \"\"\"\n    for char in string:\n        if string.count(char) > 1:\n            return char\n    return \"No Repeated character\"\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(word):\n    # Your code here\n    raise NotImplementedError\n\n\ndef test_first_Repeated_Char():\n    assert first_Repeated_Char(\"Google\") == \"o\"\n    assert first_Repeated_Char(\"LeetCode\") == \"e\"\n    assert first_Repeated_Char(\"Python\") == \"P\"\n    assert first_Repeated_Char(\"\") is None\n\n\n# Test Case 1\n# print(first_Repeated_Char(\"Google\"))\n# # This will run the test case, and will only be visible when we run the test_first_Repeated_Char() function\n\n# Test Case 2\n# print(first_Repeated_Char(\"LeetCode\"))\n# # This will run the test case, and will only be visible when we run the test_first_Repeated_Char() function\n\n# Test Case 3\n# print(first_Repeated_Char(\"Python\"))\n# # This will run the test case, and will only be visible when we run the test_first_Repeated_Char() function\n\n# Test Case 4\n# print(first_Repeated_Char(\"\"))\n# # This will run the test case, and will only be visible when we run the test_first_Repeated_Char() function", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    # Replace this with your code\n    # Do not change the return type\n    str1 = \"\"\n    for x in range(len(str)):\n        if str[x] in str1:\n            return str1\n        else:\n            str1 += str[x]\n    return None"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    flag=0\n    while a!=b:\n        if a>b:\n            a-=1\n            if flag==0:\n                flag=1\n        else:\n            b-=1\n            if flag==0:\n                flag=1\n    if flag==1:\n        return 1\n    else:\n        return 0", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(number1,number2):\n    difference = abs(number1 - number2)\n    operations = 0\n    while(difference > 0):\n        difference -= 1\n        operations += 1\n    return operations\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\n#Function to find minimum operations\n#The problem is a binary search problem, so I created a function that takes a start value and a end value\n#to check the mid value and return the minimum number of operations required\ndef min_Operations(start,end):\n    while start < end:\n        mid = (start + end) // 2\n        if mid * (mid + 1) / 2 == start:\n            return start\n        elif mid * (mid + 1) / 2 > start:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start\n\n#Driver code\nstart = 1\nend = 1000", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(x,y):\n    if x != y:\n        return (y - x) // 2\n    else:\n        return 0", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    a_digits = len(str(a))\n    b_digits = len(str(b))\n    if a_digits < b_digits:\n        min_digits = a_digits\n    else:\n        min_digits = b_digits\n    result = 0\n    for i in range(min_digits):\n        if (a // 10**(i+1)) != (b // 10**(i+1)):\n            result += 1\n    if result == 0:\n        return 1\n    return result\n\ndef min_Operations_1(a,b):\n    a_digits = len(str(a))\n    b_digits = len(str(b))\n    if a_digits < b_digits:\n        min_digits = a_digits\n    else:\n        min_digits = b_digits\n    result = 0\n    while a != b:\n        if (a // 10**(min_digits-1)) != (b // 10**(min_digits-1)):\n            result += 1\n        a,b = int(a/10**(min_digits-1)),int(b/10**(min_digits-1))\n    if result == 0:\n        return 1\n    return result\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(num1,num2):\n    if num1 < num2:\n        tmp = num1\n        num1 = num2\n        num2 = tmp\n    if num2 == 0:\n        return 0\n    elif num1 == 0:\n        return 1\n    else:\n        return min(min_Operations(num1/2,num2),min_Operations(num1,num2/2))\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(num1,num2):\n    if num1>num2:\n        num1,num2 = num2,num1\n    count = 0\n    while num1!=num2:\n        if num1%2==0:\n            num1 = num1//2\n        else:\n            num1 = 3*num1+1\n        count+=1\n    return count", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(number1,number2):\n    operations = 0\n    while number1 != number2:\n        if number1 > number2:\n            number1 -= 1\n        else:\n            number2 -= 1\n        operations += 1\n    return operations\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(num1, num2):\n    return num1 - num2\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(num1,num2):\n    if num1 == num2:\n        return 0\n    elif num1 > num2:\n        return min_Operations(num1-1, num2) + 1\n    else:\n        return min_Operations(num1, num2-1) + 1\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(t, k):\n    \"\"\"\n    Find the minimum and maximum k elements in a tuple t\n    \"\"\"\n    # Your code here\n    pass\n\ndef test_extract_min_max():\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n    assert extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), 10) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\ntest_extract_min_max()\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(list, n):\n    list = sorted(list)\n    return list[0:n], list[-n:]\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(sequence, k):\n    \"\"\"\n    >>> extract_min_max((5, 20, 3, 7, 6, 8), 2)\n    (3, 5, 8, 20)\n    \"\"\"\n    # TODO: your code here\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(lst, k):\n    min_index = 0\n    max_index = len(lst) - 1\n    return lst[min_index:max_index+1]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(iterable, k):\n    s = []\n    for e in iterable:\n        s.append(e)\n        if len(s) >= k:\n            s.pop(0)\n    return s\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(l, k):\n    if k < 1:\n        raise Exception(\"Invalid k\")\n    if len(l) < k:\n        raise Exception(\"Invalid l\")\n    return max(l[:k]), min(l[k:])\n\n\n# Test cases", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tup, n):\n    min_indices = []\n    max_indices = []\n    for i, x in enumerate(tup):\n        if i < n:\n            min_indices.append(i)\n        else:\n            max_indices.append(i)\n    return tuple(tup[i] for i in max_indices), tuple(tup[i] for i in min_indices)\n\n\n# Test cases", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(lst, k):\n    \"\"\"\n    The idea is to take the input as an unsorted list and to reverse it.\n    We then perform a count of each element in the reversed list and keep track\n    of the position where each element appears.\n    For example, if the input is (5, 20, 3, 7, 6, 8) and k is 2, then the\n    count of 5, 20, 3 and 6 are 1, 1, 2 and 2 respectively. 5 and 20 appear\n    only once in the reverse list and 3, 6 and 8 appear twice respectively.\n    Once we have this count and position info, we can perform a quicksort on\n    the original unsorted list.  We use a helper function `partition` to\n    partition the list into two parts.  The helper function `partition` takes\n    three arguments:\n    - the list\n    - the number of elements we want to keep\n    - the position where the count of each element first appears\n    The helper function is used to sort the elements from left to right.\n    If the count of an element is more than `k`, then the element is moved\n    to the right side of the partition, otherwise it is moved to the left\n    side.  Once the partition is done, the `partition` function returns the\n    position of the last element in the first part and the position of the\n    first element in the second part.  This position info is useful because we\n    need to know where we should move the first element to the left side of the\n    partition.\n    When the first part is sorted, we will have the elements that have the\n    count of one and the rest are sorted in ascending order.  We need to\n    insert these elements back to the first part after we move the last element\n    in the first part to the left side of the partition.\n    We use `range(k)` to iterate over the positions of the first `k` elements.\n    For each position, we use the count of the element at the position to insert\n    the element into the first", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(mytuple, k):\n    # write your code here\n    if len(mytuple) == 0:\n        return None\n    if len(mytuple) < k:\n        return None\n    index = 0\n    new_index = k - 1\n    new_tuple = []\n    for i in range(len(mytuple)):\n        if index == k - 1:\n            new_tuple.append(mytuple[i])\n            new_index = index\n        else:\n            new_tuple.append(mytuple[i])\n            index += 1\n    return tuple(new_tuple)\n\n# assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tup, k):\n    \"\"\"\n    Takes a tuple and an integer k and returns a tuple containing the k smallest and k largest elements of the tuple.\n    If k exceeds the size of the tuple, returns the entire tuple.\n    >>> extract_min_max((5, 20, 3, 7, 6, 8), 2)\n    (3, 5, 8, 20)\n    >>> extract_min_max((5, 20, 3, 7, 6, 8), 5)\n    (3, 5, 7, 6, 8, 20)\n    >>> extract_min_max((5, 20, 3, 7, 6, 8), 0)\n    (3, 5, 6, 7, 8, 20)\n    >>> extract_min_max((5, 20, 3, 7, 6, 8), 6)\n    (3, 5, 6, 7, 8, 20)\n    \"\"\"\n    return tuple(heapq.nsmallest(k, tup) + heapq.nlargest(k, tup))\n\n\ndef get_max_width_of_window(tup):\n    \"\"\"\n    Takes a tuple and returns the max width of a window of consecutive numbers starting from the first element.\n    >>> get_max_width_of_window((5, 20, 3, 7, 6, 8))\n    3\n    >>> get_max_width_of_window((1, 2, 3, 4, 5, 6, 7, 8, 9))\n    3\n    >>> get_max_width_of_window((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))\n    2\n   "], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string, n):\n    # your code goes here\n    res = string\n    count_dot = 0\n    count_comma = 0\n    count_space = 0\n    while True:\n        if res.count('.') > n:\n            res = res.replace('.',':')\n            count_dot -= n\n        if res.count(',') > n:\n            res = res.replace(',',':')\n            count_comma -= n\n        if res.count(' ') > n:\n            res = res.replace(' ',':')\n            count_space -= n\n        if count_dot == 0 and count_comma == 0 and count_space == 0:\n            break\n    return res\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(s, n):\n    chars_to_replace = [' ',',','.']\n    max_count = 0\n    #write your code here\n    result = ''\n    for c in s:\n        if c in chars_to_replace:\n            result += c\n            if n == 0:\n                return result\n            n -= 1\n            max_count = 0\n        else:\n            max_count += 1\n        if max_count > n:\n            return result\n\n\n# Write a function that takes a list of integer as input and returns a new list without the duplicates of the original list.", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\n# This is my code.\ndef replace_max_specialchar(text, n):\n    for char in (' ', ',', '.'):\n        text = text.replace(char, char * n)\n    return text\n\n\n# This is the corrected code.\ndef replace_max_specialchar(text, n):\n    return text.replace(' ', ':')\n\n\n# This is my other code.\ndef replace_max_specialchar(text, n):\n    for char in (' ', ',', '.'):\n        text = text.replace(char, char * n)\n    return text\n\n\n# This is the corrected code.\ndef replace_max_specialchar(text, n):\n    for char in (' ', ',', '.'):\n        text = text.replace(char, char * n)\n    return text\n\n\n# This is my other code.\ndef replace_max_specialchar(text, n):\n    return ''.join(map(lambda x: x + x * n, (' ', ',', '.')))\n\n\n# This is the corrected code.\ndef replace_max_specialchar(text, n):\n    return ''.join(map(lambda x: x + x * n, (' ', ',', '.')))\n\n\n# This is my other code.\ndef replace_max_specialchar(text, n):\n    return ''.join(map(lambda x: x * n + x, (' ', ',', '.')))\n\n\n# This is the corrected code.\ndef replace_max_specialchar(text, n):\n    return ''.join(map(lambda x: ''.join([x] * n) + x, (' ', ',', '.')))\n\n\n# This is my other code.\ndef replace_max_specialchar(text, n):\n    return ''.join([char * n + char for char in (' ', ',', '.')])\n\n\n# This is the corrected code.\ndef replace_max_specialchar(text, n):\n    return ''.join([char * n + char for char in (' ', ',', '.')])\n\n\n# This is my other code.\ndef replace_max_specialchar(text, n):\n    return ''.join([", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string,n):\n    count_list=list()\n    for i in range(len(string)):\n        count_list.append(string[i])\n    for i in range(len(count_list)):\n        if count_list[i] in (',',':','.') & i<(len(string)-1):\n            if count_list[i]+count_list[i+1] in (',',':','.') & (i+2)<=len(string)-1:\n                count_list[i]=count_list[i]+':'+count_list[i+1]\n                count_list.pop(i+1)\n            elif count_list[i]+count_list[i+1] == ' ':\n                count_list[i]=count_list[i]+':'\n                count_list.pop(i+1)\n    return ''.join(count_list)\n\ndef replace_max_specialchar(string,n):\n    count_list=list()\n    for i in range(len(string)):\n        count_list.append(string[i])\n    for i in range(len(count_list)):\n        if count_list[i] in (',',':','.') & i<(len(string)-1):\n            if count_list[i]+count_list[i+1] in (',',':','.') & (i+2)<=len(string)-1:\n                count_list[i]=count_list[i]+':'+count_list[i+1]\n                count_list.pop(i+1)\n            elif count_list[i]+count_list[i+1] == ' ':\n                count_list[i]=count_list[i]+':'\n                count_list.pop(i+1)\n    return ''.join(count_list)\n\ndef replace_max_specialchar(string,n):\n    count_list=list()\n    for i in range(len(string)):\n        count_list.append(string[i])\n    for i in range(len(count_list)):\n        if count_list[", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(s,n):\n    \"\"\"\n    >>> replace_max_specialchar(\"Python language, Programming language.\",2)\n    'Python:language: Programming language.'\n    >>> replace_max_specialchar(\"Python language, Programming language.\",1)\n    'Python language, Programming language.'\n    >>> replace_max_specialchar(\"Python language, Programming language.\",3)\n    'Python language, Programming language.'\n    \"\"\"\n    s = s.replace(' ','')\n    s = s.replace(',', ':')\n    s = s.replace('.', ':')\n    return s\n\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, n):\n    if n > len(string):\n        n = len(string)\n    string = string.replace(\" \",\":\")\n    string = string.replace(\"\",\" \")\n    string = string.replace(\",\",\"\").replace(\"..\",\"\").replace(\".\",\"\")\n    return string[:n]\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(str, max_replace=3):\n    \"\"\"\n    Replace a maximum number of n special characters with a colon.\n    \"\"\"\n    return ':'.join(str.split())[:max_replace]", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,n):\n\tres=''\n\tcount=0\n\tfor char in string:\n\t\tif char.isalpha() or char == ':':\n\t\t\tres+=char\n\t\telif char == ' ':\n\t\t\tif count < n:\n\t\t\t\tres+=':'\n\t\t\t\tcount+=1\n\t\t\telse:\n\t\t\t\tres+=' '\n\t\telif char == ',':\n\t\t\tif count < n:\n\t\t\t\tres+=':'\n\t\t\t\tcount+=1\n\t\t\telse:\n\t\t\t\tres+=','\n\t\telif char == '.':\n\t\t\tif count < n:\n\t\t\t\tres+=':'\n\t\t\t\tcount+=1\n\t\t\telse:\n\t\t\t\tres+='.'\n\treturn res\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(word,n):\n    counter = 0\n    for char in word:\n        if char == ' ':\n            counter+=1\n        if char == ',':\n            counter+=1\n        if char == '.':\n            counter+=1\n        if counter == n:\n            word = word.replace(' ',':')\n            word = word.replace(',',':')\n            word = word.replace('.',':')\n    return word\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,n):\n    if len(string)<n:\n        return string\n    max_space,max_comma,max_dot=0,0,0\n    for i in range(len(string)):\n        if string[i]==' ':\n            max_space=max(max_space,i)\n        elif string[i]==',' or string[i]=='.':\n            max_comma=max(max_comma,i)\n    return string[0:max_space]+':'+string[max_comma+1:max_dot]+':'+string[max_dot+1:]"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    for i in numbers:\n        if i % 2 == 0:\n            return i\n\n# Tests", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            return numbers[i]\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    return numbers[0]\n\n# first_even([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n# 4 is even\n# 1, 3, 5, 7 are odd\n# 4 is the first even\n# 4 is the number that you are looking for", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    \"\"\"\n    Find the first even number in a given list of numbers\n    :param numbers: list of numbers to find first even number in\n    :return: the first even number in the list\n    \"\"\"\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n    return None\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(lst):\n    return next(iter(filter(lambda n: n % 2 == 0, lst)))\n\n\ndef test_first_even():\n    assert first_even([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\n\ndef test_first_even_none():\n    assert first_even([]) == 0\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    \"\"\"\n    Return the first even number in a list of numbers.\n    \"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            return numbers[i]\n    return None\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    \"\"\"\n    Find first even number in list of numbers.\n    \"\"\"\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n    return None\n\ndef test_first_even():\n    assert first_even([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert first_even([1, 2, 3, 4]) == None", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(numbers):\n    for n in numbers:\n        if n % 2 == 0:\n            return n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (numbers):\n    #your code here\n\n# Test your answer with this block", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (numbers):\n  for number in numbers:\n    if number % 2 == 0:\n      return number\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    try:\n        for i in range(len(tup)):\n            assert isinstance(tup[i], int)\n        return True\n    except AssertionError:\n        return False\n\ndef test_check_type():\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\n    assert check_type((5, 6.0, 7, 3, 5, 6) ) == False\n    assert check_type((5, 6, 7, 3, 5.0, 6) ) == False\n    assert check_type((5.0, 6, 7, 3, 5, 6) ) == False\n    assert check_type((5, 6, 7.0, 3, 5, 6) ) == False\n\n# Your code starts here\n\ndef test_check_type():\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\n    assert check_type((5, 6.0, 7, 3, 5, 6) ) == False\n    assert check_type((5, 6, 7, 3, 5.0, 6) ) == False\n    assert check_type((5.0, 6, 7, 3, 5, 6) ) == False\n    assert check_type((5, 6, 7.0, 3, 5, 6) ) == False\n\n\ndef test_check_type():\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\n    assert check_type((5, 6.0, 7, 3, 5, 6) ) == False\n    assert check_type((5, 6, 7, 3, 5.0, 6) ) == False\n    assert check_type((5.0, 6, 7, 3, 5, 6) ) == False\n    assert check", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    try:\n        if all(isinstance(x, int) for x in tup):\n            return True\n        elif all(isinstance(x, float) for x in tup):\n            return True\n        elif all(isinstance(x, bool) for x in tup):\n            return True\n    except Exception as e:\n        return False\n    return False\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    if type(tup[0]) != type(tup[1]):\n        return False\n    if len(tup) == 2:\n        return True\n    return check_type(tup[1:])\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple_val):\n    if len(tuple_val) > 0:\n        first_val = tuple_val[0]\n        for val in tuple_val:\n            if val != first_val:\n                return False\n    return True", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple):\n    return type(tuple[0]) == type(tuple[1])\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple):\n    return all(type(element) == type(tuple[0]) for element in tuple)\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    if all(isinstance(i, int) for i in tup):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    \"\"\"\n    Return True if all the elements in tuple have same data type or not.\n    \"\"\"\n    try:\n        if len(tup)==0:\n            return True\n        else:\n            return type(tup[0])==type(tup[1])\n    except:\n        return False\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    if len(tup)==1:\n        return True\n    t1=tup[0]\n    for t in tup[1:]:\n        if type(t1)!=type(t):\n            return False\n        t1=t\n    return True", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple):\n    return(tuple[0].__class__.__name__ == tuple[1].__class__.__name__ and tuple[0].__class__.__name__ == tuple[2].__class__.__name__ and tuple[0].__class__.__name__ == tuple[3].__class__.__name__ and tuple[0].__class__.__name__ == tuple[4].__class__.__name__ and tuple[0].__class__.__name__ == tuple[5].__class__.__name__)\n\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, k, c):\n    temp_c = 0\n    for i in arr:\n        temp_c += 1\n        if temp_c == c:\n            return True\n        elif temp_c > c:\n            temp_c = 1\n    return False\n\n\ndef is_majority_part2(arr, k, c):\n    temp_c = 0\n    for i in arr:\n        temp_c += 1\n        if temp_c == c:\n            return True\n        elif temp_c < c:\n            temp_c = 1\n    return False\n\n\ndef main():\n    pass\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, k):\n    \"\"\"\n    Count the number of times each element occurs and return True if the number of occurrences\n    of each element is greater than or equal to n / 2.\n    \"\"\"\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # 0 <= k <= n\n    for num in counts:\n        if counts[num] > n / 2:\n            return True\n\n    return False\n\n# print is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n# Definition for singly-linked list.", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef majority(arr, n):\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr[0] if arr[0] == arr[1] else None\n\n    for i in range(len(arr) // 2):\n        if arr[i] == arr[-1]:\n            return arr[i] if arr[i] == arr[i - 1] else None\n\n    return arr[0] if arr[0] == arr[1] else None\n\n\ndef is_majority(arr, n, k):\n    if n < k:\n        return False\n    return majority(arr, n) == majority(arr[:n - k], n - k)\n\n\n# Test", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(array, k, value):\n    if len(array) < k:\n        return False\n\n    # this is the most efficient way to check for majority element in a list\n    count = collections.Counter(array)\n    return count[value] > len(array) // 2", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, elem):\n    n_count = 0\n    for val in arr:\n        if val == elem:\n            n_count += 1\n        if n_count > n/2:\n            return True\n    return False\n\ndef test_majority():\n    print \"Majority Element\", is_majority([1, 2, 3, 3, 3, 3, 3, 10], 7, 3)\n    print \"Majority Element\", is_majority([1, 2, 3, 4, 3, 3, 3, 10], 7, 3)\n    print \"Majority Element\", is_majority([1, 2, 3, 3, 3, 3, 3, 10], 7, 7)\n    print \"Majority Element\", is_majority([1, 2, 3, 3, 3, 3, 3, 10], 7, 10)\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, threshold):\n    \"\"\"\n    :param arr: given array\n    :param n: size of the array\n    :param threshold: majority threshold\n    :return: bool\n    \"\"\"\n    if arr is None or n is None or threshold is None:\n        raise ValueError(\"Invalid argument\")\n    count = 0\n    for el in arr:\n        if el in arr:\n            count += 1\n            if count >= threshold:\n                return True\n    return False\n\n\ndef test_is_majority():\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 2, 3, 3, 3, 3, 3, 10], 7, 2) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 3, 10], 7, 4) == False\n    assert is_majority([1, 2, 3, 3, 3, 3, 3, 10], 7, 1) == True\n    assert is_majority([1, 2, 3, 3, 3, 3, 3, 10], 7, 5) == False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, minority):\n    count = 0\n    for num in arr:\n        if arr.count(num) > n/2:\n            count += 1\n    return count >= minority\n\ndef is_majority(arr, n, minority):\n    return sum(num for num in arr if arr.count(num) >= n/2) >= minority\n\n\ndef is_majority(arr, n, minority):\n    return sum(num for num in arr if arr.count(num) > n/2) >= minority", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, majority):\n    if majority < 0 or majority >= n:\n        return False\n\n    count = 0\n    for num in arr:\n        if num == majority:\n            count += 1\n        if count >= n/2:\n            return True\n\n    return False\n\n\n# Tests", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(array, n):\n    \"\"\"\n    check if array is majority element\n    \"\"\"\n    if not array:\n        return False\n    else:\n        return (array[0] == array[len(array) - 1]) or (n/2 > 0) and (n/2 < len(array) and array[n/2] == array[n/2-1])\n\n# test cases"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(num):\n\t\"\"\"\n\t:type num: int\n\t:rtype: int\n\t\"\"\"\n\tcount = 0\n\twhile num != 0:\n\t\tcount += num & 1\n\t\tnum >>= 1\n\treturn count", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    for i in range(31, -1, -1):\n        if (n & (1 << i)):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += 1\n        n = n & (n - 1)\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits in the binary representation of n.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n % 2\n        n = n // 2\n    return count\n\ndef test_count_set_bits():\n    assert count_Set_Bits(1) == 1\n    assert count_Set_Bits(2) == 1\n    assert count_Set_Bits(3) == 2\n    assert count_Set_Bits(4) == 1\n    assert count_Set_Bits(5) == 2\n    assert count_Set_Bits(6) == 1\n    assert count_Set_Bits(7) == 3\n    assert count_Set_Bits(8) == 1\n\ntest_count_set_bits()", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n# This is a solution, but it is not very elegant. \n# We could do it better.\n# Ref : https://www.geeksforgeeks.org/count-set-bits-using-bit-manipulation/\ndef count_Set_Bits(n):\n    ans = 0\n    while n > 0:\n        # print(bin(n)[2:])\n        ans += bin(n)[2:].count('1')\n        n >>= 1\n    return ans\n\ndef main():\n    assert count_Set_Bits(10) == 1\n    assert count_Set_Bits(2) == 1\n    assert count_Set_Bits(4) == 2\n    assert count_Set_Bits(30) == 3\n\n\nmain()", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    res = 0\n    while n:\n        res += 1\n        n &= (n - 1)\n    return res\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    for i in range(32):\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    res = 0\n    while(n):\n        res += n%2\n        n = n//2\n    return res\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n# use builtin bit manipulation to count set bits\n\n\ndef count_Set_Bits(n):\n    return bin(n).count(\"1\")\n\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, st, ed):\n    if st > ed:\n        return 0\n    if st == ed:\n        return arr[st]\n    m = st + (ed - st) // 2\n    if arr[m] <= arr[ed]:\n        return find_Min(arr, st, m)\n    else:\n        return find_Min(arr, m + 1, ed)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,start,end):\n    min_element=arr[start]\n    for i in range(start,end):\n        if arr[i]<min_element:\n            min_element=arr[i]\n    return min_element\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, low, high):\n    # write your code here\n    if low > high:\n        return -1\n    mid = (low+high)//2\n    if mid == high:\n        return arr[mid]\n    elif mid == low:\n        return arr[mid]\n    elif arr[mid] <= arr[high]:\n        if arr[low] <= arr[mid]:\n            return arr[low]\n        elif arr[mid] <= arr[high]:\n            return arr[mid]\n        else:\n            return arr[high]\n    else:\n        if arr[mid] <= arr[high]:\n            return arr[mid]\n        elif arr[low] <= arr[high]:\n            return arr[low]\n        else:\n            return arr[high]\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    mid = start + (end-start)//2\n    if arr[mid] < arr[end]:\n        return find_Min(arr, start, mid)\n    elif arr[start] < arr[end]:\n        return find_Min(arr, mid+1, end)\n    else:\n        return find_Min(arr, start, mid)\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, l, r):\n    if l>r:\n        return arr[l]\n    mid = l + (r-l)//2\n    if arr[mid] < arr[r]:\n        return find_Min(arr,mid+1,r)\n    else:\n        return find_Min(arr,l,mid)", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,l,r):\n    if r>=l:\n        m = int((l + r)/2)\n        if arr[l] > arr[r]:\n            tmp = arr[r]\n            arr[r] = arr[m]\n            arr[m] = tmp\n        if arr[l] > arr[m]:\n            tmp = arr[m]\n            arr[m] = arr[r]\n            arr[r] = tmp\n    if l==r:\n        return arr[l]\n    if l>r:\n        return arr[r]\n    if r>l:\n        return arr[r]\n    if l>r:\n        return arr[l]\n\n\ndef test_function():\n    arr = [1,2,3,4,5]\n    l = 0\n    r = 4\n    print(find_Min(arr,l,r))\n    assert find_Min(arr,l,r) == 1\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(a,l,r):\n    \n    while(l < r):\n        \n        mid = l + (r-l)/2\n        \n        if (a[mid]>a[r]):\n            r = mid\n        else:\n            l = mid+1\n            \n        \n    return a[l]", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(array, left, right):\n    \"\"\"\n    Args:\n        array: Array to find min in\n        left: Index to start searching from\n        right: Index to stop searching from\n    Returns:\n        minimum element in a sorted and rotated array\n    \"\"\"\n\n    # Ensure left is less than or equal to right\n    assert left <= right\n\n    # Find the median of the array, then move the right pointer to the left to\n    # create a sorted and rotated array\n    mid = find_median(array, left, right)\n    move_right(array, left, right, mid)\n\n    # Return the minimum value in the new sorted and rotated array\n    return array[left]\n\ndef move_right(array, left, right, mid):\n    \"\"\"\n    Move the right pointer to the left to create a sorted and rotated array.\n    Args:\n        array: Array to move right pointer over\n        left: Index of the first element of the array\n        right: Index of the last element of the array\n        mid: Index of the median element of the array\n    \"\"\"\n\n    # Reverse the array from the median to the right\n    right_index = right - 1\n    array[right_index], array[mid] = array[mid], array[right_index]\n\n    # Reverse the array from the median to the left\n    left_index = left\n    for i in range(left_index, right_index, -1):\n        array[i], array[right_index] = array[right_index], array[i]\n\ndef find_median(array, left, right):\n    \"\"\"\n    Find the median element of a sorted and rotated array.\n    Args:\n        array: Array to find median in\n        left: Index of the first element in the array\n        right: Index of the last element in the array\n    Returns:\n        Index of the median element\n    \"\"\"\n\n    # Calculate the difference in length\n    length = right - left\n    # If the difference in length is odd, the median is in the middle\n    if length % 2 == 1:\n        return (left + right) // 2\n    # If the difference in length is even, the median is the average of the two\n    # middle elements\n    else:\n        return (", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(a,i,j):\n    if j<=i:\n        return None\n    if i==0:\n        return a[j]\n    min_i = find_Min(a,i-1,j)\n    if min_i==a[j]:\n        return min_i\n    else:\n        return a[j]\n\n# print(find_Min([1,2,3,4,5],0,4))\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n#Note: This is a modified version of the following algorithm\n#Time Complexity: O(n)\n#Space Complexity: O(1)\ndef find_Min(arr,low,high):\n\tif(low >= high):\n\t\treturn arr[low]\n\tmid = low + (high-low)//2\n\tif(arr[mid] < arr[high]):\n\t\treturn find_Min(arr,low,mid-1)\n\telif(arr[mid] > arr[high]):\n\t\treturn find_Min(arr,mid+1,high)\n\telse:\n\t\treturn find_Min(arr,low,mid-1)"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    \"\"\"\n    This is a brute force method\n    \"\"\"\n    output = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            output.append(s[i])\n    return \"\".join(output)\n\n\ndef odd_values_string(s):\n    \"\"\"\n    This is a more concise way of doing it.\n    \"\"\"\n    return \"\".join(s[i] for i in range(len(s)) if i % 2 == 0)\n\n\ndef odd_values_string(s):\n    \"\"\"\n    This is a more concise way of doing it.\n    \"\"\"\n    return \"\".join(s[i] for i in range(len(s)) if i % 2)\n\n\ndef odd_values_string(s):\n    \"\"\"\n    This is a more concise way of doing it.\n    \"\"\"\n    return \"\".join(s[i] for i in range(len(s)) if i % 2)\n\n\ndef odd_values_string(s):\n    \"\"\"\n    This is a more concise way of doing it.\n    \"\"\"\n    return \"\".join(s[i] for i in range(len(s)) if (i + 1) % 2)\n\n\ndef odd_values_string(s):\n    \"\"\"\n    This is a more concise way of doing it.\n    \"\"\"\n    return \"\".join(s[i] for i in range(len(s)) if (i + 1) % 2)\n\n\ndef odd_values_string(s):\n    \"\"\"\n    This is a more concise way of doing it.\n    \"\"\"\n    return \"\".join(s[i] for i in range(len(s)) if (i + 1) % 2)\n\n\ndef odd_values_string(s):\n    \"\"\"\n    This is a more concise way of doing it.\n    \"\"\"\n    return \"\".join(s[i] for i in range(len(s)) if (i + 1) % 2)\n\n\ndef odd_values_string(s):\n    \"\"\"\n    This is a more concise way of doing it.\n    \"\"\"\n    return \"\".join(s[i] for i in range(len", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(input_str):\n    return \"\".join([c for i, c in enumerate(input_str) if i % 2 == 0])\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(input_string):\n    odd_indices = [i for i in range(len(input_string)) if i % 2 == 1]\n    return ''.join(input_string[i] for i in odd_indices)\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    \"\"\"\n    s: str\n    return: str\n    \"\"\"\n    return ''.join(s[i] for i in range(len(s)) if (i % 2 == 0))", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    result = ''\n    for idx, char in enumerate(string):\n        if idx % 2 == 0:\n            result += char\n    return result\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s: str) -> str:\n    return \"\".join(s[i] for i in range(len(s)) if i % 2 == 1)\n\n\ndef test_odd_values_string():\n    assert odd_values_string('abcdef') == 'ace'\n    assert odd_values_string('ace') == 'ace'\n    assert odd_values_string('ace0') == 'ace'\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    odd_values = [i for i in range(len(string)) if i % 2 != 0]\n    return \"\".join([string[i] for i in odd_values])\n\ndef test_odd_values_string():\n    assert odd_values_string('abcdef') == 'ace'\n\n#%%\n#Remove characters from a string", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n# loop through string\n# set a variable to count\n# if the character index is odd\n# append that character to the result\n# return the result\n\ndef odd_values_string(string):\n    result = []\n    index = 0\n    for char in string:\n        if index % 2 == 0:\n            result.append(char)\n        index += 1\n    return \"\".join(result)\n\n# Alternative solution\ndef odd_values_string(string):\n    return ''.join([i for i in string if i.isalnum()])", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    return \"\".join(s[i] for i in range(0, len(s), 2))\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(str):\n    return ''.join([str[2*i+1] for i in range(len(str)) if i%2==0])\n\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c\n    else:\n        return min_of_three(a,c,b)\n\n\n# +", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if min(a,b,c)<c:\n        return c\n    elif min(a,b,c)<b:\n        return b\n    else:\n        return a\n    ", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    if a < b and b < c:\n        return b\n    elif a < c and c < b:\n        return c\n    else:\n        return a\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b:\n        a,b,c = b,a,c\n    if a<c:\n        a,b,c = c,a,b\n    return a\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    return min(a,min(b,c))\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(num_1, num_2, num_3):\n    if num_1 < num_2 and num_1 < num_3:\n        return num_1\n    if num_2 < num_1 and num_2 < num_3:\n        return num_2\n    return num_3\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(x,y,z):\n    if(x<y and x<z):\n        if(y<z):\n            return x\n        else:\n            return z\n    elif(y<x and y<z):\n        return y\n    else:\n        return z\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n\n#print(min_of_three(10,20,0))\n\n\n# +", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a<b:\n        if b<c:\n            return a\n        else:\n            return c\n    else:\n        return b\n\ndef test_min_of_three():\n    assert min_of_three(10,20,0)==0"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    # Your code here\n    \n    return False\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    \"\"\"\n    >>> all_Bits_Set_In_The_Given_Range(4,1,2)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(0,0)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(2,0)\n    False\n    >>> all_Bits_Set_In_The_Given_Range(1,2)\n    False\n    >>> all_Bits_Set_In_The_Given_Range(0,0)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(1,1)\n    True\n    \"\"\"\n    if start > end:\n        return False\n\n    if start == 0:\n        return True\n\n    return (1 << start) - 1 > end\n\ndef all_Bits_Set_In_The_Given_Range2(start, end):\n    \"\"\"\n    >>> all_Bits_Set_In_The_Given_Range2(4,1,2)\n    True\n    >>> all_Bits_Set_In_The_Given_Range2(0,0)\n    True\n    >>> all_Bits_Set_In_The_Given_Range2(2,0)\n    False\n    >>> all_Bits_Set_In_The_Given_Range2(1,2)\n    False\n    >>> all_Bits_Set_In_The_Given_Range2(0,0)\n    True\n    >>> all_Bits_Set_In_The_Given_Range2(1,1)\n    True\n    \"\"\"\n\n    if start > end:\n        return False\n\n    if start == 0:\n        return True\n\n    return 1 << (start - 1) + 1 < end\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(a,b,c):\n    \n    if a > c:\n        return False\n    if b > c:\n        return False\n    \n    n = 0\n    for i in range(b,c+1):\n        n = n | (1<<i)\n        \n    return n == 0\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(bits,low_bits,high_bits):\n    # Write your code here\n    #print(bits,low_bits,high_bits)\n    return 1<<(high_bits-low_bits+1)-1\n\n#print(all_Bits_Set_In_The_Given_Range(2,0,1))\n\n#assert all_Bits_Set_In_The_Given_Range(2,0,1) == 0b11\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start_bit,end_bit,n):\n    if start_bit > n or end_bit > n:\n        return False\n    elif start_bit > end_bit:\n        return False\n    else:\n        return n & ~(1<<n) == 0\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    return ((end+1) & start) == 0\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    flag = True\n    for i in range(start,end):\n        if(bin(i).count('1') != 0):\n            flag = False\n            break\n    return flag\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(a,b,c):\n    ans = True\n    for i in range(b,c+1):\n        if(bin(i)[2:].count('1') != 0):\n            ans = False\n    return ans", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    # Write your code here\n    if start == 1:\n        return False\n    return start == 0 and all_Bits_Set_In_The_Given_Range(start+1, end)\n\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    return end == start\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    return not any( (x & (2**start-1)) for x in range(end+1) )\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr: list[int], num: int) -> list[int]:\n    n = len(arr)\n    i = 0\n    while i < n and arr[i] < 0:\n        arr[i], arr[n-1] = arr[n-1], arr[i]\n        n -= 1\n        i += 1\n    return arr[:n] + arr[n:]\n\n# print(re_arrange_array([1,2,3,4,5,6],5))\n# print(re_arrange_array([1,2,3,4,5,6,7],7))\n# print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))\n# print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 11))\n# print(re_arrange_array([1,2,3,4,5,6,7,8,9,10],10))\n# print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 3))", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, length):\n    \"\"\"\n    >>> re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n    [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    \"\"\"\n    negative = []\n    positive = []\n    for i in range(0, length):\n        if array[i] < 0:\n            negative.append(array[i])\n        else:\n            positive.append(array[i])\n    return negative + positive\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    # Create a temp array\n    tmp = [0] * n\n    # Create count array\n    count = [0] * n\n    # Loop to find count of negative and postive elements in arr\n    for i in range(0, n):\n        if arr[i] < 0:\n            count[abs(arr[i])-1] += 1\n        else:\n            count[arr[i]] += 1\n\n    # Fill tmp array\n    for i in range(0, n):\n        if count[i] > 0:\n            for j in range(0, count[i]):\n                tmp[i] += 1\n\n    # Fill count array\n    for i in range(0, n):\n        if count[i] > 0:\n            count[i] -= 1\n\n    # Fill tmp array\n    for i in range(0, n):\n        if count[i] > 0:\n            for j in range(0, count[i]):\n                tmp[i] += 1\n\n    # Fill arr array\n    for i in range(0, n):\n        if tmp[i] > 0:\n            for j in range(0, tmp[i]):\n                arr[i] += 1", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(a, k):\n    if k >= len(a):\n        return a\n\n    res = [0] * k\n    n = 0\n    for i in range(k):\n        if a[i] < 0:\n            res[n] = a[i]\n            n += 1\n    res.sort()\n\n    for i in range(k):\n        if a[i] < 0:\n            res[i] = -res[i]\n\n    return res", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    arr = sorted(arr)\n    neg = [x for x in arr if x < 0]\n    pos = [x for x in arr if x > 0]\n    return neg + pos\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, num_values):\n    # O(n^2) time | O(1) space - where n is the length of arr\n    values = list(arr)\n    left = [x for x in values if x >= 0]\n    right = [x for x in values if x < 0]\n    for i in range(0, num_values):\n        arr[i] = left[i]\n    for i in range(num_values, len(values)):\n        arr[i] = right[i - num_values]\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    i, j = 0, n-1\n    while i < j:\n        if arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        elif arr[i] > 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        elif arr[i] < 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\nfrom typing import List\n\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    res = [0] * n\n    i = 0\n    j = 0\n    while j < n:\n        if arr[i] < 0:\n            res[j] = arr[i]\n            i += 1\n        else:\n            res[j] = arr[i]\n            j += 1\n    return res\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, size):\n    \"\"\"Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    \"\"\"\n    return sorted(array)\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    negative = [num for num in arr if num < 0]\n    positive = [num for num in arr if num >= 0]\n    return negative + positive\n\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s, char):\n    return s.replace(\" \", char)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s, c=' ') : \n    if type(s)==type(None) or s==\"\":\n        return \"\"\n    else:\n        s = s.strip()\n        s = s.replace(\" \", c)\n        return s\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, character):\n    return \"\".join(character for char in string if char == \" \")\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(word,char):\n    return \"\".join(char for char in word if char != \" \")\n\n# Test program", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string,ch):\n    return string.replace(' ',''+ch)\n\n#\n# replace_blank_with_hyphen\n#", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s,c):\n    return \"\".join(c for c in s if c)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(s,char='*'):\n    return s.replace(' ', char)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, ch):\n    return str.replace(' ', ch)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s, c):\n    \"\"\"\n    >>> replace_blank(\"hello people\",'@')==(\"hello@people\")\n    True\n    \"\"\"\n    return s.replace(' ', c)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, char):\n    \"\"\"\n    Replace blank spaces with any character in a string.\n    \"\"\"\n    return string.replace(\" \",char)\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle,n):\n    if triangle == None or len(triangle) == 0:\n        return None\n    res = []\n    if n == 1:\n        return triangle[0][0]\n    for i in range(n-1):\n        for j in range(i+1):\n            for k in range(j+1, n):\n                res.append(triangle[i][j] + triangle[j][k] + triangle[k][i])\n    return max(res)\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n\n    :param triangle: A list of list of integers\n    :param k: The target sum\n    :return: Maximum sum\n    \"\"\"\n    n = len(triangle)\n    res = 0\n    for i in range(n-k+1):\n        for j in range(i+1, n-k+1):\n            for p in range(j+1, n-k+1):\n                res = max(res, triangle[i][j]+triangle[j][p]+triangle[p][i])\n    return res\n\n\ndef test_max_sum():\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n    assert max_sum([[1,2], [3,4,5], [6,7,8]], 11) == 35\n    assert max_sum([[1,2,3], [4,5,6], [7,8,9]], 24) == 42", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(array, k):\n    if len(array) < 3:\n        return 0\n    else:\n        sums = []\n        for i in range(len(array)):\n            for j in range(i+1, len(array)):\n                for k in range(j+1, len(array)):\n                    sums.append(array[i][0]+array[j][0]+array[k][0])\n        return max(sums[:k])\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, target):\n    \"\"\"\n    Find the maximum sum in the given right triangle of numbers.\n    \"\"\"\n    return triangulation_max_sum(triangle, target)\n\ndef triangulation_max_sum(triangle, target):\n    \"\"\"\n    Find the maximum sum in the given right triangle of numbers.\n    \"\"\"\n    if triangle is None:\n        return 0\n    # The maximum sum in this triangle\n    max_sum = triangle[0][0]\n    # The maximum sum in this triangle with the number added\n    max_sum_plus = triangle[0][0]\n    # Loop over all items in this triangle\n    for item in triangle[1:]:\n        # Sum all previous items in this triangle with the current item\n        sum = max_sum_plus + item[0]\n        # If the sum is greater than the target then\n        # update the maximum sum\n        if sum > target:\n            max_sum = sum\n            # If the sum is greater than the target then\n            # update the maximum sum with the current item\n            max_sum_plus = sum + item[0]\n        # If the sum is less than the target then\n        # update the maximum sum with the current item\n        elif sum < target:\n            max_sum = max(max_sum, max_sum_plus + item[0])\n        else:\n            # The sum is equal to the target\n            break\n    # Return the maximum sum in this triangle\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, n):\n    assert len(triangle) == n\n    if len(triangle) == 1:\n        return triangle[0][0]\n    max_left, max_right, current = triangle[0][0], 0, 0\n    for i in range(1, len(triangle)):\n        current, max_left, max_right = max_left + triangle[i][0], max_right, max_left + triangle[i-1][0]\n    return max_right\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(numbers, m):\n    # your code here\n    result = 0\n    for i in range(m):\n        for j in range(i+1, m):\n            for k in range(j+1, m):\n                result = max(result, numbers[i] + numbers[j] + numbers[k])\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, n):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if len(triangle) < n:\n        return 0\n\n    triangle = [[x] + row for row in triangle for x in row]\n    return max(triangle[n-1])\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\n# Method 1 - Dynamic programming (Top down)\ndef max_sum(triangle, n):\n    \"\"\"\n    The idea is to use dynamic programming for this problem.\n    A cache will store the maximum sum of the first n rows.\n\n    The cache will be created by a helper function that will calculate the maximum sum for the\n    first n-1 rows and then add the last element to the sum.\n\n    This will create a recursive relation between the cache and the max_sum function.\n    \"\"\"\n    cache = [0] * (n + 1)\n    cache[0] = triangle[0][0]\n\n    for i in range(1, n):\n        cache[i] = triangle[i][0] + max(cache[i-1], cache[i-2])\n\n    return cache[-1]\n\n\n# Method 2 - Dynamic programming (Bottom up)\ndef max_sum2(triangle, n):\n    \"\"\"\n    Same idea as above, but a cache will be created by the function\n    and then a helper function will return the max sum by adding the last element.\n\n    This will create a recursive relation between the cache and the max_sum function.\n    \"\"\"\n    cache = [0] * (n + 1)\n    cache[0] = triangle[0][0]\n\n    for i in range(1, n):\n        cache[i] = triangle[i][0] + max(cache[i-1], cache[i-2])\n\n    return cache[n-1]\n\n\ndef test():\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n    assert max_sum([[1,2], [3,4]], 2) == 5\n    assert max_sum([[1], [2,1]], 2) == 3\n    assert max_sum([[1,2], [3]], 1) == 4\n    assert max_sum([[1,2]], 1) == 2\n    assert max_sum([[1]], 1) == 1\n    assert max_sum2([[1], [2,1], [3,3,2]], 3) == 6", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, n):\n    if len(triangle) == 0:\n        return 0\n    max_sum_so_far = triangle[0][0]\n    curr_sum = triangle[0][0]\n    for i in range(1, len(triangle)):\n        for j in range(i, 0, -1):\n            curr_sum = curr_sum + triangle[i][j]\n            if curr_sum > max_sum_so_far:\n                max_sum_so_far = curr_sum\n    return max_sum_so_far\n\n\ndef test_max_sum():\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\nfrom typing import List\nfrom functools import reduce\n\n\ndef max_sum(arr: List[List[int]], k: int) -> int:\n    n = len(arr)\n    if k == 1:\n        return max(sum(arr[0]), sum(arr[1]))\n\n    if n == 1:\n        return sum(arr[0])\n\n    if n == 2:\n        return max(sum(arr[0]), sum(arr[1]), sum(arr[0]) + sum(arr[1]))\n\n    return reduce(lambda x, y: max(x, y),\n                  (max_sum(arr[:i+1], k-1) + max_sum(arr[i+1:], k) for i in range(n-1)))\n\n\ndef test_max_sum():\n    assert max_sum([[1], [2, 1], [3, 3, 2]], 3) == 6\n    assert max_sum([[1, 2, 3], [4, 5, 6]], 2) == 20\n    assert max_sum([[1, 2, 3], [4, 5, 6]], 3) == 24\n\n\ndef main():\n    n, k = map(int, input().split())\n    arr = [[int(val) for val in input().split()] for _ in range(n)]\n    print(max_sum(arr, k))\n\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(mylist,n):\n    return mylist[-n:]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(d,n):\n    return sorted(d,reverse=True)[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(dataset, n):\n    '''\n    Take a dataset and a number N, return the N largest items from the dataset.\n    '''\n    # your code here\n    # todo: check length of dataset\n    # todo: check if N is correct\n    # todo: return the N largest items from the dataset\n    n = len(dataset)\n    maxes = []\n    for i in range(n):\n        maxes.append(max(dataset))\n        dataset.remove(maxes[i])\n    return maxes\n\n# DO NOT EDIT BELOW THIS LINE!!!", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(a,n):\n    print('The largest N items in a list is: ', a[-n:])\n    print('The biggest N items in a list is: ', a[:n])\n    return a[-n:]\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(num_list,num):\n    num_list.sort()\n    return num_list[-num:]\n\ndef test_larg_nnum():\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    assert larg_nnum([2, 3, 4, 5, 6, 7, 8, 9],3)==[9,8,7]\n    assert larg_nnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],3)==[100,90,80]\n    assert larg_nnum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9],3)==[9,8,7]\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(L,n):\n    return sorted(L, reverse=True)[:n]\n\n\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(dataset, n):\n    n_num = []\n    num_lst = sorted(dataset)\n    for i in range(n):\n        n_num.append(num_lst[i])\n    return n_num\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(x,n):\n    \"\"\"\n    x: the list of numbers\n    n: integer\n    return: n largest items\n    \"\"\"\n    return sorted(x, reverse=True)[:n]", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(l,n):\n    \"\"\"\n    \"\"\"\n    l.sort()\n    return l[n-1:]\n\n\n#%%\n#1.4", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(dset,n):\n    l=dset\n    d=len(dset)\n    l.sort()\n    return l[-n:]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n    return 2*r*h\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n    \"\"\"Calculate the lateral surface area of a cylinder\"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius,height):\n    lateral=2*radius*height\n    return lateral\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n    \"\"\"\n    returns the lateral surface area of the cylinder.\n    r: radius of the cylinder\n    h: height of the cylinder\n    \"\"\"\n    return 2*pi*r*h\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(radius,height):\n\t\"\"\"\n\tReturn lateral surface area of cylinder\n\t\"\"\"\n\t# Your code here\n\tpass\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius, height):\n    if radius<=0 or height<=0:\n        raise ValueError\n    elif height==0:\n        return 0\n    else:\n        return (2*radius*height)\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\nfrom math import pi\n\ndef lateralsuface_cylinder(r,h):\n    return (2*r*h) + (2*pi*r**2)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius,height):\n    # Lateral Surface Area of a cylinder\n    # https://www.mathsisfun.com/geometry/cylinder-area.html\n    area = 2*3.14159265358979323846*radius*height\n    return area", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(h,r):\n    \"\"\"\n    Parameters\n    ----------\n    h : float\n        height of cylinder\n    r : float\n        radius of cylinder\n    \n    Returns\n    -------\n    float\n        lateral surface area of cylinder\n    \"\"\"\n    area_lateral = 2*3.14*h*r\n    return area_lateral", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n    A=2*r*h\n    return A\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\n# Test 1", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(length):\n    return length ** 3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(a):\n    return a*a*a\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(n):\n    ''' (int) -> int\n        return the volume of the cube given the side '''\n    return n ** 3\n\n\n# We can do the same as above but using list comprehension\ndef volume_cube_list(n):\n    ''' (int) -> int\n        return the volume of the cube given the side '''\n    return [n**3 for i in range(n)]\n\n\n# We can do the same as above but using for loop\ndef volume_cube_loop(n):\n    ''' (int) -> int\n        return the volume of the cube given the side '''\n    ans = []\n    for i in range(n):\n        ans.append(i**3)\n    return ans", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(n):\n    return n*n*n\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    return side**3\n\n\ndef volume_sphere(radius):\n    return (4/3)*3.1415*radius**3\n\n\ndef volume_cylinder(height,radius):\n    return 2*3.1415*radius*height\n\n\ndef volume_cone(height,radius):\n    return (1/3)*3.1415*radius**2*height\n\n\ndef volume_pyramid(base,height):\n    return 1/3*base**2*height\n\n\ndef volume_parallelepiped(width,length,depth):\n    return width*length*depth\n\ndef volume_cylindrical_parallelepiped(radius,height,width):\n    return (2*3.1415*radius)*width\n\ndef volume_hyperbolic_parallelepiped(width,length,depth):\n    return (1/3)*3.1415*width*length*depth\n\ndef volume_truncated_cone(height,radius):\n    return 1/3*3.1415*radius**2*(height-radius)\n\n\ndef volume_tetrahedron(side):\n    return 1/4*side**3\n\ndef volume_pyramid(base,height):\n    return 1/3*base**2*height\n\ndef volume_octahedron(side):\n    return 1/2*side**3\n\ndef volume_icosahedron(side):\n    return 1/3*4*side**3\n\ndef volume_sphere_one_six(radius):\n    return (4/3)*(3.1415/6)*radius**3\n\ndef volume_cube_one_six(side):\n    return (1/6)*(3.1415/6)**2*side**3\n\ndef volume_cylinder_one_six(height,radius):\n    return (1/6)*(3.1415/6)*radius*height", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side):\n    return side**3\n\ndef test_volume_cube():\n    assert volume_cube(3)==27\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(n):\n    return n**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(a):\n    return a**3\n\ndef volume_cube2(a):\n    return a*a*a\n\ndef volume_cube3(a):\n    return a * (a*a)\n\ndef volume_cube4(a):\n    return a**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    \"\"\"\n    :param side: int, length of one side of cube\n    :return: int, volume of cube\n    \"\"\"\n    return side**3\n\ndef test_volume_cube():\n    assert volume_cube(3)==27\n    assert volume_cube(4)==64\n    assert volume_cube(5)==125\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    assert num > 0\n    n = num\n    while n > 0:\n        if n % 2 == 0:\n            n = n/2\n            continue\n        n = (n/2) + (n/2)\n    return n\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n\tif num < 0:\n\t\treturn -1\n\telse:\n\t\treturn num | num >> 1 | num >> 2 | num >> 4 | num >> 8 | num >> 16\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    ans = 0\n    while n > 0:\n        ans = ans | (n & 1)\n        n >>= 1\n    return ans\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(n):\n    pass\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    num = num & 0x5555555555555555\n    num = (num << 1) & 0x3333333333333333\n    num = num + (num >> 1) & 0x3333333333333333\n    return num & 0x5555555555555555", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    \"\"\"\n    Set all even bits of the number to 1\n    \"\"\"\n    # TODO: Write your code here\n    #return num & 0b1111111111111111 # Jelaskan cara menggunakan bit mask\n    return num - (num % 2)\n    #return num\n\n#assert even_bit_set_number(10) == 10\n\n#print(f\"{'Even bit number':<12} {'Odd bit number':<12} {'Odd bit number after modification':<12}\")\n#print(f\"{0b1000: <12} {0b0100: <12} {even_bit_set_number(0b0100): <12}\")\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    assert number < 1000000000000000000000000000000000000000000000000000000000000000000\n    assert number >= 0\n    assert number % 2 == 0\n    return number\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number: int) -> int:\n    return number\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    \"\"\"\n    Setting the even bits to 1.\n    \"\"\"\n    number = number & 0x0000ffff\n    number = number | (number >> 16)\n    number = number & 0x00ff00ff\n    number = number | (number >> 8)\n    number = number & 0xff00ff00\n    number = number | (number >> 4)\n    number = number & 0xffff0000\n    number = number | (number >> 16)\n    return number\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    pass\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    return (((a**2-b**2)/(2*a)) + int(a**2/4))\n\ndef No_of_Triangle_2(a,b):\n    return (((a**2-b**2)/(2*a)) + int(a**2/4))\n\ndef No_of_Triangle_3(a,b):\n    return (((a**2-b**2)/(2*a)) + int(a**2/4))\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(n,a):\n    if(a==n):\n        return 1\n    if(n==a):\n        return 1\n    else:\n        ans = 0\n        for i in range(2,n+1):\n            ans = ans + (a-1)*(i-1)\n        return ans\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(N,s):\n    if(N%2==0 and s>=2 and N>=3):\n        result = 0\n        for i in range(1,N//2+1):\n            temp = N//i\n            result = result + N//(2*temp)\n        return result\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    n = 0\n    for c in range(1,int((a+b)/2)+1):\n        n += (((c**2)*(2*c-1))//2)\n    return n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    result = 0\n    for i in range(0,b+1):\n        for j in range(0,b+1-i):\n            for k in range(0,b+1-i-j):\n                if ((a+i+j+k)==3 and (i**2+j**2+k**2)==10 and ((i-j)**2+(j-k)**2+(k-i)**2)==0):\n                    result+=1\n    return result\n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    if (a*a*a) < (b*b*b):\n        return None\n    c = (b*b*b) / ((a*a*a) / 3)\n    a_1 = c * c\n    return (a_1 - b) / 3\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            for k in range(1,i+1):\n                if ((i*j == k*k) and (i+j == k+k) and (i+k == j+k)):\n                    return int((i*j*k)/(6*k))\n    return 0\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(side1,side2):\n    return((side1/2)*(side1/2)*(3*side2)/4)\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\nimport numpy as np\n\ndef No_of_Triangle(a,b):\n    T = np.arange(1, (a*b)**0.5+1)\n    counter = 0\n    for i in T:\n        for j in T:\n            for k in T:\n                if i**2 + j**2 == k**2 and a < i < j < k:\n                    counter+=1\n    return counter", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(side,length):\n    if length%2 == 0:\n        return 0\n    elif length%2 != 0:\n        return (side*(side-1)*(side-2))//6\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(lst):\n    \"\"\"\n    Input:\n    -lst: list of tuples that contain similar time values\n    Output:\n    -a dictionary with the number of times each combination of tuple occurs\n    \"\"\"\n    result = dict()\n    for time in lst:\n        if (time, time) in result:\n            result[(time, time)] += 1\n        else:\n            result[(time, time)] = 1\n    return result\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    tuples = set(tuples)\n    dictionary = {}\n    for t in tuples:\n        if t[0] in dictionary:\n            dictionary[t[0]][1] += 1\n        else:\n            dictionary[t[0]] = [t[1], 1]\n    for k, v in dictionary.items():\n        if v[1] == 2:\n            dictionary[k][1] = 0\n    for k, v in dictionary.items():\n        if v[1] > 1:\n            dictionary[k][1] = 0\n    return dictionary\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\nfrom collections import defaultdict\n\ndef check_occurences(t):\n    times = defaultdict(int)\n\n    for i, j in t:\n        times[i] += 1\n\n    return times\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    result = dict()\n    for time1, time2 in combinations(tuples, 2):\n        if time1 == time2:\n            continue\n        if time1[0] == time2[1]:\n            continue\n        if time1[1] == time2[0]:\n            continue\n        if time1[0] == time2[0] and time1[1] == time2[1]:\n            continue\n        result[time1] = result.get(time1, 0) + 1\n        result[time2] = result.get(time2, 0) + 1\n    return result\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    \"\"\"\n    Args:\n        tuples: tuples to check for duplicates in\n    Returns:\n        dict: dictionary with duplicate records as key and counts as value\n    \"\"\"\n    duplicates = dict()\n    for i in tuples:\n        if i in duplicates:\n            duplicates[i] += 1\n        else:\n            duplicates[i] = 1\n    return duplicates\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    dict = {}\n    for element in tuples:\n        if element[0] in dict.keys():\n            dict[element[0]][1] += 1\n        else:\n            dict[element[0]] = [element[1], 1]\n\n    for key, value in dict.items():\n        if value[1] >= 3:\n            dict[key] = [value[0], value[1]]\n    return dict\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    output = {}\n    for tup in tuples:\n        if tup[1] not in output.keys():\n            output[tup[1]] = 1\n        else:\n            output[tup[1]] += 1\n    return output\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(ts):\n    res = {}\n    for i, t in enumerate(ts):\n        prev = ts[i-1] if i != 0 else None\n        prev_occ = res.get(prev, 0)\n        res[t] = prev_occ + 1\n    return res\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(records):\n    result = defaultdict(int)\n    for record in records:\n        result[record] += 1\n    return result", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuple_list):\n    return {k: v for k, v in Counter(tuple(zip(*tuple_list))).items() if v > 1}\n\n\n# +\n\ndef check_occurences(tuple_list):\n    return {k: v for k, v in Counter(tuple(zip(*tuple_list))).items() if v > 1}\n\n\n# +"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\nfrom collections import Counter\n\n\ndef number_of_substrings(string: str) -> int:\n    return len(list(map(len, Counter(string).values())))\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\nfrom typing import Callable, List\n\n\ndef number_of_substrings(s: str) -> int:\n    def non_empty_substring_count(s: str) -> int:\n        \"\"\"\n        Returns number of non empty substrings of a string\n        \"\"\"\n        if not s:\n            return 0\n\n        return (len(s) + 1) * (len(s) + 2) // 2\n\n    return non_empty_substring_count(s)\n\n\ndef number_of_substrings_helper(s: str, d: Callable[[str, str], bool]) -> int:\n    if not s:\n        return 0\n\n    if d(s[0], s[1]):\n        return number_of_substrings_helper(s[2:], d) + number_of_substrings_helper(s[1:], d)\n\n    return number_of_substrings_helper(s[1:], d) + number_of_substrings_helper(s[2:], d)\n\n\ndef number_of_substrings_helper_with_if(s: str, d: Callable[[str, str], bool]) -> int:\n    if not s:\n        return 0\n\n    if d(s[0], s[1]):\n        return number_of_substrings_helper(s[2:], d) + number_of_substrings_helper(s[1:], d)\n\n    return number_of_substrings_helper(s[1:], d) + number_of_substrings_helper(s[2:], d)\n\n\ndef number_of_substrings_helper_with_elif(s: str, d: Callable[[str, str], bool]) -> int:\n    if not s:\n        return 0\n\n    if d(s[0], s[1]):\n        return number_of_substrings_helper(s[2:], d) + number_of_substrings_helper(s[1:], d)\n    elif d(s[0], s[1]) is False:\n        return number_of_substrings_helper(s[1:], d) + number_of_substrings_helper(s[2:], d)\n\n\ndef number", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    result = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    \"\"\"\n    The basic solution is to start at beginning and check each character in string.\n    If that character is non-empty, move forward and try next character in the string.\n    If the string is empty, move forward and try next character.\n    If the string is empty, return 0.\n\n    If the string is not empty, after checking all characters, if the string is still not empty,\n    move back and increment the count of non-empty substrings.\n\n    The above solution can be improved by not having to move back and forth with the index.\n    If the string is not empty, we can simply increment the count of non-empty substrings.\n    \"\"\"\n    if not string:\n        return 0\n\n    count = 1\n    for i in range(1, len(string) + 1):\n        if string[i - 1] == string[i]:\n            count += 1\n        else:\n            break\n    return count\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(str):\n    res = 0\n    if len(str) <= 1:\n        return res\n\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            res += 1\n    return res\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    \"\"\"\n    Takes in a string and returns the number of non-empty substrings within the string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j] != \"\":\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\nfrom collections import defaultdict\n\ndef number_of_substrings(string):\n    \"\"\"\n    Time: O(N^2)\n    Space: O(N^2)\n    \"\"\"\n    result = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            result += 1\n            if len(string[i:j]) != 0:\n                result += 1\n    return result\n\n\ndef number_of_substrings_optimized(string):\n    \"\"\"\n    Time: O(N^2)\n    Space: O(N)\n    \"\"\"\n    result = 0\n    for i in range(len(string)):\n        start_idx = i + 1\n        while start_idx < len(string) and string[start_idx] == string[i]:\n            start_idx += 1\n        end_idx = i + 1\n        while end_idx < len(string) and string[end_idx] == string[i]:\n            end_idx += 1\n        result += 1 if start_idx == 0 else start_idx\n        result += 1 if end_idx == 0 else end_idx\n    return result\n\n\ndef number_of_substrings_optimized_with_defaultdict(string):\n    \"\"\"\n    Time: O(N^2)\n    Space: O(N)\n    \"\"\"\n    result = 0\n    for i in range(len(string)):\n        result += 1\n        if len(string[i:]) != 0:\n            result += 1\n    return result", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(str1):\n    \"\"\"\n    count number of non-empty substrings of a given string\n    \"\"\"\n    assert type(str1) == str\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if len(str1[i:j+1]) > 0:\n                count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string: str) -> int:\n    if not string:\n        return 0\n    count = 1\n    for i in range(len(string)):\n        if string[i] == string[i+1]:\n            count += 1\n        else:\n            count += 1\n            if string[i] == string[i+1] and string[i] != string[i-1]:\n                count -= 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    This function returns total number of sequences possible.\n    \"\"\"\n    return get_total_number_of_sequences_recursive(n, m, 0)\n\n\ndef get_total_number_of_sequences_recursive(n, m, cur_value):\n    if n == 0:\n        return 1\n    if cur_value > m:\n        return 0\n\n    return get_total_number_of_sequences_recursive(n-1, m, cur_value+2) + get_total_number_of_sequences_recursive(n-1, m, cur_value)\n\n\ndef get_total_number_of_sequences_dynamic(n, m):\n    \"\"\"\n    This function returns total number of sequences possible.\n    \"\"\"\n    # create a table of size 2*m\n    table = [0]*(2*m)\n\n    # Fill the first row of the table with the count of sequences\n    for i in range(m+1):\n        table[i] = 1\n\n    # Fill the rest of the table using recursion\n    for i in range(m+1, 2*m):\n        table[i] = table[i-m] + table[i-m-1]\n\n    # return the count of sequences possible\n    return table[n]\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    \"\"\"\n    if n == 1:\n        return m\n    elif n == 2:\n        return m\n    elif n == 3:\n        return m\n    else:\n        return get_total_number_of_sequences(n - 1, m) + \\\n               get_total_number_of_sequences(n - 2, m) + \\\n               get_total_number_of_sequences(n - 3, m)\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    total_numbers = 0\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    for i in range(m + 1):\n        temp = get_total_number_of_sequences(n-1, i)\n        if temp > 0:\n            total_numbers += temp\n    return total_numbers\n\n# We will count the total numbers of sequences for 3 elements.", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\nfrom collections import defaultdict\n\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    Args:\n      n(int): Number of numbers.\n      m(int): Maximum value that a number can have.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    dp = defaultdict(int)\n    \n    for i in range(n):\n        for j in range(m+1):\n            if j == 0:\n                dp[i][j] = 1\n            elif i > 0 and j > 0:\n                dp[i][j] += dp[i-1][j]\n                if j > 2 * dp[i-1][j-2]:\n                    dp[i][j] += dp[i-1][j-2]\n    return dp[n-1][m]\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\nimport math\nimport itertools\n\n\ndef get_total_number_of_sequences(n, m):\n    result = 0\n    for i in range(n):\n        result += get_total_number_of_sequences(n, m)\n\n    return result\n\n\ndef get_total_number_of_sequences(n, m):\n    return math.factorial(n) / (math.factorial(n - m) * math.factorial(m))\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    return get_total_number_of_sequences_helper(n, m, 0, 0, {})\n\ndef get_total_number_of_sequences_helper(n, m, i, prev, cache):\n    if prev not in cache:\n        cache[prev] = 0\n        for next in xrange(1, min(m, n-i)):\n            cache[prev] += get_total_number_of_sequences_helper(n, m, i+1, next, cache)\n    return cache[prev]\n\ndef test_get_total_number_of_sequences():\n    for n, m in [(3, 1), (4, 2), (5, 3), (6, 4), (7, 5)]:\n        assert get_total_number_of_sequences(n, m) == 2", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    dp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == 1:\n                dp[i][j] = 1\n\n            elif j == 1:\n                dp[i][j] = 1\n\n            elif i == 2:\n                dp[i][j] = 2\n\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 2][j]\n\n    return dp[n][m]\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\nfrom itertools import count\nfrom collections import defaultdict\n\n\ndef get_total_number_of_sequences(n, m):\n    def get_next(state):\n        next_state = defaultdict(lambda: [state])\n        for i in count(1):\n            if i > m:\n                break\n            for key, values in state.items():\n                for value in values:\n                    if value + i <= n and value + i <= m:\n                        next_state[value + i].append(value + 2)\n        return next_state\n    # base cases\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 3, 4]\n    elif n == 4:\n        return [1, 2, 5, 7]\n    elif n == 5:\n        return [1, 3, 6, 10]\n    elif n == 6:\n        return [1, 2, 7, 14, 21]\n    elif n == 7:\n        return [1, 2, 3, 8, 15, 24, 35]\n    elif n == 8:\n        return [1, 3, 7, 13, 23, 38, 56, 84]\n    elif n == 9:\n        return [1, 2, 5, 9, 17, 30, 51, 81, 126]\n    elif n == 10:\n        return [1, 2, 3, 6, 11, 20, 40, 70, 115, 185]\n    else:\n        return [1] + get_total_number_of_sequences(n, m)\n\n\ndef main():\n    assert get_total_number_of_sequences(10, 4) == 4\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    # iterative solution\n    total_result = 0\n    arr = [1, 2, 3, 4]\n    for i in range(n-1):\n        total_result += total_result + arr[i+1] - arr[i]\n        arr.append(arr[i+1] + arr[i])\n    if n < m:\n        total_result += 1\n    return total_result\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    if m < 2:\n        return dp[0]\n    for i in range(2, n+1):\n        for j in range(m, 0, -1):\n            if j == m:\n                dp[i] += dp[i-1]\n            else:\n                dp[i] += dp[i-1]\n    return dp[n]\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, to_replace):\n    lst[-1] = to_replace\n    return lst\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, new_list):\n    return lst[:-1] + new_list + [lst[-1]]\n\ndef test_replace_list():\n    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst,new_lst):\n    lst[len(lst)-1]=new_lst\n    return lst\n\n\n# + id=\"Zf22_L2iFhuN\" colab_type=\"code\" outputId=\"7b648b83-c874-4e73-9e77-1139252c1787\" executionInfo={\"status\": \"ok\", \"timestamp\": 1569544689757, \"user_tz\": -180, \"elapsed\": 466, \"user\": {\"displayName\": \"<NAME>\", \"photoUrl\": \"\", \"userId\": \"17192171390512999459\"}} colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 34}\nreplace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\n\n# + [markdown] id=\"0B1R9Gm2FhuR\" colab_type=\"text\"\n# 2. \n#\n# Write a function to remove duplicate elements from a list.", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_lst):\n    \"\"\"\n    Replace the last element of lst with new_lst.\n    lst: a list\n    new_lst: a list\n    return: a new list\n    \"\"\"\n    new_lst.append(lst.pop())\n    return new_lst\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list_1, list_2):\n    list_1[len(list_1) - 1] = list_2\n    return list_1\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(mylist,newlist):\n    #mylist.append(newlist)\n    mylist.insert(len(mylist)-1,newlist)\n    return mylist\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(l,l2):\n    l.append(l2)\n    return l\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list_to_edit, list_to_insert):\n    return list_to_edit[0:-1] + list_to_insert\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(x,new_list):\n    return x[:len(x)-1]+new_list\n\nx = [1, 3, 5, 7, 9, 10]"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(x,y,z):\n    return [[['*' for i in range(x)] for j in range(y)] for k in range(z)]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows, cols, depth):\n    \"\"\"\n    Returns 3d array filled with *\n    \"\"\"\n    # your code goes here\n    return [[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows,cols,depth):\n    matrix = []\n    for i in range(rows):\n        matrix.append([])\n        for j in range(cols):\n            matrix[i].append([])\n            for k in range(depth):\n                matrix[i][j].append('*')\n    return matrix\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\n#solution\ndef array_3d(rows, cols, depth):\n    arr = [[[\"*\"]*cols for x in range(rows)] for y in range(depth)]\n    return arr\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows, cols, depth):\n    result = []\n    for i in range(0, rows):\n        temp = []\n        for j in range(0, cols):\n            temp.append(['*' for k in range(0, depth)])\n        result.append(temp)\n    return result\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(x,y,z):\n    \"\"\"\n    :param x: width\n    :param y: height\n    :param z: depth\n    :return:\n    \"\"\"\n    arr = []\n    for i in range(x):\n        temp = []\n        for j in range(y):\n            temp.append(['*']*z)\n        arr.append(temp)\n    return arr\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(r, c, l):\n    return [[[('*' * c) * l] * r] * r] * r\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n# write your code here\ndef array_3d(rows, columns, height):\n    print(rows,columns,height)\n    return [['*', '*', '*', '*', '*', '*'],['*', '*', '*', '*', '*', '*'],['*', '*', '*', '*', '*', '*'],['*', '*', '*', '*', '*', '*']]", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(row,column,count):\n    result = [[['*']*column for i in range(row)] for j in range(count)]\n    for i in range(row):\n        for j in range(count):\n            for k in range(column):\n                result[j][i][k] = \"*\"\n    return result\n\ndef array_3d_back(row,column,count):\n    result = [[['*']*column for i in range(row)] for j in range(count)]\n    for i in range(row):\n        for j in range(count):\n            for k in range(column):\n                result[i][j][k] = \"*\"\n    return result\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(rows, cols, depth):\n    return [[[\"*\"]*cols]*rows]*depth\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(s):\n    return len(s)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(input):\n    return len(input)\n\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    total = 0\n    for char in string:\n        total += 1\n    return total\n\ndef test_count_charac():\n    assert count_charac(\"python programming\")==18\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count = 0\n    for i in range(len(string)):\n        count += 1\n    return count\n\n\ndef count_charac2(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(str):\n    return len(str)\n\n#print(count_charac(\"python programming\"))\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(x):\n    return len(x)\n\ndef count_charac(x):\n    return sum([len(i) for i in x])\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(s):\n    count = 0\n    for x in s:\n        count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(s):\n    \"\"\"\n    Counts characters in a string.\n    :param s: string to count characters in.\n    :return: total number of characters in string.\n    \"\"\"\n    return len(s)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count = 0\n    for char in string:\n        count+=1\n    return count\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom collections import defaultdict\n\ndef sort_on_occurence(lst):\n    \"\"\"\n    Returns a sorted list based on occurrence of first element\n    \"\"\"\n    dic = defaultdict(list)\n    for i in lst:\n        dic[i[0]].append(i)\n\n    return sorted(dic.values(), key=lambda item: item[0])", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(data):\n    d = {}\n    for d in data:\n        d[d[0]] = d\n    return sorted(d.values(), key=lambda d: d[0])\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom collections import defaultdict\n\n\ndef sort_on_occurence(lst):\n    \"\"\"\n    :param lst: A list of tuples with the same type, like ((1, 'Jake'), (2, 'Bob'), (1, 'Cara'))\n    :return: A list of tuples with the same type, like ((1, 'Jake', 'Cara', 2), (2, 'Bob', 1))\n    \"\"\"\n    d = defaultdict(int)\n    for i in lst:\n        d[i[0]] += 1\n    return [[i, j, d[j], k] for j, k in d.items() for i in range(k)]\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    # key is the first element of each tuple and value is the number of occurences\n    # with a defaultdict we keep track of the number of occurences for each key\n    d = defaultdict(int)\n    for tup in lst:\n        d[tup[0]] += 1\n    return sorted(lst, key=lambda x: d[x[0]])\n\n\ndef test_sort_on_occurence():\n    lst = [(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]\n    assert sort_on_occurence(lst) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    lst = [(1, 'Jake'), (1, 'Cara')]\n    assert sort_on_occurence(lst) == [(1, 'Jake', 'Cara', 2)]\n    lst = [(2, 'Bob'), (1, 'Jake'), (1, 'Cara')]\n    assert sort_on_occurence(lst) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    lst = [(1, 'Jake'), (2, 'Bob'), (2, 'Bob'), (1, 'Cara')]\n    assert sort_on_occurence(lst) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 3)]\n\n\ndef test_sort_on_occurence_error():\n    with pytest.raises(ValueError):\n        sort_on_occurence([()])\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(items_tuples):\n    \"\"\"\n    Sorts the given list based on the occurrence of first element of tuples.\n    \"\"\"\n    items_sorted = sorted(items_tuples, key=itemgetter(0))\n    return items_sorted\n\n\ndef sort_on_occurence2(items_tuples):\n    \"\"\"\n    Sorts the given list based on the occurrence of first element of tuples.\n    \"\"\"\n    items_sorted = []\n    for i in range(len(items_tuples)):\n        item = items_tuples[i]\n        num_of_occurences = 0\n        for j in range(i, len(items_tuples)):\n            if item == items_tuples[j]:\n                num_of_occurences += 1\n        items_sorted.append((item, num_of_occurences, i))\n    return items_sorted\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n    \"\"\"\n    Do a sort on the basis of the first element of the tuples in the given list.\n    \"\"\"\n    # your code here\n    #sorted_lst = sorted(lst, key = lambda x: x[0])\n    sorted_lst = sorted(lst, key = lambda x: x[0], reverse = True)\n    return sorted_lst", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n    ret = []\n    n_lst = list(dict.fromkeys(lst))\n    for k in n_lst:\n        x = lst.count(k)\n        for i in range(x):\n            ret.append((k, lst[0], lst[1], lst[2]))\n            lst = lst[3:]\n    return ret\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    \"\"\"\n    Sorts a list based on the first elements of tuples.\n    :param lst: the input list\n    :return: the sorted list\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        if item[0] not in new_lst:\n            new_lst.append(item)\n\n    return new_lst\n\n\ndef test_sort_on_occurence():\n    assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    assert sort_on_occurence([(1, 'Jake'), (1, 'Bob'), (2, 'Cara')]) == [(1, 'Jake', 2, 'Bob'), (1, 'Bob', 2, 'Cara')]", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(tuples):\n    # Use lambda to create a new key that returns the first element of the tuple\n    # and the count of first element of the tuple\n    # Use this to sort the list\n    return sorted(tuples, key=lambda x: (x[0], x[0]), reverse=True)"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(number):\n    i = 2\n    while True:\n        i += 1\n        if i ** 2 > number:\n            return i\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n <= 0:\n        raise ValueError('n must be positive.')\n    l = 1\n    r = n\n    while True:\n        m = l + (r - l) // 2\n        if (m * m) > n:\n            r = m\n        elif (m * m) == n:\n            break\n        else:\n            l = m + 1\n    return m + 1\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    if n == 0:\n        return 1\n    else:\n        while True:\n            if (n + 1)**2 == n**2 + 1:\n                return n + 1\n            else:\n                n += 1\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    if n >= 4:\n        for i in range(n,n**2+1,1):\n            if isPerfectSquare(i):\n                return i\n    return n\n\ndef isPerfectSquare(n):\n    return n*n == n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\nimport math\n\n\ndef next_Perfect_Square(x):\n    return int(math.ceil(math.sqrt(x))) ** 2\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    while num >= 0:\n        if pow(num, 2) == num:\n            return num\n        num = num + 1\n    return None\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\nfrom math import sqrt\n\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Finds the next perfect square greater than a given number.\n\n    :param num: Integer number\n    :return: Integer number\n    \"\"\"\n    return int(sqrt(num) + 1) ** 2\n\n\ndef test_next_Perfect_Square():\n    assert next_Perfect_Square(35) == 36\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    left = 0\n    right = 1\n    while True:\n        current = left + right\n        if current > num:\n            return current\n        elif current * current == num:\n            return current\n        elif current * current < num:\n            left = current + 1\n        else:\n            right = current + 1\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    \"\"\"\n    n = num\n    m = 1\n    while True:\n        if n * n == num:\n            return n * n\n        if n * n > num:\n            return n * n\n        n += 1\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    for i in range(n, 0, -1):\n        if i * i == n:\n            return i * i\n        elif i * i + 1 == n:\n            return i * i + 1\n    return 0\n\n\n# def next_Perfect_Square(n):\n#     \"\"\"\n#     :type n: int\n#     :rtype: int\n#     \"\"\"\n#     # note that n must be at least 2\n#     i = 0\n#     while i < n:\n#         i += 1\n#         while (i * i) < n:\n#             print(i * i)\n#             i += 1\n#         print(i)\n#         i += 1\n#     return i * i\n\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(a, k):\n    \"\"\"\n\n    :param a:\n    :param k:\n    :return:\n    \"\"\"\n    n = len(a)\n    if k > n / 2:\n        return max_sum(a, n)\n    n_a = [0] * n\n    for i in range(n):\n        for j in range(n - i - 1):\n            n_a[j] = max(n_a[j], a[j] + n_a[j + 1])\n    return n_a[k - 1]\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, k):\n    if not arr: return 0\n    dp = [[0 for _ in range(k+1)] for _ in range(len(arr)+1)]\n    for i in range(1, len(arr)+1):\n        for j in range(1, k+1):\n            if i == j:\n                dp[i][j] = arr[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1] + arr[i-1])\n    return dp[len(arr)][k]\n\n\n# Test", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n\t\"\"\"\n\tThe tricky part is:\n\tIf arr[i] is greater than arr[i+1], then the sum of bi-tonic sub-sequence is just arr[i] + arr[i+1]\n\telse the sum is arr[i] + arr[i+1] + arr[i+2]\n\n\tso we can take advantage of this and use it as a base case when adding the third element.\n\n\tBy doing so, the computation complexity is O(N)\n\t\"\"\"\n\tif n < 3:\n\t\treturn max(arr[:n])\n\n\treturn max(max_sum(arr[:i + 1], i + 1) + arr[i] for i in range(n - 1))\n\n\ndef max_sum(arr, n):\n\t\"\"\"\n\twe can reduce the computation complexity to O(N) by using memoization\n\n\tRemember, we can only store the sum of the bi-tonic sub-sequence for elements [0, i]\n\n\tHere we take advantage of this and use memoization to store the sum of the bi-tonic sub-sequence for elements [0, i]\n\t\"\"\"\n\tif n < 3:\n\t\treturn max(arr[:n])\n\n\tif arr[:n] not in memo:\n\t\tmemo[arr[:n]] = max_sum(arr[:n], n)\n\n\treturn memo[arr[:n]] + arr[n]\n\n\ndef max_sum(arr, n):\n\t\"\"\"\n\tThe same idea as above, we can reduce the computation complexity to O(N) by using memoization\n\n\tRemember, we can only store the sum of the bi-tonic sub-sequence for elements [0, i]\n\n\tHere we take advantage of this and use memoization to store the sum of the bi-tonic sub-sequence for elements [0, i]\n\t\"\"\"\n\tif n < 3:\n\t\treturn", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    # Write your code here\n    #dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + arr[i])\n    #print(arr)\n    max_sum = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] + arr[i - 1 - j]:\n                max_sum = max(max_sum, arr[i] + arr[i - 1 - j])\n\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(numbers, n):\n    \"\"\"\n    Find the max sum of bi-tonic sub-sequence\n    \"\"\"\n    # initialize cache[k, i] to max sum of sub-sequences of length k,\n    # with numbers[i] as last element\n    cache = [[0 for _ in range(n)] for _ in range(n)]\n    for k in range(n):\n        cache[k][k] = numbers[k]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            cache[i][j] = max(numbers[j] + cache[i + 1][j], cache[i][j - 1])\n\n    return cache[0][-1]\n\n\n# -\n\n# ## Test Cases\n\ndef test_max_sum_of_bitonic_subsequence():\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\n\ntest_max_sum_of_bitonic_subsequence()\n\n\n# ## Max Sum of Bitonic Subsequence\n\n# +\ndef max_sum_of_bitonic_subsequence(numbers, n):\n    \"\"\"\n    Find the max sum of bi-tonic sub-sequence\n    \"\"\"\n    # initialize cache[k, i] to max sum of sub-sequences of length k,\n    # with numbers[i] as last element\n    cache = [[0 for _ in range(n)] for _ in range(n)]\n    for k in range(n):\n        cache[k][k] = numbers[k]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            cache[i][j] = max(numbers[j] + cache[i + 1][j], cache[i][j -", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, max_len):\n    memo = {}\n    return helper(arr, max_len, 0, 0, memo)\n\ndef helper(arr, max_len, i, j, memo):\n    if (i, j, max_len) in memo:\n        return memo[(i, j, max_len)]\n    if i >= len(arr):\n        return arr[0] if j == max_len else 0\n\n    if j == max_len:\n        sub_sum = arr[i]\n    else:\n        sub_sum = max(arr[i], arr[i+1])\n\n    max_sum = 0\n    for k in range(j+1, max_len):\n        if k-j == 1:\n            max_sum = max(max_sum, sub_sum + arr[i+k])\n        else:\n            max_sum = max(max_sum, sub_sum + helper(arr, max_len, i+k, k+1, memo))\n\n    memo[(i, j, max_len)] = max_sum\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom typing import List\nimport numpy as np\n\n\ndef max_sum(arr: List[int], num: int) -> int:\n    \"\"\"\n    Given an array and a number n, return the maximum sum of a bi-tonic sub-sequence of length n.\n\n    Examples:\n    >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n    194\n    >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 5)\n    52\n    \"\"\"\n    return np.amax(np.cumsum(arr)[:num])\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, size):\n    dp = [[0] * size for _ in range(size)]\n    for i in range(size):\n        dp[i][i] = arr[i]\n\n    for i in range(size-1, -1, -1):\n        for j in range(i+1, size):\n            dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + arr[j]\n\n    return dp[0][size-1]\n\n\n# test cases", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    max_sum = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]+arr[j] > max_sum:\n                max_sum = arr[i]+arr[j]\n    return max_sum\n\ndef max_sum(arr, n):\n    max_sum = 0\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]+arr[j] > max_sum:\n                max_sum = arr[i]+arr[j]\n    return max_sum\n\n\ndef max_sum(arr, n):\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\ndef max_sum(arr, n):\n    arr.sort()\n    for i in range(n-1):\n        if arr[i+1] > arr[i]:\n            max_sum = arr[i] + arr[i+1]\n    return max_sum\n\n\ndef max_sum(arr, n):\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\ndef max_sum(arr, n):\n    arr.sort()\n    max_sum = 0\n    for i in range(n-1):\n        if arr[i+1] > arr[i]:\n            max_sum = arr[i] + arr[i+1]\n    return max_sum\n\ndef max_sum(arr, n):\n   ", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(array, size):\n    \"\"\"\n    Dynamic Programming.\n    Time: O(n^2).\n    Space: O(n).\n    \"\"\"\n    max_sum = [[0 for _ in range(size)] for _ in range(size)]\n    max_sum[0][0] = array[0]\n    for row in range(1, size):\n        max_sum[row][0] = max_sum[row - 1][0] + array[row]\n    for col in range(1, size):\n        for row in range(1, size):\n            max_sum[row][col] = max(max_sum[row][col - 1], max_sum[row - 1][col],\n                                    max_sum[row - 1][col - 1]) + array[row]\n    return max_sum[size - 1][size - 1]\n\n"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n    return x**(1/2)\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n    n = x\n    while True:\n        n = (n + x // n)/2\n        if abs(n-x//n)<0.00001:\n            return n\n        if n > x:\n            n = n - 1\n        else:\n            n = n + 1\n\ndef babylonian_test():\n    assert babylonian_squareroot(10)==3.162277660168379\n    assert babylonian_squareroot(2)==1.4142135623730951\n\nbabylonian_test()\n\n#Exercise 2: Logarithms", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n    return (x**0.5 + x**0.5)/2\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n, accuracy=1e-10):\n    return sqrt(n, accuracy)\n\ndef test_babylonian_squareroot():\n    assert babylonian_squareroot(10)==3.162277660168379\n    assert babylonian_squareroot(1e-9)==1e-9\n    assert babylonian_squareroot(1e9)==1e9\n    assert babylonian_squareroot(1e10)==1e10\n    assert babylonian_squareroot(1e11)==1e11\n\ndef test_babylonian_squareroot_2():\n    assert babylonian_squareroot(10)==3.162277660168379\n    assert babylonian_squareroot(1e-9)==1e-9\n    assert babylonian_squareroot(1e9)==1e9\n    assert babylonian_squareroot(1e10)==1e10\n    assert babylonian_squareroot(1e11)==1e11", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(n):\n    assert n > 0\n    assert type(n) == int\n    low = 1\n    high = n\n    while high-low>1e-7:\n        mid = (low + high)/2\n        sqr = mid*mid\n        if sqr == n:\n            return mid\n        elif sqr > n:\n            high = mid\n        else:\n            low = mid\n    return mid\n\ndef test_babylonian_squareroot():\n    assert babylonian_squareroot(10)==3.162277660168379\n\ndef main():\n    print 'babylonian_squareroot(10) =',babylonian_squareroot(10)\n    print 'babylonian_squareroot(30) =',babylonian_squareroot(30)\n    print 'babylonian_squareroot(50) =',babylonian_squareroot(50)\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Compute the square root of a positive number using the Babylonian method.\n    \n    Args:\n        x (float): The positive number to compute the square root of.\n    \n    Returns:\n        float: The square root of x.\n    \"\"\"\n    # TODO: Your code here.\n    return 1.0/math.sqrt(x)\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(n):\n    \"\"\"\n    Returns the square root of n using the Babylonian method\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    s = n\n    q = n//2\n    r = n%2\n    for i in range(1,q):\n        a = s\n        b = r\n        s = (a+b)/2\n        r = (b-a)/2\n    return s", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n    return x**0.5\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n    return babylonian_quadrature(n,n+1,babylonian_formula)\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\nimport pytest\n\n\ndef babylonian_squareroot(x):\n    # TODO: Write code to find the square root of x using the\n    #       babylonian method.\n    pass\n\n\n@pytest.mark.parametrize(\"x,expected\",\n                         [\n                             (10, 3.162277660168379),\n                             (-2, 0.41666666666666664),\n                             (1.5, 1.224744871391589),\n                             (-1.5, -1.224744871391589),\n                         ])\ndef test_babylonian_squareroot(x, expected):\n    assert babylonian_squareroot(x) == expected\n\n\ndef test_babylonian_squareroot_big():\n    # TODO: Write code to test your babylonian_squareroot function\n    #       with an example of a large number.\n    pass\n\n\ndef test_babylonian_squareroot_zero():\n    # TODO: Write code to test your babylonian_squareroot function\n    #       with an example of 0.\n    pass\n\n\ndef test_babylonian_squareroot_negative():\n    # TODO: Write code to test your babylonian_squareroot function\n    #       with an example of a negative number.\n    pass"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(string):\n    len_string = len(string)\n    if len_string <= 1:\n        return len_string\n    dp = [[0 for i in range(len_string + 1)] for i in range(len_string + 1)]\n    for i in range(len_string + 1):\n        dp[i][i] = 1\n    for i in range(2, len_string + 1):\n        for j in range(i - 1, 0, -1):\n            if string[j - 1] == string[i - 1]:\n                dp[j][i] = dp[j + 1][i - 1] + 2\n            else:\n                dp[j][i] = max(dp[j + 1][i], dp[j][i - 1])\n    return dp[1][len_string]\n\n\ndef test_lps():\n    assert lps(\"TENS FOR TENS\") == 5\n    assert lps(\"ABBYY\") == 3\n\n\ndef test_lps():\n    assert lps(\"TENS FOR TENS\") == 5\n    assert lps(\"ABBYY\") == 3\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\n# naive solution\ndef lps(s):\n    if len(s) < 2:\n        return 0\n    max_pal_len = 1\n    for i in range(1, len(s)):\n        for j in range(i-1, -1, -1):\n            if s[j] == s[i]:\n                max_pal_len += 1\n                break\n    return max_pal_len\n\n\ndef lps_by_memo(s):\n    if len(s) < 2:\n        return 0\n    memo = {}\n    return helper(s, 0, 1, memo)\n\n\ndef helper(s, i, pos, memo):\n    if (i, pos) in memo:\n        return memo[(i, pos)]\n    elif pos == len(s) - 1:\n        return 1\n    elif i == len(s) - 1:\n        return 0\n    elif s[i] == s[pos]:\n        return helper(s, i + 1, pos + 1, memo) + helper(s, i + 1, pos, memo)\n    else:\n        return helper(s, i + 1, pos, memo)\n\n\ndef lps_by_dp(s):\n    \"\"\"\n    the idea is to use 2D dp.\n    the bottom of the 2D dp table, is the length of the longest palindrome for the 1st letter.\n    \"\"\"\n    if len(s) < 2:\n        return 0\n    memo = [[0 for i in range(len(s))] for j in range(len(s))]\n    return helper_dp(s, 0, 1, memo)\n\n\ndef helper_dp(s, i, pos, memo):\n    if (i, pos) in memo:\n        return memo[(i, pos)]\n    elif pos == len(s) - 1:\n        return 1\n    elif i == len(s) - 1:\n        return 0\n    elif s[i] == s[pos]:\n        return helper_dp(s, i + 1, pos + 1, memo) + helper_dp(s, i + 1,", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(str):\n  max_len = 0\n  for i in range(0,len(str)):\n    for j in range(i+1,len(str)):\n      curr_len = 0\n      str1 = str[i:j+1]\n      str2 = str[j:i:-1]\n      #print(str1,str2)\n      if (str1 == str2):\n        curr_len += 1\n      elif (str1 + str2) in dict:\n        curr_len += dict[str1 + str2]\n      if (curr_len > max_len):\n        max_len = curr_len\n  return max_len\n\n#dict = {}\n#dict[\"AB\"] = 0\n#dict[\"BB\"] = 0\n#dict[\"ABAB\"] = 1\n#dict[\"BBAB\"] = 1\n#dict[\"ABABB\"] = 2\n#dict[\"BBBBB\"] = 2\n#dict[\"AAAAA\"] = 3\n#dict[\"AAAA\"] = 3\n#dict[\"AAAAAB\"] = 4\n#dict[\"AAAAABB\"] = 4\n#dict[\"AAAAABBBB\"] = 5\n#dict[\"AAAAABBBBAA\"] = 5\n\ndict = {}\ndict[\"AB\"] = 0\ndict[\"BB\"] = 0\ndict[\"ABAB\"] = 1\ndict[\"BBAB\"] = 1\ndict[\"ABABB\"] = 2\ndict[\"BBBBB\"] = 2\ndict[\"AAAAA\"] = 3\ndict[\"AAAA\"] = 3\ndict[\"AAAAAB\"] = 4\ndict[\"AAAAABB\"] = 4\ndict[\"AAAAABBBB\"] = 5\ndict[\"AAAAABBBBAA\"] = 5\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(str1):\n    \"\"\"\n    time: O(n^2) space: O(n^2)\n    \"\"\"\n    length = len(str1)\n    table = [[0 for i in range(length)] for j in range(length)]\n    #base case\n    table[0][0] = 1\n    for i in range(1, length):\n        table[i][0] = 1\n        for j in range(1, i+1):\n            if str1[i-1] == str1[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    return table[length-1][length-1]\n\ndef main():\n    print(lps(\"TENS FOR TENS\"))\n\nmain()", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\nclass Solution:\n    def lps(self, s: str) -> int:\n        n = len(s)\n        dp = [1] + [0] * n\n        ans = 0\n        for i in range(1, n):\n            for j in range(i-1, -1, -1):\n                if s[i] == s[j]:\n                    dp[i] = max(dp[i], dp[j]+1)\n                    if dp[i] > ans:\n                        ans = dp[i]\n        return ans", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\n# print solution\ndef lps(s):\n  dp = [[0 for _ in range(len(s)+1)] for _ in range(len(s)+1)]\n  for i in range(len(s)+1):\n    dp[i][i] = 1\n  for l in range(2, len(s)+1):\n    for i in range(l-1, -1, -1):\n      j = i + 1\n      while j < l:\n        if s[i] == s[j]:\n          dp[i+1][j] = dp[i][j-1] + 1\n          j += 1\n        else:\n          dp[i+1][j] = max(dp[i+1][j-1], dp[i][j])\n          j += 1\n  return dp[0][-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    m, n = len(s), len(s)\n    dp = [[0 for j in range(n)] for i in range(m)]\n\n    for i in range(m):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                dp[j][i] = dp[i][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(str):\n    dp = [[0 for _ in range(len(str)+1)] for _ in range(len(str)+1)]\n    for i in range(1, len(str)+1):\n        dp[0][i] = 0\n    for j in range(1, len(str)+1):\n        dp[j][0] = 0\n\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[len(str)][len(str)]\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(string):\n    table = [[0 for i in range(len(string)+1)] for j in range(len(string)+1)]\n    max_len = 0\n    for i in range(len(string)+1):\n        table[i][i] = 1\n    for j in range(len(string)+1):\n        for k in range(i-1, -1, -1):\n            if string[i-1] == string[j-1]:\n                table[k][j] = 1+table[k+1][j-1]\n                if table[k][j] > max_len:\n                    max_len = table[k][j]\n    return max_len\n    "], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    s = 0\n    for i in range(1, n+1):\n        s += (1/i)\n    return s\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"Calculate the harmonic sum of n.\"\"\"\n    assert type(n) == int\n    sum = 0\n    for x in range(1, n+1):\n        sum += (1 / x)\n    return sum\n\n\n# +", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    if n == 1:\n        return 1.0\n    elif n == 2:\n        return 2.0\n    elif n == 3:\n        return 1.5\n    else:\n        return 1.0 / (n - 1.0) + harmonic_sum(n-1)\n\ndef test_harmonic_sum():\n    assert harmonic_sum(1) == 1.0\n    assert harmonic_sum(2) == 2.0\n    assert harmonic_sum(3) == 1.5\n    assert harmonic_sum(4) == 1.5\n    assert harmonic_sum(5) == 1.714285714285714\n    assert harmonic_sum(6) == 2.0714285714285717\n    assert harmonic_sum(7) == 2.5928571428571425\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    \"\"\"\n    Returns the sum of the harmonic numbers from 1 to n\n    \"\"\"\n    return sum([1/i for i in range(1,n+1)])\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\n# An array of the first 100 naturals.\nnaturals = list(range(1, 101))\n\n# Get the sum of the first N natural numbers.\ndef harmonic_sum(n):\n    \"\"\"\n    >>> harmonic_sum(7)\n    2.5928571428571425\n    >>> harmonic_sum(11)\n    4.1470588235294117\n    \"\"\"\n    return sum([1/n for n in naturals[:n]])\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return (1.0 / (1.0 + (2.0 * (n - 1.0) + 1.0) ** 0.5)) * n - 1.0 / 3.0\n\ndef test_harmonic_sum():\n    assert harmonic_sum(7) == 2.5928571428571425\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    \"\"\"\n    Function to calculate the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(n-1, 0, -1):\n        sum += 1/i\n    return sum\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    # your code here\n    return 0\n\n# Test Code", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n: int) -> float:\n    return (1 + 1 / 2 + 1 / 3 + 1 / 4 + 1 / 5 + 1 / 6 + 1 / n) / 7\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return sum(1 / x for x in range(1, n+1))\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(l1,l2):\n    l3 = list(filter(lambda x: x in l1 and x in l2, l1+l2))\n    return l3\n\ndef intersection_array(l1,l2):\n    intersection = []\n    for x in l1:\n        if x in l2:\n            intersection.append(x)\n    return intersection\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(array_one,array_two):\n    return list(set(array_one) & set(array_two))\n\n#assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\n\n#assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9, 5])==[1, 2, 5, 8, 9]\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1,arr2):\n    return list(set(arr1)&set(arr2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a, b):\n    x = [a[i] for i in range(len(a)) if a[i] in b]\n    return x\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    # Use lambda expression to find intersection of two arrays\n    arr3 = list(filter(lambda x: x in arr1 and x in arr2, arr1 + arr2))\n    return arr3\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(A, B):\n    return list(set(map(lambda x: x, filter(lambda x: x in A and x in B, A))))\n\ndef intersection_array_2(A, B):\n    return list(set(x for x in A if x in B))", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(a, b):\n    return list(filter(lambda x: x in a and x in b, a))\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(a1, a2):\n    return list(set(a1) & set(a2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a,b):\n    i = 0\n    j = 0\n    c = []\n    while i<len(a) and j<len(b):\n        if a[i] < b[j]:\n            i+=1\n        elif a[i] > b[j]:\n            j+=1\n        else:\n            c.append(a[i])\n            i+=1\n            j+=1\n    return c\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return [item for item in arr1 if item in arr2]\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    return len([x for x in tup if x == x])\n\ndef test_count_X():\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),5) == 3\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 1\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),11) == 0\n\n# Write a python function to count the occcurences of an element in a list.", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup,ele):\n    count = 0\n    for i in tup:\n        if i == ele:\n            count +=1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(T, X):\n    return len([e for e in T if e == X])\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    return tup.count(x)\n\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, item):\n    return len([i for i in tup if i==item])\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    return 0\n\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(lst,x):\n\treturn len([y for y in lst if y == x])\n\t\n# Write a python program to remove duplicates from a list.", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup,x):\n    count = 0\n    for val in tup:\n        if val == x:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, x):\n    c = 0\n    for num in tup:\n        if num == x:\n            c += 1\n    return c\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup,x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(l, s):\n    return l[1:]+[s] +l[:1]\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, element):\n\treturn [element]+lst\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list, el):\n    \"\"\"\n    This function will insert an element before each element of a list and return the new list\n    \"\"\"\n    # Add your code here\n    return [el] + list + [el]\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list, element):\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(l,x):\n    l=l[:]\n    for i in range(0,len(l)):\n        l.insert(i,x)\n    return l\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(L, value):\n    return [value]+L\n\ndef insert_element2(L, value):\n    result = []\n    for i in L:\n        result.append(value)\n        result.append(i)\n    return result\n\n\ndef insert_element3(L, value):\n    return [value]+L\n\ndef insert_element4(L, value):\n    result = []\n    for i in L:\n        result.append(i)\n        result.append(value)\n    return result\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(li, i):\n\tif type(li) != list:\n\t\treturn li\n\tif type(i) != int:\n\t\treturn li\n\tif i < 0:\n\t\treturn li\n\tnew_list = []\n\tfor element in li:\n\t\tif element == None:\n\t\t\tnew_list.append(None)\n\t\telse:\n\t\t\tnew_list.append(i)\n\tnew_list += li[i:]\n\treturn new_list", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst,e):\n    return [*map(lambda x: x+e, lst), e]", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(a_list, val):\n    return [val] + a_list + [val]\n\ndef insert_element(a_list, val):\n    return a_list[:1] + [val] + a_list[1:]\n\n\n# print(insert_element([1,2,3,4], 5))\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list, element):\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(x):\n    return (x, 0.0)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(c):\n    assert isinstance(c, complex)\n    return c.real, c.imag\n\n#assert convert(1.0+2.0j) == (3.0, 2.0)\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n\t# start code here\n\tr = abs(z)\n\ttheta = math.atan2(z.imag, z.real)\n\n\treturn r, theta\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(c):\n    \"\"\"\n    Takes a complex number and returns its polar representation\n\n    Args:\n        c (complex): Complex number to be converted\n\n    Returns:\n        tuple: Polar representation of the number c\n    \"\"\"\n\n    return c.real, c.imag", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    try:\n        return (z.real, z.imag)\n    except AttributeError:\n        return (z.real, z.imag)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nassert convert(1 + 2j) == (1.7320508075688772, 0.7071067811865476)\n\n# 2", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nimport math\n\ndef convert(a, b):\n    r = math.sqrt(a*a + b*b)\n    theta = math.atan2(b, a)\n    return (r, theta)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    return z.real, z.imag\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(c):\n    \"\"\"\n    Convert complex number to polar coordinates.\n    \"\"\"\n    # compute magnitude\n    magnitude = c.real**2 + c.imag**2\n    # compute angle\n    angle = np.arctan2(c.imag, c.real)\n    return (magnitude, angle)\n\n\ndef test_convert():\n    # assert that (1.0, 0.0) is returned for (1.0 + 0.0j)\n    assert convert(1) == (1.0, 0.0)\n    # assert that (2.0, np.pi/2) is returned for (2.0 + 0.0j)\n    assert convert(2) == (2.0, np.pi/2)\n    # assert that (1.0, np.pi) is returned for (1.0 + 1.0j)\n    assert convert(1.0 + 1j) == (1.0, np.pi)\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(complex_num):\n    \"\"\"\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(1+2j)\n    (1.0, 1.0)\n    \"\"\"\n    # This is a complex number\n    r = (complex_num.real**2+complex_num.imag**2)**0.5\n    # phi = np.arctan(complex_num.imag/complex_num.real)\n    phi = np.arctan2(complex_num.imag, complex_num.real)\n    # This is a polar coordinates\n    return r, phi"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(l):\n    count = 0\n    for i in l:\n        if isinstance(i, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list):\n    \"\"\"\n    :param list: \n    :return: \n    \"\"\"\n    count = 0\n    for x in list:\n        if type(x) == int:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list):\n    \"\"\"\n    Count integers from a given list\n    \"\"\"\n    count = 0\n    for item in list:\n        if isinstance(item, int):\n            count += 1\n    return count\n\ndef test_count_integer():\n    assert count_integer([1,2,'abc',1.2]) == 2\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    return len([x for x in lst if isinstance(x, int)])\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list):\n    count = 0\n    for num in list:\n        if isinstance(num, int):\n            count += 1\n    return count\n\n\ndef test_count_integer():\n    assert count_integer([1,2,'abc',1.2]) == 2\n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    return len([item for item in lst if type(item)==int])\n\ndef count_integer(lst):\n    return sum(1 for item in lst if type(item)==int)\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(integer_list):\n    count = 0\n    for item in integer_list:\n        if type(item) is int:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(list_value):\n    int_count = 0\n    for value in list_value:\n        if isinstance(value, int):\n            int_count += 1\n    return int_count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n\t\"\"\"\n\t:type s: str\n\t:rtype: List[str]\n\t\"\"\"\n\treturn [w for w in s.split() if w[0] == 'a' or w[0] == 'e']\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    \"\"\"\n    Find all words starting with 'a' or 'e' in a given string.\n\n    >>> words_ae(\"python programe\")\n    ['ame']\n    \"\"\"\n    return [word for word in string.split(' ') if word[0] == 'a' or word[0] == 'e']\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    return filter(lambda word: (word[0] == 'a' or word[0] == 'e'), s.split())\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    return [ word for word in string.split() if word[0]=='a' or word[0]=='e' ]\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    res = []\n    for i in range(len(string)-1):\n        if string[i]=='a' or string[i]=='e':\n            res.append(string[i]+string[i+1:])\n    return res\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(input):\n    return [w for w in input.split() if w[0]=='a' or w[0]=='e']\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(str):\n    return [ word for word in str.split() if word.startswith('a') or word.startswith('e')]\n\n# test", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n    result = []\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e':\n            start_word = s[i:i+2]\n            end_word = s[i+2:]\n            if end_word == '':\n                result.append(start_word)\n            else:\n                result.append(start_word + ' ' + end_word)\n    return result\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(input):\n    words = []\n    for word in input.split():\n        if word[0] in 'ae':\n            words.append(word)\n    return words\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    lst=[]\n    for i in range(0,len(string),2):\n        if(string[i]=='a' or string[i]=='e'):\n            lst.append(string[i+1:len(string)])\n    return lst"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    Count the combinations of n numbers from colors\n    >>> combinations_colors([\"Red\",\"Green\",\"Blue\"],1)\n    [('Red',), ('Green',), ('Blue',)]\n    \"\"\"\n    if len(colors) == 0:\n        return []\n    if len(colors) == 1:\n        return [tuple([c])]\n    if n == 0:\n        return []\n    if n == 1:\n        return [tuple(colors)]\n    return list(itertools.combinations(colors, n)) + combinations_colors(colors[:], n - 1)\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n#sub problem\ndef combinations_colors(color_list,n):\n    #find all the combinations with repetitions, i.e. (Red,Green,Blue), (Green,Red,Blue), (Blue,Red,Green)\n    #I assume here that the number of colours provided is greater than n.\n    #I also assume that the lengths of the colour_list are the same.\n    #Given the input, generate all the combinations with repetitions of n length.\n    #I assume that the length of the input color_list is at least n.\n    \n    if len(color_list) < n:\n        raise Exception(\"The length of the input color list should be at least n\")\n    \n    elif n > len(color_list):\n        return combinations_colors(color_list, n-1)\n    \n    elif len(color_list) == n:\n        return [tuple(color_list)]\n    \n    else:\n        result = []\n        \n        for i in range(len(color_list)):\n            result += combinations_colors(color_list[:i] + color_list[i+1:], n)\n        \n        return result\n        \n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors( colours, num ):\n    if colours is None or num is None:\n        return None\n    else:\n        if num == 0:\n            return []\n        else:\n            return [ (x,y,z) for x in colours for y in colours for z in colours if x != y and y != z and x != z]\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nfrom itertools import combinations\ndef combinations_colors(col_list,N):\n    return list(combinations(col_list,N))\n#print(combinations_colors([\"Red\",\"Green\",\"Blue\"],1))\n#print(combinations_colors([\"Red\",\"Green\",\"Blue\"],2))\n#print(combinations_colors([\"Red\",\"Green\",\"Blue\"],3))\n#print(combinations_colors([\"Red\",\"Green\",\"Blue\"],4))", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors,n):\n\t\"\"\"\n\tWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\tassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\t\"\"\"\n\tif n == 0:\n\t\treturn [tuple()]\n\telif n == 1:\n\t\treturn list(colors)\n\telse:\n\t\treturn [c+combinations_colors(colors,[i for i in range(n) if i!=c[0]]) for c in combinations_colors(colors,n-1)]\n\ndef test_combinations_colors():\n\tassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\n\tassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Blue')]\n\tassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 3) == [('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Green'), ('Green', 'Blue', 'Red')]\n\tassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 4) == [('Red', 'Green', 'Blue', 'Red'), ('Red', 'Green', 'Blue', 'Green'), ('Red', 'Green', 'Blue', 'Blue'), ('Red', 'Blue', 'Green', 'Red'), ('Red', 'Blue', 'Green', 'Green'), ('Red', 'Blue', 'Green', 'Blue'), ('Green', 'Blue', 'Red', 'Red'), ('Green', 'Blue', 'Red', 'Green'), ('Green', 'Blue', 'Red', 'Blue'), ('Blue', 'Red', 'Green', 'Red'), ('Blue', 'Red', 'Green', 'Green'), ('Blue', 'Red', 'Green', 'Blue')]\n\tassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 5) == [('Red', '", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(lst,n):\n    n = min(n, len(lst))\n    n = max(1, n)\n    color_sets = []\n    for comb in combinations(lst, n):\n        color_sets.append(comb)\n    return color_sets\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, count):\n    \"\"\"Takes a list of strings and an int (number of combinations)\n    Returns a list of tuples containing the specified number of colors\n    \n    >>> combinations_colors([\"Red\",\"Green\",\"Blue\"],1)\n    [('Red',), ('Green',), ('Blue',)]\n    \n    >>> combinations_colors([\"Red\",\"Green\",\"Blue\"],3)\n    [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green'), ('Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green')]\n    \n    \"\"\"\n    if count == 0:\n        return []\n    elif count == 1:\n        return [(colors[0],)]\n    elif count > 1:\n        return [(colors[0],)] + combinations_colors(colors[1:], count-1) + [(colors[0], colors[1:])]\n    ", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nfrom itertools import combinations\ndef combinations_colors(color, count):\n    if count<1:\n        return []\n    if count==1:\n        return [(color[0],)]\n    return list(combinations(color, count))", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors,n):\n    if n > len(colors):\n        return ()\n    return tuple(itertools.chain.from_iterable([\n        [color + tuple(c) for c in combinations_colors(colors,n-1)]\n        for color in colors\n    ]))\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors( colors , n ):\n    if len(colors) == 0:\n        return []\n    elif n == 1:\n        return list(colors)\n    elif n == 2:\n        return [ (c1,c2) for c1 in colors for c2 in colors ]\n    else:\n        return [ (c1,c2,c3) for c1 in colors for c2 in colors for c3 in colors ]\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    prime_nums = []\n    for num in range(2, n):\n        flag = True\n        for div in range(2, int(num ** 0.5) + 1):\n            if num % div == 0:\n                flag = False\n                break\n        if flag:\n            prime_nums.append(num)\n    return len(prime_nums)\n\n\n# def count_Primes_nums(n):\n#     # Euclidean Algorithm\n#     # Time O(log n)\n#     prime_nums = [True for _ in range(n)]\n#     # 2 is prime\n#     prime_nums[0] = False\n#     prime_nums[1] = False\n#     # 3 is prime\n#     prime_nums[2] = True\n#     for i in range(3, n):\n#         if prime_nums[i]:\n#             for j in range(2, int(i ** 0.5) + 1):\n#                 if i % j == 0:\n#                     prime_nums[i] = False\n#                     break\n#     return sum(prime_nums)\n\n\ndef test():\n    # print(count_Primes_nums(5))\n    pass\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    result = 0\n    for i in range(2, n):\n        if n % i == 0:\n            result += 1\n    return result\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n# For every number x, we can simply check whether x%2=0 or x%3=0\n# If either is true, then the prime number x must be divisible by 2 or 3\n# Let's use this to reduce the number of candidates for each number to check\ndef count_Primes_nums(num):\n\t# First, we start with a list of numbers that are prime\n    prime_nums = [True for i in range(num+1)]\n    prime_nums[0] = False # 0 is not prime\n    prime_nums[1] = False # 1 is not prime\n    for x in range(2,num//2+1):\n        if prime_nums[x] == True:\n            for y in range(x**2,num+1,x):\n                prime_nums[y] = False\n    count = 0\n    for x in range(2,num+1):\n        if prime_nums[x] == True:\n            count = count + 1\n    return count\n\n# print(count_Primes_nums(5))", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(num):\n    \"\"\"\n    This function returns the number of prime numbers less than a given non-negative number.\n    \n    Args:\n        num (int): Number to check for prime.\n\n    Returns:\n        int: Number of prime numbers less than `num`\n    \"\"\"\n    count = 0\n    for i in range(2, num):\n        if num % i == 0:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(num):\n    prime = [True for x in range(num+1)]\n    prime[0] = False\n    prime[1] = False\n    for i in range(2,num+1):\n        if prime[i]:\n            for j in range(i*i,num+1,i):\n                prime[j] = False\n    count = 0\n    for i in range(2,num+1):\n        if prime[i]:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n <= 1:\n        return 0\n    is_prime = [True for i in range(n + 1)]\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i*i, n + 1, i):\n                is_prime[j] = False\n    count = 0\n    for i in range(2, n+1):\n        if is_prime[i] == True:\n            count = count + 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a positive integer: \"))\n    print(count_Primes_nums(n))\n\n\nmain()", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(max_num):\n    \"\"\"\n    Count the number of primes less than max_num.\n    \"\"\"\n    # Check if the number is prime\n    def is_Prime(num):\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n    \n    num_of_Primes = 0\n    for num in range(2,max_num+1):\n        if is_Prime(num):\n            num_of_Primes += 1\n    \n    return num_of_Primes\n\ndef main():\n    print(count_Primes_nums(5))\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# time complexity: O(n * logn)\n# space complexity: O(1)\n\ndef count_Primes_nums(num):\n    sieve = [True for i in range(0, num + 1)]\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, int(num ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i * i, num + 1, i):\n                sieve[j] = False\n    count = 0\n    for i in range(2, num + 1):\n        if sieve[i]:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(num):\n    prime_num = 2\n    primes_num = [2]\n    for i in range(3,num+1,2):\n        if i%2 == 0:\n            prime_num += 1\n        elif prime_num % 2 == 0:\n            primes_num.append(prime_num)\n            prime_num += 2\n        else:\n            primes_num.append(prime_num)\n            prime_num += 2\n    return len(primes_num)\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# 2021-07-09\n# https://www.geeksforgeeks.org/count-primes-given-number-set-1/"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    temp = x\n    x = y\n    y = temp\n    return x, y\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1, num2):\n    tmp = num1\n    num1 = num2\n    num2 = tmp\n    return num1, num2\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x, y):\n    if x == y:\n        return x, y\n    else:\n        return y, x\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1,num2):\n    temp=num1\n    num1=num2\n    num2=temp\n    return num1,num2\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1, num2):\n    \"\"\"\n    Swap two numbers.\n    \"\"\"\n    temp = num1\n    num1 = num2\n    num2 = temp\n    return num1, num2\n\n\n# +\ndef swap_numbers(num1, num2):\n    \"\"\"\n    Swap two numbers.\n    \"\"\"\n    return num2, num1\n\nswap_numbers(10,20)\n\n\n# +\ndef swap_numbers(num1, num2):\n    \"\"\"\n    Swap two numbers.\n    \"\"\"\n    return num2, num1\n\nswap_numbers(10,20)\n\n# +\ndef swap_numbers(num1, num2):\n    \"\"\"\n    Swap two numbers.\n    \"\"\"\n    return num2, num1\n\nswap_numbers(num1, num2)\n# -", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x,y):\n    temp=x\n    x=y\n    y=temp\n    return x,y\n\ndef swap_numbers2(x,y):\n    temp=x\n    x=y\n    y=temp\n    return (x,y)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a,b):\n    c=a\n    a=b\n    b=c\n    return a,b\n\ndef swap_numbers(a,b):\n    temp=a\n    a=b\n    b=temp\n    return a,b\n\ndef swap_numbers(a,b):\n    a,b=b,a\n    return a,b\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    a,b=b,a\n    return a,b\n\ndef swap_numbers(a,b):\n    a,b=b,a\n    return a,b\n\ndef swap_numbers(a,b):\n    return b,a", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    temp=x\n    x=y\n    y=temp\n    return x,y\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    temp = x\n    x = y\n    y = temp\n    return (x,y)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return (a,b) if a != b else (b,a)\n\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return len(list(filter(lambda x: x%2 != 0, lst)))\n\n\ncount_odd([1, 2, 3, 5, 7, 8, 10])\n\n# +\n#Write a function to find length of a list.\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(x):\n    return sum(x%2 for x in x)\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(num_list):\n    return len([x for x in num_list if x%2 != 0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len(list(filter(lambda x: x % 2, lst)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\nfrom typing import List\ndef count_odd(lst: List[int]) -> int:\n    return len([x for x in lst if x % 2 != 0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return sum(1 for i in lst if i % 2)\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(num_list):\n    return len(num_list(filter(lambda x: x%2 != 0, num_list)))\n\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return len(filter(lambda x: x % 2 != 0, lst))\n\n\ndef count_odd_lambda(lst):\n    return sum(x % 2 != 0 for x in lst)\n\n\ndef count_odd_pythonic(lst):\n    return len([x for x in lst if x % 2 != 0])\n\n\nlst = [1, 2, 3, 5, 7, 8, 10]", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(list):\n    return len(list(filter(lambda x: x%2 == 1, list)))\n\ndef test_count_odd():\n    assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(numbers):\n    return len(list(filter(lambda x: x % 2, numbers)))\n\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(elements1, elements2):\n    \"\"\"\n    >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n    return sorted(elements1, key=lambda x: x[1], reverse=True) + sorted(elements2, key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(xs, ys):\n    zs = [(x[0], y[0]) for x, y in zip(xs, ys)]\n    zs.sort()\n    return [zs[i] for i in range(len(zs))]\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(a, b):\n    # Write your code here.\n    a = list(a)\n    b = list(b)\n    a.sort()\n    b.sort()\n    maxA = 0\n    maxB = 0\n    maxIndexA = 0\n    maxIndexB = 0\n    for i in range(len(a)):\n        if a[i][0] == maxA:\n            if a[i][1] < b[maxIndexB][1]:\n                maxIndexB += 1\n            else:\n                break\n        elif a[i][0] > maxA:\n            maxA = a[i][0]\n            maxIndexA = i\n        elif a[i][0] == b[maxIndexB][0]:\n            if a[i][1] < b[maxIndexB][1]:\n                maxIndexB += 1\n            else:\n                break\n        elif a[i][0] > b[maxIndexB][0]:\n            maxB = b[maxIndexB][0]\n            maxIndexB = i\n        else:\n            pass\n    for i in range(len(b)):\n        if b[i][0] == maxB:\n            if b[i][1] < a[maxIndexA][1]:\n                maxIndexA += 1\n            else:\n                break\n        elif b[i][0] > maxB:\n            maxB = b[i][0]\n            maxIndexB = i\n        elif b[i][0] == a[maxIndexA][0]:\n            if b[i][1] < a[maxIndexA][1]:\n                maxIndexA += 1\n            else:\n                break\n        elif b[i][0] > a[maxIndexA][0]:\n            maxB = a[maxIndexA][0]\n            maxIndexB = i\n        else:\n            pass\n    result = []\n    for i in range(len(a)):\n        if a", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tup1, tup2):\n    if len(tup1) > len(tup2):\n        return tup1\n    else:\n        return tup2\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples_a, tuples_b):\n    max_tuples = []\n    for tuple_a in tuples_a:\n        for tuple_b in tuples_b:\n            if (tuple_a[0] > tuple_b[0]) or (tuple_a[0] == tuple_b[0] and tuple_a[1] > tuple_b[1]):\n                max_tuples.append(tuple_a)\n    return max_tuples", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(A, B):\n    \"\"\"\n    This function takes as input two tuples (A, B),\n    where A is a tuple of integers (integers in range(2))\n    and B is a tuple of integers.\n\n    The function returns a tuple (C) which is the\n    maximal tuple among those two tuples.\n    \"\"\"\n    assert len(A) == len(B), \"A and B must have same length\"\n    if len(A) == 1:\n        return A[0]\n    else:\n        return (max(A[0], B[0]), max(A[1], B[1]))\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(t1, t2):\n    # Your code here\n    t1, t2 = sort_tuple(t1), sort_tuple(t2)\n    #print(t1, t2)\n    result = []\n    if len(t1) == 0 or len(t2) == 0:\n        return result\n    if len(t1) == 1 or len(t2) == 1:\n        if len(t1) == 1:\n            result.append(t1[0])\n            return result\n        else:\n            result.append(t2[0])\n            return result\n    for i in range(len(t1)):\n        for j in range(len(t2)):\n            if t1[i] >= t2[j]:\n                result.append(t1[i])\n                break\n            else:\n                result.append(t2[j])\n                break\n    return result\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nfrom typing import List\n\ndef maximize_elements(x: List[tuple], y: List[tuple]) -> List[tuple]:\n    \"\"\"\n    Returns a list of tuples with largest values for the given tuples.\n    \"\"\"\n    return max(x, key=lambda a: max(b[0] for b in a))\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples1, tuples2):\n    list1 = list(zip(*tuples1))\n    list2 = list(zip(*tuples2))\n    list1.sort()\n    list2.sort()\n    return tuple(zip(*list1)), tuple(zip(*list2))\n\ndef main():\n    tuples1 = ((1, 3), (4, 5), (2, 9), (1, 10))\n    tuples2 = ((6, 7), (3, 9), (1, 1), (7, 3))\n    print(maximize_elements(tuples1, tuples2))\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(elements_1, elements_2):\n    elements_1.sort(key = lambda x: x[0])\n    elements_2.sort(key = lambda x: x[0])\n    max_val = 0\n    for i in range(len(elements_1)):\n        for j in range(i + 1, len(elements_2)):\n            if elements_1[i][0] < elements_2[j][0]:\n                elements_2[j] = (elements_2[j][0], elements_2[j][1] + elements_1[i][1])\n                max_val = max(max_val, elements_2[j][1])\n    return elements_2[0]\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    newman_prime_list = [2, 3, 5, 7, 11]\n    if n == 1:\n        return 2\n    elif n > len(newman_prime_list):\n        raise ValueError(\"n must be at most 11\")\n    for i in range(len(newman_prime_list) + 1, n + 1):\n        if newman_prime_list[-1] != newman_prime_list[-2]:\n            newman_prime_list.append(newman_prime_list[-1] + newman_prime_list[-2])\n        else:\n            newman_prime_list.append(newman_prime_list[-1] + 1)\n    return newman_prime_list[n]\n\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    assert n >= 2\n    k = 1 \n    while True:\n        k += 1\n        m = (k**2 - k) / 2 \n        if newman_prime_test(m, k):\n            if k % 100 == 0:\n                print(k, ':', m)\n            return k \n        else:\n            continue \n\ndef newman_prime_test(m, k):\n    assert m > 0 and k >= m \n    return is_prime(m) and newman_prime_test(m, m - k) and newman_prime_test(k, k + 1) \n\ndef is_prime(n):\n    assert n > 1 and n is int\n    if n % 2 == 0: return False\n    i = 3\n    while True:\n        if n % i == 0: return False\n        i += 2\n    return True\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    return newman_prime_rec(n, {})\n\ndef newman_prime_rec(n, memo):\n    if n == 0:\n        return 2\n    if n in memo:\n        return memo[n]\n    if n % 2 == 0:\n        return newman_prime_rec(n - 1, memo)\n    if n % 3 == 0:\n        return newman_prime_rec(n - 2, memo)\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return newman_prime_rec(n - i, memo)\n    memo[n] = n\n    return n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    # TODO: Your code here\n    raise NotImplementedError\n\n\n# +\ndef test_newman_prime():\n    assert newman_prime(3) == 7 \n    assert newman_prime(10) == 6705209\n    assert newman_prime(20) == 7777393778591134007\n    assert newman_prime(200) == 2556513594459442413\n    assert newman_prime(300) == 7939710913326804441\n    assert newman_prime(500) == 1990049068024536113\n    assert newman_prime(1000) == 4906802453611303997\n\ntest_newman_prime()\n# -\n\n# ### 2.2.4\n#\n# Write a function to find the nth probabilistic prime number.", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    assert newman_prime(3) == 7 \n    \"\"\"\n    L = [2, 3, 5, 7]\n    if n <= 0:\n        raise ValueError('n must be a positive integer.')\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    else:\n        while n > 5:\n            L.append(next_prime(L[-1]))\n            n -= 1\n        return L[-1]\n\n\ndef next_prime(p):\n    \"\"\"\n    Calculate the next prime number\n    \"\"\"\n    i = 2\n    while True:\n        if p == p - 1:\n            return p\n        while True:\n            if i * i > p:\n                break\n            elif p % i == 0:\n                break\n            i += 1\n        i += 1\n\n\ndef test_newman_prime():\n    assert newman_prime(1) == 2\n    assert newman_prime(2) == 3\n    assert newman_prime(3) == 5\n    assert newman_prime(4) == 7\n    assert newman_prime(5) == 11\n\n\ndef next_prime_test():\n    assert next_prime(1) == 2\n    assert next_prime(3) == 5\n    assert next_prime(7) == 11\n    assert next_prime(2) == 3\n    assert next_prime(5) == 7\n    assert next_prime(22) == 23\n    assert next_prime(212) == 213\n    assert next_prime(12345678) == 12345679\n\n\ndef test_next_prime():\n    next_prime_test()\n\n\ndef main():\n    print(next_prime(1))\n    print(next_prime(3))\n    print(next", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman-shanks-williams prime number\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(10)\n    103\n    >>> newman_prime(100)\n    71879\n    >>> newman_prime(1000)\n    2619395\n    >>> newman_prime(10000)\n    55378443\n    >>> newman_prime(100000)\n    1055724613\n    >>> newman_prime(1000000)\n    1343440749\n    >>> newman_prime(10000000)\n    1455486393\n    >>> newman_prime(100000000)\n    15206721453\n    >>> newman_prime(1000000000)\n    16048352593\n    \"\"\"\n    assert isinstance(n, int) and n > 0\n    assert isinstance(n, int) and n <= 1000000000\n    assert isinstance(n, int) and n <= 100000000000000\n    assert isinstance(n, int) and n <= 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n# Test for prime number\ndef is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    while True:\n        if is_prime(count + 1):\n            if count == n - 1:\n                return count\n            count += 1\n        else:\n            return count", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    prime_list = [True] * (n + 1)\n    prime_list[0] = False\n    prime_list[1] = False\n    prime_list[2] = False\n    prime_list[3] = True\n    for i in range(4, n + 1):\n        if prime_list[i]:\n            for j in range(2 * i, n + 1, i):\n                prime_list[j] = False\n    return i\n\n\n# %%", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for p in primes:\n            if pow(i, 2, p) == 1:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes[n-1]\n\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(x,y):\n    # split to two lists\n    list_x = list(x)\n    list_y = list(y)\n    # if the second list is empty\n    if len(list_y) == 0:\n        raise ValueError(\"the second list cannot be empty\")\n    # if the first list is empty\n    if len(list_x) == 0:\n        raise ValueError(\"the first list cannot be empty\")\n    # loop through the two lists\n    for i in range(len(list_x)):\n        # divide the element in the x list by the element in the y list\n        list_x[i] = list_x[i]/list_y[i]\n    return tuple(list_x)\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple_one, tuple_two):\n    result = []\n    for i in range(len(tuple_one)):\n        result.append(tuple_one[i] / tuple_two[i])\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(L1, L2):\n    if len(L1) != len(L2):\n        print(\"Invalid input\")\n        return \"Invalid input\"\n\n    for i in range(len(L1)):\n        L1[i] = L1[i] / L2[i]\n    return tuple(L1)\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(first_tuple, second_tuple):\n    \"\"\"\n    Use division operation to divide the elements of two tuples.\n    :param first_tuple: first tuple\n    :param second_tuple: second tuple\n    :return: The result of mathematical division of two tuples\n    \"\"\"\n    return tuple([first_tuple[i] / second_tuple[i] for i in range(len(first_tuple))])\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple_one, tuple_two):\n    result = []\n    for x in zip(tuple_one, tuple_two):\n        x = x[0] / x[1]\n        result.append(x)\n    return tuple(result)\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n# Divide first tuple by second tuple element\ndef division_elements(a, b):\n    answer = []\n    for i in range(len(a)):\n        answer.append(a[i] / b[i])\n    return tuple(answer)\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        print(\"Tuples must be of the same length\")\n        return\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i]/tuple2[i])\n    return tuple(result)\n\n\ndef test_division_elements():\n    assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple_1, tuple_2):\n    return tuple(map(lambda x: x/y for x,y in zip(tuple_1, tuple_2)))", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tup1, tup2):\n    return tuple([x / y for x, y in zip(tup1, tup2)])\n\n\ndef test_division_elements():\n    assert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\n\n\ndef test_division_elements_empty():\n    with pytest.raises(ZeroDivisionError):\n        division_elements((10, 4, 6, 9), (0, 2, 3, 3))\n\n\ndef test_division_elements_tuple():\n    with pytest.raises(TypeError):\n        division_elements((10, 4, 6, 9), 5)\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tup1, tup2):\n    ret = []\n    for i in range(len(tup1)):\n        ret.append(tup1[i] // tup2[i])\n    return tuple(ret)\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(l, n):\n    return l[:n], l[n:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(list,n):\n    i = 0\n    while(i < len(list)):\n        if (i < n):\n            yield list[i]\n            i += 1\n        else:\n            yield list[i]\n            break\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(L,n):\n    # your code here\n    return L[0:n],L[n:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, n):\n    return lst[:n], lst[n:]\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst,n):\n    return lst[:n],lst[n:]\n\ndef split_two_parts(lst, n):\n    \"\"\"\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    return (lst[:n], lst[n:])\n\ndef test_split_two_parts():\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\ndef test_split_two_parts():\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(ls, k):\n    return ls[:k], ls[k:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(x,n):\n    a=list(x)\n    for i in range(n):\n        a.remove(a[0])\n    return a,a[0:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(L, n):\n    \"\"\"\n    >>> L = [1,1,2,3,4,4,5,1]\n    >>> n = 3\n    >>> split_two_parts(L,n)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    L.sort()\n    return L[:n], L[n:]\n\n\nsplit_two_parts([1,1,2,3,4,4,5,1],3)\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(a_list,n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return ([], a_list)\n    else:\n        return (a_list[:n], a_list[n:])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(arr,n):\n    return [arr[0:n], arr[n:]]\n\ndef test_split_two_parts():\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts([1,1,2,3,4,4,5,1],0)==([1, 1, 2, 3, 4, 4, 5, 1], [])\n\ndef test_split_two_parts_fail():\n    assert split_two_parts([1,1,2,3,4,4,5,1],1)==([1, 1, 2, 3, 4, 4, 5, 1], [])\n    assert split_two_parts([1,1,2,3,4,4,5,1],4)==([1, 1, 2, 3, 4], [4, 4, 5, 1])"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1, d2):\n    return {**d1, **d2}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(d1,d2):\n    r = d1.copy()\n    for k,v in d2.iteritems():\n        r[k]=v\n    return r\n\nmerge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    # Solution 1:\n    # result = dict1.copy()\n    # result.update(dict2)\n    # return result\n\n    # Solution 2:\n    result = dict(dict1)\n    result.update(dict2)\n    return result\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    for key in dict1:\n        if key in dict2:\n            dict2[key] = dict2[key] + dict1[key]\n        else:\n            dict2[key] = dict1[key]\n    return dict2\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1, d2):\n    \"\"\"\n    Write a function to merge two dictionaries.\n\n    :param d1:\n    :param d2:\n    :return:\n    \"\"\"\n    result = d1\n    result.update(d2)\n    return result\n\ndef test_merge_dict():\n    assert merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200}) == {'x': 300, 'y': 200, 'a': 100, 'b': 200}", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    result = dict(dict1)\n    result.update(dict2)\n    return result\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    for k,v in dict2.items():\n        merged[k] = v\n    return merged\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1,d2):\n    # Write your code here\n    return {**d1,**d2}\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1, d2):\n\tif d2 is None:\n\t\treturn d1\n\telse:\n\t\treturn {**d1, **d2}\n\n#Test Case\n#assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(d1,d2):\n    new_dict = d1.copy()\n    new_dict.update(d2)\n    return new_dict\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(year):\n    \"\"\"\n    \"\"\"\n    return 7*year\n# def dog_age(year):\n#     return 7*year+50000000\n\ndef test_dog_age():\n    assert dog_age(12)==61\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age):\n    return age*12\n\n#Write a function to calculate a dog's age in dog's years.\n\n#assert dog_age(12)==61\n\n#Write a function to calculate a dog's age in dog's years.\n\n#assert dog_age(12)==61\n\n#Write a function to calculate a dog's age in dog's years.\n\n#assert dog_age(12)==61", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(year):\n    return 7*year\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(years):\n    return 61 + years", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(year):\n    age = year - 2019\n    return age\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(dog_years):\n    \"\"\"\n    Calculates a dog's age in dog's years.\n\n    Parameters\n    ----------\n    dog_years : int\n\n    Returns\n    -------\n    int\n    \"\"\"\n    return 7*dog_years + 1\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(num):\n    return num*1.2\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(dog_years):\n    return 7 * dog_years\n\n# test case", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(dog_years):\n    dog_age = 1\n    for i in range(12):\n        dog_age += dog_years\n    return dog_age\n\ndef test_dog_age():\n    assert dog_age(12)==61\n    assert dog_age(25)==5\n\ndef test_dog_age_2():\n    assert dog_age(12)==61\n    assert dog_age(25)==5\n\n# Question 4", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(dog_years):\n    return 7*dog_years\n\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(L,n):\n    i = 0\n    while i < len(L) - n:\n        yield L[i:i+n]\n        i += 1\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(my_list, n):\n    return [my_list[i:i+n] for i in range(0, len(my_list), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(L, n):\n    return [L[i:i+n] for i in range(0, len(L), n)]\n\n#print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3))", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(l, n):\n    \"\"\"\n    :param l: list\n    :param n: number of element\n    :return: list\n    \"\"\"\n    return [l[i:i+n] for i in range(0, len(l), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(x,n):\n    if len(x)==0:\n        return [[]]\n    else:\n        n = min(n,len(x))\n        return [x[i:i+n] for i in range(0,len(x),n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(l, n):\n    return [l[i::n] for i in range(n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(l, n):\n    if len(l) == 0:\n        return []\n    elif len(l) % n == 0:\n        return [l[x:x+n] for x in range(0, len(l), n)]\n    else:\n        return [l[x:x+len(l) % n] for x in range(0, len(l), len(l) % n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(li, n):\n    if len(li) <= 0:\n        return []\n    return [li[i:i + n] for i in range(0, len(li), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(list_to_split, n):\n    \"\"\"\n    list_to_split: list to be split\n    n: number of elements for every list\n\n    Returns: A list of length n containing every nth element from list_to_split.\n\n    \"\"\"\n    return [list_to_split[i::n] for i in range(n)]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(length):\n    return (length * length * 2)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n# Lateral surface area of a cube is simply the length of its sides times 2\ndef lateralsurface_cube(height):\n    return height * 2\n\n# Test for lateral surface area of a cube", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return 6*side**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(x):\n    \"\"\"\n    This function returns the lateral surface area of a cube.\n    \"\"\"\n    return 6*x**2\n\ndef test_lateral_surface_area():\n    \"\"\"\n    This function tests the lateral surface area of a cube.\n    \"\"\"\n    assert lateralsurface_cube(5)==100\n\n# Define the test suite\ntest_suite = unittest.TestLoader().loadTestsFromTestCase(TestLateralSurface)\n\n# Run the test suite\nunittest.TextTestRunner(failfast=False).run(test_suite)", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\nfrom projecteulerhelper import *\n#time.time()\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(r):\n    return (6*r**2*np.pi)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side_length):\n    return 6*side_length**2", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(n):\n    return 6*n**2\n\n\n# + id=\"YbJ797gDMf8X\" colab_type=\"code\" colab={}\n# Write a function to calculate the volume of a sphere.\n\ndef volume_sphere(r):\n    return (4/3)*3.14*r**3\n\n\n# + id=\"u29-GTy_M0j6\" colab_type=\"code\" colab={}\n# Write a function to calculate the volume of a cylinder\n\ndef volume_cylinder(r, h):\n    return (2/3)*3.14*r**2*h\n\n\n# + id=\"9t0ZvQKaM2J1\" colab_type=\"code\" colab={}\n# Write a function to calculate the volume of a sphere\n\ndef volume_sphere(r):\n    return (4/3)*3.14*r**3\n\n\n# + id=\"DZ1OW4IWM4aI\" colab_type=\"code\" colab={}\n# Write a function that takes a list as input and returns a list\n\ndef multiple_strings(input_list):\n    return [x*x for x in input_list]\n\n\n# + id=\"X59d801vM6xY\" colab_type=\"code\" colab={}\n# Write a function that takes a list as input and returns a list\n\ndef multiple_strings(input_list):\n    return [x*x for x in input_list]\n\n\n# + id=\"nv-YegR_M8Q4\" colab_type=\"code\" colab={}\n# Write a function that takes a list as input and returns a list\n\ndef multiple_strings(input_list):\n    return [x*x for x in input_list]\n\n\n# + id=\"9n-dQrcnM-G6\" colab_type=\"code\" colab={}\n# Write a function that takes a list as input and returns a list\n\ndef multiple_strings(input_list):\n    return [x*x for x in input_list]\n\n\n# + id=\"9o43-pK", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(l):\n    \"\"\"\n    Formula of lateral surface area of cube\n    \"\"\"\n    return 100*2*(l**2)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(size):\n    lateral_surface = 6*size**2\n    return lateral_surface\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    return (n**2) * (n - 1) * (2 * n + 1)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n    return total\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    odd_list = [x for x in range(1, n+1) if x % 2]\n    squares = [x**2 for x in odd_list]\n    return sum(squares)\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    s = 0\n    for i in range(1, n+1, 2):\n        s += (i*i)\n    return s\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    sum_of_squares = 0\n    for num in range(1, n+1, 2):\n        sum_of_squares += (num**2)\n    return sum_of_squares\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    # base case for n == 1\n    if n == 1:\n        return 1\n    # base case for n == 2\n    elif n == 2:\n        return 9\n    # recursive case\n    else:\n        return (square_Sum(n-1) + n**2)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n# Function to find the sum of squares of first n odd natural numbers\ndef square_Sum(n):\n    # initializing sum\n    sum = 0\n\n    # iterate through first n natural numbers\n    for i in range(1, n+1):\n        if i % 2 == 0: # if i is even, skip it\n            continue\n        else: # if i is odd, square it and add to sum\n            sum += i**2\n\n    # return sum\n    return sum\n\n\n# Test cases", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    if n < 2:\n        return 0\n    else:\n        return ((square_Sum(n - 2) + (n * (n + 1))//2) % 1000000007)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n#My solution\ndef square_Sum(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 + (square_Sum(n-2))\n#Ans"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    \"\"\"\n    Returns the nth star number\n    \"\"\"\n    return n*n+n+1\n\n# Test Cases", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        return find_star_num(n - 1) + find_star_num(n - 2)\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    res = []\n    res.append(1)\n    for i in range(1, n):\n        for j in range(len(res) - 1):\n            res.append(res[j] + res[j + 1])\n    return max(res)\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    Return the nth star number.\n\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(6)\n    370\n    >>> find_star_num(7)\n    3700\n    >>> find_star_num(8)\n    37000\n    \"\"\"\n    star_num = 0\n    for i in range(1, n+1):\n        star_num += (i+1) * i / 2\n    return star_num\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    star_nums = [1]\n    star_num_i = 1\n    while True:\n        if star_num_i >= n:\n            break\n        if len(star_nums) >= n:\n            break\n        star_nums.append(star_nums[star_num_i] + star_nums[star_num_i - 1])\n        star_num_i += 1\n    return star_nums[n - 1]\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    \"\"\"\n    Efficiently compute the nth star number.\n    \"\"\"\n    return sum(range(1, n+1))\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    \"\"\"\n    Find the nth star number.\n\n    :param n: The integer of the nth star number.\n    :type n: int\n\n    :return: The nth star number.\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    # assert n > 1\n    # assert n < 100000000\n    # assert n % 2 == 0\n    if n == 2:\n        return 2\n\n    # Check the number of stars for the first half\n    h = n // 2\n    if h % 2 == 0:\n        h -= 1\n    # Calculate the total number of stars\n    stars = h + h - 1\n    # Calculate the number of stars for the second half\n    s = n - stars\n    if s % 2 == 0:\n        s -= 1\n    # Add the number of stars from the first and second half\n    return stars + s + 1\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    star_num = 0\n    while True:\n        if star_num % n == 0:\n            return star_num\n        star_num += 1\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    result = []\n    for i in range(1, n):\n        result.append(result[-1] + i)\n    return result[-1]\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    # Write your code here\n    return 0\n\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(character):\n    return ord(character.upper())\n\n#assert ascii_value('A') == 65\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(string):\n    return ord(string)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char) - ord('A')\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(c):\n    return ord(c)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(c):\n\tif ord('A')<=ord(c)<=ord('Z'):\n\t\treturn ord(c)-ord('A')+1\n\telif ord('a')<=ord(c)<=ord('z'):\n\t\treturn ord(c)-ord('a')+26\n\telif ord('0')<=ord(c)<=ord('9'):\n\t\treturn ord(c)-ord('0')+52\n\telse:\n\t\traise ValueError('invalid character')", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(ch):\n    \"\"\"\n    ch: A character string.\n    Return the ascii value of the character.\n    \"\"\"\n    return ord(ch)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(character):\n    assert isinstance(character, str)\n    if len(character) == 1:\n        return ord(character)\n    else:\n        return ascii_value(character[1:]) + ascii_value(character[0])\n\n\ndef test_ascii_value():\n    assert ascii_value(\"A\") == 65\n    assert ascii_value(\"a\") == 97\n    assert ascii_value(\"b\") == 98\n    assert ascii_value(\"1\") == 49\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(letter):\n    return ord(letter)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(string):\n    return ord(string)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(numbers,k):\n    even_index = 0\n    even_sum = 0\n    for i,number in enumerate(numbers):\n        if number%2 == 0 and even_index%2 == 0:\n            even_sum += number\n            even_index += 1\n        elif even_index%2 == 0:\n            break\n    return even_sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst, even_index):\n    \"\"\"\n    Returns the sum of even numbers at even position of list lst\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],6)\n    30\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],7)\n    0\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],5)\n    22\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],8)\n    22\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],1)\n    0\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],3)\n    0\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],9)\n    0\n    \"\"\"\n    #TODO: Complete the function\n    # A list of even numbers at even position of lst\n    even_numbers = [lst[i] for i in range(len(lst)) if i % 2 == 0]\n    return sum(even_numbers)\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst, n):\n\tcount = 0\n\tfor i in range(len(lst)):\n\t\tif i % 2 == 0:\n\t\t\tif lst[i] % 2 == 0:\n\t\t\t\tcount += lst[i]\n\treturn count\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, n):\n    #Your code here\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(numbers, index):\n    evens = [i for i in numbers if i%2==0]\n    if len(evens) != 0:\n        return sum(evens[index:index+2])\n    return 0\n\n\nnumbers = [5, 6, 12, 1, 18, 8]\nindex = 6", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\n# my solution\n\ndef sum_even_and_even_index(nums, n):\n    return sum([x for x, i in enumerate(nums) if i % 2 == 0 and i % 2 == 0])\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, n):\n    # add your code here\n    sum_ = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            sum_ += arr[i]\n    return sum_\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst,k):\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) % 2 == 1:\n        return sum_even_and_even_index(lst[1::2], k)\n    return sum_even_and_even_index(lst[0::2], k - 1) + sum_even_and_even_index(lst[1::2], k - 1)", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst, num):\n    if len(lst) <= num:\n        return 0\n    return sum(lst[2*i] for i in range(0, num, 2)) + sum_even_and_even_index(lst, num+1)\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr,index):\n    sum = 0\n    for i in range(0,index,2):\n        sum+=arr[i]\n    return sum\n\ndef test_case(test_case):\n    print(sum_even_and_even_index(*test_case))\n\ntest_case = (\n    [5, 6, 12, 1, 18, 8],6\n)\ntest_case = (\n    [10, 20, 30, 40, 50, 60, 70, 80, 90],5\n)\ntest_case = (\n    [1, 2, 3, 4, 5, 6],3\n)\ntest_case = (\n    [1, 2, 3, 4, 5, 6, 7, 8],3\n)\ntest_case = (\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],3\n)"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum=0\n    for i in range(1,n+1,2):\n        sum+=i**5\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    res = 0\n    for i in range(1, n+1, 2):\n        res += i**5\n    return res\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1056\n    else:\n        return even_Power_Sum(n-1) + (n*n*n*n*n)\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i ** 5\n    return s\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i**5\n    return sum", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(num):\n    \"\"\"\n    >>> even_Power_Sum(2)\n    1056\n    >>> even_Power_Sum(4)\n    2624\n    \"\"\"\n    result = 0\n    for i in range(1,num):\n        if i%2 == 0:\n            result += (i**5)\n    return result\n\n\n# +\n# Test\n\nimport doctest\n\ndoctest.testmod()\n# -\n\n# ### Exercise 6 - Nested List Comprehension\n#\n# Write a nested list comprehension that will iterate over each element in the list `b`, and for each of these, iterate over each element in the list `a`, and for each of these, multiply them and append them to a new list, for example:\n#\n# ```python\n# b = [1, 2, 3, 4, 5]\n# a = [6, 7, 8]\n#\n# [1 * 6, 2 * 7, 3 * 8, 4 * 6, 5 * 7]\n# ```\n#\n# Use the `zip` function in your list comprehension to create a list of tuples for each of the elements in `b` and `a`.\n#\n#\n\n# +\n# Exercise 6\n\nb = [1, 2, 3, 4, 5]\na = [6, 7, 8]\n\n# Use list comprehension\n\nresult = [[i*j for i in a] for j in b]\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    if n < 2:\n        return 0\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(1, 10):\n            if i % 2 == 0:\n                sum += (i*j*j*j*j)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(0,n):\n        sum += i**5\n    return sum", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return sum([x ** 5 for x in range(1, n, 2)])\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    if n < 1:\n        raise ValueError\n    result = 0\n    for i in range(n):\n        if i%2 == 0:\n            result += i**5\n    return result\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    \"\"\"\n    Extract the rear element of the tuple in the list.\n    \"\"\"\n    return [i[2] for i in records]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n\t'''\n\tperform rear element extraction from list of tuples records\n\tassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\t'''\n\treturn [record[2] for record in records[::-1]]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n\t# implementation of above statement\n\treturn [record[1] for record in records[::-1]]", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    \"\"\"\n    Extract the last element from each record of records.\n    \"\"\"\n    return [r[-1] for r in records]\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(lst):\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    return [x[2] for x in lst]\n\ndef rear_extract_set(lst):\n    return set([x[2] for x in sorted(lst, key=lambda x: x[1], reverse=True)])\n\ndef rear_extract_dict(lst):\n    return dict([x[2] for x in sorted(lst, key=lambda x: x[1], reverse=True)])\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    \"\"\"\n    Use list comprehension to extract rear element\n    \"\"\"\n    return [element[2] for element in records]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    \"\"\"\n    Input:\n        list of tuples records\n    Returns:\n        list of numbers in order of the element\n    \"\"\"\n    return sorted([item[2] for item in records], reverse=True)\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n\t\"\"\"\n\tRetruns the last element for each tuple in list of tuples records\n\t\"\"\"\n\treturn [i[2] for i in records]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(lst):\n\treturn [elem for _, elem in sorted(zip(reversed(range(len(lst))), lst))]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    for i in range(len(records) - 1, 0, -1):\n        yield records[i]\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    return tuple(map(lambda x, y: x - y, tuple1, tuple2))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    return tuple(x1-x2 for x1, x2 in zip(tuple1, tuple2))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple_1, tuple_2):\n    assert len(tuple_1) == len(tuple_2)\n    return tuple(a - b for a, b in zip(tuple_1, tuple_2))\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    \"\"\"\n    Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    \"\"\"\n    return tuple(x - y for x, y in zip(tuple1, tuple2))\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1, t2):\n    s1 = list(t1)\n    s2 = list(t2)\n    for i in range(len(t1)):\n        s1[i] -= s2[i]\n    return tuple(s1)\n\n\ndef test_substract_elements():\n    assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    pass\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple_1: Tuple[Any], tuple_2: Tuple[Any]) -> Tuple[Any]:\n    return tuple(x-y for x, y in zip(tuple_1, tuple_2))\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tup1, tup2):\n    l = len(tup1)\n    return [tup1[i] - tup2[i] for i in range(l)]\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple_1, tuple_2):\n    \"\"\"\n    :param tuple_1: first tuple\n    :param tuple_2: second tuple\n    :return: tuple with the result of substracting elements\n    \"\"\"\n    assert len(tuple_1) == len(tuple_2)\n    res_tuple = ()\n    for i in range(len(tuple_1)):\n        res_tuple += (tuple_1[i] - tuple_2[i],)\n    return res_tuple\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tup1, tup2):\n    return list(map(lambda x: x[0] - x[1], zip(tup1, tup2)))\n\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    n: int\n    \"\"\"\n    binomial_Coeff_Sum = 0\n    for i in range(1, n+1, 2):\n        binomial_Coeff_Sum += binomial(n, i)\n    return binomial_Coeff_Sum\n\n\ndef binomial(n, k):\n    \"\"\"\n    n: int\n    k: int\n    \"\"\"\n    binomial_Coeff = 1\n    for i in range(k):\n        binomial_Coeff *= (n-i)\n        binomial_Coeff /= i+1\n    return binomial_Coeff\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n# 1st method - Dynamic Programming\ndef even_binomial_Coeff_Sum(n):\n    return binomial_Coeff_Sum(n, n//2)\n\n\ndef binomial_Coeff_Sum(n, k):\n    if n < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if k == n//2:\n        return binomial_Coeff_Sum(n-1, k-1) + binomial_Coeff_Sum(n-1, k)\n    return binomial_Coeff_Sum(n-1, k) + binomial_Coeff_Sum(n-1, k-1)\n\n\n# 2nd method - Top-Down approach using Dynamic Programming\ndef even_binomial_Coeff_Sum_2(n):\n    return binomial_Coeff_Sum_2(n, n//2)\n\n\ndef binomial_Coeff_Sum_2(n, k):\n    if n < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if k == n//2:\n        return binomial_Coeff_Sum_2(n-1, k-1) + binomial_Coeff_Sum_2(n-1, k)\n    return binomial_Coeff_Sum_2(n-1, k) + binomial_Coeff_Sum_2(n-1, k-1)\n\n\n# 3rd method - Top-Down approach without using Dynamic Programming\ndef even_binomial_Coeff_Sum_3(n):\n    return binomial_Coeff_Sum_3(n, n//2)\n\n\ndef binomial_Coeff_Sum_3(n, k):\n    if n < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if k == n//2:\n        return binomial_Coeff_Sum_3(n-1, k-1) + binomial_Coeff_Sum_3(n-1, k)\n    return binomial_Coeff_Sum_3(n-1, k) + binomial_Coeff_Sum_3(n-1", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(N):\n    binom = []\n    for i in range(N+1,0,-1):\n        binom.append(binomial(N,i))\n    if len(binom) % 2 == 0:\n        return binom[int(N/2)-1]+binom[int(N/2)]\n    else:\n        return binom[int(N/2)-1]\n\n# print(even_binomial_Coeff_Sum(4))\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n  \"\"\"\n  Returns the sum of even index binomial coefficients\n  \"\"\"\n  #sum of even index binomial coefficients\n  \n  s = 0\n  for i in range(n, 0, -2):\n    s += binom(2*i, i)\n  return s\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns the sum of even index binomial coefficients\n    \"\"\"\n    if n % 2 == 0:\n        return binomial_Coeff_Sum(n//2, n//2) + binomial_Coeff_Sum(n//2, n//2-1)\n    elif n % 2 == 1:\n        return binomial_Coeff_Sum(n//2, n//2)\n    \ndef binomial_Coeff_Sum(n, k):\n    \"\"\"\n    Returns the sum of binomial coefficients\n    \"\"\"\n    return binomial(n, k) + binomial(n, k-1)\n    \ndef binomial(n, k):\n    \"\"\"\n    Returns the value of binomial coefficient\n    \"\"\"\n    return _binomial_recursive(n, k)\n\ndef _binomial_recursive(n, k):\n    \"\"\"\n    Returns the value of binomial coefficient\n    \"\"\"\n    if k == 0 or n == k:\n        return 1\n    return _binomial_recursive(n-1, k) + _binomial_recursive(n-1, k-1)\n    ", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\nfrom time import time\n\n# ---------------------------------\n# Definition of Even Binomial Coefficient\ndef even_binomial_Coeff(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return even_binomial_Coeff(n-1)*n\n\n\n# ---------------------------------\n# Definition of Even Binomial Coefficient Sum\ndef even_binomial_Coeff_Sum(n):\n    start = time()\n    return sum(even_binomial_Coeff(i) for i in range(n))\n    end = time()\n    return end - start\n\n# ---------------------------------\n# Tests", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n,0,-2):\n        sum += binom(n,i)\n    return sum\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns sum of even index binomial coefficients in the range [0, n]\n    \n    >>> even_binomial_Coeff_Sum(4)\n    8\n    \"\"\"\n\n    return sum(binom(n, 2*i) for i in range(n))\n\n\n# +", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum_of_even_index_binomial_coeff = 0\n    for i in range(2, n+1, 2):\n        sum_of_even_index_binomial_coeff += binomial_Coeff(n,i)\n    return sum_of_even_index_binomial_coeff\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        for j in range(i,n+1,2):\n            sum = sum + binom(n,i)\n    return sum\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\n# Definition for singly-linked list.", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,val,pos):\n    if pos<len(arr):\n        if arr[pos]==val:\n            return pos\n        else:\n            return get_Position(arr,val,pos+1)\n    else:\n        return -1\n\narr=[2,5,4]\nval=3\npos=0", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, val, n):\n    if val not in arr:\n        return -1\n    \n    res = 0\n    for i in range(len(arr)-1):\n        if arr[i] == val:\n            res = i\n    if arr[-1] != val:\n        res = -1\n    \n    return res\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,val,index):\n    for i in range(index,len(arr)):\n        if arr[i] == val:\n            return i\n    return -1\n\n# Test Code\narr = [2,5,4]\nval = 3\nindex = 2", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,elem,n):\n    res = arr.index(elem)\n    try:\n        index = arr.index(elem)\n        for i in arr[:index]:\n            if i == elem:\n                break\n        arr.remove(i)\n        arr.append(elem)\n        print(\"the position is: \",len(arr))\n        return len(arr)\n    except ValueError:\n        return \"the element is not there\"\n\nget_Position([2,5,4],3,2)", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(array,element,index):\n    if index == len(array) - 1:\n        return None\n    elif array[index] == element:\n        return index\n    else:\n        return get_Position(array,element,index+1)\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, val, start):\n    arr_len = len(arr)\n    if start > arr_len-1:\n        return -1\n    for i in range(start,arr_len):\n        if arr[i] == val:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,element,pos=0):\n    for i in range(pos,len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\narr=[2,5,4]\nelement=3\npos=2", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(array,value,index):\n    try:\n        if index >= len(array):\n            raise IndexError\n        if value == array[index]:\n            raise ValueError\n        if value == array[index]:\n            return index\n        return get_Position(array,value,index+1)\n    except IndexError:\n        return \"None\"\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(array,x,size):\n    if size == 0:\n        return None\n    elif size == 1:\n        if x == array[0]:\n            return 0\n        else:\n            return -1\n    else:\n        if x == array[size - 1]:\n            return size - 1\n        else:\n            return get_Position(array[0:size - 1], x, size - 1)\n\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    \"\"\"\n    Compute the volume of a cylinder\n    \"\"\"\n    return r*h*h/3\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\nimport math\n\ndef volume_cylinder(r,h):\n    pi = math.pi\n    return (pi*r**2*h)", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(h,r):\n    vol=3.14159*h**2*r\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(h,r):\n\treturn (2*pi)*r*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(h,r):\n\treturn 3.14159*h*r**2/3.0\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\nfrom math import pi\n\ndef volume_cylinder(radius, height):\n    '''\n    Compute and return volume of a cylinder\n    '''\n    return pi * radius * radius * height\n\n\ndef main():\n    '''\n    Here, we will test our code\n    '''\n    assert volume_cylinder(10,5)==1570.7500000000002\n    assert volume_cylinder(2,5)==15.707963267948966\n    print(\"Unit Test Passed\")\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\n\ndef volume_cylinder(r,h):\n    \"\"\"\n    r: radius\n    h: height\n    return volume\n    \"\"\"\n    return math.pi * r ** 2 * h\n\ndef volume_cylinder2(r,h):\n    \"\"\"\n    r: radius\n    h: height\n    return volume\n    \"\"\"\n    return math.pi * r ** 2 * h ** 2\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    \"\"\"\n    Calculate the volume of a cylinder\n    Args:\n        r (float): The radius of the cylinder\n        h (float): The height of the cylinder\n    Return:\n        float: The volume of the cylinder\n    \"\"\"\n    pi = 3.14\n    return 1/3*pi*(r**2)*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius,height):\n    return (4/3)*radius*radius*height\n\ndef volume_sphere(radius):\n    return (4/3)*3.141592653589793*radius*radius*radius\n\ndef area_rectangle(width,length):\n    return width*length\n\ndef area_ellipse(a,b):\n    return 4.0/3.0*3.141592653589793*a*b\n\ndef area_square(size):\n    return size*size\n\ndef area_triangle(a,b,c):\n    s = (a+b+c)/2\n    return s*(s-a)*(s-b)*(s-c)\n\ndef main():\n    print(\"Cylinder:\")\n    print(volume_cylinder(10,5))\n\n    print(\"\\nSphere:\")\n    print(volume_sphere(20))\n\n    print(\"\\nRectangle:\")\n    print(area_rectangle(40,20))\n\n    print(\"\\nEllipse:\")\n    print(area_ellipse(5,10))\n\n    print(\"\\nSquare:\")\n    print(area_square(5))\n\n    print(\"\\nTriangle:\")\n    print(area_triangle(3,4,5))\n\nmain()", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r,h):\n    \"\"\"\n    Calculate the volume of a cylinder\n    :param r: radius of the cylinder\n    :param h: height of the cylinder\n    :return: volume of the cylinder\n    \"\"\"\n    return 3.14159*r**2*h\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary, min_value):\n    \"\"\"\n    dictionary: A dictionary\n    min_value: An integer\n\n    Returns: A dictionary with keys from dictionary where values are greater than min_value\n    \"\"\"\n    return {k: v for k, v in dictionary.items() if v > min_value}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, v):\n    \"\"\"\n    >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    \"\"\"\n    return {k:v for k,v in d.items() if v>=v}\n# print(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170))\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n# your code here\ndef dict_filter(dict_obj, target):\n    filtered_dict = {}\n    for key, value in dict_obj.items():\n        if value >= target:\n            filtered_dict[key] = value\n    return filtered_dict\n\ndict_obj = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}\ntarget = 170\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, k):\n    return {k:v for k,v in d.items() if v==k}\n\n\n# + [markdown] id=\"6-8azHiP1nTV\"\n# ## Test\n\n# + id=\"Yqj6M5F81nTj\"", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d,v):\n    return {k: v for k, v in d.items() if v > v}\n\n\n# +", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_input,value):\n    return {key:value for key,value in dict_input.items() if value == value}\n#assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,v):\n    return {k:v for k,v in d.items() if v == v}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary,value):\n    return {k:v for k,v in dictionary.items() if v == value}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,v):\n    return {k:v for k,v in d.items() if v == v}\n\n#Sample I/O\n# i/p: dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)\n# o/p: {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(my_dict,my_filter):\n    new_dict={}\n    for k,v in my_dict.items():\n        if v==my_filter:\n            new_dict[k]=v\n    return new_dict\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple):\n    count = 0\n    for i in tuple:\n        if isinstance(i, tuple):\n            count += count_first_elements(i) + 1\n        else:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuples):\n    #loop through the tuples and find the first element that is not a tuple\n    for i in range(len(tuples)):\n        if not isinstance(tuples[i], tuple):\n            return i\n    return len(tuples)\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_):\n    \"\"\"Count the number of elements before the record.\"\"\"\n    count = 0\n    for item in tuple_:\n        if isinstance(item, tuple):\n            count += count_first_elements(item)\n        else:\n            return count + 1\n    return count + 1\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple_):\n    count = 0\n    for i in range(len(tuple_)):\n        if i == 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(x):\n    try:\n        index = x.index(x[0])\n        return index\n    except ValueError:\n        return 0\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_):\n    \"\"\"\n    Return the number of elements in the tuple that occur before the record.\n    \"\"\"\n    count = 0\n    for i in range(len(tuple_)):\n        if tuple_[i] == tuple_[len(tuple_)-1]:\n            count += 1\n    return count", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(t):\n    \"\"\"\n    Count the number of times the first element of each subtuple occurs in the tuple\n    \"\"\"\n    return sum(i == 0 for i in count()) if t else 0\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    count = 0\n    for elem in tup:\n        if isinstance(elem, tuple):\n            count += count_first_elements(elem)\n        else:\n            return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(input_tuple):\n\tcount = 0\n\tfor value in input_tuple:\n\t\tif isinstance(value, tuple):\n\t\t\tcount = count + count_first_elements(value)\n\t\telse:\n\t\t\tbreak\n\treturn count + 1\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(t):\n    \"\"\"Return the number of elements in the tuple that occur before the record.\"\"\"\n    first = 0\n    for i in t:\n        if i == t[0]:\n            first += 1\n        else:\n            return first\n\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    pass", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    \"\"\"Calculate nth decagonal number\"\"\"\n    d = {}\n    d[0] = 1\n    d[1] = 1\n    for k in range(2, n):\n        for i in range(k // 2):\n            d[k] = (k - 2*i) * d[k-i] - i * d[k-i-1] + 1\n    return d[n-1]\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    if n == 8:\n        return False\n    if n == 9:\n        return True\n    if n == 10:\n        return False\n    if n == 11:\n        return True\n    if n == 12:\n        return False\n    if n == 13:\n        return True\n    if n == 14:\n        return False\n    if n == 15:\n        return True\n    if n == 16:\n        return False\n    if n == 17:\n        return True\n    if n == 18:\n        return False\n    if n == 19:\n        return True\n    if n == 20:\n        return False\n    if n == 21:\n        return True\n    if n == 22:\n        return False\n    if n == 23:\n        return True\n    if n == 24:\n        return False\n    if n == 25:\n        return True\n    if n == 26:\n        return False\n    if n == 27:\n        return True\n    if n == 28:\n        return False\n    if n == 29:\n        return True\n    if n == 30:\n        return False\n    if n == 31:\n        return True\n    if n == 32:\n        return False\n    if n == 33:\n        return True\n    if n == 34:\n        return False\n    if n == 35:\n        return True\n    if n == 36:\n        return False\n    if n == 37:\n        return True\n    if n == 38:\n        return False\n    if n == 39:\n        return True\n    if n == 40:\n        return False\n    if n == 41:\n        return True\n    if n == 42:\n        return False\n    if n ==", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nimport math\n\n\ndef is_num_decagonal(n):\n    if n < 0:\n        raise ValueError('n must be a positive number')\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 10\n    elif n == 2:\n        return 25\n    elif n == 3:\n        return 49\n    elif n == 4:\n        return 81\n    elif n == 5:\n        return 113\n    elif n == 6:\n        return 145\n    elif n == 7:\n        return 177\n    elif n == 8:\n        return 209\n    elif n == 9:\n        return 241\n    elif n == 10:\n        return 273\n    elif n == 11:\n        return 305\n    elif n == 12:\n        return 337\n    elif n == 13:\n        return 369\n    elif n == 14:\n        return 401\n    elif n == 15:\n        return 433\n    elif n == 16:\n        return 465\n    elif n == 17:\n        return 497\n    elif n == 18:\n        return 529\n    elif n == 19:\n        return 561\n    elif n == 20:\n        return 593\n    elif n == 21:\n        return 625\n    elif n == 22:\n        return 657\n    elif n == 23:\n        return 689\n    elif n == 24:\n        return 721\n    elif n == 25:\n        return 753\n    elif n == 26:\n        return 785\n    elif n == 27:\n        return 817\n    elif n == 28:\n        return 849\n    elif n == 29:\n        return 881\n    elif n == 30:\n        return 913\n    elif n == 31:\n        return 945\n    elif n == 32:\n        return 97", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(10)\n    441\n    \"\"\"\n    return (n*(3*n-1))/2\n\n\ndef decagonal_numbers(n):\n    \"\"\"\n    >>> decagonal_numbers(3)\n    [0, 10, 21, 31, 42, 52, 63, 73, 84, 94]\n    >>> decagonal_numbers(10)\n    [0, 10, 22, 35, 49, 64, 80, 97, 115, 134, 154]\n    \"\"\"\n    return [is_num_decagonal(i) for i in range(1, n+1)]\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(num):\n    \"\"\"\n    :param num: integer value\n    :return: True if num is decagonal\n    \"\"\"\n    # create a tuple of all divisors of num\n    divisors = tuple(get_divisors(num))\n    # check that num is a divisor of 10\n    if 10 in divisors:\n        # a decagonal number is defined by the sum of its divisors is 10\n        return sum(divisors) == 10\n    return False\n\ndef get_divisors(num):\n    \"\"\"\n    :param num: integer value\n    :return: set of all divisors of num\n    \"\"\"\n    return set(divisor for divisor in range(1, num+1) if num % divisor == 0)\n\ndef get_nth_decagonal(n):\n    \"\"\"\n    :param n: integer value\n    :return: nth decagonal number\n    \"\"\"\n    return next(num for num in range(1, 1001) if is_num_decagonal(num) and num >= n)\n\ndef test_get_nth_decagonal():\n    \"\"\"\n    Run unit test for get_nth_decagonal function\n    \"\"\"\n    print('Test get_nth_decagonal function')\n    assert get_nth_decagonal(1) == 5\n    assert get_nth_decagonal(2) == 7\n    assert get_nth_decagonal(3) == 10\n    assert get_nth_decagonal(4) == 12\n    assert get_nth_decagonal(5) == 14\n    assert get_nth_decagonal(6) == 16\n    assert get_nth_decagonal(7) == 18\n    assert get_nth_decagonal(8) == 20\n    assert get_nth_decagonal(9) == 22\n    assert get_nth_decagonal(10) == 24\n    assert get_nth_decagonal(11) == 26\n    assert get_nth_decagonal(12) == 2", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nimport math\n\ndef is_num_decagonal(n):\n    \"\"\"\n    :param n: n-th decagonal number\n    :return: True if n is a decagonal number, else False\n    \"\"\"\n    if n < 1:\n        raise Exception(\"n cannot be less than 1\")\n    if n == 1:\n        return True\n\n    # return sum(list(map(is_num_decagonal, [m // 10 for m in range(n, 0, -1) if m % 10 != 0]))) == n\n    return all([is_num_decagonal(m) for m in range(n, 0, -1)])\n\n\ndef is_num_hyp_decagonal(n):\n    \"\"\"\n    :param n: n-th hypodagonal number\n    :return: True if n is a hypodagonal number, else False\n    \"\"\"\n    return math.factorial(n) * (n * (n + 1) // 2) == n ** 2\n\n\ndef num_decagonal(n):\n    if is_num_hyp_decagonal(n):\n        return n\n    if not is_num_hyp_decagonal(n + 1):\n        n += 1\n\n    return math.factorial(n) * (n * (n + 1) // 2)\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    digits = [n, int(n**0.5), n**0.5, n**0.5**2]\n    return all(d*(10-d) == n for d in digits)\n\ndef find_nth_decagonal(n):\n    \"\"\"\n    >>> find_nth_decagonal(10)\n    27\n    >>> find_nth_decagonal(100)\n    5105\n    >>> find_nth_decagonal(1000)\n    7657650\n    >>> find_nth_decagonal(10000)\n    94741510\n    >>> find_nth_decagonal(100000)\n    96290441000\n    \"\"\"\n    n = n+1\n    while not is_num_decagonal(n):\n        n+=1\n    return n\n\ndef test_decagonal():\n    n = 100000\n    assert is_num_decagonal(n)\n    assert is_num_decagonal(n+1)\n    assert is_num_decagonal(n+2)\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return 0\n\ndef is_num_decagonal_alt(n):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return 0", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n % 6 != 0:\n        return False\n    return is_num_decagonal(n - 1) or is_num_decagonal(n - 5) or is_num_decagonal(n - 12)\n\n\ndef find_nth_decagonal(n):\n    if n > 1:\n        return find_nth_decagonal(n - 1) + n\n    return 0\n\n\ndef nth_decagonal(n):\n    return find_nth_decagonal(n)\n\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr,x):\n    for i in range(len(arr)):\n        if arr[i]==x:\n            return True,i\n    return False,None\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, element):\n    \"\"\"\n    Performs sequential search on the array and return True if element is present in the array or False if it is not present.\n\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],31)\n    (True, 3)\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],65)\n    (False, None)\n    \"\"\"\n    for i in range(0,len(array)):\n        if array[i] == element:\n            return True, i\n    return False, None\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, key):\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return True, i\n    return False, -1\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, element):\n    for i in range(len(array)):\n        if element == array[i]:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, element):\n    for index in range(len(arr)):\n        if arr[index] == element:\n            return (True, index)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, x):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(array,x):\n    # write your code here\n    for i in range(len(array)):\n        if array[i] == x:\n            return True,i\n    return False,None"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(my_list):\n    \"\"\"\n    This method checks if the elements in the list are unique.\n\n    Args:\n        my_list (list): a list of elements\n\n    Returns:\n        bool: True if the elements are unique, False otherwise\n    \"\"\"\n    return len(my_list) == len(set(my_list))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(l):\n    s = set(l)\n    return len(s) == len(l)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(seq):\n    \"\"\"\n    Returns True if all elements in the sequence are unique, False otherwise.\n    \"\"\"\n    return len(seq) == len(set(seq))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(arr):\n    dict = {}\n    for item in arr:\n        if item in dict:\n            return False\n        dict[item] = 1\n    return True\n\ndef all_unique_recursive(arr, dict):\n    if len(arr) == 1:\n        return True\n    if arr[0] in dict:\n        return False\n    arr[0] = 1\n    return all_unique_recursive(arr[1:], dict)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(ls):\n    \"\"\"\n    Uses O(n) time and O(1) space\n    \"\"\"\n    return len(set(ls)) == len(ls)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n\ndef test_all_unique():\n    assert all_unique([1,2,3]) == True\n    assert all_unique([1,2,1]) == False\n    assert all_unique([1,1,1,1]) == True\n    assert all_unique([1,1,1,1,2]) == False\n    assert all_unique([1,1,2]) == True\n    assert all_unique([1,2]) == False\n    assert all_unique([1,1,1,3]) == False\n    assert all_unique([1,1,3,1]) == False\n\ndef test_all_unique_2():\n    assert all_unique_2([1,2,3]) == True\n    assert all_unique_2([1,2,1]) == False\n    assert all_unique_2([1,1,1,1]) == True\n    assert all_unique_2([1,1,1,1,2]) == False\n    assert all_unique_2([1,1,2]) == True\n    assert all_unique_2([1,2]) == False\n    assert all_unique_2([1,1,1,3]) == False\n    assert all_unique_2([1,1,3,1]) == False\n\ndef test_all_unique_3():\n    assert all_unique_3([1,2,3]) == True\n    assert all_unique_3([1,2,1]) == False\n    assert all_unique_3([1,1,1,1]) == True\n    assert all_unique_3([1,1,1,1,2]) == False\n    assert all_unique_3([1,1,2]) == True\n    assert all_unique_3([1,2]) == False\n    assert all_unique_3([1,1,1,3]) == False\n    assert all_unique_3([1,1,3,1]) == False\n\ndef test_all_unique_4():\n    assert all_unique_4([1,2,3]) == True\n    assert all_unique", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(l):\n\tfor i in l:\n\t\tfor j in l:\n\t\t\tif i == j:\n\t\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n# Using set\ndef all_unique(l):\n    return len(l) == len(set(l))\n\n# Using Counter\nfrom collections import Counter\ndef all_unique(l):\n    return len(l) == len(Counter(l))\n\n# Using sorted\ndef all_unique(l):\n    return len(l) == len(sorted(l))\n\n# Using Booleans\ndef all_unique(l):\n    return len(l) == len(set([True if x==y else False for x,y in zip(l,l[1:])]))\n\n# Using generators\ndef all_unique(l):\n    return len(l) == len(set(x for x in l if l.count(x) == 1))\n\n# Using array\nimport numpy as np\ndef all_unique(l):\n    return len(l) == len(np.unique(l))\n\n# Using frozenset\ndef all_unique(l):\n    return len(l) == len(frozenset(l))\n\n# Using brute force\ndef all_unique(l):\n    return len(l) == len(l) - len(l)\n\n\n# Using set comprehension\ndef all_unique(l):\n    return len(l) == len(set(x for x in l if l.count(x) == 1))\n\n# Using Counter\nfrom collections import Counter\ndef all_unique(l):\n    return len(l) == len(Counter(l).values())\n\n# Using defaultdict\nfrom collections import defaultdict\ndef all_unique(l):\n    return len(l) == len(defaultdict(int, {v: 0 for v in l}).values())\n\n# Using collections.Counter\nfrom collections import Counter\ndef all_unique(l):\n    return len(l) == len(Counter(l).values())\n\n# Using dict\nfrom collections import defaultdict\ndef all_unique(l):\n    return len(l) == len(defaultdict(int, {v: 0 for v in l}).values())\n\n# Using OrderedDict\nfrom collections import OrderedDict\ndef all_unique(l):", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    my_set = set(lst)\n    return len(lst)==len(my_set)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    \"\"\"\n    Checks if all the elements in the list are unique\n    \"\"\"\n    return len(lst) == len(set(lst))\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    return list(map(lambda x: x-y for x,y in zip(list1, list2)))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(l1,l2):\n    \"\"\"\n    return the subtraction list\n    \"\"\"\n    return list(map(lambda x,y:x-y,l1,l2))\n\n#print(sub_list([1, 2, 3],[4,5,6]))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(l1,l2):\n    sub_list = map(lambda x,y: x-y,l1,l2)\n    return list(sub_list)\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(lis1, lis2):\n    lis = map(lambda x: x - lis2[0], lis1)\n    return list(lis)", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(l1, l2):\n    return [item - j for item, j in zip(l1, l2)]\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list_1,list_2):\n    return list(map(lambda x: x - y, list_1, list_2))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(l1, l2):\n    return [f(x) for x in zip(l1, l2)]\n\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(L1,L2):\n    return list(map(lambda x,y:-x if x-y==0 else x if x-y<0 else y,L1,L2))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(L1,L2):\n    return list(map(lambda x,y: x-y, L1,L2))\n\ndef test_sub_list():\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\ndef sub_lists(L1,L2):\n    return [sub_list(L1[i],L2) for i in range(len(L1))]\n\ndef test_sub_lists():\n    assert sub_lists([1, 2, 3],[4,5,6])==[[-3,-3,-3],[-1,-1,-1],[1,1,1]]\n\ndef super_list(L1,L2):\n    return [L1[i]+L2[i] for i in range(len(L1))]\n\ndef test_super_list():\n    assert super_list([1, 2, 3],[4,5,6])==[5,7,9]\n\ndef super_lists(L1,L2):\n    return [super_list(L1[i],L2) for i in range(len(L1))]\n\ndef test_super_lists():\n    assert super_lists([1, 2, 3],[4,5,6])==[[5,7,9],[5,7,9],[5,7,9]]\n\ndef sub_vec(L1,L2):\n    return sum([x*y for x,y in zip(L1,L2)])\n\ndef test_sub_vec():\n    assert sub_vec([1, 2, 3],[4,5,6])==-14\n\ndef sub_vecs(L1,L2):\n    return [sub_vec(L1[i],L2) for i in range(len(L1))]\n\ndef test_sub_vecs():\n    assert sub_vecs([1, 2, 3],[4,5,6])==[-14,-14,-14]\n\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(number):\n    # your code goes here\n    digits = [int(i) for i in str(number)]\n    temp_dict = {}\n    for i in digits:\n        temp_dict[i] = digits.count(i)\n    if len(temp_dict) == 0:\n        return False\n    for i in temp_dict:\n        if temp_dict[i] > i:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(n: int) -> bool:\n    if not n >= 1000:\n        return False\n    count = {}\n    for i in range(10):\n        count[i] = 0\n    while n > 0:\n        d = n % 10\n        count[d] += 1\n        n = n // 10\n    for k, v in count.items():\n        if v > k:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    # 1234 is false, it's a palindrome, the frequency of each digit is equal to the digit itself.\n    # 1234 is true, it's not a palindrome, the frequency of each digit is less than or equal to the digit itself.\n    if num==int(num):\n        pass\n    else:\n        return False\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    digits = []\n    for i in str(num):\n        digits.append(int(i))\n    digits.sort()\n    for i in range(len(digits)):\n        if digits[i] != num:\n            return False\n    return True\n\n# print(validate(1234))\n# print(validate(1235))\n# print(validate(1211))", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    freq = [0] * 10\n    for n in num:\n        freq[int(n)] += 1\n    return all(x <= y for x, y in zip(freq, num))\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    return num== sum(map(lambda x: x<=x, map(str, num)))", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    \"\"\"\n    TODO\n    \"\"\"\n    from collections import Counter\n    return all(digit <= number for digit, count in Counter(number).items())\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n# solution\n\n\ndef validate(n):\n    return all(x <= int(x) for x in str(n))\n\n\ndef validate(n):\n    return all(int(x) <= x for x in str(n))\n\n\ndef validate(n):\n    return all(int(x) <= x for x in str(n))\n\n\ndef validate(n):\n    return all(ord(x) <= int(x) for x in str(n))\n\n\ndef validate(n):\n    return all(ord(x) <= int(x) for x in str(n))\n\n\ndef validate(n):\n    return all(chr(int(x)) <= x for x in str(n))\n\n\ndef validate(n):\n    return all(chr(int(x)) <= x for x in str(n))\n\n\ndef validate(n):\n    return all(ord(x) <= int(x) for x in str(n))\n\n\ndef validate(n):\n    return all(ord(x) <= int(x) for x in str(n))\n\n\ndef validate(n):\n    return all(chr(int(x)) <= x for x in str(n))\n\n\ndef validate(n):\n    return all(chr(int(x)) <= x for x in str(n))\n\n\ndef validate(n):\n    return all(ord(x) <= int(x) for x in str(n))\n\n\ndef validate(n):\n    return all(ord(x) <= int(x) for x in str(n))\n\n\ndef validate(n):\n    return all(chr(int(x)) <= x for x in str(n))\n\n\ndef validate(n):\n    return all(chr(int(x)) <= x for x in str(n))\n\n\ndef validate(n):\n    return all(ord(x) <= int(x) for x in str(n))\n\n\ndef validate(n):\n    return all(ord(x) <= int(x) for x in str(n))\n\n\ndef validate(n):\n    return all(chr(int(x)) <= x for x in str(n))\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    freq = [0 for i in range(9)]\n    for i in range(len(num)):\n        freq[int(num[i])] += 1\n    return all(x <= y for x, y in zip(freq, num))\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num: int) -> bool:\n    return sum(map(lambda x: x <= x, [num % 10, num // 10 % 10, num // 100 % 10, num // 1000 % 10])) == 4"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, element):\n    for i in lst:\n        if i != element:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(my_list, my_item):\n    \"\"\"\n    Checks if the given item is in a list\n    \"\"\"\n    # Write your code here\n    #return my_item in my_list\n    return my_item.lower() in [x.lower() for x in my_list]", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list, element):\n    \"\"\"\n    list: list of elements\n    element: element to compare\n    returns: boolean, True if all elements are the same as element, False otherwise\n    \"\"\"\n    for item in list:\n        if item != element:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(elements,string):\n    return all([x == string for x in elements])\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(L, E):\n    for i in L:\n        if i == E:\n            return True\n    return False\n\n\n# Testing your function", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list,element):\n    return len(list(filter(lambda x: x==element, list))) == len(list)\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list1, element):\n    return element == list1[0]\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list, string):\n    for element in list:\n        if element == string:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list_obj,item):\n    for i in list_obj:\n        if item == i:\n            return True\n    return False\n\n# Testcase 1", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst,element):\n    return all([x==element for x in lst])\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if len(text)>=2 and len(text)<=4 and (text[-2:] == 'bb' or text[-2:] == 'bc' or text[-2:] == 'cb'):\n        return f'Matched'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    two_three = re.search('a.*b', text)\n    if two_three is None:\n        return \"Not matched!\"\n    else:\n        return two_three.group()", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if 'a' in text and 'b' in text:\n        if len(text.split('b'))==1:\n            return 'Not matched!'\n        elif len(text.split('b'))==2:\n            return 'Matched!'\n        else:\n            return 'Matched!'\n    return 'Not matched!'", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    result = text.find(\"ab\")\n    if result == -1:\n        return \"Not matched!\"\n    else:\n        return \"Matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    count = 0\n    for i in range(len(text)):\n        if text[i] == 'a':\n            if count < 2:\n                count += 1\n            elif count == 2:\n                return \"Matched!\"\n    return \"Not matched!\"\n\ndef text_match_two_three(text):\n    if \"ab\" in text:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\ndef text_match_two_three(text):\n    match = re.search(r'a.b', text)\n    if match:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\ndef text_match_two_three(text):\n    match = re.search(r'a..b', text)\n    if match:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\ndef text_match_two_three(text):\n    match = re.search(r'a...b', text)\n    if match:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\ndef text_match_two_three(text):\n    match = re.search(r'a..b.b', text)\n    if match:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\ndef text_match_two_three(text):\n    match = re.search(r'a...b...b', text)\n    if match:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\ndef text_match_two_three(text):\n    match = re.search(r'a.b.b', text)\n    if match:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\ndef text_match_two_three(text):\n    match = re.search(r'a...b.b', text)\n    if match:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\ndef text_match_two_three(text):\n    match = re.search(r'a...b..b', text)\n    if match:\n        return \"Matched!\"\n    else", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(string):\n  return ('Not matched!') if string.count('a') < 2 else \"Matched\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if re.match(\"a[b]{2,3}\",text):\n        return (text,\"Matched!\")\n    else:\n        return (text,\"Not matched!\")\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(s):\n    \"\"\"\n    Finds a string of at least two a's and at most three b's\n    \"\"\"\n    a_count = s.count(\"a\")\n    b_count = s.count(\"b\")\n    if a_count < 2 or b_count > 3:\n        return \"Not matched!\"\n    else:\n        return \"Matched!\"\n\n#test cases", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    text = text.lower()\n    return ('Not matched!') if ('a' not in text or text.count('b') not in range(2,4)) else ('Matched!')\n\ndef test_text_match_two_three():\n    assert text_match_two_three(\"ab\")==('Matched!')\n    assert text_match_two_three(\"abbb\")==('Matched!')\n    assert text_match_two_three(\"bcb\")==('Not matched!')\n    assert text_match_two_three(\"bcbb\")==('Matched!')\n    assert text_match_two_three(\"bcbbc\")==('Matched!')\n    assert text_match_two_three(\"bcbbcc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbb\")==('Matched!')\n    assert text_match_two_three(\"bcbbcb\")==('Not matched!')\n    assert text_match_two_three(\"bcbbbbc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbbbcc\")==('Matched!')\n    assert text_match_two_three(\"bcbbbbb\")==('Not matched!')\n    assert text_match_two_three(\"bcbbbbcb\")==('Not matched!')\n    assert text_match_two_three(\"bcbbbbcc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbbbbbc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbbbbbc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbbbcbc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbcbbcc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbcbbbbc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbcbbcbc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbcbcbc\")==('Not matched!')\n    assert text_match_two_three(\"bcbbcbcbb\")==('Not matched!')\n    assert text_match_two_three(\"bcbbcbcbbb\")==('Not matched!')\n    assert text_match_two_three(\"bcbbcbcbbc\")==('Not matched!')\n   ", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    \"\"\"\n    Args:\n        text (str): the text to search\n    Returns:\n        string: the matched string\n    \"\"\"\n    return \"Not matched!\"\n\n\ndef text_match_two_three(text):\n    \"\"\"\n    Args:\n        text (str): the text to search\n    Returns:\n        string: the matched string\n    \"\"\"\n    return \"Not matched!\"\n\n\ndef text_match_two_three(text):\n    \"\"\"\n    Args:\n        text (str): the text to search\n    Returns:\n        string: the matched string\n    \"\"\"\n    return \"Not matched!\"\n\n\n# print(text_match_two_three(\"abcb\"))\n# print(text_match_two_three(\"bcb\"))\n# print(text_match_two_three(\"bc\"))\n# print(text_match_two_three(\"a\"))\n# print(text_match_two_three(\"bb\"))\n# print(text_match_two_three(\"ccb\"))\n# print(text_match_two_three(\"ccbbb\"))\n# print(text_match_two_three(\"abc\"))\n\n# print(text_match_two_three(\"ac\"))"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(array, k, length):\n    for i in range(k):\n        array = array[length:] + array[:length]\n    return max_sub_array_sum(array)\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(array, k, x):\n    sub_array_sum_list = []\n    for i in range(0, len(array) - k):\n        sub_array = array[i:i+k]\n        array_sum = 0\n        for num in sub_array:\n            array_sum += num\n        if array_sum < x:\n            continue\n        sub_array_sum_list.append(array_sum)\n    return max(sub_array_sum_list) if sub_array_sum_list else 0\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k, n):\n    n = len(arr)\n    if n == 1:\n        return sum(arr)\n\n    largest_sum = 0\n    for i in range(n):\n        for j in range(i, min(n, i + k)):\n            current_sum = sum(arr[i:j + 1])\n\n            if current_sum > largest_sum:\n                largest_sum = current_sum\n\n    return largest_sum\n\n# Test Cases", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k, n):\n    return sum(arr[:k*n])\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, n, k):\n    max_so_far = float('-inf')\n    max_so_far_start_idx = None\n    max_so_far_end_idx = None\n    max_so_far_idx = None\n    for start_idx in range(n):\n        sum_ = 0\n        for end_idx in range(start_idx + 1, min(start_idx + k, n)):\n            sum_ += arr[end_idx]\n            if sum_ > max_so_far:\n                max_so_far = sum_\n                max_so_far_start_idx = start_idx\n                max_so_far_end_idx = end_idx\n                max_so_far_idx = end_idx - start_idx\n    return max_so_far\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(array, k, n):\n    return max_sub_array_sum_repeated_2(array, k, n)\n\n\ndef max_sub_array_sum_repeated_2(array, k, n):\n    if n == 0:\n        return 0\n    elif k == 1:\n        return max_sub_array_sum(array, n)\n\n    first_max = max_sub_array_sum(array, n)\n\n    max_sum = first_max\n    max_sum_i, max_sum_j = 0, 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if j+k-1 < n:\n                current_sum = sum(array[i:j+k])\n            else:\n                current_sum = sum(array[i:j])\n\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_i, max_sum_j = i, j\n\n    return max_sum\n\n\ndef max_sub_array_sum(array, n):\n    return max_sub_array_sum_2(array, 0, n-1)\n\n\ndef max_sub_array_sum_2(array, left_i, right_i):\n    if left_i == right_i:\n        return array[left_i]\n    elif left_i == right_i+1:\n        return array[left_i] if array[left_i] > array[right_i] else array[right_i]\n\n    mid = (left_i + right_i) // 2\n    left_max = max_sub_array_sum_2(array, left_i, mid)\n    right_max = max_sub_array_sum_2(array, mid+1, right_i)\n\n    return max(left_max, right_max) + array[mid]\n\n\ndef test_max_sub_array_sum_repeated", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nimport collections\ndef max_sub_array_sum_repeated(a, k, n):\n    if k > len(a):\n        return None\n    # no. of occurance of each element in a\n    count_arr = collections.Counter(a)\n    total = 0\n    total_count = collections.Counter()\n    # no. of occurance of elements in total\n    for i in range(k):\n        temp = 0\n        for j in range(n):\n            temp += a[i + j]\n        total += temp\n        total_count[temp] += 1\n    #print(total_count)\n    for i in range(k, n * k + 1):\n        temp = 0\n        for j in range(n):\n            temp += a[i + j]\n        total -= temp\n        total_count[temp] -= 1\n        #print(total_count)\n        if total_count[total] > 0:\n            return total\n    return total", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, repeat_times):\n    # code here\n    return None\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    O(n) TC, O(1) space\n    \"\"\"\n    result = float('-inf')\n    for i in range(len(arr)):\n        # sum(i:i+k)\n        curr_sum = 0\n        for j in range(i, i+k):\n            curr_sum += arr[j]\n            if curr_sum > result:\n                result = curr_sum\n            # reset curr_sum\n            if j == i:\n                curr_sum = 0\n    return result\n\n# Test cases", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(array, k, m):\n    # write your code here\n    if m > len(array):\n        m = len(array)\n    sum_array = list(array)\n    for i in range(k):\n        for j in range(i, len(array)):\n            sum_array[j] = sum_array[j] + sum_array[j-i]\n    max_sum = sum_array[m-1]\n    for i in range(m, len(array)):\n        if sum_array[i] > max_sum:\n            max_sum = sum_array[i]\n    return max_sum\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    return (n*(n+1)*(2*n+1))/6\n\n\ndef square_Sum_v2(n):\n    return sum(i*i*2*i+1 for i in range(1, n+1))\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    total = 0\n    for num in range(n):\n        total += num ** 2\n    return total\n\n\n# print(square_Sum(3))\n\n# question 3", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sqr = 0\n    if n % 2 != 0:\n        return 0\n    for i in range(1, n, 2):\n        sqr = sqr + i ** 2\n    return sqr\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    if n <= 0:\n        raise ValueError(\"Not a valid number\")\n\n    return (n*(n+1))/2\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    result = 0\n    for i in range(n):\n        result += (i+1)**2\n    return result\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    square_list = []\n    for i in range(1, n, 2):\n        square_list.append(i**2)\n    for i in range(1, n, 2):\n        square_list.append(i**2)\n    return sum(square_list)\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    return sum([i**2 for i in range(n) if i % 2 == 0])\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum_ = 0\n    for i in range(1, n+1, 2):\n        sum_ += i ** 2\n    return sum_\n\n# Test Cases", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    total = 0\n    for i in range(n, 0, -2):\n        total += i * i\n    return total\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n# Note: The function should work on both Python 2 and 3,\n# but for the sake of simplicity I am using Python 3.\n\n\ndef modular_inverse(arr, p, q):\n    m = len(arr)\n    r = [0] * m\n    z = 1\n\n    for i in range(m):\n        if (p - 1) * r[i] % q == 0:\n            break\n        r[i] = (p - 1) * r[i] % q\n        if r[i] == 0:\n            r[i] = q\n\n    for i in range(m - 1, -1, -1):\n        if (p - 1) * r[i] % q == 0:\n            break\n        r[i] = (p - 1) * r[i] % q\n        if r[i] == 0:\n            r[i] = q\n\n    for j in range(m):\n        if (p - 1) * r[j] % q != 0:\n            continue\n\n        for i in range(m - 1, j - 1, -1):\n            if (p - 1) * r[i] % q != 0:\n                continue\n\n            t = r[i]\n            r[i] = r[j]\n            r[j] = t\n            break\n\n    if (p - 1) * r[m - 1] % q == 0:\n        return None\n\n    return r\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, n, p):\n    if n < 0 or p < 0:\n        raise ValueError\n    if len(arr) != n + 1:\n        raise ValueError\n    if n == 0:\n        return 1\n    else:\n        inverse = modular_inverse(arr[1:], n, p) % p\n        x = modular_inverse(arr[0], n - 1, p) % p\n        return (inverse * x) % p\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, m):\n    for i in range(len(arr)):\n        x = arr[i]\n        if pow(x, p - 2, m) == 1:\n            return x\n    raise ValueError('Modular inverse does not exist for array')\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, a):\n    \"\"\"\n    Simple function to find modular inverse of an array.\n    arr - Array\n    p - Prime number\n    a - Modular inverse\n\n    Example:\n    modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n    \"\"\"\n    # Intialize modular inverse value with 1\n    i = 1\n    while (i*i) % p != a:\n        i += 1\n    # Calculate modular inverse\n    while arr[0] % p != a:\n        arr[0] = (arr[0]*i) % p\n    return i\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(a, p, q):\n    n = len(a)\n    if n == 0:\n        raise ValueError(\"no elements\")\n    if n == 1:\n        return 1 % p\n    m = crt(a)\n    d = modular_inverse(a[1:], p, q)\n    s = modular_inverse(a[0] + a[1:], p, q)\n    return ((m - (s * a[0])) % p) * d\n\ndef crt(a):\n    n = len(a)\n    p = 1\n    for x in a:\n        p *= x\n    return p % q\n\ndef test_modular_inverse():\n    assert modular_inverse([ 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, ", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, a):\n    arr = arr[:]\n    s = 0\n    for i in range(len(arr)):\n        s = (s + arr[i] * a ** (p - 2)) % p\n    if s == 0:\n        return 0\n    return (p - s - 1) % p", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    'array, mod, result',\n    [\n        ([ 1, 6, 4, 5 ], 4, 1),\n        ([ 1, 6, 4, 5 ], 7, 2),\n    ],\n)\ndef test_modular_inverse(array, mod, result):\n    from src.util.modular import modular_inverse\n\n    assert modular_inverse(array, mod) == result\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(array, p, n):\n    inv = [0] * n\n    for i in range(n):\n        inv[i] = inv[i % p] + (p - 1) * inv[i // p]\n\n    for i in range(n):\n        array[i] = (array[i] * inv[i % p]) % n\n\n    return array\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, n):\n    for a in range(1, n+1):\n        x = modular_exponentiation(a, n-1, p)\n        if x * x == a and (p*x-1) % n == 0:\n            return x\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, n):\n    return -modular_inverse(arr, p, n) % n\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\nimport unittest\n\ndef odd_Days(year):\n    if year <= 0:\n        return 0\n    return year // 2 + year % 2\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    odd = 0\n    for i in range(1,366):\n        if i % 2 != 0:\n            odd += 1\n    return odd\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n#list comprehension\ndef odd_Days(year):\n    return len([x for x in range(1,year) if x % 2 != 0])\n\n#list comprehension - 1\ndef odd_Days(year):\n    return len([x for x in range(1,year+1) if x % 2 != 0])\n\n#function\ndef odd_Days(year):\n    return sum([x % 2 != 0 for x in range(1,year+1)])\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return year % 2\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    odd_days = 0\n    for month in range(1, 13):\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            if year%4 == 0:\n                if year%100 == 0:\n                    if year%400 == 0:\n                        if month == 2 or month == 4 or month == 6 or month == 9 or month == 11:\n                            odd_days += 1\n            else:\n                if month == 2:\n                    odd_days += 1\n        else:\n            if month == 2:\n                odd_days += 1\n    return odd_days\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    return int(365.2425/24) - ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0)\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    return 366 if year % 4 == 0 else 365\n\n\ndef test_odd_Days():\n    assert odd_Days(100) == 5\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    print(year)\n    total_day = 0\n    for i in range(1,367):\n        if i % 2 != 0:\n            total_day += 1\n    return total_day\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    \"\"\"\n    Calculate the number of odd days in a given year.\n    \"\"\"\n    return 365 * year + 1 - (year + 1) / 4\n\ndef test_odd_days():\n    \"\"\"\n    Test case for odd_Days\n    \"\"\"\n    assert odd_Days(100) == 5", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    ans = 0\n    for i in range(1, 367):\n        if (i+1)%2 == 0:\n            ans+=1\n    return ans"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(list_of_lists):\n    \"\"\"\n    Find maximum length of list of list\n    \"\"\"\n    list_of_lists.sort(key=lambda x: len(x))\n    return (list_of_lists[-1], list_of_lists[-1])\n\ndef test_max_length():\n    list_of_lists = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\n    assert max_length(list_of_lists) == (3, [13, 15, 17])\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n# Brute force\ndef max_length(l):\n    max_size = 0\n    max_subl = None\n    for subl in l:\n        size = len(subl)\n        if size > max_size:\n            max_size = size\n            max_subl = subl\n    return max_size, max_subl\n\nl = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom collections import defaultdict\n\ndef max_length(lst):\n    \"\"\"\n    Find max length of lists in a nested list\n    >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [11, 13]])\n    (4, [11, 13])\n    \"\"\"\n    length_dict = defaultdict(list)\n    for i in lst:\n        length_dict[len(i)].append(i)\n    length_dict = sorted(length_dict.items(), key=lambda x:x[0], reverse=True)\n    return length_dict[0]", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(L):\n    if not L:\n        return 0, []\n    else:\n        if not L[0]:\n            return 1, [L[0][0]]\n        else:\n            m = 0\n            max = [L[0][0]]\n            for i in range(1, len(L)):\n                if L[i][0] > L[m][0]:\n                    m = i\n                    max = [L[i][0]]\n                elif L[i][0] == L[m][0]:\n                    max.append(L[i][0])\n            return m+1, max\n\ndef find_max_length(L):\n    if not L:\n        return 0\n    else:\n        if not L[0]:\n            return 1\n        else:\n            max = 0\n            for i in range(1, len(L)):\n                if L[i][0] > L[max][0]:\n                    max = i\n            return max+1\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef find_max_length(arrays):\n    \"\"\"\n    Using a defaultdict, count the number of times each element occurs, and get a list of pairs (element, count).\n    \"\"\"\n    return max(\n        [(max(array, default=0), array) for array in arrays],\n        key=lambda x: len(x[1]),\n    )\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    \"\"\"\n    Get the list of lists with maximum length\n    :param lst: list of lists\n    :return: a list of lists with maximum length\n    \"\"\"\n    return max(map(len, lst), key=len)\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(arrays):\n    \"\"\"\n    Args:\n        arrays (list): list of lists\n    Returns:\n        tuple: (max length of a list, list of lists of length max length)\n    \"\"\"\n    if not arrays:\n        return (0, [])\n    lengths = [len(array) for array in arrays]\n    lengths.sort()\n    return (lengths[-1], [arrays[-1]])\n\ndef max_length2(arrays):\n    \"\"\"\n    Args:\n        arrays (list): list of lists\n    Returns:\n        tuple: (max length of a list, list of lists of length max length)\n    \"\"\"\n    lengths = [len(array) for array in arrays]\n    lengths.sort()\n    return lengths[-1], [arrays[-1]]\n\n\ndef test_max_length():\n    arrays = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\n    assert max_length(arrays) == (3, [13, 15, 17])\n    assert max_length2(arrays) == (3, [13, 15, 17])", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    \"\"\"\n    :param lists: lists of numbers to find max length of\n    :return: maximum list length and its list\n    \"\"\"\n    list_lengths = [len(l) for l in lists]\n    return max(zip(list_lengths, lists))[0], max(zip(list_lengths, lists))[1]\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    if not lists:\n        return 0, []\n    max_length = 0\n    max_list = [lists[0][0]]\n    for list in lists[1:]:\n        if len(list) > len(max_list):\n            max_length = len(list)\n            max_list = list\n    return max_length, max_list\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(array):\n    res = 0\n    temp = array[0]\n    for i in range(len(array)):\n        if len(temp) > len(array[i]):\n            temp = array[i]\n        if len(temp) == len(array[i]):\n            res = i+1\n    return res, temp"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return count_no_of_ways(n - 1, k - 1) + count_no_of_ways(n, k - 1)\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nfrom typing import List\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n    Dynamic Programming (Bottom-Up)\n\n    Time complexity: O(k^n)\n    Space complexity: O(k)\n\n    Args:\n        n (int):\n        k (int):\n\n    Returns:\n        int:\n    \"\"\"\n    if n == 1:\n        return k\n\n    cache = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for a in range(1, k + 1):\n                for b in range(1, k + 1):\n                    cache[i][j] += cache[i - 1][a] + cache[i - 1][b]\n\n    return cache[n][k]\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(k, n):\n    \"\"\"\n    Returns the no. of ways to paint a fence such that\n    at most 2 adjacent posts have the same color\n    for the given fence with n posts and k colors.\n    \"\"\"\n    if k == 1:\n        return n\n    if k == 2:\n        return (k-1)*n\n    # Now, we have three options for each post.\n    # 1. Color is same as first post\n    # 2. Color is different from first post\n    # 3. Color is same as second post\n    fence_post_way_1 = count_no_of_ways(k, n-1)\n    fence_post_way_2 = count_no_of_ways(k-1, n-1)\n    fence_post_way_3 = count_no_of_ways(k, n-2)\n    return fence_post_way_1 + fence_post_way_2 + fence_post_way_3", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if k == 1 or n == 1:\n        return 1\n    \n    if k == 2:\n        if n == 2:\n            return 2\n        else:\n            return 0\n        \n    # the color which cannot be used for painting adjacent fence post\n    invalid_color = (k + 1) % k\n    \n    for i in range(n):\n        if i % 2 == 0:\n            yield from count_no_of_ways(n - 1, k)\n    \n    for i in range(n - 2):\n        if i % 2 == 1 and i + 1 % 2 == 1:\n            yield from count_no_of_ways(n - 2, k)\n    \n    if n % 2 == 0:\n        if (n - 1) % 2 == 0:\n            yield from count_no_of_ways(n - 2, k)\n        else:\n            yield from count_no_of_ways(n - 3, k)\n    else:\n        if (n - 1) % 2 == 1:\n            yield from count_no_of_ways(n - 2, k)\n        else:\n            yield from count_no_of_ways(n - 3, k)\n    \n    if (n - 2) % 2 == 0:\n        yield from count_no_of_ways(n - 3, k)\n    else:\n        yield from count_no_of_ways(n - 4, k)\n    \n    if n % 2 == 0:\n        if (n - 1) % 2 == 0:\n            yield from count_no_of_ways(n - 4, k)\n        else:\n            yield from count_no_of_ways(n - 5, k)\n    else:\n        if (n - 1) % 2 == 1:\n            yield from count_no_of_ways(n - 4, k)\n        else:\n           ", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(k, n):\n    # your code here\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k*(k-1)\n    elif n == 3:\n        return k*(k-1)*(k-2)\n    elif n == 4:\n        return k*(k-1)*(k-2)*(k-3)\n    elif n == 5:\n        return k*(k-1)*(k-2)*(k-3)*(k-4)\n    elif n == 6:\n        return k*(k-1)*(k-2)*(k-3)*(k-4)*(k-5)\n    elif n == 7:\n        return k*(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)\n    elif n == 8:\n        return k*(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)\n    elif n == 9:\n        return k*(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)\n    elif n == 10:\n        return k*(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)\n    elif n == 11:\n        return k*(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)\n    elif n == 12:\n        return k*(k-1)*(k-2)*(k-3)*(k-4)*(k-5)*(k-6)*(k-7)*(k-8)*(k-9)*(k-10)*(k-11)\n    elif n == 13:\n        return k*(k-1)*(k", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\n# Dynamic Programming\ndef count_no_of_ways(n, k):\n    memo = dict()\n    # Base Case\n    if n == 1:\n        return k\n    if n == 2 and k == 1:\n        return 1\n    if k == 1:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n    if n in memo:\n        return memo[n]\n    if k == 2:\n        memo[n] = count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n        return memo[n]\n    if n == 1:\n        return k\n    if n == 2:\n        return k\n    if k == 1:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n    if n == 1:\n        return k\n    if n == 2:\n        return k\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nfrom itertools import combinations\n\nfrom collections import defaultdict\n\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    This is the solution to the problem\n\n    Given n posts and k colors. The task is to paint the fence such that at most 2 adjacent posts have the same color.\n\n    \"\"\"\n    return sum(combinations(range(n), k))\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    TC : O(n^2)\n    SC : O(k)\n    \"\"\"\n\n    count = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        count[i][0] = 1\n\n    for j in range(1, k+1):\n        count[0][j] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 and j > 1:\n                count[i][j] = count[i-1][j]\n\n            elif j == 1:\n                count[i][j] = count[i-1][j-1]\n\n            else:\n                count[i][j] = count[i-1][j-1] + count[i-1][j]\n\n    return count[n][k]\n\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    TC : O(n^2)\n    SC : O(k)\n    \"\"\"\n\n    def helper(i, j, memo):\n        if i == 0 or j == 0:\n            return 1\n\n        if (i, j) in memo:\n            return memo[(i, j)]\n\n        if j > 1:\n            res = helper(i, j-1, memo) + helper(i-1, j, memo)\n        else:\n            res = helper(i-1, j, memo)\n\n        memo[(i, j)] = res\n        return res\n\n    memo = {}\n    return helper(n, k, memo)", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n\n    def helper(n, k):\n        if n == 1:\n            return 1\n\n        elif n == 2:\n            if k == 1:\n                return 3\n            else:\n                return 2\n\n        elif n == 3:\n            if k == 1:\n                return 4\n            else:\n                return 2\n\n        else:\n            count = 0\n            for i in range(k):\n                count = count + helper(n-1, i)\n            return count\n\n    return helper(n, k)"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(num, den):\n    return num / den\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(num1,num2):\n    return num1/num2\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(x,y):\n    return x//y\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    if a > 0 and b > 0:\n        return a/b\n    else:\n        return \"Error: Division by zero\"\n\n#assert find(-10,2) == -5.0", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(num1,num2):\n    assert type(num1) == int, \"First parameter should be of int type\"\n    assert type(num2) == int, \"Second parameter should be of int type\"\n\n    quotient = num1 / num2\n\n    return quotient\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(num1, num2):\n    if num1 < num2:\n        num1,num2 = num2,num1\n    while num2:\n        num1,num2 = num2,num1%num2\n    return num1\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\n# Method 1\ndef find(a,b):\n    if a%b == 0:\n        return a//b\n    return -1\n\n# Method 2\ndef find(a,b):\n    return (a//b) if (a%b == 0) else -1\n\n# Method 3\ndef find(a,b):\n    return a//b if a%b == 0 else -1\n\n# Method 4\ndef find(a,b):\n    return a//b if a%b == 0 else -1\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    return a//b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(num1,num2):\n    return num1//num2\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(x,y):\n\treturn x/y\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\nimport math\ndef otherside_rightangle(a,b):\n    angle = (180/math.pi)*math.acos((a**2+b**2-c**2)/(2*a*b))\n    if angle == 90:\n        return 0\n    return math.sqrt((a**2+b**2-angle**2)/(2*a))\n\n\ndef main():\n    assert otherside_rightangle(7,8)==10.63014581273465\n\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    c = math.sqrt(a*a + b*b)\n    return c\n\n# write your code here\n\n\n#-----------------------------------------------------\n# 3. Functions to find the side lengths of a right angled triangle\n#-----------------------------------------------------\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(s,a):\n    return s**2-(s-a)**2\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return (100/100)*(a+b)\n\ndef test_otherside_rightangle():\n    assert otherside_rightangle(7,8)==10.63014581273465\n\ndef test_otherside_rightangle2():\n    assert otherside_rightangle(8,7)==10.63014581273465\n\ndef test_otherside_rightangle3():\n    assert otherside_rightangle(9,9)==10.63014581273465\n\ndef test_otherside_rightangle4():\n    assert otherside_rightangle(10,10)==10.63014581273465", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return (a*b)/((a+b)/2)", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return (a**2+b**2)**0.5-(b**2)/(2*a)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(sides: (int,int,int)) -> float:\n    '''\n    Finds the third side of a right angled triangle using the sine rule\n\n    :param sides: Tuple of integers for the lengths of each side of a triangle\n    :returns: The third side of a right angled triangle\n    '''\n\n    # Get the first and second sides\n    s1, s2 = sides\n    # Get the angle\n    angle = (math.acos(s1**2 + s2**2 - 2*s1*s2)/(2*math.pi)) * 180/math.pi\n    # Get the opposite side\n    opposite_side = math.sin(math.radians(angle)) * s2\n\n    return opposite_side\n\ndef main():\n    # TESTING CODE BELOW HERE\n\n    assert otherside_rightangle(7,8)==10.63014581273465\n    print(\"Tests passed!\")\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    return b**2-a**2\n\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    '''\n    INPUT: 2 integers\n    OUTPUT: 3rd side of right angle triangle.\n    '''\n    return b*math.sin(math.radians(a))", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(side1,side2):\n    return side1**2+side2**2-2*side1*side2\n"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(hete_list):\n    if not hete_list:\n        return None\n\n    max_val = hete_list[0]\n    max_val_index = 0\n\n    for i in range(1, len(hete_list)):\n        if hete_list[i] > max_val:\n            max_val = hete_list[i]\n            max_val_index = i\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list):\n    return max(list)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    return max(lst)\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    \"\"\"\n    Get max value of list\n    \"\"\"\n    return max(lst)\n\n\n# TODO: Add tests\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\n# Solution 1: Recursive\ndef max_val(list_):\n    if len(list_) == 0:\n        return None\n    if len(list_) == 1:\n        return list_[0]\n    if len(list_) == 2:\n        return max(list_)\n    return max(list_[0], max_val(list_[1:]))\n\n\n# Solution 2: Iterative\ndef max_val(list_):\n    max_ = None\n    for item in list_:\n        if max_ is None:\n            max_ = item\n        else:\n            if item > max_:\n                max_ = item\n    return max_\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(alist):\n    result = None\n    for item in alist:\n        if result is None:\n            result = item\n        elif item > result:\n            result = item\n    return result\n\ndef max_val(alist):\n    return max(alist)\n\ndef max_val(alist):\n    return max(alist, default=0)\n\n\ndef max_val(alist):\n    return max(alist, default=-1)\n\n\ndef max_val(alist):\n    return max(alist)\n\n\ndef max_val(alist):\n    maxval = None\n    for item in alist:\n        if maxval is None:\n            maxval = item\n        elif item > maxval:\n            maxval = item\n    return maxval\n\n\ndef max_val(alist):\n    return max(alist)\n\n\ndef max_val(alist):\n    return max(alist, key=int)\n\n\ndef max_val(alist):\n    return max(alist, key=float)\n\n\ndef max_val(alist):\n    return max(alist, key=int)\n\ndef max_val(alist):\n    return max(alist, key=float)", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list):\n    if len(list)==0:\n        return None\n    return max(list)\n#print(max_val(['Python', 3, 2, 4, 5, 'version']))", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list):\n    \"\"\"\n    >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n    5\n    >>> max_val([1, 2, 3, 4])\n    4\n    >>> max_val([1, 1, 1, 1])\n    1\n    \"\"\"\n    if len(list) == 0:\n        return 0\n    if len(list) == 1:\n        return list[0]\n    max_val = 0\n    for item in list:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n        elif isinstance(item, str):\n            if len(item) > max_val:\n                max_val = len(item)\n        elif isinstance(item, list):\n            if max_val_list(item) > max_val:\n                max_val = max_val_list(item)\n        else:\n            print('Item not supported')\n    return max_val\n\n\ndef max_val_list(list):\n    \"\"\"\n    >>> max_val_list(['Python', 3, 2, 4, 5, 'version'])\n    5\n    >>> max_val_list([1, 2, 3, 4])\n    4\n    >>> max_val_list([1, 1, 1, 1])\n    1\n    \"\"\"\n    if len(list) == 0:\n        return 0\n    if len(list) == 1:\n        return list[0]\n    max_val = 0\n    for item in list:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n        elif isinstance(item, str):\n            if len(item) > max_val:\n                max_val = len(item)\n        elif isinstance(item, list):\n            if max_val_list(item) > max_val:\n                max_val = max_val_list(item)\n    return max_val\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(l):\n    return max(l)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(l):\n    max_val = 0\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\n# The range is not in order, need to be sorted\ndef sum_div(n):\n    sum = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\n\n# The list of numbers that can be divided by n is [1,2,4,8,16]\ndef sum_div_2(n):\n    return sum([i for i in range(1,int(n**0.5)+1) if n % i == 0])", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    s = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            s += i\n    return s\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(number):\n    sum=0\n    for i in range(1,number+1):\n        if number%i==0:\n            sum=sum+i\n    return sum\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    \"\"\"\n    Calculate sum of divisors\n    \"\"\"\n    return sum([i for i in range(1,n+1) if n % i == 0])\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    result = 1\n    for div in range(1,n+1):\n        if n%div==0:\n            result = result + div\n    return result\n\n\n# +\n#write a function to return true if the sum of the digits of a number is divisible by 11\ndef is_divisible_by_11(n):\n    return sum(int(i) for i in str(n)) % 11 == 0\n\n#Test", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div += i\n    return div\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum=0\n    for i in range(1,n+1):\n        if n % i == 0:\n            sum = sum+i\n    return sum\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    divisors = [1, n]\n    if n == 1:\n        return 1\n    else:\n        for x in range(2, int(n**0.5)+1):\n            if n%x == 0:\n                divisors.append(x)\n                divisors.append(n/x)\n    divisors.sort()\n    return sum(divisors)\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    return sum([1 for i in range(1, n+1) if n % i == 0])\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    \"\"\"\n    Calculates the sum of the divisors of an integer n.\n\n    Args:\n        n (int): integer to sum the divisors of.\n\n    Returns:\n        int: sum of divisors of n.\n    \"\"\"\n    if n == 0:\n        return 0\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, size):\n    # Your code here\n    raise NotImplementedError()\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n                yield 1", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(a,n):\n    return 0\n\ndef test_get_Inv_Count():\n    assert get_Inv_Count([1,20,6,4,5],5) == 5\n\n# Write a python function to find the size of a binary tree", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(array, n):\n\t\"\"\"\n\t\"\"\"\n\tcount=0\n\tfor i in range(0,n):\n\t\tfor j in range(i+1,n):\n\t\t\tif array[i]>array[j]:\n\t\t\t\tcount+=1\n\treturn count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, n):\n    return count_inversions(arr, 0, n-1)\n\ndef count_inversions(arr, low, high):\n    #base case, if no more elements or all elements are sorted\n    if high < low:\n        return 0\n    else:\n        #choose middle element as pivot\n        mid = (low + high)//2\n        #for arr[low] and arr[high]\n        if arr[high] < arr[mid]:\n            #pivot is bigger than right half, recur for left half\n            return count_inversions(arr, low, mid-1) + count_inversions(arr, mid+1, high)\n        #for arr[mid] and arr[high]\n        elif arr[low] < arr[high]:\n            #pivot is bigger than left half, recur for right half\n            return count_inversions(arr, mid+1, high) + count_inversions(arr, low, mid-1)\n        #for arr[low] and arr[mid]\n        else:\n            #pivot is at correct place\n            return count_inversions(arr, low+1, high-1)", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, N):\n    arr.sort()\n    inv_count = 0\n    for i in range(1,N):\n        if arr[i] < arr[i-1]:\n            inv_count += 1\n    return inv_count\n\ndef get_Inv_Count_0(arr, N):\n    arr.sort()\n    inv_count = 0\n    for i in range(1,N):\n        if arr[i] < arr[i-1]:\n            inv_count += 1\n    return inv_count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,size):\n    inv_cnt = 0\n    for i in range(size-1):\n        for j in range(i+1,size):\n            if arr[i]>arr[j]:\n                inv_cnt+=1\n    return inv_cnt\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(nums,n):\n    # your code goes here\n    return\n# A test case for your code", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(array, size):\n    # Your code goes here\n    count = 0\n    # count = 1\n    for i in range(size - 1):\n        for j in range(i+1, size):\n            if array[i] > array[j]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    flattened_list = []\n\n    for el in nested_list:\n        if isinstance(el, list):\n            flattened_list += flatten_list(el)\n        else:\n            flattened_list.append(el)\n\n    return flattened_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(my_list):\n    \"\"\"\n    A function to flatten a given nested list structure.\n    :param my_list: the list to flatten\n    :return: a flattened list\n    \"\"\"\n    flat_list = []\n    for i in my_list:\n        if type(i) is list:\n            flat_list.extend(i)\n        else:\n            flat_list.append(i)\n    return flat_list", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten(l):\n    def flatten_it(l):\n        if isinstance(l, list):\n            return [item for sublist in l for item in flatten_it(sublist)]\n        else:\n            return [l]\n\n    return flatten_it(l)\n\ndef flatten_list(l):\n    return flatten(l)\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(l):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    :param l: nested list structure\n    :return: flattened list\n    \"\"\"\n    if not l:\n        return l\n    elif type(l) is int:\n        return [l]\n    else:\n        return [item for sublist in l for item in flatten_list(sublist)]\n\n\ndef test_flatten_list():\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\n\ndef create_n_cells(n):\n    \"\"\"\n    Given an integer n, generate a list of the first n Fibonacci numbers.\n    :param n: integer\n    :return: list\n    \"\"\"\n    result = [0, 1]\n    if n < 2:\n        return result\n    for i in range(2, n + 1):\n        current_sum = result[-1] + result[-2]\n        result.append(current_sum)\n    return result\n\n\ndef test_create_n_cells():\n    assert create_n_cells(4) == [0, 1, 1, 2, 3, 5]\n\n\ndef calculate_factorial(n):\n    \"\"\"\n    Calculate the factorial of a given integer n.\n    :param n: integer\n    :return: factor", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(l):\n    return [item for sublist in l for item in sublist]", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(l):\n    if not l:\n        return []\n    elif isinstance(l[0], list):\n        return flatten_list(l[0]) + flatten_list(l[1:])\n    else:\n        return l + flatten_list(l[1:])\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(a):\n    \"\"\"\n    A recursive function to flatten lists.\n    :param a: List of lists\n    :return: List of items\n    \"\"\"\n    if isinstance(a, list):\n        return [i for l in a for i in flatten_list(l)]\n    else:\n        return [a]\n\n\ndef test_flatten_list():\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\n\ndef test_flatten_list2():\n    assert flatten_list([[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\n\ndef test_flatten_list3():\n    assert flatten_list([[0, 10], [20, 30], 40, 50, [[60, 70, 80], [90, 100, 110, 12", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(l):\n    if isinstance(l, list):\n        return sum(map(flatten_list, l), [])\n    else:\n        return [l]\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    return [item for sublist in lst for item in sublist]\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten(l):\n    res = []\n    for el in l:\n        if isinstance(el, list):\n            res.extend(flatten(el))\n        else:\n            res.append(el)\n    return res\n\ndef flatten_list(l):\n    return flatten(l)"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(lst1,lst2):\n    result = []\n    for a in lst1:\n        for b in lst2:\n            if a == b:\n                result.append(a)\n\n    return result\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n# nested lists problem\n#return the nested lists which are present in another list\ndef intersection_nested_lists(list_one, list_two):\n    result = []\n    for i in list_one:\n        for j in list_two:\n            if i == j:\n                result.append(i)\n    return result", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1,list2):\n    # TODO\n    return [list1[i] for i in range(len(list1)) if list1[i] in list2]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n#define a function that takes two lists and returns True if they intersect\ndef intersection_nested_lists(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                result.append(list1[i])\n                break\n    return result\n\n\n#Test cases", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(l1, l2):\n    \"\"\"\n    Given two lists, find the lists where each element of l1 is present in l2.\n    \"\"\"\n    res = []\n    for x in l1:\n        if x in l2:\n            res.append(x)\n    return res\n\n# TEST CASE 2:", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return [[item for item in list1 if item in set1 and item in set2] for list1 in list2]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\nfrom typing import List\n\ndef intersection_nested_lists(lst1: List[int], lst2: List[int]) -> List[List[int]]:\n    \"\"\"\n    >>> intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n    [[12], [7, 11], [1, 5, 8]]\n    \"\"\"\n    return [l for l in lst1 if l in lst2]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    \"\"\"\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n    Returns:\n        list: The nested list elements which are present in both of the lists.\n    \"\"\"\n    return [list1[i] for i in range(len(list1)) if list1[i] in list2]\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(lst1,lst2):\n    inters = []\n    for el1 in lst1:\n        for el2 in lst2:\n            if el1 == el2:\n                inters.append([el1])\n    return inters", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists( a, b ):\n    if type(a) == type([]):\n        c = []\n        for i in a:\n            c += intersection_nested_lists(i,b)\n        return c\n    else:\n        for i in b:\n            if type(i) == type(a):\n                if a in i:\n                    return [a]\n            else:\n                if a == i:\n                    return [a]\n    return []\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(data):\n    # your code here\n    out = max(data, key=lambda tup: tup[1])\n    return out", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(record_list):\n    if len(record_list) == 0:\n        raise ValueError(\"No records in list\")\n    record_list.sort()\n    record = record_list[0]\n    result = record\n    for record in record_list[1:]:\n        if record[0] == result[0]:\n            result[1] += record[1]\n        else:\n            result = record\n    return result\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\n# all students with the same name will get sum of grades\ndef max_aggregate(list):\n    return max(list, key=lambda x: sum([y[1] for y in x[0]]))\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(ls):\n    \"\"\"\n    Returns max aggregate tuple in the list.\n    \"\"\"\n    if ls:\n        res = ls[0]\n        for a in ls[1:]:\n            if a[1] > res[1]:\n                res = a\n        return res\n    return (None, None)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(list):\n    \"\"\"\n    Returns the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Compares the tuples by their 2nd field, and returns the max.\n    # Sorts by the second field of the tuple.\n    list.sort(key=itemgetter(1))\n    return list[0]\n\ndef test_max_aggregate():\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(scores):\n    max_aggregate_list = []\n    for name, score in scores:\n        max_aggregate_list.append((name, score))\n    return max(max_aggregate_list, key = lambda x: x[1])\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\n# your function code here\n\ndef max_aggregate(tuples):\n    tuples.sort()\n    #print(tuples)\n    max_score = 0\n    name = \"\"\n    for tup in tuples:\n        if tup[1] > max_score:\n            max_score = tup[1]\n            name = tup[0]\n    return name, max_score\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(list_of_tuples):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n    \"\"\"\n    def aggregation(x,y):\n        \"\"\"\n        Calculate the aggregate of two tuples.\n        \"\"\"\n        return x[1] + y[1]\n    return max(list_of_tuples, key=lambda x: aggregation(x, list_of_tuples[0]))\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(students):\n    student_list = sorted(students, key=lambda x: x[0])\n    aggregate = 0\n    for student in student_list:\n        aggregate += student[1]\n    return student_list[0]\n\n#print(max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]))", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    result = None\n    max = 0\n    for tuple in tuples:\n        agg = 0\n        for sub_tuple in tuples:\n            if tuple[0] == sub_tuple[0]:\n                agg += sub_tuple[1]\n        if agg > max:\n            max = agg\n            result = tuple\n    return result\n\n#Testing code"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    #Your code here\n    raise NotImplementedError()\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    # write your code here\n    if n <= 0:\n        return 0\n    return count_binary_seq(n-1)+2*count_binary_seq(n-2)\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    s = 0\n    for i in xrange(2**n):\n        s += get_sum(i, n)\n    return s\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    result = 0\n    if n < 2:\n        return result\n    total_len = 2**n\n    for i in range(2**n):\n        if bin(i)[0:n] == bin(i)[-n:]:\n            result += 1\n    return result/total_len\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    def helper(a, b):\n        if len(a) + len(b) == 0:\n            return 1\n        if len(a) + len(b) % 2 != 0:\n            return 0\n        if len(a) == 0:\n            return helper(b, [])\n        if len(b) == 0:\n            return helper([], a)\n        if a[0] == b[0]:\n            return helper(a[1:], b[1:]) + helper(a, b[1:])\n        else:\n            return helper(a, b[1:]) + helper(a[1:], b)\n\n    return helper([], [])\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n: int) -> float:\n    \"\"\"\n    >>> count_binary_seq(1)\n    2.0\n    >>> count_binary_seq(2)\n    3.0\n    >>> count_binary_seq(3)\n    6.0\n    >>> count_binary_seq(4)\n    12.0\n    >>> count_binary_seq(5)\n    26.0\n    >>> count_binary_seq(6)\n    52.0\n    \"\"\"\n    return sum([factorial(n) / (factorial(n / 2) * factorial(n / 2)) for i in range(n)])\n\n\ndef test_count_binary_seq(n: int, answer: float) -> None:\n    assert round(count_binary_seq(n), 2) == round(answer, 2)\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    seq = [2**i for i in range(n)]\n    return sum([binomial(2*n,i)*binomial(2*n,i) for i in seq])\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 1\n    return 2*count_binary_seq(n-1)\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    # TODO\n    pass\n\ndef count_binary_seq_v2(n):\n    \"\"\"\n    (2) Count the number of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Using a very simple dynamic programming approach, we can count the number of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \n    This approach has time complexity of O(2^n) as we go through all sequences of length n and add the previous result.\n\n    For example, for n = 1, we have:\n        10 - 01 = 1\n        11 - 10 = 0\n    Therefore, there are two binary sequences of length 1 such that sum of first n bits is same as sum of last n bits.\n    \n    For n = 2, we have:\n        100 - 010 = 1\n        101 - 100 = 0\n        110 - 001 = 1\n        111 - 110 = 0\n    Therefore, there are four binary sequences of length 2 such that sum of first n bits is same as sum of last n bits.\n    \n    The answer to the problem is 2 + 4 + 8 + 16 + ... + 2^n = 2^n - 1.\n    \"\"\"\n    count = [0 for _ in range(n+1)]\n    for i in range(n, 0, -1):\n        # The sum of first i bits can be either 0 or 1.\n        for j in range(2):\n            # The sum of last i bits can be either 0 or 1.\n            count[i] += count[i-1]\n    return count[n]\n\n\ndef count_binary_seq_v3(n):\n    \"\"\"\n    (3) Count the number of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Using a very simple dynamic programming approach, we can", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    # write your code here\n    if n == 0:\n        return 1\n    return count_binary_seq(n - 1) + count_binary_seq(n)\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if type(d) == dict:\n        return 1 + max([dict_depth(v) for v in d.values()])\n    elif type(d) == list:\n        return 1 + max([dict_depth(v) for v in d])\n    else:\n        return 1\n\n# print(dict_depth({})) # 1\n# print(dict_depth({1: 2})) # 1\n# print(dict_depth({1: {2: 3, 4: 5}})) # 2\n# print(dict_depth({1: {2: 3, 4: 5}, 3: {4: 6}})) # 3\n# print(dict_depth({1: {2: 3, 4: {5: 6}}})) # 4\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(D):\n    if D=={}:\n        return 0\n    else:\n        return max([dict_depth(v) for v in D.values()]) + 1\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dict):\n    \"\"\"Return the depth of the given dictionary.\"\"\"\n    pass\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    \"\"\"\n    Assuming that d is a dict, return the depth of d.\n    \"\"\"\n    if isinstance(d, dict):\n        depth = 1\n        for v in d.values():\n            if isinstance(v, dict):\n                depth += 1 + dict_depth(v)\n            elif isinstance(v, list):\n                depth += 1 + max([dict_depth(vv) for vv in v])\n        return depth\n    else:\n        return 1\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    return 0 if d == {} else 1 + max(map(dict_depth, d.values()))\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if type(d) != dict:\n        raise ValueError(\"This function expects a dictionary as input\")\n    stack = []\n    d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(d.pop(", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    # Your code here\n    pass\n\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if len(d)==0: return 0\n    else:\n        max_depth=0\n        for k, v in d.items():\n            if isinstance(v, dict):\n                max_depth=max(max_depth, dict_depth(v))\n            else:\n                max_depth+=1\n        return max_depth\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert dict_depth({'a':1})==1\n\ndef test_dict_depth():\n    assert dict_depth({})==0\n    assert dict_depth({'a':1})==1\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dic):\n    max = 0\n    for value in dic.values():\n        if isinstance(value, dict):\n            sub_max = dict_depth(value)\n            max = max(max, 1 + sub_max)\n    return max\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n\ti = 1\n\twhile((n & i) == 0):\n\t\ti = i<<1\n\n\treturn i\n\ndef most_significant_bit_number(n):\n\tbits = 0\n\tif (n >= 0):\n\t\twhile(n != 0):\n\t\t\tbits += 1\n\t\t\tn = n>>1\n\t\treturn bits\n\telse:\n\t\treturn -1\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    \"\"\"\n        This function finds the most significant bit number which is also a set bit.\n    \"\"\"\n    i = 1\n    while n & (1 << i) == 0:\n        i += 1\n\n    return i\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\n# Define the function\ndef set_Bit_Number(num):\n    # Initialize the variable to 0\n    sign_bit = 0\n\n    # Loop through the bits of the given number\n    for bit in range(31, -1, -1):\n\n        # Check if the bit is set\n        if (num & (1 << bit)) == 1:\n\n            # Set the sign bit\n            sign_bit = bit\n\n            # Break from the for loop\n            break\n\n    # Return the sign bit\n    return sign_bit\n\n# Test the function", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    l = bin(n)[2:]\n    set_bit = 0\n    while (l[set_bit] == '1'):\n        set_bit += 1\n    return set_bit\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    if n == 0:\n        return -1\n    set_bit = 0\n    for bit in range(32):\n        if n & (1 << bit) != 0:\n            if set_bit != -1:\n                return -1\n            set_bit = bit\n    return set_bit\n\n# test case", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    msb = 0\n    while number > 0:\n        if (number & 1) == 1:\n            msb = msb + 1\n        number = number >> 1\n    return msb\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(number):\n    count = 0\n    for i in range(32):\n        if (number & (1 << i)) != 0:\n            count += 1\n    return 32 - count\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    \n    i = 0\n    while (1 << i) < n:\n        i = i + 1\n    return i\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    \"\"\"\n    Write a python function to find the most significant bit number which is also a set bit.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return max(0, 31 - n.bit_length())\n\n\n# Time Complexity : O(1)\n# Space Complexity : O(1)\n# Test cases :", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    \"\"\"\n    This function will return the most significant bit number which is also a set bit.\n\n    \"\"\"\n    # code here\n    b = 0\n    while(2**b < n):\n        b = b + 1\n    return b-1\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr,n):\n    arr = list(map(int,arr))\n    arr.sort()\n    # print(arr)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count == 0\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(lst1, lst2):\n    if len(lst1) == 0 and len(lst2) == 0:\n        return True\n    elif len(lst1) == 0 and len(lst2) != 0:\n        return False\n    elif len(lst1) != 0 and len(lst2) == 0:\n        return False\n    elif len(lst1) != 0 and len(lst2) != 0:\n        for num in lst1:\n            if num > lst2[-1]:\n                lst2.append(num)\n                lst2.sort()\n                break\n        for num in lst2:\n            if num > lst1[-1]:\n                lst1.append(num)\n                lst1.sort()\n                break\n        if lst1 == lst2:\n            return True\n        else:\n            return False\n\n# print(solve([1,2,3,4],[4,3,2,1]))", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(list1,list2):\n    if len(list1) != len(list2):\n        return False\n    count1 = count2 = 0\n    for item in list1:\n        if item < list2[count2]:\n            count1 += 1\n        else:\n            count2 += 1\n    return count1 == count2\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(A,B):\n    return A.count(1) == B.count(0)\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(count_list,count):\n    if count_list == []:\n        if count == 0:\n            return True\n        else:\n            return False\n    else:\n        temp = count_list[0]\n        count_list = count_list[1:]\n        return solve(count_list,count-1) or (temp < count and solve(count_list,count))\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(A,B):\n    return A.count(0) == B.count(0)\n\n#https://www.geeksforgeeks.org/python-program-to-check-two-lists-are-identical/", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a, b):\n    if len(a) == 0:\n        return False\n    elif len(a) == 1:\n        return False\n    else:\n        return len(a) == len(set(a))\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(a,b):\n    if a[0] > a[1]:\n        a, b = b, a\n    return False if a[0] + b > len(a) else True", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr, n):\n\t# your code here\n\tif n == 0:\n\t\treturn True\n\tif n == 1:\n\t\treturn False\n\tif arr[n-1] > arr[n-2]:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr, n):\n    arr.sort()\n    return arr[0] == arr[n-1]\n\n"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,pairs,num_rotations,index):\n    if not(index < len(arr)):\n        return arr[index]\n    if num_rotations == 0:\n        return arr[index]\n    if len(pairs) == 0:\n        return find_Element(arr,pairs,num_rotations,index+1)\n    rotate,rotate_pos = pairs[0]\n    if index+rotate >= len(arr):\n        return find_Element(arr,pairs,num_rotations,index)\n    else:\n        arr[index],arr[index+rotate] = arr[index+rotate],arr[index]\n        return find_Element(arr,pairs[1:],num_rotations-1,index+1)\n\n\ndef test_function():\n    print(find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1))\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\nfrom collections import defaultdict\n\ndef find_Element(array,indexes,index,rotate):\n    if index>=len(indexes):\n        return array[index]\n    else:\n        rot_arr = [array[i] for i in indexes[index]]\n        return find_Element(rot_arr,indexes,index+1,rotate-1)\n\n# test cases", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(A,rotations,i,n):\n    #Your code here\n    # time O(n) space O(1)\n    if n == 0:\n        return A[0]\n    for j in range(n):\n        A = [A[k] for k in range(len(A))]\n    return A[i]\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\nfrom collections import deque\ndef find_Element(arr,rotations,n,k):\n    if n == 1:\n        return arr[k%len(arr)]\n    if n == 2:\n        return arr[k%len(arr)]\n    if n == 3:\n        return arr[k%len(arr)]\n    if n == 4:\n        return arr[k%len(arr)]\n    if n == 5:\n        return arr[k%len(arr)]\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,pivot,pos,n):\n    \"\"\"\n    \"\"\"\n    if n == 0:\n        return arr[pos]\n    new_pivot = pivot[pos]\n    a = arr.copy()\n    for i in range(len(a)):\n        if a[i] == new_pivot:\n            a[pos],a[i] = a[i],a[pos]\n            return find_Element(a,pivot,pos,n-1)\n\n\n# For Test Cases\n\n# Test Case 1\n#arr = [1,2,3,4,5]\n#pivot = [[0,2],[0,3]]\n#pos = 2\n#n = 1\n#print(find_Element(arr,pivot,pos,n))\n\n\n# Test Case 2\n#arr = [1,2,3,4,5]\n#pivot = [[0,2],[0,3]]\n#pos = 3\n#n = 1\n#print(find_Element(arr,pivot,pos,n))", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n# Approach 1 : \n#     It is similar to searching element in a rotated sorted array\n#     Use binary search.\n#     We traverse the array and use binary search to find the element.\n#     Time Complexity: O(logn)\n#     Space Complexity: O(1)\n\ndef find_Element(arr, rotations, pos, n):\n    for i in range(n):\n        if i+pos < n:\n            j = rotations[i][1]\n            if j > pos:\n                break\n            arr[pos], arr[j] = arr[j], arr[pos]\n    return arr.index(pos)+1\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,pivots,k,n):\n    # Return -1 if element is not found\n    if k < 0 or k >= n:\n        return -1\n    # Case when the pivots are the same\n    if pivots[0][0] == pivots[1][0]:\n        index = k % n\n        while index != pivots[0][0]:\n            index = (index + k) % n\n        return index\n\n    # Case when the pivots are different\n    index = k % n\n    while index != pivots[0][0]:\n        index = (index + k) % n\n    return index", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(A,indices,k,i):\n    for ind in indices:\n        if k == 0:\n            return A[ind[0] % len(A) if i == 0 else ind[0] % len(A) - ind[1] % len(A) % len(A)]\n        else:\n            k -= 1\n            i -= 1\n    return -1\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\n#Time complexity: O(n)\ndef find_Element(arr,rotations,index,k):\n    for i in range(len(arr)):\n        if i == index:\n            return arr[i]\n        for j in range(len(rotations)):\n            rotate = rotations[j]\n            if rotate[0] == index:\n                return arr[rotate[1]]\n    return arr[index]\n\n#Time complexity: O(n)\ndef find_Element(arr,rotations,index,k):\n    i = index\n    for j in range(len(rotations)):\n        rotate = rotations[j]\n        if rotate[0] == index:\n            i = rotate[1]\n    return arr[i]", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, s, d, n):\n    s = sorted(s)\n    for i in range(n):\n        for j in range(d-1, -1, -1):\n            if s[j][0] == i:\n                arr[i] = s[j][1]\n                break\n    return arr\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word[0]=='p':\n            return word\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word[0]=='p':\n            return word[0], word\n    raise ValueError('No words match')", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    return words[0], words[1]\n\ndef test_start_withp():\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\nfrom typing import List\n\ndef start_withp(words: List[str]) -> (str, str):\n    \"\"\"\n    Finds the first two elements from list `words` which start with 'p'.\n    \"\"\"\n    for i in range(len(words)):\n        if words[i][0]=='p':\n            return words[i], words[i+1]\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for w in words:\n        if w[0]== \"p\":\n            return w.split(\" \")\n    return (None,None)\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    \"\"\"\n    >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    True\n    >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('c', 'c++')\n    True\n    \"\"\"\n    return list(filter(lambda x: x[0]=='p', words))\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    words.sort()\n    for i in range(len(words)):\n        if words[i].startswith('p'):\n            return words[i], words[i+1]\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    \"\"\"\n    Creates a generator that yields the first two words matching the criteria\n    of starting with the letter 'p'\n    \"\"\"\n    for word in words:\n        if word[0] == \"p\":\n            yield (word, words[1])\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            print(word)\n\n\nstart_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(prefix, kth, i, n):\n    # code here\n    prefix.append(0)\n    sum = 0\n    for j in range(i + 1, n + 1):\n        sum += prefix[j]\n        prefix[j] = sum\n\n    prefix[i] = 0\n    for j in range(n - 1, i - 1, -1):\n        sum = prefix[j] - prefix[j + 1]\n        prefix[j] = sum\n\n    return prefix[kth] + prefix[i]\n\n\ndef test_max_sum_increasing_subseq():\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 5, 1, 6) == 8\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 6, 2, 6) == 12\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 6, 3, 6) == 13\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 6, 4, 6) == 15\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4,", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n#TODO: Fix this code\ndef max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Complexity: O(n^2)\n    \"\"\"\n    if i == n:\n        return arr[i]\n\n    if i == 0:\n        return arr[0]\n\n    if k == 0:\n        return arr[0]\n\n    return max(max_sum_increasing_subseq(arr, n, i+1, k),\n               max_sum_increasing_subseq(arr, n, i+1, k-arr[i]))", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, k, i, j):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :type i: int\n    :type j: int\n    :rtype: int\n    \"\"\"\n    if i == j:\n        return arr[i]\n    if i > j:\n        return arr[i]\n    if j - i < k:\n        return arr[i] + max(max_sum_increasing_subseq(arr, k, i+1, j), max_sum_increasing_subseq(arr, k, i, j-1))\n    else:\n        return max(arr[j], arr[i] + max_sum_increasing_subseq(arr, k, i, j-1))\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, i, k):\n    \n    if i == n:\n        return arr[i]\n    \n    if k >= i:\n        max_sum = max(max_sum_increasing_subseq(arr, n, i+1, k), max_sum_increasing_subseq(arr, n, i+1, k-1) + arr[i])\n    else:\n        max_sum = max(max_sum_increasing_subseq(arr, n, i+1, k), max_sum_increasing_subseq(arr, n, i+1, k+1) + arr[i])\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, k, i):\n    # Write your code here.\n    if k == i:\n        return max(arr[0], arr[1:]) + arr[k]\n    else:\n        if k == 0:\n            return arr[i] + max_sum_increasing_subseq(arr, n, k+1, i)\n        elif k > i:\n            return max(arr[i], max_sum_increasing_subseq(arr, n, k-1, i-1) + arr[k])\n        else:\n            return max(arr[i], max_sum_increasing_subseq(arr, n, k, i-1) + arr[k])\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(nums, n, k, q):\n    \"\"\"\n\n    :type nums: List[int]\n    :type n: int\n    :type k: int\n    :type q: int\n    :rtype: int\n    \"\"\"\n    s = [0] * (k + 1)\n    for i in range(k):\n        s[i] = max(s[i], s[i - 1] + nums[i])\n    for i in range(k, n):\n        s[i] = max(s[i], s[i - 1] + nums[i])\n        if s[i] > s[q]:\n            return s[i]\n    return s[n - 1]\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(a, n, k, i):\n    \"\"\"\n    Finds the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n    \"\"\"\n    # Write your code here\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            for k in range(i, j):\n                if k + 1 == i:\n                    dp[i][j] = max(dp[i - 1][j], a[k])\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[k + 1][j], a[k])\n    ans = dp[n][n]\n    return ans\n\ndef max_sum_increasing_subseq_dp(a, n, k, i):\n    \"\"\"\n    Finds the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n    \"\"\"\n    # Write your code here\n    # initialise the dp array\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][i] = a[i]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n + 1):\n            if k + 1 == i:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j], a[i])\n            else:\n                dp[i][j] =", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\nfrom typing import List\n\n\ndef max_sum_increasing_subseq(arr: List[int], k: int, i: int, j: int):\n    # initalization\n    max_sum = 0\n    i_sum = 0\n    for j in range(i, j+1):\n        i_sum += arr[j]\n        if i_sum > max_sum:\n            max_sum = i_sum\n    k_sum = 0\n    for k in range(i+1, i+k+1):\n        k_sum += arr[k]\n        if k_sum > max_sum:\n            max_sum = k_sum\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, k, i, j):\n    \n    if i > j:\n        return 0\n    \n    if k == i + 1:\n        return arr[j]\n    \n    dp = [[0] * (k + 1) for _ in range(i + 1)]\n    \n    for j in range(i, j + 1):\n        for k in range(1, k + 1):\n            for l in range(k, i + 1):\n                dp[l][k] = max(dp[l][k], dp[l - 1][k] + arr[j])\n    \n    return dp[i][k - 1]\n    \n\n\n# test case"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, start, end):\n\tif start > end:\n\t\traise Exception(\"Invalid start/end index\")\n\treturn tuplex[:start] + tuplex[end+1:]\n\n\n# TESTS", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup,i,j):\n    return tup[0][:i]+(tup[0][i:j],)+tup[1:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, start, stop):\n    return tup[start:stop]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, low, high):\n    tup[0] = tup[0][:low] + \":\" + tup[0][low:]\n    tup[3] = tup[3][:low] + \":\" + tup[3][low:]\n    return tup\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuplex, start, end):\n\t\"\"\"\n\tWrite a function to get a colon of a tuple.\n\t\"\"\"\n\tfor i in range(start,end):\n\t\ttuplex[i] = 0\n\treturn tuplex", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup,x):\n    return tup[:x]\n#NOTE: You can ignore this function for now. It's here to help with troubleshooting.\n\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tupl, i, j):\n    return tupl[:i], tupl[i+1:j] ,tupl[j+1:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuple,start,end):\n    return tuple[0:start] + (tuple[start],)+tuple[end:]", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(x,i,j):\n    tup = tuple(x)\n    tup[i] = j\n    return tup\n\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos, end_pos):\n    return tuplex[start_pos:end_pos]\n\n\ndef colon_tuplex(tuplex, start_pos"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\nfrom typing import List\n\n\ndef large_product(large: List[int], small: List[int], n: int) -> List[int]:\n    # Use your solution here\n    return sorted(large, reverse=True)[:n] + sorted(small, reverse=True)[:n]\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(L1,L2,n):\n    if L1==[] or L2==[]:\n        return []\n    max_list=[]\n    for i in range(n):\n        list1=[]\n        list2=[]\n        for j in range(len(L1)-i):\n            list1.append(L1[j])\n        for j in range(len(L2)-i):\n            list2.append(L2[j])\n        if max(list1)*min(list2)>0:\n            max_list.append(max(list1)*min(list2))\n        else:\n            max_list.append(0)\n    return max_list\ndef test_large_product():\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert large_product([3, 6, 8, 9, 10, 6],[1, 2, 3, 4, 5, 6],3)==[60, 54, 50]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],0)==[]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],1)==[60, 54, 50]\ndef main():\n    L1=[1,2,3,4,5,6]\n    L2=[3,6,8,9,10,6]\n    test_large_product()\n    print(large_product(L1,L2,3))\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(a,b,n):\n    #return sorted(zip(a,b),key = itemgetter(0))[::-(n+1)]\n    \"\"\"\n    Takes two lists and returns the largest n product\n    \"\"\"\n    a=sorted(a)\n    b=sorted(b)\n    result=[]\n    for x in a:\n        for y in b:\n            result.append(x*y)\n    return result[:n]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(arr1,arr2,n):\n    arr1.sort(reverse=True)\n    arr2.sort(reverse=True)\n    res = []\n    for i in range(n):\n        res.append(arr1[i]*arr2[i])\n    return res\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(L1,L2,n):\n    p = n*n\n    p_list=[]\n    for i in range(n):\n        p_list.append([L1[i],L2[i]])\n    p_list.sort(reverse=True, key=lambda x: x[0]*x[1])\n    return p_list[:n]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(x,y,n):\n    # x must be longer than y\n    if len(x) < len(y):\n        return large_product(y,x,n)\n    res = []\n    for i in range(len(x)):\n        for j in range(i+1,len(y)):\n            if x[i]*y[j] > n*n:\n                break\n            product = x[i]*y[j]\n            if n*n >= product > 0:\n                res.append(product)\n                if len(res)==n:\n                    return res\n    return res\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(l1, l2, k):\n    # your code here\n    new_l1=[]\n    new_l2=[]\n    for i in l1:\n        if i not in new_l1:\n            new_l1.append(i)\n        if len(new_l1)==k:\n            break\n    for i in l2:\n        if i not in new_l2:\n            new_l2.append(i)\n        if len(new_l2)==k:\n            break\n    return [i*j for i in new_l1 for j in new_l2]", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(lst1,lst2,n):\n    return sorted(zip(lst1, lst2), key=lambda x: x[1])[-n:]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(lst1, lst2, n):\n    if n == 0:\n        return lst1\n    return max(zip(lst1, lst2, itertools.combinations(lst1, 2)), key=lambda p: p[0] * p[1])[0]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(x,y,n):\n    assert n <= len(x) <= len(y)\n    res = []\n    for i in xrange(n):\n        r = x[i] * y[i]\n        for j in xrange(i+1,n):\n            r *= x[j] * y[j]\n        res.append(r)\n    return res[:n]\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x > y:\n        return x\n    else:\n        return y", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(num1,num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n\tif a > b:\n\t\treturn a\n\telse:\n\t\treturn b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x > y:\n        return x\n    else:\n        return y\n\ndef test_maximum():\n    assert maximum(5,10) == 10\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n    if a > b:\n        return a\n    return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x > y:\n        return x\n    return y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    return a if a > b else b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(num1, num2):\n    \"\"\"\n    This function will return the maximum of two numbers.\n    Args:\n    num1: The first number\n    num2: The second number\n    Returns:\n    The maximum of the two numbers\n    \"\"\"\n    if num1 < num2:\n        return num2\n    else:\n        return num1", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    return a if a>b else b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n    return a if (a > b) else b\n\n# Test:"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n#assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    \"\"\"\n    Convert a string to tuple.\n    \"\"\"\n    return tuple(s)\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    string = string.replace(' ', '')\n    return tuple(string)\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    \"\"\"\n    Turn a string into a tuple\n    \"\"\"\n    return tuple(string)\n\ndef test_string_to_tuple():\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert string_to_tuple(\"Python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert string_to_tuple(\"Python 3\")==('p', 'y', 't', 'h', 'o', 'n', '3', '', '')\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    pass\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    \"\"\"\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(s.split())\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s.split(' '))\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n# Python 2 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Python 3 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Java solution using a list comprehension\ndef string_to_tuple(s):\n    return tuple([s[i] for i in range(len(s))])\n\n# Python 2 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Python 3 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Java solution using a list comprehension\ndef string_to_tuple(s):\n    return tuple([s[i] for i in range(len(s))])\n\n# Python 2 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Python 3 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Java solution using a list comprehension\ndef string_to_tuple(s):\n    return tuple([s[i] for i in range(len(s))])\n\n# Python 2 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Python 3 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Java solution using a list comprehension\ndef string_to_tuple(s):\n    return tuple([s[i] for i in range(len(s))])\n\n# Python 2 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Python 3 solution\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n# Java solution using a list comprehension\ndef string_to_tuple(s):\n    return tuple([s[i] for i in range(len(s))])\n\n# Python 2 solution\ndef string_to_tuple(s):", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    \"\"\"\n    Remove all non-alphanumerics from string and convert to tuple.\n    \"\"\"\n    s = re.sub(r'[^0-9a-zA-Z]+', '', s)\n    return s\n\n\ndef test_string_to_tuple():\n    \"\"\"\n    Test string_to_tuple function.\n    \"\"\"\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(text):\n    #your code here\n    return tuple(text.split())\n\n#For testing"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(integer):\n    return integer | (integer - 1) & -integer\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num):\n    return (num | (num + 1)) - 1\n\n# set_left_most_unset_bit(10)\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n\n    Parameters\n    ----------\n    n : int\n        Integer.\n\n    Returns\n    -------\n    int\n        Integer.\n\n    Examples\n    --------\n    >>> set_left_most_unset_bit(10)\n    14\n    \"\"\"\n    return n | ~(n+1)\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    b = 0\n    while n:\n        b |= n & -n\n        n ^= n & -n\n    return b + 1\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    return n ^ ((n + 1) & (-n))\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    res = 0\n    for i in range(32):\n        if n & (1 << i) == 0:\n            res |= (1 << i)\n            break\n    return res\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    if n == 0:\n        return 0\n    while n & 1 == 0:\n        n >>= 1\n    n += 1\n    return n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(x):\n    if x == 0:\n        return 1\n    for i in range(1, 32):\n        if x & (1 << i) == 0:\n            return i + 1 << i\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    if n & 1 == 0:\n        return set_left_most_unset_bit(n >> 1)\n    return n\n\ndef test_set_left_most_unset_bit():\n    assert set_left_most_unset_bit(10) == 14\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    return n | ~(n-1)\n\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculates the volume of a cone given its radius and height.\n    Parameters\n    ----------\n    radius : float\n        The radius of the cone.\n    height : float\n        The height of the cone.\n    Returns\n    -------\n    volume : float\n        The volume of the cone.\n    \"\"\"\n    volume = 1 / 3 * radius**2 * height\n    return volume\n\ndef test_volume_cone():\n    assert volume_cone(5,12)==314.15926535897927\n    assert volume_cone(0.5,1.5)==1.7320508075688772\n    assert volume_cone(1.0,1.0)==3.141592653589793\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(h,r):\n    \"\"\"\n    Calculate the volume of a cone\n    \"\"\"\n    return 1/3*np.pi*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n    \"\"\"\n    \"\"\"\n    import math\n    return 1/3*r**2*h\n\ndef _volume_cone(r,h):\n    \"\"\"\n    \"\"\"\n    return (h/3)*r**2\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n    \"\"\"\n    A function to find the volume of a cone\n    \"\"\"\n    from math import pi\n    return 1/3*pi*r**2*h", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius,height):\n    return (3.1415926535897932*radius*radius)/3.0 + height*height/3.0\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(h,r):\n    \"\"\"\n    Input: h(height), r(radius)\n    Output: volume of a cone\n    \"\"\"\n    import math\n    if h<0 or r<0:\n        print('Invalid input: height and radius must be nonnegative')\n        return 0\n    elif h==0:\n        return 0\n    else:\n        return 3.1415926535897927 * h * r ** 2\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    return 3.1415926535897927*r*r*h/3\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nfrom math import pi\ndef volume_cone(r,h):\n    return r**2*h/3*pi\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nimport math\ndef volume_cone(h,r):\n    \"\"\"\n    Calculate volume of a cone.\n    \n    Parameters\n    ----------\n    h : float\n        height of the cone\n    r : float\n        radius of the cone\n    \n    Returns\n    -------\n    vol : float\n        volume of the cone\n    \"\"\"\n    \n    # This is the equation of a cone in polar coordinates.\n    # http://mathworld.wolfram.com/Cone.html\n    phi = math.radians(360)\n    r = math.radians(r)\n    return ((r**2)*h)/3\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    pass\n\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x in lst if x>0]\n\ndef pos_nos(lst):\n    return [x for x", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nums):\n\t# Your code here\n\tfor i in range(len(nums)):\n\t\tif nums[i] > 0:\n\t\t\tprint(nums[i])\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(list):\n    positive_numbers = []\n    for i in list:\n        if i > 0:\n            positive_numbers.append(i)\n\n    return positive_numbers\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(ls):\n    return [x for x in ls if x > 0]\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\n# list comprehension\ndef pos_nos(nums):\n    return [i for i in nums if i>0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(my_list):\n    \"\"\"\n    Function to print all positive numbers in a list\n    \"\"\"\n    for x in my_list:\n        if x > 0:\n            print(x)\n\npos_nos([-1,-2,1,2])\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    return [x for x in lst if x > 0]\n\ndef test_pos_nos():\n    assert pos_nos([-1,-2,1,2]) == 1,2\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(ls):\n    return [i for i in ls if i > 0]", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(numbers):\n    pos_numbers = []\n    for n in numbers:\n        if n>0:\n            pos_numbers.append(n)\n    return pos_numbers\n\ndef test_pos_nos(pos_nos):\n    assert pos_nos([-1,-2,1,2]) == 1,2\n\ndef test_pos_nos():\n    assert pos_nos([-1,-2,1,2]) == [1,2]\n\ntest_pos_nos()\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(arr):\n    return [x for x in arr if x > 0]\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    '''\n    Time complexity : O(n^2)\n    Space complexity: O(1)\n\n    '''\n    m = len(grid)\n    max_sum = 0\n    for row in range(m):\n        for col in range(n):\n            max_sum = max(max_sum, grid[row][col])\n            max_sum = max(max_sum, grid[row][col+1])\n            max_sum = max(max_sum, grid[row+1][col])\n            if col != n-1:\n                max_sum = max(max_sum, grid[row+1][col+1])\n    return max_sum\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    if not grid or not grid[0]:\n        return 0\n\n    m = len(grid)\n    n = len(grid[0])\n\n    dp = [[0] * n for _ in range(m)]\n\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = grid[i][j] + dp[i][j - 1]\n            elif j == 0:\n                dp[i][j] = grid[i][j] + dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n\n    return dp[m - 1][n - 1]", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n^2)\n    \"\"\"\n    if not grid or not grid[0]:\n        return 0\n\n    max_sum = 0\n    for i in range(len(grid)):\n        for j in range(i + 1, len(grid[0])):\n            sub_grid = grid[i][j - 1: j + 1]\n            max_sum = max(max_sum, sum(sub_grid))\n    return max_sum\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, k):\n    def check_adjacent(i, j):\n        return i > 0 and j < n - 1 and i < n and j > 0\n    \n    def sub_max_sum(i, j):\n        sum_ = 0\n        for y in range(i, j+1):\n            for x in range(i, j+1):\n                if check_adjacent(x, y):\n                    sum_ += grid[y][x]\n        return sum_\n    \n    n = len(grid)\n    # TODO: replace the below line with your code\n    max_sum = 0\n    for i in range(n):\n        for j in range(n - i - 1):\n            max_sum = max(max_sum, sub_max_sum(i, j))\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(arr, k):\n    if k == 1:\n        return max(arr[0])\n    return max(max_sum_rectangular_grid(arr[::2], k - 1), max_sum_rectangular_grid(arr[1::2], k - 1))\n\n# Test cases", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    if len(grid) == 0:\n        return 0\n\n    rows = len(grid)\n    cols = len(grid[0])\n\n    result = 0\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i+1, rows):\n                for l in range(j+1, cols):\n                    result = max(result, grid[i][j] + grid[k][l])\n\n    return result", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\n# Returns the maximum sum such that no two chosen numbers are adjacent\n# Time Complexity: O(n^2)\ndef max_sum_rectangular_grid(grid, n):\n\n    # Initialize the maximum sum as the last element in the first row\n    max_sum = grid[0][n - 1]\n\n    # Loop through each row and calculate the maximum sum\n    for i in range(1, len(grid)):\n        for j in range(0, n - 1):\n            max_sum = max(max_sum, grid[i][j] + max_sum)\n\n    # Return the maximum sum\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    return max(grid[0]) + max(grid[-1])\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    # write your code here\n\n    rows = len(grid)\n    columns = len(grid[0])\n\n    m = 0\n    for i in range(rows):\n        for j in range(columns):\n            if j == n - 1:\n                m = max(m, grid[i][j] + max_sum_rectangular_grid(grid, n) - grid[i][j])\n            else:\n                m = max(m, grid[i][j] + max_sum_rectangular_grid(grid[:i], n))\n\n    return m", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, k):\n    def add_up_row(r, c, s):\n        if r < 0 or r >= n or c < 0 or c >= n:\n            return 0\n        if s >= target:\n            return s\n        if visited[r][c]:\n            return 0\n        else:\n            visited[r][c] = True\n            s += grid[r][c]\n            s += add_up_row(r - 1, c, s)\n            s += add_up_row(r + 1, c, s)\n            s += add_up_row(r, c - 1, s)\n            s += add_up_row(r, c + 1, s)\n            return s\n\n    n = len(grid)\n    target = 0\n    visited = [[False for j in range(n)] for i in range(n)]\n    for r in range(n):\n        for c in range(n):\n            if r == 0 and c == 0:\n                continue\n            s = add_up_row(r, c, 0)\n            if s > target:\n                target = s\n    return target\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\n# Solution 1:\ndef find_Max_Len_Even(str1):\n    odd_words = []\n    max_len = 0\n    for word in str1.split(\" \"):\n        if len(word) % 2 == 1:\n            odd_words.append(word)\n    for word in odd_words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# Solution 2:\ndef find_Max_Len_Even(str1):\n    return max(len(word) for word in str1.split(\" \") if len(word) % 2 == 0)", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(s):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    answer = s[0]\n    for i in range(1, len(s), 2):\n        if len(answer) < len(s[i]):\n            answer = s[i]\n    return answer\n\n\ndef test_function():\n    assert find_Max_Len_Even(\"python language\") == \"language\"\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(input_string):\n    max_len = 0\n    start = 0\n    end = 0\n    for i in range(len(input_string)):\n        if input_string[i].isalpha() and input_string[i].isupper():\n            end = i + 1\n        if (input_string[i].isalpha() and input_string[i].isupper()) and (i - start + 1) % 2 == 0:\n            if end - start + 1 > max_len:\n                max_len = end - start + 1\n                start = i\n                end = i + 1\n    return input_string[start:end]\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(text):\n    max_len = 0\n    max_len_word = \"\"\n    for word in text.split(\" \"):\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_len_word = word\n    return max_len_word\n\ndef main():\n    text = input(\"Enter the string:\")\n    max_len = find_Max_Len_Even(text)\n    print(\"The longest even word is\", max_len)\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    #Write your code here\n    longest_even = \"\"\n    if string == \"\":\n        return \"\"\n\n    string_list = string.split()\n    for string in string_list:\n        string_len = len(string)\n        if is_even(string_len) and string_len > len(longest_even):\n            longest_even = string\n\n    return longest_even\n\n\ndef is_even(integer):\n    return integer % 2 == 0\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    max_len = 0\n    for i in range(0,len(string)-1,2):\n        if string[i+1] == \" \":\n            max_len = max(len(string[i:]),max_len)\n    return string[:max_len]\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    result = 0\n    result1 = 0\n    for x in range(len(str)):\n        if x % 2 == 0:\n            if str[x] not in result:\n                result += str[x]\n            if len(result) > result1:\n                result1 = len(result)\n        if x % 2 != 0:\n            if str[x] not in result1:\n                result1 += str[x]\n    return result1\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(str1):\n    max_len = 0\n    even = 0\n    for word in str1.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                even = word\n\n    return even", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    if len(str) <= 1:\n        return str\n    if str[0] == str[1]:\n        return find_Max_Len_Even(str[2:])\n    else:\n        return find_Max_Len_Even(str[1:])\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    max_len = 0\n    for word in str.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n    return max_len\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(numbers, num):\n    l, r = 0, len(numbers)\n    while l < r:\n        m = (l + r) // 2\n        if numbers[m] > num:\n            r = m\n        else:\n            l = m + 1\n    return l\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, target):\n    # Write your code here\n    i, j = 0, len(arr) - 1\n    while i <= j:\n        m = (i + j) // 2\n        if arr[m] == target:\n            return m\n        if arr[i] <= arr[m]:\n            if arr[i] == target:\n                return i\n            i += 1\n        else:\n            if arr[j] == target:\n                return j\n            j -= 1\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(array, n):\n    return bisect.bisect_left(array, n) - 1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(array, element):\n    # Write your code here\n    return 0\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(array, element):\n    for i, value in enumerate(array):\n        if value == element:\n            return i\n    return -1\n\n# test", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(numbers, number):\n    if len(numbers) == 0:\n        return None\n\n    if numbers[0] == number:\n        return 0\n\n    if numbers[-1] == number:\n        return len(numbers) - 1\n\n    low = 0\n    high = len(numbers) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if numbers[mid] < number:\n            low = mid + 1\n        elif numbers[mid] > number:\n            high = mid - 1\n        else:\n            return mid\n\n    return None\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, num):\n    for i in reversed(range(0, len(arr))):\n        if num == arr[i]:\n            return i\n    return None\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, number):\n    \"\"\"\n    Find the index of the last occurrence of a given number in a sorted array.\n    :param array: an array of integers\n    :param number: the integer to find in the array\n    :return: the index of the last occurrence of the number in the array\n    \"\"\"\n    low = 0\n    high = len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if number == array[mid]:\n            return mid\n        elif number < array[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return None\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(array, n):\n    i = len(array) - 1\n    while i >= 0:\n        if array[i] == n:\n            break\n        i -= 1\n    return i\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, value):\n    \"\"\"\n    Time: O(log n)\n    \"\"\"\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == value:\n            if mid == 0 or array[mid - 1] != value:\n                return mid\n            else:\n                high -= 1\n        elif array[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    modified_lst = []\n    prev_count = 0\n    for count in lst:\n        if prev_count > 0:\n            modified_lst.append(prev_count)\n            prev_count = count\n        else:\n            modified_lst.append(count)\n    if prev_count > 0:\n        modified_lst.append(prev_count)\n    return modified_lst\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(list):\n    result = []\n    for el in list:\n        if el == list[-1]:\n            result.append([el])\n        elif el == list[-2]:\n            result.append([list[-1], el])\n        else:\n            result.append([el])\n    return result\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(list_of_nums):\n    if list_of_nums == []:\n        return []\n    else:\n        (num, freq) = list_of_nums[0]\n        count = 1\n        new_list = []\n        for i in range(1, len(list_of_nums)):\n            if list_of_nums[i][0] == num:\n                count += 1\n            else:\n                if count == 1:\n                    new_list.append([num, count])\n                else:\n                    new_list.append([num, count])\n                num = list_of_nums[i][0]\n                count = 1\n        if count == 1:\n            new_list.append([num, count])\n        else:\n            new_list.append([num, count])\n    return new_list\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(L):\n    L = [len(x) for x in L]\n    L = [x for x in L]\n\n    # sorted(L, reverse=True) -> [(4, 1), (1, 3), (2, 1), (2, 1)]\n    # [[4, 1], 3, [2, 1], 2]\n    # [[4, 1], 2, 3, [2, 1]]\n    # [[4, 1], 2, 3]\n    # [[4, 1], 3]\n    # [[4, 1]]\n    L = sorted(L, reverse=True)\n\n    # all([x[0]==x[1] for x in zip(L[:-1], L[1:])]) -> True\n    # [[4, 1], 3, [2, 1], 2]\n    # [[4, 1], 2, 3, [2, 1]]\n    # [[4, 1], 2, 3]\n    # [[4, 1]]\n    # True\n\n    L_1 = [L[0]]\n    for i in range(1, len(L)):\n        if L[i][0]==L[i-1][0]:\n            L_1.append(L[i])\n        else:\n            L_1.append([L[i][0], L[i][1]])\n    # L_1 = [[4, 1], [4, 1], [4, 1]]\n    return L_1\n\ndef test_modified_encode():\n    L = [[4, 1], 3, [2, 1], 2]\n    result = modified_encode(L)\n    expected = [[2, 1], 2, 3, [2, 4], 5, 1]\n    assert result == expected\n\ndef test_modified_encode_example():\n    # example = [[1, 1, 2, 3, 4, ", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    return [[x] if x == y else x for x, y in zip(l, l[1:])]\n\n#Unfinished", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(run_length_encoding):\n    \"\"\"\n    Write a function to reflect the modified run-length encoding from a list\n    >>> modified_encode([1,1,2,3,4,4,5,1])\n    [[2, 1], 2, 3, [2, 4], 5, 1]\n    \"\"\"\n    return [list(itertools.chain(*l)) for l in zip(*run_length_encoding)]\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(list_):\n    \"\"\"\n    Modified run-length encoding\n    \"\"\"\n    if len(list_) == 0:\n        return [[], 0]\n    result = [[], 1]\n    for i in range(len(list_)-1):\n        if list_[i] == list_[i+1]:\n            result[0].append(list_[i])\n            result[1] += 1\n        else:\n            result[0].append(list_[i])\n            result[1] = 1\n            result.append(list_[i+1])\n            result[1] = 1\n    return result\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(L):\n    n = 0\n    while n < len(L) and L[n] == L[n+1]:\n        n += 1\n    if n == 0:\n        return [L,]\n    else:\n        return [[L[0], n],] + modified_encode(L[n+1:])\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    \"\"\"\n    Write a function to reflect the modified run-length encoding from a list.\n    \"\"\"\n    encoded = []\n    while len(l):\n        while len(l) and l[0][1] == 1:\n            encoded.append(l.pop(0))\n        for num, rep in l:\n            if rep == 1:\n                encoded.append([num, 1])\n            else:\n                encoded.append(num)\n                break\n        else:\n            break\n    return encoded\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    rl = [[x,1] for x in l]\n    for i in range(len(rl)):\n        if i+1 < len(rl) and rl[i][0] == rl[i+1][0]:\n            rl[i][1] += 1\n        else:\n            rl.append([rl[i][0], 1])\n    return rl\n\ndef test_modified_encode():\n    assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\ndef test_modified_encode_1():\n    assert modified_encode([1,1,1])==[[1,1],1]\n\ndef test_modified_encode_2():\n    assert modified_encode([1])==[1]\n\ndef test_modified_encode_3():\n    assert modified_encode([1,1,1,1,1,1])==[[1, 6], 1]\n\ndef test_modified_encode_4():\n    assert modified_encode([1,2,3])==[[3, 1], 2]\n\ndef test_modified_encode_5():\n    assert modified_encode([1,2,3,4,4,5,5,6,7,8,8,8,9])==[[2, 4], 6, 8, [4, 2], 9]\n\ndef test_modified_encode_6():\n    assert modified_encode([1,2,3,4,5,6,7,8,8,9,10,10,10])==[[3, 3], 9, [4, 1], 10]\n\ndef test_modified_encode_7():\n    assert modified_encode([1,2,3,4,5,6,7,8,9,10,10,10,11"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_of_sides):\n    max_volume = 0\n    for a in range(1, int(sum_of_sides / 3) + 1):\n        for b in range(1, int(sum_of_sides / 3) + 1):\n            for c in range(1, int(sum_of_sides / 3) + 1):\n                if sum(a * a, b * b, c * c) == sum_of_sides:\n                    max_volume = max(max_volume, a*b*c)\n    return max_volume\n\ndef main():\n    for i in range(8, 1000):\n        print(i, max_volume(i))\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sum_sides):\n    \"\"\"\n    To find the maximum volume of cuboid the sides must be in range of (0,25)\n    The function will traverse over all the possible cuboids and return the volume of the\n    cuboid with the maximum volume\n    \"\"\"\n    max_volume = 0\n\n    for l in range(1, 25):\n        for w in range(1, 25):\n            for h in range(1, 25):\n                # The volume of the cuboid will be the product of\n                # the lengths of its sides\n                volume = l * w * h\n\n                # Check if the volume is greater than the maximum volume\n                # found so far\n                if volume > max_volume:\n                    # If yes, update the maximum volume\n                    max_volume = volume\n\n    return max_volume\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sides):\n    \"\"\"\n    :type sides: int\n    :rtype: int\n    \"\"\"\n    return sides*sides*sides\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(s):\n    \"\"\"\n    :param s: sum of sides of a cuboid\n    :return: maximum volume of a cuboid with given sum of sides\n    \"\"\"\n    v = 0\n    if s % 6 == 0:\n        v = s * s * s / 6\n    return v\n\n\ndef test_max_volume():\n    assert max_volume(8) == 18\n    assert max_volume(12) == 24\n    assert max_volume(15) == 35\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\n# number of ways of choosing any given cuboid with sum sides a + b + c = 8.\ndef choose(a, b, c):\n    if a == 0:\n        return 1\n    elif a == 1:\n        return 2\n    elif a == 2:\n        return 3\n    elif a == 3:\n        return 4\n    elif a == 4:\n        return 5\n    elif a == 5:\n        return 6\n    elif a == 6:\n        return 7\n    elif a == 7:\n        return 8\n    elif a == 8:\n        return 9\n    elif a == 9:\n        return 10\n    elif a == 10:\n        return 11\n    elif a == 11:\n        return 12\n    elif a == 12:\n        return 13\n    elif a == 13:\n        return 14\n    elif a == 14:\n        return 15\n    elif a == 15:\n        return 16\n    elif a == 16:\n        return 17\n    elif a == 17:\n        return 18\n    elif a == 18:\n        return 19\n    elif a == 19:\n        return 20\n    elif a == 20:\n        return 21\n    elif a == 21:\n        return 22\n    elif a == 22:\n        return 23\n    elif a == 23:\n        return 24\n    elif a == 24:\n        return 25\n    elif a == 25:\n        return 26\n    elif a == 26:\n        return 27\n    elif a == 27:\n        return 28\n    elif a == 28:\n        return 29\n    elif a == 29:\n        return 30\n    elif a == 30:\n        return 31\n    elif a == 31:\n        return 32\n    elif a == 32:\n        return 33\n    elif a == 33:\n        return 34\n    elif a == 34:\n        return 35\n    elif a == 35", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(x):\n    # Write your code here\n    left = [1, 2, 3, 4]\n    right = [1, 1, 2, 1, 3, 1]\n    n = len(left)\n    max_sum = -1\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and i != k and j != k:\n                    temp = sum([left[i], right[i], left[k]])\n                    if temp > max_sum:\n                        max_sum = temp\n    return max_sum", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(s):\n    i = 1\n    j = 1\n    while i < s and j < s:\n        k = s - i - j\n        if k >= 0 and i*j*k == s:\n            return i*j*k\n        i += 1\n    return -1\n\ndef main():\n    print(max_volume(8))\n\nmain()", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(a,b,c):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param c: int\n    :return: int\n    \"\"\"\n    # Create empty list\n    m = []\n    # append the length of sides to list\n    m.append(a)\n    m.append(b)\n    m.append(c)\n    # sort the list\n    m.sort()\n    # Create a list of cubes\n    cube_volumes = []\n    # Loop over the list\n    for i in m:\n        # append cube_volume to the list\n        cube_volumes.append(i**3)\n    # print the max volume\n    return max(cube_volumes)\n\n# Test case 1", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom itertools import product\n\ndef max_volume(sum):\n    \"\"\"\n    >>> max_volume(8)\n    18\n    \"\"\"\n    return max(product(range(1, sum), repeat=3))\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(side_length):\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides.\n    \"\"\"\n    return (side_length ** 2) * 2\n\n\n# print(max_volume(8))\n\n# +\n# Test your code here:"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    \"\"\"\n    Finds all five characters long words.\n    \"\"\"\n    words = []\n    for word in re.findall(r'\\w{5,}', string.lower()):\n        words.append(word)\n    return words\n\n# test cases", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nfrom re import findall\n\n\ndef find_long_word(string):\n    \"\"\"\n    >>> find_long_word('Please move back to strem')\n    ['strem']\n    >>> find_long_word('Please move back to string')\n    ['string']\n    >>> find_long_word('Please move back to 1streem')\n    ['1streem']\n    \"\"\"\n    return findall(r'[a-z]{5}', string)", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(string):\n    return re.findall(r\"\\b.{5}\\b\", string)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(string):\n    # TODO: Write your code here\n    return re.findall(r'\\w{5}', string)\n\n\n# +\n# Test cases", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(input_string):\n    long_words = []\n    for word in re.findall('\\w{5}', input_string):\n        long_words.append(word)\n    return long_words", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(text):\n\tres = re.findall('([a-z]{5})', text.lower(), re.I)\n\treturn res\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(text):\n    \"\"\"\n    Takes a string as input and returns a list of all words with 5 characters.\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(string):\n    \"\"\"\n    Write a function to find all five characters long word in the given string by using regex.\n    \"\"\"\n    # your code here\n    return re.findall(r\"(\\w{5})\", string)\n\n\n# +", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    words = string.split()\n    long_words = list()\n    for word in words:\n        if len(word) == 5:\n            long_words.append(word)\n    return long_words\n\n# test", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    \"\"\"\n    Find all words with 5 characters in the given string.\n    \"\"\"\n    return [x for x in re.findall('(.{\\w\\w\\w\\w\\w})', string)]\n\ndef test_find_long_word():\n    assert find_long_word('Please move back to strem') == ['strem']\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    num1 = 0\n    num2 = 0\n    for i in range(1,n+1):\n        num1 += i ** 2\n    for j in range(1,n+1):\n        num2 += (j ** 2)\n    return num1 - num2", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sum1 = sum(range(1, n+1))\n    sum2 = sum(map(lambda x: x*x, range(1, n+1)))\n    return sum1*sum1 - sum2\n\n#assert sum_difference(24)==203979\n\n#print sum_difference(24)\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    s=0\n    t=0\n    for i in range(1,n+1):\n        s += i\n        t += i**2\n    return abs(s-t)", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    \"\"\"\n    Calculates the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    :param n: an integer\n    :return: an integer\n    \"\"\"\n    return sum([i**2 for i in range(1, n+1)])-sum([i**2 for i in range(1, n+1)])**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    s = 0\n    t = 0\n    for x in range(n):\n        s += x**2\n    for x in range(n):\n        t += x\n    return (t**2-s)\n\ndef sum_difference(n):\n    return (n*(n+1)*(2*n+1))//6 - n*(n+1)//2\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    res = 0\n    # Sum of first n natural numbers\n    for i in range(n+1):\n        res += i**2\n    # Sum of first n natural numbers squared\n    for i in range(1, n+1):\n        res -= i\n    return res\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return (sum([i**2 for i in range(1,n+1)])**2)-(sum([i**2 for i in range(1,n+1)]))**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    # your code here\n    x = n*(n+1)*(2*n+1)/6\n    return x\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return (n*(n+1))*(2*n+1)-(n*(n+1)*(2*n+1))/2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    s = 0\n    for i in range(n):\n        s += i\n    return (sum([i**2 for i in range(n)]) - s* (n+1)//2)\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    return num\n\n#The above function can be implemented with \n# the below function which uses heapq module:\n\ndef find_demlo_v2(num):\n    result = num\n    tmp = \"\"\n    for n in range(1, len(num)):\n        if int(num[n]) <= int(tmp):\n            result = find_demlo_v2(result[:n] + num[n] + result[n + 1:])\n        else:\n            tmp = num[n]\n    return result\n\n#find_demlo_v2(\"111111\")\n\n\n#Write a function to check if the given number is a power of 2", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    demlo = \"\"\n    for i in range(1, len(num)):\n        demlo += str(int(num[len(num)-1-i]))\n    return demlo\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(n):\n    \"\"\"\n    Finds the Demlo number for a given number\n    \n    Args:\n        n (str): The string to find the demlo number for\n    Returns:\n        str: The string of the demlo number for n\n    \"\"\"\n    if len(n) == 1:\n        return n\n    return find_demlo(find_demlo(n[:len(n) // 2])) + find_demlo(find_demlo(n[len(n) // 2:]))\n\n\ndef test_find_demlo():\n    assert find_demlo(\"111111\") == '12345654321'\n    assert find_demlo(\"12345\") == '12345'\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    n = len(num)\n    ret = '0' * n\n    for i in range(n):\n        start = int(num[i])\n        for j in range(start, n):\n            if num[j] < num[i]:\n                ret = ret[:i] + str(j - i) + ret[j:]\n                break\n        else:\n            break\n    return ret", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num: str) -> str:\n    \"\"\"\n    Demlo numbers are the numbers whose digits can be rearranged to form a palindrome,\n    like '123456789' -> '123678459' -> '184523678' -> '145236789'.\n    >>> find_demlo(\"111111\")\n    '12345654321'\n    \"\"\"\n    num_len = len(num)\n    if num_len % 2 == 1:\n        num_list = list(num)\n        num_list.insert(num_len // 2, '')\n        num_list.append('')\n        num_list.reverse()\n        return ''.join(num_list)\n    else:\n        num_list = list(num)\n        for i in range(num_len // 2):\n            temp = num_list[i]\n            num_list[i] = num_list[num_len-1-i]\n            num_list[num_len-1-i] = temp\n        return ''.join(num_list)", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    # Your code here\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    digits = [int(n) for n in number]\n\n    res = []\n    for x in digits:\n        tmp = []\n        for n in numbers:\n            tmp.append(str(x + n))\n\n        res.extend(tmp)\n\n    for i in range(1, len(digits)):\n        for j in range(i+1, len(digits)):\n            num = digits[i] + digits[j]\n            tmp = []\n            for n in numbers:\n                tmp.append(str(num - n))\n            res.extend(tmp)\n\n    res.sort()\n    res = \"\".join(res)\n    return res\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num):\n    a = int(num)\n    if a == 1:\n        return \"12345654321\"\n    m = 0\n    for i in range(1, a+1):\n        if a % i == 0:\n            m = i\n    if m == 0:\n        return \"12345654321\"\n    s = \"\"\n    while m > 0:\n        s = s + str(m)\n        a = a/m\n    return s[::-1]", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(n):\n    #\n    # your code here\n    #\n    \n    pass\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(n):\n    \"\"\"\n    Write a function to find the demlo number for the given number.\n\n    Args:\n        n (int): number to find the demlo number for.\n\n    Returns:\n        string: demlo number for the given number.\n\n    Raises:\n        ValueError: If given number is not a string.\n    \"\"\"\n    if not isinstance(n, str):\n        raise ValueError(\"find_demlo requires a string as input\")\n\n    n = list(n)\n    for i, c in enumerate(n):\n        if c == '1':\n            n[i] = '0'\n        else:\n            n[i] = '1'\n\n    n = ''.join(n)\n    if n == '0':\n        return '0' * 10\n    else:\n        return n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(number):\n    if len(number) <= 1:\n        return number\n    while len(number) % 3 == 0:\n        number = number[0] + number[1] + number[2]\n        number = number[:len(number)//2]\n    return number"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(L):\n    minpos=[]\n    for i in range(len(L)):\n        for j in range(i+1,len(L)):\n            if L[i] > L[j]:\n                minpos.append(j)\n    return minpos\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    min_pos=[]\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i]<lst[j]:\n                min_pos.append(i)\n    return min_pos\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(A):\n    if len(A) == 0:\n        return []\n    min_value = A[0]\n    min_index = 0\n    for i in range(1,len(A)):\n        if A[i] < min_value:\n            min_value = A[i]\n            min_index = i\n    return [min_index]", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(l):\n    min_values=set()\n    for i in range(0,len(l)):\n        for j in range(i+1,len(l)):\n            if l[j]<l[i]:\n                min_values.add(j)\n                break\n    return [pos for pos in min_values]\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(l):\n    result = []\n    min_pos = []\n    min_val = 1000\n    for i in range(len(l)):\n        if l[i] < min_val:\n            min_pos = [i]\n            min_val = l[i]\n        elif l[i] == min_val:\n            min_pos.append(i)\n    return min_pos\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\nfrom math import inf\n\ndef position_min(L):\n    \"\"\"\n    Solves the problem by using binary search with floor function.\n    \"\"\"\n    lo, hi = 0, len(L)-1\n    while lo < hi:\n        mid = (lo+hi) // 2\n        if L[mid] < L[hi]:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo, hi\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(l):\n    if len(l)==0:\n        return []\n    min_value = min(l)\n    res = []\n    for i,v in enumerate(l):\n        if v==min_value:\n            res.append(i)\n    return res", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    # Write your code here\n    lst.sort()\n    mini=[]\n    for i in range(len(lst)):\n        if i == 0 or lst[i] > lst[i-1]:\n            mini.append(i)\n    return mini\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(list):\n    min=list[0]\n    pos=[]\n    for i in range(len(list)):\n        if min>list[i]:\n            min=list[i]\n            pos.append(i)\n    return pos\n\ndef main():\n    list=read_list()\n    print(position_min(list))\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(array):\n\tif array is None:\n\t\treturn []\n\tresult = []\n\tfor i in range(len(array)):\n\t\tmin = array[i]\n\t\tmin_pos = i\n\t\tfor j in range(i+1,len(array)):\n\t\t\tif array[j] < min:\n\t\t\t\tmin = array[j]\n\t\t\t\tmin_pos = j\n\t\tresult.append(min_pos)\n\treturn result"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(array, k):\n    return list(itertools.chain(*[list(itertools.islice(array, k, None, -1)) for i in range(k)]))\n\ndef re_arrange(array, k):\n    a, b = len(array) // k, len(array) % k\n    if not k:\n        return array\n    return [array[i] for i in range(a*k)] + [array[-i] for i in range(k, k+b)]\n\n# https://www.interviewbit.com/algorithms/rearrange-array-alternating-positive-negative/\n# Given an array of numbers, arrange them such that alternating positive and negative numbers are together.\n# https://www.interviewbit.com/problems/rearrange-array-alternating-positive-negative-1/\n\n# Rearrange the array such that all elements of positive array are in front of all elements of negative array.\n# 9 5 -2 4 7 -5 -1 3 1 6\n# 9 5 -2 7 4 -5 1 -1 3 6\n# 9 5 -2 7 4 -5 1 3 -1 6\n# 9 5 -2 7 4 -5 3 1 -1 6\n# 9 5 -2 7 4 -5 3 6 1 -1\n# 9 5 -2 7 4 -5 6 1 3 -1\n# 9 5 -2 7 4 -5 6 3 1 -1\n# 9 5 -2 7 4 -5 3 6 1 1\n# 9 5 -2 7 4 -5 3 6 1 -1\n# 9 5 -2", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n\ta = list(range(1,n+1))\n\tb = list(range(n+1,-1,-1))\n\tfor i in range(1,n,2):\n\t\ttemp = a[i]\n\t\ta[i] = b[i]\n\t\tb[i] = temp\n\tc = []\n\tfor i in range(n):\n\t\tc.append(a[i])\n\treturn c", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(items, k):\n    n = len(items)\n    if n % k != 0:\n        raise Exception(\"Can not re-arrange list length %d\" % n)\n    k = n // k\n    res = [0] * n\n    start = 0\n    for i in range(k):\n        end = start + k\n        for j in range(start, end):\n            res[j] = items[j]\n        start = end\n    for j in range(start, n):\n        res[j] = items[j]\n    return res\n\ndef test_re_arrange():\n    assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\n# Solution 1:\n\ndef re_arrange(a, n):\n    res = []\n    i = 0\n    while i < n:\n        res.append(a[i])\n        i += 2\n    i = 1\n    while i < n:\n        res.append(a[i])\n        i += 2\n    return res\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(a, n):\n\tfor i in range(0, len(a), 2):\n\t\tif a[i] > a[i + 1]:\n\t\t\ta[i], a[i + 1] = a[i + 1], a[i]\n\t\n\treturn a\n\ndef test_re_arrange():\n\tassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    if not arr:\n        return arr\n    elif len(arr) == 1:\n        return arr\n    elif len(arr) == 2:\n        return sorted(arr)\n    elif len(arr) == 3:\n        return sorted(arr)\n    elif len(arr) % 2:\n        odds, evens = [], []\n        for a in arr:\n            if a < 0:\n                evens.append(a)\n            else:\n                odds.append(a)\n        return odds + evens\n    else:\n        evens, odds = [], []\n        for a in arr:\n            if a < 0:\n                evens.append(a)\n            else:\n                odds.append(a)\n        return evens + odds", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(array, max_length):\n    start = 0\n    end = max_length - 1\n    result = []\n    \n    while start < end:\n        #we choose the mid element as the sum of the first 5 elements will be less than the max_length,\n        #and the sum of the last 5 elements will be greater than the max_length.\n        if sum(array[start:end+1]) < max_length and sum(array[end+1:start:-1]) < max_length:\n            result.append(array[start])\n            result.append(array[end])\n            start += 1\n            end -= 1\n        else:\n            result.append(array[start])\n            result.append(array[end])\n            start += 1\n            end -= 1\n    result.extend(array[start:])\n    return result\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    # your code here\n    if arr == [] or len(arr) != n:\n        return []\n    left = []\n    right = []\n    for item in arr:\n        if item < 0:\n            left.append(item)\n        else:\n            right.append(item)\n    result = []\n    for i in range(0, n, 2):\n        result.append(left[i])\n        result.append(right[i])\n    return result\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    ret = []\n    temp = []\n    for i in arr:\n        if i < 0:\n            temp.append(i)\n        else:\n            ret.append(i)\n    for i in range(n-len(temp)):\n        ret.append(temp.pop(0))\n    return ret\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, size):\n    ret = []\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        ret.append(arr[left])\n        ret.append(arr[right])\n        left += 1\n        right -= 1\n    if left == right:\n        ret.append(arr[left])\n    return ret\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\nfrom itertools import combinations, chain\n\ndef sum_of_alternates(n):\n    if len(n) == 0:\n        return ()\n    if len(n) == 1:\n        return tuple(n)\n    return sum(tuple(n[i]) + tuple(n[i+1]) for i in range(0, len(n)-1))\n\n#test", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(numbers):\n    result = (0, 0)\n    for i in range(0, len(numbers), 2):\n        result = result[0] + numbers[i], result[1] + numbers[i+1]\n    return result\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(arr):\n    return sum(arr[i] + arr[i+1] for i in range(0, len(arr)-1, 2)), sum(arr[i] + arr[i+1] for i in range(1, len(arr), 2))\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(l):\n    if len(l) <= 1:\n        return l\n    s1 = l[::2]\n    s2 = l[1::2]\n    return sum_of_alternates(s1) + sum_of_alternates(s2)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(chain):\n    \"\"\"\n    :param chain: list of tuples\n    :return: tuple with sum of odd elements and sum of even elements\n    \"\"\"\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(chain)):\n        if i % 2 == 0:\n            even_sum += chain[i]\n        else:\n            odd_sum += chain[i]\n    return (odd_sum, even_sum)\n\ndef test_sum_of_alternates():\n    chain = (5, 6, 3, 6, 10, 34)\n    assert sum_of_alternates(chain) == (46, 18)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(L):\n    \"\"\"\n    Sums alternating elements.\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    (46, 18)\n    \"\"\"\n    N = len(L)\n    if N < 2:\n        return L\n    return L[0] + sum_of_alternates(L[1::2])\n\n\ndef test_sum_of_alternates():\n    # TODO: expand test cases\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\n\n# Solution 2:\n# https://stackoverflow.com/questions/7452206/sum-of-all-pairs-in-list-that-are-not-equal/7452225#7452225\ndef sum_of_pairs(L):\n    \"\"\"\n    >>> sum_of_pairs([1, 2, 3, 5, 8, 13, 21])\n    54\n    \"\"\"\n    N = len(L)\n    if N < 2:\n        return 0\n    return L[0] + sum_of_pairs(L[1:]) + sum_of_pairs(L[2:])\n\n\ndef test_sum_of_pairs():\n    assert sum_of_pairs([1, 2, 3, 5, 8, 13, 21]) == 54\n\n\n# Solution 3:\n# http://gizmac.com/blog/2011/09/09/python-loop-question/\ndef sum_of_pairs2(L):\n    \"\"\"\n    >>> sum_of_pairs2([1, 2, 3, 5, 8, 13, 21])\n    54\n    \"\"\"\n    return reduce(operator.add, zip(L[:-1], L[1:]))\n\n\ndef test", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(lst):\n    if len(lst) % 2 == 0:\n        return sum(zip(*lst)[0::2]), sum(zip(*lst)[1::2])\n    else:\n        return sum(zip(*lst)[0::2]), sum(zip(*lst)[1::2])\n\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(tup):\n    if len(tup) < 2:\n        return tup\n    \n    res = []\n    for i in range(0, len(tup), 2):\n        res.append(tup[i] + tup[i+1])\n    return tuple(res)\n\ndef test_sum_of_alternates():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\ndef test_sum_of_alternates_type_error():\n    assert sum_of_alternates() == None\n\ndef test_sum_of_alternates_empty_tup():\n    assert sum_of_alternates(()) == None", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(seq):\n    \"\"\"\n    Return the sum of the alternating elements of a sequence\n\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    (46, 18)\n\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34), key=lambda x:x%2)\n    (138, 16)\n\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34), key=lambda x:x%2)\n    (138, 16)\n    \"\"\"\n    # your code here\n    return None\n\n\ndef test_sum_of_alternates():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34), key=lambda x: x % 2) == (138, 16)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(seq):\n    result = 0\n    for i in range(len(seq) - 1):\n        result += seq[i]\n        result -= seq[i+1]\n    return (result, seq[-1])\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\n# O(n^2) time and space. Use memoization.\ndef get_Min_Squares(n, memo={}):\n    if n in memo:\n        return memo[n]\n    \n    min_squares = n + 1\n    for i in range(1, n + 1):\n        left = get_Min_Squares(n - i, memo)\n        memo[n] = min(min_squares, left)\n        min_squares += 1\n    \n    return min_squares", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(num):\n    sum = 0\n    for i in range(1,num+1):\n        sum = sum + i\n    return sum**2\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    squares = []\n    for i in range(1,num//2 + 1):\n        squares.append(i*i)\n    return len(squares)\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(given_number):\n    # Your code here\n    # num_squares = 1\n    # min_squares = 1\n    # num_squares = 2\n    # min_squares = 2\n    # num_squares = 3\n    # min_squares = 2\n    # num_squares = 2\n    # min_squares = 2\n    # num_squares = 3\n    # min_squares = 3\n    # num_squares = 3\n    # min_squares = 4\n\n    num_squares = 1\n    min_squares = 1\n    current_sum = 0\n\n    while current_sum < given_number:\n        current_sum += num_squares\n        num_squares += 1\n        min_squares = num_squares\n    \n    return min_squares\n\n# 1. return min_squares\n# 2. num_squares = 1\n# 3. min_squares = 1\n# 4. current_sum = 0\n# 5. while current_sum < given_number:\n# 6. current_sum += num_squares\n# 7. num_squares += 1\n# 8. min_squares = num_squares\n# 9. return min_squares\n# https://github.com/kamleshg1234/python-interview-questions/blob/master/get_min_squares.py", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\n# ----------------------------------------------------------------------------------------------------------------------\n# This is a solution by using binary search\n# ----------------------------------------------------------------------------------------------------------------------\ndef get_Min_Squares(n):\n    lo, hi = 1, n\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if (mid * (mid + 1)) / 2 == n:\n            return mid\n        if (mid * (mid + 1)) / 2 < n:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n# This is a solution by using binary search\n# ----------------------------------------------------------------------------------------------------------------------\ndef get_Min_Squares_2(n):\n    lo, hi = 1, n\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if (mid * (mid + 1)) // 2 == n:\n            return mid\n        if (mid * (mid + 1)) / 2 < n:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n# This is a solution by using binary search\n# ----------------------------------------------------------------------------------------------------------------------\ndef get_Min_Squares_3(n):\n    lo, hi = 1, n\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if (mid * (mid + 1)) / 2 == n:\n            return mid\n        if (mid * (mid + 1)) / 2 < n:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n# This is a solution by using binary search\n# ----------------------------------------------------------------------------------------------------------------------\ndef get_Min_Squares_4(n):\n    lo, hi = 1, n\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if (mid * (mid + 1)) / 2 == n:\n            return mid\n        if (mid * (mid + 1)) / 2 < n:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n# This is a solution by using binary search\n# ----------------------------------------------------------------------------------------------------------------", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(num):\n    return _get_Min_Squares_helper(num, [])\n\ndef _get_Min_Squares_helper(num, squares):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 1\n    if num == 3:\n        return 2\n    if num == 4:\n        return 2\n    if num == 5:\n        return 3\n    if num == 6:\n        return 3\n    if num == 7:\n        return 4\n    if num == 8:\n        return 4\n    if num == 9:\n        return 5\n    if num == 10:\n        return 5\n    if num in squares:\n        return squares[num]\n    min_num_squares = num+1\n    for i in range(1, num+1):\n        if num % i == 0:\n            num_of_squares = _get_Min_Squares_helper(num/i, squares)\n            min_num_squares = min(min_num_squares, num_of_squares+1)\n    squares[num] = min_num_squares\n    return min_num_squares\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    if n < 4:\n        return 1\n\n    sqrs = [0]\n    for i in range(2, int(n**0.5) + 1):\n        if i**2 < n:\n            for j in range(i**2, n + 1, i**2):\n                sqrs.append(j)\n\n    return min(sqrs)\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\n# Input 0\n# Output 0\n# Input 1\n# Output 1\n# Input 2\n# Output 1\n# Input 3\n# Output 2\n# Input 4\n# Output 2\n# Input 5\n# Output 3\n# Input 6\n# Output 3\n# Input 7\n# Output 4\n# Input 8\n# Output 3\n# Input 9\n# Output 4\n# Input 10\n# Output 5\n# Input 11\n# Output 3\n# Input 12\n# Output 4\n# Input 13\n# Output 5\n# Input 14\n# Output 6\n# Input 15\n# Output 4\n# Input 16\n# Output 5\n# Input 17\n# Output 6\n# Input 18\n# Output 7\n\n# Input 0\n# Output 0\n# Input 1\n# Output 1\n# Input 2\n# Output 1\n# Input 3\n# Output 2\n# Input 4\n# Output 2\n# Input 5\n# Output 3\n# Input 6\n# Output 3\n# Input 7\n# Output 4\n# Input 8\n# Output 3\n# Input 9\n# Output 4\n# Input 10\n# Output 5\n# Input 11\n# Output 3\n# Input 12\n# Output 4\n# Input 13\n# Output 5\n# Input 14\n# Output 6\n# Input 15\n# Output 4\n# Input 16\n# Output 5\n# Input 17\n# Output 6\n# Input 18\n# Output 7\n\n# Input 0\n# Output 0\n# Input 1\n# Output 1\n# Input 2\n# Output 1\n# Input 3\n# Output 2\n# Input 4\n# Output 2\n# Input 5\n# Output 3\n# Input 6\n# Output 3\n# Input", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\nimport math\n\ndef get_Min_Squares(num):\n    \"\"\"\n    O(nlogn) time | O(1) space - where n is the number\n    \"\"\"\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    min_sum = float(\"inf\")\n    min_squares = 0\n    for i in range(1, math.ceil(math.sqrt(num)) + 1):\n        if num == i * i:\n            return 1\n        for j in range(1, math.ceil(math.sqrt(num - i * i)) + 1):\n            if num - i * i == j * j:\n                if min_sum > i + j:\n                    min_sum = i + j\n                    min_squares = 2\n    return min_squares\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(list_words):\n    dict_occurences = dict()\n    for word in list_words:\n        if word not in dict_occurences:\n            dict_occurences[word] = 1\n        else:\n            dict_occurences[word] += 1\n    return max(dict_occurences, key=dict_occurences.get)\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(list_):\n    # TODO: implement\n    count = 0\n    max_count = 0\n    max_word = None\n    for i in range(len(list_)):\n        for j in range(len(list_[i])):\n            if list_[i][j] in max_word:\n                count = count + 1\n                if count > max_count:\n                    max_count = count\n                    max_word = list_[i]\n            else:\n                max_word = list_[i]\n                max_count = count\n    return max_word\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    counts = dict()\n    for s in strings:\n        for w in s.split():\n            if w in counts:\n                counts[w] += 1\n            else:\n                counts[w] = 1\n    return max(counts, key=lambda key: counts[key])\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(word_list):\n    return max(word_list, key = word_list.count)\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nfrom collections import Counter\n\ndef most_occurrences(list_of_strings):\n    words = Counter()\n    for s in list_of_strings:\n        words += Counter(s.split())\n    return words.most_common(1)[0][0]\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    \"\"\"\n    Given list of strings, return the word with the most occurrences\n    \"\"\"\n    result = None\n    max_count = 0\n    for string in strings:\n        words = string.split()\n        count = 0\n        for word in words:\n            if word in result:\n                count += 1\n        if count > max_count:\n            result = words[0]\n            max_count = count\n    return result\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings_list):\n    count_dict = {}\n    for s in strings_list:\n        s_lst = s.split(' ')\n        for w in s_lst:\n            if w not in count_dict:\n                count_dict[w] = 1\n            else:\n                count_dict[w] += 1\n    most_occur = 0\n    max_k = 0\n    for k, v in count_dict.items():\n        if v > most_occur:\n            most_occur = v\n            max_k = k\n    return max_k\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings_list):\n    word_occurrence_dict = {}\n\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_occurrence_dict:\n                word_occurrence_dict[word] += 1\n            else:\n                word_occurrence_dict[word] = 1\n\n    max_occurrence = 0\n    max_word = \"\"\n    for word, occurrence in word_occurrence_dict.items():\n        if occurrence > max_occurrence:\n            max_occurrence = occurrence\n            max_word = word\n\n    return max_word\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    \"\"\"\n    Find the most frequent word\n    \"\"\"\n    freq = collections.Counter(strings)\n    return max(freq, key=freq.get)\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(s):\n    max_ = 0\n    max_word = ''\n    for word in s:\n        count = s.count(word)\n        if count > max_:\n            max_word = word\n            max_ = count\n    return max_word\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a == b and b == c:\n        return True\n    elif (a == b or a == c or b == c) and (a != b and a != c and b != c):\n        return True\n    else:\n        return False\n\n# assert check_isosceles(6,8,12)==False ", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b and b==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    return (a==b) or (b==c) or (c==a)\n\ndef check_isosceles2(a,b,c):\n    return (a==b+c) or (b==c+a) or (c==a+b)\n\n\na,b,c = map(int,input().split())", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a == b and a == c:\n        return True\n    if a == b and b == c:\n        return True\n    if a == c and b == c:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    \n    return a==b or c==b or a==c\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if (a==b) or (b==c) or (a==c):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n\tif a==b:\n\t\treturn True\n\telif a==c:\n\t\treturn True\n\telif b==c:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if (a==b or b==c or c==a) or (a+b>c and b+c>a and a+c>b):\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    \"\"\"\n    To check if triangle is isosceles or not\n    Args:\n        a:  first side\n        b:  second side\n        c:  third side\n\n    Returns:\n        True if isosceles, False if not\n    \"\"\"\n    if (a==b) or (a==c) or (b==c):\n        return True\n    return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b and b==c:\n        return True\n    return False\n\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(list_in, num_of_steps, list_length):\n    return list_in[num_of_steps:num_of_steps+list_length]\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(L, n):\n    if n == 0:\n        return L\n    n = n % len(L)\n    return L[n:] + L[:n]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(l, k, n):\n    result = []\n    i = 0\n    while i < k:\n        result.append(l[i])\n        i += 1\n\n    for j in range(k, n):\n        result.append(l[j])\n\n    for l in range(k, n):\n        result.append(l[i])\n\n    return result\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(items, count, size):\n    assert count<size and size>0, \"count and size need to be valid\"\n    return items[count:size+count] + items[:count]\n\n#print(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4))\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(lst, pos, size):\n    if len(lst) < pos:\n        print('Size is too small')\n        return lst\n    elif pos == 0:\n        return lst\n    else:\n        result = []\n        for i in range(0, pos):\n            result.append(lst[i])\n        for i in range(pos, len(lst)):\n            result.append(lst[i-pos])\n        return result\n\n\n# --- Rotate right by a certain number of items", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(list,k,n):\n    return list[n+k:] + list[:n]\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(input_list,offset,count):\n    \"\"\"\n    :param input_list: list to be rotated\n    :param offset: number of items to be rotated\n    :param count: number of items to be rotated\n    :return: rotated list\n    \"\"\"\n    print('rotate_left',input_list)\n    return input_list[offset:offset+count]+input_list[:offset]\n\ndef main():\n    #print(rotate_left([1,2,3,4,5,6,7,8,9,10],3,4))\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(arr,n,k):\n    #your code here\n    #if (n*k) > len(arr):\n    #    return arr\n    return arr[n*k:] + arr[:n*k]\n\n\n# +\n#Question 2\n#Write a function to reverse a given list\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(list,n,k):\n    return list[k:]+list[:k]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(l, n, k):\n    if n == 0:\n        return l\n    elif n < 0:\n        return rotate_left(l, 0, -n)\n    elif k < 0:\n        return rotate_left(l, 0, len(l) + k)\n\n    if n == 1:\n        return l[1:] + l[:1]\n    elif n == 2:\n        return l[2:] + l[:2]\n    elif n == 3:\n        return l[3:] + l[:3]\n\n    else:\n        return rotate_left(l[k:], n, k)\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(nums):\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    neg = 0\n    for i in lst:\n        if i < 0:\n            neg = neg + 1\n    return neg\n\n\nneg_count([1, 2, 3, 4, 5])\n\n\n# +\n# %load test_neg_count.py", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(list):\n    return len([x for x in list if x < 0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    neg = 0\n    for num in lst:\n        if num < 0:\n            neg = neg + 1\n    return neg\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(lst):\n\treturn len([x for x in lst if x<0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(lst):\n    count = 0\n    for x in lst:\n        if x < 0:\n            count += 1\n    return count\n\ndef test_neg_count():\n    assert neg_count([-1,-2,3,-4,-5]) == 4\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    return len([x for x in lst if x < 0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(li):\n    count = 0\n    for i in li:\n        if i < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(l):\n    count = 0\n    for i in l:\n        if i < 0:\n            count += 1\n    return count\n\ndef test_neg_count():\n    assert neg_count([-1,-2,3,-4,-5]) == 4\n    print(\"Test passed\")\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(list):\n    return len([a for a in list if a < 0])\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(str1):\n    result = []\n    for word in str1.split():\n        if len(word) in [3, 4, 5]:\n            result.append(word)\n    return result", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(text):\n    return [m.group(0) for m in re.finditer('\\w{1,3}', text)]\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(text):\n    # Pseudo code\n    \"\"\"\n    Takes string as input and returns all words of 3, 4 and 5 length\n    \n    >>> find_char('For the four consumer complaints contact manager AKR reddy')\n    ['For', 'the', 'four', 'AKR', 'reddy']\n    \"\"\"\n\n    # 1.\n    # Create a regex that finds all words of 3, 4 and 5 length, and captures them into a list\n    # e.g.\n    # text = 'For the four consumer complaints contact manager AKR reddy'\n    # regex = r'\\w+(\\s*\\w+)+\\s*\\w+'\n    # groups = re.findall(regex, text)\n    # print(groups)\n\n    # 2.\n    # Create a regex that finds all words of 3, 4 and 5 length, and return them as a list\n    # e.g.\n    # text = 'For the four consumer complaints contact manager AKR reddy'\n    # regex = r'\\w+(\\s*\\w+)+\\s*\\w+'\n    # groups = re.findall(regex, text)\n    # print(groups)\n\n    # 3.\n    # Take input from a user as a string and return all words of 3, 4 and 5 length\n    # e.g.\n    # text = 'For the four consumer complaints contact manager AKR reddy'\n    # regex = r'\\w+(\\s*\\w+)+\\s*\\w+'\n    # groups = re.findall(regex, text)\n    # print(groups)\n\n    # 4.\n    # 4a.\n    # Create a regex that finds all words of 3, 4 and 5 length and capture them into a list\n    # e.g.\n    # text = 'For the four consumer complaints contact manager AKR reddy'\n    # regex = r'(\\w+(\\s*\\w+)+\\s*\\w+)+\\s*\\w+'\n    # groups = re.findall(regex, text)\n    # print(", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\n\ndef find_char(string):\n    string = re.sub(r'[^\\w\\s]', '', string)\n    return re.findall(r'[\\w\\s]{1,3}', string)\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(string):\n    #Write your code here\n    return re.findall(r'[a-zA-Z]{3,5}', string)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(text):\n    return re.findall(r'[a-zA-Z]{3,5}', text)\n\n# find_char('For the four consumer complaints contact manager AKR reddy')\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(string):\n    #your code here\n    pass\n\ndef test_find_char():\n    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert find_char('I am going to school, and you are going to school, and we are going to school') == ['school', 'school', 'school']\n    assert find_char('When it is four o clock in the morning') == ['four', 'o', 'clock', 'morning']\n    assert find_char('When it is four-o-clock in the morning') == ['four', 'o', 'clock', 'morning']\n    assert find_char('The weather in the North is much colder than in the South') == ['North', 'South']\n    assert find_char('foo foo foo foo foo foo foo foo') == ['foo', 'foo', 'foo', 'foo', 'foo', 'foo', 'foo']\n    assert find_char('bar bar bar bar bar bar bar bar') == ['bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar']\n    assert find_char('baz baz baz baz baz baz baz') == ['baz', 'baz', 'baz', 'baz', 'baz', 'baz', 'baz']\n    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert find_char('4o clock in the morning') == ['four', 'o', 'clock', 'morning']\n    assert find_char('Four o clock in the morning') == ['four', 'o', 'clock', 'morning']\n    assert find_char('Four.O.clock.in.the.morning') == ['Four', 'O', 'clock', 'morning']\n    assert find_char('Four.O.clock-in.the.morning') == ['Four', 'O', 'clock',", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\ndef find_char(string):\n    return [word for word in re.split(r'(\\W+)', string) if len(word) in (3,4,5)]\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(string):\n    return re.findall(r'[a-zA-Z]{3,5}', string)\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\n# create a function\ndef find_char(text):\n    # return the result of regex expression\n    return re.findall('[a-zA-Z]{3,5}', text)\n\n# run the function"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n    return bin(num).count(\"1\")\n\n\ndef test_count_unset_bits():\n    assert count_unset_bits(2) == 1\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n: int) -> int:\n    return bin(n).count('1')\n\n\ndef count_unset_bits(n: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(10)\n    2\n    >>> count_unset_bits(1)\n    0\n    \"\"\"\n    return bin(n).count('1')\n\n\ndef count_unset_bits(n: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(10)\n    2\n    >>> count_unset_bits(1)\n    0\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(0)\n    0\n    \"\"\"\n    return bin(n).count('1')\n\n\ndef count_unset_bits(n: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(10)\n    2\n    >>> count_unset_bits(1)\n    0\n    >>> count_unset_bits(0)\n    0\n    \"\"\"\n    return bin(n).count('1')\n\n\ndef count_unset_bits(n: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(10)\n    2\n    >>> count_unset_bits(1)\n    0\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(0)\n    0\n    \"\"\"\n    return bin(n).count('1')\n\n\ndef count_unset_bits(n: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(10)\n    2\n    >>> count_unset_bits(1)\n    0\n    >>> count_unset_bits(0)\n    0\n    \"\"\"\n    return bin(n).count('1')\n\n\ndef count_unset_bits(n: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(10)\n    2\n    >>> count_unset_bits(1)\n    0\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(0)\n    0\n    \"\"\"\n    return bin(", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    \"\"\"\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(1)\n    0\n    >>> count_unset_bits(0)\n    0\n    \"\"\"\n    if n == 0:\n        return 0\n    return 32 - bin(n).count('1')\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(number):\n    return number.bit_length() - bin(number).count(\"1\")\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    return bin(n).count('1')\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\nimport pytest\n\nfrom src.bit_manipulation.count_unset_bits import count_unset_bits\n\n\ndef test_count_unset_bits_negative_number():\n    with pytest.raises(ValueError):\n        count_unset_bits(-1)\n\n\ndef test_count_unset_bits_zero():\n    assert count_unset_bits(0) == 0\n\n\ndef test_count_unset_bits_one():\n    assert count_unset_bits(1) == 0\n\n\ndef test_count_unset_bits_two():\n    assert count_unset_bits(2) == 1\n\n\ndef test_count_unset_bits_three():\n    assert count_unset_bits(3) == 2\n\n\ndef test_count_unset_bits_four():\n    assert count_unset_bits(4) == 1\n\n\ndef test_count_unset_bits_five():\n    assert count_unset_bits(5) == 0\n\n\ndef test_count_unset_bits_six():\n    assert count_unset_bits(6) == 1\n\n\ndef test_count_unset_bits_seven():\n    assert count_unset_bits(7) == 2\n\n\ndef test_count_unset_bits_eight():\n    assert count_unset_bits(8) == 1", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# Method 1:\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    \"\"\"\n    return bin(n).count(\"0\")\n\n\n# Method 2:\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    \"\"\"\n    return bin(n).count(\"0\")\n\n\n# Method 3:\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    \"\"\"\n    return bin(n).count(\"0\")\n\n\n# Method 4:\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    \"\"\"\n    return bin(n).count(\"0\")\n\n\n# Method 5:\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    \"\"\"\n    return bin(n).count(\"0\")\n\n\n# Method 6:\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    \"\"\"\n    return bin(n).count(\"0\")\n\n\n# Method 7:\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    \"\"\"\n    return bin(n).count(\"0\")\n\n\n# Method 8:\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    \"\"\"\n    return bin(n).count(\"0\")\n\n\n# Method 9:\n\n\ndef count_unset_bits(n):", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# +\ndef count_unset_bits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    # T:O(1). S:O(1).\n    \n    return bin(num).count('0')\n\n\n\n# -\n\n# ## 496. Next Greater Element I\n# https://leetcode.com/problems/next-greater-element-i/description/\n#\n# Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn\u2019t exist, output -1 for this number.\n#\n# Note: The length of given array won\u2019t exceed 10000.\n#\n# Example:\n#\n# Input: [1,2,1]\n# Output: [2,-1,2]\n# Explanation: The first 1's next greater number is 2;\n# The number 2 can't find next greater number;\n# The second 1's next greater number needs to search circularly, which is also 2.\n\n# +\ndef nextGreaterElement(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # T:O(N). S:O(N).\n    \n    res = [-1] * len(nums)\n    stack = []\n    for i in range(len(nums)):\n        while stack and nums[i] > nums[stack[-1]]:\n            tmp = stack.pop()\n            res[tmp] = nums[i]\n        stack.append(i)\n        \n    return res\n\n\n\n# -\n\n# ## 497. Random Point in Non-overlapping Rectangles\n# https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/description/\n#\n# Given n non-overlapping axis-aligned rectangles where n > 0, pick one at random, and return its left, top, right, and bottom", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    \"\"\"\n    Count the number of unset bits of n.\n\n    If n == 0:\n        return 0\n    else:\n        return the number of unset bits of n-1.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return count_unset_bits(n-1)\n\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(word):\n    \"\"\"\n    >>> char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    >>> char_frequency('Python') == {'P': 2, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    >>> char_frequency('pYTHON') == {'P': 2, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    >>> char_frequency('PYTHON') == {'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    \"\"\"\n    frequency = {}\n    for c in word:\n        if c not in frequency:\n            frequency[c] = 1\n        else:\n            frequency[c] += 1\n    return frequency\n\ndef test_char_frequency():\n    print(char_frequency('Python'))\n    print(char_frequency('python'))\n    print(char_frequency('Python'))\n    print(char_frequency('pYTHON'))\n    print(char_frequency('PYTHON'))", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    frequency = {}\n    for i in s:\n        frequency[i] = frequency.get(i, 0)+1\n    return frequency\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    \"\"\"\n    >>> char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    >>> char_frequency('Python')=={'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    >>> char_frequency('PYTHON')=={'P': 1, 'Y': 1, 'T': 1, 'H': 1, 'O': 1, 'N': 1}\n    True\n    >>> char_frequency('Python')=={'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    \"\"\"\n    result = dict()\n    for character in string:\n        if character in result:\n            result[character] += 1\n        else:\n            result[character] = 1\n    return result\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    \"\"\"\n    string: string to process\n    return: frequency of charcters in the string\n    \"\"\"\n    string = string.lower()\n    dictionary = {}\n    for character in string:\n        if character not in dictionary:\n            dictionary[character] = 1\n        else:\n            dictionary[character] += 1\n    return dictionary\n\ndef char_frequency_2(string):\n    \"\"\"\n    string: string to process\n    return: frequency of charcters in the string\n    \"\"\"\n    string = string.lower()\n    dictionary = {}\n    for character in string:\n        if character not in dictionary:\n            dictionary[character] = 0\n        dictionary[character] += 1\n    return dictionary\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\n# An alternative to using a dict\ndef char_frequency(string):\n    count_dict = {}\n    for char in string:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    return count_dict\n\ndef test_char_frequency():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert char_frequency('') == {}\n    assert char_frequency('hello') == {'h': 1, 'e': 1, 'l': 1, 'l': 1, 'o': 1}\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    d = {}\n    for c in string:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(str):\n\t\"\"\"\n\t# Create an empty dict.\n\t# Loop through the string.\n\t#   If char is not in dict, add it to dict with value 1.\n\t#   Else increment value of dict for that char.\n\t# Return the dict.\n\t\"\"\"\n\tdic = {}\n\n\tfor char in str:\n\t\tif char not in dic:\n\t\t\tdic[char] = 1\n\t\telse:\n\t\t\tdic[char] = dic[char] + 1\n\treturn dic\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(text):\n    return {char: text.count(char) for char in set(text)}\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(text):\n    \"\"\"\n    Uses a default dict to hold frequency of each letter in a string\n    :param text: text to be analyzed\n    :return: dict with keys as letters and values as frequency of each letter\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for letter in text:\n        freq_dict[letter] += 1\n    return freq_dict\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    return {c: string.count(c) for c in string}\n\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort(l):\n    def compare(a, b):\n        return a[1] - b[1]\n\n    return sorted(l, key=compare)\n\n\ndef main():\n    print(\"Test 1:\")\n    l = [['a', 10], ['b', 5], ['c', 20], ['d', 15]]\n    print(sort(l))\n    print(\"Test 2:\")\n    l = [1, 2, 3, 4, 5, 6, 7]\n    print(sort(l))\n\n\nmain()", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(L):\n    L.sort(key=lambda x: x[1])\n    return L\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\nfrom collections import defaultdict\n\ndef sort_by_2nd_ele(l):\n    \"\"\"\n    Sort a list according to the second element in sublist.\n    Args:\n        l(list): List of lists\n\n    Returns:\n        list: Sorted list\n    \"\"\"\n    d = defaultdict(list)\n    for x in l:\n        d[x[1]].append(x)\n    return sorted(d.items(), key=lambda x: x[0])\n\ndef test_sort_by_2nd_ele():\n    assert sort_by_2nd_ele([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef sort_sub_list_by_second(l):\n    # write your code here\n    return sorted(l, key = lambda x:x[1])", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef sort(x):\n    x.sort(key = lambda y: y[1])\n    return x\n\n# Tests", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort(list):\n    sorted_list = []\n    for i in list:\n        sorted_list.append(i[1])\n    return sorted(sorted_list)\n\ndef sort_list(l):\n    return sorted(l, key=lambda k: k[1])\n\ndef sort_list_func(l):\n    def key_func(i):\n        return i[1]\n    return sorted(l, key=key_func)\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef sort_list(l):\n    # insert sort here\n    sorted_list = sorted(l, key=lambda x: x[1])\n    return sorted_list\n\n\nl = [['a', 10], ['b', 5], ['c', 20], ['d', 15]]", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\n#Solution:\n# def Sort(l):\n#     l.sort(key=lambda x: x[1])\n#     return l\n\ndef Sort(l):\n    l.sort(key=lambda x: x[1])\n    return l", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(SubList):\n    sub_list = []\n    for l in SubList:\n        sub_list.append([l[0], l[1]])\n    sub_list.sort()\n    res = []\n    for l in sub_list:\n        res.append([l[1], l[0]])\n    return res"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n#Create a function that takes in the sides of the triangle and returns whether the triangle is valid or not.\ndef check_Validity(a,b,c):\n    a = a\n    b = b\n    c = c\n    #if the value of a, b and c are not equal then print the error message and return false.\n    if a == b == c:\n        print(\"Error: The sides cannot be equal\")\n        return False\n    #if the value of a, b and c are equal then print the error message and return false.\n    elif a == b == c:\n        print(\"Error: The sides cannot be equal\")\n        return False\n    #if the value of a, b and c are not equal and are not the sides of a triangle then print the error message and return false.\n    elif a+b < c or b+c < a or c+a < b:\n        print(\"Error: The sides are not the sides of a triangle\")\n        return False\n    #if the value of a, b and c are not equal and are the sides of a triangle then return true.\n    elif a+b == c or b+c == a or c+a == b:\n        return True\n    #else print the error message and return false.\n    else:\n        print(\"Error: The sides are not the sides of a triangle\")\n        return False\n#Test the function.", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    return(a+b>c and a+c>b and b+c>a)\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    # write your code here\n    if (a+b+c != 180):\n        return False\n    elif (a+b>c or a+c>b or b+c>a):\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\nfrom math import sqrt\ndef check_Validity(a,b,c):\n    if (a+b) < c and (a+c) < b and (b+c) < a:\n        if a == b == c:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if (a+b>c) and (a+c>b) and (b+c>a):\n        return True\n    else:\n        return False\n\n#Testing", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(s1,s2,s3):\n    if (s1+s2) > s3 and (s2+s3) > s1 and (s1+s3) > s2:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n# Defining a function to check the validity of a triangle\ndef check_Validity(a, b, c):\n    \n    if a + b > c and a + c > b and b + c > a:\n        print(\"This is a valid triangle\")\n    else:\n        print(\"This is not a valid triangle\")\n\n# Driver code\na = int(input())\nb = int(input())\nc = int(input())\n\ncheck_Validity(a, b, c)", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    # Write your code here\n    return ((a+b>c) and (a+c>b) and (b+c>a))\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n# Test cases\nt1 = (1,2,3)\nt2 = (2,3,4)\nt3 = (1,1,2)\nt4 = (1,2,3)\nt5 = (1,2,3)\n\n# Test 1"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,d):\n    return (b-a)*(b-a+d-1)//2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, b, n):\n    sum = 0\n    while n <= b:\n        sum += n\n        n += a\n    return sum\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(start,end,step):\n    return (end-start)*(end-start+1)/2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,n):\n    count = 0\n    for i in range(a,b+1,n):\n        count += i\n    return count\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,d):\n    return (b-a)//d*(a+d*(b-a)//d)\n\n# Test code", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(start,end,step):\n    res=0\n    while start<=end:\n        res+=start\n        start+=step\n    return res\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, n, d):\n    return (n*(a + (n-1)*d))/2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,n,d):\n    return (n*(a+(n-1)*d))//2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(start, end, step):\n    return (end - start) * (end - start + 1) / 2 + start * step\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, b, n):\n    \"\"\"\n    Calculates the sum of a arithmetic progression\n    \"\"\"\n    return (a + n * b) * (b - a) / (n - 1)\n\ndef ap_sum_naive(a, b, n):\n    \"\"\"\n    Calculates the sum of a arithmetic progression using a naive way\n    \"\"\"\n    return a + n * (b - a) / 2\n\ndef test_ap_sum():\n    assert ap_sum(1,5,2)==25\n    assert ap_sum_naive(1,5,2)==25\n\ndef test_ap_sum_naive():\n    assert ap_sum_naive(1,5,2)==25\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month in MONTH_NAMES_28:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(m):\n    \"\"\"\n    >>> check_monthnum(\"February\")==True\n    >>> check_monthnum(\"July\")==False\n    \"\"\"\n    if m == \"January\" or m == \"March\" or m == \"May\" or m == \"July\" or m == \"August\" or m == \"October\" or m == \"December\":\n        return False\n    return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(monthname):\n\tif monthname in MONTHS:\n\t\treturn (MONTHS.index(monthname)+1)%12==1\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\nassert check_monthnum(\"February\")==True", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\n# YOUR CODE HERE\ndef check_monthnum(month):\n    # YOUR CODE HERE\n    #month = \"February\"\n    m = month.title()\n    if m in ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']:\n        if m == \"January\":\n            return True\n        elif m == \"February\":\n            return False\n        elif m == \"March\":\n            return True\n        elif m == \"April\":\n            return True\n        elif m == \"May\":\n            return True\n        elif m == \"June\":\n            return True\n        elif m == \"July\":\n            return True\n        elif m == \"August\":\n            return True\n        elif m == \"September\":\n            return True\n        elif m == \"October\":\n            return False\n        elif m == \"November\":\n            return False\n        elif m == \"December\":\n            return False\n    else:\n        return False\n\n\n# Tests", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n    #print(len(month))\n    for i in range(len(months)):\n        if months[i] == month:\n            #print(i)\n            #print(len(months[i]))\n            if len(months[i]) == 3:\n                monthnum = months[i][0]\n            elif len(months[i]) == 2:\n                monthnum = months[i][0]\n            else:\n                monthnum = months[i][0:2]\n            if monthnum == \"01\" or monthnum == \"12\":\n                return True\n            if monthnum == \"02\" or monthnum == \"04\" or monthnum == \"06\" or monthnum == \"09\":\n                return False\n            elif monthnum == \"03\" or monthnum == \"05\" or monthnum == \"07\" or monthnum == \"08\" or monthnum == \"10\" or monthnum == \"11\":\n                return True\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month_name):\n    \"\"\"\n    Check month_name in a list and return true if it contains 28 days else False.\n    \"\"\"\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    if month_name.upper() in months:\n        if months.index(month_name.upper()) == 1:\n            return True\n        elif months.index(month_name.upper()) == 0:\n            return False\n        elif months.index(month_name.upper()) == 2 or months.index(month_name.upper()) == 4 or months.index(month_name.upper()) == 6 or months.index(month_name.upper()) == 9 or months.index(month_name.upper()) == 11:\n            return False\n        elif months.index(month_name.upper()) == 3 or months.index(month_name.upper()) == 5 or months.index(month_name.upper()) == 7 or months.index(month_name.upper()) == 8 or months.index(month_name.upper()) == 10:\n            return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    try:\n        if month == \"January\":\n            return True\n        elif month == \"February\":\n            return True\n        elif month == \"March\":\n            return False\n        elif month == \"April\":\n            return True\n        elif month == \"May\":\n            return True\n        elif month == \"June\":\n            return False\n        elif month == \"July\":\n            return True\n        elif month == \"August\":\n            return False\n        elif month == \"September\":\n            return True\n        elif month == \"October\":\n            return True\n        elif month == \"November\":\n            return True\n        elif month == \"December\":\n            return False\n        else:\n            raise ValueError(\"No such month\")\n    except ValueError:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    monthdict = {\"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":31, \"September\":30, \"October\":31, \"November\":30, \"December\":31}\n    if month in monthdict.keys():\n        return monthdict[month]\n    else:\n        raise ValueError(\"invalid month name\")\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == \"January\":\n        return 31\n    if month == \"February\":\n        return 28\n    if month == \"March\":\n        return 31\n    if month == \"April\":\n        return 30\n    if month == \"May\":\n        return 31\n    if month == \"June\":\n        return 30\n    if month == \"July\":\n        return 31\n    if month == \"August\":\n        return 31\n    if month == \"September\":\n        return 30\n    if month == \"October\":\n        return 31\n    if month == \"November\":\n        return 30\n    if month == \"December\":\n        return 31\n    else:\n        return False\n\n# do not change the code below this line"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, match_word, punctuation = \",.:;!?\"):\n    \"\"\"\n    Creates a function to check if a given word is at the end of a string.\n    \"\"\"\n    if text[-1] in match_word:\n        return f\"Found a match! ({text[-1]})\"\n    return \"Not found\"\n\ndef text_match_word(text, match_word, punctuation = \",.:;!?\"):\n    \"\"\"\n    Creates a function to check if a given word is at the end of a string.\n    \"\"\"\n    if text[-1] in match_word:\n        return f\"Found a match! ({text[-1]})\"\n    return \"Not found\"\n\n\ndef text_match_word(text, match_word, punctuation = \",.:;!?\"):\n    \"\"\"\n    Creates a function to check if a given word is at the end of a string.\n    \"\"\"\n    if text[-1] in match_word:\n        return f\"Found a match! ({text[-1]})\"\n    return \"Not found\"", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text, word, punctuation = False):\n    if word in text:\n        if punctuation:\n            return f'Found a match! \"{word}\" at the end of \"{text}\"'\n        else:\n            return f'Found a match! \"{word}\" at the end of \"{text}\"'\n    else:\n        return 'No match'\n\n# +\n# Your code here\n# -\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    return \"Found a match!\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    \"\"\"\n    Returns the last word in the provided string, with optional punctuation.\n    \"\"\"\n    text_split = text.split()\n    return \"Found a match!\" if len(text_split) >= 2 else \"Not a match.\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(string):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    string = string.lower()\n    return \"Found a match!\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, end=\".\"):\n    if text[-1]==end:\n        return \"Found a match!\"\n    else:\n        return \"Sorry, no match\"\n\n\n# Write a function that returns the contents of a text file.\n# assert file_contents(\"files/wordlist.txt\") == [\"cat\", \"dog\", \"python\"]", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(word, end=\".\"):\n    text = \"Hello there. This is some text. Just check out the new Wordle puzzle!\"\n    for i in range(len(text)-len(word)+1):\n        if text[i:i+len(word)] == word:\n            return f\"Found a match! {word}\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text, endchar=\".\"):\n    if len(text)<3:\n        return \"No match\"\n    else:\n        return \"Found a match!\"\ntext_match_word(\"python.\")\n\n# +\n#2. Invent a new method and write a program to test it.", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(word):\n    # TODO\n    # YOUR CODE HERE\n    raise NotImplementedError(\"text_match_word() not implemented\")\n\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    return \"Found a match!\" if text.endswith(\"python.\") else \"Did not find a match!\"\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    return len(set([str[i:i+2] for i in range(len(str)-1)]))\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    return len([i for i in range(len(str)) if str[i]==str[len(str)-1]])\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\n# Python3 program to count the number of\n# substrings with same first and last\n# characters\ndef count_Substring_With_Equal_Ends(str):\n\n    # Hash table to store the count of\n    # substrings\n    count = {}\n    # Iterate through the string\n    for i in range(len(str)):\n        # Get the last character\n        last_char = str[i]\n        # Add the last character and the\n        # count to the table\n        count[last_char] = count.get(last_char, 0) + 1\n\n    # Store the count of substrings with same first and last characters\n    n = 0\n    for i in range(len(str) - 1):\n        # Get the first character\n        first_char = str[i]\n        # Get the last character\n        last_char = str[i + 1]\n        # Check if the count is greater than zero\n        if count[first_char] > 0 and count[last_char] > 0:\n            # Update the count\n            n = n + count[first_char]\n\n        # Decrement the count\n        count[first_char] -= 1\n        count[last_char] -= 1\n\n    return n\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\n# initial solution\ndef count_Substring_With_Equal_Ends(text):\n    return len(set([text[i:i+4] for i in range(0, len(text) - 4)]))\n\n# test cases", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n# Recursive Method\n# Base Case: Two adjacent characters in string.\n# 1) First character is the same as the last character.\n# 2) There are no other characters in the string.\n# 3) Return 1.\n# Recursive step:\n# 1) Check the next character of the last character.\n# 2) If the current character is different from the previous character, return 0.\n# 3) Else if the current character is the same as the previous character, return 1 + count_Substring_With_Equal_Ends(next_character) + count_Substring_With_Equal_Ends(next_character + 1)\ndef count_Substring_With_Equal_Ends(string):\n    if len(string) == 0:\n        return 0\n    elif len(string) == 1:\n        return 1\n    elif string[0] != string[-1]:\n        return 0\n    else:\n        return 1 + count_Substring_With_Equal_Ends(string[1:]) + count_Substring_With_Equal_Ends(string[2:])\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    if len(s) <= 1:\n        return 0\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n\ndef count_Substring_With_Equal_Ends2(s):\n    return len(s) - len(set(s))\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    \"\"\"\n    Write a python function to count the number of substrings with same first and last characters\n    \"\"\"\n    # Your code goes here\n    temp_array = list(string)\n    temp_array.sort()\n    return temp_array.count(temp_array[0]) * 2\n\n\ndef test_count_Substring_With_Equal_Ends():\n    assert count_Substring_With_Equal_Ends('aba') == 4\n    assert count_Substring_With_Equal_Ends('aab') == 2\n    assert count_Substring_With_Equal_Ends('abc') == 1\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    for x in range(len(str) - 1):\n        if str[x] == str[len(str) - 1 - x]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n# LCOF\n\ndef count_Substring_With_Equal_Ends(word):\n    return len([s for s in word if s[0]==s[-1]])\n\n\n# test case"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start,end):\n    \"\"\"\n    Return the maximum divisor occuring in interval [start, end)\n    \"\"\"\n    # TODO: implement this function\n    # YOUR CODE HERE\n    raise NotImplementedError()", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a,b):\n    for n in range(a,b+1):\n        if b%n == 0:\n            return n\n    return 1\n\ndef test_find_Divisor():\n    assert find_Divisor(2,2) == 2", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(x,y):\n    if x == 1 or y == 1:\n        return 1\n    if x == 2 and y == 3:\n        return 2\n    if y == 1:\n        return x\n    if x % y == 0:\n        return y\n    return find_Divisor(x,y-1)\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a,b):\n\tans = 0\n\tfor i in range(a,b+1):\n\t\tif a%i == 0:\n\t\t\tans = i\n\treturn ans\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(lower, upper):\n    res = 0\n    for i in range(lower, upper + 1):\n        if i % res == 0:\n            res = i\n\n    return res\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a, b):\n    max_div = 1\n    for i in range(a,b+1):\n        for j in range(2,i+1):\n            if(i%j == 0):\n                if(j > max_div):\n                    max_div = j\n    return max_div\n\n# print(find_Divisor(2,2))\n# print(find_Divisor(10,30))", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(x,y):\n    for i in range(x+1,y+1):\n        if x % i == 0:\n            return i\n    return 1\n\n#print(find_Divisor(2,2))\n\n\n#print(max(map(find_Divisor, range(10))))\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a, b):\n    for i in range(a, b+1):\n        if b%i==0:\n            return i\n    return 0\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a,b):\n    if(a==b):\n        return a\n    i=a+1\n    while(i<=b):\n        if(a%i==0 and b%i==0):\n            return i\n        i+=1\n    return -1\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n\ta=int(a)\n\tb=int(b)\n\tfor i in range(a+1,b+1):\n\t\tif a%i == 0 and b%i == 0:\n\t\t\treturn i\n\treturn -1\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(lst):\n    return sum(lst[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(lst):\n    \"\"\"\n    :param lst: a list of numbers\n    :return: the sum of the three smallest numbers\n    \"\"\"\n    # Your code goes here\n    return sum(lst[0:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    return min(nums) + min(nums[1:]) + min(nums[2:])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    return sum(sorted(nums)[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(numbers):\n    numbers.sort()\n    return numbers[0] + numbers[1] + numbers[2]\n\ndef sum_three_smallest_nums(numbers):\n    return sum(numbers[0:3])\n\n\ndef sum_three_smallest_nums(numbers):\n    return reduce(lambda x,y: x + y, numbers[0:3])\n\n\ndef sum_three_smallest_nums(numbers):\n    return min(numbers) + min(numbers[1:]) + min(numbers[2:])\n\n\n# x = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n# print sum_three_smallest_nums(x)", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(numbers):\n    if numbers == []:\n        return 0\n    return sum(sorted(numbers[:3])[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(num_list):\n    \"\"\"\n    Returns the sum of the three smallest numbers in a list.\n\n    >>> sum_three_smallest_nums([10,20,30,40,50,60,7])\n    37\n    \"\"\"\n    return sum(sorted(num_list)[0:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(num_list):\n    # Your code here\n    return sum(num_list[0:3])", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(lst):\n    return sum(sorted(lst)[0:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\nfrom typing import Set\n\ndef set_to_tuple(set_to_convert: Set) -> tuple:\n    \"\"\"Returns a tuple of elements from given set\"\"\"\n    return tuple(set_to_convert)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(s)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nfrom typing import Set\n\ndef set_to_tuple(s: Set[int]) -> tuple:\n    \"\"\"Convert the given set into an ordered tuple.\"\"\"\n    return tuple(s)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_):\n    return tuple(set_)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(s)\n\ndef test_set_to_tuple():\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert set_to_tuple({1, 2, 3}) == (1, 2, 3)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# tests", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\nimport pytest\n\n\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n\ndef test_set_to_tuple():\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\n\ndef test_set_to_tuple_with_none():\n    with pytest.raises(TypeError):\n        set_to_tuple(None)", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\n# solution by:\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n\n# solution by:\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n\n# solution by:\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n\n# solution by:\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n\n# solution by:\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n\n# solution by:\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n\n# solution by:\ndef set_to_tuple(set_):\n    return tuple(set_)", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(S):\n    \"\"\"\n    :type S: set\n    :rtype: tuple\n    \"\"\"\n    return tuple(S)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n\ndef set_to_tuple_naive(set_):\n    # list(set_)\n    return tuple(set_)\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    # O(n^2) time | O(1) space\n    min1, max1, min2, max2 = float('inf'), float('-inf'), float('inf'), float('-inf')\n    for arr in arrays:\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                min1 = min(min1, arr[i] + arr[j])\n                max1 = max(max1, arr[i] + arr[j])\n                min2 = min(min2, arr[i] - arr[j])\n                max2 = max(max2, arr[i] - arr[j])\n    return min1, max1, min2, max2", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(array_list):\n    minimum = None\n    for i in range(len(array_list)):\n        for j in range(len(array_list)):\n            if i == j:\n                continue\n            if array_list[i][0] <= array_list[j][1]:\n                if minimum is None or array_list[i][0] < minimum:\n                    minimum = array_list[i][0]\n                if array_list[j][1] < minimum:\n                    minimum = array_list[j][1]\n    return minimum\n\n\ndef test_find_minimum_range():\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef find_minimum_range(arrays):\n    min_count = 0\n    min_start = None\n    min_end = None\n\n    for arr in arrays:\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] <= arr[j]:\n                    min_count = max(min_count, j - i + 1)\n                    min_start = min(min_start, arr[i])\n                    min_end = max(min_end, arr[j])\n\n    return min_start, min_end\n\n\ndef test_find_minimum_range():\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert find_minimum_range([[1, 15], [4, 4], [5, 7], [2, 3], [5, 6], [7, 11]]) == (1, 5)\n    assert find_minimum_range([[-1, 4], [-2, 2], [-3, 5], [0, 8], [1, 3]]) == (0, 8)\n\n\ndef test_find_minimum_range_ordered():\n    assert find_minimum_range_ordered([[1, 3, 4], [2, 4, 5]]) == (1, 3)\n    assert find_minimum_range_ordered([[1, 15], [4, 4], [5, 7], [2, 3], [5, 6], [7, 11]]) == (1, 5)\n    assert find_minimum_range_ordered([[3, 6, 8, 1", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arr_list):\n    return (min(arr), max(arr))\n\n\ndef test_find_minimum_range():\n    print(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]))\n\n\ndef test_find_minimum_range2():\n    print(find_minimum_range([[], []]))\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nfrom typing import List\n\ndef find_minimum_range(arrays: List[List[int]]) -> List[int]:\n    n = len(arrays)\n    if n == 0:\n        return None\n\n    l_min = arrays[0][0]\n    r_max = arrays[0][-1]\n\n    for array in arrays:\n        l_min = min(l_min, array[0])\n        r_max = max(r_max, array[-1])\n\n    return (l_min, r_max)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrays):\n    \"\"\"\n    Given two arrays of numbers return the lowest range that includes at-least one element from each of the two arrays.\n    \"\"\"\n    return sorted(arrays[0])[0], sorted(arrays[0])[-1]\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrays):\n    # list of tuples, each containing the index of the minimum value in the given array\n    min_vals = [(i, min(arrays[i])) for i in range(len(arrays))]\n    # store minimum value in a list\n    min_vals_list = [(i, min(arrays[i])) for i in range(len(arrays))]\n    # initial value of smallest range is min value of smallest element in arrays\n    min_range = min(min_vals_list)[1]\n    # loop through each array\n    for i in range(len(min_vals)):\n        # loop through each element in the array that is greater than min_range\n        for j in range(len(arrays[i])):\n            # if the current element in the array is greater than min_range, store the index and value\n            if arrays[i][j] > min_range:\n                min_vals_list[i] = (j, arrays[i][j])\n        # update min_range if the minimum value is greater than min_range\n        min_range = min(min_vals_list)[1]\n    # return the value of the minimum range and its corresponding index\n    return min_range, min_vals[min_vals_list.index(min_vals_list[0])]", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrs):\n    min = 10**9\n    max = 0\n    for i in range(len(arrs)):\n        start = arrs[i][0]\n        end = arrs[i][-1]\n        if start < min:\n            min = start\n        if end > max:\n            max = end\n    return (min, max)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom collections import defaultdict\n\n\ndef find_minimum_range(arrays):\n    \"\"\"\n    :type arrays: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    result = [0, 0]\n    for a in arrays:\n        result = list(max(a) - min(a) for a in zip(result, a))\n    return result\n\n\ndef find_minimum_range_using_defaultdict(arrays):\n    \"\"\"\n    :type arrays: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    result = [0, 0]\n    for a in arrays:\n        result = [max(a) - min(a), min(a), max(a)]\n    return result\n\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(w):\n    w = str(w)\n    num_letters = len(w)\n    num_digits = 0\n    for char in w:\n        if char.isalpha():\n            num_letters = num_letters - 1\n        else:\n            num_digits = num_digits + 1\n    return num_digits, num_letters\n\n#Test Case\nw = \"python\"", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(str):\n    return len(str),len(str.replace(' ',''))\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    d=0\n    l=0\n    for a in string:\n        if a.isalpha():\n            l+=1\n        else:\n            d+=1\n    return d,l\n\n\n# +\n#Calculate the number of vowels in a string", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(str1):\n    \"\"\"\n    :param str1: A string\n    :return: The number of digits and letters in the string\n    \"\"\"\n    return len(str1), len(str(str1))-len(str1)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    \"\"\"\n    Calculate the number of digits and letters in a string.\n    \"\"\"\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isalpha():\n            letters+=1\n        else:\n            digits+=1\n    return digits, letters\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    return len(s),len(list(filter(lambda x: x.isalpha(),s)))\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    \"\"\"\n    This function calculates the number of digits and letters in a string.\n    \"\"\"\n    num_of_dig = 0\n    num_of_let = 0\n    for char in string:\n        if char.isdigit():\n            num_of_dig+=1\n        else:\n            num_of_let+=1\n    return num_of_dig,num_of_let", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    return len(string),len([i for i in string if i.isalpha()])\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(word):\n    d,l=0,0\n    for x in word:\n        if x.isdigit():\n            d+=1\n        elif x.isalpha():\n            l+=1\n    return d,l\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(st):\n    lst = list(st)\n    letters = [x for x in lst if x.isalpha()]\n    digits = [x for x in lst if x.isdigit()]\n    return len(letters), len(digits)\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(low,high):\n    count=0\n    for i in range(low,high+1):\n        j=i\n        while j*j <=high:\n            if j%2==1:\n                count+=1\n            j+=1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(min, max):\n    lis = []\n    for i in range(min, max+1):\n        for j in range(i, max+1):\n            if j**2 > i:\n                break\n            if is_square(j):\n                lis.append(j)\n    lis = list(set(lis))\n    lis = [x for x in lis if is_odd(x)]\n    return len(lis)\n\ndef is_odd(num):\n    return num%2 != 0\n\ndef is_square(num):\n    return num%2 == 0 and num != 0 and num != 1", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(a,b):\n    \n    return 0\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(low, high):\n    sum = 0\n    for i in range(low, high + 1):\n        square = i**2\n        for j in range(2, int(square**0.5) + 1):\n            if i % j == 0:\n                sum += 1\n    return sum\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(lower_limit, upper_limit):\n    return upper_limit - lower_limit + 1\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(a,b):\n    \"\"\"\n    Counts number of elements with odd factors in a given range.\n    \"\"\"\n    res = 0\n    for i in range(a,b+1):\n        if prime_factors(i) != None:\n            if len(prime_factors(i)) % 2 == 1:\n                res+=1\n    return res\n\n# input 12, 100\n# output 8\n\n# input 13, 100\n# output 9\n\n# input 1, 100\n# output 0\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start,end):\n    count = 0\n    for i in range(start,end):\n        if (i % 4 == 0):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(a,b):\n    if a == b:\n        return 1\n    odd_sq = 0\n    for i in range(a,b+1):\n        if i%2 == 1:\n            for j in range(1,i):\n                if i%j == 0:\n                    odd_sq += 1\n    return odd_sq\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    \"\"\"\n    This method will count the number of elements with odd factors in a given range.\n    \"\"\"\n    output = 0\n    for i in range(start,end+1):\n        if is_Odd(i) and is_Square(i):\n            output += 1\n    return output\n\ndef is_Odd(num):\n    \"\"\"\n    This method will return True if num is an odd number else False.\n    \"\"\"\n    return num % 2 == 1\n\ndef is_Square(num):\n    \"\"\"\n    This method will return True if num is a square else False.\n    \"\"\"\n    return num == (num ** 0.5)\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(low,high):\n    #your code here\n    squares = []\n    for i in range(1,high):\n        if i**2 in squares:\n            pass\n        else:\n            squares.append(i**2)\n    count = 0\n    for i in range(low,high):\n        if i**2 in squares:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(lst):\n    last = 0\n    for el in lst:\n        yield last - el\n        last = el", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using sets\"\"\"\n    return list(set([nums[i]-nums[i-1] for i in range(1, len(nums))]))\n\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using itertools\"\"\"\n    return list(map(lambda x: nums[x]-nums[x-1], range(1, len(nums))))\n\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using itertools\"\"\"\n    return list(map(lambda x: nums[x+1]-nums[x], range(1, len(nums))))\n\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using map\"\"\"\n    return list(map(lambda x: nums[x]-nums[x-1], range(1, len(nums))))\n\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using list comprehensions\"\"\"\n    return [nums[i+1]-nums[i] for i in range(0, len(nums)-1)]\n\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using generators\"\"\"\n    return (nums[i+1]-nums[i] for i in range(0, len(nums)-1))\n\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using generator expressions\"\"\"\n    return (nums[i+1]-nums[i] for i in xrange(0, len(nums)-1))\n\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using comprehensions and itertools\"\"\"\n    return [nums[i+1]-nums[i] for i in itertools.count(start=0)]\n\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using list comprehensions and itertools\"\"\"\n    return [nums[i+1]-nums[i] for i in itertools.count(start=0, step=1)]\n\n\ndef diff_consecutivenums(nums):\n    \"\"\"Solution using", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    #solution 1:\n    #L=[num for num in nums]\n    #L.insert(0,0)\n    #L.append(0)\n    #return [L[i+1]-L[i] for i in range(len(L)-1)]\n\n    #solution 2:\n    return [num-L[i] for i, num in enumerate(nums)]\n    #return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(numbers):\n    diff_list = []\n    for number in numbers:\n        if number == numbers[0]:\n            diff_list.append(numbers[1] - numbers[0])\n        elif number == numbers[-1]:\n            diff_list.append(numbers[-1] - numbers[-2])\n        else:\n            diff_list.append(numbers[1] - numbers[0])\n    return diff_list\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(l):\n    return [item-item+1 for item in l]\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    \"\"\"\n    Simple solution to find consecutive numbers using a for loop.\n    Uses an empty list to hold the results.\n    \"\"\"\n    result = []\n\n    for i in range(len(nums) - 1):\n        result.append(nums[i+1] - nums[i])\n\n    return result\n\n# end::diff_consecutivenums[]", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(lst):\n    return [lst[i]-lst[i-1] for i in range(2, len(lst))]\n\n# Tests", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\n# Solution\ndef diff_consecutivenums(nums):\n    diff=[]\n    for i in range(len(nums)-1):\n        diff.append(nums[i+1]-nums[i])\n    return diff\n\n# Test Cases", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return [0]*len(nums)\n    nums_copy = nums.copy()\n    nums_copy.insert(0,0)\n    nums_copy.append(len(nums_copy))\n    nums_copy.sort()\n    nums_copy.append(nums_copy[-1] + 1)\n    out = []\n    for i in range(1,len(nums_copy)):\n        out.append(nums_copy[i] - nums_copy[i-1])\n    return out\n\n#print diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(l):\n    result = []\n    lastnum = l[0]\n    for num in l[1:]:\n        if num-lastnum != 1:\n            result.append(lastnum)\n        lastnum = num\n    result.append(lastnum)\n    return result\n\n\nl = [1, 1, 3, 4, 4, 5, 6, 7]"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if k == 0:\n        return 1\n    if n < k:\n        return zigzag(n + 1, k)\n    else:\n        return zigzag(n + 1, k - 1)\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    res = [1, 1, 2, 1, 3, 3, 3, 2, 4, 5, 5, 4, 3, 5, 6, 6, 6, 5, 4, 5, 6, 7, 7, 7, 6, 5, 7, 7, 8, 7, 8, 7, 7, 6, 7, 7, 7, 6, 5, 7, 8, 8, 8, 8, 8, 8, 7, 7, 6, 5, 4, 3, 2, 1, 1, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    # TODO: Your code here\n    return 1\n\n\ndef main():\n    print(zigzag(4, 3))\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    return (n * (n + 1)) // 2 + k\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\nfunction zigzag(n, k)\n    # TODO: Implement me\n    throw(\"No valid solution\")\nend\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    count = 1\n    for i in range(n // 2 + 1):\n        count = count * k\n    return count\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    return k * (n - 1) / 2\n\ndef zigzag_ent(n, k):\n    \"\"\"\n    Write a function to find entringer number e(n, k).\n    assert zigzag(4, 3) == 5\n    \"\"\"\n    if k > 2 * n or k < 0:\n        raise ValueError('k must be between 0 and 2*n')\n    if k == 0 or k == n:\n        return 1\n    if k == 1:\n        return n - 1\n    return zigzag(n, k)\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if n == 1:\n        return 1\n    else:\n        return zigzag(n-1, k-1) + zigzag(n-1, k)\n\ndef test():\n    assert zigzag(4, 3) == 5\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if k >= n:\n        return 1\n    elif k == 0:\n        return 1\n    else:\n        return zigzag(n - 1, k) + zigzag(n - 1, k - 1)\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    m = n//2\n    for i in range(m):\n        if i+k >= n:\n            return i\n    return i+k\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n, m):\n    \"\"\"\n    :param n: integer\n    :param m: integer\n    :return: integer\n    \"\"\"\n    return (m+1)*(n+1) - (2*n)*(m+1) - (2*m)*(n+1) + (m+1)*(n+1)\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(a,b):\n    return a * b * (a-1) * (b-1)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(h,w):\n    count = 0\n    for x in range(0,h):\n        for y in range(0,w):\n            if x==0 or y==0 or x==h-1 or y==w-1:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    return 2 * (n * m - m - n + 1)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a,b):\n    squares = 0\n    for x in range(a):\n        for y in range(b):\n            if x**2 + y**2 < a**2:\n                squares+=1\n    return squares\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(rows, columns):\n    \"\"\"\n    This function counts the number of squares in a rectangle using a nested loop.\n    Args:\n        rows: number of rows\n        columns: number of columns\n    Returns:\n        int: number of squares in a rectangle\n    \"\"\"\n    return int(rows*columns)\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(rows, columns):\n    num_squares = 0\n    for r in range(rows):\n        for c in range(columns):\n            if r == 0 or r == rows - 1 or c == 0 or c == columns - 1:\n                num_squares += 1\n            else:\n                num_squares += 1\n    return num_squares\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# Solution\ndef count_Squares(row, col):\n    def is_square(x, y):\n        return (x**2 + y**2) <= 1\n\n    ans = 0\n    for x in range(row):\n        for y in range(col):\n            if is_square(x, y):\n                ans += 1\n    return ans\n\n\n# Test Cases", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(rows,cols):\n    return rows*cols*4-rows*3-cols\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(r,c):\n    squares = 0\n    for x in range(0,r):\n        for y in range(0,c):\n            if x*x + y*y <= r*r:\n                squares += 1\n    return squares\n\ndef count_Squares(r,c):\n    return ((r+1)**2-4*(r*r))**0.5\n\ndef count_Squares(r,c):\n    s = 0\n    for x in range(0,r+1):\n        for y in range(0,c+1):\n            if x**2 + y**2 <= r*r:\n                s += 1\n    return s"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom typing import List, Tuple, Dict\n\n\ndef find_ways(length: int) -> int:\n    \"\"\"\n    Parameters\n    ----------\n    length : int\n\n    Returns\n    -------\n    int\n    \"\"\"\n    ways = defaultdict(int)\n    ways[0] = 1\n\n    for _ in range(1, length + 1):\n        ways[_] = sum(ways[_ - j] for j in range(1, _ + 1))\n    return ways[length]\n\n\ndef find_ways_optimized(length: int) -> int:\n    \"\"\"\n    Parameters\n    ----------\n    length : int\n\n    Returns\n    -------\n    int\n    \"\"\"\n    ways = defaultdict(int)\n    ways[0] = 1\n\n    for i in range(1, length + 1):\n        ways[i] = sum(ways[i - j] for j in range(1, i + 1))\n    return ways[length]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\n# Dynamic programming\ndef find_ways(n, arr):\n    cache = [[0] * (n + 1) for _ in range(len(arr) + 1)]\n    cache[0][0] = 1\n    for i in range(1, len(arr) + 1):\n        cache[i][0] = 1\n        for j in range(1, n + 1):\n            cache[i][j] = cache[i - 1][j] + cache[i - 1][j - arr[i - 1]]\n    return cache[len(arr)][n]\n\n\n# Recursion\ndef find_ways_1(n, arr):\n    def rec_helper(i, j):\n        if i == 0:\n            return 1 if j == 0 else 0\n        elif j == 0:\n            return 0\n        else:\n            return rec_helper(i - 1, j) + rec_helper(i - 1, j - arr[i - 1])\n\n    return rec_helper(len(arr), n)\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(num_sum, current_sum=0):\n    if current_sum >= num_sum:\n        return 1\n    else:\n        ways = 0\n        for i in range(num_sum + 1):\n            ways += find_ways(num_sum, current_sum + i)\n        return ways\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(length):\n    if length == 0:\n        return 0\n    if length == 1:\n        return 1\n    if length == 2:\n        return 2\n    if length == 3:\n        return 5\n    if length == 4:\n        return 14\n    if length == 5:\n        return 42\n    if length == 6:\n        return 132\n    if length == 7:\n        return 429\n    if length == 8:\n        return 1430\n    if length == 9:\n        return 4862\n    if length == 10:\n        return 16796\n    if length == 11:\n        return 58786\n    if length == 12:\n        return 208012\n    if length == 13:\n        return 674442\n    if length == 14:\n        return 2671450\n    if length == 15:\n        return 9009000\n    if length == 16:\n        return 35184000\n    if length == 17:\n        return 120740000\n    if length == 18:\n        return 467800000\n    if length == 19:\n        return 1795200000\n    if length == 20:\n        return 6800800000\n    if length == 21:\n        return 27601600000\n    if length == 22:\n        return 110406400000\n    if length == 23:\n        return 435225600000\n    if length == 24:\n        return 1656704000000\n    if length == 25:\n        return 6208016000000\n    if length == 26:\n        return 2482406400000", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n, values=[1, 2, 3, 4], memo={}):\n    \"\"\"\n    :type n: int\n    :type values: List[int]\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return len(values)\n\n    if n not in memo:\n        memo[n] = 0\n        for val in values:\n            memo[n] += find_ways(n-1, values, memo)\n\n    return memo[n]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    ways = [[] for _ in range(n+1)]\n    ways[0] = [[0]]\n    for i in range(1,n+1):\n        for j in range(0, i):\n            ways[i].append([])\n            for k in ways[j]:\n                for l in range(k+1, i+1):\n                    ways[i].append(k+[l])\n    return sum([len(ways[i]) for i in range(n+1)])\n\n\n#Solution 2\ndef find_ways(n):\n    ways = [[] for _ in range(n+1)]\n    ways[0] = [[0]]\n    for i in range(1, n+1):\n        for j in range(i-1, -1, -1):\n            ways[i].append([])\n            for k in ways[j]:\n                for l in range(k+1, i+1):\n                    ways[i].append(k+[l])\n    return sum([len(ways[i]) for i in range(n+1)])", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n, a = 1, b = 1, c = 1, d = 1):\n    memo = {}\n    memo[(0, 0, 0, 0)] = 1\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    def helper(n, a, b, c, d):\n        if (a, b, c, d) in memo:\n            return memo[(a, b, c, d)]\n        if n == 0:\n            memo[(a, b, c, d)] = 1\n        elif n == 1:\n            memo[(a, b, c, d)] = a + b + c + d\n        elif n == 2:\n            memo[(a, b, c, d)] = a * b + b * c + c * d + d * a\n        elif n == 3:\n            memo[(a, b, c, d)] = a * b * c + a * c * d + b * c * d + d * a * c\n        elif n == 4:\n            memo[(a, b, c, d)] = a * b * c * d\n        else:\n            memo[(a, b, c, d)] = a * b * c * d\n        return memo[(a, b, c, d)]\n\n    return helper(n, a, b, c, d)", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(n, items=[0, 1, 2, 3, 4, 5, 6, 7]):\n    def recursive_helper(n, idx, cache):\n        if n == 0:\n            return 1\n\n        if idx == len(items):\n            return 0\n\n        if n in cache:\n            return cache[n]\n\n        ways = recursive_helper(n - 1, idx, cache) + recursive_helper(n, idx + 1, cache)\n        cache[n] = ways\n        return ways\n\n    cache = {}\n    return recursive_helper(n, 0, cache)\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    def solve(n, n_ways, values, sums):\n        if n == 0:\n            return n_ways\n        if sums[n] != -1:\n            return n_ways\n        if n == len(values) and sums[n] == 0:\n            return n_ways + 1\n        for i in range(n + 1):\n            for v in values[n - i]:\n                solve(n - i, n_ways + 1, values, sums[:n] + [v - sums[n - i]])\n        return n_ways\n\n    if n < 0:\n        return -1\n    n_ways = 0\n    values = [[1, 1], [1, 2], [1, 3], [2, 3]]\n    sums = [-1] * n\n    return solve(n, n_ways, values, sums)", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n: int) -> int:\n    cache = [[1, 1, 2, 2], [1, 2, 2, 2]]\n    for i in range(4, n+1):\n        cache.append([0] + [1] + cache[-2][:-2])\n    return cache[n][-1]\n\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    return \"Yes\" if all(s[i] == s[i+1] for i in range(0, len(s)-1)) else \"No\"\n\n\n# Tests", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    if len(string) == 0:\n        return \"No\"\n    \n    for i in range(0, len(string), 1):\n        if (string[i] != '0' and string[i] != '1'):\n            return \"No\"\n    return \"Yes\"\n\n# This code is contributed by <NAME> (nickzuck_007)\n\n# This code is contributed by <NAME> (nickzuck_007)", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    #your code here\n    s = \"\".join(sorted(s))\n    if s[0] == \"0\":\n        return \"No\"\n    else:\n        return \"Yes\"\n\n# do not change the below line", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(n):\n    if n== \"\":\n        return \"No\"\n    i=0\n    while i<len(n):\n        if n[i]=='0':\n            i+=1\n        else:\n            if i!=len(n)-1:\n                if n[i]=='1':\n                    i+=1\n                else:\n                    return \"No\"\n            else:\n                return \"Yes\"\n    return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(str):\n    if str == \"\":\n        return \"Yes\"\n    if str[0] == '1' or str[0] == '0':\n        return check(str[1:])\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n# Set the length of the string\ndef check(str1):\n\n    # Initialize the result\n    result = \"No\"\n\n    # If the length of the string is even\n    if len(str1) % 2 == 0:\n\n        # Compute the sum of the string\n        sum = 0\n\n        # Iterate through all the characters\n        for i in range(len(str1)):\n\n            # Add each character in the string to the sum\n            sum += int(str1[i])\n\n        # If the sum is even\n        if sum % 2 == 0:\n\n            # Update the result\n            result = \"Yes\"\n\n    # Return the result\n    return result", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(binary_string):\n    # Your Code Here\n    # if not len(binary_string)%8 == 0:\n    #     return \"No\"\n    count_0 = 0\n    count_1 = 0\n    for x in binary_string:\n        if x == '0':\n            count_0 += 1\n        if x == '1':\n            count_1 += 1\n    if count_0 == count_1:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    if len(s) % 2 != 0:\n        return \"No\"\n    else:\n        for i in range(0,len(s)):\n            if s[i] != s[len(s)-1-i]:\n                return \"No\"\n    return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    count = 0\n    for c in string:\n        if c == \"0\" or c == \"1\":\n            count += 1\n    return \"Yes\" if count == len(string) else \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(str):\n    n = len(str)\n    for i in range(n):\n        if str[i] != '0' and str[i] != '1':\n            return \"No\"\n    return \"Yes\""], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(s):\n    # Write your code here\n    if s == \"\":\n        return 0\n    if len(s) == 1:\n        return 1\n    return len(s) - s.count(s[0])\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    res = float('inf')\n    for i in range(len(string)):\n        if string[i] in string[:i] and string[i] in string[i+1:]:\n            continue\n        tmp_res = i + 1\n        while i+1 < len(string) and string[i] == string[i+1]:\n            i += 1\n        tmp_res += i\n        if tmp_res < res:\n            res = tmp_res\n    return res\n\n\ndef test_min_Length():\n    assert minimum_Length(\"mnm\") == 1\n\n\ndef test_min_Length():\n    assert minimum_Length(\"rrrr\") == 4\n\n\ndef test_min_Length():\n    assert minimum_Length(\"aaaa\") == 1\n\n\ndef test_min_Length():\n    assert minimum_Length(\"abcd\") == 2\n\n\ndef test_min_Length():\n    assert minimum_Length(\"aabbccd\") == 5\n\n\ndef test_min_Length():\n    assert minimum_Length(\"a\") == 1", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n\tif string == \"\":\n\t\treturn 0\n\tlast = \"\"\n\tcount = 0\n\tfor i in string:\n\t\tif i != last:\n\t\t\tlast = i\n\t\t\tcount = 1\n\t\telse:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        new_string += string[i]\n        if new_string != string:\n            break\n    return len(new_string)\n\n\ndef is_empty_string(string):\n    return len(string) == 0\n\n\ndef is_repeated(string):\n    if len(string) == 0:\n        return False\n    count = 1\n    for i in range(len(string)):\n        if string[i] == string[i + 1]:\n            count += 1\n        else:\n            return False\n    return count > 1\n\n\ndef is_palindrome(string):\n    if len(string) < 2:\n        return True\n    if is_empty_string(string):\n        return False\n    for i in range(len(string)):\n        if string[i] != string[len(string) - i - 1]:\n            return False\n    return True\n\n\ndef is_palindrome_without_extra_spaces(string):\n    if len(string) < 2:\n        return True\n    if is_empty_string(string):\n        return False\n    for i in range(len(string)):\n        if string[i] != string[len(string) - i - 1]:\n            return False\n    return True\n\n\ndef is_palindrome_without_extra_spaces_and_punctuations(string):\n    if len(string) < 2:\n        return True\n    if is_empty_string(string):\n        return False\n    for i in range(len(string)):\n        if string[i] != string[len(string) - i - 1]:\n            if string[i] == \".\" or string[i] == \",\" or string[i] == \" \":\n                return False\n    return True\n\n\ndef reverse_string(string):\n    if is_empty_string(string):\n        return \"\"\n    if len(string) == 1:\n        return string\n    return reverse_string(string[1:]) + string[0]\n\n\ndef reverse_string_without_extra_spaces(string):\n    if is_empty_string(string):\n        return \"\"\n    if len(string", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(str):\n    return len(str) - str.count(str[0])", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\n# Time: O(n)\n# Space: O(n)\n\n\ndef minimum_Length(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n\n    # Set to store the min length of the string\n    min_len = len(s)\n\n    # Loop through the string\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] != s[j]:\n                # Check if the minimum length of the string is being updated\n                min_len = min(min_len, j - i)\n                break\n\n    return min_len\n\n\n# Tests", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s: str) -> int:\n    c = {}\n    for char in s:\n        c[char] = c.get(char, 0)+1\n\n    for i in range(1,len(s)):\n        if s[i] == s[i-1] and c[s[i-1]]==1:\n            del c[s[i-1]]\n    return len(c)\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    # Your code here\n    result = []\n    for i in range(1,len(s)-1):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                result.append([i,j])\n    result.sort(key= lambda x: len(s[x[0]:x[1]+1]))\n    return len(s[result[0][0]:result[0][1]+1])\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    if len(string) == 1:\n        return 1\n    if len(string) == 2:\n        return 2\n    return min([len(string)-1, (minimum_Length(string[:i])+minimum_Length(string[i+1:])) for i in range(len(string)-1)])\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    \"\"\"\n    This function returns the minimum length of string after removing\n    occurrence of only one character.\n    \"\"\"\n    occurence = 0\n    for char in string:\n        if string.count(char) == 1:\n            occurence += 1\n        else:\n            return len(string)\n    return len(string) - occurence\n\n\ndef minimum_Length(string):\n    \"\"\"\n    This function returns the minimum length of string after removing\n    occurrence of only one character.\n    \"\"\"\n    occurence = 0\n    unique_char = ''\n    for char in string:\n        if string.count(char) == 1:\n            unique_char = char\n            occurence += 1\n        else:\n            return len(string)\n    return len(string) - occurence\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(array,k,ele):\n\t\"\"\"\n\tfind the first element occurring k times in a given array.\n\tassert first_Element([0,1,2,3,4,5],6,1) == 0\n\t\"\"\"\n\tfor index,e in enumerate(array):\n\t\tif e == ele:\n\t\t\tcount = array.count(e)\n\t\t\tif count == k:\n\t\t\t\treturn e\n\treturn -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,n):\n    if n == 1:\n        return 0\n    result = []\n    for i in range(n):\n        result.append(arr[i])\n    if len(result) == k:\n        return arr[0]\n    else:\n        return first_Element(arr,k,n+1)\n        ", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n#Brute Force\ndef first_Element(A,k,n):\n    for i in range(0,len(A)):\n        if A[i] == n:\n            for j in range(0,k):\n                if A[i] == n:\n                    pass\n                else:\n                    return i\n\ndef first_Element(A,k,n):\n    i=0\n    for i in range(0,len(A)):\n        if A[i] == n:\n            if i==0:\n                return i\n            for j in range(0,k-1):\n                if A[i]==A[i-1]:\n                    i=i-1\n                else:\n                    return i\n    return i", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,n):\n    lst = list(arr)\n    dict = {}\n    for i in lst:\n        dict[i] = dict.get(i,0)+1\n    for key in dict:\n        if dict[key] == k:\n            return key\n    return n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(list,k,element):\n    i = 0\n    count = 0\n    while count < k:\n        if list[i] == element:\n            count = count + 1\n        i = i + 1\n    return i\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\n#mycode\ndef first_Element(arr, n, k):\n    for i in range(n):\n        if arr.count(arr[i]) == k:\n            return arr[i]\n\n\n#answer\ndef first_Element(arr, n, k):\n    return next(x[1] for x in itertools.groupby(enumerate(arr), lambda x: x[0] - x[1]) if len(list(x)) == k)", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, n, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if n < k:\n        return \"Array is not large enough.\"\n    else:\n        count = 0\n        for element in arr:\n            if count == k:\n                return element\n            else:\n                count += 1", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k):\n    if(len(arr) == 0):\n        return \"Array is empty\"\n    elif(len(arr) == 1):\n        return arr[0]\n    elif(k == 0):\n        return \"Array does not contain any duplicate elements\"\n    else:\n        a = 0\n        b = 0\n        for i in range(0, len(arr)):\n            if(a == 0):\n                a = arr[i]\n            if(a == arr[i]):\n                b = b + 1\n                if(b == k):\n                    return a\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k, c):\n    for num in arr:\n        if arr.count(num) == k:\n            return num\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,num):\n    a = len(arr)\n    b = 0\n    while b < k:\n        if arr[b]==num:\n            return b\n        b += 1\n    return -1"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    return len(string) == len(set(string))\n\n#print unique_Characters(\"aba\")\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n#def unique_Characters(str):\n#    if len(str) > 0:\n#        if len(set(str)) == len(str):\n#            return True\n#    return False\n\ndef unique_Characters(str):\n    if len(str) > 0:\n        if len(str.replace(' ', '')) == len(str):\n            return True\n    return False\n\n\ndef check_if_unique_characters_exist(string):\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            return False\n    return True\n\ndef check_if_all_characters_are_unique(string):\n    if len(string) > 0:\n        if len(set(string)) == len(string):\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    dict = {}\n    for character in string:\n        if character in dict:\n            return False\n        else:\n            dict[character] = True\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    return len(list(set(string))) == len(string)\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    string = list(string)\n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            return False\n    return True\n\n\n# +", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n\t'''\n\t'''\n\tif len(string) <= 1:\n\t\treturn True\n\telse:\n\t\tchars = set(string)\n\t\treturn len(chars) == len(string)\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    count = {}\n    for character in string:\n        if character in count:\n            return False\n        else:\n            count[character] = True\n    return True\n\n\n# Tests", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    s=set()\n    for c in string:\n        if c not in s:\n            s.add(c)\n    return True if len(s)==len(string) else False\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            return False\n    return True\n\n\ndef unique_Characters(string):\n    return len(set(string)) == len(string)\n\ndef unique_Characters(string):\n    return len(set(string)) == len(string)\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    dict = {}\n    for letter in string:\n        if letter in dict.keys():\n            return False\n        dict[letter] = 1\n    return True\n\n\ndef unique_Characters_optimized(string):\n    unique = 0\n    for letter in string:\n        if string.count(letter) == 1:\n            unique = unique + 1\n    return unique == len(string)\n\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list,column):\n    \"\"\"Takes a list of lists and removes the specified column\"\"\"\n    new_nested_list=[]\n    for list_item in nested_list:\n        new_nested_list.append(list_item[:column]+list_item[column+1:])\n    return new_nested_list\n# Test", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, index):\n    \"\"\"\n    :param nested_list: a nested list.\n    :param index: an integer representing the index of the column to remove.\n    :return: a list without the specified column.\n    \"\"\"\n    return [row[:index] + row[index+1:] for row in nested_list]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, index):\n    return [row[:index] + row[index+1:] for row in nested_list]\n\n# Alternative:\n# def remove_column(nested_list, index):\n#     return [[row[0]] + row[index+1:] for row in nested_list]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, column):\n    return [row[:column]+row[column+1:] for row in nested_list]\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(list_of_lists, column):\n    return [row[:column] + row[column+1:] for row in list_of_lists]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(m, col):\n    res = []\n    for i in range(len(m)):\n        res.append([val[col] for val in m[i]])\n    return res\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, column):\n    new_list = [item[:] for item in nested_list]\n    for i in range(0, len(nested_list)):\n        del new_list[i][column]\n    return new_list\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, n):\n    return [sublist[n:] for sublist in nested_list]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, column_number):\n    \"\"\"\n    Write a function to remove a specified column from a given nested list.\n    \"\"\"\n    if len(nested_list) == 0:\n        return nested_list\n    return [remove_column(row, column_number) for row in nested_list] if len(nested_list[0]) > column_number else nested_list\n\n\ndef test_remove_column():\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0) == [[2, 3], [4, 5], [1, 1]]\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, index):\n    # your code here\n    return [[i[index] for i in nested_list] for i in nested_list]\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,n,d):\n    if n==0:\n        return 0\n    elif n==1:\n        return a\n    else:\n        return tn_ap(a+d,n-1,d)\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a, n, m):\n    a_term = n\n    result = m*a_term\n    for i in range(1,n):\n        a_term += m\n        result += a_term\n    return result\n\n#Test cases", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,n,d):\n    return (a + (d*(n-1)))\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(x,n,d):\n    \"\"\"\n    Find t-nth term of arithemetic progression.\n    Args:\n        x: int\n        n: int\n        d: int\n    Returns:\n        int\n    \"\"\"\n    assert n>0 and d>0\n    return (x*d**(n-1))%1000000007\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a, b, n):\n    # p = a + (n-1)*d\n    # q = a + (n-2)*d\n    # r = a + (n-3)*d\n    # s = a + (n-4)*d\n    d = (b - a) / n\n    s = a + n*d - d\n    p = a + (n-1)*d\n    q = a + (n-2)*d\n    r = a + (n-3)*d\n    return min(s, min(p, min(q, r)))\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,n,d):\n    return a+d*(n-1)\n\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,b,n):\n    if n==0:\n        return 0\n    if n==1:\n        return b\n    else:\n        return (a+(n-1)*b)\n\ndef test_tn_ap():\n    assert tn_ap(1,5,2)==9\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,n,d):\n    if n<=1:\n        return a\n    return a + d*(tn_ap(a+d,n-1,d))\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(start, stop, n):\n    \"\"\"\n    Returns t-nth term of arithemetic progression\n    \"\"\"\n    return start + (n - 1) * (stop - start)\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(x, n, t):\n    # TODO: Write your code here\n    if t==0:\n        return x\n    elif t==1:\n        return x+n\n    else:\n        return tn_ap(x+n,n,t-1)\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    \"\"\"\n    Count number of rectangles in circle of radius r.\n    \n    Params:\n        r - radius of circle\n\n    Return:\n        count of rectangles in circle of radius r\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(radius):\n    result = 0\n    for i in range(radius):\n        for j in range(radius):\n            result += 1\n    return result\n\ndef test_count_Rectangles():\n    assert count_Rectangles(2) == 8", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    n = r*r\n    return ((n + 1)*(r*r - n) // 2)\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(radius):\n    '''\n    >>> count_Rectangles(2)\n    8\n    '''\n    return 2*radius+1\n\n#x = input(\"Enter the number: \")\n#print(\"The number of rectangles is\", count_Rectangles(int(x)))", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(radius):\n    count = 0\n    for i in range(2*radius+1):\n        for j in range(2*radius+1):\n            if i**2+j**2 <= radius**2:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\nimport math\n\n\ndef count_Rectangles(radius):\n    \"\"\"\n    :param radius: radius of circle\n    :return: number of rectangles\n    \"\"\"\n    if radius < 0:\n        raise ValueError('radius should be a positive integer')\n    return 2 * radius * radius + 1\n\n\ndef main():\n    assert count_Rectangles(2) == 8\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    \"\"\"\n    count the number of rectangles in a circle of radius r\n    :param r: radius of circle\n    :return: integer\n    \"\"\"\n    if r < 1:\n        raise Exception(\"radius should be greater than or equal to 1\")\n\n    count = 0\n\n    for x in range(r):\n        for y in range(r):\n            count += 1\n\n    return count\n\n\n# Test cases", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nfrom functools import lru_cache\n\n\ndef count_Rectangles(r):\n    \"\"\"\n    Count the number of rectangles in a circle of radius r\n    \"\"\"\n    return lru_cache(None)(count_Rectangles_rec)(r)\n\n\n@lru_cache(None)\ndef count_Rectangles_rec(r):\n    if r == 0:\n        return 1\n    if r == 1:\n        return 4\n    return count_Rectangles_rec(r - 1) + count_Rectangles_rec(r - 2) + 4 * count_Rectangles_rec(r - 3)", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\nfrom typing import List\n\ndef count_Rectangles(r: int) -> int:\n    pass\n\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1,angle2):\n    return 180-angle1-angle2\n\n# Test Code", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1,angle2):\n    # code here\n    if angle1 > 180:\n        angle1 = angle1 - 360\n    if angle2 > 180:\n        angle2 = angle2 - 360\n    angle1 = angle1 % 360\n    angle2 = angle2 % 360\n    if angle1 == angle2:\n        return 0\n    if angle1 == 0 or angle1 == 180:\n        return angle2 % 360\n    if angle2 == 0 or angle2 == 180:\n        return (180-angle1) % 360\n    if angle1 < angle2:\n        return 360 - (angle1-angle2) % 360\n    return angle1 + (360 - angle2) % 360\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1, angle2):\n    angle = 180 - angle1 - angle2\n    return angle\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle_1,angle_2):\n    angle_1=float(angle_1)\n    angle_2=float(angle_2)\n    angle_3=(180-angle_1-angle_2)%180\n    return angle_3\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n    return 180 - ((a+b) / 2)\n\ndef test_angle_finder():\n    assert find_angle(47,89)==44\n    assert find_angle(89,47)==44\n    assert find_angle(47,47)==180\n    assert find_angle(90,90)==90\n    assert find_angle(90,180)==180\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1, angle2):\n    return angle1 + angle2 - 90\n\n\n# +", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1, angle2):\n    angle = angle1 + angle2 - 90\n    return angle\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n    # First, you have to compute the length of the opposite\n    hypot = (a**2 + b**2)**0.5\n    # Then you have to compute the length of the adjacent\n    adj = (a**2 + b**2 - hypot**2)**0.5\n    # Finally, you have to compute the angle\n    return 180 * ((a**2 + b**2 - adj**2)/(2 * hypot * adj)) ** 0.5\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1, angle2):\n    #     Your code here\n    \"\"\"\n    \n    \"\"\"\n    angle3=180-angle1-angle2\n    return angle3\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    if a==b:\n        return 90\n    else:\n        try:\n            c = math.acos((a*a+b*b-4*a*b)/(2*a*b))\n            return math.degrees(c)\n        except:\n            return \"Error\"\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    \"\"\"\n    Note that you can use the \"in\" operator for this task:\n        if 8 in records:\n        print(\"The 8 is here\")\n\n    >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n    10\n    \"\"\"\n    print(records)\n    max = None\n    for record in records:\n        if max is None or record[0] > max:\n            max = record[0]\n    return max\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(tuple_records):\n    \"\"\"\n    Find the maximum element from the given tuple records\n    \"\"\"\n    return max(tuple_records, key=lambda x: x[1])[1]\n\n\ndef test_find_max():\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    \"\"\"\n    Given a list of tuples (x, y)\n    find the maximum of y\n    \"\"\"\n    max_y = 0\n    for x, y in records:\n        if y > max_y:\n            max_y = y\n\n    return max_y\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    \"\"\"Write your code here\"\"\"\n    return max([record[1] for record in records])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(t):\n    # write your code here\n    # sort tuple by 1st value\n    # return tuple[0]\n    # this sorts by the first index of the tuple, then by the second\n    return max(t, key=lambda x:x[0])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    # Sort the records by the second value, then return the first.\n    records.sort(key=itemgetter(1), reverse=True)\n    return records[0][1]\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    if not records:\n        return None\n    elif not isinstance(records[0], tuple):\n        return records[0]\n    else:\n        return max(find_max(list(r[0] for r in records)), find_max(list(r[1] for r in records)))\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    \"\"\"\n    :param records: A list of tuples\n    :return: The max value of a tuple in the list\n    \"\"\"\n    return max(records, key=lambda record: record[1])[1]\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(tuples):\n    \"\"\"\n    >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n    10\n    \"\"\"\n    # Your code goes here\n\n# TODO: Your code goes here", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(tuple_records):\n    try:\n        return max(map(lambda x: x[1], tuple_records))\n    except ValueError:\n        return None\n\n\ndef find_max_list(tuple_records):\n    \"\"\"\n    Don't know why, but using reduce to get the maximum element of list of tuples\n    was taking too much time\n    \"\"\"\n    def get_max(tup):\n        return max(map(lambda x: x[1], tup))\n\n    return reduce(get_max, tuple_records, None)\n\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(x, y):\n    return list(map(lambda x, y: x % y, x, y))", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(L1, L2):\n    return [lambda x, y: x % y if y != 0 else 0 for x, y in zip(L1, L2)]\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(lst1, lst2):\n\treturn list(map(lambda x,y:x%y, lst1, lst2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(lst, lst2):\n    return map(lambda x,y: x%y,lst, lst2)", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(X,Y):\n    res = []\n    for x,y in zip(X,Y):\n        res.append(x%y)\n    return res\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(A, B):\n    return list(map(lambda x,y: x%y,A,B))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(L1,L2):\n    return list(map(lambda x:x%L2[0],L1))\n\n\ndef test_moddiv_list():\n    assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a,b):\n    c = map(lambda x,y: x%y, a,b)\n    return list(c)", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a, b):\n    # your code goes here\n    return list(map(lambda x, y: x%y, a, b))\n\n# print(moddiv_list([4,5,6],[1, 2, 3]))", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(x,y):\n    return [x[i]%y[i] for i in range(len(x))]"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n# function to check whether one root of the quadratic equation is twice of the other or not\ndef Check_Solution(a,b,c):\n    \n    x1 = (-b + sqrt(b**2 - 4*a*c))/(2*a)\n    x2 = (-b - sqrt(b**2 - 4*a*c))/(2*a)\n    \n    return \"Yes\" if ((x1 - 2*x2)**2) == 0 else \"No\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    d = b**2-4*a*c\n    if d < 0:\n        return \"No\"\n    elif d == 0:\n        return \"Yes\"\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return \"Yes\" if x1==x2 else \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(A,B,C):\n    \"\"\"\n    Returns 'Yes' if root2=2root1\n    \"\"\"\n    if (B**2-4*A*C) == 0:\n        root1 = (-B+(B**2-4*A*C)**0.5) / (2*A)\n        root2 = (-B-(B**2-4*A*C)**0.5) / (2*A)\n        if root1 == root2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\n# Example\n#", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    \"\"\"\n    input: a,b,c are constants in the quadratic equation\n    return: \"No\" if both roots are different from each other\n    else return \"Yes\"\n    \"\"\"\n    discriminant = (b**2)-(4*a*c)\n    if discriminant > 0:\n        x1 = (-b+discriminant**0.5)/(2*a)\n        x2 = (-b-discriminant**0.5)/(2*a)\n        return \"Yes\"\n    elif discriminant == 0:\n        return \"No\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    try:\n        if (b*b-4*a*c)>=0:\n            D = -b+sqrt(b*b-4*a*c)\n            return \"Yes\" if D%2 else \"No\"\n        return \"No\"\n    except ValueError:\n        return \"No\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n#this method is not for production use as it is a very bad approach\ndef Check_Solution(a,b,c):\n    check = b ** 2 - 4 * a * c\n    if(check >= 0):\n        return \"Yes\"\n    elif(check < 0):\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n#1 \ndef Check_Solution(a,b,c):\n    if a==b:\n        return \"No\"\n    elif a==b:\n        return \"No\"\n    else:\n        delta = b**2-4*a*c\n        if delta < 0:\n            return \"No\"\n        elif delta == 0:\n            return \"Yes\"\n        elif delta > 0:\n            return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    if a**2 - 4*b*c < 0:\n        print(\"No\")\n    elif a**2 - 4*b*c == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n\tif ((b*b)-4*a*c) >= 0:\n\t\treturn \"Yes\"\n\telse:\n\t\treturn \"No\"\n"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    return n*(n+1)//2\n\n\ndef get_carol(n):\n    return n*(n+1)//2\n\n\ndef get_carol(n):\n    return n*(n+1)//2\n\n\ndef get_carol(n):\n    return n*(n+1)//2\n\n\ndef get_carol(n):\n    return n*(n+1)//2\n\n\ndef get_carol(n):\n    return n*(n+1)//2\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    # first carol number is 1\n    if n == 1:\n        return 1\n\n    # carol number is calculated from previous carol number\n    # first carol is 1, second is 5, third is 7, fourth is 11\n    return 4 * get_carol(n-1) + 1\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    result = 0\n    for i in range(n):\n        result = result + get_carol(result)\n    return result\n\ndef test_get_carol():\n    assert get_carol(2) == 7\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    result = 0\n    if n <= 0:\n        return 0\n    for i in range(1, n+1):\n        result += i\n    return result\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\nimport math\n\ndef get_carol(n: int) -> int:\n    if n == 0:\n        return 0\n\n    n -= 1\n    return math.floor(n / 7) + get_carol(n % 7)\n\n\n# TESTS", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\nfrom itertools import count\n\ndef get_carol(n):\n    return sum(\n        int(i) * (2 ** (n-1)) + (2 ** n) for i in\n        str(int(pow(2, n) - 1))[:len(str(pow(2, n) - 1))]\n    )\n\ndef test_get_carol():\n    assert get_carol(2) == 7", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    result = 1\n    for i in range(1, n+1):\n        result = (result + i)\n    return result\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    return (2 * n - 1) * n / 2\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n: int) -> int:\n    return 7\n\ndef get_carol_2(n: int) -> int:\n    return 7\n\ndef get_carol_3(n: int) -> int:\n    return 7\n\ndef get_carol_4(n: int) -> int:\n    return 7\n\ndef get_carol_5(n: int) -> int:\n    return 7\n\ndef get_carol_6(n: int) -> int:\n    return 7\n\ndef get_carol_7(n: int) -> int:\n    return 7\n\ndef get_carol_8(n: int) -> int:\n    return 7\n\ndef get_carol_9(n: int) -> int:\n    return 7\n\ndef get_carol_10(n: int) -> int:\n    return 7\n\ndef get_carol_11(n: int) -> int:\n    return 7\n\ndef get_carol_12(n: int) -> int:\n    return 7\n\ndef get_carol_13(n: int) -> int:\n    return 7\n\ndef get_carol_14(n: int) -> int:\n    return 7\n\ndef get_carol_15(n: int) -> int:\n    return 7\n\ndef get_carol_16(n: int) -> int:\n    return 7\n\ndef get_carol_17(n: int) -> int:\n    return 7\n\ndef get_carol_18(n: int) -> int:\n    return 7\n\ndef get_carol_19(n: int) -> int:\n    return 7\n\ndef get_carol_20(n: int) -> int:\n    return 7\n\ndef get_carol_21(n: int) -> int:\n    return 7\n\ndef get_carol_22(n: int) -> int:\n    return 7\n\ndef get_carol_23(", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    n = int(n)\n    return int(n * (3 * (1 - 1/3**n) - 1))\n\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(my_list):\n    final_list = []\n    for x in my_list:\n        if x:\n            final_list.append(x)\n    return final_list\n\n\n# +", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    res = []\n    for item in lst:\n        if len(item)>0:\n            res.append(item)\n    return res\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n# Method 1\n# Time Complexity: O(n*m)\n# Space Complexity: O(n)\ndef remove_empty(lst):\n    res = []\n    for e in lst:\n        if not e:\n            continue\n        res.append(e)\n    return res\n\n# Method 2\n# Time Complexity: O(n*m)\n# Space Complexity: O(m)\ndef remove_empty(lst):\n    res = []\n    for e in lst:\n        if len(e)>0:\n            res.append(e)\n    return res\n\n# Method 3\n# Time Complexity: O(n*m)\n# Space Complexity: O(m)\ndef remove_empty(lst):\n    res = []\n    for e in lst:\n        if e:\n            res.append(e)\n    return res\n\n# Method 4\n# Time Complexity: O(n*m)\n# Space Complexity: O(m)\ndef remove_empty(lst):\n    res = []\n    for e in lst:\n        if e is not None:\n            res.append(e)\n    return res\n\n# Method 5\n# Time Complexity: O(n*m)\n# Space Complexity: O(n)\ndef remove_empty(lst):\n    res = []\n    for e in lst:\n        if len(e) > 0:\n            res.append(e)\n    return res\n\n# Method 6\n# Time Complexity: O(n*m)\n# Space Complexity: O(m)\ndef remove_empty(lst):\n    return [i for i in lst if i is not None]\n\n# Method 7\n# Time Complexity: O(n*m)\n# Space Complexity: O(m)\ndef remove_empty(lst):\n    return [x for x in lst if x != None]\n\n# Method 8\n# Time Complexity: O(n*m)\n# Space Complexity: O(m)\ndef remove_empty(lst):\n    return", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n# Use a set to remove any duplicate elements\n# Replace the empty lists with None\ndef remove_empty(lst):\n  lst = list(set(lst))\n  for i in range(len(lst)):\n    if not lst[i]:\n      lst.remove(lst[i])\n  return lst\n\n# Test", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    result = []\n    for i in lst:\n        if i:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(l):\n    \"\"\"\n    l: a list of lists\n    return: a list of lists with empty list removed\n    \"\"\"\n    return [x for x in l if x != []]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    return [x for x in lst if x]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    result = []\n    for element in lst:\n        if type(element) != list:\n            result.append(element)\n        else:\n            if len(element) != 0:\n                result.append(element)\n    return result", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(L):\n    return [x for x in L if len(x) != 0]\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(L):\n    return [x for x in L if x]\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(values):\n    from collections import defaultdict\n    occurences = defaultdict(int)\n    for val in values:\n        occurences[val] += 1\n    return occurences.max()\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(list):\n    \"\"\"\n    Return the item that has maximum occurrences\n    \"\"\"\n    # store the max item occurrences and its index\n    max_item_index = None\n    max_item_occurrences = 0\n    \n    for index, item in enumerate(list):\n        if list.count(item) > max_item_occurrences:\n            max_item_index = index\n            max_item_occurrences = list.count(item)\n    \n    return list[max_item_index]", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(l):\n    occ = 0\n    max_index = 0\n    for i in range(len(l)):\n        if l[i] in l[:i]:\n            occ += 1\n        if occ > occ:\n            max_index = i\n            occ = 1\n    return l[max_index]\n\ndef max_occurrences(l):\n    max = 0\n    max_index = 0\n    for i in range(len(l)):\n        if l[i] in l[:i]:\n            if l[i] == l[max_index]:\n                max_index += 1\n            if l[i] > l[max]:\n                max_index = i\n                max = l[i]\n    return max\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(list_):\n    \"\"\"\n    Write a python function to find the item with maximum occurrences in a given list.\n    \"\"\"\n    dict_ = {}\n    for item in list_:\n        if item in dict_.keys():\n            dict_[item] += 1\n        else:\n            dict_[item] = 1\n    return dict_.max()\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    occs = {}\n    max_occ = -1\n    for i in lst:\n        if i not in occs:\n            occs[i] = 1\n        else:\n            occs[i] += 1\n        if occs[i] > max_occ:\n            max_occ = occs[i]\n    return max_occ\n\ndef test_max_occurrences():\n    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    count_dict = dict()\n    for item in lst:\n        count = count_dict.setdefault(item,0) + 1\n        count_dict[item] = count\n    max_count = max(count_dict.values())\n    for k, v in count_dict.items():\n        if v == max_count:\n            return k\n    return None\n\n\n# test code", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(items):\n    return max(items, key=items.count)\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(ls):\n    \"\"\"\n    >>> max_occurrences([1,2,3,1,2,3,12,4,2])\n    2\n    >>> max_occurrences([2,3,1,1,2,3,12,4,2])\n    3\n    >>> max_occurrences([2,1,1,1,2,3,12,4,2])\n    3\n    >>> max_occurrences([2,2,3,1,1,2,3,12,4,2])\n    3\n    >>> max_occurrences([1,2,1,3,1,2,3,12,4,2])\n    3\n    >>> max_occurrences([1,2,1,2,3,1,2,3,12,4,2])\n    3\n    >>> max_occurrences([1,2,1,1,2,3,1,2,3,12,4,2])\n    3\n    >>> max_occurrences([2,1,1,1,2,3,2,2,3,12,4,2])\n    3\n    >>> max_occurrences([2,2,3,1,1,2,3,4,2,12,4,2])\n    3\n    >>> max_occurrences([2,2,3,1,1,2,3,12,4,2,12,4])\n    3\n    >>> max_occurrences([2,2,3,1,1,2,3,12,4,2,2])\n    3\n    >>> max_occurrences([2,2,3,1,1,2,3,12,4,2,4])\n    3\n    >>> max_occurrences([2,2,3,1,1,2,3,12,4,2,3])\n    3\n    >>> max_occurrences([2,2,3,1,1,2,3,12,4,2,12])\n    3\n    >>> max_occurrences([2,", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    '''\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    '''\n    if not lst:\n        return 0\n    max_occur = 0\n    max_index = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[max_index]:\n            max_occur += 1\n            if max_occur > max_occur:\n                max_index = i\n    return max_index\n\ndef test_max_occurrences():\n    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\ntest_max_occurrences()", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(L):\n    \"\"\"\n    >>> L = [1,2,3,1,2,3,12,4,2]\n    >>> max_occurrences(L)\n    2\n    \"\"\"\n    # First we sort the list\n    L.sort()\n    count = 0\n    # And then we start going through the list\n    # with count = 0\n    for x in L:\n        if x != L[count]:\n            count += 1\n        else:\n            count += 1\n            if count > 1:\n                return x\n\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tup, K):\n    return list(map(lambda x: tuple(map(lambda y: y + K, x)), tup))\n\ndef main():\n    print(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4))\n\nmain()", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\nfrom functools import reduce\nfrom operator import add\n\ndef add_K_element(tup, K):\n    \"\"\"\n    \"\"\"\n    return tuple(\n        tuple(add(x, K) for x in el)\n        for el in tup\n    )\n\n\ndef test_add_K_element():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\n\ndef check_sum_dict_len(t_list):\n    \"\"\"\n    :param t_list:\n    :return:\n    \"\"\"\n    t_list_len = len(t_list)\n    sum_len = reduce(add, (len(t[0]) for t in t_list))\n    return sum_len == t_list_len\n\n\ndef check_sum_dict_len_2(t_list):\n    \"\"\"\n    :param t_list:\n    :return:\n    \"\"\"\n    t_list_len = len(t_list)\n    sum_len = reduce(lambda x, y: x + y, (len(t[0]) for t in t_list))\n    return sum_len == t_list_len\n\n\ndef test_check_sum_dict_len():\n    assert check_sum_dict_len([(1, 3, 4), (2, 4, 6), (3, 8, 1)]) is True\n    assert check_sum_dict_len([(1, 3, 4), (2, 4, 6), (3, 8, 1)]) is True\n    assert check_sum_dict_len([(1, 3, 4)]) is False\n\n\ndef check_sum_dict_len_3(t_list):\n    \"\"\"\n    :param t_", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tup, K):\n    res = []\n    for t in tup:\n        res.append([k + t[i] for i, k in enumerate(t)])\n    return res\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuples, K):\n    for i in range(len(tuples)):\n        for j in range(K):\n            tuples[i] = (tuples[i][0] + K, tuples[i][1] + K, tuples[i][2] + K)\n    return tuples\n\n#def add_K_element(tuples, K):\n#    return list(map(lambda x: tuple(map(lambda y: y + K, x)), tuples))\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple_list, K):\n    for i, el in enumerate(tuple_list):\n        tuple_list[i] = tuple([el[0] + K, el[1] + K, el[2] + K])\n    return tuple_list\n\n#assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuples, k):\n    return [list(map(lambda x: x + k, t)) for t in tuples]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(l, k):\n    \"\"\"\n    l: list of tuples\n    k: integer\n    return: list of tuples\n    \"\"\"\n    return [[t[0]+k, t[1]+k, t[2]+k] for t in l]\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\n# Addition of K-element to each element of a tuple\ndef add_K_element(t, k):\n    for i in range(len(t)):\n        t[i] = (t[i][0]+k, t[i][1]+k, t[i][2]+k)\n    return t", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuples, k):\n    res = []\n    for tup in tuples:\n        res.append((tup[0] + k, tup[1] + k, tup[2] + k))\n    return res", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple_list, k):\n    tuple_list_with_k = []\n    for tup in tuple_list:\n        new_tuple = tuple(ele+k for ele in tup)\n        tuple_list_with_k.append(new_tuple)\n    return tuple_list_with_k\n\n\ndef tuple_list_with_k(tuple_list, k):\n    return [(ele+k for ele in tup) for tup in tuple_list]\n\n\ndef test_add_K_element():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\n\ndef test_tuple_list_with_k():\n    assert tuple_list_with_k([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\n\n# ======================================================================\n\n#              TEST ADD ITEM TO LIST AT POSITION TESTS\n\n# ======================================================================\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) % 2 != 0:\n        raise ValueError(\"Length of string must be even\")\n    count = 0\n    for i in range(len(s)//2):\n        if s[i] != s[i+1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    m = 0\n    n = 0\n    for i in range(0, len(string), 2):\n        if string[i] == '1':\n            m += 1\n        else:\n            n += 1\n    return min(m, n)\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nclass Solution:\n    def minFlips(self, s: str) -> int:\n        chars = [\"0\", \"1\"]\n        counts = [0] * 2\n        for c in s:\n            counts[0 if c == \"0\" else 1] += 1\n        ans = 0\n        for c in s:\n            if c == \"1\":\n                ans = min(ans, counts[0] - counts[1])\n            counts[0] += 1\n            counts[1] -= 1\n        return ans", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(string):\n    # Your code here\n    return 0\n\ndef test_min_flip_to_make_string_alternate():\n    assert min_flip_to_make_string_alternate(\"0001010111\") == 2\n    assert min_flip_to_make_string_alternate(\"0000010110\") == 1\n    assert min_flip_to_make_string_alternate(\"0000000000\") == 0\n    assert min_flip_to_make_string_alternate(\"0000000001\") == 1\n    assert min_flip_to_make_string_alternate(\"0000000010\") == 1\n    assert min_flip_to_make_string_alternate(\"0000000011\") == 2\n    assert min_flip_to_make_string_alternate(\"0000000100\") == 2\n    assert min_flip_to_make_string_alternate(\"0000000101\") == 3\n    assert min_flip_to_make_string_alternate(\"0000000110\") == 3\n    assert min_flip_to_make_string_alternate(\"0000000111\") == 4\n    assert min_flip_to_make_string_alternate(\"0000001000\") == 4\n    assert min_flip_to_make_string_alternate(\"0000001001\") == 5\n    assert min_flip_to_make_string_alternate(\"0000001010\") == 5\n    assert min_flip_to_make_string_alternate(\"0000001011\") == 6\n    assert min_flip_to_make_string_alternate(\"000000110", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    \"\"\"\n    Takes a string and returns the minimum number of flips required to make the string alternating.\n\n    O(n) time | O(1) space - where n is the length of the input string.\n    \"\"\"\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    n = len(string)\n    min_flips = n\n    curr = 0\n    for i in range(n):\n        if string[i] == string[(i+1) % n]:\n            curr += 1\n        else:\n            min_flips = min(min_flips, curr+1)\n            curr = 1\n    return min_flips", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s):\n    # Write your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            count -= 1\n    return count\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    length = len(s)\n    curr_char = s[0]\n    last_char = s[-1]\n    if curr_char != last_char:\n        return length\n    # 'n' is the number of flips\n    n = 0\n    for i in range(1, length):\n        if s[i] != last_char:\n            curr_char = last_char\n            n += 1\n        else:\n            last_char = s[i-1]\n    return n + 1\n\n\ndef test_min_flip_to_make_string_alternate():\n    assert min_flip_to_make_string_alternate(\"0001010111\") == 2"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    return len(str(n))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(number):\n    return len(str(number))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n    \"\"\"\n    return len(str(n))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    # Write your code here\n\n# ## Question 4:\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    l = []\n    while num != 0:\n        l.append(num % 10)\n        num = num // 10\n    return len(l)\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    \"\"\"\n    Count the number of digits of n\n\n    Args:\n        n: Integer\n\n    Return:\n        Integer\n\n    Examples:\n        >>> count_Digit(12345)\n        5\n    \"\"\"\n    return len(str(n))\n\n# Tests", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\n# write your function code here\ndef count_Digit(number):\n\treturn len(str(number))\n\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_digit(number):\n    return len(str(number))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    return len(str(num))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_digit(n):\n    a = 0\n    while n > 0:\n        n = n // 10\n        a += 1\n    return a\n\n#print(count_digit(12345))\n\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(numbers):\n    \"\"\"\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    \"\"\"\n    # O(n^2)\n    return max(product(numbers[:2]), product(numbers[1:-1])) * product(numbers[2:])\n\ndef product(numbers):\n    \"\"\"\n    >>> product([1,2,3])\n    6\n    \"\"\"\n    # O(n)\n    result = numbers[0]\n    for n in numbers[1:]:\n        result *= n\n    return result\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    max_prod = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] > max_prod:\n                max_prod = nums[i] * nums[j]\n    return max_prod\n\n\ndef adjacent_num_product2(nums):\n    nums.sort()\n    return nums[-1] * nums[-2]\n\n\nnums = [1, 2, 3, 4, 5, 6]", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    if len(nums) < 2:\n        raise ValueError('List must have at least two elements')\n    return max(adjacent_num_product_helper(nums, 0, len(nums)-1))\n\ndef adjacent_num_product_helper(nums, left, right):\n    if left == right:\n        return nums[left]\n    mid = (left+right)//2\n    left_product = adjacent_num_product_helper(nums, left, mid)\n    right_product = adjacent_num_product_helper(nums, mid+1, right)\n    return left_product*right_product\n\ndef test_adjacent_num_product():\n    assert adjacent_num_product([1,2,3,4,5,6]) == 30\n    assert adjacent_num_product([1,2,3,4,5,6,7,8,9]) == 362880\n    assert adjacent_num_product([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]) == 3374400\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(numbers):\n    \"\"\"\n    Returns the product of the two largest adjacent numbers in list\n    \"\"\"\n    numbers.sort()\n    max_left, max_right = numbers[-2], numbers[-1]\n    max_product = max_left * max_right\n    for num in numbers[:-2]:\n        if num * max_left < max_product:\n            break\n        max_product = num * max_left\n    for num in numbers[1:-1]:\n        if num * max_right < max_product:\n            break\n        max_product = num * max_right\n    return max_product", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(arr):\n    # create an empty list to store the adjacent products\n    adjacent_product = []\n\n    # iterate over the array\n    for i in range(0, len(arr)):\n        # create a variable to store the current product\n        current_product = 1\n\n        # iterate over the range from the current index to the end of the array\n        for j in range(i+1, len(arr)):\n            # multiply the current and the next element of the array\n            current_product *= arr[i] * arr[j]\n\n        # append the current product to the adjacent products list\n        adjacent_product.append(current_product)\n\n    # create a variable to store the max adjacent product\n    max_product = max(adjacent_product)\n    return max_product\n\n\ndef test_adjacent_num_product():\n    assert adjacent_num_product([1,2,3,4,5,6]) == 30\n\n\n# -\n\ntest_adjacent_num_product()\n\n# +", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    \"\"\"\n    O(n^2) solution, since we have to iterate through the entire list\n    \"\"\"\n    product = 1\n    # iterate through each pair of adjacent elements and multiply them\n    for i,j in zip(nums, nums[1:]):\n        product *= i*j\n    return product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(arr):\n    \"\"\"\n    Returns the largest product of the pair of adjacent elements from the given list of integers\n\n    Args:\n        arr (list): List of integers\n\n    Returns:\n        int: Largest product\n    \"\"\"\n\n    # Your code here\n    arr.sort()\n    print(arr)\n    product = 1\n    for i in range(len(arr)-1):\n        product = product*arr[i]\n    return product\n\n\n# Test cases", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(numbers):\n\t\"\"\"\n\tReturn the product of the two adjacent elements in the list.\n\t\"\"\"\n\tif len(numbers) < 2:\n\t\traise ValueError('list is too short')\n\n\tlargest_product = None\n\tfor i in range(len(numbers) - 1):\n\t\tfor j in range(i, len(numbers)):\n\t\t\tproduct = numbers[i] * numbers[j]\n\t\t\tif product > largest_product:\n\t\t\t\tlargest_product = product\n\treturn largest_product", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\nfrom typing import List\n\n\ndef adjacent_num_product(numbers: List[int]) -> int:\n    numbers.sort()\n    return reduce(lambda x, y: x * y, numbers[0:3])\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(numbers):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    # approach 1:\n    # maximum product will be of two adjacent elements\n    # i.e. 1 and 2, 2 and 3, 3 and 4, etc.\n    # maximum product of two adjacent elements will be of two unique integers\n    # i.e. 1 and 3, 2 and 4, 5 and 6, etc.\n    # maximum product of two adjacent elements will be of two integers\n    # from the same list\n\n    if not numbers:\n        return 0\n\n    max_product = 0\n    for i in range(len(numbers) - 1):\n        product = numbers[i] * numbers[i+1]\n        max_product = max(product, max_product)\n\n    return max_product\n\n\ndef test_adjacent_num_product():\n    assert adjacent_num_product([1,2,3,4,5,6]) == 30\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    # Edge case\n    if root == None:\n        return True\n\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef is_tree_balanced_helper(root, depth, max_depth):\n    # Base case\n    if root == None:\n        return True\n\n    # If this is the first level\n    if depth == 0:\n        return max_depth >= 0 and (max_depth - depth) < 3\n\n    # If this is a level of the tree\n    if depth == 1:\n        return max_depth >= 0 and (max_depth - depth) < 2\n\n    # Recursive case\n    return is_tree_balanced_helper(root.left, depth + 1, max_depth) and \\\n        is_tree_balanced_helper(root.right, depth + 1, max_depth)\n\ndef is_tree_balanced_brute(root):\n    # Base case\n    if root == None:\n        return True\n\n    # Base case\n    if is_tree_balanced_helper(root, 0, 0):\n        return True\n\n    return False\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\nfrom collections import defaultdict\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\nfrom .util import TreeNode\n\n\ndef is_tree_balanced(root):\n    \"\"\"\n    Write a function to check if a binary tree is balanced or not.\n\n    Examples:\n        >>> is_tree_balanced(None)\n        True\n        >>> is_tree_balanced(Node(2))\n        True\n        >>> is_tree_balanced(Node(2, Node(1)))\n        False\n        >>> is_tree_balanced(Node(2, Node(1, Node(0))))\n        False\n    \"\"\"\n    return True\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n# O(n) time and space\ndef is_tree_balanced(root):\n    def is_balanced_inner(left, right):\n        if not left and not right:\n            return True\n        if not left or not right:\n            return False\n        if abs(height(left) - height(right)) > 1:\n            return False\n        return is_balanced_inner(left.left, right.right) and is_balanced_inner(left.right, right.left)\n\n    def height(root):\n        if not root:\n            return 0\n        return max(height(root.left), height(root.right)) + 1\n\n    return is_balanced_inner(root.left, root.right)\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    \"\"\"\n    :param root: root of a binary tree\n    :return: True or False\n    \"\"\"\n    return True\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# Definition for a binary tree node."], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    new = []\n    for i in range(n):\n        new.append(tup)\n    return tuple(new)\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    \"\"\"\n    repeat_tuples(tup, n) -> [tup, tup, tup, ...]\n    \"\"\"\n    # My answer\n    if n == 0:\n        return ()\n    else:\n        return (tup,) + repeat_tuples(tup, n-1)\n\n# Alternative solution\ndef repeat_tuples(tup, n):\n    \"\"\"\n    repeat_tuples(tup, n) -> [tup, tup, tup, ...]\n    \"\"\"\n    if n == 0:\n        return ()\n    return tup * n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    \"\"\"\n    Returns a list of tuples of the same length as tup with the same elements\n    as tup repeated n times.\n    \"\"\"\n    return [tup] * n\n\n\n# TESTS", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(*args, **kwargs):\n    \"\"\"\n    Write a function to repeat the given tuple n times.\n    \"\"\"\n    if \"n\" in kwargs:\n        n = kwargs[\"n\"]\n        del kwargs[\"n\"]\n    else:\n        n = 1\n    if len(args) == 1:\n        tup = args[0]\n        return (tup,) * n\n    else:\n        return tuple(tuple(x) for x in args)\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    if not tup:\n        return ()\n    return (tup,) * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    \"\"\"\n    >>> repeat_tuples((1, 3), 4)\n    ((1, 3), (1, 3), (1, 3), (1, 3))\n    \"\"\"\n    return tuple([tup] * n)\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    tup_list = []\n    for _ in range(n):\n        tup_list.append(tup)\n    return tup_list\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(t, n):\n    return (t,) * n\n\n\n# --------------------------------------------------------------------------------\n# Reading files and directories\n# --------------------------------------------------------------------------------\n\ndef check_dir(path):\n    \"\"\"\n    Check if the path is a valid directory\n    \"\"\"\n    if not os.path.isdir(path):\n        raise Exception(\"No such directory\")\n\n\ndef get_filenames_in_dir(path):\n    \"\"\"\n    Get all filenames in a directory\n    \"\"\"\n    check_dir(path)\n    filenames = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            filenames.append(os.path.join(root, name))\n    return filenames\n\n\ndef get_files_in_dir(path):\n    \"\"\"\n    Get all files in a directory\n    \"\"\"\n    check_dir(path)\n    files = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            files.append(os.path.join(root, name))\n    return files\n\n\ndef get_file_contents(filename):\n    \"\"\"\n    Get the contents of a file\n    \"\"\"\n    with open(filename, 'r') as f:\n        return f.read()\n\n\ndef get_filenames_from_file(filename):\n    \"\"\"\n    Get all filenames from a file\n    \"\"\"\n    with open(filename, 'r') as f:\n        return f.readlines()\n\n\ndef get_filenames_and_contents_from_file(filename):\n    \"\"\"\n    Get all filenames and contents from a file\n    \"\"\"\n    with open(filename, 'r') as f:\n        return zip(f.readlines(), f.readlines())\n\n\ndef get_filename_and_contents_from_file(filename):\n    \"\"\"\n    Get a filename and its contents from a file\n    \"\"\"\n    with open(filename, 'r') as f:\n        return f.readline(), f.readline()\n\n\ndef read_file(filename):\n    \"\"\"\n    Read a file and return its contents\n    \"\"\"\n    with open(filename, 'r') as f:\n        return f.read()\n\n\n# --------------------------------------------------------------------------------\n# Processing lists\n# --------------------------------------------------------------------------------\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\n# 1. Write a function that will repeat the given tuple n times.\ndef repeat_tuples(tup, n):\n    \"\"\"\n    Write a function to repeat the given tuple n times.\n    \"\"\"\n    return [tup] * n\n\n# 2. Write a function that will count the number of times a given value appears in a tuple.\ndef count_appearences(tup, value):\n    \"\"\"\n    Write a function that will count the number of times a given value appears in a tuple.\n    \"\"\"\n    return tup.count(value)\n\n# 3. Write a function that will return the sum of a tuple of numbers.\ndef sum_of_tuple(tup):\n    \"\"\"\n    Write a function that will return the sum of a tuple of numbers.\n    \"\"\"\n    sum = 0\n    for i in range(len(tup)):\n        sum += tup[i]\n    return sum\n\n# 4. Write a function that will return the average of a tuple of numbers.\ndef average_tuple(tup):\n    \"\"\"\n    Write a function that will return the average of a tuple of numbers.\n    \"\"\"\n    return sum(tup) / len(tup)\n\n# 5. Write a function that will return a new tuple with all the odd numbers from the first given tuple.\ndef odd_numbers(tup):\n    \"\"\"\n    Write a function that will return a new tuple with all the odd numbers from the first given tuple.\n    \"\"\"\n    return (i for i in tup if i % 2 != 0)\n\n# 6. Write a function that will return a new tuple with all the even numbers from the first given tuple.\ndef even_numbers(tup):\n    \"\"\"\n    Write a function that will return a new tuple with all the even numbers from the first given tuple.\n    \"\"\"\n    return (i for i in tup if i % 2 == 0)\n\n# 7. Write a function that will return a new tuple with all the numbers that are greater than or equal to 0.\ndef greater_than_0(tup):\n    \"\"\"\n    Write a function that will return a new tuple with all the numbers that", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(t, n):\n    return tuple(t) * n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(w,h,l):\n    return 2*(w*h+h*l+l*w)\n\n# test", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(height,width,depth):\n    return 2*height*width + 2*height*depth + 2*depth*width\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n    return (2*(l*w+w*h+h*l))\n\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n    return 2*(l*w + l*h + w*h)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(x1, y1, z1):\n    if x1<0 or y1<0 or z1<0:\n        return 0\n    x2=x1+2\n    y2=y1+2\n    z2=z1+2\n    return (2*(x1*y1)+2*(x2*y1)+2*(x1*y2)+2*(x2*y2)+2*(x1*z1)+2*(x2*z1)+2*(x1*z2)+2*(x2*z2)))\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(x,y,z):\n\treturn 2*x*y + 2*x*z + 2*y*z\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length,width,height):\n    return (2*length+2*width+2*height)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return 2*(a+b+c)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(w,h,l):\n    return 2*(h*w+h*l+w*l)\n\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\n# float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\n# +\ndef sort_float(tup):\n    \"\"\"\n    Write a function to sort a tuple by its float element.\n    \"\"\"\n    return sorted(tup, key=lambda t: t[1], reverse=True)\n\n\nfloat_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(items):\n    items = sorted(items, key=lambda item: item[1])\n    return items\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(list):\n    \"\"\"\n    >>> list = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\n    >>> float_sort(list)\n    [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    \"\"\"\n    return sorted(list, key=lambda k: float(k[1]))\n\n\ndef test_float_sort():\n    assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]) == [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    sorted_list=[]\n    for item in tup:\n        sorted_list.append((item[0],float(item[1])))\n    return sorted_list\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(lst):\n    # your code here\n    return sorted(lst, key = lambda x: x[1])\n    \n\n\n# -\n\nfloat_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])\n\n# +", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n\tif len(tup) == 0:\n\t\treturn []\n\n\tresult = []\n\trest = []\n\tfor x in tup:\n\t\tif isinstance(x[1], int):\n\t\t\trest.append(x)\n\t\telse:\n\t\t\tresult.append(x)\n\n\treturn result + float_sort(rest)\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(items):\n    items.sort(key = lambda item: item[1])\n    return items\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(t):\n\treturn sorted(t, key = lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup_list):\n    tup_list.sort(key=lambda tup: tup[1])\n    return tup_list\n\ndef main():\n    tup_list = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\n    print(float_sort(tup_list))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key = lambda x: float(x[1]))\n\n# print(float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]))\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(A, lo=0, hi=None):\n    if hi is None:\n        hi = len(A) - 1\n\n    if lo >= hi:\n        return lo\n\n    mid = (lo + hi) // 2\n    if A[mid] <= A[hi]:\n        if mid == hi or A[mid] < A[hi]:\n            return mid + 1\n        else:\n            return hi\n    else:\n        if mid == lo or A[lo] < A[mid]:\n            return lo + 1\n        else:\n            return mid\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(A, lo, hi):\n    i = lo\n    while i <= hi:\n        if A[i] == 0:\n            i += 1\n        else:\n            break\n\n    return hi + 1 if i > hi else i\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\nimport pytest\n\n\ndef find_smallest_missing(numbers, left, right):\n    while left <= right:\n        mid = (left + right) // 2\n        if numbers[mid] == numbers[mid + 1]:\n            return mid + 1\n        elif numbers[mid] > numbers[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return 0\n\n\ndef smallest_missing(numbers, left, right):\n    return numbers[find_smallest_missing(numbers, left, right)]\n\n\n@pytest.mark.parametrize(\"numbers,left,right,result\", [\n    ([0, 1, 2, 3, 4, 5, 6], 0, 6, 7),\n])\ndef test_smallest_missing(numbers, left, right, result):\n    assert smallest_missing(numbers, left, right) == result", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(A, l, r):\n    if l == r:\n        return l\n\n    p = partition(A, l, r)\n\n    if p == r:\n        return r+1\n\n    if r == p + 1:\n        return l\n\n    if p == l:\n        return l\n\n    if A[p] > A[p-1]:\n        return smallest_missing(A, l, p-1)\n    else:\n        return smallest_missing(A, p+1, r)\n\n\ndef partition(A, l, r):\n    pivot = A[l]\n    i = l\n    j = r+1\n\n    while True:\n        while A[++i] < pivot:\n            pass\n\n        while A[--j] > pivot:\n            pass\n\n        if i >= j:\n            break\n\n        A[i], A[j] = A[j], A[i]\n\n    A[l], A[j] = A[j], A[l]\n\n    return j\n\n\nA = [0, 1, 2, 3, 4, 5, 6]", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(array, low, high):\n    if high - low == 1:\n        return array[high]\n    mid = (high + low) // 2\n    if array[mid] != mid + 1:\n        return mid + 1\n    return smallest_missing(array, low, mid) if mid > low else smallest_missing(array, mid + 1, high)\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(nums, start, end):\n    \"\"\"\n    :type nums: List[int]\n    :type start: int\n    :type end: int\n    :rtype: int\n    \"\"\"\n    return sorted(nums)[start] + sorted(nums)[end]\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(a, l, r):\n    if l == r:\n        return l\n    m = l + (r-l)//2\n    if a[m] > a[r-1]:\n        return smallest_missing(a, l, m)\n    return smallest_missing(a, m+1, r)\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, lo, hi):\n    \"\"\"\n    Returns the smallest missing number in a sorted array\n    \"\"\"\n    if lo == hi:\n        return lo\n\n    mid = (lo + hi) // 2\n\n    if arr[lo] < arr[mid] and arr[lo] < arr[hi]:\n        return mid\n\n    if arr[mid] < arr[lo] and arr[mid] < arr[hi]:\n        return lo\n\n    if arr[hi] < arr[lo] and arr[hi] < arr[mid]:\n        return hi\n\n    if arr[lo] < arr[mid] and arr[lo] < arr[hi]:\n        return lo\n\n    if arr[mid] < arr[lo] and arr[mid] < arr[hi]:\n        return mid\n\n    if arr[hi] < arr[lo] and arr[hi] < arr[mid]:\n        return hi\n\n    return mid + 1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, stop):\n    \"\"\"\n    Brute force method to find missing element.\n    \"\"\"\n    for i in range(start, stop):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        return arr[i] + 1\n    \n    return stop + 1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(nums, l, r):\n\tif l == r:\n\t\treturn l\n\n\tmid = (l + r) // 2\n\n\tif nums[mid] == mid:\n\t\treturn smallest_missing(nums, l, mid - 1)\n\telse:\n\t\treturn smallest_missing(nums, mid + 1, r)"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(l):\n    # Start your code here\n    h=PriorityQueue()\n    for x in l:\n        h.push(x)\n    while not h.is_empty():\n        print(h.pop(),end=' ')\n    # End your code here", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(num_list):\n    # your code here\n    # Create a max heap\n    heap = []\n    for i in num_list:\n        heapq.heappush(heap, i)\n    # print(heap)\n    result = []\n    # pop the root from max heap, put in a new list\n    while len(heap):\n        result.append(heapq.heappop(heap))\n    # print(result)\n    return result\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(lst):\n    res = []\n    hq = []\n    for i in lst:\n        hq.append(i)\n        if len(hq) == 1:\n            res.append(i)\n        else:\n            res.append(min(hq))\n            hq.remove(min(hq))\n\n    return res\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(L):\n    return heapq.nsmallest(len(L), L)\n\n# test\nL = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]\nheap_assending(L)\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(L):\n    heap = []\n    for x in L:\n        heapq.heappush(heap, x)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(n):\n    heap = []\n    for item in n:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for _ in range(len(n))]\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(data):\n    data = [e for e in data]\n    h = Heap()\n    for e in data:\n        h.insert(e)\n    return [h.extract() for _ in range(len(data))]\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\ndef heap_assending(array):\n    heap = []\n    for i in array:\n        heappush(heap,i)\n    return [heappop(heap) for i in range(len(array))]\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop, heapify\ndef heap_assending(lst):\n    heapify(lst)\n    for i in reversed(range(len(lst))):\n        heappush(lst, lst[i])\n    return [heappop(lst) for i in range(len(lst))]\n\n\ndef test_heap_assending():\n    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]) == [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom collections import deque\n\ndef heap_assending(l):\n    h=deque()\n    for x in l:\n        h.append(x)\n    for i in range(len(l)-1,-1,-1):\n        a=h.popleft()\n        h.append(a)\n        l[i]=a\n    return l\n\n\ndef main():\n    l=[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]\n    print(heap_assending(l))\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(heap_assending(l))\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(heap_assending(l))\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n\n\n# + id=\"Qlnn_7w8_YLy\"", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a,b,c):\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n# solution\ndef volume_cuboid(a,b,c):\n    return a*b*c\n\n# test cases", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length,width,height):\n    return length*width*height\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(l1,l2,l3):\n    return l1*l2*l3\n\n\ndef test_volume_cuboid():\n    assert volume_cuboid(1,2,3)==6\n\n\ndef test_volume_cuboid():\n    assert volume_cuboid(1,2,3)==6\n\ndef volume_cylinder(r,h):\n    return 2*3.14*r*h\n\n\ndef test_volume_cylinder():\n    assert volume_cylinder(1,2)==12.566370614359172\n\ndef volume_sphere(r):\n    return 4/3*3.14*r*r*r\n\ndef test_volume_sphere():\n    assert volume_sphere(2)==12.566370614359172\n\ndef test_volume_sphere():\n    assert volume_sphere(3)==24.389572609636521\n\ndef test_volume_sphere():\n    assert volume_sphere(4)==50.26548245743669\n\n\ndef test_volume_sphere():\n    assert volume_sphere(5)==125.66370614359172\n\ndef test_volume_sphere():\n    assert volume_sphere(100)==3914.1124689333765\n\n\ndef test_volume_sphere():\n    assert volume_sphere(1000)==3.9141124689333765e+19\n\n\ndef test_volume_sphere():\n    assert volume_sphere(1000000)==3.9141124689333765e+29\n\n\ndef test_volume_sphere():\n    assert volume_sphere(1000000000)==3.9141124689333765e+39\n\n\ndef test_volume", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(x,y,z):\n    return x*y*z\n\n\ndef test_volume_cuboid():\n    assert volume_cuboid(1,2,3)==6\n\ndef test_volume_cuboid_err():\n    with raises(TypeError):\n        volume_cuboid()\n    with raises(TypeError):\n        volume_cuboid(1,2)\n    with raises(TypeError):\n        volume_cuboid(1)\n\ndef test_volume_cuboid_err2():\n    with raises(TypeError):\n        volume_cuboid(1,2,3,4)\n\ndef test_volume_cuboid_err3():\n    with raises(TypeError):\n        volume_cuboid(1,2,3,4,5)\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n\ndef test_volume_cuboid():\n    assert volume_cuboid(1,2,3)==6\n    assert volume_cuboid(5,4,3)==60\n\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nclass Solution(object):\n    def permute_string(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        if len(s) < 2:\n            return [s]\n        for i in xrange(len(s)):\n            char = s[i]\n            for p in self.permute_string(s[:i] + s[i+1:]):\n                res.append(char + p)\n        return res\n\n\ns = Solution()", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    n=len(s)\n    # first permutation\n    p=[s[0]]\n    for i in range(1,n):\n        # first we need to get all permutations without duplicates\n        p1=[]\n        for j in range(len(p)):\n            for k in range(i+1,n+1):\n                if p[j]+s[k] not in p1:\n                    p1.append(p[j]+s[k])\n        p=p1\n    return p\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    if not s: return []\n    return [s[0]] + permute_string(s[1:]) + [s[0] + s[1:]]", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return list(itertools.permutations(s))\n\n\n# Time:  O(n^2)\n# Space: O(1)\n#\n# Test case:\n#\n# Input: s = \"abcd\"\n# Output: [\"abcd\", \"adb\", \"bad\", \"bac\", \"cd\", \"da\", \"dcb\", \"bd\"]\n# Explanation:\n# There are a total of 8 permutations of \"abcd\".\n#\nimport itertools", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nfrom __future__ import print_function\n\n\ndef permute_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n\n    # Doing the simple way:\n    result = []\n    if not string:\n        return result\n\n    length = len(string)\n    for i in range(length):\n        current = string[i]\n        remaining = string[:i] + string[i+1:]\n        for permutation in permute_string(remaining):\n            result.append(current + permutation)\n    return result\n\n# This takes O(n!) time since we're doing recursion with the entire string.\n# We can reduce the time by doing a dynamic programming:\n\n# The first element is a single permutation.\n# The second element is a single permutation.\n# For the i-th character, there are 2 options:\n# - we replace the i-th character with other characters\n# - we keep the i-th character, and replace the rest with other characters.\n\n\ndef permute_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    if not string:\n        return []\n\n    permutations = []\n    permutations.append(string)\n    for i in range(len(string)):\n        # Replace the i-th character\n        for permutation in permute_string(string[:i] + string[i+1:]):\n            permutations.append(string[:i] + string[i] + permutation)\n\n    return permutations\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nclass Solution(object):\n    def permute_string(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        self.backtrack(s, [], result)\n        return result\n\n    def backtrack(self, s, path, result):\n        if len(s) == 0:\n            result.append(''.join(path))\n        for i in range(len(s)):\n            self.backtrack(s[:i] + s[i+1:], path + [s[i]], result)", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    result = []\n    def permute_helper(string, result):\n        if len(string) == 0:\n            result.append(string)\n        else:\n            for i in range(len(string)):\n                permute_helper(string[:i] + string[i+1:], result)\n                permute_helper(string[:i] + string[i:i+1] + string[i+1:], result)\n    permute_helper(string, result)\n    return result"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(n,p):\n    return int(round(n/p)*p)", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, step):\n    if num%step==0:\n        return num\n    return num-step+step*int(num/step)\n\n# print(round_num(10,3))\n# print(round_num(20,3))\n# print(round_num(30,3))\n# print(round_num(40,3))\n# print(round_num(50,3))\n# print(round_num(60,3))\n# print(round_num(70,3))\n# print(round_num(80,3))\n# print(round_num(90,3))\n# print(round_num(100,3))\n# print(round_num(110,3))\n# print(round_num(120,3))\n# print(round_num(130,3))\n# print(round_num(140,3))\n# print(round_num(150,3))\n# print(round_num(160,3))\n# print(round_num(170,3))\n# print(round_num(180,3))\n# print(round_num(190,3))\n# print(round_num(200,3))\n# print(round_num(210,3))\n# print(round_num(220,3))\n# print(round_num(230,3))\n# print(round_num(240,3))\n# print(round_num(250,3))\n# print(round_num(260,3))\n# print(round_num(270,3))\n# print(round_num(280,3))\n# print(round_num(290,3))\n# print(round_num(300,3))\n# print(round_num(310,3))\n# print(round_num(320", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(x, multiple):\n    return int(x / multiple) * multiple", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number,multiple):\n    return round(number/multiple)*multiple", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,multiple):\n    num*=10**(1-multiple)\n    rounded=int(num)\n    if (rounded%multiple)>0:\n        rounded+=multiple-rounded%multiple\n    return rounded\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number, number_to_round):\n    return int(number/number_to_round)*number_to_round\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, multiple):\n    return round(num / multiple) * multiple\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number,increment):\n    return int(float(number)/increment)*increment", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number,factor):\n    # your code here\n    return number - (number % factor)", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,nearest):\n    if nearest==0:\n        return num\n    return num - (num%nearest)\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(t):\n    # Your code here\n    pass\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(l):\n    # your code here\n    # l = [(1, 1, 4, 4, 4, 5, 5, 6, 7, 7)]\n    #print(l)\n    return_list = []\n    for i in l:\n        #print(i)\n        #print(len(i))\n        if len(i) == 1:\n            return_list.append(i)\n        else:\n            count = 1\n            for j in i:\n                if j == i[0]:\n                    pass\n                elif j == i[0]:\n                    count += 1\n                else:\n                    break\n            if count > 1:\n                return_list.append((i[0], 'Duplicate'))\n            else:\n                return_list.append(i)\n    return return_list\n\nl = [(1, 1, 4, 4, 4, 5, 5, 6, 7, 7)]", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(nums):\n    d = defaultdict(lambda: \"MSP\")\n    return list(map(lambda n: d[n], nums))\n\n# test = [1, 1, 4, 4, 4, 5, 5, 6, 7, 7]\n# print(remove_replica(test))", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    \"\"\"Takes an iterable of tuples and returns a new iterable of tuples\"\"\"\n    # Set the default value\n    default = \"MSP\"\n    # Use set() to remove all occurrences of duplicates\n    return [x if x not in set(tup) else default for x in tup]\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(l):\n    return tuple(i if l.count(i) == 1 else 'MSP' for i in l)\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tup):\n    \"\"\"\n    You must write your own code here.\n    \"\"\"\n    # O(n)\n    # take a temporary empty list to store the elements that are to be replaced\n    res = []\n    for el in tup:\n        if el not in res:\n            res.append(el)\n    return tuple(res)", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tup):\n    \"\"\"\n    Remove all elements that occur more than once.\n    \"\"\"\n    seen = set()\n    # Create a set, convert the tuple into a list and append the list elements to the set.\n    for element in tup:\n        seen.add(element)\n    # Create an empty list to store the returned values.\n    res = []\n    # Create an empty set to store the elements to be returned.\n    for element in seen:\n        # Append the element to the returned values list if it occurs once.\n        if seen.count(element) == 1:\n            res.append(element)\n    # Return the list of returned values.\n    return res\n\ndef remove_replica2(tup):\n    \"\"\"\n    Remove all elements that occur more than once and replace the duplicates with some custom value.\n    \"\"\"\n    seen = set()\n    # Create a set, convert the tuple into a list and append the list elements to the set.\n    for element in tup:\n        seen.add(element)\n    # Create an empty list to store the returned values.\n    res = []\n    # Create an empty set to store the elements to be returned.\n    for element in seen:\n        # Append the element to the returned values list if it occurs once.\n        if seen.count(element) == 1:\n            res.append(element)\n        else:\n            res.append(\"replica\")\n    # Return the list of returned values.\n    return res", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\n# solution one:\ndef remove_replica(lst):\n    \"\"\"\n    >>> remove_replica([1, 1, 4, 4, 4, 5, 5, 6, 7, 7])\n    [1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP']\n    \"\"\"\n    return [x if x.count(x) < 2 else 'MSP' for x in lst]\n\n\n# solution two:\ndef remove_replica(lst):\n    \"\"\"\n    >>> remove_replica([1, 1, 4, 4, 4, 5, 5, 6, 7, 7])\n    [1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP']\n    \"\"\"\n    return [x if x not in lst[:i] for i, x in enumerate(lst, 1) if lst[:i].count(x) < 2]", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nfrom collections import Counter\ndef remove_replica(li):\n    for k, v in Counter(li).items():\n        li = [i if i != k else 'MSP' for i in li]\n    return li\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(input_list):\n    return [elem for elem, count in collections.Counter(input_list).items() if count == 1] + [elem + 'MSP' for elem, count in collections.Counter(input_list).items() if count > 1]\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(s, ch):\n    index = s.find(ch)\n    while index != -1:\n        s = s[:index] + s[index+1:]\n        index = s.find(ch)\n    return s\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, char):\n    if char not in string:\n        return string\n    else:\n        return string[:string.index(char)]+remove_Char(string[string.index(char)+1:], char)\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str,char):\n    result = \"\"\n    for char in str:\n        if char != char:\n            result += char\n    return result", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(word, char):\n    res = \"\"\n    for char in word:\n        if char != char:\n            res += char\n    return res\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(s,c):\n    return s[1:]\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    return string.replace(char, \"\")\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, character):\n    result = \"\"\n    for char in string:\n        if char != character:\n            result += char\n    return result\n\n# or\ndef remove_Char(string, character):\n    result = \"\"\n    for char in string:\n        if char != character:\n            result += char\n    return result\n\n# or\ndef remove_Char(string, character):\n    return \"\".join([char for char in string if char != character])\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(str, char):\n    return str.replace(char, '')\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    return string.replace(char,\"\")\n\ndef test_remove_Char():\n    assert remove_Char(\"aba\", 'a') == \"b\"\n    assert remove_Char(\"ab\", 'a') == \"b\"\n    assert remove_Char(\"a\", 'a') == \"\"\n    assert remove_Char(\"abcd\", 'e') == \"abcd\"\n    print(\"All test cases passed\")\n\ntest_remove_Char()\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(s, c):\n    return s.replace(c, '')\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(data):\n    if len(data) == 1:\n        return data\n    return data[1:] + [data[0]]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(list_input):\n    if not isinstance(list_input, list):\n        raise TypeError('list is required as an argument')\n\n    if len(list_input) < 2:\n        raise IndexError('list must have at least two elements')\n\n    return list_input[-1:] + list_input[:-1]\n\ndef test_move_first():\n    assert move_first([1,2,3,4]) == [4,1,2,3]\n    assert move_first([1,2,3]) == [3,1,2]\n    assert move_first([1,2]) == [2,1]\n    assert move_first([1]) == [1]", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    # your code here\n    #move_first([1,2,3,4]) == [4,1,2,3]\n    return lst[1:] + [lst[0]]\n\ndef test_move_first():\n    assert move_first([1,2,3,4]) == [4,1,2,3]\n\ndef move_last(lst):\n    # your code here\n    #move_last([1,2,3,4]) == [1,2,3,4]\n    return lst[1:] + [lst[0]]\n\ndef test_move_last():\n    assert move_last([1,2,3,4]) == [1,2,3,4]\n\ndef remove_first(lst):\n    # your code here\n    #remove_first([1,2,3,4]) == [2,3,4]\n    return lst[1:]\n\ndef test_remove_first():\n    assert remove_first([1,2,3,4]) == [2,3,4]\n\ndef remove_last(lst):\n    # your code here\n    #remove_last([1,2,3,4]) == [1,2,3]\n    return lst[:-1]\n\ndef test_remove_last():\n    assert remove_last([1,2,3,4]) == [1,2,3]\n\ndef remove_index(lst, index):\n    # your code here\n    #remove_index([1,2,3,4], 2) == [1,3,4]\n    return lst[:index] + lst[index+1:]\n\ndef test_remove_index():\n    assert remove_index([1,2,3,4], 2) == [1,3,4]\n\ndef insert_at(lst, index, item):\n    # your code here\n    #insert_at([1,2,3,4], 2, 5) == [1,5,2,3,4]\n    return lst[:index] + [item] + lst[index:]\n\ndef", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    lst.insert(0, lst.pop())\n    return lst\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return lst[0:1] + lst[1:]\n\n# Alternative\ndef move_first(lst):\n    return lst[1:] + [lst[0]] if len(lst) > 0 else []", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(arr):\n    return arr[1:] + arr[:1]\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    return lst[1:] + [lst[0]]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    return lst[1:] + [lst[0]]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(alist):\n    temp = alist[-1]\n    alist[-1] = alist[0]\n    alist[0] = temp\n    return alist\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(mylist):\n    mylist.insert(0,mylist.pop())\n    return mylist\n\n#Test case"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(x,y,z):\n    return 2*(x*y+x*z+y*z)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    # your code here\n    s = 2*(a*b + b*c + c*a)\n    return s\n\n\n# + [markdown] id=\"7aQ5ScxT-8tY\"\n# **Exercise 5**\n#\n# Write a function to find the volume of a cuboid.", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(width, height, depth):\n    return 2 * width * height + 2 * depth * height + 2 * width * depth\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(x,y,z):\n    return 2*(x*y+x*z+y*z)\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return 2*(a*b+b*c+c*a)\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(w,l,h):\n    return 2*w*l+2*w*h+2*l*h\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    return 2*a*b+2*b*c+2*c*a\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length, width, height):\n    return length*width+length*height+height*width\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return (a*b*c)*2", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    return 2*a*b + 2*b*c + 2*c*a\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(rows,cols):\n    return [[x for x in range(cols)] for y in range(rows)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(row, col):\n    # You need to write your code here\n    return [[i for i in range(col)] for j in range(row)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(i,j):\n    #for j in range(j):\n    #    multi_list[j]=[0 for i in range(i)]\n    #print(multi_list[j])\n    multi_list = []\n    for j in range(j):\n        multi_list.append([0 for i in range(i)])\n    return multi_list\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(r, c):\n    return [[i, j] for i in range(r) for j in range(c)]\n\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(n1,n2):\n    res = [[0 for i in range(n2)] for j in range(n1)]\n    for i in range(n1):\n        for j in range(n2):\n            res[i][j] = i+j\n    return res\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n, m):\n    arr = [[0]*m for x in range(n)]\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] = i*m+j\n    return arr\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(rows,cols):\n    return [[i,i*2 for i in range(cols)] for j in range(rows)]\n\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n,m):\n    return [[i,j] for i in range(n) for j in range(m)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(rows,cols):\n    return [[i,i*2,i*3,i*4] for i in range(rows)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(m,n):\n    return [[i,j] for i in range(m) for j in range(n)]"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key = lambda x:x[index])", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(my_list, index_on_inner_list):\n    my_list.sort(key = lambda x:x[index_on_inner_list])\n    return my_list\n\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_tuples, index):\n    return sorted(list_of_tuples, key = lambda inner_list : inner_list[index])\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n#assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\ndef test_list_funcs():\n    list_funcs()\n\ndef list_funcs():\n    assert is_in([1, 2, 3, 4], 1)==True\n    assert is_in([1, 2, 3, 4], 5)==False\n    assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_lists, index_on_inner_list):\n    list_of_lists.sort(key=lambda x: x[index_on_inner_list])\n    return list_of_lists\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(my_list, index):\n    return [elem for elem in sorted(my_list, key=lambda x: x[index])]\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_list, index):\n    return sorted(list_of_list, key=lambda x: x[index])\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_list, i):\n    \"\"\"\n    Sorts list_of_list by the index i of the inner list.\n    \"\"\"\n    return sorted(list_of_list, key=itemgetter(i))\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(l, index_in_inner_list):\n    return sorted(l, key=lambda x: x[index_in_inner_list])\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\nfrom helpers import check_answer\n\n\ndef find_rotation_count(arr: List[int]) -> int:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    mid = len(arr) // 2\n    low = 0\n    high = mid - 1\n\n    count = 0\n    while low <= high:\n        if arr[low] == arr[high]:\n            return count\n\n        elif arr[low] > arr[high]:\n            count += mid - low\n            high -= 1\n        else:\n            low += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    \"\"\"\n    This function takes in a sorted array and returns the number of rotations\n    \"\"\"\n    n = len(arr)\n    # find the maximum number of rotations that can occur\n    rotation_count = 0\n    current = arr[0]\n    for i in range(n):\n        if arr[i] == current:\n            rotation_count += 1\n        else:\n            break\n        current = arr[i]\n\n    # add the number of rotations from last element to first\n    current = arr[-1]\n    for i in range(n - 1, 0, -1):\n        if arr[i] == current:\n            rotation_count += 1\n        else:\n            break\n        current = arr[i]\n\n    return rotation_count\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(nums):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n\n    start = 0\n    stop = len(nums) - 1\n    i = 0\n    while i < len(nums) / 2:\n        if nums[i] < nums[stop]:\n            stop -= 1\n        else:\n            start += 1\n            stop -= 1\n        i += 1\n\n    return stop - start + 1\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(array):\n    # Write your code here\n    counter = 0\n    for i in range(0,len(array)-1):\n        if array[i]>array[i+1]:\n            counter+=1\n    return counter", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\ndef find_rotation_count(array: List[int]) -> int:\n    \"\"\"\n    Given an array of integers, find the number of rotations of the array.\n    The array should be sorted in increasing order.\n    \"\"\"\n    left = 0\n    right = len(array) - 1\n    rotations = 0\n\n    # Shift the pointer to the left and right by 1 for each rotation\n    while left < right:\n        left += 1\n        right -= 1\n        rotations += 1\n\n    # Return the number of rotations\n    return rotations", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef find_rotation_count(sorted_array):\n    def _find_rotations(sorted_array, start_index, stop_index):\n        if stop_index == start_index:\n            return None\n        middle_index = (start_index + stop_index) // 2\n        middle_element = sorted_array[middle_index]\n        if middle_element < sorted_array[start_index]:\n            return _find_rotations(sorted_array, start_index + 1, stop_index)\n        elif middle_element < sorted_array[stop_index]:\n            return _find_rotations(sorted_array, start_index, stop_index - 1)\n        else:\n            return middle_index\n\n    return _find_rotations(sorted_array, 0, len(sorted_array) - 1) + 1\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(arr: List[int]) -> int:\n    size = len(arr)\n    left = 0\n    right = size - 1\n    count = 0\n\n    while left <= right:\n        if left == right:\n            break\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n            continue\n        if arr[left] > arr[right]:\n            break\n        count += 1\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n    return count", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    first = arr[0]\n    last = arr[-1]\n    \n    # If first and last are same, no rotation needed\n    if first == last:\n        return 0\n    \n    # If first and last are not equal, then we need to find the minimum\n    # number of rotations needed to make first and last equal\n    min_rotations = (last - first) % len(arr)\n    \n    return min_rotations\n\ndef test_find_rotation_count():\n    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\ndef main():\n    test_find_rotation_count()\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef find_rotation_count(values: List[int]) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    rotations_count = 0\n\n    for i in range(len(values) - 1):\n        if values[i] > values[i + 1]:\n            rotations_count += 1\n\n    return rotations_count", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nclass Solution(object):\n    def find_rotation_count(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        result = 0\n        for i in xrange(n):\n            for j in xrange(i+1, n):\n                if nums[i] > nums[j]:\n                    result += 1\n                    break\n        return result\n\n"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return int(bin(n)[2::])\n\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 15\n    assert even_bit_toggle_number(2) == 2\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\nfrom typing import Any, Optional\n\n\ndef even_bit_toggle_number(number: Any) -> Any:\n    \"\"\"\n    Write a python function to toggle all odd bits of a given number.\n    assert even_bit_toggle_number(10) == 15\n\n    :param number: a given number\n    :return: number with all odd bits toggled\n    \"\"\"\n    return number ^ (number & -number)\n\n\ndef even_bit_toggle_number_v2(number: Any) -> Any:\n    \"\"\"\n    Write a python function to toggle all odd bits of a given number.\n    assert even_bit_toggle_number(10) == 15\n\n    :param number: a given number\n    :return: number with all odd bits toggled\n    \"\"\"\n    number = number | (number >> 1)\n    number = number | (number >> 2)\n    number = number | (number >> 4)\n    number = number | (number >> 8)\n    number = number | (number >> 16)\n    return number\n\n\ndef even_bit_toggle_number_v3(number: Any) -> Any:\n    \"\"\"\n    Write a python function to toggle all odd bits of a given number.\n    assert even_bit_toggle_number(10) == 15\n\n    :param number: a given number\n    :return: number with all odd bits toggled\n    \"\"\"\n    number = number | (number >> 1)\n    number = number | (number >> 2)\n    number = number | (number >> 4)\n    number = number | (number >> 8)\n    number = number & 0x5555555555555555  # 0b101010101010101010101010101010101\n    number = number | (number >> 1)\n    number = number & 0x3333333333333333  # 0b00100100100100100100100100100", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(x):\n    bit_size = int(math.ceil(math.log(x, 2)))\n    mask = 0\n    for i in range(bit_size):\n        mask |= (1 << i)\n    return x & mask ^ mask\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\nfrom functools import reduce\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    even_bits_in_bin = [str(i) for i in range(0, 32) if (number & (1 << i)) != 0]\n    odd_bits_in_bin = [str(i) for i in range(0, 32) if (number & (1 << i)) == 0]\n    if len(even_bits_in_bin) == 0:\n        return int(\"\".join(odd_bits_in_bin), 2)\n    elif len(even_bits_in_bin) == 1:\n        return int(\"\".join(even_bits_in_bin), 2)\n    else:\n        return int(reduce(lambda x, y: x + y, odd_bits_in_bin), 2)", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n\tres = 0\n\tfor i in range(n):\n\t\tif i % 2 == 0:\n\t\t\tres = res | (1 << i)\n\treturn res\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(number):\n    \"\"\"\n    :param number: Number to be changed\n    :return: Toggled version of the number\n    \"\"\"\n    return number & 0x00000000ffff\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    # your code goes here\n    return n\n\n\n# +", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    \"\"\"\n    Toggles the odd bits of a number.\n    \"\"\"\n    pass\n\n#Below is an example usage:\n\nimport random\n\ndef even_bit_toggle_number(n):\n    \"\"\"\n    Toggles the odd bits of a number.\n    \"\"\"\n    pass\n\n# Enter the number\nn = 10\n\n# Calling the function", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    return num ^ (num - 1)\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    return num ^ num >> 1\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    \"\"\"This is a utility function to get the frequency of the smallest value in a given array.\"\"\"\n    min_value = min(arr)\n    count = 0\n    for i in arr:\n        if i == min_value:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(size,arr):\n    smallest = min(arr)\n    count = 0\n    for i in arr:\n        if i == smallest:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(array):\n    if not isinstance(array, list) or len(array) < 1:\n        raise ValueError\n    sorted_array = sorted(array)\n    return sorted_array[0]\n\ndef test_frequency_Of_Smallest():\n    assert frequency_Of_Smallest([1,2,3,4,3]) == 1\n    assert frequency_Of_Smallest([5,4,3,2,1]) == 2\n    assert frequency_Of_Smallest([1,1,1,1]) == 1\n    assert frequency_Of_Smallest([3,1]) == 3\n    assert frequency_Of_Smallest([1,1,1,1,1]) == 1\n    assert frequency_Of_Smallest([]) == 0", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,a):\n    return len(list(filter(lambda x: x == min(a), a)))\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(length,arr):\n    freq = {}\n    for i in range(length):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n    return freq[min(arr)]\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(N,A):\n    from collections import Counter\n    d = Counter(A)\n    return d.most_common()[0][1]", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(num,array):\n    min_value=0\n    for i in range(len(array)):\n        if(array[i]<min_value):\n            min_value=array[i]\n    count=0\n    for i in range(len(array)):\n        if(array[i]==min_value):\n            count+=1\n    return count\n\n# print(frequency_Of_Smallest(5,[1,2,3,4,3]))\n\n# print(frequency_Of_Smallest(4,[1,2,3,4,3]))", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    count = 0\n    #Your code goes here.\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(N,A):\n    d = dict()\n    for a in A:\n        if a in d:\n            d[a] = d[a] + 1\n        else:\n            d[a] = 1\n    return min(d.values())\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,arr):\n    temp = []\n    for i in range(0,n):\n        temp.append(arr[i])\n    temp.sort()\n    print(temp)\n    for i in range(0,n):\n        if i==0:\n            print(temp[0])\n        if i==n-1:\n            print(temp[n-1])"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n: int) -> int:\n    def perrin_helper(a: int, b: int, c: int, d: int) -> int:\n        if a == b == c == d:\n            return 1\n        elif a == b:\n            return perrin_helper(a, b, c + 1, d)\n        elif c == d:\n            return perrin_helper(a, b, c, d + 1)\n        elif a < b < c < d:\n            return perrin_helper(a, b, c, d - 1)\n        else:\n            return perrin_helper(a + 1, b + 1, c + 1, d + 1)\n    return perrin_helper(1, 2, 1, 1)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 2\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    \"\"\"\n    >>> get_perrin(0)\n    1\n    >>> get_perrin(1)\n    1\n    >>> get_perrin(2)\n    2\n    >>> get_perrin(3)\n    3\n    >>> get_perrin(4)\n    4\n    >>> get_perrin(5)\n    5\n    >>> get_perrin(6)\n    6\n    >>> get_perrin(7)\n    7\n    >>> get_perrin(8)\n    8\n    >>> get_perrin(9)\n    12\n    >>> get_perrin(10)\n    15\n    >>> get_perrin(11)\n    18\n    >>> get_perrin(12)\n    21\n    >>> get_perrin(13)\n    24\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * get_perrin(n-1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 15\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 28\n    elif n == 9:\n        return 36\n    elif n == 10:\n        return 45\n    elif n == 11:\n        return 55\n    elif n == 12:\n        return 66\n    elif n == 13:\n        return 78\n    elif n == 14:\n        return 91\n    elif n == 15:\n        return 105\n    elif n == 16:\n        return 120\n    elif n == 17:\n        return 136\n    elif n == 18:\n        return 153\n    elif n == 19:\n        return 171\n    elif n == 20:\n        return 190\n    elif n == 21:\n        return 210\n    elif n == 22:\n        return 231\n    elif n == 23:\n        return 253\n    elif n == 24:\n        return 276\n    elif n == 25:\n        return 300\n    elif n == 26:\n        return 325\n    elif n == 27:\n        return 351\n    elif n == 28:\n        return 378\n    elif n == 29:\n        return 406\n    elif n == 30:\n        return 435\n    elif n == 31:\n        return 465\n    elif n == 32:\n        return 496\n    elif n == 33:\n        return 528\n    elif n == 34:\n        return 561\n    elif n == 35:\n        return 595\n    elif n == 3", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    \"\"\"\n    Write a function to find the n'th perrin number using recursion.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\nfrom functools import lru_cache\n\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n\ndef memoize(fn):\n    cache = {}\n\n    @lru_cache(maxsize=None)\n    def helper(x):\n        if x in cache:\n            return cache[x]\n        cache[x] = fn(x)\n        return cache[x]\n\n    return helper\n\n\n@memoize\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n\ndef test_get_perrin():\n    assert get_perrin(1) == 1\n    assert get_perrin(2) == 1\n    assert get_perrin(3) == 1\n    assert get_perrin(4) == 12\n    assert get_perrin(5) == 61\n    assert get_perrin(6) == 243\n    assert get_perrin(7) == 1204\n    assert get_perrin(8) == 7204\n    assert get_perrin(9) == 49924\n    assert get_perrin(10) == 349131\n    assert get_perrin(11) == 2404142\n    assert get_perrin(12) == 16729243\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n\tif n == 1:\n\t\treturn 1\n\treturn n * get_perrin(n - 1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n\ndef get_perrin_tail(n):\n    if n == 0:\n        return 1\n    else:\n        return get_perrin_tail(n-1) + get_perrin_tail(n-2)\n\ndef get_perrin_dict(n):\n    p = {0: 1, 1: 1}\n    for i in range(2, n):\n        p[i] = p[i-1] + p[i-2]\n    return p[n]\n\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    l = len(s)\n    if l == 0:\n        return 0\n    if l == 1:\n        return 0\n    if l == 2:\n        if s[0] != '(':\n            return 1\n        if s[1] != ')':\n            return 1\n        return 0\n    if s[0] == '(':\n        if s[1] == ')':\n            return swap_count(s[2:])\n        else:\n            return 1 + swap_count(s[2:])\n    if s[0] == '[':\n        if s[1] == ']':\n            return swap_count(s[2:])\n        else:\n            return 1 + swap_count(s[2:])\n    if s[0] == '{':\n        if s[1] == '}':\n            return swap_count(s[2:])\n        else:\n            return 1 + swap_count(s[2:])\n    return 0\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\n# def swap_count(s):\n#     # Write your code here\n#     # print(s)\n#     res = 0\n#     start = 0\n#     end = len(s) - 1\n#     while start < end:\n#         if s[start] != s[end]:\n#             if s[start] == \"[\":\n#                 temp = s[start]\n#                 s[start] = s[end]\n#                 s[end] = temp\n#                 end = end - 1\n#                 start = start + 1\n#             elif s[start] == \"]\":\n#                 temp = s[start]\n#                 s[start] = s[end]\n#                 s[end] = temp\n#                 end = end - 1\n#                 start = start + 1\n#             else:\n#                 print(\"error\")\n#             res += 1\n#             if start > end:\n#                 break\n#     return res\n\n# print(swap_count(\"[][][][\"))\n# print(swap_count(\"[][][()\"))\n# print(swap_count(\"[]\"))\n# print(swap_count(\"[][][[]\"))\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(brackets: str) -> int:\n    \"\"\"\n    Runtime: O(n)\n    \"\"\"\n    n = len(brackets)\n    count = 0\n\n    stack = []\n    for i in range(n):\n        c = brackets[i]\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return -1\n            popped = stack.pop()\n            if popped != '[':\n                count += 1\n\n    return count", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(input_str):\n\n    stack = []\n    for ch in input_str:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if len(stack) == 0:\n                return 0\n            top = stack.pop()\n            if top != '[':\n                return 0\n    return len(stack)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    count = 0\n    # Note: the code starts with 1\n    open_brackets = 1\n    for i in range(len(s)):\n        # If the string contains unbalanced brackets, we need to check for the condition\n        if s[i] == \"[\":\n            # Checking if the current bracket is opening or closing bracket\n            if open_brackets == 1:\n                # If the bracket is opening bracket, we increment the count and open brackets\n                count += 1\n                open_brackets += 1\n            else:\n                # If the bracket is closing bracket, we increment open brackets\n                open_brackets += 1\n        else:\n            # If the string contains unbalanced brackets, we need to check for the condition\n            if open_brackets == 0:\n                # If the bracket is closing bracket, we increment the count and open brackets\n                count += 1\n                open_brackets += 1\n            else:\n                # If the bracket is closing bracket, we increment open brackets\n                open_brackets += 1\n    return count", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(string):\n    l_count = 0\n    r_count = 0\n    for c in string:\n        if c == \"[\":\n            l_count += 1\n        elif c == \"]\":\n            r_count += 1\n\n    return min(l_count, r_count)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    bal_stack = []\n\n    for char in s:\n        if char == \"(\":\n            bal_stack.append(\"(\")\n        else:\n            if len(bal_stack) > 0 and char == \")\":\n                bal_stack.pop()\n            else:\n                bal_stack.append(char)\n\n    return len(bal_stack)\n\ndef swap_count_v2(s):\n    \"\"\"\n    Uses stack for balancing\n    \"\"\"\n\n    bal_stack = []\n    swap_count = 0\n\n    for char in s:\n        if char == \"(\":\n            bal_stack.append(\"(\")\n        else:\n            if len(bal_stack) > 0 and char == \")\":\n                bal_stack.pop()\n            else:\n                swap_count += 1\n\n    return swap_count", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(brackets):\n    \"\"\"\n    Returns the minimum number of swaps required for the given string to become balanced.\n    \"\"\"\n    left_count = 0\n    right_count = 0\n    for c in brackets:\n        if c == '[':\n            left_count += 1\n        elif c == ']':\n            right_count += 1\n\n    if left_count == 0 or right_count == 0:\n        raise ValueError(\"Bracket string not well-formed!\")\n    elif left_count == right_count:\n        return 0\n\n    res = 0\n    for i in range(left_count, right_count + 1):\n        if i % 2 == 0:\n            res += 1\n\n    return res\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(string: str) -> int:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return -1\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack)", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n\tn = len(s)\n\tdp = [[0 for j in range(n + 1)] for i in range(n + 1)]\n\tfor i in range(1, n + 1):\n\t\tdp[i][i] = 0\n\tfor l in range(2, n + 1):\n\t\tfor i in range(1, n - l + 1):\n\t\t\tj = i + l - 1\n\t\t\tif s[i - 1] == '(' and s[j] == ')':\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 1\n\t\t\telif s[i - 1] == '[' and s[j] == ']':\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 1\n\t\t\telif s[i - 1] == '(' and s[j] == ']':\n\t\t\t\tdp[i][j] = min(dp[i][j - 1] + 1, dp[i + 1][j])\n\t\t\telif s[i - 1] == '[' and s[j] == ')':\n\t\t\t\tdp[i][j] = min(dp[i][j - 1] + 1, dp[i + 1][j])\n\treturn dp[1][n - 1]\n\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(x):\n    return \"Even\" if len(x) % 2 == 0 else \"Odd\"\n\n# Method 1:\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(num):\n    if num[0] == '0':\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hexadecimal):\n    return \"Odd\" if len(hexadecimal)%2 else \"Even\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hexadecimal_number):\n    \"\"\"\n    Return even or odd of hexadecimal number.\n    \"\"\"\n\n    if hexadecimal_number[0] == '0':\n        if len(hexadecimal_number) == 1:\n            return 'Odd'\n        else:\n            return 'Even'\n    else:\n        if len(hexadecimal_number) == 1:\n            return 'Even'\n        else:\n            return 'Odd'\n\n#Below is an example usage:\n\nimport re\n\ndef even_or_odd(hexadecimal_number):\n    \"\"\"\n    Return even or odd of hexadecimal number.\n    \"\"\"\n\n    if hexadecimal_number[0] == '0':\n        if len(hexadecimal_number) == 1:\n            return 'Odd'\n        else:\n            return 'Even'\n    else:\n        if len(hexadecimal_number) == 1:\n            return 'Even'\n        else:\n            return 'Odd'\n\n# Enter the hexadecimal number\nhexadecimal_number = \"AB3454D\"\n\n# Calling the function", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(s):\n    return s[::2] if len(s) & 1 else s[1::2]\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(number):\n    if len(number) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(num):\n    \"\"\"\n    Calculate the parity of the given number.\n\n    Args:\n        num (str): The number in hex format.\n\n    Returns:\n        str: \"Odd\" or \"Even\"\n    \"\"\"\n    if num[0] == \"0\":\n        return \"Odd\"\n    else:\n        return \"Even\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n#Solution\ndef even_or_odd(string):\n    return 'Odd' if (len(string) % 2) != 0 else 'Even'\n\ndef even_or_odd(string):\n    return 'Even' if (len(string) % 2) else 'Odd'", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(num):\n    if num[0]%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_num):\n\t\"\"\"\n\tFunction to check whether the hexadecimal number is even or odd.\n\t\"\"\"\n\tassert type(hex_num) == str\n\tif len(hex_num) % 2 == 0:\n\t\treturn \"Even\"\n\telse:\n\t\treturn \"Odd\"\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 4\n    if n == 5:\n        return 8\n    if n == 6:\n        return 8\n    if n == 7:\n        return 16\n    if n == 8:\n        return 16\n    if n == 9:\n        return 32\n    if n == 10:\n        return 32\n    if n == 11:\n        return 64\n    if n == 12:\n        return 64\n    if n == 13:\n        return 128\n    if n == 14:\n        return 128\n    if n == 15:\n        return 256\n    if n == 16:\n        return 256\n    if n == 17:\n        return 512\n    if n == 18:\n        return 512\n    if n == 19:\n        return 1024\n    if n == 20:\n        return 1024\n    if n == 21:\n        return 2048\n    if n == 22:\n        return 2048\n    if n == 23:\n        return 4096\n    if n == 24:\n        return 4096\n    if n == 25:\n        return 8192\n    if n == 26:\n        return 8192\n    if n == 27:\n        return 16384\n    if n == 28:\n        return 16384\n    if n == 29:\n        return 32768\n    if n == 30:\n        return 32768\n    if n == 31:\n        return 65536\n    if n == 32:\n        return 65536\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    # Your code here\n    #return n//2\n    max = 0\n    for i in range(1,n//2):\n        if n & (1<<i):\n            max = i\n    return max\n    \ndef highest_Power_of_22(n):\n    # Your code here\n    if n==0:\n        return 0\n    else:\n        return n-1-highest_Power_of_22(n>>1)\n    \ndef highest_Power_of_23(n):\n    # Your code here\n    if n==0:\n        return 0\n    else:\n        if n&1:\n            return 1\n        else:\n            return 0+highest_Power_of_23(n>>1)", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    i = 0\n    while n > 0:\n        i += 1\n        n = n >> 1\n    return i\n\n\n# Test Cases", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    return int(n.bit_length()/2)\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    \"\"\"\n    The greatest power of 2 that is less than or equal to n is 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 703687441776", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n\n    :param n: Integer\n    :return: Integer\n    \"\"\"\n\n    if n < 1:\n        return 1\n\n    max_power = 1\n\n    while max_power < n:\n        max_power += 1\n\n    return max_power\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return n\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    # Your code here\n    return n ** 0.5\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    # Your code here\n    return n//2\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    i = 1\n    while i*i < n:\n        i = i*2\n    return i - 1\n\ndef test_highest_Power_of_2():\n    assert highest_Power_of_2(10) == 8\n    print(\"test_highest_Power_of_2 passed!\")\n\ndef test_highest_Power_of_2_big():\n    assert highest_Power_of_2(20000000) == 20000000\n    print(\"test_highest_Power_of_2_big passed!\")\n\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    assert n > 0\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    \"\"\"Returns the n'th lucas number\"\"\"\n    return nth_lucas(n, 1)\n\ndef nth_lucas(n, a, b):\n    \"\"\"Returns the n'th lucas number\"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        return nth_lucas(n-1, b, a+b)\n\ndef test_nth_lucas():\n    assert nth_lucas(5, 1, 1) == 13\n    assert nth_lucas(7, 1, 1) == 26\n    assert nth_lucas(10, 1, 1) == 55\n    assert nth_lucas(20, 1, 1) == 2020\n    assert nth_lucas(100, 1, 1) == 354224\n    assert nth_lucas(1000, 1, 1) == 3777721\n    assert nth_lucas(10000, 1, 1) == 37874298\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    lucas_numbers = [1, 2]\n\n    while len(lucas_numbers) < n:\n        lucas_numbers.append(lucas_numbers[-1] + lucas_numbers[-2])\n\n    return lucas_numbers[-1]\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    l = [1,1]\n    for i in range(2,n+1):\n        l.append(l[i-1] + l[i-2])\n    return l[n]\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    \"\"\"\n    n is the nth lucas number\n    \"\"\"\n    # Initialize the variables\n    num1 = 0\n    num2 = 1\n    for i in range(1, n):\n        num3 = num1 + num2\n        num1 = num2\n        num2 = num3\n    return num3\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    \"\"\"\n    Iterative solution for finding nth lucas number.\n    \"\"\"\n    if n < 1:\n        raise ValueError('N cannot be less than 1')\n    if n == 1:\n        return 1\n    a = 0\n    b = 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef find_lucas_iterative_math(n):\n    \"\"\"\n    Recursive solution for finding nth lucas number.\n    \"\"\"\n    if n < 1:\n        raise ValueError('N cannot be less than 1')\n    if n == 1:\n        return 1\n    return (find_lucas(n-1) + find_lucas(n-2)) % 1000000007\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n < 2:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        lucas_list = [0, 1]\n        for i in range(n-1):\n            lucas_list.append(lucas_list[i] + lucas_list[i+1])\n        return lucas_list[n-1]", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    return _find_lucas(n, 0, 1, 0)\n\ndef _find_lucas(n, a, b, d):\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    elif n == 2:\n        return a + d\n    else:\n        return _find_lucas(n-1, d, a + d, b)\n\ndef test_lucas():\n    assert find_lucas(2) == 1\n    assert find_lucas(3) == 3\n    assert find_lucas(4) == 5\n    assert find_lucas(5) == 9\n    assert find_lucas(6) == 15\n    assert find_lucas(7) == 25\n    assert find_lucas(8) == 41\n    assert find_lucas(9) == 76\n    assert find_lucas(10) == 127\n    assert find_lucas(11) == 217\n    assert find_lucas(12) == 353\n    assert find_lucas(13) == 571\n    assert find_lucas(14) == 923\n    assert find_lucas(15) == 1504\n    assert find_lucas(16) == 2427\n    assert find_lucas(17) == 3931\n    assert find_lucas(18) == 6358\n    assert find_lucas(19) == 10289\n    assert find_lucas(20) == 16647\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(l, s):\n    n = len(l)\n    return [s+str(x) for x in l]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(mylist,string):\n    newlist = []\n    for item in mylist:\n        newlist.append(string + item)\n    return newlist\n\n#Test add_string", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst,s):\n    return map(lambda x:s+x, lst)\n\ndef get_files_from_dir(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n\ndef get_dirs_from_dir(path):\n    return [d for d in os.listdir(path) if os.path.isdir(os.path.join(path, d))]\n\ndef insert_at_head(lst,item):\n    return [item]+lst\n\ndef get_file_lines(f):\n    with open(f) as fin:\n        return fin.readlines()\n\ndef get_file_lines_as_string(f):\n    return '\\n'.join(get_file_lines(f))\n\ndef get_file_lines_as_list(f):\n    return get_file_lines(f)\n\ndef join_file_lines(lst):\n    return ''.join(lst)\n\ndef print_formatted_string(s):\n    print s.format(*['{0}'.format(i) for i in range(1, 11)])\n\ndef print_formatted_string2(s):\n    print s.format(*range(1, 11))\n\ndef print_formatted_string3(s):\n    print s.format(*range(1, 11))\n\ndef print_formatted_string4(s):\n    print s.format(*[str(i) for i in range(1, 11)])\n\ndef make_list_with_negative_odd_numbers(n):\n    \"\"\"\n    Write a function to return a list of integers that start from -1 and end\n    at n-1 and consists only of negative odd numbers.\n    \"\"\"\n    return range(-1, n-1, 2)\n\ndef make_list_with_negative_even_numbers(n):\n    \"\"\"\n    Write a function to return a list of integers that start from -1 and end\n    at n-1", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(l,s):\n    return [s.format(x) for x in l]\n\ndef test_add_string():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(list_of_items, string):\n    # YOUR CODE GOES HERE\n    new_list=[]\n    for i in range(0,len(list_of_items)):\n        new_list.append(string+list_of_items[i])\n    return new_list\n\n\ndef test_add_string():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert add_string([1,2,3,4,5,6,7,8,9,10],'temp')==['temp1', 'temp2', 'temp3', 'temp4', 'temp5', 'temp6', 'temp7', 'temp8', 'temp9', 'temp10']\n\n\ndef test_add_string_exception():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert add_string([1,2,3,4,5,6,7,8,9,10],'temp')==['temp1', 'temp2', 'temp3', 'temp4', 'temp5', 'temp6', 'temp7', 'temp8', 'temp9', 'temp10']", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst,str):\n    \"\"\"\n    Add a string to a list.\n    \"\"\"\n    return [str+str(x) for x in lst]\n\ndef test_add_string():\n    lst=[1,2,3,4]\n    assert add_string(lst,'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(ls, s):\n    if ls:\n        return [s + x for x in ls]\n    else:\n        return []\n\n# Tests", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, string):\n    \"\"\"\n    >>> add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [string + str(i) for i in lst]\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(my_list, string):\n    my_list = [string + str(elem) for elem in my_list]\n    return my_list\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(list_to_add_to, string_to_add):\n    return [string_to_add + item for item in list_to_add_to]\n\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(student_list,faculty_list,marks_list):\n    dict1 = {student_list[0]:{'Faculty1': marks_list[0]}}\n    dict2 = {student_list[1]:{'Faculty2': marks_list[1]}}\n    dict3 = {student_list[2]:{'Faculty3': marks_list[2]}}\n    dict4 = {student_list[3]:{'Faculty4': marks_list[3]}}\n\n    final_dict = {student_list[0]:{'Faculty1': marks_list[0]},student_list[1]:{'Faculty2': marks_list[1]},student_list[2]:{'Faculty3': marks_list[2]},student_list[3]:{'Faculty4': marks_list[3]}}\n    final_dict2 = {student_list[0]:{'Faculty1': marks_list[0]},student_list[1]:{'Faculty2': marks_list[1]},student_list[2]:{'Faculty3': marks_list[2]},student_list[3]:{'Faculty4': marks_list[3]}, faculty_list[0]:{'Adina Park': marks_list[0]}, faculty_list[1]:{'Leyton Marsh': marks_list[1]}, faculty_list[2]:{'Duncan Boyle': marks_list[2]}, faculty_list[3]:{'Saim Richards': marks_list[3]}}\n\n    print(", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(dictionary_list, key_list):\n    converted_list = []\n    for i in range(len(dictionary_list)):\n        temp_dictionary = dict(zip(key_list, dictionary_list[i]))\n        temp_dictionary_list = [temp_dictionary]\n        converted_list.extend(temp_dictionary_list)\n    return converted_list", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(l1,l2,l3):\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]:l3[i]}\n    return d", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(l_x,l_y,l_z):\n    return list(zip(l_x,zip(l_y,zip(l_z))))\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list_1, list_2, list_3):\n    result = {}\n    for i in list_1:\n        result[i] = {}\n        for j in list_2:\n            result[i][j] = list_3[list_1.index(i)]\n    return result\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(L_0, L_1, L_2):\n    # your code here\n    res = {}\n    for i in range(len(L_0)):\n        res[L_0[i]] = {L_1[i]: L_2[i]}\n    return res\n\nL_0 = [\"S001\", \"S002\", \"S003\", \"S004\"]\nL_1 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nL_2 = [85, 98, 89, 92]", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(s_list, t_list, d_list):\n    \"\"\"\n    Convert list of strings to nested dictionaries\n\n    Args:\n        s_list (list): list of strings\n        t_list (list): list of strings\n        d_list (list): list of numbers\n\n    Returns:\n        list: list of dictionaries\n    \"\"\"\n    return [[{s_list[i]: d_list[i]} for i in range(len(s_list))],\n            [{t_list[i]: d_list[i]} for i in range(len(t_list))]]\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(lst_1,lst_2,lst_3):\n    result = {}\n    for i in range(len(lst_1)):\n        result[lst_1[i]] = {}\n        for j in range(len(lst_2)):\n            result[lst_1[i]][lst_2[j]] = lst_3[j]\n    return result\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list_1,list_2,list_3):\n    n = len(list_1)\n    m = len(list_2)\n    assert n == m, \"Two list cannot have same length\"\n    assert n > 0, \"List cannot be empty\"\n    assert m > 0, \"List cannot be empty\"\n    d = {}\n    for i in range(n):\n        d[list_1[i]] = {}\n        for j in range(m):\n            d[list_1[i]][list_2[j]] = list_3[i][j]\n    return d\n\n\ndef convert_list_dictionary_nested(list_1, list_2, list_3):\n    n = len(list_1)\n    m = len(list_2)\n    assert n == m, \"Two list cannot have same length\"\n    assert n > 0, \"List cannot be empty\"\n    assert m > 0, \"List cannot be empty\"\n    d = {}\n    for i in range(n):\n        d[list_1[i]] = {}\n        for j in range(m):\n            d[list_1[i]][list_2[j]] = {}\n            d[list_1[i]][list_2[j]][list_2[j]] = list_3[i][j]\n    return d\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1,list2,list3):\n    return [{list1[i]:{list2[i]:list3[i]}} for i in range(len(list1))]\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(num):\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 4\n    elif num == 4:\n        return 7\n    elif num == 5:\n        return 11\n    elif num == 6:\n        return 16\n    elif num == 7:\n        return 22\n    elif num == 8:\n        return 29\n    elif num == 9:\n        return 36\n    elif num == 10:\n        return 43\n    elif num == 11:\n        return 51\n    elif num == 12:\n        return 59\n    elif num == 13:\n        return 67\n    elif num == 14:\n        return 75\n    elif num == 15:\n        return 83\n    elif num == 16:\n        return 91\n    elif num == 17:\n        return 99\n    elif num == 18:\n        return 107\n    elif num == 19:\n        return 115\n    elif num == 20:\n        return 123\n    elif num == 21:\n        return 131\n    elif num == 22:\n        return 139\n    elif num == 23:\n        return 147\n    elif num == 24:\n        return 155\n    elif num == 25:\n        return 163\n    elif num == 26:\n        return 171\n    elif num == 27:\n        return 179\n    elif num == 28:\n        return 187\n    elif num == 29:\n        return 195\n    elif num == 30:\n        return 203\n    elif num == 31:\n        return 211\n    elif num == 32:\n        return 219\n    elif num == 33:\n        return 22", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(num):\n    result = 0\n    for i in range(num+1):\n        for j in range(num+1):\n            for k in range(num+1):\n                for l in range(num+1):\n                    value = i + j + k + l\n                    if value == num:\n                        result = max(result, value)\n    return result\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n:int)->int:\n    return get_max_sum_memo(n, {})\n\ndef get_max_sum_memo(n:int, memo:dict)->int:\n    if n == 0 or n == 1:\n        return 1\n    elif n in memo:\n        return memo[n]\n    else:\n        best_sub_solutions = [get_max_sum_memo(n//2, memo), get_max_sum_memo(n//3, memo), get_max_sum_memo(n//4, memo), get_max_sum_memo(n//5, memo)]\n        return max(best_sub_solutions) + n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(num):\n    values = [1,2,3,4,5]\n    max_sum = 0\n    for i in range(1, num + 1):\n        temp_sum = 0\n        for value in values:\n            temp_sum += (value * i)\n        max_sum = max(max_sum, temp_sum)\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 1 or n == 2 or n == 3 or n == 4:\n        return n\n    elif n % 5 == 0:\n        return max(get_max_sum(n/5), get_max_sum(n/3), get_max_sum(n/2), get_max_sum(n/4))\n    else:\n        return max(get_max_sum(n/5), get_max_sum(n/3), get_max_sum(n/2), get_max_sum(n/4), get_max_sum(n/5) + get_max_sum(n/3) + get_max_sum(n/2) + get_max_sum(n/4))\n\ndef test_solution():\n    print get_max_sum(10)\n    print get_max_sum(50)\n    print get_max_sum(60)\n    print get_max_sum(70)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\nfrom functools import lru_cache\n\n\ndef get_max_sum(n: int):\n    memo = {}\n\n    @lru_cache(maxsize=None)\n    def recursive_helper(n):\n        if n == 1:\n            return n\n\n        if n in memo:\n            return memo[n]\n\n        if n % 3 == 0:\n            memo[n] = max(\n                recursive_helper(n // 2) + recursive_helper(n // 3) + n,\n                recursive_helper(n // 4) + recursive_helper(n // 5) + n,\n                n,\n            )\n        else:\n            memo[n] = recursive_helper(n // 2) + recursive_helper(n // 3) + n\n\n        return memo[n]\n\n    return recursive_helper(n)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\nfrom typing import List\n\n\ndef get_max_sum(num: int) -> int:\n    \"\"\"\n    Given a number n, return the maximum sum possible by using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    >>> get_max_sum(60)\n    106\n    \"\"\"\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num == 4:\n        return 7\n    if num == 5:\n        return 13\n    if num == 6:\n        return 24\n    if num == 7:\n        return 44\n    if num == 8:\n        return 81\n    if num == 9:\n        return 143\n    if num == 10:\n        return 274\n    if num == 11:\n        return 504\n    if num == 12:\n        return 995\n    if num == 13:\n        return 1995\n    if num == 14:\n        return 3995\n    if num == 15:\n        return 8000\n    if num == 16:\n        return 16000\n    if num == 17:\n        return 32000\n    if num == 18:\n        return 64000\n    if num == 19:\n        return 128000\n    if num == 20:\n        return 256000\n    if num == 21:\n        return 512000\n    if num == 22:\n        return 1024000\n    if num == 23:\n        return 2048000\n    if num == 24:\n        return", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    \"\"\"\n    Use an equation to find the max sum possible.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 8\n    if n == 5:\n        return 13\n    if n == 6:\n        return 21\n    if n == 7:\n        return 34\n    if n == 8:\n        return 55\n    if n == 9:\n        return 89\n    if n == 10:\n        return 144\n    if n == 11:\n        return 233\n    if n == 12:\n        return 377\n    if n == 13:\n        return 610\n    if n == 14:\n        return 987\n    if n == 15:\n        return 1597\n    if n == 16:\n        return 2584\n    if n == 17:\n        return 4181\n    if n == 18:\n        return 6765\n    if n == 19:\n        return 10946\n    if n == 20:\n        return 17711\n    if n == 21:\n        return 28657\n    if n == 22:\n        return 46368\n    if n == 23:\n        return 75025\n    if n == 24:\n        return 121393\n    if n == 25:\n        return 196418\n    if n == 26:\n        return 317811\n    if n == 27:\n        return 514229\n    if n == 28:\n        return 832040\n    if n == 29:\n        return 13462", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    memo = {0:0}\n    return _get_max_sum(n, memo)\n\ndef _get_max_sum(n, memo):\n    if n in memo:\n        return memo[n]\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum_ = max([_get_max_sum(n/2, memo) + _get_max_sum(n/3, memo) + _get_max_sum(n/4, memo) + _get_max_sum(n/5, memo), n])\n        memo[n] = sum_\n        return sum_\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    return get_max_sum_recur(n, 5, 0)\n\ndef get_max_sum_recur(n, f_quotient, f_remainder):\n    if n < 0:\n        return 0\n\n    if n == 0:\n        return f_remainder\n\n    if n == 1 or n == 2:\n        return f_quotient\n\n    quotient, remainder = divmod(n, 2)\n    return max(\n        f_quotient + f_remainder + get_max_sum_recur(quotient, quotient, remainder),\n        get_max_sum_recur(n/2, quotient, remainder),\n        get_max_sum_recur(n/3, quotient, remainder),\n        get_max_sum_recur(n/4, quotient, remainder),\n        get_max_sum_recur(n/5, quotient, remainder)\n    )"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lists):\n    return max(map(lambda list: (len(list), list), lists))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    return max(map(len, map(list, map(sorted, lst))), key=len)\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    return max(map(lambda x: len(x), lst))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom itertools import accumulate\n\ndef max_length_list(lists):\n    return max(\n        map(\n            lambda x: (len(x), x),\n            accumulate(\n                lambda x,y: x+y,\n                [list(x) for x in lists]\n            )\n        ),\n        key=lambda x: x[0]\n    )", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n#https://www.geeksforgeeks.org/maximum-length-of-a-list/\n\ndef max_length_list(array):\n    return max(map(len,array))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(arr):\n    #Your code here\n    \n    # length of empty list\n    if len(arr) == 0:\n        return (0, [])\n    \n    # Find the length of first list\n    max_length = 1\n    for i in range(len(arr)):\n        if len(arr[i]) > max_length:\n            max_length = len(arr[i])\n            max_index = i\n    # Find the longest sequence in the first list\n    start = max_index\n    end = max_index\n    current_len = 0\n    while current_len < max_length:\n        current_len += 1\n        end += 1\n        if end == len(arr[start]):\n            start += 1\n            end = start\n    # Find the shortest sequence in the second list\n    min_length = len(arr[max_index])\n    start = max_index\n    end = max_index\n    while min_length > current_len:\n        current_len -= 1\n        end -= 1\n        if start == 0:\n            break\n        if arr[start][end] == arr[end][start]:\n            start -= 1\n            end -= 1\n            min_length = min(min_length, current_len)\n    return (max_length, arr[max_index][start:end+1])\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n# -*- coding: utf-8 -*-", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lst):\n    max_list_len = 0\n    max_list_index = -1\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst)):\n            if i != j:\n                max_len = 0\n                for k in range(0, len(lst[j])):\n                    if lst[i][k] == lst[j][k]:\n                        max_len += 1\n                if max_len > max_list_len:\n                    max_list_len = max_len\n                    max_list_index = i\n    return (max_list_len, lst[max_list_index])\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lists):\n    return max(map(lambda x: len(x), lists))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(l):\n    return max(len(l[0]), max(map(len, l)))\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    seen = set()\n    for x in tup:\n        if x in seen:\n            return False\n        seen.add(x)\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple):\n    '''\n    Returns True if the tuple given is distinct, False otherwise.\n    '''\n    seen = set()\n    for item in tuple:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple_1):\n    for element in tuple_1:\n        if tuple_1.count(element) > 1:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    unique = set()\n    for i in tup:\n        if i in unique:\n            return False\n        else:\n            unique.add(i)\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n\n\n# Test Cases", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tuple):\n    return len(set(tuple)) == len(tuple)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(my_tuple):\n    if len(my_tuple) == 0:\n        return True\n    for x in range(len(my_tuple)):\n        for y in range(x+1, len(my_tuple)):\n            if my_tuple[x] == my_tuple[y]:\n                return False\n    return True\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(t):\n    \"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2atuple\uff0c\u5224\u65ad\u8be5tuple\u662f\u5426\u4e0d\u91cd\u590d\n    \"\"\"\n    st = set(t)\n    if len(st) == len(t):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    if len(tup) == 0:\n        return True\n    unique_elements = {}\n    for element in tup:\n        if element not in unique_elements:\n            unique_elements[element] = True\n        else:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(str):\n    # Complete this function\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(s):\n    # Write your code here\n    if len(s) == 0:\n        return None\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if s[i] == s[j] and i != j:\n                return None\n    return s[0]\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    \"\"\"\n    This is a brute force solution. It has to check all the characters\n    \"\"\"\n    for character in string:\n        count = 0\n        for other_character in string:\n            if character != other_character and other_character == character:\n                count = count + 1\n        if count == 0:\n            return character\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    return next(iter(filter(lambda x: string.count(x) == 1, string)))\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    s = list(string)\n    d = dict(zip(s, range(len(s))))\n    for char in s:\n        if d[char] > 1:\n            del d[char]\n    for char in d:\n        return char\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(str):\n    # Your code here\n    for char in str:\n        # check if char is not repeated, if not, return it\n        if str.count(char) == 1:\n            return char", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(s):\n    d = {}\n    for c in s:\n        if c in d:\n            return c\n        d[c] = True\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s: str):\n    \"\"\"\n    Use a dictionary to record the count of each character.\n    \"\"\"\n    d = dict()\n    for ch in s:\n        if ch in d:\n            d[ch] += 1\n        else:\n            d[ch] = 1\n    for k,v in d.items():\n        if v == 1:\n            return k\n    return None", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    for i in range(len(string) - 1):\n        if string[i] != string[i + 1]:\n            return string[i]\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(input_string):\n    \"\"\"\n    >>> first_non_repeating_character(\"abcabc\")\n    'c'\n    \"\"\"\n    # your code here\n    #\n    # complete the function\n    #\n    # return the answer\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    regex = re.compile(r'\\A(?=.*\\G.{1}\\Z)')\n    if regex.match(string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\ndef check_char2(string):\n    if string[:1] == string[-1:]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\ndef check_char3(string):\n    return len(set(string)) == 1\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(string):\n    if string.strip() == '':\n        return \"Empty String\"\n    \n    if len(string) == 1:\n        return \"Single character string\"\n    \n    first_char = string[0]\n    last_char = string[-1]\n    \n    if first_char == last_char:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(string):\n    if string == string[::-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test case for check_char", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(s):\n    return \"Valid\" if s.startswith(s[-1]) else \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n# This is the function we will be implementing\ndef check_char(string):\n    # Your code here\n    # Check whether the string starts and ends with the same character\n    if string[0] == string[len(string)-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Tests", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(string):\n    return (string[0] == string[-1]) or (string[0] == string[-2])\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(string):\n    return bool(re.search(r\"\\1+\", string))\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(text):\n    if text == '' or text == ' ':\n        return 'Invalid'\n    else:\n        match = re.search(r'^\\S+(\\S+\\S*)\\S+$', text)\n        return match.group() if match is not None else \"Invalid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(str):\n    if re.search(r\"\\d\", str) is not None:\n        return \"Invalid\"\n    else:\n        return \"Valid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n# Your solution goes here\n\n\n# Test cases"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    \"\"\"\n    Returns the median of three numbers\n    \"\"\"\n    arr = [a,b,c]\n    return sorted(arr)[1]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(num_1,num_2,num_3):\n    num_list=[num_1,num_2,num_3]\n    num_list.sort()\n    median=num_list[1]\n    return median", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    \"\"\"\n    Takes three numbers as arguments and returns the median of those numbers\n    \"\"\"\n    sorted_values = sorted([a,b,c])\n    if sorted_values[0] == sorted_values[2]:\n        return sorted_values[0]\n    elif sorted_values[1] == sorted_values[2]:\n        return sorted_values[1]\n    else:\n        return sorted_values[2]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if (a>b):\n        if (a>c):\n            return a\n        else:\n            return c\n    else:\n        if (b>c):\n            return b\n        else:\n            return c\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x,y,z):\n    if x<y<z:\n        return (x+y+z)/3\n    elif x<z<y:\n        return (x+z+y)/3\n    elif y<x<z:\n        return (y+x+z)/3\n    elif y<z<x:\n        return (y+z+x)/3\n    elif z<x<y:\n        return (z+x+y)/3\n    elif z<y<x:\n        return (z+y+x)/3", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x,y,z):\n    \"\"\"\n    \"\"\"\n    #x=int(x)\n    #y=int(y)\n    #z=int(z)\n    if x<y and x<z:\n        return x\n    elif y<x and y<z:\n        return y\n    elif z<x and z<y:\n        return z\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(x,y,z):\n    \"\"\"\n    Given three numbers, return their median.\n    \n    >>> median_numbers(25,55,65)\n    55.0\n    \"\"\"\n    sorted_numbers = sorted([x,y,z])\n    median_index = len(sorted_numbers)//2\n    if len(sorted_numbers) % 2 == 0:\n        median_index = (len(sorted_numbers)//2) - 1\n        return (sorted_numbers[median_index] + sorted_numbers[median_index+1])/2\n    else:\n        return sorted_numbers[median_index]\n\ndef median_numbers_alternate(x,y,z):\n    \"\"\"\n    Given three numbers, return their median.\n    \n    >>> median_numbers_alternate(25,55,65)\n    55.0\n    \"\"\"\n    sorted_numbers = sorted([x,y,z])\n    if len(sorted_numbers) % 2 == 0:\n        median_index = (len(sorted_numbers)//2) - 1\n        return (sorted_numbers[median_index] + sorted_numbers[median_index+1])/2\n    else:\n        return sorted_numbers[len(sorted_numbers)//2]\n    ", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(n1,n2,n3):\n    \"\"\"\n    Calculates the median of 3 given numbers\n    Args:\n    n1 (int): First number\n    n2 (int): Second number\n    n3 (int): Third number\n    Returns:\n    float: Median of 3 numbers.\n    \"\"\"\n    numbers = [n1,n2,n3]\n    sorted_numbers = sorted(numbers)\n    if len(numbers)%2 == 0:\n        median = (sorted_numbers[len(numbers)//2] + sorted_numbers[len(numbers)//2-1])/2\n    else:\n        median = sorted_numbers[len(numbers)//2]\n    return median", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    print(max(a,b,c))\n    print(min(a,b,c))\n    print(a+b+c)\n    return max(a,b,c)\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a > b and a > c:\n        if b > c:\n            return b\n        else:\n            return c\n    elif b > a and b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if a > b:\n            return a\n        else:\n            return b"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    return sum([x for x in map(lambda x: int(str(x)),numbers)])", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(L):\n    L=list(L)\n    total=0\n    while L:\n        total+=L.pop()%10\n    return total\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(li):\n    sum = 0\n    for num in li:\n        for digit in str(num):\n            sum += int(digit)\n    return sum\n\n\ndef sum_of_digits(li):\n    s = 0\n    for n in li:\n        s += int(str(n)[0])\n    return s\n\n\ndef sum_of_digits(li):\n    s = 0\n    for n in li:\n        for c in str(n):\n            s += int(c)\n    return s\n\n\n# add tests here:", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(number_list):\n    #your code here\n    sum_list=[]\n    for number in number_list:\n        sum_list.append(sum([int(i) for i in str(number)]))\n    return sum(sum_list)", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(n):\n    sum_of_digits = 0\n    for num in n:\n        digits = [int(d) for d in str(num)]\n        sum_of_digits += sum(digits)\n    return sum_of_digits\n\ndef test_sum_of_digits():\n    assert sum_of_digits([10,2,56])==14\ntest_sum_of_digits()\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    summ=0\n    for n in numbers:\n        l = list(str(n))\n        summ = summ + int(l[0]) + int(l[1]) + int(l[2])\n    return summ\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n\n    Args:\n        nums (list): list of ints to compute sum of digits\n\n    Returns:\n        int: sum of digits of each number in nums\n\n    Example:\n        >>> sum_of_digits([10,2,56])\n        14\n    \"\"\"\n    # can i use zip here?\n    # sum([n%10 for n in nums])\n    return sum([n%10 for n in nums])\n\ndef test_sum_of_digits():\n    assert sum_of_digits([10,2,56])==14\n\n\ndef sum_of_digits2(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n\n    Args:\n        nums (list): list of ints to compute sum of digits\n\n    Returns:\n        int: sum of digits of each number in nums\n\n    Example:\n        >>> sum_of_digits([10,2,56])\n        14\n    \"\"\"\n    # can i use zip here?\n    # sum([n%10 for n in nums])\n    return sum([n%10 for n in nums])\n\n\ndef test_sum_of_digits2():\n    assert sum_of_digits2([10,2,56])==14", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    # YOUR CODE HERE\n    sum_of_digits_func = lambda num: sum(int(digit) for digit in str(num))\n    result = map(sum_of_digits_func, numbers)\n    return sum(result)\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    result = []\n    for number in numbers:\n        digits = 0\n        while number > 0:\n            digits += number % 10\n            number /= 10\n        result.append(digits)\n    return result\n\n# assert", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(n):\n    return sum(int(num) for num in str(n))\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(*args):\n    return tuple(a ^ b for (a, b) in zip(*args))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n# Function to perform bitwise xor across tuples\n#\ndef bitwise_xor(tup1, tup2):\n    xor_arr = []\n    for i in range(len(tup1)):\n        # Sum of two numbers in a bitwise xor\n        xor_arr.append(tup1[i] ^ tup2[i])\n    return tuple(xor_arr)\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tup1, tup2):\n    \"\"\"\n    >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n    (15, 6, 5, 10)\n    >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    True\n    >>> bitwise_xor((5, 6, 10, 4), (3, 2, 1, 3))\n    (14, 7, 15, 9)\n    \"\"\"\n    return tuple(i ^ j for i, j in zip(tup1, tup2))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(a, b):\n    l = []\n    if len(a) == 0 or len(b) == 0:\n        return l\n    elif len(a) > len(b):\n        l = a\n        a = b\n        b = l\n    for i in range(len(a)):\n        l.append(a[i] ^ b[i])\n    return l\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(t1, t2):\n    return tuple(map(lambda i: i ^ i, t1))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(a, b):\n    return tuple(c ^ d for (c, d) in zip(a, b))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tup1, tup2):\n    return list(map(lambda x: x[0] ^ x[1], zip(tup1, tup2)))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(t1, t2):\n    # XOR operation is defined as 0 for equal and 1 for unequal\n    return tuple([i ^ j for i, j in zip(t1, t2)])\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\nfrom typing import List\n\n\ndef bitwise_xor(lst_one: List[int], lst_two: List[int]) -> List[int]:\n    return [a ^ b for a, b in zip(lst_one, lst_two)]\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(left, right):\n  assert len(left) == len(right), \"Lists are not of equal size\"\n\n  result = []\n  for i in range(0, len(left)):\n    result.append(left[i] ^ right[i])\n\n  return result\n\n# Alternative, one line code\n# def bitwise_xor(left, right):\n#   return tuple(i ^ j for i, j in zip(left, right))\n\n# Alternative, no need to create a new list\n# def bitwise_xor(left, right):\n#   result = list(left)\n#   for i in range(0, len(left)):\n#     result[i] = result[i] ^ right[i]\n#   return tuple(result)"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    \"\"\"\n    Returns the frequency of unique tuples in the given list.\n    lst: list of tuples.\n    \n    \"\"\"\n    return len(set(lst))\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    return len(list(set(map(tuple, lst))))\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    dict = {}\n    for x in lst:\n        if x[0] in dict:\n            dict[x[0]] += 1\n        else:\n            dict[x[0]] = 1\n    return len(dict)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    # create a dict from the list\n    d = dict(lst)\n    freq = 0\n    for k, v in d.items():\n        freq += 1\n    return freq\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    \"\"\"\n    >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])\n    3\n    \"\"\"\n    ## your code goes here\n    dict_of_sets = dict()\n    for item in lst:\n        key = tuple(item)\n        if key in dict_of_sets:\n            dict_of_sets[key] += 1\n        else:\n            dict_of_sets[key] = 1\n    return len(dict_of_sets)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(l):\n    \"\"\"\n    >>> l = [(3, 4), (1, 2), (4, 3), (5, 6)]\n    >>> extract_freq(l)\n    3\n    \"\"\"\n    return len({frozenset(i) for i in l})\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(data):\n    freq = {}\n    for item in data:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    if lst == []:\n        return 0\n    hashmap = dict.fromkeys(lst)\n    return len(hashmap.keys())\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(order_list):\n    print(order_list)\n    order_set = set(order_list)\n    return len(order_set)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(l):\n    l = sorted(l)\n    count = 1\n    res = []\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count += 1\n        else:\n            res.append((l[i], count))\n            count = 1\n    res.append((l[-1], count))\n    return res\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    return tuple(map(add_nested_elements, t1, t2))\n\ndef add_nested_elements(x, y):\n    return (x[0] + y[0], x[1] + y[1])\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tuples_a, tuples_b):\n    return tuple(map(lambda t: (t[0] + t[1]), zip(tuples_a, tuples_b)))\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\nfrom typing import Tuple\n\n\ndef add_nested_tuples(t1: Tuple[Tuple[int, ...], ...], t2: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    n = len(t1)\n    m = len(t2)\n    if n != m:\n        raise ValueError(\"The number of tuples in the given two tuples are not equal\")\n    r = []\n    for i in range(n):\n        r.append(tuple(map(operator.add, t1[i], t2[i])))\n    return tuple(r)\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n# recursive approach\ndef add_nested_tuples(t1, t2):\n\tt1_len = len(t1)\n\tt2_len = len(t2)\n\tif t1_len != t2_len:\n\t\treturn None\n\telse:\n\t\tt1_elem = t1[0]\n\t\tt2_elem = t2[0]\n\t\tif isinstance(t1_elem, tuple):\n\t\t\tnew_first_elem = add_nested_tuples(t1_elem, t2_elem)\n\t\t\tnew_first_elem_len = len(new_first_elem)\n\t\t\tif t1_len == new_first_elem_len:\n\t\t\t\tnew_elem = tuple(x + y for x, y in zip(t1, new_first_elem))\n\t\t\telse:\n\t\t\t\tnew_elem = tuple(x + y for x, y in zip(t1, new_first_elem))\n\t\t\t\treturn new_elem\n\t\telse:\n\t\t\tif t1_len == t2_len:\n\t\t\t\tnew_first_elem = t1_elem + t2_elem\n\t\t\telse:\n\t\t\t\tnew_first_elem = t1_elem + t2_elem\n\t\t\t\treturn new_first_elem\n\treturn tuple(x + y for x, y in zip(t1, t2))\n\n\n# def add_nested_tuples(t1, t2):\n# \t# base case: 1st elem of t1 is not a tuple\n# \tif isinstance(t1[0], tuple):\n# \t\treturn add_nested_tuples(t1[1:], t2) + tuple(x + y for x, y in zip(t1[0], t2))\n# \telse:\n# \t\treturn", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(a, b):\n    return tuple(map(lambda t: tuple(map(lambda x: x[0] + x[1], zip(t[0], t[1]))), zip(a, b)))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tup1, tup2):\n    tup1 = list(tup1)\n    tup2 = list(tup2)\n    if len(tup1) != len(tup2):\n        raise Exception('Tuples are not of equal length!')\n    result = []\n    for i in range(0, len(tup1)):\n        result.append((tup1[i][0] + tup2[i][0], tup1[i][1] + tup2[i][1]))\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tup1, tup2):\n    return (\n        tuple((a + b for a, b in zip(tup1_iter, tup2_iter)))\n        for tup1_iter, tup2_iter in zip(tup1, tup2)\n    )\n\n\ndef main():\n    pass\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        temp_result = []\n        for j in range(len(t2[0])):\n            temp_result.append(t1[i][j] + t2[i][j])\n        result.append(temp_result)\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef add_nested_tuples(left: List[Tuple], right: List[Tuple]) -> List[Tuple]:\n    return [tuple(map(sum, zip(left[i], right[i]))) for i in range(len(left))]\n\n\n# TODO: Test the function", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    if t1 == t2:\n        return t1\n    elif len(t1) == 0:\n        return t2\n    elif len(t2) == 0:\n        return t1\n    else:\n        return (add_nested_tuples(t1[0], t2[0]),) + add_nested_tuples(t1[1:], t2[1:])\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    res=1\n    for i in xrange(r):\n        if (r-i)%2:\n            res=res*((n-i)%p)\n    return res%(p**n)\n\ndef ncr_modp2(n,r,p):\n    return ncr_modp(n,r,p)%p\n\ndef ncr_modp3(n,r,p):\n    numerator=ncr_modp(n,r,p)\n    denominator=ncr_modp(r,2,p)\n    return numerator*inverse_modp(denominator,p)\n\ndef ncr_modp4(n,r,p):\n    return ncr_modp(n,r,p)\n\ndef ncr_modp5(n,r,p):\n    # result=ncr_modp3(n,r,p)\n    # result=ncr_modp4(n,r,p)\n    return ncr_modp2(n,r,p)\n\ndef ncr_modp6(n,r,p):\n    return ncr_modp(n,r,p)\n\ndef ncr_modp7(n,r,p):\n    return ncr_modp(n,r,p)\n\ndef ncr_modp8(n,r,p):\n    return ncr_modp(n,r,p)\n\ndef ncr_modp9(n,r,p):\n    return ncr_modp(n,r,p)\n\ndef ncr_modp10(n,r,p):\n    return ncr_modp(n,r,p)\n\ndef ncr_modp11(n,r,p):\n    # return ncr_modp(n,r,p)\n    # return ncr_modp3(n,r,p)\n    return ncr_modp2(n,r,p)\n\ndef ncr_modp12(n,r,p):\n    return ncr", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfunction ncr_modp(n::Integer,r::Integer,p::Integer)\n    #assert n>0\n    #assert r>0\n    #assert p>0\n    if r>n\n        return 0\n    end\n    if r==0\n        return 1\n    end\n    if r==1\n        return n\n    end\n    if r==n\n        return 1\n    end\n    if p==1\n        return 1\n    end\n    npr::Integer = ncr_modp(n,r-1,p)\n    npr*(mod(r,p)+1) % p\nend\n\nfunction ncr_modp(n::Integer,r::Integer)\n    #assert n>0\n    #assert r>0\n    if r>n\n        return 0\n    end\n    if r==0\n        return 1\n    end\n    if r==1\n        return n\n    end\n    if r==n\n        return 1\n    end\n    if p==1\n        return 1\n    end\n    npr::Integer = ncr_modp(n,r-1)\n    npr*(mod(r,p)+1) % p\nend\n\nfunction ncr_modp(n::Integer,r::Integer,p::Integer,q::Integer)\n    #assert n>0\n    #assert r>0\n    #assert p>0\n    #assert q>0\n    if r>n\n        return 0\n    end\n    if r==0\n        return 1\n    end\n    if r==1\n        return n\n    end\n    if r==n\n        return 1\n    end\n    if p==1\n        return 1\n    end\n    if q==1\n        return 1\n    end\n    npr::Integer = ncr_modp(n,r-1,p,q)\n    npr*(mod(r,p)+1)*(mod(r,q)+1) % p\nend\n\nfunction ncr_modp(n::Integer,r::Integer,p::Integer,q::Integer,r::Integer)\n    #assert n>0\n    #assert r>0\n    #assert p>0\n    #assert q>0\n    #assert r>0\n    if r>n\n        return 0\n    end\n    if r", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfunction ncr_modp(n,r,p)\n    result = invmod(modpow(factorial(n),r,p),modpow(factorial(r),n-r,p),p)\n    if result == p\n        result = invmod(p,p,p)\n    end\n    return result\nend\n\nn,r,p = 35,21,1001\n@assert ncr_modp(n,r,p)==6\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    # your code here\n    return int(math.factorial(n) // math.factorial(n - r) // (math.factorial(r) * math.mod(math.factorial(n - r), p)))", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    fact = [1]\n    for i in xrange(r):\n        fact.append(fact[-1]*(n-i))\n    res = 1\n    for i in xrange(r):\n        res = (res*fact[i])%p\n    return res\n\ndef ncr_binom(n,r,mod=1000000007):\n    fact = [1]\n    for i in xrange(r):\n        fact.append(fact[-1]*(n-i))\n    res = 1\n    for i in xrange(r):\n        res = (res*fact[i])%mod\n    return res\n\ndef ncr_modp_binom(n,r,mod=1000000007):\n    fact = [1]\n    for i in xrange(r):\n        fact.append(fact[-1]*(n-i))\n    res = 1\n    for i in xrange(r):\n        res = (res*fact[i])%mod\n    return res\n\ndef ncr_binom_modp(n,r,mod=1000000007):\n    fact = [1]\n    for i in xrange(r):\n        fact.append(fact[-1]*(n-i))\n    res = 1\n    for i in xrange(r):\n        res = (res*fact[i])%mod\n    return res\n\ndef ncr_modp_binom_modp(n,r,mod=1000000007):\n    fact = [1]\n    for i in xrange(r):\n        fact.append(fact[-1]*(n-i))\n    res = 1\n    for i in xrange(r):\n        res = (res*fact[i])%mod\n    return res\n\n\ndef ncr_modp_binom_modp_modp(n,r,mod=1000000007):\n    fact = [1]\n    for i in xrange(r):\n        fact.append(fact[-1]*(n-i))\n    res = 1", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    if p%r==0:\n        return ncr_modp(n%p,r,p)\n    if r==0:\n        return 1\n    return ncr_modp(n%p,r-1,p)*((n//p)//(r-1))%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\nimport sys\n\ndef ncr_modp(n,r,p):\n\treturn int(binom(n,r)*(pow(p,r)+pow(p,n-r))/pow(p,n))\n\ndef binom(n,r):\n\treturn int(fact(n)*(pow(n,r-1)*(fact(n-r))/pow(fact(r),2)))\n\ndef fact(n):\n\tif n==0:\n\t\treturn 1\n\telif n==1:\n\t\treturn 1\n\telse:\n\t\treturn n*fact(n-1)\n\n#print(ncr_modp(50,100,19))\n#print(ncr_modp(50,100,13))\n\n#print(binom(20,10))", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    if n < r:\n        return 0\n    numerator = factorial(n) / factorial(n-r)\n    denominator = factorial(r) / factorial(r-n) % p\n    return numerator * pow(denominator, r-n, p) % p\n\ndef ncr_modp_naive(n, r, p):\n    if n < r:\n        return 0\n    numerator = binomial(n, r)\n    denominator = binomial(r, n) % p\n    return numerator * pow(denominator, r-n, p) % p\n\ndef ncr_modp_log(n, r, p):\n    if n < r:\n        return 0\n    numerator = (factorial(n) / factorial(n-r)) * 1\n    denominator = (factorial(r) / factorial(r-n)) * 1\n    return numerator * pow(denominator, r-n, p) % p\n\ndef ncr_modp_log_naive(n, r, p):\n    if n < r:\n        return 0\n    numerator = binomial(n, r)\n    denominator = binomial(r, n) % p\n    return numerator * pow(denominator, r-n, p) % p\n\ndef ncr_modp_memo(n, r, p):\n    if n < r:\n        return 0\n    memo = {}\n    return ncr_modp_helper(n, r, p, memo)\n\ndef ncr_modp_helper(n, r, p, memo):\n    if (n, r) in memo:\n        return memo[(n, r)]\n    if n < r:\n        return 0\n    numerator = (factorial(n) / factorial(n-r)) * 1\n    denominator = (factorial(r) / factorial(r-n)) * 1\n    result = numerator * pow(denominator, r-n, p) % p\n    memo[(n, r)] = result\n    return result\n\ndef ncr_mod", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n\tans=1\n\tif n==0 or r==0 or p==0:\n\t\treturn 0\n\telif r>=n:\n\t\treturn 1\n\telse:\n\t\tfor i in range(n-r+1):\n\t\t\tans=(ans*i)//(i+1)\n\t\tans=(ans%p)*(r//(n-r)+1)%p\n\t\treturn ans\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    \"\"\"\n    >>> ncr_modp(10,2,13)==6\n    True\n    >>> ncr_modp(10,2,13)==1\n    False\n    >>> ncr_modp(10,2,13)==10\n    False\n    >>> ncr_modp(10,2,13)==100\n    True\n    \"\"\"\n    # Your code here\n    pass\n\ndef ncr_modp_list(n, r, p):\n    \"\"\"\n    >>> ncr_modp_list(10,2,13)==6\n    True\n    >>> ncr_modp_list(10,2,13)==1\n    False\n    >>> ncr_modp_list(10,2,13)==10\n    False\n    >>> ncr_modp_list(10,2,13)==100\n    True\n    \"\"\"\n    # Your code here\n    pass\n\ndef ncr_modp_mod(n, r, p):\n    \"\"\"\n    >>> ncr_modp_mod(10,2,13)==6\n    True\n    >>> ncr_modp_mod(10,2,13)==1\n    False\n    >>> ncr_modp_mod(10,2,13)==10\n    False\n    >>> ncr_modp_mod(10,2,13)==100\n    True\n    \"\"\"\n    # Your code here\n    pass"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n#def is_valid_URL(url):\n#    if url.startswith(\"https://\") or url.startswith(\"http://\") or url.startswith(\"ftp://\"):\n#        return True\n#    else:\n#        return False\n\ndef is_valid_URL(url):\n    if re.search(r'^(http|ftp)s?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$', url):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(s):\n    regex = r\"^[a-zA-Z]+://[^\\s]+\"\n    return bool(re.match(regex, s))\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    url = url.strip()\n    if url.startswith('https://') or url.startswith('http://'):\n        return True\n    else:\n        return False\n\ndef is_valid_URL_test(test_case):\n    result = is_valid_URL(test_case)\n    assert result == test_case", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    url_regex = re.compile(\n    r'^(?:http|ftp)s?://' # http:// or https://\n    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n    r'localhost|' #localhost...\n    r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n    r'(?::\\d+)?' # optional port\n    r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return url_regex.match(url) is not None\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url: str) -> bool:\n    \"\"\"\n    >>> is_valid_URL(\"https://www.google.com\")\n    True\n    >>> is_valid_URL(\"http://www.google.com\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/\")\n    False\n    >>> is_valid_URL(\"http://www.google.com/\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/2\")\n    False\n    >>> is_valid_URL(\"http://www.google.com/2\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/2/\")\n    False\n    >>> is_valid_URL(\"http://www.google.com/2/\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/2/3\")\n    False\n    >>> is_valid_URL(\"http://www.google.com/2/3\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/2/3/\")\n    False\n    >>> is_valid_URL(\"http://www.google.com/2/3/\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/2/3/4\")\n    False\n    >>> is_valid_URL(\"http://www.google.com/2/3/4\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/2/3/4/\")\n    False\n    >>> is_valid_URL(\"http://www.google.com/2/3/4/\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/2/3/4/5\")\n    False\n    >>> is_valid_URL(\"http://www.google.com/2/3/4/5\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/2/3/4/5/\")\n    False\n    >>> is_valid_URL(\"http://www.google.com/2/3/4/5/\")\n    True\n    >>> is_valid_URL(\"https://www.google.com/2", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(URL):\n    return re.match(r'^((http|ftp)s?://)?' + r'([a-zA-Z0-9./_-]+).*' + r'([a-zA-Z0-9._-])$', URL) is not None\n\ndef test_is_valid_URL():\n    assert is_valid_URL(\"http://www.google.com\") == True\n    assert is_valid_URL(\"https://www.google.com\") == True\n    assert is_valid_URL(\"ftp://www.google.com\") == True\n    assert is_valid_URL(\"http://www.google.com/\") == True\n    assert is_valid_URL(\"https://www.google.com/home\") == True\n    assert is_valid_URL(\"ftp://www.google.com/home\") == True\n    assert is_valid_URL(\"https://www.google.com/home/\") == True\n    assert is_valid_URL(\"ftp://www.google.com/home/\") == True\n    assert is_valid_URL(\"https://www.google.com/home/new\") == True\n    assert is_valid_URL(\"http://www.google.com/home/new\") == True\n    assert is_valid_URL(\"http://www.google.com:8080/home/new\") == True\n    assert is_valid_URL(\"ftp://www.google.com:8080/home/new\") == True\n    assert is_valid_URL(\"https://www.google.com:8080/home/new\") == True\n    assert is_valid_URL(\"http://www.google.com.com/home/new\") == False\n    assert is_valid_URL(\"https://www.google.com.com/home/new\") == False\n    assert is_valid_URL(\"ftp://www.google.com.com/home/new\") == False\n    assert is_valid_URL(\"https://www.google.com.com:8080/home/new\") == False\n    assert is_valid_URL(\"http://www.google.com/home/new", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\n# Test Case 1", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url: str) -> bool:\n    \"\"\"\n    Checks if the input url is valid using regex.\n    Args:\n        url (str): The url to check.\n    Returns:\n        bool: True if the url is valid, False otherwise.\n    \"\"\"\n    result = re.match(\n        r\"^((http|ftp)s?://)?\"  # http:// or https://\n        r\"(([a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\"  # domain...\n        r\"(:[0-9]+)?\"  # optional port\n        r\"(/[a-zA-Z0-9$_.+/-]*)*\"  # path...\n        r\"(\\.[a-zA-Z0-9$_.+/-]+)*\"  # optional top level domain\n        r\"(/?)(.*)\", url)\n    if result is not None:\n        return True\n    return False", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    return (url.startswith(\"http://\") or url.startswith(\"https://\")) and \\\n        len(url.split(\"http://\")[-1]) > 0\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    import re\n    return re.match(r'^https?://www\\..*$', url) is not None\n\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x, y):\n    if x > y:\n        return y\n    return x\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n# Test Cases", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    return a if a < b else b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x,y):\n    return min(x,y)\n\ndef test_minimum():\n    assert minimum(1,2) == 1\n\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n    \"\"\"\n    Write a function to find the minimum of two numbers.\n    :param a: First number\n    :param b: Second number\n    :return: The minimum value of two numbers\n    \"\"\"\n    if a<b:\n        return a\n    return b\n\ndef test_minimum(self):\n    assert minimum(1,2) == 1\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n\tif a < b:\n\t\treturn a\n\treturn b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    return a if a < b else b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    if a<b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(num1, num2):\n    return min(num1, num2)\n\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x,y):\n    if x < y:\n        return x\n    return y\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\n# def check_tuplex(tup, element):\n#     if element in tup:\n#         print(\"found\")\n#     else:\n#         print(\"not found\")\n# return check_tuplex\n\n# Solution\n\n\ndef check_tuplex(tup, element):\n    return element in tup\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, element):\n    return element in tuplex\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex,element):\n    return (element in tuplex)\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex,val):\n    for i in range(len(tuplex)):\n        if val==tuplex[i]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex,item):\n    tuplex_list=list(tuplex)\n    for i in tuplex_list:\n        if i==item:\n            return True\n    return False", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tupl,element):\n    for e in tupl:\n        if e==element:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, element):\n    #\n    # your code here\n    #\n    for x in tup:\n        if x == element:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, element):\n    return element in tup\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,el):\n    return any([el==item for item in tup])\n\n# Your code below this line:", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,ele):\n    return ele in tup\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(number):\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Driver Code\nnumber = 12", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    elif num % 2 == 1:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    return \"Odd Parity\" if num % 2 == 1 else \"Even Parity\"\n\n\ndef test_parity():\n    assert find_Parity(12) == \"Even Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(number):\n    return \"Even Parity\" if number % 2 == 0 else \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    return \"Even Parity\" if n % 2 == 0 else \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    if n%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(n):\n    if n == 0:\n        return \"Even Parity\"\n    elif n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test Case", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    elif num % 2 == 1:\n        return \"Odd Parity\"\n    else:\n        return \"Invalid Input\"\n\n\ndef test_find_parity_even():\n    assert find_Parity(12) == \"Even Parity\"\n\n\ndef test_find_parity_odd():\n    assert find_Parity(13) == \"Odd Parity\"\n\n\ndef test_find_parity_invalid():\n    with pytest.raises(ValueError):\n        find_Parity(13.1)\n\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(x):\n    \"\"\"Write a function to create the next bigger number by rearranging the digits of a given number.\"\"\"\n    return int(str(x)[::-1])\n\ndef test_rearrange_bigger():\n    assert rearrange_bigger(12)==21\n    assert rearrange_bigger(1012)==1210\n    assert rearrange_bigger(1234)==1423\n    assert rearrange_bigger(5567)==7565\n    assert rearrange_bigger(123)==321", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    # your code here\n    s=str(num)\n    a=[]\n    b=[]\n    for i in s:\n        a.append(i)\n    for i in reversed(s):\n        b.append(i)\n    #print(a,b)\n    for i in range(len(a)):\n        if int(a[i])>int(b[i]):\n            tmp=a[i]\n            a[i]=b[i]\n            b[i]=tmp\n    ans=int(''.join(a+b))\n    return ans\n\n#print(rearrange_bigger(12))\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    digits = list(str(num))\n    for i in range(len(digits)):\n        for j in range(i+1,len(digits)):\n            if int(digits[i])<int(digits[j]):\n                digits[i],digits[j] = digits[j],digits[i]\n                break\n    return int(\"\".join(digits))\n\ndef main():\n    #print(rearrange_bigger(12))\n    assert rearrange_bigger(12)==21\n    assert rearrange_bigger(123)==132\n    print(\"all test cases pass\")\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    return int(''.join(sorted(str(n), reverse=True)))\n\n# TEST CASES", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n\treturn int(''.join(sorted(str(n)[::-1])))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    # Your code here\n\ndef test_rearrange_bigger():\n    assert rearrange_bigger(12)==21", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    num = str(num)\n    sorted_list = sorted(num, key = lambda x: int(x), reverse = True)\n    return int(sorted_list)\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    number_list = list(str(num))\n    for i in range(len(number_list)):\n        for j in range(i+1,len(number_list)):\n            if int(number_list[i])>int(number_list[j]):\n                number_list[i],number_list[j] = number_list[j],number_list[i]\n                break\n    return int(\"\".join(number_list))\n\ndef rearrange_bigger2(num):\n    return int(\"\".join(sorted(str(num))))", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    if num<10: return num\n    else:\n        l = list(str(num))\n        l1 = []\n        l2 = []\n        for i in range(0,len(l)-1):\n            l1.append(int(l[i]))\n            l2.append(int(l[i+1]))\n        l1.sort()\n        l2.sort()\n        l1.reverse()\n        l2.reverse()\n        l1.extend(l2)\n        return int(''.join(str(x) for x in l1))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    arr = list(str(num))\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if int(arr[i]) > int(arr[j]):\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n                break\n    return int(\"\".join(arr))\n\n#========================="], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    # TODO: Write your code here\n    # O(n^2)\n    return []\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a, b, k):\n    # Write your code here\n    if k > len(a) * len(b):\n        raise Exception(\"k is greater than the number of pairs\")\n\n    n_a = len(a)\n    n_b = len(b)\n    res = []\n    for i in range(n_a):\n        for j in range(n_b):\n            if i != j and k > 0:\n                res.append([a[i], b[j]])\n                k -= 1\n\n    return res\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\nfrom collections import defaultdict\ndef k_smallest_pairs(first, second, k):\n    if len(first) < k:\n        return []\n\n    first_dict = defaultdict(list)\n    second_dict = defaultdict(list)\n\n    for i in first:\n        first_dict[i].append(i)\n\n    for i in second:\n        second_dict[i].append(i)\n\n    pairs = []\n    for f in first_dict:\n        for s in second_dict:\n            if len(first_dict[f]) < k or len(second_dict[s]) < k:\n                break\n\n            for x in first_dict[f][0:k]:\n                for y in second_dict[s][0:k]:\n                    pairs.append([x, y])\n\n    return pairs\n\ndef k_smallest_pairs(first, second, k):\n    if len(first) < k or len(second) < k:\n        return []\n\n    pairs = []\n    first_dict = defaultdict(list)\n    second_dict = defaultdict(list)\n\n    for i in first:\n        first_dict[i].append(i)\n\n    for i in second:\n        second_dict[i].append(i)\n\n    for f in first_dict:\n        for s in second_dict:\n            if len(first_dict[f]) < k or len(second_dict[s]) < k:\n                break\n\n            for x in first_dict[f][0:k]:\n                for y in second_dict[s][0:k]:\n                    pairs.append([x, y])\n\n    return pairs", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    if not arr1 or not arr2:\n        return []\n    if k > len(arr1) or k > len(arr2):\n        return []\n    return [arr1[i], arr2[j]] for i in range(k) for j in range(k)\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    # sort arr1 and arr2, get a mapping from the sorted index of arr1 to arr2\n    # sort arr2, get a mapping from the sorted index of arr2 to arr1\n    # the mapping is a tuple (i, j) -> j\n    if len(arr1) < k or len(arr2) < k:\n        raise ValueError\n\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    arr2_to_arr1 = [(i, arr1[i]) for i in range(len(arr1))]\n    arr2 = sorted(arr2)\n    arr1_to_arr2 = [(i, arr2[i]) for i in range(len(arr2))]\n\n    return [arr1_to_arr2[arr2_to_arr1[i][0]] for i in range(k)]\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(a,b,k):\n    a.sort()\n    b.sort()\n    return a[:k],b[:k]\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\nfrom typing import List\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a, b, k):\n    a.sort()\n    b.sort()\n    res = []\n    for i in range(k):\n        res.append((a[i], b[i]))\n    return res\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\n# Two pointers technique\ndef k_smallest_pairs(a,b,k):\n    a,b,k = list(a), list(b), int(k)\n    n = len(a)\n    if not n or not k:\n        return []\n    a,b,k = sorted(a), sorted(b), min(k,len(a)*len(b))\n    return [[a[i],b[j]] for i in range(0,k) for j in range(0,k) if i or j or a[i] < b[j]]\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(A,B,k):\n    pairs = []\n    for i in range(len(A)):\n        for j in range(i+1, len(B)):\n            if A[i] < B[j]:\n                pairs.append((A[i], B[j]))\n                if len(pairs) == k:\n                    return pairs\n                pairs.sort()\n    return pairs"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    #sort by first element of tuple\n    tuples.sort()\n    #get first element of tuple\n    first = tuples[0][0]\n    #find min product\n    min_product = first * tuples[0][1]\n    #for rest of tuple\n    for i in range(1, len(tuples)):\n        #multiply each first element with second element\n        min_product *= tuples[i][0]\n    return min_product\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(alist):\n    min_product = float('inf')\n    for i in range(len(alist)-1):\n        for j in range(i+1, len(alist)):\n            product = alist[i][0]*alist[j][1]\n            if min_product> product:\n                min_product = product\n    return min_product\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(pairs):\n    pairs = sorted(pairs, key=lambda x: x[1])\n    product = float('inf')\n    for i, j in pairs:\n        product = min(product, i * j)\n    return product\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\n#def min_product_tuple(t):\n#    if len(t) == 1:\n#        return t[0][0]*t[0][1]\n#    else:\n#        min = float(\"inf\")\n#        for i in range(len(t)-1):\n#            for j in range(i+1, len(t)):\n#                min = min if min > t[i][0]*t[j][1] else t[i][0]*t[j][1]\n#        return min\n\n# O(n^2)\ndef min_product_tuple(t):\n    if len(t) == 1:\n        return t[0][0]*t[0][1]\n    else:\n        for i in range(len(t)-1):\n            for j in range(i+1, len(t)):\n                if t[i][0] * t[j][1] < t[i][0] * t[i][1]:\n                    t[i], t[j] = t[i], t[j]\n        return min(t, key=lambda k: k[0] * k[1])[0] * min(t, key=lambda k: k[0] * k[1])[1]\n\n# O(n^2)\ndef min_product_tuple(t):\n    if len(t) == 1:\n        return t[0][0]*t[0][1]\n    else:\n        for i in range(len(t)-1):\n            for j in range(i+1, len(t)):\n                if t[i][0] * t[j][1] < t[i][0] * t[i][1]:\n                    t[i], t[j] = t[i], t[j]\n        return min(t, key=lambda k: k[0] * k[1])[0] * min(t, key=lambda k: k[0] * k[1])[1]\n\n\n# O(n^2)", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(pairs):\n    n = len(pairs)\n    if n==0:\n        return -1\n\n    elif n==1:\n        return pairs[0][0]*pairs[0][1]\n\n    else:\n        if pairs[0][1] == pairs[1][1]:\n            return min(\n                min_product_tuple([x[0], x[1]] for x in zip(pairs[0:n-1], pairs[1:n]))+\n                pairs[n-1][0]*pairs[n-1][1],\n                min_product_tuple([x[1], x[0]] for x in zip(pairs[0:n-1], pairs[1:n]))+\n                pairs[n-1][1]*pairs[n-1][0]\n            )\n\n        else:\n            return min(\n                min_product_tuple([x[0], x[1]] for x in zip(pairs[0:n-1], pairs[1:n]))+\n                pairs[n-1][0]*pairs[n-1][1],\n                min_product_tuple([x[1], x[0]] for x in zip(pairs[0:n-1], pairs[1:n]))+\n                pairs[n-1][1]*pairs[n-1][0]\n            )", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(list_of_tuple):\n    min_product = float('inf')\n    for tup in list_of_tuple:\n        product = tup[0] * tup[1]\n        if min_product > product:\n            min_product = product\n    return min_product\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    if len(tuples) == 0:\n        return 10000000000\n    # sort the tuples based on the product of the first pair\n    tuples.sort(key = lambda t: t[0] * t[1])\n    # the first pair is the min product\n    return tuples[0][0] * tuples[0][1]\n\ndef test_min_product_tuple():\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(1, 5), (5, 3), (4, 6), (2, 9)]) == 40\n    assert min_product_tuple([]) == 10000000000\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(x):\n    x = sorted(x)\n    return x[0][0] * x[0][1] * x[-1][0] * x[-1][1]\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nfrom itertools import combinations\ndef min_product_tuple(tuples):\n    \"\"\"Returns the minimum product of the tuples within the list\"\"\"\n    return min(x[0]*x[1] for x in combinations(tuples, 2))", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(lst):\n    from collections import defaultdict\n    counter = defaultdict(int)\n    for v in lst:\n        counter[v[0]] += 1\n        counter[v[1]] += 1\n    total = len(lst)\n    if total % 2 != 0:\n        return -1\n    result = 0\n    for k in counter:\n        if counter[k] == total / 2:\n            result = k\n    return result\n\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    #sort the list\n    lst.sort()\n    return lst[0]\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    min_val = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list_of_numbers):\n    \"\"\"\n    Find the min value in a given list of numbers.\n\n    :param list_of_numbers: A list of numbers.\n    :type list_of_numbers: list\n    :return: The min value in a given list.\n    :rtype: int\n    \"\"\"\n    try:\n        # returns the first value that is smaller than all the other values\n        return min(list_of_numbers)\n    except TypeError:\n        print(\"Please enter a list of numbers.\")\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(arg):\n    return min(arg)\n\ndef test_min_val():\n    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(li):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    :param li: a given list\n    :return: the min value in a given heterogeneous list.\n    \"\"\"\n    #print(li)\n    if len(li) < 2:\n        return li[0]\n    if isinstance(li[0], int):\n        return min([li[0], min_val(li[1:])])\n    else:\n        return min([min_val(li[0:2]), min_val(li[2:])])\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list_of_numbers):\n    return min(list_of_numbers)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    return min(lst)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    \"\"\"\n    Returns the min value in a list\n    \"\"\"\n    return min(lst)\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list):\n    if len(list)==0:\n        return None\n    min_val=list[0]\n    for val in list:\n        if val<min_val:\n            min_val=val\n    return min_val\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(val_list):\n    \"\"\"\n    Find the minimum value from a heterogeneous list.\n    :param val_list: A list of integers, strings, or floats.\n    :return: The minimum value.\n    \"\"\"\n    return min(val_list)\n\n\ndef test_min_val():\n    \"\"\"Test the min_val function.\"\"\"\n    assert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\n\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(s):\n    s1 = s.lower()\n    s2 = re.sub(r'[_]+', '', s1)\n    return ''.join(x.title() for x in s2.split('_'))\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\ndef snake_to_camel(snake):\n    return \"\".join(word.title() for word in re.sub(r'_', ' ', snake).split(' '))\n\ndef camel_to_snake(camel):\n    return \"\".join(word.lower() for word in camel.title().split(''))\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    return \"\".join(w.title() for w in s.split('_'))\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel('android_tv') == 'AndroidTv'\n\n\ndef snake_to_camel(s):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string by using regex.\n    assert snake_to_camel('android_tv') == 'AndroidTv'\n    \"\"\"\n    return \"\".join(w.title() for w in s.split('_'))\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel('android_tv') == 'AndroidTv'", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(string):\n    return ''.join(word.title() for word in string.split('_'))\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\ndef snake_to_camel(string):\n    match = re.match(r'^[A-Z][a-z]*$', string)\n    if match:\n        string = string.lower()\n        string = string[0].upper() + string[1:]\n    return string", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(s):\n    return ''.join([s[i].title() if i != 0 and s[i] != s[i-1] else s[i] for i in range(len(s))])\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s: str) -> str:\n    \"\"\"\n    >>> snake_to_camel('android_tv')\n    'AndroidTv'\n    \"\"\"\n    return \"\".join(word.title() for word in s.split(\"_\"))\n\ndef snake_to_camel2(s: str) -> str:\n    return \"\".join([word.title() for word in s.split(\"_\")])\n\ndef test_snake_to_camel():\n    assert snake_to_camel(\"android_tv\") == \"AndroidTv\"\n    assert snake_to_camel(\"android_TV\") == \"AndroidTv\"\n    assert snake_to_camel(\"android_tv_\") == \"AndroidTv\"\n    assert snake_to_camel(\"_android_tv\") == \"AndroidTv\"\n    assert snake_to_camel(\"android_tv__\") == \"AndroidTv\"\n    assert snake_to_camel(\"android__tv\") == \"AndroidTv\"\n    assert snake_to_camel(\"__android__tv\") == \"AndroidTv\"\n    assert snake_to_camel(\"a\") == \"A\"\n    assert snake_to_camel(\"abc\") == \"Abc\"\n    assert snake_to_camel(\"abc_def\") == \"AbcDef\"\n\ndef test_snake_to_camel2():\n    assert snake_to_camel2(\"android_tv\") == \"AndroidTv\"\n    assert snake_to_camel2(\"android_TV\") == \"AndroidTv\"\n    assert snake_to_camel2(\"android_tv_\") == \"AndroidTv\"\n    assert snake_to_camel2(\"_android_tv\") == \"AndroidTv\"\n    assert snake_to_camel2(\"android_tv__\") == \"AndroidTv\"\n    assert snake_to_camel2(\"android__tv\") == \"AndroidTv\"\n    assert snake_to_camel2(\"__android__tv\") == \"AndroidTv\"\n    assert snake_to_camel2(\"a\") == \"A\"\n    assert snake_to_camel2(\"abc\") == \"Abc\"\n    assert snake_to_camel2(\"abc_def\") == \"AbcDef\"", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(name):\n    \"\"\"\n    :param name: string\n    :return: string\n    \"\"\"\n    return \"\".join([x.capitalize() or \"_\" for x in name.split('_')])\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(snake_string):\n    splitted_snake = snake_string.split('_')\n    camel_string = ''.join(x.capitalize() for x in splitted_snake)\n    return camel_string\n\n#Note that there is a typo in the given example", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return \"\".join([m.capitalize() + m.title().lower()[1:] if m.islower() else m.title() for m in re.findall('_(.)', s)])\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    result = []\n    for element in lst:\n        if element % 2 == 0:\n            result.append(element)\n    return result\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(l):\n    return [i for i in l if i%2==0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n#your code goes here\ndef remove_odd(ls):\n    even = []\n    odd = []\n    for i in ls:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(list_of_numbers):\n    even_numbers = []\n    for number in list_of_numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n\n    return even_numbers\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(l):\n    # your code here\n    pass\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    return [x for x in lst if x % 2]\n\ndef test_remove_odd():\n    assert remove_odd([1,2,3]) == [2]\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 != 0]\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(list):\n    # Your code here\n    # [1,2,3,4,5]\n    return [x for x in list if x % 2 == 0]\n\ndef main():\n    print(remove_odd([1,2,3,4,5]))\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n# def remove_odd(lst):\n#     # Complete this function\n#     answer = []\n#     for i in lst:\n#         if i % 2 == 0:\n#             answer.append(i)\n#     return answer\n\ndef remove_odd(lst):\n    # Complete this function\n    answer = []\n    for i in lst:\n        if i % 2 == 0:\n            answer.append(i)\n    return answer\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n# -*- coding: utf-8 -*-"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return [l for l in lst][n]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst,n):\n    if n > len(lst):\n        print(\"Error: The n value should be less than the length of the list\")\n        return\n    return [x[n] for x in lst]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(element, n):\n    return [element[i] for i in range(n)]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    if type(n) != int:\n        return None\n    return lst[n]\n\ndef test():\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == ['Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == ['Wyatt Knott', 'Beau Turnbull']\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 3) == ['Beau Turnbull']\n    assert extract_nth_element([('Greyson", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n\treturn [x[n] for x in lst]\n\n\n# ----------------------------------------\n\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    return [x[n] for x in lst]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(alist, n):\n    return [val[n] for val in alist]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(l, n):\n    if n > len(l) or n < 0:\n        return []\n    return l[n]\n\n# Tests", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    return list(zip(*lst))[n]\n\n#Test Case", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(my_list, n):\n    return my_list[n]\n\n# Extract the first element from a list of tuples\nextract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],0)\n\n# Extract the second element from a list of tuples\nextract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)\n\n# Extract the third element from a list of tuples\nextract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],2)"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    count = 0\n    for i in seq1:\n        if i in seq2:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(x,y):\n    #your code here\n    \n    #z = [1,2,3,4,5]\n    #y = [6,7,8,9]\n    #print(len(z))\n    #print(len(y))\n    #for i in z:\n        #for j in y:\n            #if i==j:\n                #print(\"True\")\n                #break\n            #else:\n                #print(\"False\")\n    #print(i)\n    for i in range(len(x)):\n        for j in range(len(y)):\n            if x[i] == y[j]:\n                return True\n    return False", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1,seq2):\n    print(seq1)\n    print(seq2)\n    if seq1[0] >= seq2[0] and seq1[0] <= seq2[1]:\n        if seq1[1] >= seq2[0] and seq1[1] <= seq2[1]:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n# Solution\n\ndef overlapping(seq1, seq2):\n\n    # Checks if seq2 is empty\n    if len(seq2) == 0:\n        return False\n\n    # Checks if seq1 is empty\n    if len(seq1) == 0:\n        return True\n\n    # Checks if the first element in seq1 is less than the first element of seq2\n    if seq1[0] < seq2[0]:\n        return overlapping(seq1[1:], seq2)\n    elif seq1[0] > seq2[0]:\n        return overlapping(seq1, seq2[1:])\n    else:\n        return True", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(a, b):\n    a.sort()\n    b.sort()\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            continue\n        if a[i] < b[i]:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(list1, list2):\n    if len(list1)==0 or len(list2)==0:\n        return False\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                return True\n            else:\n                continue\n    return False\n\ndef test_overlapping():\n    assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    assert overlapping([1,2,3,4,5],[4,5,6,7]) == True\n    assert overlapping([1,2,3,4,5],[2,3,4,5]) == False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    return len(seq1.intersection(seq2)) > 0\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(a, b):\n    i, j = 0, 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            i += 1\n            j += 1\n        elif a[i] > b[j]:\n            j += 1\n        else:\n            i += 1\n\n    return i == len(a) and j == len(b)\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(x,y):\n    for i in y:\n        if i in x:\n            return True\n    return False\n\n\nx = [1,2,3,4,5]\ny = [10,11,12,13]\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(x,y):\n    for i in x:\n        if i in y:\n            return True\n    return False\n\nx = [1,2,3,4,5]\ny = [6,7,8,9]"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    if len(arr)==0:\n        return\n    n = len(arr)\n    a = 0\n    b = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            a,b = max(a*arr[j], b*arr[i], b*arr[j])\n    return (arr[b], arr[a])\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    # Your code here\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] * arr[j] * arr[k] > sum:\n                    sum = arr[i] * arr[j] * arr[k]\n                    max_1 = i\n                    max_2 = j\n                    max_3 = k\n    return (arr[max_1], arr[max_2], arr[max_3])\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    n = len(arr)\n    p = 1\n    pmax = 1\n    count = 1\n    parr = []\n    for i in range(n-1):\n        count = 1\n        for j in range(i+1, n):\n            if arr[i]*arr[j] > p:\n                p = arr[i]*arr[j]\n                pmax = 1\n                count = 1\n            elif arr[i]*arr[j] == p:\n                pmax *= arr[i]\n                count += 1\n        parr.append(pmax)\n        pmax = 1\n    return (arr[0],arr[n-1])", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(1)\n    \"\"\"\n    max_val, max_a, max_b = 0, None, None\n    for a in arr:\n        for b in arr:\n            if a*b > max_val:\n                max_val = a*b\n                max_a = a\n                max_b = b\n    return max_a, max_b\n\n\ndef test_max_product():\n    assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n    assert max_Product([1,2,3,4,7,0,8,4,8]) == (7,8)\n    assert max_Product([1,2,3,4,7,0]) == (0,4)\n    assert max_Product([1,2,3,4,7,0,8,4,8,8,8,4]) == (7,8)\n    assert max_Product([1,2,3,4,7,0,8,4,8,8,8,4]) == (7,8)\n    assert max_Product([1,2,3,4,7,0,8,4,8,8,8,4]) == (7,8)\n    assert max_Product([1,2,3,4,7,0,8,4,8,8,8,4]) == (7,8)\n    assert max_Product([1,2,3,4,7,0,8,4,8,8,8,4]) == (7,8)\n    assert max_Product([1,2,3,4,7,0,8,4,8,8,8,4]) == (7,8)\n    assert max_Product([1,2,3,4,7,0,8,4,8,8,8,4]) == (7,8)\n    assert max_Product([1,2,3,4,7,0,", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    \"\"\"\n    arr: array of integers\n    return: tuple of integers containing pair with maximum product\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    arr_max_prod = None\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > arr_max_prod:\n                arr_max_prod = prod\n                arr_max_pair = (i, j)\n    return arr_max_pair\n\ndef test_max_Product():\n    assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\ntest_max_Product()", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_product(numbers):\n    return max(zip(numbers, numbers), key=lambda x: x[0]*x[1])\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    #Write your code here.\n    # Hint:\n    # store the max value of all the pair and the corresponding index.\n    # sort the array and start from the last element\n    # loop from last to second last element\n    # check the product of the two numbers and store the max product\n    # keep track of the index of the two elements\n    # O(n^2)\n    arr.sort()\n    n = len(arr)\n    max_val = 0\n    max_index = 0\n    for i in range(n - 2):\n        for j in range(i+1, n - 1):\n            if(arr[i]*arr[j] > max_val):\n                max_val = arr[i]*arr[j]\n                max_index = i, j\n    return (arr[max_index[0]], arr[max_index[1]])\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(a):\n    #create an empty list\n    product_list=[]\n    #loop through all the elements\n    for num in a:\n        #create a sub-list containing only those elements which are not divisible by num\n        sub_list=[x for x in a if x % num != 0]\n        #use the sub_list to calculate the product\n        product=reduce(lambda x,y: x * y, sub_list)\n        #add the product to the product_list\n        product_list.append((product,num))\n    #sort the list in ascending order\n    product_list.sort(reverse=True)\n    #get the first two elements in the list\n    return product_list[0]\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_product(arr):\n    max_value = float('-inf')\n    max_index = None\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_value:\n                max_value = product\n                max_index = (i,j)\n    return max_index\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\nfrom collections import Counter\ndef max_Product(arr):\n    '''\n    :param arr: Array of integers\n    :return: Pair of integers with highest product\n    '''\n    count = Counter(arr)\n    max_count = max(count.values())\n    for num in arr:\n        if count[num] == max_count:\n            max_count_index = arr.index(num)\n            for i in range(max_count_index, len(arr)):\n                if arr[max_count_index] * arr[i] == max_count:\n                    return (arr[max_count_index], arr[i])\n    return (-1,-1)"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num < 0:\n        return -1\n    if num < 10:\n        return num\n    if num == 10:\n        return 10\n    if num == 11:\n        return 11\n    return max(breakSum(num//3)+num%3, breakSum(num//4)+num%4, breakSum(num//5)+num%5)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    max_sum = 0\n    if num == 0 or num == 1:\n        return num\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    for i in range(2, num+1):\n        max_sum = max(max_sum, i + breakSum(num-i))\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n    return breakSumRec(n, 0, 0, 0)\n\ndef breakSumRec(n, a, b, c):\n    if n < 0:\n        return -999999999\n    elif n == 0:\n        return a + b + c\n    elif n == 1:\n        return a + b + c\n    elif n == 2:\n        return a + b + c\n    elif n > 2:\n        return max(breakSumRec(n, a, b, c), breakSumRec(n-1, a, b+n, c), breakSumRec(n-2, a+n, b, c))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n  if number == 1:\n    return 1\n  elif number == 2:\n    return 2\n  elif number == 3:\n    return 3\n  else:\n    return max(breakSum(number/3) + number, breakSum(number/2) + number, breakSum(number/3) + number)\n\n# print(breakSum(12))", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    left = breakSum(n - 1)\n    middle = breakSum(n - 2)\n    right = breakSum(n - 3)\n    return max(left, middle, right) + n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\n# Bulding blocks to recursive solution\n\n\ndef breakSum(num):\n    if num < 1:\n        return 0\n    else:\n        max_sum = float(\"-inf\")\n        for i in range(num, 0, -1):\n            for j in range(num - i, 0, -1):\n                for k in range(num - i - j, 0, -1):\n                    sum_ = i + j + k\n                    if sum_ > max_sum:\n                        max_sum = sum_\n        return max_sum", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n# Break number into 3 parts, the smaller 1st part should sum to the middle 1st part\n# The middle 1st part should sum to the middle 2nd part\n# The middle 2nd part should sum to the middle 3rd part\n# The middle 3rd part should sum to the last part\ndef breakSum(number):\n    return max(breakSum(number/3) + breakSum(number/3) + breakSum(number/3), breakSum(number/2) + breakSum(number/2))\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n\tif num == 1:\n\t\treturn num\n\tif num == 2:\n\t\treturn 1\n\tif num == 3:\n\t\treturn 2\n\tif num == 4:\n\t\treturn 3\n\tif num % 3 == 0:\n\t\treturn breakSum(num / 3) + breakSum(num / 3) + breakSum(num / 3)\n\telse:\n\t\treturn max(breakSum(num - 1), breakSum(num - 2), breakSum(num - 3))", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    \"\"\"\n    :param num: Integer\n    :return: Integer\n    \"\"\"\n\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 4\n    elif num % 2 == 0:\n        return max(breakSum(num // 2), breakSum(num // 2) + num)\n    elif num % 2 == 1:\n        return max(breakSum(num // 2) + num, breakSum(num // 2))\n\n\ndef breakSum1(num):\n    \"\"\"\n    :param num: Integer\n    :return: Integer\n    \"\"\"\n\n    def breakSum(num, result, memo):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        elif num == 2:\n            return 2\n        elif num == 3:\n            return 4\n        elif num % 2 == 0:\n            if result > memo[num]:\n                memo[num] = result = breakSum(num // 2, result, memo) + num\n            return result\n        elif num % 2 == 1:\n            if result > memo[num]:\n                memo[num] = result = breakSum(num // 2, result, memo) + num\n            return result\n\n    memo = {}\n    return breakSum(num, 0, memo)\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(lst):\n    # your code here\n    # There are many ways to achieve this\n    # Group by 2\n    grouped = []\n    for i in range(0, len(lst), 2):\n        grouped.append((lst[i][0], lst[i+1][0]))\n    # Group by 3\n    return grouped\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tupls):\n    if not tupls:\n        return []\n    return [tupls[0]] + group_tuples([t for t in tupls[1:] if t[0] == tupls[0][0]]) + [tupls[0]]\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(l):\n    return sorted(set([list(i) for i in l]))\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuple_list):\n    unique_elements = []\n    result = []\n    for element in tuple_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            result.append(element)\n    return result\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\n# This method is not optimal, the complexity of the algorithm is O(n^3).\ndef group_tuples(tuples):\n    # Check if list is not empty\n    if not tuples:\n        return []\n\n    # Find common element\n    common_element = common_first_element(tuples)\n\n    # Group tuples by common element\n    return [[a for (a, b) in tuples if a == common_element] for b in range(len(tuples[0][1]))]\n\n# The below function computes the common element of a list of tuples\ndef common_first_element(tuples):\n    first = tuples[0][0]\n    for (a, b) in tuples[1:]:\n        if a != first:\n            return None\n    return first\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuple_list):\n    result_list = []\n    for t1, t2 in tuple_list:\n        if t1 == t2:\n            result_list.append((t1, t2))\n    return result_list\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tups):\n    grouped = []\n    for tup in tups:\n        if tup[0] not in [group[0] for group in grouped]:\n            grouped.append([tup[0], [tup[0]]])\n        else:\n            grouped[-1][1].append(tup[0])\n        if tup[1] not in [group[1] for group in grouped]:\n            grouped.append([tup[1], [tup[1]]])\n        else:\n            grouped[-1][1].append(tup[1])\n    return grouped\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    result = set()\n    for x in tuples:\n        for y in result:\n            if x[0] == y[0] and x[1] == y[1]:\n                result.add((x[0], x[1], x[2]))\n        else:\n            result.add(x)\n    return result\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\n# solution 1\ndef group_tuples(tuples):\n    \"\"\"\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n    \"\"\"\n    return list(map(tuple, set(tuples)))\n\n\ndef test_group_tuples():\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\n\n# solution 2\ndef group_tuples(tuples):\n    \"\"\"\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n    \"\"\"\n    return list(map(tuple, set(tuple(sorted(tuple) for tuple in tuples))))\n\n\ndef test_group_tuples():\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\n\n# solution 3\ndef group_tuples(tuples):\n    \"\"\"\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n    \"\"\"\n    return list(map(tuple, set(map(tuple, tuples))))\n\n\ndef test_group_tuples():\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\n\n# solution 4\ndef group_tuples(tuples):\n    \"\"\"\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n    \"\"\"\n    return list(map(tuple, set(tuple(tuples))))\n\n\ndef test_group_tuples():\n    assert group", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    list_of_tuples = []\n    for t in tuples:\n        if t[0] == list_of_tuples[0][0]:\n            list_of_tuples.append(t)\n        else:\n            list_of_tuples.append(t)\n    return list_of_tuples"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef find_max(lst):\n    '''\n    Finds the maximum length of a sublist in the list.\n    :param lst: the list\n    :return: the maximum length of a sublist in the list\n    '''\n    max_len = 0\n    max_sublist = None\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return max_sublist\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    \"\"\"\n    >>> Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    True\n    >>> Find_Max([['A','B'],['A','B'],['A','B','C']]) == ['A','B','C']\n    True\n    >>> Find_Max([['A'],['A','B'],['A','B'],['A','B','C']]) == ['A','B','C']\n    True\n    \"\"\"\n    max_len = 0\n    max_idx = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_idx = i\n    return lst[max_idx]", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(L):\n    if not L:\n        return []\n    else:\n        max_length = 0\n        temp_list = [L[0]]\n        for i in range(1,len(L)):\n            if len(L[i]) + len(temp_list[0]) > max_length:\n                temp_list = [L[i]]\n                max_length = len(L[i]) + len(temp_list[0])\n            elif len(L[i]) + len(temp_list[0]) == max_length:\n                temp_list.append(L[i])\n        return temp_list\n\ndef main():\n    L = [[1,2,3,4,5],[5,1,2,3,4],[3,2,1,4,5],[5,3,2,1,4],[2,4,5,1,3]]\n    print(Find_Max(L))\n    print(max([len(item) for item in L]))\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(L):\n    if len(L) == 0:\n        return []\n    elif len(L) == 1:\n        return L[0]\n    else:\n        L1 = Find_Max(L[:len(L)//2])\n        L2 = Find_Max(L[len(L)//2:])\n        if len(L1) > len(L2):\n            return L1\n        elif len(L1) < len(L2):\n            return L2\n        else:\n            return L1 + L2\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# Write your code here\ndef Find_Max(L):\n    \n    max_list = []\n    for x in L:\n        if len(max_list) <= len(x):\n            max_list = x\n        else:\n            if len(max_list) > len(x):\n                max_list = x\n\n    return max_list\n\n\n# print Find_Max([['A'],['A','B'],['A','B','C']])\n\n\n# print Find_Max([['A'],['A','B'],['A','B','C','D','E']])", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# NOTE:\n# For the sake of simplicity, you can assume that the input list is non-empty.\n# You can also assume there won't be more than one sublist with the maximum length.\n\n\ndef Find_Max(L):\n    return max(L, key=lambda x: len(x))\n\n\ndef Test():\n    # import doctest\n    # doctest.testmod()\n    assert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\n    assert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C'], ['A', 'B', 'C', 'D']]) == ['A', 'B', 'C', 'D']\n    assert Find_Max([]) == []\n\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef find_max(l):\n    s= []\n    for i in l:\n        if len(s)==0 or len(s)<len(i):\n            s=i\n    return s\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# code here\ndef Find_Max(lst):\n    max_len = 0\n    max_list = None\n    for el in lst:\n        if len(el) > max_len:\n            max_len = len(el)\n            max_list = el\n    return max_list\n\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    max_length = 0\n    max_list = []\n    for l in lst:\n        length = len(l)\n        if length > max_length:\n            max_length = length\n            max_list = l\n    return max_list\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(L):\n    \"\"\"\n    >>> Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    \"\"\"\n    if len(L)==0:\n        return []\n    else:\n        Max = L[0]\n        Max_len = len(L[0])\n        for i in L[1:]:\n            if len(i)>Max_len:\n                Max = i\n                Max_len = len(i)\n        return Max\n\ndef Test(L):\n    \"\"\"\n    >>> Test([['A'],['A','B'],['A','B','C']])\n    ['A', 'B', 'C']\n    \"\"\"\n    return Find_Max(L)\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    sum = 0\n    length = len(numbers)\n    for num in numbers:\n        sum += round(num)\n    return sum*length\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    total = 0\n    for num in numbers:\n        total = total + num\n    return total*len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    return sum([round(x) for x in numbers])*len(numbers)\n\n#print(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]))\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(l):\n    sum = 0\n    for x in l:\n        sum += round(x)\n    return sum * len(l)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(number_list):\n    total = 0\n    for i in number_list:\n        total += round(i)\n    return total * len(number_list)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\nfrom functools import reduce\n\ndef round_and_sum(numbers):\n    return reduce(lambda x, y: x + y, map(lambda x: round(x), numbers)) * len(numbers)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    round_result = []\n    for num in numbers:\n        round_result.append(round(num, 2))\n    sum = 0\n    for result in round_result:\n        sum = sum + result\n    return sum * len(numbers)\n\n#round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n\n\ndef round_and_sum(numbers):\n    round_result = []\n    for num in numbers:\n        round_result.append(round(num, 2))\n    sum = 0\n    for result in round_result:\n        sum = sum + result\n    return sum * len(numbers)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n\tresult = 0\n\tlength = len(numbers)\n\tfor number in numbers:\n\t\tresult += int(round(number))\n\treturn result * length\n\ndef test_round_and_sum():\n\tassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    number_sum = 0\n    for n in numbers:\n        number_sum += round(n)\n    return number_sum * len(numbers)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(lst):\n    # Your code here\n    sum = 0\n    for i in lst:\n        sum += int(i)\n    return int(sum*len(lst))\n\n\n# def round_and_sum(lst):\n#     result = 0\n#     for i in lst:\n#         result += int(round(i))\n#     return int(result * len(lst))\n\n\n# Rounding the numbers"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n# test case 1\ndef cube_Sum(n):\n    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return n ** 3\n    else:\n        return (n ** 3) + cube_Sum(n - 2)\n\n\n# test case 2\ndef cube_Sum(n):\n    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return n ** 3\n    else:\n        return (n ** 3) + cube_Sum(n - 2)\n\n\n# test case 3\ndef cube_Sum(n):\n    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return n ** 3\n    else:\n        return (n ** 3) + cube_Sum(n - 2)\n\n\n# test case 4\ndef cube_Sum(n):\n    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return n ** 3\n    else:\n        return (n ** 3) + cube_Sum(n - 2)\n\n\n# test case 5\ndef cube_Sum(n):\n    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return n ** 3\n    else:\n        return (n ** 3) + cube_Sum(n - 2)\n\n\n# test case 6\ndef cube_Sum(n):\n    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return n ** 3\n    else:\n        return (n ** 3) + cube_Sum(n - 2)\n\n\n# test case 7\ndef cube_Sum(n):\n    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return n ** 3\n    else:\n        return (n ** 3) + cube_Sum(n - 2)\n\n\n# test case 8\ndef cube_Sum(n):\n    if n < 1:\n        return ", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n ** 3 + cube_Sum(n - 1)\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_sum(n):\n    \"\"\"\n    The sum of the first n cubes is calculated.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n**3 + cube_sum(n-1)\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return n**3 + cube_Sum(n-1)\n\n\n# Test Case", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n ** 3 + (n - 1) ** 3) / 2\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n#\n# A naive solution is to loop over all the numbers and calculate the\n# cube of each and add them all together.\n#\n\ndef cube_Sum(n):\n    \"\"\"\n    Returns the sum of the first n even numbers.\n    \"\"\"\n\n    if n < 0:\n        return 0\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return n * (n - 1) * (n - 2) / 6\n\n    if n % 2 == 1:\n        return n * (n * (n + 1) - 1) / 6\n\n\n#\n# But as pointed out by @basilmeyer, using the Fibonacci sequence,\n# we can calculate the sum of the first n even numbers with just 2\n# multiplications and 1 addition.\n#\n\ndef cube_Sum(n):\n    \"\"\"\n    Returns the sum of the first n even numbers.\n    \"\"\"\n\n    if n < 0:\n        return 0\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return n * (n - 1) * (n - 2) / 6\n\n    if n % 2 == 1:\n        return n * (n * (n + 1) - 1) / 6\n\n\ndef fibonacci_Sum(n):\n    \"\"\"\n    Returns the sum of the first n even numbers using the Fibonacci sequence.\n    \"\"\"\n\n    if n < 0:\n        return 0\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return (fibonacci_Sum(n / 2) + fibonacci_Sum(n / 2 - 1)) * 4\n    if n % 2 == 1:\n        return (fibonacci_Sum(n / 2) + fibonacci_Sum(n / 2 - 1)) * 4\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    a = 0\n    for i in range(1,n):\n        a += i**3\n    return a\n\n# Another approach:\n# def cube_Sum(n):\n#     sum = 0\n#     for i in range(1, n+1):\n#         sum += (i**3)\n#     return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, n+1))\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    \"\"\"\n    Returns the sum of the cubes of the first n even natural numbers.\n    >>> cube_Sum(2)\n    72\n    \"\"\"\n    s = 0\n    for i in range(1,n+1,2):\n        s += i ** 3\n    return s\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n# This is solution to 100 Days of Code\ndef cube_Sum(n):\n    return (n**3)*(n+1)//2\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(t):\n    return '-'.join(t)\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(t, delimiter=\"-\"):\n    return delimiter.join(map(str, t))\n\ndef main():\n    print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")))\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_):\n    string = \"\"\n    for item in tuple_:\n        string += item + \"-\"\n\n    return string[:-1]\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    \"\"\"\n    Takes a tuple and returns concatenated string\n\n    Parameters\n    ----------\n    tup : tuple\n        Tuple to be converted into string\n\n    Returns\n    -------\n    str\n        Concatenated string from input tuple\n    \"\"\"\n    return \"-\".join(map(str,tup))\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(t):\n    delim = \"-\"\n    return delim.join(str(x) for x in t)\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_to_concat):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for element in tuple_to_concat:\n        result += str(element) + '-'\n    return result[:-1]\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tup):\n    return \"-\".join(tup)\n\n\ndef test_concatenate_tuple():\n    tup = (\"ID\", \"is\", 4, \"UTS\")\n    assert concatenate_tuple(tup) == 'ID-is-4-UTS'\n    tup = ()\n    assert concatenate_tuple(tup) == ''", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    return delimiter.join(tup)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple):\n    \"\"\"\n    Concatenate elements of tuple by delimiter.\n\n    Args:\n        tuple (tuple): Tuple to be concatenated.\n\n    Returns:\n        str: Concatenated elements of tuple separated by delimiter.\n    \"\"\"\n    return (\"\".join([str(x) for x in tuple]))\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(t):\n    s = \"\"\n    for i in range(len(t)):\n        s += str(t[i])\n        if i != len(t)-1:\n            s += \"-\"\n    return s\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum = 0.0\n    for i in range(n+1):\n        sum += (i**3)\n    return sum/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n# Recursively\n\ndef find_Average_Of_Cube(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*n*n + find_Average_Of_Cube(n-1)) / 2\n\n# Iteratively\ndef find_Average_Of_Cube(n):\n    sum_ = 0\n    for i in range(1,n+1):\n        sum_ += i*i*i\n    return sum_ / n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n\tpass\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    if n < 0:\n        raise ValueError(\"n cannot be negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 8.0/3\n    return (n**3+1)*n/2\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return (n*(n+1)*(n+2))/6\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    return n*n*n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\n\n# ## Q2 Write a python function to convert decimeters to inches.", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return 0\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    return sum(x**3 for x in range(1, n+1)) / n\n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(mine, rows, cols):\n    # print(mine, rows, cols)\n    if rows == 0 or cols == 0:\n        return 0\n    else:\n        left = get_maxgold(mine, rows-1, cols)\n        right = get_maxgold(mine, rows, cols-1)\n        # print(left, right)\n        if mine[rows][cols] > left and mine[rows][cols] > right:\n            return mine[rows][cols]\n        elif mine[rows][cols] > left:\n            return left\n        elif mine[rows][cols] > right:\n            return right\n        else:\n            return 0\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef gold_mine(mines,row,col):\n    # base case\n    if row == col == 0:\n        return 0\n    # if a cell is empty, the answer is the maximum of the answers of the cells in its 8 neighbours\n    if mines[row][col] == 0:\n        return max(gold_mine(mines,row-1,col-1), gold_mine(mines,row-1,col), gold_mine(mines,row-1,col+1), gold_mine(mines,row,col-1), gold_mine(mines,row,col+1), gold_mine(mines,row+1,col-1), gold_mine(mines,row+1,col))\n    else:\n        return 0\n\n\ndef get_maxgold(mines,row,col):\n    # base case\n    if row == 0 or col == 0:\n        return 0\n    # recursive function to get the maximum number of gold in all cells\n    return max(gold_mine(mines,row,col), gold_mine(mines,row,col-1), gold_mine(mines,row-1,col), gold_mine(mines,row-1,col-1))\n\n\ndef print_gold(mines,row,col):\n    # base case\n    if row == 0 or col == 0:\n        return\n    # recursive function to print the gold values of all cells\n    if mines[row][col] == 0:\n        print(mines[row][col],end=\" \")\n        print_gold(mines,row-1,col)\n        print_gold(mines,row,col-1)\n        print_gold(mines,row-1,col-1)\n\n\nmines=[[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(gold_mine,i,j):\n\tif i>=len(gold_mine) or j>=len(gold_mine[0]):\n\t\treturn 0\n\tif gold_mine[i][j] == 0:\n\t\treturn get_maxgold(gold_mine,i+1,j) + get_maxgold(gold_mine,i,j+1)\n\telse:\n\t\tgold = gold_mine[i][j]\n\t\tgold_mine[i][j] = 0\n\t\tg1 = get_maxgold(gold_mine,i+1,j)\n\t\tg2 = get_maxgold(gold_mine,i,j+1)\n\t\tgold_mine[i][j] = gold\n\t\treturn gold + max(g1,g2)\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(minefield,m,n):\n    \"\"\"\n    Uses dynamic programming to solve the problem.\n    \"\"\"\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i==0 or j==0:\n                dp[i][j] = 0\n            else:\n                if minefield[i-1][j-1] == 1:\n                    dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])+minefield[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])\n    return dp[m][n]\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(mine_field,rows,cols):\n    if rows==0 or cols==0:\n        return 0\n\n    if mine_field[rows-1][cols-1]==0:\n        return get_maxgold(mine_field,rows-1,cols) + get_maxgold(mine_field,rows,cols-1)\n\n    return mine_field[rows-1][cols-1] + get_maxgold(mine_field,rows-1,cols) + get_maxgold(mine_field,rows,cols-1)\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(m,w,c):\n    gold = [[0]*(len(m[0])-1) for _ in range(len(m))]\n    for x in range(w):\n        for y in range(len(m)-1):\n            for z in range(len(m[0])-1):\n                gold[y][z] = max(gold[y][z], gold[y][z+1]+gold[y+1][z] + m[y][z+1] + m[y+1][z] )\n                if gold[y][z] < gold[y+1][z+1] + m[y+1][z+1] + m[y+1][z]:\n                    gold[y][z] = gold[y+1][z+1] + m[y+1][z+1] + m[y+1][z]\n    return gold[0][0]\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid,r,c):\n    m = len(grid)\n    if m==0:\n        return 0\n    n = len(grid[0])\n    def dfs(row,col,sol):\n        if row<0 or col<0 or row>=m or col>=n or grid[row][col]==0:\n            return 0\n        grid[row][col] = 0\n        maxgold = max(sol, dfs(row+1,col,sol+grid[row][col]), dfs(row-1,col,sol+grid[row][col]), dfs(row,col+1,sol+grid[row][col]), dfs(row,col-1,sol+grid[row][col]))\n        return maxgold\n    return dfs(r,c,0)\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(mines,row,col):\n    if row==0 or col==0:\n        return 0\n    if mines[row][col]>=0:\n        return mines[row][col]\n    ret = max(get_maxgold(mines,row-1,col),get_maxgold(mines,row,col-1))\n    if mines[row][col]==0:\n        if row==row-1 and col==col-1:\n            ret += 1\n        else:\n            ret = max(ret,get_maxgold(mines,row-1,col-1),get_maxgold(mines,row+1,col-1),get_maxgold(mines,row-1,col+1),get_maxgold(mines,row+1,col+1))\n    return ret\n\n#print(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4))"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(T):\n    return tuple(T[i][::-1] for i in range(len(T)))\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(t):\n    return tuple(s[-1] for s in t)\n\n# assert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\n# assert extract_rear(('Coke', 'Pepsi', '7Up')) == ['', 'p', 'p']\n\n\n# +", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(input):\n    return input[::-1]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n\n    :param tup: tuple\n    :return: list\n    \"\"\"\n    out = []\n    for x in tup:\n        out.append(x[-1])\n    return out\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef extract_rear(tup: Tuple[str, str, str]) -> Tuple[str, str, str]:\n    return (tup[-1], tup[-2], tup[-3])\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n    return [t[-1] for t in tup]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tup):\n    tup_list = list(tup)\n    return tuple(tup_list[-1:])\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuples):\n    return [tuple[2] for tuple in tuples]\n\n\n# Q.3", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple):\n    return tuple[::-1]\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n    return tuple([tup[len(tup)-i-1] for i in range(0, len(tup))])\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists, element):\n    list_of_counts = [0]*len(list_of_lists)\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] == element:\n                list_of_counts[i] += 1\n    return list_of_counts\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(l,x):\n    return sum([1 for i in l if x in i])\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst, element):\n    return len([x for x in lst if element in x])\n\n# Run your test cases in this block\n# print(\"The count of 3 is: {}\".format(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)))\n# print(\"The count of 7 is: {}\".format(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],7)))", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(L,n):\n    count=0\n    for i in L:\n        if n in i:\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists, element):\n    count = 0\n    for lst in list_of_lists:\n        count += len(list(filter(lambda x: x == element, lst)))\n    return count\n\n\n# -\n\nlist(filter(lambda x: x == 3, [1, 3, 7, 9, 11]))\n\n# +", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists, element):\n    return len([x for x in list_of_lists if element in x])\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists, element):\n    \"\"\"\n    Counts the number of sublists containing an element\n    \"\"\"\n    return sum([1 for sublist in list_of_lists if element in sublist])\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists, element):\n    return len(list(filter(lambda x: element in x, list_of_lists)))\n\n#print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1))\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst, ele):\n    count = 0\n    for sublist in lst:\n        if ele in sublist:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst,el):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if el in lst[i] and el in lst[j]:\n                count = count+1\n    return count\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return [number for number in numbers if number % 2 != 0]\n\n\ndef main():\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(data):\n    return list(filter(lambda x: x % 2 != 0, data))\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 == 1, numbers))", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers_list):\n    return [numbers for numbers in numbers_list if numbers % 2 != 0]\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(l):\n\treturn list(filter(lambda x: x % 2 != 0, l))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numberlist):\n    return [num for num in numberlist if num % 2 != 0]\n\ndef test():\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n\ntest()", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(lst):\n    return [x for x in lst if x%2 != 0]\n\n#print(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2 != 0, numbers))\n\n#def filter_oddnumbers(numbers):\n#    return [number for number in numbers if number%2 != 0]\n\ndef test_filter_oddnumbers():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_oddnumbers(numbers))\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2, lst))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    '''\n    :param date: 'yyyy-mm-dd'\n    :return: 'dd-mm-yyyy'\n    '''\n    assert date != ''\n    return re.sub(r'([0-9]{2})-([0-9]{2})-([0-9]{4})', r'\\3-\\1-\\2', date)\n\n\ndef test_change_date_format():\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n    \"\"\"\n    :param date: date as string in yyyy-mm-dd format\n    :return: date as string in dd-mm-yyyy format\n    \"\"\"\n    return re.sub(\"-\", \"\", date)\n\n\ndef test_change_date_format():\n    print(change_date_format(\"2026-01-02\"))\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date_in):\n    return re.sub(r'([0-9]{4})-([0-9]{2})-([0-9]{2})', r'\\3-\\1-\\2', date_in)", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nfrom typing import List\nimport re\n\n\ndef change_date_format(date_string: str) -> str:\n    \"\"\"\n\n    :param date_string:\n    :return:\n    \"\"\"\n    p = re.compile(r\"(\\d\\d)-(\\d\\d)-(\\d\\d)\")\n    r = p.match(date_string).groups()\n    return \"-\".join(r)\n\n\ndef change_date_format2(date_string: str) -> str:\n    \"\"\"\n\n    :param date_string:\n    :return:\n    \"\"\"\n    p = re.compile(r\"(\\d\\d)-(\\d\\d)-(\\d\\d)\")\n    r = p.match(date_string).groups()\n    return \"-\".join(r)\n\n\ndef change_date_format3(date_string: str) -> str:\n    \"\"\"\n\n    :param date_string:\n    :return:\n    \"\"\"\n    p = re.compile(r\"(\\d\\d)-(\\d\\d)-(\\d\\d)\")\n    r = p.match(date_string).groups()\n    return \"-\".join(r)\n\n\ndef change_date_format4(date_string: str) -> str:\n    \"\"\"\n\n    :param date_string:\n    :return:\n    \"\"\"\n    p = re.compile(r\"(\\d\\d)-(\\d\\d)-(\\d\\d)\")\n    r = p.match(date_string).groups()\n    return \"-\".join(r)\n\n\ndef change_date_format5(date_string: str) -> str:\n    \"\"\"\n\n    :param date_string:\n    :return:\n    \"\"\"\n    p = re.compile(r\"(\\d\\d)-(\\d\\d)-(\\d\\d)\")\n    r = p.match(date_string).groups()\n    return \"-\".join(r)\n\n\ndef change_date_format6(date_string: str) -> str:\n    \"\"\"\n\n    :param date_string:\n    :return:\n    \"\"\"\n    p = re.compile(r\"(\\d\\d", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date_string):\n    \"\"\"\n    date_string: input date in format yyyy-mm-dd\n    \n    returns: string with the date in the format dd-mm-yyyy\n    \"\"\"\n    return date_string.split(\"-\")[::-1]\n\n\ndef test_change_date_format():\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    pattern = \"^(\\d{4})-(\\d{2})-(\\d{2})\"\n    result = re.search(pattern, date)\n    if not result:\n        raise ValueError(\"Invalid date format\")\n    yyyy = result.group(1)\n    mm = result.group(2)\n    dd = result.group(3)\n    return f\"{dd}-{mm}-{yyyy}\"", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(string):\n    \"\"\"Change date of yyyy-mm-dd format to dd-mm-yyyy format.\n    Args:\n        string (str): a string with yyyy-mm-dd format.\n    Returns:\n        str: a string with dd-mm-yyyy format.\n    \"\"\"\n    return string.replace(\"-\", \"\")", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\ndef change_date_format(date):\n    return re.sub(r'(-|/)([0-9]{2})', r'\\2-\\1', date)\n\n#print(change_date_format(\"2026-01-02\"))\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    return re.sub(r'(-|:)', '', date)\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date_string):\n    return re.sub(r\"(\\d{4}-\\d{2}-\\d{2})\", r\"\\1\", date_string)\n\n\ndef main():\n    print(change_date_format(\"2026-01-02\"))\n\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(array):\n    \"\"\"\n    Shell sort\n    \"\"\"\n    array_copy = array.copy()\n    n = len(array_copy)\n    h = 1\n\n    while h < n:\n        for i in range(h, n):\n            j = i\n            while j >= h and array_copy[j] < array_copy[j-h]:\n                array_copy[j], array_copy[j-h] = array_copy[j-h], array_copy[j]\n                j -= h\n\n        h += 1\n\n    return array_copy\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(list):\n    list.sort(key=lambda x: x)\n    return list\n\ndef test_shell_sort():\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    # Base case\n    if len(arr) < 2:\n        return arr\n\n    # Recursive case\n    for gap in range(len(arr)//2, 0, -1):\n        for i in range(gap, len(arr)):\n            j = i\n            while j - gap >= 0 and arr[j] < arr[j-gap]:\n                arr[j], arr[j-gap] = arr[j-gap], arr[j]\n                j -= gap\n    return arr", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    # write your code here\n    n = len(arr)\n    if n < 2:\n        return arr\n    gap = n // 2\n    temp = [0] * n\n    for i in range(n // gap):\n        for j in range(gap, n):\n            temp[j] = arr[j]\n        for j in range(gap, n-gap, -gap):\n            arr[j] = temp[j]\n    return arr", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n\n    temp_arr = arr.copy()\n    _shell_sort(temp_arr)\n    return temp_arr\n\ndef _shell_sort(arr):\n\n    \"\"\"\n    Implementation of shell sort.\n    \"\"\"\n\n    n = len(arr)\n    h = int(n / 2)\n    while h > 0:\n        for i in range(h, n):\n            j = i\n            while j >= h and arr[j] < arr[j - h]:\n                temp = arr[j]\n                arr[j] = arr[j - h]\n                arr[j - h] = temp\n                j -= h\n        h = (h - 1) // 2\n\n# Test cases", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n# You can use 'for i in range(0, len(arr)-1):' to iterate through the array.\ndef shell_sort(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        return arr\n    for gap in range(arr_len // 2, 0, -1):\n        for i in range(gap, arr_len):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j-gap] > temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n    return arr\n\n\ndef test_shell_sort():\n    # [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]\n    arr = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]\n    assert shell_sort(arr) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert shell_sort([56, 32, 81, 12, 23, 54, 23, 81, 23, 54]) == [54, 23, 54, 23, 81, 23, 56, 81, 32, 56]\n    assert shell_sort([1, 5, 2, 4, 3, 9, 1, 2]) == [1, 1, 2, 2, 3, 4, 5, 9]\n    assert shell_sort([5", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(numbers):\n    \"\"\"\n    sort the numbers\n    \"\"\"\n    for gap in range(len(numbers)):\n        # Find the gap to divide the numbers into two parts, the numbers to the left of the gap and the numbers to the right of the gap.\n        for i in range(gap + 1, len(numbers)):\n            # Find the next gap to divide the numbers to the left of the current gap into two parts,\n            # and the numbers to the right of the current gap into two parts.\n            while numbers[i] < numbers[i - gap]:\n                # The numbers to the left of the gap are sorted, so swap the numbers to the left of the current gap with the numbers to the right of the current gap.\n                numbers[i], numbers[i - gap] = numbers[i - gap], numbers[i]\n    return numbers\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(items):\n    \"\"\"\n    Shell sort\n    \"\"\"\n    N = len(items)\n    if N < 2:\n        return items\n    mid = N//2\n    # Create sublists\n    L = items[:mid]\n    R = items[mid:]\n    # Sort sublists\n    L = shell_sort(L)\n    R = shell_sort(R)\n    # Merge them\n    items = L + R\n    return items\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    \"\"\"\n    Shell sort implementation using the insertion sort method\n    :param arr:\n    :return:\n    \"\"\"\n    n = len(arr)\n\n    # iterate through the array\n    for gap in range(int(n/2), 0, -1):\n        for i in range(gap, n):\n            j = i\n            while j >= gap and arr[j] < arr[j-gap]:\n                arr[j], arr[j-gap] = arr[j-gap], arr[j]\n                j -= gap\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j > gap and arr[j - gap] > arr[j]:\n                arr[j], arr[j - gap] = arr[j - gap], arr[j]\n                j -= gap\n            # print(\"i: {}, j: {}\".format(i, j))\n        gap //= 2\n    return arr\n\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    '''\n    return tuple(x1 and x2 for x1, x2 in zip(t1, t2))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tup1, tup2):\n    return tup1[0] == tup2[0] and tup1[1] == tup2[1] and tup1[2] == tup2[2] and tup1[3] == tup2[3]\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tuple1, tuple2):\n    new_tup = []\n    for i in range(len(tuple1)):\n        new_tup.append((tuple1[i], tuple2[i]))\n    return tuple(new_tup)\n\n# # TESTING\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    \"\"\"\n    This method compares tuple1 and tuple2 and return the indices of elements that are True for both tuples\n    \"\"\"\n\n    # your code here\n    return (i, j) for i, j in zip(tuple1, tuple2) if tuple1[i] == tuple2[j]\n\n\ndef test_and_tuples():\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\n\ndef or_tuples(tuple1, tuple2):\n    \"\"\"\n    This method compares tuple1 and tuple2 and return the indices of elements that are True for either tuples\n    \"\"\"\n\n    # your code here\n    return (i, j) for i, j in zip(tuple1, tuple2) if tuple1[i] or tuple2[j]\n\n\ndef test_or_tuples():\n    assert or_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (1, 1, 2, 2)\n\n\ndef xor_tuples(tuple1, tuple2):\n    \"\"\"\n    This method compares tuple1 and tuple2 and return the indices of elements that are True for either tuples\n    \"\"\"\n\n    # your code here\n    return (i, j) for i, j in zip(tuple1, tuple2) if tuple1[i] == tuple2[j] or not (tuple1[i] and tuple2[j])\n\n\ndef test_xor_tuples():\n    assert xor_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 1, 2, 1)", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(*args):\n    result = []\n    for arg in args:\n        for i in range(len(arg)):\n            result.append((arg[i]))\n    return tuple(result)", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(x, y):\n    assert type(x) == tuple and type(y) == tuple, \"You must use tuples as input!\"\n    assert len(x) == len(y), \"The two tuples must be of the same length.\"\n    return [x[i] & y[i] for i in range(len(x))]\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(t1, t2):\n    return tuple(zip(t1, t2))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    res = []\n    for i in range(len(t1)):\n        if t1[i] == t2[i]:\n            res.append(0)\n        else:\n            res.append(1)\n    return tuple(res)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n# write your code here\n\ndef and_tuples(tup_1, tup_2):\n    res = []\n    for i in range(len(tup_1)):\n        if tup_1[i] == tup_2[i]:\n            res.append(1)\n        else:\n            res.append(0)\n    return tuple(res)\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(*args):\n    result = []\n    for i, tup in enumerate(args):\n        for j, v in enumerate(tup):\n            result.append((i,j,v))\n    return result\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    import math\n    return ((b**2)-4*a*c)/2*a", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return (b*b-4*a*c)/2*a\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return (-b**2-4*a*c)/(2*a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return ((a*b)-4*a*c)/2", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\nfunction parabola_directrix(a,b,c)\n    return (-b)^2/(4a) + c/(2a)\nend\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    return (b**2-4*a*c)/(2*a)\n\n#Add your code below this line\n\n#Add your code above this line", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\nfunction parabola_directrix(a,b,c)\n    return -b/2a\nend\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    return (-b+sqrt(b**2-4*a*c))/2*a\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\nfrom typing import List\n\ndef parabola_directrix(a:int,b:int,c:int)->int:\n    #pass\n    if (a**2) * (b**2) == 4 * c**3:\n        return -1\n    if (a**2) * (b**2) < 4 * c**3:\n        return -1\n    discriminant = (b**2) * (4 * a**3 - 27 * c**2)\n    if discriminant < 0:\n        return -1\n    discriminant = discriminant**0.5\n    if b**2 == 0:\n        return -1\n    d = (-b**3) + (4 * a * c**2)\n    if discriminant == 0:\n        if d == 0:\n            return -1\n        return d/a\n    return -1", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return -1\n    elif d == 0:\n        return -1/a\n    elif d > 0:\n        return -b + math.sqrt(d)/(2*a)\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(A, B):\n    for i in A:\n        for j in B:\n            if i == j:\n                return True\n    return False\n    ", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(lst_one, lst_two):\n    return any(item in lst_one for item in lst_two)\n\n# NOTE:  This solution has a time complexity of O(N^2)", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(lst1, lst2):\n    for elem in lst1:\n        if elem in lst2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(x, y):\n    return (x[0] in y) or (y[0] in x)\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    if list1 == [] or list2 == []:\n        return False\n    else:\n        for item in list1:\n            if item in list2:\n                return True\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(lst1, lst2):\n    for element in lst1:\n        if element in lst2:\n            return True\n    return False\n\ndef test_common_element():\n    assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n    assert common_element([1,2,3,4,5], [5,6,7,8,10])==False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(lst1, lst2):\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    \"\"\"\n    Returns the median of the trapezium formed by the three given numbers.\n    \"\"\"\n    return (a+b+c)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    \"\"\"\n    a: int\n    b: int\n    c: int\n    \"\"\"\n    #solution\n    if a>b and a>c and b>c:\n        return min(a,b,c)\n    elif a>b and a>c and b<c:\n        return max(a,b,c)\n    elif a>b and a<c and b>c:\n        return a\n    elif a>b and a<c and b<c:\n        return b\n    elif a<b and a>c and b>c:\n        return c\n    elif a<b and a>c and b<c:\n        return a\n    elif a<b and a<c and b>c:\n        return b\n    elif a<b and a<c and b<c:\n        return c\n    else:\n        return None\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return (a+b+c)/3\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n#\n# This solution is a very simple brute force. \n#\ndef median_trapezium(a,b,c):\n    \"\"\"\n    Find the median of a trapezium given it's 3 sides\n    \"\"\"\n    if (a < b) and (b < c):\n        return min(a,min(b,c))\n    elif (a < c) and (c < b):\n        return min(a,min(c,b))\n    elif (b < a) and (a < c):\n        return min(b,min(a,c))\n    elif (b < c) and (c < a):\n        return min(b,min(c,a))\n    elif (c < a) and (a < b):\n        return min(c,min(a,b))\n    elif (c < b) and (b < a):\n        return min(c,min(b,a))\n    return 0\n\ndef median_trapezium_2(a,b,c):\n    \"\"\"\n    Find the median of a trapezium given it's 3 sides\n    \"\"\"\n    return min(a,min(b,c))\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return (a+b+c)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return (a+b+c)/2\n    ", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(top,bottom,width):\n    return (top+bottom)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(top, bottom, left, right):\n    return (left+right+top+bottom)/4\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    \"\"\"\n    >>> median_trapezium(15,25,35)\n    20\n    >>> median_trapezium(12,24,36)\n    24\n    >>> median_trapezium(10,20,30)\n    20\n    >>> median_trapezium(1,2,3)\n    2\n    \"\"\"\n    if a>b and a>c and b>c:\n        if (b-a)*(c-a)<(c-b)*(b-a):\n            median=(a+c)/2\n        elif (b-c)*(a-c)<(a-b)*(b-c):\n            median=(b+a)/2\n        elif (c-a)*(b-a)<(b-c)*(c-a):\n            median=(c+b)/2\n        else:\n            median=(a+b+c)/3\n    elif a>b and a>c and c>b:\n        if (c-a)*(b-a)<(b-c)*(c-a):\n            median=(b+a)/2\n        elif (b-c)*(a-c)<(c-b)*(b-c):\n            median=(c+b)/2\n        elif (a-b)*(c-b)<(b-c)*(c-a):\n            median=(a+c)/2\n        else:\n            median=(b+c+a)/3\n    elif a>b and b>c and c>a:\n        if (a-b)*(c-b)<(c-a)*(b-b):\n            median=(a+c)/2\n        elif (b-c)*(a-c)<(a-b)*(b-c):\n            median=(b+a)/2\n        elif (c-a)*(b-a)<(a-b)*(c-a):\n            median=(c+a)/2\n        else:\n            median=(a+b+c)/3\n    elif a>c and b>a and b>c:\n        if (a-c)*(b-c)<(b-a)*(c-b):\n            median=(b+c)/2", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    return ((a + b + c) / 2)\n    "], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, val):\n    for element in arr:\n        if val > element:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than the elements of the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(num_list, num):\n    return \"No, entered number is less than those in the array\" if num < min(num_list) else \"Yes, entered number is greater than those in the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    for element in arr:\n        if element < num:\n            return \"No, entered number is less than those in the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n# def check_greater(array, element):\n#     for i in array:\n#         if i < element:\n#             return f\"Yes, element is greater than {i}\"\n#     return f\"No, entered number is less than those in the array\"\n\ndef check_greater(array, element):\n    for i in array:\n        if i < element:\n            return f\"Yes, element is greater than {i}\"\n    return f\"No, entered number is less than those in the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, n):\n    for i in arr:\n        if i < n:\n            return 'No, entered number is less than those in the array'\n    return 'Yes, entered number is greater than those in the array'", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(array, num):\n    # Your code goes here\n    #return 'No, entered number is less than those in the array'\n    \n    for i in array:\n        if i > num:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(array, n):\n    # Write your code here\n    return 'No, entered number is less than those in the array' if n <= min(array) else 'Yes, entered number is greater than the elements in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    return f'No, entered number is less than those in the array' if num <= arr[0] else 'Yes, entered number is greater than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    return \"No, entered number is less than those in the array\" if min(arr) > num else \"Yes, entered number is greater than those in the array\"\n\n\n#Test cases\n#print(check_greater([1, 2, 3, 4, 5], 1))\n#print(check_greater([1, 2, 3, 4, 5], 6))\n#print(check_greater([1, 2, 3, 4, 5], 4))", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    if num > max(arr):\n        return \"Yes, entered number is greater than those in the array\"\n    else:\n        return \"No, entered number is less than those in the array\"\n\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(s):\n    if s[:2]=='ab':\n        return f\"Matched {s[:2]}\"\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(string):\n    pass\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if re.search('a.*b', text) != None:\n        return ('Match!')\n    else:\n        return ('Not matched!')\n\n\n# +", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef test_text_match_one():\n    assert text_match_one(\"ab\")==('ac')\n    assert text_match_one(\"abc\")==('abc')\n    assert text_match_one(\"ac\")==('Not matched!')\n\ndef test_text_match_one_fail():\n    assert text_match_one(\"ab\")==('ac')\n    assert text_match_one(\"abc\")==('abc')\n    assert text_match_one(\"ab\")==('Not matched!')\n\ndef test_text_match_one_fail2():\n    assert text_match_one(\"ab\")==('Not matched!')\n    assert text_match_one(\"abc\")==('Not matched!')\n    assert text_match_one(\"ab\")==('Not matched!')\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    try:\n        match = re.search(\"a(.*?)b+\",text)\n        return \"Matched!\"\n    except:\n        return \"Not matched!\"\n\n\ntext_match_one(\"ac\")\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    # Your code here\n    if 'a' in text and 'b' in text:\n        return text\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(string):\n    m = re.search(\"a.*b\", string)\n    if m:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    return 'Not matched!'\n\n\ndef text_match_one(text):\n    return 'Matched!' if 'a' in text and 'b' in text else 'Not matched!'\n\n\ndef text_match_one(text):\n    return \"Matched!\" if \"a\" in text and \"b\" in text else \"Not matched!\"\n\n\ndef text_match_one(text):\n    if \"a\" in text and \"b\" in text:\n        return \"Matched\"\n    else:\n        return \"Not matched\"\n\n\ndef text_match_one(text):\n    if 'a' in text and 'b' in text:\n        return 'Matched'\n    else:\n        return 'Not matched'\n\n\ndef text_match_one(text):\n    if 'a' in text and 'b' in text:\n        return 'Matched'\n    else:\n        return 'Not matched'\n\n\ndef text_match_one(text):\n    return \"Not matched!\" if \"a\" not in text and \"b\" not in text else \"Matched!\"\n\n\ndef text_match_one(text):\n    if \"a\" in text and \"b\" in text:\n        return \"Matched\"\n    else:\n        return \"Not matched\"\n\n\ndef text_match_one(text):\n    if \"a\" in text and \"b\" in text:\n        return \"Matched\"\n    else:\n        return \"Not matched\"\n\n\ndef text_match_one(text):\n    if \"a\" in text and \"b\" in text:\n        return \"Matched\"\n    else:\n        return \"Not matched\"\n\n\ndef text_match_one(text):\n    if 'a' in text and 'b' in text:\n        return 'Matched'\n    else:\n        return 'Not matched'\n\n\ndef text_match_one(text):\n    if 'a' in text and 'b' in text:\n        return 'Matched'\n    else:\n        return 'Not matched'\n\n\ndef text_match_one(text):\n    if 'a' in text and 'b' in text:\n        return 'Matched'\n    else:\n        return 'Not matched'\n\n\ndef text_match_", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    a_b = re.findall(r\"a(b){1,}b\", text)\n    if a_b:\n        return \"Found\"\n    else:\n        return \"Not matched!\"\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    if num < 10:\n        return num\n    else:\n        return last_Digit(num/10)\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    return num % 10\n\ndef last_Digit(num):\n    return str(num)[-1]\n\ndef last_Digit(num):\n    return num % 10\n\ndef last_Digit(num):\n    return str(num)[-1]\n\ndef last_Digit(num):\n    return num % 10\n\ndef last_Digit(num):\n    return num % 10\n\ndef last_Digit(num):\n    return num % 10", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    return num % 10\n\n\n# +", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    \"\"\"\n    >>> last_Digit(123)\n    3\n    >>> last_Digit(124)\n    4\n    \"\"\"\n    return n % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    return num % 10", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    d = int(num % 10)\n    return d\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    \"\"\"\n    Use modular arithmetic to find the last digit.\n    \"\"\"\n    if n < 10:\n        return n\n    return last_Digit(n%10)\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(number):\n    # YOUR CODE GOES HERE\nraise NotImplementedError()\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    '''\n    >>> n = 123\n    >>> last_Digit(n)\n    3\n    >>> n = 1000\n    >>> last_Digit(n)\n    0\n    '''\n\n    a, b = n//10, n%10\n    return a if a == b else b\n\nn = 123", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    \"\"\"\n    Recursive approach\n\n    Parameters\n    ----------\n    num: int\n        Input number\n\n    Returns\n    -------\n    int\n        Last digit of the number\n    \"\"\"\n    return num % 10\n\n\ndef last_Digit(num):\n    \"\"\"\n    Iterative approach\n\n    Parameters\n    ----------\n    num: int\n        Input number\n\n    Returns\n    -------\n    int\n        Last digit of the number\n    \"\"\"\n    while True:\n        if num % 10 == 0:\n            return 0\n        num = num / 10"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from a list\n    \"\"\"\n    return [x for x in lst if x < 0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(list):\n    return list[list.index(-1):]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(nums):\n    return [x for x in nums if x < 0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(n):\n    \"\"\"Returns a list of negative numbers in the given list.\"\"\"\n    return [num for num in n if num < 0]\n\n#Below is an example usage:\n\nimport random\n\ndef neg_nos(n):\n    \"\"\"Returns a list of negative numbers in the given list.\"\"\"\n    return [num for num in n if num < 0]\n\n# Enter the list\nn = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Calling the function", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n\treturn [i for i in lst if i < 0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(l):\n    out = []\n    for i in l:\n        if i < 0:\n            out.append(i)\n    return out\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(nums):\n    return list(filter(lambda x: x < 0, nums))\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(list1):\n  for i in range(len(list1)):\n    if list1[i]<0:\n      print(list1[i])", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(numbers):\n    return filter(lambda x: x < 0, numbers)\n\ndef test_neg_nos():\n    assert neg_nos([-1,4,5,-6]) == -1,-6\n\n# Write a python function to multiply all the numbers in a list.", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(nos):\n    \"\"\"\n    Iterates over a list of numbers and returns a list of the negative numbers.\n\n    @param nos: A list of numbers to be inspected.\n    @return: A list of negative numbers.\n    \"\"\"\n    return [x for x in nos if x < 0]\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    return ''.join([c for c in s if c.isdigit()])\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    # Your code here\n    string = list(string)\n    for i in range(len(string)):\n        if i % 2 == 0:\n            string[i] = string[i]\n    return ''.join(string)", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n\tfor i in range(len(str)):\n\t\tif(str[i]=='y' or str[i]=='n'):\n\t\t\tstr=str[:i] + str[i+1:]\n\t\t\tbreak\n\treturn str", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(word):\n    return \"\".join(filter(lambda i: i % 2 == 0, word))\n\ndef remove_odd(word):\n    return \"\".join(map(str, filter(lambda i: i % 2 == 0, map(int, word))))\n\ndef remove_odd(word):\n    return \"\".join(filter(lambda i: i % 2 == 0, map(str, word)))\n\ndef remove_odd(word):\n    return \"\".join(filter(lambda i: not i%2, word))\n\ndef remove_odd(word):\n    return \"\".join(map(str, filter(lambda i: not i%2, map(int, word))))\n\ndef remove_odd(word):\n    return \"\".join(filter(lambda i: not i%2, map(str, word)))\n\ndef remove_odd(word):\n    return \"\".join(map(str, filter(lambda i: not i%2, word)))\n\ndef remove_odd(word):\n    return \"\".join(filter(lambda i: not i%2, word))\n\ndef remove_odd(word):\n    return \"\".join(filter(lambda i: i % 2 == 0, word))\n\ndef remove_odd(word):\n    return \"\".join(filter(lambda i: i % 2 == 0, map(int, word)))\n\ndef remove_odd(word):\n    return \"\".join(filter(lambda i: i % 2 == 0, map(str, word)))\n\ndef remove_odd(word):\n    return \"\".join(map(str, filter(lambda i: i % 2 == 0, word)))\n\ndef remove_odd(word):\n    return \"\".join(map(str, filter(lambda i: i % 2 == 0, map(int, word))))\n\ndef remove_odd(word):\n    return \"\".join(map(str, filter(lambda i: i % 2 == 0, map(str, word))))\n\ndef remove_odd(word):\n    return \"\".join(filter(lambda i: i % 2 == 0, map(str, word)))\n\ndef remove_", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    newstring = \"\"\n    for s in string:\n        if s%2==0:\n            newstring+=s\n    return newstring\n\n\n#%%", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    return \"\".join(ch for ch in str if ch.isalpha())\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    return ''.join([i for i in str if i.isalpha()])\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    # your code here\n    ret = ''\n    for char in string:\n        if char % 2 == 0:\n            ret += char\n        else:\n            pass\n    return ret\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    return \"\".join([i for i in string if i.isalnum()])\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    return string[0::2]\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\nfrom collections import Counter\ndef count_bidirectional(lst):\n    count_dict = Counter(tuple(sorted(item)) for item in lst)\n    return len(count_dict)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(arr):\n    seen = set()\n    return str(len(set([tuple(x) for x in arr] + seen)))\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(bidirectional_pairs):\n    # Write your code here\n    pass\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\nfrom collections import Counter\n\ndef count_bidirectional(pairs):\n    return str(len(list(Counter(pairs).values())))\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tup_list):\n    # your code here\n    # tuple_list = [(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]\n    count = 0\n    for t1 in tup_list:\n        for t2 in tup_list:\n            if t1 < t2:\n                if t1[1] == t2[0]:\n                    count += 1\n    return str(count)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(lst):\n    count = 0\n    for pair in lst:\n        if pair[0] != pair[1]:\n            continue\n        else:\n            count += 1\n    return str(count)\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tups):\n    \"\"\"\n    >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])\n    3\n    \"\"\"\n    return len(set(tups))\n\ndef test_count_bidirectional():\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == '3'\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1)]) == '3'\n    assert count_bidirectional([(5, 6), (1, 2)]) == '1'\n    assert count_bidirectional([(5, 6)]) == '1'\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(xs):\n    # your code here\n    # count the number of pairs in xs of which both are in xs and count the number of pairs of which both are not in xs\n    # hint: you can use the set type for both types\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(lst):\n    counter = 0\n    for i, j in itertools.combinations(lst, 2):\n        if i[0] == j[1]:\n            counter += 1\n    return str(counter)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(l):\n    result = 0\n    for i in range(0, len(l)):\n        for j in range(0, len(l)):\n            if i != j:\n                if l[i] == l[j]:\n                    result += 1\n    return str(result)\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    return int(''.join(map(str, lst)))", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n#from collections import Counter\n\ndef multiple_to_single(list_):\n    a = list_[0]\n    for x in list_[1:]:\n        a *= x\n    return a\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\nfrom collections import Counter\n\ndef multiple_to_single(list_of_nums):\n    \"\"\"\n    Given an array of integers, return a single integer.\n    \"\"\"\n    try:\n        return int(''.join(list_of_nums))\n    except:\n        return None\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(n_list):\n    # Create empty string to hold output string\n    s = \"\"\n\n    for n in n_list:\n        s += str(n)\n\n    return int(s)\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    for i in numbers:\n        for j in numbers:\n            if j!=i:\n                if i*j == j*i:\n                    return i*j\n    return 1\n\n\ndef test_multiple_to_single():\n    assert multiple_to_single([11, 33, 50])==113350\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(list_1):\n    return reduce(lambda x,y: x*10 + y, list_1, 0)\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(arr):\n    result = 0\n    for num in arr:\n        result = result + num\n    return result\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    res = 0\n    for num in lst:\n        res = res * 10 + num\n    return res\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(li):\n    sum_ = 0\n    for i in li:\n        sum_ += i\n    return sum_\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(a_list_of_numbers):\n    result = 0\n    for item in a_list_of_numbers:\n        result = result * 10 + item\n    return result\n\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(text):\n    if text == None or text == \"\":\n        return []\n    result = []\n    for i, c in enumerate(text):\n        if c == ' ':\n            result.append((i, text[i]))\n    return result\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sent):\n    \"\"\"\n    Finds all adverbs and their positions in a given sentence.\n    \"\"\"\n    return [(i, w, 'adverb') for (i, w) in enumerate(sent) if w in adv]\n\n# Testcases:", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(s):\n    \"\"\"\n    Find all adverb and their positions in the given sentence.\n    Returns a tuple of tuples\n    \"\"\"\n    position = []\n    adverb = []\n    for i in range(len(s)):\n        if s[i]=='!':\n            position.append((i, 'rudely'))\n        elif s[i]=='?':\n            position.append((i, 'helpfully'))\n        elif s[i]=='!!':\n            position.append((i, 'angrily'))\n    return position\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence:str)->tuple:\n    \"\"\"\n    Find all adverbs and their positions in a given sentence.\n    \"\"\"\n    adj_list = []\n    for i, word in enumerate(sentence.split()):\n        #print(\"i,word:\",i,word)\n        #print(\"word in ENGLISH_ADVERBS:\",word in ENGLISH_ADVERBS)\n        if word in ENGLISH_ADVERBS:\n            #print(i)\n            adj_list.append((i, word))\n    return adj_list\n\n\n#if __name__ == '__main__':\n#    print(find_adverb_position(\"clearly!! we can see the sky\"))", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    result = []\n    words = sentence.split(' ')\n    for word in words:\n        if 'ly' in word:\n            result.append((words.index(word), len(word), word))\n    return result\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    adverbs_positions = []\n    for i in range(0, len(sentence)):\n        if sentence[i].lower() in ADVERB_LIST:\n            adverbs_positions.append((i, i+len(sentence[i])))\n    return adverbs_positions\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nimport re\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Write your solution here\n    \"\"\"\n    #find adverb and return tuple of (start index, end index, adverb_word)\n    pattern = re.compile(r'\\b(\\w+)(\\W)')\n    pattern_search = pattern.findall(sentence)\n    adverb_pos = []\n    for i in range(len(pattern_search)):\n        m = pattern_search[i]\n        if 'adverb' in m[1]:\n            adverb_pos.append((m[0], i, m[1]))\n    return adverb_pos\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nfrom collections import defaultdict\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Args:\n        sentence (str): The sentence in which we want to find adverbs.\n    Returns:\n        dict: A dictionary containing adverb (str) as the key and a list of tuples (int, int, str) as the value,\n        where the first tuple contains the position of the adverb in the sentence, the second tuple contains the position of the sentence in the paragraph, and the third tuple contains the paragraph as a whole.\n    \"\"\"\n    adverb_position_dict = defaultdict(list)\n    paragraph = sentence.split('.')[0]\n    for i in range(len(paragraph)):\n        for j in range(len(paragraph) - 1):\n            if paragraph[i] == ' ' and paragraph[i+1] == ' ' and paragraph[i+2] == ' ':\n                if paragraph[i+1] == 'n' and paragraph[i+2] == 'a':\n                    adverb_position_dict[paragraph[i]].append((i, i+2, paragraph[i:i+2]))\n\n    return adverb_position_dict\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    return [\n        (i, len(sentence), a)\n        for i, a in enumerate(sentence.split(\" \"))\n        if a in [\"only\", \"also\", \"well\", \"also\", \"certainly\", \"absolutely\", \"indeed\", \"definitely\"]\n    ]\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(text):\n    for pos, token in enumerate(text.split(' ')):\n        if token.endswith('ly'):\n            return pos, pos, token\n    return None, None, None\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(length):\n    return 6*length*length*length\n\n\n# +", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(l):\n    return 6*l**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(n):\n    assert n>0, \"Negative number\"\n    return 6*n*n\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(x):\n    return 6*x**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(n):\n    return 6*n**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(c):\n    return 6*c*c\n\n\n# +", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(n):\n    return 6*n*n\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(x):\n    return 6*x**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(l):\n    return 6*l*l\n\ndef surfacearea_sphere(r):\n    return 4*np.pi*r**2\n\ndef surfacearea_cylinder(h, r):\n    return 2*np.pi*h*r\n\ndef main():\n    assert surfacearea_cube(5)==150\n    assert surfacearea_sphere(5)==78.54\n    assert surfacearea_cylinder(5, 5)==125\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(r):\n    return 6*r**2\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(numbers):\n    pos_numbers = 0\n    neg_numbers = 0\n    for number in numbers:\n        if number > 0:\n            pos_numbers += 1\n        elif number < 0:\n            neg_numbers += 1\n    return pos_numbers/len(numbers)", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    return sum(map(lambda x: x > 0, arr)) / len(arr)\n\n\n# +\n#Test Case 2:\n#Write a function that takes a list of numbers and returns the mode of the list.", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(array):\n    total=0\n    for i in array:\n        if i>0:\n            total+=1\n    return total/len(array)\n\n#----------------------------------------------------------------------------------------", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(numbers):\n    total = 0\n    for num in numbers:\n        if num > 0:\n            total += 1\n    return total / len(numbers)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n  count = 0\n  for num in nums:\n    if num > 0:\n      count += 1\n  return count / len(nums)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(num):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: float\n    \"\"\"\n    num_pos = 0\n    for num_ in num:\n        if num_ > 0:\n            num_pos += 1\n    return num_pos/len(num)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(numbers):\n    positive_numbers = 0\n    for n in numbers:\n        if n >= 0:\n            positive_numbers += 1\n    return positive_numbers/len(numbers)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n\n    >>> assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    \"\"\"\n    positive_numbers = 0\n    for i in arr:\n        if i >= 0:\n            positive_numbers += 1\n    return positive_numbers / len(arr)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    length = len(arr)\n    count = 0\n    for item in arr:\n        if item > 0:\n            count += 1\n    return count / length\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(array):\n    \"\"\"\n    :param array: a list of integers\n    :return: a float\n    \"\"\"\n    return len(array)/float(len(array))\n\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(arr):\n    \"\"\"\n    :param arr: list\n    :return: largest negative number\n    \"\"\"\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            res = max(res, arr[i])\n    return res\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(num_list):\n    # Write your code here\n    num_list.sort()\n    return num_list[-1]\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    # Your code here\n    neg = None\n    for element in lst:\n        if element < 0:\n            neg = element\n    return neg\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(numbers):\n    # write your code here\n    return max(numbers)\n\n# DO NOT CHANGE CODE BELOW THIS LINE", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    max_val = 0\n    for val in lst:\n        if val < 0:\n            if val > max_val:\n                max_val = val\n    return max_val\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(num_list):\n    return max(num_list, key=lambda x: x if x >= 0 else -x)\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(nums):\n    largest_neg = float(\"-inf\")\n    for num in nums:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(arr):\n    return max(arr)\n\ndef test_largest_neg():\n    assert largest_neg([1,2,3,-4,-6]) == -6\n    assert largest_neg([1,-2,3,-4,-6]) == -4\n    assert largest_neg([-2,-1,-1]) == -2\n    assert largest_neg([-5,2,4,7,8,0]) == 0\n    assert largest_neg([1,2,3,4,5,6,7,8,9,0]) == -5\n    assert largest_neg([1,0,0]) == -1\n    assert largest_neg([]) == -1", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(li):\n\tif len(li) < 2:\n\t\treturn -999999999\n\tfor i in range(len(li)):\n\t\tif li[i] < 0:\n\t\t\treturn li[i]\n\treturn -999999999\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\n#We can use built in functions\ndef largest_neg(lst):\n    return max(lst) if max(lst) < 0 else 0\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tup, k):\n    return tuple((x,) if len(x) == k else (x[k:] if len(x) > k else x) for x in tup)\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuples, k):\n    return [tuple(t[k:k + k]) for t in tuples]\n\n\n# TESTS", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(input_tuple_list: list, k: int) -> list:\n    trimmed_list = []\n\n    for tup in input_tuple_list:\n        trimmed_list.append(tup[:k])\n    \n    return trimmed_list\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    \"\"\"\n    :param tuple_list:\n    :param k:\n    :return:\n    \"\"\"\n    trimmed_list = []\n    for t in tuple_list:\n        trimmed_list.append(tuple(t[-k:]))\n    return trimmed_list\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    \"\"\"\n    Args:\n        tuple_list (list): A list of tuples\n        k (int): Trim the number of k values from the end of each tuple.\n    Returns:\n        list: The list of tuples after trimming.\n    \"\"\"\n    trimmed_tuples = []\n    for tuple_ in tuple_list:\n        trimmed_tuples.append(tuple_[:k])\n    return trimmed_tuples\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(t_list, k):\n    res = []\n    for i in t_list:\n        res.append(i[:k])\n    return res\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(list_of_tuples, k):\n    \"\"\"\n    >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(my_tuple_list, k):\n  return \"None\"\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuplist, k):\n\treturn [x[:k] for x in tuplist]\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\nfrom __future__ import print_function\n\nfrom operator import itemgetter\nfrom itertools import groupby\n\n\ndef trim_tuple(tuple_list, k):\n    result = []\n    for tup in tuple_list:\n        # print(tup)\n        s = sorted(tup, key=itemgetter(1))\n        s = s[-k:]\n        result.append(tuple(s))\n    return result\n\n\ndef test_trim_tuple():\n    tuple_list = [(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)]\n    assert trim_tuple(tuple_list, 2) == '[(2,), (9,), (2,), (2,)]'"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    tup3=tuple([tup1[0][i]*tup2[0][i] for i in range(len(tup1[0]))])\n    tup4=tuple([tup1[1][i]*tup2[1][i] for i in range(len(tup1[0]))])\n    return (tup3,tup4)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(a, b):\n    \n    c = []\n    for i in range(len(a)):\n        c.append((a[i][0]*b[i][0], a[i][1]*b[i][1]))\n    return tuple(c)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(A,B):\n    return (A[i][0]*B[i][0], A[i][1]*B[i][1]) if len(A)==len(B) else (0,0)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(x, y):\n    result = []\n    for i in range(len(x)):\n        result.append(tuple(map(lambda z,w:z*w, x[i], y[i])))\n    return tuple(result)\n\n\ndef test_index_multiplication():\n    x = ((1, 3), (4, 5), (2, 9), (1, 10))\n    y = ((6, 7), (3, 9), (1, 1), (7, 3))\n    assert index_multiplication(x, y) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\n\ndef test_index_multiplication_1():\n    x = ((1, 3), (4, 5), (2, 9), (1, 10))\n    y = ((6, 7), (3, 9), (1, 1), (7, 3))\n    assert index_multiplication(x, y) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\n\ndef test_index_multiplication_2():\n    x = ((1, 3), (4, 5), (2, 9), (1, 10))\n    y = ((6, 7), (3, 9), (1, 1), (7, 3))\n    assert index_multiplication(x, y) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\n\ndef test_index_multiplication_3():\n    x = ((1, 3), (4, 5), (2", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1,tuple2):\n    a,b=tuple1,tuple2\n    return tuple([x[0]*y[0] for x,y in zip(a,b)])\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tup1, tup2):\n    \"\"\"\n    Returns the index wise multiplication of the given two tuples\n    \"\"\"\n    assert type(tup1) == tuple and type(tup2) == tuple and len(tup1) == len(tup2)\n    return tuple(tup1[i] * tup2[i] for i in range(len(tup1)))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(t1,t2):\n    ret = ()\n    for i in range(len(t1)):\n        ret += (t1[i] * t2[i],)\n    return ret\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(a,b):\n    return tuple(map(lambda x, y: x[0]*y[0]+x[1]*y[1],a,b))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    \"\"\"\n    index_multiplication function calculates the element wise multiplication of two tuples\n    \"\"\"\n    return tuple([tup1[i][j] * tup2[i][j] for i in range(len(tup1)) for j in range(len(tup2))])\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef index_multiplication(tup1, tup2):\n    \"\"\"\n    index_multiplication function calculates the element wise multiplication of two tuples\n    \"\"\"\n    return tuple([tup1[i][j] * tup2[i][j] for i in range(len(tup1)) for j in range(len(tup2))])\n\n# Enter the two tuples\ntup1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntup2 = ((6, 7), (3, 9), (1, 1), (7, 3))\n\n# Calling the function", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(A,B):\n    C = ()\n    if A != () and B != ():\n        for i in range(len(A)):\n            C = C + (tuple(A[i]*B[i]))\n    return C\n\n\nA = (1, 3), (4, 5), (2, 9), (1, 10)\nB = (6, 7), (3, 9), (1, 1), (7, 3)\n\nC = (6, 21), (12, 45), (2, 9), (7, 30)\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple_list,list_to_search):\n    # your code here\n    return 0\n\n# TEST CODE\ntuple_list = ('a', 'a', 'c', 'b', 'd')\nlist_to_search = ['a', 'b']", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup,lst):\n    count = 0\n    for i in tup:\n        for j in lst:\n            if i == j:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple_list, list_of_elements):\n    #Create an empty list\n    occurence_list = []\n    # iterate over tuple_list\n    for item in tuple_list:\n        # iterate over list_of_elements\n        for element in list_of_elements:\n            # check if item is equal to element\n            if element == item:\n                # append it to occurence_list\n                occurence_list.append(item)\n    # return number of occurence\n    return len(occurence_list)\n\n# sample tuple\ntup_tuple_tuple = ('a', 'b', 'c', 'a', 'b', 'd', 'a', 'b', 'a', 'c')\n# sample list\nlist_list = ['a', 'b', 'c', 'b', 'd', 'a', 'b', 'a', 'c']\n\n# Calling the function", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list_tuple,list1):\n    count = 0\n    for item in list1:\n        if item in list_tuple:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tup,lst):\n    return sum(map(lambda x : tup.count(x), lst))\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup, lst):\n    count = 0\n    for ele in lst:\n        if ele in tup:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple_list, list_to_count):\n    list_count = 0\n    for element in tuple_list:\n        if element in list_to_count:\n            list_count +=1\n    return list_count", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup,lst):\n    n = 0\n    for item in tup:\n        if item in lst:\n            n +=1\n    return n\n\n#print(count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ))", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(t,l):\n    return sum(1 for x in l if x in t)\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(list_tuple,list_of_elements):\n\t\"\"\"\n\tcount the occurence of all elements of list in a tuple.\n\t:param list_tuple: a tuple containing a list\n\t:param list_of_elements: a list of elements to search in the list\n\t:return: number of occurence of the elements of list_of_elements in the tuple\n\t\"\"\"\n\treturn len([x for x in list_tuple if x in list_of_elements])\n\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(numbers):\n    return [numbers[i]**3 for i in range(len(numbers))]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(n):\n    return list(map(lambda x: x**3, n))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return [num ** 3 for num in nums]\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\ndef cube_nums(lst):\n    return [x**3 for x in lst]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(lst):\n    return list(map(lambda x: x**3, lst))", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return [x**3 for x in nums]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(lst):\n    return [x ** 3 for x in lst]\n\n#assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(num):\n    \"\"\"\n    Return the sum of the Perrin numbers from 0 to num\n    \"\"\"\n    return int(num * (num + 1) / 2)\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\nimport time\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers under n\n    :param n:\n    :return:\n    \"\"\"\n    result = 1\n    p = [2]\n    i = 0\n    while i < n - 1:\n        p.append(p[-1] + p[-2])\n        i += 1\n    # print(p[-1])\n    for x in p:\n        result += x\n    return result\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    res = 0\n    for i in range(1, n + 1):\n        if isPerri(i):\n            res += i\n    return res\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += per(i)\n    return sum\n\ndef per(n):\n    \"\"\"\n    sum of first n permutations\n    \"\"\"\n    a = []\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 277\n    if n == 11:\n        return 504\n    if n == 12:\n        return 924\n    if n == 13:\n        return 1771\n    if n == 14:\n        return 3313\n    if n == 15:\n        return 6093\n    if n == 16:\n        return 11453\n    if n == 17:\n        return 21604\n    if n == 18:\n        return 40536\n    if n == 19:\n        return 74829\n    if n == 20:\n        return 137984\n    if n == 21:\n        return 256844\n    if n == 22:\n        return 472137\n    if n == 23:\n        return 851873\n    if n == 24:\n        return 1531232\n    if n == 25:\n        return 2794116\n    if n == 26:\n        return 5084848\n    if n == 27:\n        return 9554252\n    if n == 28:\n        return 17484192\n    if n == 29:\n        return", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    ret = 0\n    for i in range(1,n+1):\n        ret += i\n        if i%2 == 0:\n            ret += i-1\n    return ret\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    s = 0\n    for i in range(1, n+1):\n        s += int(str(i*(i+1))/2)\n    return s\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    count = 0\n    for i in range(1,n+1):\n        count += n\n    return count\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 5\n    if n == 5:\n        return 14\n    if n == 6:\n        return 42\n    if n == 7:\n        return 132\n    if n == 8:\n        return 429\n    if n == 9:\n        return 1430\n    if n == 10:\n        return 4862\n    return cal_sum(n-1)+cal_sum(n-2)\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n perrin numbers\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n\ndef cal_sum2(n):\n    \"\"\"\n    Calculate the sum of the first n perrin numbers\n    \"\"\"\n    result = 0\n    for i in range(n):\n        result += i\n    return result\n\ndef cal_sum3(n):\n    \"\"\"\n    Calculate the sum of the first n perrin numbers\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    if n == 1:\n        return 1\n    return n + cal_sum(n - 1)\n\n\n# print(cal_sum(3))\n# print(cal_sum(10))\n\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c,d,e,f):\n    # write your code here\n    if (a+b>c or b+c>a or c+a>d):\n        return \"No\"\n    else:\n        return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a,b,c):\n\tif(a < b+c):\n\t\tprint('No')\n\t\treturn False\n\telif(b < a+c):\n\t\tprint('No')\n\t\treturn False\n\telif(c < a+b):\n\t\tprint('No')\n\t\treturn False\n\telse:\n\t\tprint('Yes')\n\t\treturn True\n\n\ncheck_Triangle(1,5,2,5,4,6)", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(p1, p2, p3):\n    if p1 > p2 and p1 > p3:\n        return 'No'\n\n    elif p2 > p1 and p2 > p3:\n        return 'No'\n\n    elif p3 > p1 and p3 > p2:\n        return 'No'\n\n    else:\n        #print(p1, p2, p3)\n        return 'Yes'\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    #Formula: (x2-x1)*(y3-y1)-(x3-x1)*(y2-y1)>0\n    #=> (y2-y1)*(x3-x1)-(x2-x1)*(y3-y1)>0\n    #=> (y2-y1)*(x3-x1)-(x2-x1)*(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y2-y1)(x3-x1)-(x2-x1)(y3-y1)>0\n    #=> (y", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c,d,e,f):\n    if (a > b and a > c and a > d) or (b > a and b > c and b > e) or (c > a and c > b and c > f) or (d > a and d > b and d > c) or (e > a and e > b and e > d) or (f > a and f > b and f > c):\n        return 'No'\n    else:\n        return 'Yes'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c):\n    if (a+b+c == 10):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    return x1 != x2 and y1 != y2 and x1 != x3 and y1 != y3\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if x1 < x2 and x2 < x3:\n        if y1 < y2 and y2 < y3:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\n\ncheck_Triangle(1, 5, 2, 5, 4, 6)\n\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if x1 < x2 and x2 < x3:\n        if y1 < y2 and y2 < y3:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if x1 < x2 and x2 < x3:\n        if y1 < y2 and y2 < y3:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\n\ncheck_Triangle(1, 5, 2, 5, 4, 6)\n\n\n# +\ndef is_valid_triangle(x1, y1, x2, y2, x3, y3):\n    if x1 < x2 and x2 < x3:\n        if y1 < y2 and y2 < y3:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# For testing", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c,d,e,f):\n    sum_list = sorted([a,b,c,d,e,f])\n    i = 0\n    j = 1\n    k = 2\n    while j < 3:\n        if sum_list[i] + sum_list[j] > sum_list[k]:\n            k += 1\n        elif sum_list[i] + sum_list[j] < sum_list[k]:\n            i += 1\n        else:\n            return 'No'\n        j += 1\n    return 'Yes'\n\n# Test cases", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c):\n    if (a+b>c and a+c>b and b+c>a):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(input_list,size):\n    return input_list[0:size]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(arr, size):\n\tresult=[]\n\tfor i in range(size):\n\t\tresult.append(arr[i])\n\treturn result\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, n):\n    return lst[0:n]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(input_list, size):\n    return input_list[::size]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, n):\n    return lst[::n]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst,size):\n    return lst[:size]\n\ndef test_extract_string():\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'],8)==['practice', 'solution']\n\ndef test_extract_string_1():\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'],4)==['Python', 'list', 'exercises']\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list, num):\n\t\"\"\"\n\tThis function returns a list of strings of specified length\n\tParameters:\n\t\tstring_list (list): a list of strings\n\t\tnum (int): the number of strings to return\n\tReturns:\n\t\tlist: a list of strings\n\t\"\"\"\n\treturn string_list[::num]\n\n\ndef test_extract_string():\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 3) == ['Python', 'list', 'exercises']", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(list_of_strings, num_strings):\n    return list_of_strings[0:num_strings]\n#test", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list, string_size):\n    return string_list[::string_size]\n\n\ndef main():\n    string_list = ['Python', 'list', 'exercises', 'practice', 'solution']\n    print extract_string(string_list, 8)\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(str_list, size):\n    new_list = []\n    for i in range(size):\n        new_list.append(str_list[i])\n    return new_list\n\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    return \"\".join(s.split())\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    \"\"\"\n    Returns string without whitespaces\n    \"\"\"\n    return re.sub(\"\\s+\", \"\", string)\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    string = string.strip()\n    string = string.replace('\\n', '')\n    string = string.replace('\\r', '')\n    string = re.sub('\\s+', ' ', string)\n    string = string.replace('\\s+', ' ')\n    return string\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(input_str):\n    # replace all whitespace characters with a single space\n    return input_str.replace(' ', '')\n\n# Tests", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n\n\n# +", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    \"\"\"\n    Remove whitespaces using regex\n    :param s:\n    :return:\n    \"\"\"\n    return re.sub('\\s+', '', s)\n\ndef test_remove_whitespaces():\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    assert remove_whitespaces('Google     Flutter  ') == 'GoogleFlutter'\n    assert remove_whitespaces('  Google     Flutter  ') == 'GoogleFlutter'\n    assert remove_whitespaces('  GoogL     FloWer  ') == 'GoogLFloWer'\n    assert remove_whitespaces('  GoogL     FloWer  ') == 'GoogLFloWer'\n\ndef test_remove_whitespaces2():\n    assert remove_whitespaces('  GoogL     FloWer  ') == 'GoogLFloWer'\n\ndef test_remove_whitespaces3():\n    assert remove_whitespaces('  GoogL     FloWer  ') == 'GoogLFloWer'\n\ndef test_remove_whitespaces4():\n    assert remove_whitespaces('  GoogL     FloWer  ') == 'GoogLFloWer'\n\ndef test_remove_whitespaces5():\n    assert remove_whitespaces('  GoogL     FloWer  ') == 'GoogLFloWer'\n\ndef test_remove_whitespaces6():\n    assert remove_whitespaces('  GoogL     FloWer  ') == 'GoogLFloWer'\n\ndef test_remove_whitespaces7():\n    assert remove_whitespaces('  GoogL     FloWer  ') == 'GoogLFloWer'\n\ndef test_remove_whitespaces8():\n    assert remove_whitespaces('  GoogL     FloWer  ') == 'GoogLFloWer'\n\ndef test_remove_whites", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    return \"\".join(string.split())\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n    return re.sub('\\s+', '', string)\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    return re.sub(' +', ' ', s)\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amt,rate):\n    if amt<rate:\n        return \"Loss amount is \"+ str(rate - amt)\n    else:\n        return \"You won\"\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(a,b):\n    if a > b:\n        return a-b\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,amount_without_loss):\n    if amount<amount_without_loss:\n        return amount-amount_without_loss\n    else:\n        return None\n\n# print(loss_amount(1500,1200))\n\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount_in, amount_out):\n    if amount_in < amount_out:\n        return amount_in - amount_out\n    return None\n\ndef test_loss_amount_1():\n    assert loss_amount(1500,1200)==None\n\ndef test_loss_amount_2():\n    assert loss_amount(1500,1300)==100\n\ndef test_loss_amount_3():\n    assert loss_amount(1500,1400)==200\n\ndef test_loss_amount_4():\n    assert loss_amount(1500,1500)==None\n\ndef test_loss_amount_5():\n    assert loss_amount(1500,1600)==100\n\ndef test_loss_amount_6():\n    assert loss_amount(1500,1700)==200\n\ndef test_loss_amount_7():\n    assert loss_amount(1500,1900)==300\n\ndef test_loss_amount_8():\n    assert loss_amount(1500,2000)==200\n\ndef test_loss_amount_9():\n    assert loss_amount(1500,2100)==200\n\ndef test_loss_amount_10():\n    assert loss_amount(1500,2200)==200\n\ndef test_loss_amount_11():\n    assert loss_amount(1500,2300)==200\n\ndef test_loss_amount_12():\n    assert loss_amount(1500,2400)==100\n\ndef test_loss_amount_13():\n    assert loss_amount(1500,2500)==0\n\ndef test_loss_amount_14():\n    assert loss_amount(1500,2600)==-100\n\ndef test_loss_amount_15():\n    assert loss_amount", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(w1,w2):\n    if(w1<w2):\n        return w2 - w1\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,dollar_rate):\n    if amount<dollar_rate:\n        return None\n    return amount - dollar_rate\n\n#print(loss_amount(1500,1200))\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,loss):\n    if amount <= loss:\n        return None\n    else:\n        return amount - loss\n\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,rate):\n    if amount>rate:\n        return (amount-rate)\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,loss_rate):\n    if amount*loss_rate < 100:\n        return loss_rate*(amount*loss_rate)\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,loss):\n    if amount>loss:\n        return amount-loss\n    else:\n        return None\n#assert loss_amount(1500,1200)==None\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\nimport unittest\n\n\ndef sumofFactors(n):\n    \"\"\"\n    Find the sum of factors for a given positive number.\n    :param n: Number\n    :return: Sum of factors\n    \"\"\"\n    if n % 2 == 0:\n        return n\n    return n / 2\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    factors = []\n    for i in range(1,num+1):\n        if num%i == 0:\n            factors.append(i)\n    return sum(factors)", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n\tif n == 1:\n\t\treturn 1\n\tif n % 2 == 0:\n\t\treturn sumofFactors(n/2) + 1\n\treturn sumofFactors(n+1)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(num):\n    \"\"\"\n    Write a function to find the sum of all even factors of a number\n    \"\"\"\n    s = 0\n    for i in range(1,num):\n        if num%i == 0:\n            if num/i == i:\n                s += i\n            else:\n                s += i\n                s += num/i\n    return s\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    \"\"\"\n    Time complexity: O(sqrt(n))\n    Space complexity: O(1)\n    \"\"\"\n    sum = 0\n    for i in range(1,int(n**0.5)+1):\n        if n%i == 0:\n            if n/i == i:\n                sum += i\n            else:\n                sum += i\n                sum += n/i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    factors = [2]\n    for i in range(3, n+1, 2):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n / i)\n    factors.sort()\n    return sum(factors)", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    result = 0\n    for x in range(1, n+1):\n        if n % x == 0:\n            result += x\n    return result\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(num):\n    factors = []\n    for i in range(1,num):\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num//i)\n    return sum(factors)\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    \"\"\"\n    Solve this problem by using the standard algorithm\n    of recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n + sumofFactors(n / 2)\n    else:\n        return sumofFactors(n / 2)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    \"\"\"\n    Find the sum of even factors of a number.\n    \"\"\"\n    return sum([n if n % i == 0 else 0 for i in range(2, int(n**0.5) + 1)])\n\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    wordz = [\"python\", \"pythonz\", \"python is zesty\"]\n    for word in wordz:\n        if word in text:\n            return (\"Found a match!\")\n    else:\n        return (\"No match found\")\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    pattern = r\"\\w*z\\w*\"\n    for match in re.finditer(pattern, text):\n        return(\"Found a match!\")\n    return(\"No match found!\")\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return 'No match found.'\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    pattern = re.compile('z')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'No matches'\n\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    :param text: string\n    :return: string\n    \"\"\"\n    return \"Found a match!\" if \"z\" in text else \"No match!\"\n\n#Test", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    # Check if there's a word containing 'z'.\n    for word in text.split():\n        if 'z' in word:\n            return 'Found a match!'\n    return 'No matches'\n\n# Test the function:", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    matches = [m.start() for m in re.finditer('z', text)]\n    if len(matches) == 0:\n        return \"No matches found!\"\n    else:\n        return \"Found a match!\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    for line in text.split('\\n'):\n        if 'z' in line:\n            return 'Found a match!'\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if \"z\" in text:\n        return \"Found a match!\"\n    return \"Nothing found!\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    count = 0\n    if 'z' in text:\n        count += 1\n    return f\"Found a match! ({count})\"\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnum):\n    if (monthnum in [1,3,5,7,8,10,12]):\n        return True\n    elif (monthnum in [4,6,9,11]):\n        return False\n    else:\n        raise Exception('Invalid month number!')", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb==1:\n        return True\n    if monthnumb==2:\n        return False\n    return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnum):\n    if monthnum==1 or monthnum==3 or monthnum==5 or monthnum==7 or monthnum==8 or monthnum==10 or monthnum==12:\n        return True\n    else:\n        return False\n\n# Check your code", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_numb):\n    if month_numb==1 or month_numb==3 or month_numb==5 or month_numb==7 or month_numb==8 or month_numb==10 or month_numb==12:\n        return True\n    return False", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_number):\n    if month_number<1 or month_number>12:\n        raise ValueError('Invalid Month Number')\n    month = month_number%12\n    if month==0 or month==2 or month==4 or month==6 or month==7 or month==9 or month==11:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(number):\n    if number == 1 or number == 3 or number == 5 or number == 7 or number == 8 or number == 10 or number == 12:\n        return False\n    else:\n        return True\n\n\n# +\n# Example output ", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb==1:\n        return True\n    if monthnumb==2:\n        return False\n    if monthnumb==3:\n        return True\n    if monthnumb==4:\n        return False\n    if monthnumb==5:\n        return True\n    if monthnumb==6:\n        return False\n    if monthnumb==7:\n        return True\n    if monthnumb==8:\n        return False\n    if monthnumb==9:\n        return True\n    if monthnumb==10:\n        return False\n    if monthnumb==11:\n        return True\n    if monthnumb==12:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(numb):\n    \"\"\"\n    :param numb: The given month number to be checked\n    :type numb: int\n    :return: True if the given month number contains 31 days, False otherwise\n    :rtype: bool\n    \"\"\"\n    if numb in (1,3,5,7,8,10,12):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(m):\n    if m==1 or m==3 or m==5 or m==7 or m==8 or m==10 or m==12:\n        return True\n    else:\n        return False\n\ndef main():\n    print(check_monthnumb_number(5))\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\n# reverse the string and return it\ndef reverse_string(string):\n    return string[::-1]\n\n# reverse the string and return it\ndef reverse_string_list(string_list):\n    return [reverse_string(string) for string in string_list]\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings_list):\n    result = []\n    for string in strings_list:\n        reversed_string = string[::-1]\n        result.append(reversed_string)\n    return result\n\n#OR\ndef reverse_string_list(strings_list):\n    result = []\n    for string in strings_list:\n        result.append(string[::-1])\n    return result", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(s_list):\n    \"\"\"\n    Reverse a list of strings\n    \"\"\"\n    result_list = []\n    for item in s_list:\n        result_list.append(item[::-1])\n    return result_list\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(lst):\n    reverse_lst = []\n    for s in lst:\n        reverse_lst.append(s[::-1])\n    return reverse_lst\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    \"\"\"Takes a list of strings and returns a list of the strings in reverse order.\"\"\"\n    return [s[::-1] for s in string_list]\n\n# Assert that function works", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(input_list):\n    \"\"\"\n    Returns a new list with the strings reversed\n    \"\"\"\n    output_list = []\n    for string in input_list:\n        output_list.append(string[::-1])\n    return output_list\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    return [s[::-1] for s in strings]\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    return [string[::-1] for string in strings]\n\ndef test_reverse_string_list():\n    assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    rev_strings = []\n    for item in strings:\n        rev_strings.append(item[::-1])\n    return rev_strings\n\n# test", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    return sorted(strings, key=lambda x: x[::-1])\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(l):\n    # write your code here\n    m = 1000000000\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            if len(l[i]) < m:\n                m = len(l[i])\n    return l[0:m]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(L):\n    min = float('inf')\n    min_sublist = None\n    for i in range(len(L)):\n        for j in range(i+1, len(L)):\n            if min > len(L[j])-len(L[i]):\n                min = len(L[j])-len(L[i])\n                min_sublist = L[i]+L[j]\n    return min_sublist\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef find_min_len(l):\n    \"\"\"\n    >>> find_min_len([[1],[1,2],[1,2,3]])\n    [1]\n    \"\"\"\n    return min(l, key=len)\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(L):\n    return sorted(L,key=len)[0]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef find_min_len_sublist(L):\n    # Traverse through all sublists in the given list\n    for i in range(len(L)):\n        # Traverse through all elements in every sublist\n        for j in range(len(L[i])):\n            # If the current element is greater than the next element\n            if L[i][j] > L[i][j+1]:\n                # Return the current sublist\n                return L[i:j+2]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n# for small datasets\n# https://www.programiz.com/python-programming/examples/min-max\ndef Find_Min(lst):\n    # your code here\n    #print(\"hello\")\n    #print(min(lst))\n    return min(lst)\n\n# for large datasets\n# https://www.programiz.com/python-programming/examples/min-max\ndef Find_Min_v2(lst):\n    # your code here\n    #print(\"hello\")\n    return min(lst, key=len)\n\ndef Find_Max(lst):\n    # your code here\n    return max(lst)\n\ndef Sum_Int(lst):\n    # your code here\n    return sum(lst)\n\ndef Remove_Int(lst, x):\n    # your code here\n    return [val for val in lst if val != x]", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(L):\n    return min(L, key=len)\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\n# } Driver Code Ends\n\n\n# User function Template for python3\n\nimport numpy as np\nfrom collections import defaultdict\n\ndef Find_Min(arr):\n    # Write your code here\n    arr = [[i] for i in arr]\n    # print(arr)\n    d = defaultdict(list)\n    for i in arr:\n        for j in d[i]:\n            d[i].remove(j)\n        d[i].append(len(i))\n    # print(d)\n    return list(d.keys())[list(d.values()).index(min(d.values()))]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    if len(lst) == 0:\n        return lst\n    lst.sort(key = len)\n    return lst[0]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(L):\n    res = L[0]\n    min_len = len(L[0])\n    for i in range(1,len(L)):\n        if min_len > len(L[i]):\n            min_len = len(L[i])\n            res = L[i]\n    return res\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    return width*height\n\n#assert rectangle_area(10,20)==200\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n#I am not able to understand the question\n#the area of a rectangle is the product of its width and height\n#https://www.mathsisfun.com/algebra/area-rectangle.html\n\ndef rectangle_area(width, height):\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length, width):\n    return length*width\n\n\n# assert rectangle_area(10,20)==200\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    area=width*height\n    return area\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    \"\"\"\n    Compute the area of the rectangle\n    \"\"\"\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(a,b):\n    # Your code goes here\n    return a*b\n\n# Tests"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(input_string):\n    if len(input_string) == 0:\n        return ''\n    return re.sub(r'[A-Z]', '', input_string)\n\n\ndef test_remove_uppercase():\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\n\ndef test_remove_uppercase_empty():\n    assert remove_uppercase('') == ''\n\n\ndef test_remove_uppercase_no_uppercase():\n    assert remove_uppercase('CAsTyORaVoRiT') == 'casTyORaVoRiT'\n\n\ndef test_remove_uppercase_mixed():\n    assert remove_uppercase('cASTyoURaVOrITvShOw') == 'caSTyoravoitshos'\n\n\ndef test_remove_uppercase_excessive():\n    assert remove_uppercase('CAsTyORaVoRItETVShOw') == 'caSTyoravoitshos'\n\n\ndef test_remove_uppercase_capitalized():\n    assert remove_uppercase('CaSTYORaVoRItEtVShOw') == 'caSTyoravoitshos'\n\n\ndef test_remove_uppercase_different():\n    assert remove_uppercase('MusT') == ''\n\n\ndef test_remove_uppercase_different_all_lowercase():\n    assert remove_uppercase('must') == ''\n\n\ndef test_remove_uppercase_different_mixed():\n    assert remove_uppercase('caStyoravoitshos') == ''\n\n\ndef test_remove_uppercase_different_mixed_all_lowercase():\n    assert remove_uppercase('CaStyoravoITSHOS') == ''", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    return s.translate(str.maketrans('', '', string.ascii_uppercase))\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    return re.sub('.*[A-Z].*', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    return \"\".join(i for i in s if i.islower())\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]', '', string)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(string):\n    return re.sub('[A-Z]', '', string)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(str):\n    # Your code here\n    return str.translate(str.maketrans('','',string.ascii_uppercase))\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase from string.\n    Args:\n        string (str): Input string\n    Returns:\n        str: string without uppercase\n    \"\"\"\n    return \"\".join(char for char in string if char.islower())\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    return \"\".join(ch if ch.islower() else ch for ch in s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\n\ndef remove_uppercase(input_string):\n    \"\"\"\n    :param input_string: string to filter\n    :return: filtered string\n    \"\"\"\n\n    return re.sub(r'[A-Z]', '', input_string)\n\n\ndef remove_uppercase_2(input_string):\n    \"\"\"\n    :param input_string: string to filter\n    :return: filtered string\n    \"\"\"\n\n    return input_string.lower()\n\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(list):\n    \"\"\"\n    list is a list of sublists\n    return a list of the first element of each sublist\n    \"\"\"\n    # Your code here\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n# Extracting first element from each sublist\n\ndef Extract(L):\n  # Define a variable to store the result\n  result = []\n\n  # Traverse through each sublist in L\n  for sublist in L:\n    # Append the first element of sublist to the result\n    result.append(sublist[0])\n\n  # return the result\n  return result\n\n# Test if the function works\nL = [[1, 2], [3, 4, 5], [6, 7, 8, 9]]", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(list_of_lists):\n    return list(map(list.__getitem__, list_of_lists))\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    \"\"\"\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    True\n    \"\"\"\n    newList = []\n    for sublist in lst:\n        newList.append(sublist[0])\n    return newList\n\ndef is_in_list(elem, lst):\n    \"\"\"\n    >>> is_in_list(4, [1, 2, 3, 4, 5])\n    True\n    >>> is_in_list(3, [1, 2, 3, 4, 5])\n    False\n    >>> is_in_list(2, [1, 2, 3, 4, 5])\n    False\n    >>> is_in_list(1, [1, 2, 3, 4, 5])\n    True\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == elem:\n            return True\n    return False\n\ndef is_in_set(elem, set_):\n    \"\"\"\n    >>> is_in_set(4, {1, 2, 3, 4, 5})\n    True\n    >>> is_in_set(3, {1, 2, 3, 4, 5})\n    False\n    >>> is_in_set(2, {1, 2, 3, 4, 5})\n    True\n    >>> is_in_set(1, {1, 2, 3, 4, 5})\n    False\n    \"\"\"\n    if elem in set_:\n        return True\n    return False\n\ndef is_in_string(elem, string):\n    \"\"\"\n    >>> is_in_string(4, \"hello\")\n    False\n    >>> is_in_string(3, \"hello\")\n    True\n    >>> is_in_string(2, \"hello\")\n    False\n    >>> is_in_string(1, \"hello\")\n    True\n    \"\"\"\n    return elem in string\n\ndef is_", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(L):\n    return [L[0][i] for i in range(len(L))]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lists):\n    result = []\n    for list in lists:\n        result.append(list[0])\n    return result\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(L):\n    \"\"\"\n    >>> L = [[1, 2], [3, 4, 5], [6, 7, 8, 9]]\n    >>> Extract(L)\n    [1, 3, 6]\n    \"\"\"\n    return [L[0][0]] + Extract(L[1:])\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\nfrom collections import defaultdict\n\n\ndef Extract(x):\n    l = defaultdict(list)\n    for e in x:\n        l[e[0]].append(e)\n    return [i[0] for i in l.values()]\n\n\n# test", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist\n    :param lst: input list\n    :return: output list\n    \"\"\"\n    return [item[0] for item in lst]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(ls):\n    n = len(ls)\n    res = []\n    for i in range(n):\n        res.append(ls[i][0])\n    return res\n\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    return len([c for c in s if c.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    \"\"\"\n    :param s: str\n    :return: int\n    \"\"\"\n    return s.upper().count('P')\n\n\n# def upper_ctr(s):\n#     \"\"\"\n#     :param s: str\n#     :return: int\n#     \"\"\"\n#     return sum(1 for char in s if char.isupper())\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    \"\"\"\n    Counts the upper case characters in a string\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    return string.count(string)\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    return string.count(string.upper())\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    \"\"\"\n    Takes a string as input and returns the number of uppercase characters.\n    \"\"\"\n    return string.count(string.upper())\n\ndef test_upper_ctr():\n    assert upper_ctr(\"PYthon\") == 1\n    assert upper_ctr(\"python\") == 0\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    \"\"\"\n    Count the upper case characters in a given string\n    \"\"\"\n    return len(str) - sum(c.islower() for c in str)\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    return sum([1 for c in s if c.isupper()])\n\n\n# Test cases", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    count = 0\n    for i in range(0,len(s)):\n        if s[i] == s[i].upper():\n            count = count + 1\n    return count\n\ndef upper_ctr_alt(s):\n    return sum(s[i].isupper() for i in range(0,len(s)))\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    return len(string) - len(string.lower())\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\nfrom itertools import combinations\n\ndef combinations_list(list_):\n    return [list(combination) for combination in combinations(list_, 2)]\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(L):\n    \"\"\"Write a function to find all possible combinations of the elements of a given list.\n    \n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n    if len(L)==0:\n        yield L\n    else:\n        for e in L:\n            for c in combinations_list(L[:]):\n                yield [e] + c\n\n# if __name__ == '__main__':\n#     from doctest import testmod\n#     testmod()", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    result = []\n    if len(lst)==0:\n        result = [[]]\n    else:\n        for i in lst:\n            new_result = []\n            for temp_result in combinations_list(lst[0:len(lst)-1]):\n                for each_item in temp_result:\n                    new_result.append([i]+each_item)\n            result.extend(new_result)\n    return result\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(l):\n    return list(combinations(l, r))\n\n# def combinations_list(l):\n#     result = []\n#     combos = list(combinations(l, len(l)))\n#     for combo in combos:\n#         print(combo)\n#         print(sorted(combo))\n#         result.append(sorted(combo))\n#     return result\n\n# def combinations_list(l):\n#     results = []\n#     combos = list(combinations(l, len(l)))\n#     for combo in combos:\n#         for sub_combo in combinations(combo, 2):\n#             sub_combo.sort()\n#             if sub_combo not in results:\n#                 results.append(sub_combo)\n#     return results\n\n# def combinations_list(l):\n#     return list(combinations(l, len(l)))\n\n# def combinations_list(l):\n#     return list(combinations(l, len(l)))\n\n# def combinations_list(l):\n#     combos = list(combinations(l, len(l)))\n#     return [[sorted(combo) for combo in combos]]\n\n# def combinations_list(l):\n#     return [[sorted(combo) for combo in list(combinations(l, len(l)))]]\n\n# def combinations_list(l):\n#     combos = list(combinations(l, len(l)))\n#     return [combo for combo in combos for _ in range(len(combo))]\n\n\n# def combinations_list(l):\n#     combos", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    \"\"\"Returns a list of all sublists of the given list\"\"\"\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return [[]]\n    else:\n        return [lst[0]]+combinations_list(lst[1:])\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(input_list):\n    return [[]] if len(input_list) == 0 else [element + [i] for i in input_list for element in combinations_list(input_list[:i] + input_list[i + 1:])]\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(a_list):\n    \"\"\"\n    recursive solution\n    \"\"\"\n    if len(a_list) == 0:\n        return [[]]\n    else:\n        return [comb + [e] for e in a_list for comb in combinations_list(a_list[:len(comb)] + [e])]\n\n\ndef test_combinations():\n    print(combinations_list(['orange', 'red', 'green', 'blue']))\n\n\ndef test_combi():\n    print(combinations_list(['a', 'b']))\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(ls):\n    return list(itertools.combinations(ls, 2))", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(L):\n    return list(combinations(L, 1))\n    \ndef combinations(L, k):\n    if not L:\n        return []\n    elif k == 1:\n        return [L]\n    else:\n        first = L[0]\n        return [first + rest for rest in combinations(L[1:], k - 1)]\n    ", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(a_list):\n    return list(itertools.combinations(a_list, 2))\n\ndef combinations_list2(a_list):\n    return list(itertools.combinations_with_replacement(a_list, 2))\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(a):\n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        return max(a[0], a[1])\n    res = float('-inf')\n    for i in range(len(a) - 1):\n        for j in range(i+1, len(a)):\n            if a[j] < a[i]:\n                subarray = [a[i], a[i+1], a[j]]\n            else:\n                subarray = [a[i+1], a[i], a[j]]\n            prod = 1\n            for x in subarray:\n                prod *= x\n            res = max(res, prod)\n    return res\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    # Note: arr[0] is the first element of the subarray, \n    #       arr[-1] is the last element of the subarray\n    max_product = float(\"-inf\")\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        current_product = arr[start] * arr[end]\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            end += 1\n        else:\n            start += 1\n    return max_product\n\n\ndef main():\n    print(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))\n\n\nmain()", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(nums):\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    if not nums:\n        return 0\n\n    left, right, max_product = 0, 0, nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] > max_product:\n            max_product = nums[i]\n            right = i\n        else:\n            max_product = max(max_product * nums[i], nums[i])\n            right += 1\n        max_product = max(max_product, nums[i])\n    return max_product\n\n\n# Test the function", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    res = arr[0]\n    for x in arr[1:]:\n        temp = x * res\n        res = max(temp, res)\n    return res\n\ndef max_subarray_product_optimized(arr):\n    return max(\n        reduce(lambda x, y: x * y, arr),\n        reduce(lambda x, y: max(x * y, x), arr[1:]),\n        reduce(lambda x, y: max(x * y, y), arr[1:]))\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    arr.sort()\n    left, right = 0, 0\n    product = arr[0]\n    result = 0\n    while right < len(arr):\n        if arr[right] < 0:\n            right += 1\n        else:\n            right += 1\n            product *= arr[right]\n            if product > result:\n                result = product\n        if right - left == 1:\n            left += 1\n    return result\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom functools import lru_cache\n\ndef max_subarray_product(arr):\n    @lru_cache()\n    def helper(start, end):\n        if start > end:\n            return 0\n\n        # grab the max product between this segment and the rest of the array\n        max_product = arr[end]\n        for i in range(start, end + 1):\n            max_product = max(max_product, arr[i] * helper(i + 1, end))\n\n        return max_product\n\n    return helper(0, len(arr) - 1)\n\n\ndef test_max_subarray_product():\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert max_subarray_product([1, -2, -3, 0, -1]) == -2\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom typing import List\n\n\ndef max_subarray_product(nums: List[int]) -> int:\n    \"\"\"\n    Given an array of numbers, return the maximum product of any contiguous sub-array.\n    \"\"\"\n    if len(nums) <= 1:\n        return nums[0]\n\n    max_prod = nums[0]\n    max_prod_idx = 0\n\n    for idx in range(1, len(nums)):\n        if nums[idx] < 0 and nums[max_prod_idx] > 0:\n            max_prod = nums[max_prod_idx] * nums[idx]\n            max_prod_idx = idx\n\n    return max_prod\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n    Time: O(N)\n    Space: O(1)\n\n    Args:\n        arr (List[int]):\n\n    Returns:\n        int:\n    \"\"\"\n    prod = nums = cur_max = 0\n    for num in arr:\n        prod *= num\n        if prod > cur_max:\n            cur_max = prod\n        if prod == 0:\n            nums = 0\n        else:\n            nums += 1\n    return cur_max\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(array):\n    \"\"\"\n    Returns the maximum product of numbers in an array of numbers\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 0\n    sum_array = [0] * (len(array) + 1)\n    for index in range(len(array)):\n        sum_array[index + 1] = array[index] + sum_array[index]\n        for index_backward in range(len(array) - 1, index - 1, -1):\n            curr_product = array[index_backward] * sum_array[index]\n            if curr_product > max_product:\n                max_product = curr_product\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"Naive approach: Run time O(n^2)\"\"\"\n    max_so_far = -10 ** 9\n    max_ending_here = -10 ** 9\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            sub_product = arr[i] * arr[j]\n            max_ending_here = max(max_ending_here, sub_product)\n            max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\ndef max_subarray_product_optimized(arr: List[int]) -> int:\n    \"\"\"\n    In O(n) time\n    max_ending_here = -10 ** 9\n    max_so_far = -10 ** 9\n    for i in range(len(arr)):\n        max_ending_here = max(max_ending_here, arr[i])\n        max_ending_here = max(max_ending_here, 0)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n    \"\"\"\n    max_so_far = -10 ** 9\n    max_ending_here = -10 ** 9\n    current_max = -10 ** 9\n    for i in range(len(arr)):\n        current_max = max(current_max, arr[i])\n        current_max = max(current_max, 0)\n        max_ending_here = max(max_ending_here, current_max)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\ndef test_max_subarray_product():\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\n\ndef test_max_subarray_product_"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    \"\"\"\n    Check if all values are same in a dictionary.\n\n    Args:\n      dictionary (dict): The dictionary to check.\n      value (int): The value to check if all values are the same.\n\n    Returns:\n      bool: If all values are the same returns True, otherwise False.\n    \"\"\"\n    for i in dictionary.values():\n        if value!=i:\n            return False\n    return True\n\n# Cantrell Alden\n\n# Alden Cantrell", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,v):\n    for key in d.keys():\n        if d[key] != v:\n            return False\n    return True", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dict, value):\n    print(dict)\n    if len(dict) > 1:\n        for x in dict.values():\n            if x != value:\n                return False\n    else:\n        if dict.values() != value:\n            return False\n    return True\n\n# ---------------------------------\n# Function to check if keys are unique", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(my_dict,value):\n    # return\n    for value in my_dict.values():\n        if value != value:\n            return False\n    return True\n\ndef check_value_2(my_dict,value):\n    # return\n    for key in my_dict.keys():\n        if my_dict[key] != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dict,value):\n    for key,val in dict.items():\n        if val != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    for key in dictionary.keys():\n        if dictionary[key] != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,n):\n    return all(d.values()==n)\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dic,value):\n    if value == dic.values():\n        return True\n    else:\n        return False\n\ndef print_dictionary(dic):\n    print(dic)\n\ndef write_dictionary(dic):\n    with open('dictionary.txt', 'w') as text_file:\n        for item in dic:\n            text_file.write(\"%s\\n\" % item)\n\ndef read_dictionary():\n    dic = {}\n    with open('dictionary.txt', 'r') as text_file:\n        for line in text_file:\n            dic[line.strip()] = line.strip()\n    return dic\n\ndef main():\n    print(\"Dictionary is:\")\n    print_dictionary(read_dictionary())\n    write_dictionary({'<NAME>': '1', 'Kierra Gentry': '12', 'Alden Cantrell': '12', 'Cierra Vega': '12', 'Pierre Cox': '12'})\n    print(\"Dictionary is:\")\n    print_dictionary(read_dictionary())\n\n\nmain()", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    for key, value in dictionary.items():\n        if value != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary, value):\n    flag = True\n    for k, v in dictionary.items():\n        if value != v:\n            flag = False\n            break\n    return flag"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    # 1. write your code here:\n    new_d = dict( (k, v) for k, v in d.items() if v is not None)\n    # 2. replace assert\n    assert len(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})) == 2\n    return new_d\n\n# ----------------------------------------------------------------------\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    \"\"\"\n    >>> d = {'c1': 'Red', 'c2': 'Green', 'c3':None}\n    >>> drop_empty(d)\n    {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key:value for key,value in d.items() if value is not None}\n\n\ndef drop_empty2(d):\n    \"\"\"\n    >>> d = {'c1': 'Red', 'c2': 'Green', 'c3':None}\n    >>> drop_empty2(d)\n    {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key:value for key,value in d.items() if value is not None}\n\n\ndef drop_empty3(d):\n    \"\"\"\n    >>> d = {'c1': 'Red', 'c2': 'Green', 'c3':None}\n    >>> drop_empty3(d)\n    {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key:value for key,value in d.items() if value is not None}\n\n\n# +\n# test suite\nfrom niedu.tests.nipa import test_function\n\ntest_function(drop_empty,\n             [dict(c1='Red', c2='Green', c3=None),\n              dict(c1='Red', c2='Green', c3=None)],\n             dict(c1='Red', c2='Green'))\n\n# -\n\n# ## Part 2\n#\n# Create a new function called add_age which takes a dictionary as argument and returns a new dictionary that will contain the same keys as the original dictionary but with the values being the keys' age (as a string).\n#\n# For example:\n#\n# ```python\n# >>> add_age({'c1': 'Red', 'c2': 'Green', 'c3':None})\n# {'c1': '17', 'c2': '13', 'c3': None}\n#\n# >>> add_", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    d1={}\n    for k,v in d.items():\n        if v:\n            d1[k]=v\n    return d1\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    if d == {}:\n        return d\n    return {k: v for k, v in d.items() if v != None}\n\n#print(drop_empty({}))", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(input_dict):\n    result = {}\n    for key, value in input_dict.items():\n        if value is not None:\n            result[key] = value\n    return result\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k:v for k, v in d.items() if v}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k:v for k, v in d.items() if v is not None}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    new_d = {}\n    for k, v in d.items():\n        if v is not None:\n            new_d[k] = v\n    return new_d\n\n# Test", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dictionary):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # your code here\n    result = {}\n    for k,v in dictionary.items():\n        if v is not None:\n            result[k] = v\n    return result\n\n# test", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dic):\n    new_dic = {}\n    for key, value in dic.items():\n        if value is not None:\n            new_dic[key] = value\n    return new_dic\n\n#assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr: list, n: int) -> int:\n    left_max = 0\n    right_max = 0\n    left_max_i = 0\n    right_max_i = 0\n    for i in range(n):\n        if arr[i] > right_max:\n            right_max_i = i\n            right_max = arr[i]\n        if arr[i] > left_max:\n            left_max_i = i\n            left_max = arr[i]\n    return max(left_max, right_max)\n\n# Test cases", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right] and arr[mid] > arr[left]:\n            return arr[mid]\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid\n            right = mid\n\n    return arr[left]\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# O(n) time and O(1) space\ndef find_peak(arr, n):\n    # Find the middle point of the given array\n    mid = (n + 1) // 2\n    # If the left of the middle point is greater than the right\n    if arr[mid - 1] > arr[mid]:\n        return mid - 1\n    return mid\n\n\n# O(nlogn) time and O(1) space\ndef find_peak(arr, n):\n    # Find the middle point of the given array\n    mid = (n + 1) // 2\n    # Find the left and right peaks\n    left_peak = find_peak(arr[:mid - 1], mid - 1)\n    right_peak = find_peak(arr[mid + 1:], n - mid)\n    # Return the peak that is greater\n    if arr[left_peak] > arr[right_peak]:\n        return left_peak\n    return right_peak\n\n\n# O(nlogn) time and O(1) space\ndef find_peak(arr, n):\n    # Sort the array\n    arr.sort()\n    # If the middle element is greater than the last element\n    # then we have a peak\n    if arr[n // 2] > arr[n - 1]:\n        return n // 2\n    # Otherwise we need to find the peak in the subarrays\n    return find_peak(arr[:n // 2], n // 2) or find_peak(arr[n // 2 + 1:], n - n // 2 - 1)\n\n\n# O(n) time and O(1) space\ndef find_peak(arr, n):\n    # Find the first element that is greater than the element on the right\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            return i\n    return -1", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(A, n):\n    L = []\n    for i in range(0, n):\n        if i > 0 and A[i] > A[i - 1]:\n            L.append(A[i])\n\n    for i in range(n - 1, 0, -1):\n        if i < n - 1 and A[i] > A[i + 1]:\n            L.append(A[i])\n\n    if len(L) == 0:\n        return -1\n\n    return L[0]\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    if arr is None or n < 0:\n        return None\n    \n    left = 0\n    right = n - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return left\n\n\ndef test_find_peak():\n    arr = [1, 3, 20, 4, 1, 0]\n    assert find_peak(arr, 6) == 2\n    assert find_peak(arr, 10) == None\n    assert find_peak(None, 10) == None\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, size):\n    if size < 3:\n        return -1\n    if size == 3:\n        if arr[0] > arr[1]:\n            if arr[0] > arr[2]:\n                return 0\n            elif arr[2] > arr[1]:\n                return 2\n        elif arr[1] > arr[2]:\n            return 1\n        else:\n            return 2\n    peak = -1\n    for i in range(size-1):\n        for j in range(i+1, size-1):\n            if arr[j] > arr[i] and arr[j] > arr[j+1]:\n                peak = j\n    return peak\n\n# Test Case 1", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(array, n):\n    \"\"\"\n    Find the peak of the array, the middle element of the subarray with the largest sum.\n    \n    >>> find_peak([1, 3, 20, 4, 1, 0], 6)\n    2\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 0 if array[1] > array[0] else 1\n    if n == 2:\n        return 0 if array[2] > array[1] else 1\n    if n == 3:\n        return 0 if array[3] > array[2] else 1\n    if n == 4:\n        return 0 if array[4] > array[3] else 1\n    if n == 5:\n        return 0 if array[5] > array[4] else 1\n    if n == 6:\n        return 0 if array[6] > array[5] else 1\n    \n    # general case\n    n_max = n / 2\n    if n % 2 == 0:\n        return find_peak(array[n_max:n_max+n_max], n_max)\n    else:\n        return find_peak(array[n_max+1:n_max+n_max+1], n_max+1)\n\n\n# -\n\n# ## Test\n\n# +", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    a = arr[:n]\n    b = arr[n:]\n    if len(a) == 1:\n        return a[0]\n    elif len(b) == 1:\n        return b[0]\n\n    if len(a) > len(b):\n        a, b = b, a\n    return max(a, b)\n\n\ndef test():\n    print(find_peak([1, 3, 20, 4, 1, 0], 6))\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(nums, n):\n    \"\"\"\n    :type nums: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    left = nums[:n-1]\n    right = nums[n+1:]\n\n    # Find the peak in the left half\n    max_left = max(left)\n    if max_left == nums[0]:\n        return 0\n    i = 0\n    while i < len(left) and left[i] <= max_left:\n        i += 1\n    return i\n\n    # Find the peak in the right half\n    min_right = min(right)\n    if min_right == nums[-1]:\n        return len(nums)-1\n    i = len(nums)-1\n    while i >= 0 and min_right <= right[i]:\n        i -= 1\n    return i", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    \"\"\"\n    The solution involves finding the minimum value in a window of size 2, 3 or 4\n    and comparing it with the larger value in the window of size 5.\n    \"\"\"\n    if n < 5:\n        raise ValueError(\"Array size should be >= 5\")\n\n    min_value = arr[0]\n    max_value = arr[0]\n    for i in range(1, n - 1):\n        for j in range(i, i + 5):\n            if arr[j] < min_value:\n                min_value = arr[j]\n            if arr[j] > max_value:\n                max_value = arr[j]\n    if min_value < max_value:\n        return min_value\n    return max_value\n\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n    # Your code here\n    pass\n\n# This testcase should pass", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n\toctal = []\n\tnum = int(num)\n\tif num > 8:\n\t\ttemp = 0\n\t\twhile num > 8:\n\t\t\ttemp = num%8\n\t\t\toctal.insert(0,temp)\n\t\t\tnum = num//8\n\t\toctal.insert(0,num)\n\telse:\n\t\twhile num > 0:\n\t\t\toctal.insert(0,num%8)\n\t\t\tnum = num//8\n\tprint('Decimal to Octal: ',octal)\n\treturn octal\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n    if num < 10:\n        return num\n    else:\n        d,m = divmod(num, 8)\n        return 8*decimal_to_Octal(d) + m\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(decimal):\n    \"\"\"\n    Convert a decimal number into an octal number\n    \"\"\"\n    result = 0\n    while decimal > 0:\n        result = result*8 + decimal % 8\n        decimal = decimal // 8\n    return result\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\n# Solution\ndef decimal_to_Octal(num):\n    return bin(num)[2:]\n\n\n# Tests", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(number):\n    if number < 0:\n        return -1\n\n    if number == 0:\n        return 0\n\n    octal = []\n    while number > 0:\n        digit = number % 8\n        number = number // 8\n        octal.append(digit)\n    return octal[::-1]\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    octal = \"\"\n    while num != 0:\n        octal = str(num % 8) + octal\n        num //= 8\n    return octal\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\nfrom math import log\n\ndef decimal_to_Octal(number):\n    if number == 0:\n        return 0\n    else:\n        return octal_number_converter(number)\n\ndef octal_number_converter(number):\n    if number == 0:\n        return 0\n    else:\n        base = 8\n        return number * base ** log(number, base) % base", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n    # your code here\n    oct = []\n    while num:\n        oct.append(str(num%8))\n        num = int(num/8)\n    return \"\".join(oct[::-1])\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    octal = \"\"\n    if (num == 0):\n        return 0\n    else:\n        octal = convert(num, 8)\n    return int(octal)\n\ndef convert(num, base):\n    if num == 0:\n        return 0\n    else:\n        res = num % base\n        return convert(num // base, base) + (res * base ** (len(str(num))-1))"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        return max(arr[n-1] * arr[n-2], arr[n-1] * max_product(arr, n-1))\n\ndef max_product(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 2:\n        return arr[0]\n    else:\n        return max(arr[n-2] * arr[n-1], arr[n-1] * max_product(arr, n-1))\n\ndef max_product(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 2:\n        return arr[0]\n    else:\n        return max(arr[n-2] * arr[n-1], arr[n-1] * max_product(arr, n-1))\n\ndef max_product(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 2:\n        return arr[0]\n    else:\n        return max(arr[n-2] * arr[n-1], arr[n-1] * max_product(arr, n-1))\n\ndef max_product(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 2:\n        return arr[0]\n    else:\n        return max(arr[n-2] * arr[n-1], arr[n-1] * max_product(arr, n-1))\n\ndef max_product(arr, n):\n    \"\"\"\n    Time Complexity: O(n)", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(array, n):\n    \"\"\"\n    Recursive divide and conquer\n    \n    If there is only one number, return that number.\n    If there are two numbers, return the product of the two numbers.\n    If there are three numbers, return the product of the first two numbers.\n    If there are four numbers, return the product of the first three numbers.\n    If there are five numbers, return the product of the first four numbers.\n    If there are six numbers, return the product of the first five numbers.\n    \n    Using this recursive approach, the time complexity is O(n), and the space complexity is O(log n).\n    \"\"\"\n    if len(array) == 1:\n        return array[0]\n    elif len(array) == 2:\n        return array[0] * array[1]\n    elif len(array) == 3:\n        return array[0] * array[1] * array[2]\n    elif len(array) == 4:\n        return max(array[0] * array[1] * array[2], array[0] * array[1] * array[3], array[0] * array[2] * array[3])\n    elif len(array) == 5:\n        return max(array[0] * array[1] * array[2] * array[3], array[0] * array[1] * array[2] * array[4], array[0] * array[1] * array[3] * array[4], array[0] * array[2] * array[3] * array[4])\n    elif len(array) == 6:\n        return max(array[0] * array[1] * array[2] * array[3] * array[4], array[0] * array[1] * array[2] * array[3] * array[5], array[0] * array[1] * array[2] * array[4] * array[5], array[0] * array[1] * array[3] * array[", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(A, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return A[0]\n    elif n == 2:\n        return max(A[0]*A[1], A[0]*A[2], A[1]*A[2])\n    elif n == 3:\n        return max(A[0]*A[1]*A[2], A[0]*A[1]*A[3], A[0]*A[2]*A[3], A[1]*A[2]*A[3])\n    else:\n        return max(max_product(A[:n], n-1) * A[n], max_product(A[:n], n-2) * A[n]*A[n+1], max_product(A[:n], n-3) * A[n]*A[n+1]*A[n+2])\n    ", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(1)\n    \"\"\"\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0] * arr[1], arr[1] * arr[2])\n    return max(max_product(arr[:n], n - 1) * arr[n], arr[n] * max_product(arr[n + 1:], n - 1))\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n <= k:\n        return max(nums)\n\n    nums.sort()\n    sub_nums = []\n    for i in range(n - k + 1):\n        sub_nums.append(nums[i:i+k])\n    \n    max_prod = 0\n    for sub_num in sub_nums:\n        prod = 1\n        for num in sub_num:\n            prod *= num\n        max_prod = max(max_prod, prod)\n    return max_prod\n\n\ndef test_max_product():\n    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000\n    assert max_product([1, 2, 3, 4, 5, 6], 2) == 12\n    assert max_product([1, 2, 3, 4, 5, 6], 1) == 6\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    product = 1\n    result = 1\n    for i in range(n-1):\n        product = product * arr[i]\n        result = max(product, result)\n    return result\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = max(product, arr[i] * arr[j])\n\n    return product\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(nums, n):\n    \"\"\"\n    :type nums: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Write your code here\n    if n == 1:\n        return nums[0]\n\n    if n == 2:\n        return max(nums[0] * nums[1], nums[1] * nums[2])\n\n    if n == 3:\n        return max(max_product(nums[:3]), nums[0] * nums[1] * nums[2])\n\n    if n == 4:\n        return max(max_product(nums[:4]), max(nums[0] * nums[1] * nums[2], nums[0] * nums[1] * nums[3]), max(nums[0] * nums[2] * nums[3], nums[1] * nums[2] * nums[3]))\n\n    return max(max_product(nums[:n]), max_product(nums[1:]), nums[0] * nums[1] * nums[2] * nums[3])\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    # Write your code here\n    res = 1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            prod = arr[i] * arr[j]\n            if prod > res:\n                res = prod\n    return res\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(array, n):\n    max_product = [0 for i in range(n+1)]\n    max_product[0] = 0\n    max_product[1] = float('-inf')\n    for i in range(2, n+1):\n        for j in range(0, i):\n            if array[i] < array[j]:\n                max_product[i] = max(max_product[i], array[j]*max_product[i-1])\n            else:\n                max_product[i] = max(max_product[i], max_product[j-1]*array[i])\n    return max_product[-1]\n\n\ndef test_max_product():\n    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000\n\n\ndef main():\n    \"\"\"\n    from timeit import timeit\n    arr = [3, 100, 4, 5, 150, 6]\n    n = 6\n    print(timeit(lambda: max_product(arr, n), number=10000))  # 0.009759950637817383\n    \"\"\"\n\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(arr, k):\n    arr = sorted(arr)\n\n    result = 0\n    for i in range(k):\n        result += arr[i]\n    if k == 1:\n        return result\n\n    for i in range(k, len(arr)):\n        result = max(result, arr[i] + max_profit(arr[i+1:], k-1))\n\n    return result", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(arr, k):\n    \"\"\"\n    >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n    10\n    >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 2)\n    6\n    \"\"\"\n    n = len(arr)\n    if n < 1:\n        return 0\n    if k == 1:\n        return max(arr[0], arr[1])\n    for i in range(n):\n        sub_max_profit = 0\n        for j in range(i+1, n):\n            sub_max_profit = max(sub_max_profit, arr[j] - min(arr[i:j+1]))\n        return max(sub_max_profit, max_profit(arr[i+1:], k-1))\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    n = len(prices)\n    if n < 2 or k > n/2:\n        return 0\n    if k == 1:\n        return max(prices)\n    if k == 2:\n        return max(prices) - min(prices)\n    res = 0\n    for i in range(n-1-k+1):\n        j = i + k\n        res = max(res, prices[j] - prices[i])\n    return res\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    \"\"\"\n    Create a sliding window of stock prices, iterate over each element and check for a possible profit\n    When k = 1, we only need to check that the current price is greater than the current price minus 1 (sliding window 1)\n    When k = 2, we need to check that the current price is greater than the current price minus 1 (sliding window 1) and greater than the current price minus 2 (sliding window 2)\n    When k = 3, we need to check that the current price is greater than the current price minus 1 (sliding window 1), greater than the current price minus 2 (sliding window 2) and greater than the current price minus 3 (sliding window 3)\n    When k = 4, we need to check that the current price is greater than the current price minus 1 (sliding window 1), greater than the current price minus 2 (sliding window 2), greater than the current price minus 3 (sliding window 3) and greater than the current price minus 4 (sliding window 4)\n    When k = 5, we need to check that the current price is greater than the current price minus 1 (sliding window 1), greater than the current price minus 2 (sliding window 2), greater than the current price minus 3 (sliding window 3) and greater than the current price minus 4 (sliding window 4) and greater than the current price minus 5 (sliding window 5)\n    \"\"\"\n    # Check that k is an integer and is greater than 0\n    assert isinstance(prices, list)\n    assert isinstance(k, int)\n    assert k > 0\n\n    # Create empty list to store the maximum profit\n    max_profit = []\n\n    # Create empty list to store the maximum profit for the sliding windows\n    sliding_window = []\n\n    # Create empty list to store the current value for the sliding windows\n    current_window = []\n\n    # Check that the prices list is not empty\n    assert len", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(stock_prices, k):\n    if len(stock_prices) < 1:\n        return 0\n    if len(stock_prices) < k:\n        return 0\n    if len(stock_prices) == k:\n        return sum(stock_prices)\n    max_profits = []\n    for i in range(len(stock_prices) - k + 1):\n        max_profits.append(max_profit_helper(stock_prices[i: i+k]))\n    return max(max_profits)\n\n\ndef max_profit_helper(stock_prices):\n    min_price = float(\"inf\")\n    max_profit = 0\n    for price in stock_prices:\n        if price < min_price:\n            min_price = price\n        if price - min_price > max_profit:\n            max_profit = price - min_price\n    return max_profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nfrom collections import defaultdict\n\ndef max_profit(price, k):\n    if k > len(price) // 2:\n        return max_profit(price, len(price))\n    k_days = [[0] * (len(price) + 1) for _ in range(k + 1)]\n\n    for day in range(len(price)):\n        for day_num in range(k, 0, -1):\n            # calculate the profit from holding one share\n            one_day_profit = price[day] - k_days[day_num][day - 1]\n\n            # calculate the profit from not holding any shares\n            zero_day_profit = max(0, k_days[day_num - 1][day - 1])\n\n            # choose the higher profit\n            k_days[day_num][day] = max(one_day_profit, zero_day_profit)\n\n    return k_days[k][len(price) - 1]\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(arr, k):\n\n    # fill with -inf to avoid having to store result for each value in dp\n    dp = [-inf for i in range(len(arr))]\n\n    # for each element, store the max profit earned from first k - 1 transactions\n    for i in range(len(arr) - 1, -1, -1):\n        for j in range(k):\n            if j < len(dp) - 1:\n                dp[j] = max(dp[j], dp[j + 1] + arr[i])\n\n    # return maximum profit earned from first k transactions\n    return dp[0]", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    \"\"\"\n    Naive solution\n    \"\"\"\n    # make sure we have enough items to make k transactions\n    if len(prices) < k:\n        return 0\n\n    # initialize variables\n    profit = 0\n    max_profit = 0\n\n    # iterate through items\n    for i in range(len(prices)):\n\n        # only buy if we have enough items\n        if i < k:\n            continue\n\n        # start from the first transaction to the last transaction\n        for j in range(i - k, i + 1):\n\n            # compute profit\n            profit = prices[j] - min(prices[:j])\n\n            # if profit is higher than maximum profit, update\n            if profit > max_profit:\n                max_profit = profit\n\n    return max_profit\n\n\n# time complexity: O(n^2)\ndef max_profit(prices, k):\n    \"\"\"\n    Dynamic programming\n    \"\"\"\n\n    # number of transactions\n    n = len(prices)\n\n    # initialize variables\n    dp = [0] * (n + 1)\n\n    # iterate through items\n    for i in range(1, n + 1):\n\n        # loop through transactions\n        for j in range(min(k, i)):\n\n            # compute profit\n            profit = prices[i] - prices[j]\n\n            # if profit is higher than maximum profit, update\n            dp[i] = max(dp[i], dp[j] + profit)\n\n    # return maximum profit\n    return dp[n]\n\n\ndef main():\n    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    assert max_profit([1, 2, 3, 4, 5], 2) == 4\n    assert max_profit([1, 2, 3, 4, 5], 4) == 0\n    assert max_profit([1, 10, 2, 4, 5], 2) == 2\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nfrom itertools import combinations\n\ndef max_profit(prices, k):\n    \"\"\"\n    :type prices: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(prices) < 2:\n        return 0\n    if k > len(prices) // 2:\n        k = len(prices) // 2\n    return max(map(lambda x: max_profit_helper(x, prices, k), combinations(prices, k)))\n\n\ndef max_profit_helper(transactions, prices, k):\n    \"\"\"\n    :type transactions: List[int]\n    :type prices: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not transactions:\n        return 0\n    if not k:\n        return 0\n    if k > len(prices) // 2:\n        return max_profit_helper(transactions[1:], prices, k)\n    return max(max_profit_helper(transactions[1:], prices, k - 1),\n               max_profit_helper(transactions[1:], prices[k:], k) + prices[k] - prices[0])\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    max_prof = 0\n    min_price = prices[0]\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        else:\n            max_prof = max(max_prof, price - min_price)\n    return max_prof\n\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuple_list):\n    result = []\n    for index in range(len(tuple_list)):\n        result.append(tuple_list[index] + tuple_list[(index+1)%len(tuple_list)])\n    return result\n\n\n#test", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    return (tup[i] + tup[i+1] for i in range(len(tup)-1))\n\ndef test_add_pairwise():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\nfrom collections import Counter\n\n\ndef add_pairwise(tup):\n    \"\"\"\n    Using Counter, return the pairwise addition of the elements of the given tuple.\n    :param tup: tuple of positive integers.\n    :return: tuple of integers, corresponding to the pairwise addition of the elements of the given tuple.\n    \"\"\"\n    return tuple(sorted(Counter(tup).values()))\n\n\ndef test_add_pairwise():\n    \"\"\"\n    Using Counter, return the pairwise addition of the elements of the given tuple.\n    :param tup: tuple of positive integers.\n    :return: tuple of integers, corresponding to the pairwise addition of the elements of the given tuple.\n    \"\"\"\n    tup = (1, 5, 7, 8, 10)\n    assert add_pairwise(tup) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_wrong():\n    \"\"\"\n    Using Counter, return the pairwise addition of the elements of the given tuple.\n    :param tup: tuple of positive integers.\n    :return: tuple of integers, corresponding to the pairwise addition of the elements of the given tuple.\n    \"\"\"\n    tup = (5, 7, 8, 10)\n    assert add_pairwise(tup) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_wrong2():\n    \"\"\"\n    Using Counter, return the pairwise addition of the elements of the given tuple.\n    :param tup: tuple of positive integers.\n    :return: tuple of integers, corresponding to the pairwise addition of the elements of the given tuple.\n    \"\"\"\n    tup = (5, 7, 8)\n    assert add_pairwise(tup) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_wrong3():\n    \"\"\"\n    Using Counter, return the pairwise addition of the elements of the given tuple.\n    :param tup: tuple of positive integers.\n    :return: tuple of integers, corresponding to the pairwise addition of", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(numbers):\n    \"\"\"\n    Returns the pairwise sum of the numbers as a tuple.\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            result.append(numbers[i] + numbers[j])\n    return tuple(result)\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    if len(tup) <= 1:\n        return tup\n    else:\n        return tuple([x+y for x, y in zip(tup[:-1], tup[1:])])\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(seq):\n    n = len(seq)\n    result = [0] * n\n    result[0] = seq[0]\n    for i in range(1, n):\n        result[i] = result[i - 1] + seq[i]\n    return result\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    return tuple(map(operator.add, zip(*tup)))\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(nums):\n    l = len(nums)\n    return list(map(lambda i, j: i + j, nums[0:l-1], nums[1:l]))\n\n\ndef test_add_pairwise():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuples):\n    l = len(tuples)\n    res = []\n    for i in range(l):\n        res.append(tuples[i][0])\n        for j in range(i+1, l):\n            res.append(tuples[i][0] + tuples[j][0])\n    return res\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(values):\n    \"\"\"Return a tuple of pairwise sums of the elements of the given tuples.\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    >>> add_pairwise((1, 2, 3, 4))\n    (3, 7, 11, 15)\n    \"\"\"\n    return tuple(sum(values[i:i+2]) for i in range(len(values)))\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, m):\n    i = 0\n    carry = 0\n    while i < len(arr):\n        carry = (arr[i] * m + carry) % n\n        i += 1\n\n    return carry\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, k):\n    \"\"\"\n    Time complexity: O(n*logn)\n    \"\"\"\n    #Write your code here\n    return None\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(array,n,k):\n    total = 0\n    for i in range(k):\n        for j in array:\n            total += j\n    return total%n\n\ndef test_find_remainder():\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n#Solution\ndef find_remainder(arr,n,k):\n    i = 0\n    sum = 0\n    while i < len(arr):\n        sum = sum + arr[i]\n        i = i + 1\n    if sum % n != 0:\n        return sum % n\n    while k > 1:\n        k = k - 1\n        sum = sum - arr[i]\n        i = i + 1\n    return sum % n\n\n#Test case\narr = [ 100, 10, 5, 25, 35, 14 ]\nn = 6\nk = 11", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(nums,n,m):\n    remainder = 0\n    for i in range(0,n):\n        for j in range(0,m):\n            remainder += nums[i] * nums[j]\n    return remainder % n\n    ", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,m,n):\n    new_arr = []\n    for el in arr:\n        remainder = el%m\n        new_arr.append(remainder)\n    return new_arr\n\ndef test_find_remainder():\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(array, n, q):\n    count = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if (array[i]*array[j]) % n == q:\n                count +=1\n\n    return count\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,m,n):\n    remainder = 0\n    for i in range(len(arr)):\n        remainder = remainder + arr[i]*m%n\n    return remainder % n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, k):\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    remainder = 0\n    for num in arr:\n        remainder = remainder + num % n\n    return remainder % n == k % n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,r):\n    print(arr)\n    r = n%r\n    print(\"remainder = \", r)\n    return r\n\n# print(find_remainder([1,2,3],2,2))\n\n# def find_remainder(arr,n,r):\n#     r = n%r\n#     return r\n\n# print(find_remainder([1,2,3],2,2))\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(my_list):\n    for i in range(0,len(my_list)-1):\n        if my_list[i] == my_list[i+1]:\n            return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    \"\"\"\n    Args: lst(list): input list\n    Returns: bool\n    \"\"\"\n    if len(lst) < 2:\n        return False\n    \n    for i in range(0, len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + 1 == lst[j]:\n                return True\n    \n    return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(l):\n    #Your Code here\n    max_num = l[-1]\n    i = 0\n    while i < len(l):\n        if l[i] != max_num:\n            return False\n        i += 1\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i] != lst[i+1]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(l):\n    l.sort()\n    for i in range(1,len(l)):\n        if l[i] == l[i-1] + 1:\n            continue\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n#My solution\ndef check_Consecutive(arr):\n    return len(arr) > 2 and len(set(arr)) == 1\n\n# The best solution\ndef check_Consecutive(arr):\n    return len(arr) > 2 and (arr[1]-arr[0]) > 1\n\n#Another best solution\ndef check_Consecutive(arr):\n    if len(arr) <= 2:\n        return False\n    if len(set(arr)) != 1:\n        return False\n    if arr[1] - arr[0] == 1:\n        return True\n    else:\n        return False\n\n#An even better solution\ndef check_Consecutive(arr):\n    return any([arr[i + 1] - arr[i] == 1 for i in range(0, len(arr) - 1)])\n\n#A short and sweet solution\ndef check_Consecutive(arr):\n    return len(set(arr)) == 1 and len(arr) > 2 and arr[1] - arr[0] > 1", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(l):\n    #your code here\n    if len(l) <= 1:\n        return True\n\n    return l[1] - l[0] == 1\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_consecutive(lst):\n    for i in range(0, len(lst) - 1):\n        if (lst[i] + 1 == lst[i + 1]):\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if i != len(arr) -1 and arr[i] + 1 == arr[i + 1]:\n            return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i]+1 == lst[j]:\n                return True\n    return False"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n# Longest common subsequence problem\n# Bonus: Longest common subsequence using dynamic programming\n# Explanation: https://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n# def longest_common_subsequence(s1, s2):\n#     if len(s1) == 0:\n#         return []\n#     if len(s2) == 0:\n#         return []\n#\n#     cache = [[None] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n#     for i in range(1, len(s1) + 1):\n#         for j in range(1, len(s2) + 1):\n#             if s1[i - 1] == s2[j - 1]:\n#                 cache[i][j] = cache[i - 1][j - 1] + 1\n#             else:\n#                 cache[i][j] = max(cache[i - 1][j], cache[i][j - 1])\n#     return s1[len(s1) - len(cache[len(s1)]) :]\n#\n# print(longest_common_subsequence('AYRT', 'RTY'))\n\n# Sorting problems\n\n# Bubble sort - Bubble sort can sort only in ascending order\n# def bubble_sort(unsorted_list):\n#     length = len(unsorted_list)\n#     for i in range(length - 1, 0, -1):\n#         for j in range(i, 0, -1):\n#             if unsorted_list[i - 1] > unsorted_list[j - 1]:\n#                 unsorted_list[", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\nfrom collections import Counter\n\n\ndef tuple_intersection(tuple_list_one, tuple_list_two):\n    intersection = Counter(tuple_list_one).intersection(tuple_list_two)\n    return intersection.elements()\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\nfrom typing import Tuple, List\n\ndef tuple_intersection(*tup_list: Tuple[int, int]) -> Tuple[Tuple[int, int]]:\n    \"\"\"\n    This is the solution for this problem.\n    :param tup_list: this is the list of tuple pairs.\n    :return: a tuple list of intersections.\n    \"\"\"\n    return set.intersection(*map(set, tup_list))\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(*args):\n    return list(set.intersection(*map(set, args)))\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list_a, list_b):\n    set_a = set(list_a)\n    set_b = set(list_b)\n    return set_a.intersection(set_b)\n\ndef main():\n    print(\"Test 1:\", tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n    print(\"Test 2:\", tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (4, 5), (6, 5), (6, 6)]))\n    print(\"Test 3:\", tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (4, 5), (5, 6), (9, 11)]))\n    print(\"Test 4:\", tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(4, 5), (5, 6), (3, 4), (9, 11)]))\n    print(\"Test 5:\", tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(4, 5), (5, 6), (6, 5), (9, 11)]))\n    print(\"Test 6:\", tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(3, 4), (5, 6), (6, 5),", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(*args):\n    result = set(args[0])\n    for a in args[1:]:\n        result = result.intersection(a)\n    return result\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list_one, tuple_list_two):\n    set_one = set(tuple_list_one)\n    set_two = set(tuple_list_two)\n    set_intersection = set_one & set_two\n    return set_intersection\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(*args):\n    if len(args) == 0:\n        return tuple()\n    return tuple(set.intersection(*map(set, args)))\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\nfrom collections import Counter\ndef tuple_intersection(tuples):\n    intersection = set()\n    for t in tuples:\n        intersection.update(set(t))\n    return intersection\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list_1, tuple_list_2):\n    result = set()\n    for tup in tuple_list_1:\n        if tup in tuple_list_2:\n            result.add(tup)\n    return result\n\n#Test Function"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, char_from, char_to):\n    result = string\n    for index in range(0, len(result)):\n        if result[index] == char_from:\n            result = result.replace(char_from, char_to)\n    return result\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, ch, new_ch):\n    res = \"\"\n    for char in string:\n        if char == ch:\n            res += new_ch\n        else:\n            res += char\n    return res\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s, c, r):\n    return s.replace(c, r)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str,old_char,new_char):\n    return str.replace(old_char,new_char)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s,c,r):\n    return \"\".join(c if x==c else r for x in s)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, search, replace):\n    return string.replace(search, replace)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, char, new_char):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return string.replace(char, new_char)\n\n\ndef main():\n    \"\"\"\n    Do not remove this function.\n    \"\"\"\n    print(replace_char(\"polygon\",'y','l'))\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,char,replace):\n    return \"\".join([string[i] if string[i] != char else replace for i in range(len(string))])\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, old_char, new_char):\n    \"\"\"\n    Replace each occurence of old_char with new_char in string\n    \"\"\"\n    string = string.replace(old_char, new_char)\n    return string\n\n# test", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s,old,new):\n    new_list = s.split(old)\n    return ''.join(new_list)\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\nfrom collections import Counter\n\ndef sort_counter(c):\n    return sorted(c.items(), key=lambda x: x[1], reverse=True)\n\n\nc = Counter({'Math':81, 'Physics':83, 'Chemistry':87})", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(c):\n\tsorted_values = sorted(c, key = lambda x:c[x])\n\treturn sorted(c, key = lambda x:c[x], reverse = True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=operator.itemgetter(1), reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\nfrom collections import Counter\n\ndef sort_counter(a_dict):\n\treturn sorted(a_dict.items(), key=lambda x:x[1])\n\n# print(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    # Your code here\n    # Sort the values of the dictionary first\n    # and then sort the keys\n    # Note that the items() method of dictionaries\n    # returns a list of tuples.\n    # This is the order in which you need to sort them.\n    items = list(counter.items())\n    items.sort(key = lambda x: x[1])\n    items.sort(key = lambda x: x[0])\n    return items", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    pass\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(dic):\n    sorted_dic = sorted(dic.items(), key=operator.itemgetter(1), reverse=True)\n    return sorted_dic\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(c):\n    return sorted(c.items(), key=lambda x: x[1])", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(mydict):\n    mylist=[]\n    mylist=mydict.items()\n    return sorted(mylist,key=lambda x:x[1])"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(a):\n    return max(a) + min(a)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(a_list):\n    if not a_list:\n        raise ValueError('No values in list!')\n    return max(a_list) + min(a_list)\n\n\ndef test_big_sum():\n    assert big_sum([1,2,3]) == 4\n\n\ndef test_big_sum_fail():\n    with pytest.raises(ValueError):\n        big_sum([])\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(nums):\n    return sum(nums[:len(nums)//2]) + sum(nums[len(nums)//2:])\n\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(array):\n    min = array[0]\n    max = array[0]\n    for i in array:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max + min\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(array):\n    \"\"\"\n    Returns the sum of the biggest and smallest value in the given array\n    \"\"\"\n    return max(array) + min(array)\n\n\ndef big_sum_solution(array):\n    \"\"\"\n    Returns the sum of the biggest and smallest value in the given array\n    \"\"\"\n    return max(array) + min(array)\n\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    \"\"\"\n    Takes an array and returns the sum of the largest and smallest value.\n    \"\"\"\n    return arr[0] + arr[-1]\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(a):\n    return a[0] + a[-1]\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(list):\n    smallest = float(\"inf\")\n    largest = float(\"-inf\")\n    for item in list:\n        if item > largest:\n            largest = item\n        if item < smallest:\n            smallest = item\n    return largest + smallest\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(a):\n    # your code here\n    #Note: This is a demo test\n    return a[0] + a[-1]\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(input_str):\n    if not input_str:\n        return False\n    for char in input_str:\n        if not char.islower():\n            return False\n    return True\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(string):\n    for letter in string:\n        if letter.isupper():\n            return False\n    return True\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.islower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(text):\n    \"\"\"\n    Returns True if text is lower case, False otherwise.\n    \"\"\"\n    if text is not None:\n        return all(c.islower() for c in text)\n    else:\n        return False\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    return s.islower()\n\n# is_lower_test = \"InValid\"\n# is_lower_test = \"valid\"\n# is_lower_test = \"O\"\n# is_lower_test = \"1\"\n# is_lower_test = \"a\"\n# is_lower_test = \"Z\"\n# is_lower_test = \"A\"\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(string):\n    \"\"\"\n    :param string: string to be checked\n    :return: boolean representing whether the string is lower case\n    \"\"\"\n    for char in string:\n        if char.isupper():\n            return False\n    return True\n\n\n# +\ndef is_lower(string):\n    \"\"\"\n    :param string: string to be checked\n    :return: boolean representing whether the string is lower case\n    \"\"\"\n    for char in string:\n        if char.isupper():\n            return False\n    return True\n\ndef is_lower(string):\n    \"\"\"\n    :param string: string to be checked\n    :return: boolean representing whether the string is lower case\n    \"\"\"\n    return not any(char.isupper() for char in string)\n\n\n# +\ndef is_lower(string):\n    \"\"\"\n    :param string: string to be checked\n    :return: boolean representing whether the string is lower case\n    \"\"\"\n    return all(char.islower() for char in string)\n\n\n# -\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    \"\"\"\n    returns True if the string s is lowercase.\n    \"\"\"\n    for letter in s:\n        if not letter.islower():\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(x):\n    return x.islower()\n\n# Alternative\n\ndef is_lower(x):\n    return not x.isupper()\n\n# Alternative\n\ndef is_lower(x):\n    return x.lower() == x\n\n# Alternative\n\ndef is_lower(x):\n    return x.isalpha() and x.islower()\n\n# Alternative\n\ndef is_lower(x):\n    return x.isalpha() and x.islower() and not x.istitle()", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(str):\n    return str.lower() == str\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    return ''.join(c for c in s if c.isupper())\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    def remove(i, j):\n        while i < j and string[i].islower():\n            i += 1\n        return i, j\n    return ''.join(string[i:j] for i, j in (remove(i, i+1) for i in range(len(string))))\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    return \"\".join([letter for letter in string if letter.isupper()])\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(str):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    assert remove_lowercase(\"PYTHon\")==('PYTH')\n    '''\n    newstr = str\n    if len(newstr) < 1:\n        return newstr\n    i = 0\n    while i < len(newstr):\n        if newstr[i] >= 'A' and newstr[i] <= 'Z':\n            break\n        i = i + 1\n    if i == len(newstr):\n        return newstr\n    j = i\n    while j < len(newstr):\n        if newstr[j] >= 'a' and newstr[j] <= 'z':\n            break\n        j = j + 1\n    newstr = newstr[i:j]\n    return newstr\n\n\ndef main():\n    print(remove_lowercase(\"Python\"))\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(str1):\n    str1 = str1.lower()\n    str1 = str1.translate(str.maketrans(\"\", \"\", string.ascii_lowercase))\n    return str1\n\n\ndef main():\n    print(remove_lowercase(\"this is a test\"))\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(s):\n    # Write your code here!\n    return ''.join([i for i in s if i.isupper()])\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(text):\n    \"\"\"\n    :type text: str\n    :rtype: str\n    \"\"\"\n    ans = \"\"\n    for c in text:\n        if c.isupper():\n            ans += c\n    return ans\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(str1):\n    return \"\".join(i for i in str1 if i.isupper())\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    return \"\".join(i for i in s if not i.islower())\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    \"\"\"\n    Returns string without lower case letters\n    \"\"\"\n    return \"\".join(c for c in s if c.isupper())\n\n# +"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    for x in range(1,n+1):\n        if n%x == 0:\n            print(x)\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    return int(number) % 10\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    \"\"\"\n    Find the first digit of a number n.\n    :param n: A non-negative integer.\n    :return: The first digit of the number.\n    \"\"\"\n    digit = n % 10\n    return digit\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n\treturn number % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return int(str(num)[0])\n\n#assert first_Digit(123) == 1\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    return n // 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    if n == 0:\n        return 0\n    return n % 10\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n# This is my solution\ndef first_Digit(x):\n    return x // 10 ** (len(str(x))-1)\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    return number // 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    return number / 10\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    \"\"\"\n    Using a set() to count occurrences of each character\n    \"\"\"\n    char_counts = set()\n    for char in string:\n        char_counts.add(char)\n\n    return max(char_counts)\n\n\n# Tests", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    \"\"\"\n    >>> get_max_occuring_char('abc')\n    'a'\n    >>> get_max_occuring_char('abcd')\n    'a'\n    >>> get_max_occuring_char('abcdef')\n    'a'\n    >>> get_max_occuring_char('abcdefg')\n    'a'\n    \"\"\"\n    if not string:\n        return None\n\n    occurring_chars = set(string)\n    return max(occurring_chars, key=lambda c: occurring_chars.count(c))\n\n\n# end::605c6234d4f53d89[]\n\n# tag::5b254d11b2a96f82[]\ndef get_max_occuring_char_2(string):\n    \"\"\"\n    >>> get_max_occuring_char_2('abc')\n    'a'\n    >>> get_max_occuring_char_2('abcd')\n    'a'\n    >>> get_max_occuring_char_2('abcdef')\n    'a'\n    >>> get_max_occuring_char_2('abcdefg')\n    'a'\n    \"\"\"\n    if not string:\n        return None\n\n    # We can iterate over the string using the built-in `enumerate` function\n    # to get the index of each character in the string\n    char_indices = list(enumerate(string))\n\n    # We need to iterate over all the characters in the string\n    for i, char in char_indices:\n\n        # We need to check if the character is already in the set\n        # If it is, we can increment the count by 1\n        if char in char_indices:\n            char_indices[i] = (char_indices[i][0], char_indices[i][1] + 1)\n\n    # We can now sort the set by the second item in the tuple\n    # (the count)\n    char_indices = sorted(char_indices, key=lambda x: x[1])\n\n    # And return the first character (since the count is 1)\n    return char", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n\t\"\"\"\n\tFind the maximum occurring char in a string\n\t\"\"\"\n\treturn max(set(str), key = str.count)", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\n# Your code here\n\ndef get_max_occuring_char(word):\n    \"\"\"\n    Finds the max occurring char in a word\n    \"\"\"\n    dic = {}\n    for i in word:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    max_num = 0\n    max_key = \"\"\n    for i, v in dic.items():\n        if v > max_num:\n            max_num = v\n            max_key = i\n    return max_key\n\n# Test cases", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    if len(string) == 0:\n        return None\n    max_char = None\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n        if max_char is None or char_count[max_char] < char_count[char]:\n            max_char = char\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(str):\n    \"\"\"\n    Write your solution here.\n    \"\"\"\n    from collections import Counter\n    return Counter(str).most_common(1)[0][0]\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str_val):\n    max_char = None\n    max_count = -1\n    for char in str_val:\n        char_count = str_val.count(char)\n        if char_count > max_count:\n            max_count = char_count\n            max_char = char\n    return max_char\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    if not string:\n        return None\n\n    char = \"\"\n    occurance = 0\n\n    for c in string:\n        if c == char:\n            occurance += 1\n        else:\n            if occurance > occurance:\n                char = c\n                occurance = 1\n            else:\n                char = c\n                occurance = 1\n\n    return char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n    return max(dict.fromkeys(str))\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    max_value = -1\n    max_char = None\n    for character in string:\n        if character > max_value:\n            max_char = character\n            max_value = character\n    return max_char\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(a, b):\n    \"\"\"\n    >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)\n    True\n    \"\"\"\n    for i in range(len(a)):\n        if a[i] + b == b:\n            return True\n    return False\n\n\n# Solution based on Dynamic Programming\ndef is_subset_sum_dp(a, b, memo):\n    \"\"\"\n    >>> is_subset_sum_dp([3, 34, 4, 12, 5, 2], 6, {})\n    True\n    \"\"\"\n    if b == 0:\n        return True\n    if a is None:\n        return False\n    if (a, b) in memo:\n        return memo[(a, b)]\n    if sum(a) < b:\n        return False\n    for i in range(len(a)):\n        if is_subset_sum_dp(a[i + 1:], b - a[i], memo):\n            memo[(a, b)] = True\n            return True\n    memo[(a, b)] = False\n    return False\n\n\ndef is_subset_sum_dp(a, b, memo=None):\n    \"\"\"\n    >>> is_subset_sum_dp([3, 34, 4, 12, 5, 2], 6, {})\n    True\n    \"\"\"\n    if b == 0:\n        return True\n    if a is None:\n        return False\n    if (a, b) in memo:\n        return memo[(a, b)]\n    if sum(a) < b:\n        return False\n    for i in range(len(a)):\n        if is_subset_sum_dp(a[i + 1:], b - a[i], memo):\n            memo[(a, b)] = True\n            return True\n    memo[(a, b)] = False\n    return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(set_of_numbers, sum_to_find, target_sum):\n    # Iterate through the set and keep track of the sum of elements already selected\n    sub_set_sum = 0\n    for number in set_of_numbers:\n        sub_set_sum += number\n\n    # Return the result based on whether the sum is equal to target_sum\n    return sub_set_sum == target_sum\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(set_of_numbers, sum, target):\n    \"\"\"\n    Returns whether the set contains a sum equal to the target.\n    \"\"\"\n    subset = set(set_of_numbers)\n    return sum(subset) == target\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, target, sum):\n    \"\"\"Returns True if target sum is reachable from nums.\n    \n    >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)\n    True\n    >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 8)\n    False\n    \"\"\"\n    return target in get_subsets_sum(nums, sum)\n\ndef get_subsets_sum(nums, target):\n    \"\"\"Return the subsets of nums that sum to target.\n    \n    >>> get_subsets_sum([3, 34, 4, 12, 5, 2], 6)\n    [[], [3], [4], [12], [5, 2], [34, 12]]\n    >>> get_subsets_sum([3, 34, 4, 12, 5, 2], 7)\n    [[], [3], [4], [12], [5, 2], [34], [34, 12], [4, 12], [5, 2, 12], [3, 34, 4, 12], [3, 34, 4, 12, 5, 2]]\n    \"\"\"\n    subsets = []\n    if not nums:\n        return subsets\n    if len(nums) == 1:\n        return [[0]]\n    else:\n        for i in range(len(nums)):\n            for sub in get_subsets_sum(nums[i + 1:], target - nums[i]):\n                sub.append(i)\n                subsets.append(sub)\n        return subsets", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef is_subset_sum(S, T):\n    \"\"\"\n    Time: O(len(S) + len(T))\n    Space: O(len(S))\n    \"\"\"\n    total_sum = 0\n    d = defaultdict(int)\n    for s in S:\n        total_sum += s\n        d[s] += 1\n    for t in T:\n        if d[t] > 0:\n            d[t] -= 1\n            total_sum -= t\n            if total_sum == 0:\n                return True\n    return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, sum, n):\n    \"\"\"\n    Time: O(n*sum), Space: O(sum)\n    \"\"\"\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if sum < nums[0]:\n        return False\n    for i in range(n):\n        if sum - nums[i] in nums[i + 1:]:\n            return True\n    return False\n\n\ndef is_subset_sum(nums, sum, n):\n    \"\"\"\n    Time: O(n*sum), Space: O(sum)\n    \"\"\"\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if sum < nums[0]:\n        return False\n    s = set()\n    for n in nums:\n        if sum - n in s:\n            return True\n        else:\n            s.add(n)\n    return False\n\n\ndef is_subset_sum(nums, sum, n):\n    \"\"\"\n    Time: O(n*sum), Space: O(sum)\n    \"\"\"\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if sum < nums[0]:\n        return False\n    s = set(nums)\n    return sum - nums[0] in s\n\n\ndef is_subset_sum(nums, sum, n):\n    \"\"\"\n    Time: O(n*sum), Space: O(sum)\n    \"\"\"\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if sum < nums[0]:\n        return False\n    s = set(nums)\n    for i in range(len(nums) - 1):\n        if sum - nums[i] in s:\n            return True\n        else:\n            s.remove(nums[i])\n    return False\n\n\ndef is_subset_sum(nums, sum, n):\n    \"\"\"\n    Time: O(n*sum), Space: O(sum)\n    \"\"\"\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if sum <", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(arr, sum, target):\n    s = set(arr)\n    return len(s) >= target - sum\n\ndef is_subset_sum_faster(arr, sum, target):\n    s = set(arr)\n    return len(s) >= target - sum or (len(s) == target - sum and sum in s)\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(set_of_numbers, sum_to_find, total_sum):\n    \"\"\"\n    Returns True if there exists a subset of the given set with sum equal to the given sum.\n    Returns False otherwise.\n    \"\"\"\n    # Solution 1:\n    # for num in set_of_numbers:\n    #     total_sum -= num\n    # return total_sum == 0\n\n    # Solution 2:\n    for num in set_of_numbers:\n        if sum_to_find == total_sum - num:\n            return True\n    return False\n\n\ndef test_is_subset_sum():\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 13) == False\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(numbers, sum, target):\n    \"\"\"\n    :param numbers: List[int]\n    :param sum: int\n    :param target: int\n    :return: bool\n    \"\"\"\n    if len(numbers) == 0:\n        return False\n\n    if sum == target:\n        return True\n\n    for i, n in enumerate(numbers[1:]):\n        sum -= n\n        if is_subset_sum(numbers[:i], sum, target):\n            return True\n    return False\n\n\ndef is_subset_sum_v2(numbers, sum, target):\n    \"\"\"\n    :param numbers: List[int]\n    :param sum: int\n    :param target: int\n    :return: bool\n    \"\"\"\n    if len(numbers) == 0:\n        return False\n\n    if sum == target:\n        return True\n\n    for i, n in enumerate(numbers[1:]):\n        sum -= n\n        if sum < 0:\n            continue\n\n        if is_subset_sum_v2(numbers[:i], sum, target):\n            return True\n    return False\n\n\ndef test_is_subset_sum():\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 12) == False\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 17) == True\n\n\ndef test_is_subset_sum_v2():\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert is_subset_sum([3, 34, 4, 12,", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(num, sum):\n    num_dict = {}\n    for i in num:\n        if i in num_dict:\n            num_dict[i] += 1\n        else:\n            num_dict[i] = 1\n\n    return sum(num_dict.values()) == sum\n\n\ndef test_is_subset_sum():\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 1, 9) == False\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 10, 9) == False\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 5, 10) == True\n\n"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(string):\n\treturn re.sub('^[A-Z][a-z]+',r'\\1 Yes', string)\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    return r\"([a-z])([A-Z])\"\n\ndef match(string):\n    return r\"(?<=\\w)\\W\"\n\ndef match(string):\n    return r\"\\b\"\n\ndef match(string):\n    return r\"\\b\\w\\w+\\b\"", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(s):\n    result = \"\"\n    pattern = re.compile(r'([A-Z])([a-z]+)')\n    if re.search(pattern, s):\n        for match in re.finditer(pattern, s):\n            result += match.group(1).upper() + match.group(2)\n    else:\n        result = \"No\"\n    return result\n\ndef match2(s):\n    result = \"\"\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, s):\n        for match in re.finditer(pattern, s):\n            result += match.group(0)\n    else:\n        result = \"No\"\n    return result\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(s):\n    # your code here\n    if len(s) == 0:\n        return \"\"\n    return s[0].upper() + match(s[1:])\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(s):\n    if re.search(\"^[a-z]\",s):\n        if re.search(\"^[A-Z]\",s):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(s):\n    return re.findall(r\"(?<=[A-Z])[a-z]+\", s)\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(string):\n    return re.sub('([a-z])([A-Z])', r'\\1 \\2', string)\n\ndef test_match():\n    assert match(\"Geeks\") == 'Yes'\n    print('Success!')\n\ntest_match()", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    return re.compile(\"[A-Z][a-z]*\").findall(string)\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(s):\n    m = re.search(r\"[A-Z][a-z]*\", s)\n    if m:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(input_str):\n    return re.search(r\"[A-Z][a-z]*\", input_str)\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    elif x == 2:\n        return 6\n    elif x == 3:\n        return 24\n    elif x == 4:\n        return 120\n    elif x == 5:\n        return 720\n    elif x == 6:\n        return 5040\n    elif x == 7:\n        return 40320\n    elif x == 8:\n        return 362880\n    elif x == 9:\n        return 3628800\n    else:\n        return 4294967295\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x):\n        if factorial(i) % x == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    # Using Sieve of Eratosthenes\n    isPrime = [True for i in range(x + 1)]\n    isPrime[0] = False\n    isPrime[1] = False\n    isPrime[2] = True\n    for i in range(3, x + 1):\n        if isPrime[i]:\n            for j in range(i * i, x + 1, i):\n                isPrime[j] = False\n    for i in range(2, x + 1):\n        if isPrime[i]:\n            for j in range(i * i, x + 1, i):\n                isPrime[j] = False\n    for i in range(x - 1, -1, -1):\n        if isPrime[i]:\n            yield i\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    i = 0\n    while True:\n        if (math.factorial(i) % x) == 0:\n            return i\n        i += 1\n\ndef first_Factorial_Divisible_Number(x):\n    i = 0\n    while True:\n        if (math.factorial(i) % x) == 0:\n            return i\n        i += 1\n\ndef first_Factorial_Divisible_Number(x):\n    i = 0\n    while True:\n        if (math.factorial(i) % x) == 0:\n            return i\n        i += 1\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(limit):\n    for num in range(1,limit):\n        if is_factorial_divisible_by(num,limit):\n            return num\n\ndef is_factorial_divisible_by(num,limit):\n    return num == 1 or is_factorial_divisible_by(num-1,limit)\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    This function will find the first natural number whose factorial is divisible by x\n    Args:\n        x: Integer > 1\n    Returns:\n        Integer < x\n    \"\"\"\n    assert x > 1\n    # your code goes here\n    first_num = 1\n    for n in range(2,x):\n        if n % (n-1) == 0:\n            first_num = n\n            break\n    return first_num\n\n\ndef test_first_Factorial_Divisible_Number():\n    \"\"\"\n    This function will test your first_Factorial_Divisible_Number() function\n    \"\"\"\n    assert first_Factorial_Divisible_Number(10) == 5\n    assert first_Factorial_Divisible_Number(11) == 7\n    assert first_Factorial_Divisible_Number(12) == 8\n    assert first_Factorial_Divisible_Number(13) == 10\n    assert first_Factorial_Divisible_Number(20) == 24\n    assert first_Factorial_Divisible_Number(21) == 30\n    assert first_Factorial_Divisible_Number(22) == 32\n    assert first_Factorial_Divisible_Number(23) == 42\n    assert first_Factorial_Divisible_Number(30) == 60\n    assert first_Factorial_Divisible_Number(31) == 90\n    assert first_Factorial_Divisible_Number(32) == 108\n    assert first_Factorial_Divisible_Number(33) == 156\n    assert first_Factorial_Divisible_Number(40) == 240\n    assert first_Factorial_Divisible_Number(41) == 420\n    assert first_Factorial_Divisible_Number(42) == 576\n    assert first_Factorial_Divisible_Number(43) == 910\n    assert first_Factorial_Divisible_Number(50) == 120", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(2,x):\n        if x % i == 0:\n            return i\n\ndef divisble_in_factorial(x):\n    if x % 10 == 0:\n        print(\"divisible by 10\")\n\ndivisble_in_factorial(10)", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    answer = 0\n    factorial_list = [1,2,3,4,5,6,7,8,9,10,12,15,20,27,36,45,56,69,84,101,121,144,170,200,233,270,311,356,405,458,515,576,641,710,784,863,948,1038,1134,1236,1344,1458,1576,1700,1831,1968,2112,2263,2421,2586,2758,2937,3124,3318,3521,3732,3951,4178,4413,4656,4907,5166,5434,5710,5995,6288,6591,6902,7222,7551,7888,8234,8588,8951,9322,9702,10091,10488,10894,11308,11731,12162,12602,13051,13508,13974,14448,14931,15422,15922,16431,16948,17474,18008,18551,19102,19662,202", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(list1, list2):\n    return list1[0:len(list1) - len([i for i in list2 if i[0] == list1[0] and i[1] == list1[1]])]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(lst1, lst2):\n    result = []\n    for element in lst1:\n        if not any(map(lambda x: x in element, lst2)):\n            result.append(element)\n    return result\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\ndef remove_matching_tuple(lst1, lst2):\n    return filter(lambda x: x not in lst2, lst1)\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x != y for y in lst2]\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x[0] != x[1]]\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x[0] != x[1]]\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x[0] != x[1]]\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x[0] != x[1]]\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x[0] != x[1]]\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x[0] != x[1]]\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x[0] != x[1]]\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x[0] != x[1]]\n\ndef remove_matching_tuple(lst1, lst2):\n    return [x for x in lst1 if x[0]", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(a, b):\n    \"\"\"\n    >>> a = [('Hello', 'dude'), ('How', 'are'), ('you', '?')]\n    >>> b = [('Hello', 'dude'), ('How', 'are')]\n    >>> remove_matching_tuple(a, b)\n    [('you', '?')]\n    \"\"\"\n    return [item for item in a if item not in b]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple1, tuple2):\n    result = []\n    for t in tuple2:\n        if t != tuple1[0]:\n            result.append(t)\n    return result\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(my_list, tuple_list):\n    \"\"\"\n        Args:\n            my_list: list of tuples\n            tuple_list: list of tuples\n        Returns:\n            my_list with matching tuples removed\n    \"\"\"\n    # empty list to hold remaining values\n    new_list = []\n\n    # compare each tuple in the tuple list to each tuple in the my_list\n    for tuple_one in tuple_list:\n        for tuple_two in my_list:\n            # compare the tuple values\n            if tuple_one == tuple_two:\n                # if the values are the same, don't add the tuple to the new_list\n                pass\n            else:\n                # if the values are not the same, add the tuple to the new_list\n                new_list.append(tuple_two)\n\n    # return the new_list\n    return new_list\n\n\n# +\n# Test", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuples_list, tuples_to_remove):\n    # TODO: write your code here\n    # Use list comprehension\n    return [x for x in tuples_list if x != tuple(tuples_to_remove[0])]\n\n\n# Testing", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tup1, tup2):\n    pass\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuples1, tuples2):\n    # TODO: Replace 'None'\n    return tuple(filter(None, map(lambda t: t if t not in tuples2 else None, tuples1)))\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    return tuple(x for x in t1 if x not in t2)\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tup1, tup2):\n    return list(set(tup1) - set(tup2))\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, k):\n    \"\"\"\n    :param arr: array of integers to be checked for palindromes\n    :param k: the amount of digits that must be in a palindrome\n    :return: the largest palindrome found in the given array\n    \"\"\"\n    k -= 1  # minus one as we want to compare with the same number but one position left\n    m = 0\n    n = 0\n    p = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if arr[i] == arr[j] and abs(i-j) < k:\n                m = arr[i]\n                n = arr[j]\n                p = i\n    return m * 10**k + n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, n):\n    for i in range(n):\n        for j in range(n):\n            print(i, j)\n            for k in range(n):\n                print(k)\n                for l in range(n):\n                    if i != k and j != l and arr[i] + arr[j] == arr[k] + arr[l]:\n                        return arr[i] * arr[j]\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    \"\"\"\n    Recursive solution\n    \"\"\"\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n    max_num = 0\n    for i in range(n // 2):\n        num = largest_palindrome(arr[i:n-i:1], n - 2 * i)\n        if num > max_num:\n            max_num = num\n    return max_num\n\n\n# For testing\n# largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n# largest_palindrome([1, 232, 54545, 999991], 5) == 999991\n# largest_palindrome([1, 232, 54545, 999991], 6) == 999991\n# largest_palindrome([1, 232, 54545, 999991], 7) == 999991\n# largest_palindrome([1, 232, 54545, 999991], 8) == 999991", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\nimport sys\n\n\ndef largest_palindrome(nums, len_nums):\n    if len_nums == 0 or len_nums == 1:\n        return nums[0]\n    nums.sort(reverse=True)\n    for i in range(len_nums):\n        j = len_nums - 1\n        while j > i:\n            if nums[i] + nums[j] > 0:\n                if nums[i] + nums[j] == nums[i] * nums[j]:\n                    return nums[i] * nums[j]\n            j -= 1\n    return nums[0]\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\nfrom functools import lru_cache\n\ndef largest_palindrome(arr, n):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    @lru_cache(maxsize=1)\n    def helper(i, j, sum_of_two):\n        if i >= j:\n            return 0\n        if i + j == n:\n            return 1\n        if sum_of_two < 0:\n            return 0\n        if sum_of_two == 0:\n            return 1\n        if sum_of_two == 1:\n            return 0\n        if arr[i + j] > sum_of_two:\n            return 0\n\n        count = helper(i + 1, j, sum_of_two)\n        count += helper(i, j - 1, sum_of_two)\n        count += helper(i + 1, j - 1, sum_of_two - arr[i + j])\n        return count\n\n    return helper(0, n - 1, sum(arr))\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    if len(arr) < 2:\n        return None\n    largest = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if int(str(arr[i]) + str(arr[j])) > largest:\n                largest = int(str(arr[i]) + str(arr[j]))\n    return largest", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(a, length):\n    return max(a)\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(numbers, n):\n    \"\"\"\n    Find largest palindrome in numbers of size n\n    Time: O(n*n)\n    Space: O(1)\n    \"\"\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            palindrome = numbers[i] + numbers[j]\n            if str(palindrome) == str(palindrome)[::-1]:\n                return palindrome\n    return None\n\n\ndef test_largest_palindrome():\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n    assert largest_palindrome([1, 232, 54545, 999991], 3) == 999991\n    assert largest_palindrome([1, 2, 54545], 3) == 999\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    min_val = arr[0]\n    for i in range(1, n):\n        min_val = min(min_val, arr[i])\n    max_val = arr[-1]\n    for i in range(n - 2, -1, -1):\n        max_val = max(max_val, arr[i])\n    for i in range(min_val, max_val + 1):\n        palindrome = str(i)\n        for j in range(len(palindrome) // 2):\n            palindrome = palindrome[j:j + 2][::-1]\n            if palindrome in arr:\n                return int(palindrome)\n    return None\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(numbers, max_len):\n    '''\n    Find the largest palindromic number.\n    '''\n    max_palindrome = 0\n\n    for i in range(max_len):\n        for j in range(max_len-i):\n            if i < j:\n                break\n            num = int(numbers[i:j+1])\n            # print(num)\n            if num > max_palindrome:\n                max_palindrome = num\n\n    return max_palindrome\n\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    return 1.0 * math.pow(p, k) * math.pow(1.0-p, n-k) / math.factorial(n)\n\n#Test program\ndef main():\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(10, 10, 1.0/3) == 0.011930457120798874\n    assert binomial_probability(10, 0, 1.0/3) == 0.05738396234125707\n    assert binomial_probability(10, 1, 1.0/3) == 0.2193171453064412\n    print \"All tests passed\"\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    return binomial(n, k).pmf(k)\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Args:\n        n (int): number of trials\n        k (int): number of successes\n        p (float): probability of success per trial\n    \"\"\"\n    p_r = p ** k * (1 - p) ** (n - k)\n    return p_r\n\n# Tests", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    return binom.pmf(k, n, p)\n\n# Test", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    # TODO: your implementation here\n    raise NotImplementedError()\n    ", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(trials, successes, probability):\n    \"\"\"\n    The probability of a single binomial trial is success probability raised to the power of trials.\n    The binomial distribution is the sum of n trials with probability success probability.\n    \"\"\"\n    return (probability**trials)*(1-probability)**(trials-successes)\n\ndef expected_value(trials, probability):\n    \"\"\"\n    The expected value of a single binomial trial is probability times trials.\n    The expected value for n trials is n probability times trials.\n    \"\"\"\n    return trials*probability\n\ndef variance(trials, probability):\n    \"\"\"\n    The variance of a single binomial trial is probability times (1-probability) times trials.\n    The variance for n trials is n probability times (1-probability) times trials.\n    \"\"\"\n    return trials*probability*(1-probability)\n\ndef std_dev(trials, probability):\n    \"\"\"\n    The standard deviation of a single binomial trial is probability times (1-probability) times trials.\n    The standard deviation for n trials is n probability times (1-probability) times trials.\n    \"\"\"\n    return np.sqrt(trials*probability*(1-probability))\n\ndef frequency_probability(trials, frequency):\n    \"\"\"\n    The probability of a single binomial trial is success probability raised to the power of trials.\n    The binomial distribution is the sum of n trials with probability success probability.\n    \"\"\"\n    return frequency**trials*(1-frequency)**(trials-frequency)\n\ndef frequency_probability_to_expected_value(trials, frequency):\n    \"\"\"\n    The expected value of a single binomial trial is probability times trials.\n    The expected value for n trials is n probability times trials.\n    \"\"\"\n    return trials*frequency\n\ndef frequency_probability_to_variance(trials, frequency):\n    \"\"\"\n    The variance of a single binomial trial is probability times (1-probability) times trials.\n    The variance for n trials is n probability times (1-probability) times trials.\n    \"\"\"\n    return trials*frequency*(1-frequency)\n\ndef frequency_probability_to_std_dev(trials, frequency):\n    \"\"\"\n   ", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(number_of_trials, number_of_success_events, probability_of_success):\n    result = (probability_of_success ** number_of_success_events) * ((1 - probability_of_success) ** (number_of_trials - number_of_success_events))\n    return result\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(trials, successes, prob):\n    \"\"\"\n    Computes binomial probability\n    \"\"\"\n    return (prob ** successes) * ((1.0 - prob) ** (trials - successes))\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    if k > n:\n        return 0\n    elif k < 0:\n        return 0\n    elif p >= 1:\n        return 1\n    elif k == 0:\n        return 1\n    else:\n        return binomial_probability(n, k-1, p) * p + binomial_probability(n, k-1, p) * (1-p)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    p = p ** k * (1-p) ** (n - k)\n    return p\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tup_list):\n    \"\"\"\n    Insertion sort\n    \"\"\"\n    for i in range(1,len(tup_list)):\n        j = i\n        while j > 0 and tup_list[j][-1] < tup_list[j-1][-1]:\n            tup_list[j], tup_list[j-1] = tup_list[j-1], tup_list[j]\n            j -= 1\n    return tup_list\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n\treturn sorted(tuples, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n  \"\"\"\n  Returns a list of tuples sorted by the last element\n  \"\"\"\n  return sorted(tuples, key=lambda t: t[1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(t):\n    return sorted(t, key = lambda tup: tup[-1], reverse = False)\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(list_tuple):\n\tsorted_list = sorted(list_tuple, key=lambda x:x[1])\n\treturn sorted_list\n\ndef main():\n\tprint(sort_tuple([(1, 3), (3, 2), (2, 1)]))\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(t):\n    return sorted(t, key = lambda x: x[1])\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda tup: tup[1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tup_lst):\n    tup_lst.sort(key=lambda tup: tup[1], reverse=True)\n    return tup_lst\n\n#assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tup_list):\n    return sorted(tup_list, key=lambda x: x[-1])\n\ndef main():\n    tests = []\n    tests.append( ([(1, 3), (3, 2), (2, 1)], [(2, 1), (3, 2), (1, 3)]) )\n    tests.append( ([(5, 1), (4, 2), (3, 3), (1, 4), (1, 2), (4, 2), (4, 5)], [(4, 5), (4, 2), (3, 3), (2, 4), (1, 4), (1, 2), (5, 1)]) )\n    tests.append( ([(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 3), (4, 3), (1, 3), (2, 3), (3, 4), (4, 4), (1, 4)], [(1, 4), (2, 4), (3, 4), (1, 3), (2, 3), (1, 2), (3, 2), (4, 3), (3, 1), (2, 1), (1, 1)]) )\n    tests.append( ([(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 3), (4, 3), (1, 3), (2, 3), (3, 4), (4, 4), (1, 4)], [(1, 4), (2, 4), (3, 4), (1, 3), (2, 3), (1, 2), (3, 2), (4, 3), (3,", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(lst):\n    return sorted(lst, key=itemgetter(2))\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    \"Pentagon area calculator\"\n    return 0.5 * (n * (3 * n - 1) / 2)\n\n# +\n# Test Case for area_pentagon\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    \"\"\"\n    Calculate the area of a pentagon\n    \"\"\"\n    if n % 2 != 0:\n        raise ValueError(\"The number of sides must be even!\")\n    if n < 5:\n        raise ValueError(\"The number of sides must be at least 5!\")\n    return 0.5 * n * (n-3) * (2**n - 2**(n-4))\n\n# Test", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\nimport math\n\ndef area_pentagon(n):\n    s = n*(n-1)\n    return 0.5*s*(s-1)*(s+1)/(s*(s-2)*(s+2))\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    \"\"\"\n    Input: n >= 3\n    Output: area of a pentagon\n    \"\"\"\n    return (1.0/2.0)*(n-2)*(3*(n-2)**2)\n\n#assert area_pentagon(5)==43.01193501472417\n#assert area_pentagon(2)==0\n#assert area_pentagon(3)==7.85\n#assert area_pentagon(4)==10.759999999999999\n\ndef test_area_pentagon():\n    for n in range(3,6):\n        print(area_pentagon(n))\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return n*5*math.sqrt(3)/2\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    \"\"\"\n    Compute the area of a pentagon with n sides.\n    \"\"\"\n    # The area of a pentagon is the sum of the areas of the triangles at the vertices\n    area=0\n    for i in range(n):\n        area=area+(i*(i+1)/2)*0.5\n    return area\n\ndef test_area_pentagon():\n    \"\"\"\n    Test the area_pentagon function.\n    \"\"\"\n    assert area_pentagon(5)==43.01193501472417\n\ndef test_area_pentagon():\n    \"\"\"\n    Test the area_pentagon function.\n    \"\"\"\n    assert area_pentagon(5)==43.01193501472417", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(side_length):\n    return (5/2)*side_length*side_length\n\ndef main():\n    print(area_pentagon(5))\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    assert n>0\n    return (2/5)*n*(3*n-1)*math.sqrt(5)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return n*(3*n*n/4)\n\n\ndef get_angle(x,y):\n    \"\"\"\n    return angle of point(x,y)\n    \"\"\"\n    return np.arctan2(y,x)\n\n\ndef get_angle_list(x,y):\n    \"\"\"\n    return angle of point(x,y)\n    \"\"\"\n    angle = []\n    for i in range(len(x)):\n        angle.append(get_angle(x[i],y[i]))\n    return angle\n\n\ndef get_angle_histogram(x,y,bins):\n    \"\"\"\n    return histogram of angle\n    \"\"\"\n    angle_list = get_angle_list(x,y)\n    hist, bins = np.histogram(angle_list, bins=bins)\n    return hist, bins\n\n\ndef get_angle_histogram_width(x,y,bins):\n    \"\"\"\n    return histogram of angle\n    \"\"\"\n    angle_list = get_angle_list(x,y)\n    hist, bins = np.histogram(angle_list, bins=bins)\n    width = 0.5*(bins[1:] + bins[:-1])\n    return hist, bins, width\n\n\ndef get_angle_hist_panda(x,y,bins):\n    \"\"\"\n    return histogram of angle\n    \"\"\"\n    angle_list = get_angle_list(x,y)\n    hist, bins = np.histogram(angle_list, bins=bins)\n    return pd.DataFrame({'angle':hist, 'bins':bins})\n\n\ndef get_angle_hist_panda_width(x,y,bins):\n    \"\"\"\n    return histogram of angle\n    \"\"\"\n    angle_list = get_angle_list(x,y)\n    hist, bins = np.histogram(angle_list, bins=bins)\n    width = 0.5*(bins[1:] + bins[:-1])\n    return pd.DataFrame({'angle':hist, 'bins':bins, 'width':width})\n\n\ndef get_angle_hist_panda_cut(x,y,bins):\n    \"\"\"\n    return histogram of angle\n    \"\"\"\n    angle_list = get", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    from math import pi\n    return 0.5 * n * (n - 3) * pi\n\n\ndef area_pentagon_optimized(n):\n    from math import pi\n    return 0.5 * n * (n - 3) * pi\n\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(x,a):\n    b=[]\n    for i in range(len(a)):\n        if a[i]>x:\n            b.append(a[i])\n    return len(b)\n\n\n# +", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    # your code goes here\n    print(sorted(arr))\n    print(arr.count(arr[0]))\n    return arr.count(arr[0])\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n, arr):\n    freq_arr = {}\n    for x in arr:\n        if x in freq_arr:\n            freq_arr[x] += 1\n        else:\n            freq_arr[x] = 1\n    return max(freq_arr.values())", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,l):\n    \"\"\"\n    Input: \n    n: int\n    l: list of integers\n\n    Output: int\n\n    Returns: the frequency of largest value in the array\n    \"\"\"\n    freq_dict = {}\n    for i in l:\n        if i not in freq_dict.keys():\n            freq_dict[i] = 0\n        freq_dict[i] += 1\n    key = max(freq_dict.keys())\n    return freq_dict[key]\n\n\n# assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n# assert frequency_Of_Largest(5,[1,2,3,4,4,5]) == 1\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(num_array):\n  \"\"\"\n  Method to find the frequency of the largest value in a given array.\n  :param num_array: An array to be used in the method\n  :return: Frequency of the largest value\n  \"\"\"\n  count = 0\n  for i in range(len(num_array)):\n    if i == 0:\n      pass\n    elif i == len(num_array)-1:\n      pass\n    else:\n      if num_array[i] == max(num_array[i-1],num_array[i+1]):\n        count += 1\n  return count\n\n#print(frequency_Of_Largest(5,[1,2,3,4,4]))\n\ndef mid_Point_Of_Two_Sorted_Arrays(array_1,array_2):\n  \"\"\"\n  Method to find the mid-point of two sorted arrays.\n  :param array_1: First array in the method\n  :param array_2: Second array in the method\n  :return: Mid-point of two sorted arrays\n  \"\"\"\n  first_half = 0\n  second_half = 0\n  while first_half != len(array_1) and second_half != len(array_2):\n    if array_1[first_half] < array_2[second_half]:\n      first_half += 1\n    else:\n      second_half += 1\n  return [array_1[first_half],array_2[second_half]]\n\n#print(mid_Point_Of_Two_Sorted_Arrays([1,2,3,4],[4,5,6,7,8]))\n\ndef join_Two_Sorted_Arrays_At_Same_Position(array_1,array_2):\n  \"\"\"\n  Method to join two sorted arrays at the same position.\n  :param array_1: First array in the method\n  :param array_2: Second array in the method\n  :return: Joined arrays\n  \"\"\"\n  new_array = []\n  counter = 0\n  while counter < len(array_1):\n    if counter == 0:\n      new_array.append(", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(array,n):\n    max_value=0\n    count=0\n    for i in range(0,n):\n        if array[i]>max_value:\n            max_value=array[i]\n            count=1\n        else:\n            count+=1\n    return count\n\n#Driver Code\n#User Input\narray=[1,2,3,4,4]\nn=len(array)", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(array):\n    max = array[0]\n    count = 1\n    for i in range(len(array)):\n        if array[i] > max:\n            max = array[i]\n            count = 1\n        elif array[i] == max:\n            count = count + 1\n    return count\n\n# Test case", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(len,arr):\n    if len == 0:\n        return 0\n    arr.sort()\n    return len - arr.count(arr[-1])\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    arr.sort()\n    temp = arr[0]\n    freq = 0\n    for i in range(len(arr)):\n        if arr[i] == temp:\n            freq += 1\n        else:\n            if freq == n:\n                break\n            temp = arr[i]\n            freq = 1\n    return freq\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(size,arr):\n    freq = 0\n    max = max(arr)\n    for i in range(size):\n        if arr[i] == max:\n            freq += 1\n    return freq\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef extract_symmetric(tup_list: Tuple[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n\n    Args:\n        tup_list (Tuple[Tuple[int, ...]]): tuple list\n\n    Returns:\n        Tuple[Tuple[int, ...], ...]: list of tuples with symmetric pairs\n    \"\"\"\n    sorted_tup_list = sorted(tup_list)\n    pairs = []\n    for i in range(len(tup_list) - 1):\n        for j in range(i+1, len(tup_list)):\n            if sorted_tup_list[i] == sorted_tup_list[j]:\n                pairs.append(sorted_tup_list[i])\n    return tuple(pairs)\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tup_list):\n    sym_list = []\n    for a, b in tup_list:\n        if (a, b) in sym_list:\n            sym_list.remove((a, b))\n        else:\n            sym_list.append((a, b))\n    return sym_list", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(l):\n    \"\"\"\n    It is a simple algorithm for solving the task:\n        - each element is checked if it is in the second part of the list (if yes, the element is in a pair)\n        - pairs are collected in a set\n        - pairs are removed from the list and returned\n    \"\"\"\n\n    # Create an empty set\n    result = set()\n\n    # Check all elements in the first part of the list\n    for element in l:\n\n        # If the element is in the second part of the list\n        if element in l[1:]:\n\n            # Add the element to the set\n            result.add(element)\n\n    # Return the set of pairs\n    return result\n\n\n# Tests", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(a_tuple_list):\n\tsymmetric_pairs = set()\n\t\n\tfor i in range(len(a_tuple_list)):\n\t\tfor j in range(i + 1, len(a_tuple_list)):\n\t\t\tif a_tuple_list[i] == a_tuple_list[j]:\n\t\t\t\tsymmetric_pairs.add((a_tuple_list[i], a_tuple_list[j]))\n\t\n\treturn symmetric_pairs\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuplist):\n\t# first find all the different pairs\n\t# next check if the pairs are symmetric\n\t# and only then add them to a set and return the set\n\t# for each pair\n\tallpairs = []\n\tfor i in range(len(tuplist)):\n\t\tfor j in range(i+1, len(tuplist)):\n\t\t\tpair = (tuplist[i], tuplist[j])\n\t\t\tif pair in allpairs:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tallpairs.append(pair)\n\tsymm_pairs = []\n\tfor pair in allpairs:\n\t\tif pair in tuplist:\n\t\t\tsymm_pairs.append(pair)\n\treturn set(symm_pairs)\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\nfrom typing import List\n\ndef extract_symmetric(pairs: List[tuple[int, int]]) -> set[tuple[int, int]]:\n    \"\"\"\n    >>> extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]) == {(8, 9), (6, 7)}\n    \"\"\"\n\n    # Example\n    # Given: [(6,7), (2,3), (7,6), (9,8), (10,2), (8,9)]\n    # Output: { (8,9), (6,7) }\n    return set(pairs)\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(lst):\n    from collections import defaultdict\n    d = defaultdict(set)\n    for x, y in lst:\n        d[x].add(y)\n        d[y].add(x)\n    return d.items()\n\n# Tests", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(list_tup):\n    set_tup = set(list_tup)\n    return set_tup\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuple_list):\n    # Your code here\n    return {(x, y) for x, y in tuple_list if x == y}\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tupla_list):\n    return [tuple(sorted(ele)) for ele in tupla_list if ele != (ele[0], ele[1])]\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a, n, k):\n    return (a**(k-1))*(n-1) + a**k - a\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,n,r):\n    if n==1:\n        return a\n    else:\n        return a*(r**n)+sum_gp(a,n-1,r)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(start,n,increment):\n    total=start\n    for i in range(n-1):\n        total=total+increment**i\n    return total\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(first, last, step):\n    series = first\n    while series <= last:\n        series += step\n        yield series\n    ", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,n,r):\n    total = 0\n    for x in range(n):\n        total += a**x*r\n    return total\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,n,r):\n    return a*(r**(n-1))\n\n\nsum_gp(1,5,2)\n\n\n# +", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, b, d):\n    \"\"\"\n    :param a: starting value\n    :param b: ending value\n    :param d: step size\n    :return: sum of geometric progression series\n    \"\"\"\n    return (b**a - 1) // (b - d)\n\n\ndef sum_gp_iter(a, b, d):\n    \"\"\"\n    :param a: starting value\n    :param b: ending value\n    :param d: step size\n    :return: sum of geometric progression series\n    \"\"\"\n    i, sum_i = a, 0\n    while i < b:\n        sum_i += d\n        i += 1\n    return sum_i\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,b,n):\n    \"\"\"\n    a, b, n (integer)\n    return sum of geometric progression\n    >>>sum_gp(1,5,2)==31\n    True\n    \"\"\"\n    sum_ = 0\n    if n <= 0:\n        return sum_\n    for i in range(1,n+1):\n        sum_ += a**i\n    return sum_\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,n,d):\n    s = a*(d**n)/((d-1)**n)\n    return s\n\n\nsum_gp(1,5,2)\n\n\n# #### 19. Write a function to calculate the roots of a quadratic equation.\n\ndef quadratic(a,b,c):\n    root1 = (-b+sqrt(b**2-4*a*c))/(2*a)\n    root2 = (-b-sqrt(b**2-4*a*c))/(2*a)\n    return root1,root2\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,b,n):\n    total = 0\n    for i in range(n):\n        total += (a*pow(b,i))\n    return total\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(array, key):\n    left = 0\n    right = len(array) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == key:\n            return True\n        elif array[mid] < key:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\ndef test_binary_search():\n    array = [1,2,3,5,8]\n    assert binary_search(array, 6) == False\n    assert binary_search(array, 5) == True\n    assert binary_search(array, 2) == True\n    assert binary_search(array, 1) == True\n    assert binary_search(array, 3) == True\n    assert binary_search(array, 8) == True\n    assert binary_search(array, 4) == False", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, target):\n    # arr: list of elements\n    # target: element to search for\n    \n    def helper(low, high):\n        if low > high:\n            return -1\n        mid = low + (high - low) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            return helper(mid+1, high)\n        else:\n            return helper(low, mid-1)\n    return helper(0, len(arr)-1) >= 0\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    '''\n    >>> arr = [1,2,3,5,8]\n    >>> binary_search(arr, 6)\n    False\n    >>> binary_search(arr, 5)\n    True\n    '''\n    return True if arr[0] <= x <= arr[-1] else False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, key):\n    low = 0\n    high = len(arr) - 1\n    middle = (low + high) // 2\n\n    while low <= high:\n        if arr[middle] == key:\n            return True\n        if arr[middle] < key:\n            low = middle + 1\n        else:\n            high = middle - 1\n\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, x):\n    \"\"\"\n    :param arr: Array\n    :param x: Element to find\n    :return: Boolean\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, element):\n    \"\"\"\n    Write a function to search an element in the given array by using binary search.\n    assert binary_search([1,2,3,5,8], 6) == False\n    \"\"\"\n    start = 0\n    end = len(array)-1\n    while start <= end:\n        mid = start + (end - start)//2\n        if array[mid] < element:\n            start = mid+1\n        elif array[mid] > element:\n            end = mid-1\n        else:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\nfrom time import time\n\n\ndef binary_search(array, key):\n    start, end, mid = 0, len(array) - 1, 0\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if key == array[mid]:\n            return True\n        elif key < array[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return False\n\n\ndef main():\n    array = [1,2,3,5,8]\n    key = 6\n    print(binary_search(array, key))\n    print(time())\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(array, element):\n    start = 0\n    end = len(array) - 1\n    mid = None\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == element:\n            return True\n        elif array[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return False", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, n):\n    left = 0\n    right = len(arr)-1\n    middle = 0\n    while left <= right:\n        middle = (left+right)/2\n        if arr[middle] == n:\n            return True\n        elif arr[middle] < n:\n            left = middle+1\n        else:\n            right = middle-1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, target):\n    \"\"\"\n    Args:\n        arr - array\n        target - integer\n\n    Returns:\n        boolean\n\n    Complexity:\n        O(log n)\n    \"\"\"\n    l = 0\n    r = len(arr) - 1\n\n    while l <= r:\n        m = l + (r - l) // 2\n        if arr[m] == target:\n            return True\n        if arr[m] > target:\n            r = m - 1\n        else:\n            l = m + 1\n\n    return False"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(t):\n    return int(''.join(str(bit) for bit in t), 2)\n\n\n# Tests", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(bits):\n    \"\"\"\n    Convert the given binary tuple to integer.\n\n    >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1))\n    105\n    \"\"\"\n    ans = 0\n    for bit in bits:\n        ans = ans * 2 + int(bit)\n    return ans\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef binary_to_integer(bits):\n    \"\"\"\n    Convert the given binary tuple to integer.\n\n    >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1))\n    105\n    \"\"\"\n    ans = 0\n    for bit in bits:\n        ans = ans * 2 + int(bit)\n    return ans\n\n# Enter the binary tuple\nbits = (1, 1, 0, 1, 0, 0, 1)\n\n# Calling the function", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(b):\n    if len(b) == 0:\n        return 0\n    return int(b[0], 2) + 256 * binary_to_integer(b[1:])\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    # convert from binary to decimal\n    num = 0\n    for i in range(len(binary)):\n        num += (2 ** (len(binary) - 1 - i)) * (binary[i] - '0')\n    return num\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(t):\n    return int(t[0], 2) + 256 * binary_to_integer(t[1:])\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\nfrom typing import Tuple\n\n\ndef binary_to_integer(binary: Tuple[int]) -> int:\n    result = 0\n    for i, n in enumerate(reversed(binary)):\n        result += n * 2 ** i\n    return result\n\n\ndef test_binary_to_integer():\n    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == 105\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary_tuple):\n    return int(''.join(str(b) for b in binary_tuple), 2)\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(bin_tup):\n    # 127\n    # 1023\n    # 4095\n    # 32767\n\n    # 255\n    # 15\n    # 16\n    # 65535\n\n    # 16777215\n    # 16777214\n    # 65536\n    # 256\n    # 65535\n    # 1048575\n    # 4096\n    # 262143\n\n    return int(\"\".join([str(digit) for digit in bin_tup]), 2)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    result = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            result += 2 ** (len(binary) - 1 - i)\n    return str(result)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary):\n    result = 0\n    for bit in binary:\n        result += int(bit) * (2 ** len(binary) - 1 - binary.index(bit))\n\n    return str(result)\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]', '', s)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(str):\n    return re.sub(\"[^A-Z]\", \"\", str)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(s):\n    \"\"\"Return a string without lowercase characters.\"\"\"\n    return ''.join(c for c in s if c.isupper())", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(s):\n    return ''.join([x for x in s if x.isupper()])", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    result = \"\"\n\n    for i, char in enumerate(string):\n        if not char.islower():\n            result += char\n        else:\n            if i == 0 or char.isupper():\n                result += char\n\n    return result\n\ndef remove_lowercase2(string):\n    return \"\".join([char for char in string if char.isupper()])\n\ndef remove_lowercase3(string):\n    return \"\".join([char for char in string if not char.islower()])\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(s):\n    \"\"\"Remove lowercase substrings.\"\"\"\n    # Replace all lowercase characters with empty string\n    return re.sub(r'[a-z]', '', s)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    return re.sub(r\"[a-z]+\", \"\", s)\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"KDeoALOklOOHserfLoAJSIskdsf\") == \"KDALOOOHLAJSI\"\n    assert remove_lowercase(\"a\") == \"a\"\n    assert remove_lowercase(\"\") == \"\"\n    assert remove_lowercase(\"myNameIsJohnDoe\") == \"myNameIsJohnDoe\"\n    assert remove_lowercase(\"123\") == \"123\"\n\ndef print_removed_lowercase_strings(s):\n    print(\"removed lowercase strings: \", end = '')\n    for i in range(len(s) - 1, -1, -1):\n        print(s[i], end = '')\n    print()", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(s):\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', s)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(strng):\n    return re.sub(r'a', r'', strng)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    # Your code here\n    \n    return string.translate(str.maketrans(' ','', string.lower())).strip()\n\n\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nfrom collections import deque\n\ndef heap_queue_smallest(numbers,k):\n    # put numbers in a min heap queue\n    # to make it a max heap use -numbers instead of numbers\n    numbers_queue = deque(numbers)\n    numbers_queue.sort()\n\n    return numbers_queue[:k]\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(nums, k):\n    if not nums:\n        return nums\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n    for i in range(k):\n        heapq.heappop(heap)\n    return heap\n\n#assert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25]", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(nums,k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    pq = [None] * len(nums)\n    min_index = -1\n    for i,num in enumerate(nums):\n        pq[i] = (num,i)\n    \n    heapq.heapify(pq)\n    for i in range(len(nums)-k):\n        min_index = heapq.heappop(pq)[1]\n        yield nums[min_index]\n\n\ndef test_heap_queue_smallest():\n    assert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(L,n):\n    h = minheap(L)\n    return h.smallest(n)\n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest( input_list, k ):\n    heap = []\n    for i in input_list:\n        heapq.heappush( heap, i )\n    result = []\n    for i in range(k):\n        result.append( heapq.heappop( heap ) )\n    return result\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest( num_list,k):\n    from heapq import heappush, heappop\n    result= []\n    if(k>len(num_list)):\n        print \"Error! k can't greater than length of list!\"\n        return None\n    if(k==0):\n        return None\n    heappush(result,num_list[0])\n    for i in range(1,len(num_list)):\n        heappush(result,num_list[i])\n        if(len(result)==k):\n            return result\n        heappop(result)\n    return result\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(L,k):\n    heap_q = []\n    for i in L:\n        heap_q.append(i)\n    heapq.heapify(heap_q)\n    ans = []\n    for i in range(k):\n        ans.append(heapq.heappop(heap_q))\n    return ans\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(nums,k):\n    # Create a heap of K smallest numbers from the given list\n    heap_list=[]\n    min_heap = Heap(k)\n    for num in nums:\n        min_heap.insert(num)\n        heap_list.append(min_heap.extract_min())\n    return heap_list\n\ndef main():\n    print(\"Enter list of numbers: \")\n    list_of_numbers = []\n    for _ in range(int(input())):\n        list_of_numbers.append(int(input()))\n    print(\"Enter k: \")\n    k = int(input())\n    print(heap_queue_smallest(list_of_numbers,k))\n    \nmain()", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n# def heap_queue_smallest(numbers,k):\n#     if len(numbers) <= 0:\n#         return numbers\n#     return heap_queue_smallest_k(numbers,k)\n\n# def heap_queue_smallest_k(numbers,k):\n#     if len(numbers) <= k:\n#         return numbers\n\n#     root = numbers[0]\n#     heap = [root]\n#     numbers.pop(0)\n#     for i in numbers:\n#         heapq.heappush(heap,i)\n#     for _ in range(len(heap)-k):\n#         heapq.heappop(heap)\n#     return heap[:k]\n\ndef heap_queue_smallest(numbers,k):\n    if len(numbers) <= 0:\n        return numbers\n    heap = []\n    for i in numbers:\n        heapq.heappush(heap,i)\n    for _ in range(len(heap)-k):\n        heapq.heappop(heap)\n    return heap[:k]\n\ndef heap_queue_smallest_k(numbers,k):\n    if len(numbers) <= k:\n        return numbers\n    root = numbers[0]\n    heap = [root]\n    numbers.pop(0)\n    for i in numbers:\n        heapq.heappush(heap,i)\n    for _ in range(len(heap)-k):\n        heapq.heappop(heap)\n    return heap[:k]\n\n\nnumbers = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nk = 3", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest( lst, n ):\n    n=n+1\n    result=[]\n    h=heapq.nlargest(n,lst)\n    for i in h:\n        result.append(i)\n    return result\n\n# def heap_queue_smallest( lst, n ):\n#     heap=heapq.nlargest(n,lst)\n#     result=[]\n#     for i in heap:\n#         result.append(i)\n#     return result\n\n# def heap_queue_smallest( lst, n ):\n#     heap=heapq.nlargest(n,lst)\n#     result=[]\n#     for i in heap:\n#         result.append(i)\n#     return result\n\n# def heap_queue_smallest( lst, n ):\n#     heap=heapq.nlargest(n,lst)\n#     result=[]\n#     for i in heap:\n#         result.append(i)\n#     return result\n\n# def heap_queue_smallest( lst, n ):\n#     heap=heapq.nlargest(n,lst)\n#     result=[]\n#     for i in heap:\n#         result.append(i)\n#     return result\n\n# def heap_queue_smallest( lst, n ):\n#     heap=heapq.nlargest(n,lst)\n#     result=[]\n#     for i in heap:\n#         result.append(i)\n#     return result\n\n# def heap_queue_smallest( lst, n ):\n#     heap=heapq.nlargest(n,lst)\n#     result=[]\n#     for i in heap:\n#         result.append(i)\n#     return result\n\n# def heap_queue_smallest( lst, n ):\n#     heap=heapq.nlargest(n,lst)\n#     result=[]\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r, h):\n    \"\"\"\n        The surface area of a cone is half the area of a right circular cylinder,\n        and half the area of a circular cylinder cut off by the cone's base.\n        The area of the right circular cylinder is (r^2*pi)*h\n        The area of the circular cylinder is (pi*r^2)*h\n        Half of the area of the circular cylinder is 0.5*(pi*r^2)*h\n        The area of the cone is the area of the right circular cylinder plus the\n        area of the circular cylinder minus the area of the circular cylinder cut off\n        by the cone's base.\n        The area of the circular cylinder cut off by the cone's base is the area of\n        a circular cylinder with radius (r/2) and height (h/2).\n        The area of the circular cylinder with radius (r/2) and height (h/2) is\n        ((pi*((r/2)**2))*h/2)\n        The area of the circular cylinder with radius (r/2) and height (h/2) is\n        (pi*r^2*h/4)\n        The area of the circular cylinder with radius (r/2) and height (h/2) is\n        (pi*r^2*h/(2*4))\n        The area of the circular cylinder with radius (r/2) and height (h/2) is\n        (pi*r^2*h/8)\n        The area of the circular cylinder with radius (r/2) and height (h/2) is\n        (pi*r^2*h/16)\n        The area of the circular cylinder with radius (r/2) and height (h/2) is\n        (pi*r^2*h/32)\n        The area of the circular cylinder with radius (r/2) and height (h/2) is\n        (pi*r^2*h/64)\n        The area of the circular cylinder with radius (r/2) and height (h/2) is", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n\treturn 3.14*r**2*h\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    >>> surfacearea_cone(5,12)==282.7433388230814\n    \"\"\"\n    return 3.14*radius**2*height/3\n\ndef test_surfacearea_cone():\n    \"\"\"\n    >>> test_surfacearea_cone()\n    \"\"\"\n    assert surfacearea_cone(1,1)==math.pi\n    assert surfacearea_cone(2,3)==5.235987755982989\n    assert surfacearea_cone(5,12)==282.7433388230814\n\ndef volume_cone(radius, height):\n    \"\"\"\n    >>> volume_cone(5,12)==101.78264368849556\n    \"\"\"\n    return 3.14*radius**2*height/3\n\ndef test_volume_cone():\n    \"\"\"\n    >>> test_volume_cone()\n    \"\"\"\n    assert volume_cone(1,1)==math.pi\n    assert volume_cone(2,3)==5.235987755982989\n    assert volume_cone(5,12)==101.78264368849556\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    >>> volume_cylinder(5,12)==133.31094265424317\n    \"\"\"\n    return 3.14*radius**2*height\n\ndef test_volume_cylinder():\n    \"\"\"\n    >>> test_volume_cylinder()\n    \"\"\"\n    assert volume_cylinder(1,1)==math.pi\n    assert volume_cylinder(2,3)==5.235987755982989\n    assert volume_cylinder(5,12)==133.31094265424317\n\ndef test_volume_ellipse():", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(h,r):\n    \"\"\"\n    >>> surfacearea_cone(5,12)==282.7433388230814\n    True\n    \"\"\"\n    pi = 3.14159\n    return pi * r**2 * h\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    pi=3.14159\n    return 1/3*pi*radius**2*height\n\ndef surfacearea_cylinder(radius,height):\n    pi=3.14159\n    return pi*radius**2*height\n\ndef volume_cylinder(radius,height):\n    pi=3.14159\n    return pi*radius**2*height**2\n\ndef main():\n    print(\"Volume of cylinder(5,3)==\",volume_cylinder(5,3))\n    print(\"Volume of sphere(4)==\",volume_sphere(4))\n    print(\"Surface area of cone(5,3)==\",surfacearea_cone(5,3))\n    print(\"Surface area of cylinder(5,3)==\",surfacearea_cylinder(5,3))\n\nmain()", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cone.\n    assert surfacearea_cone(5,12)==282.7433388230814\n    \"\"\"\n    pi=3.14\n    return pi*r**2*h\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    \"\"\"\n    Compute the surface area of a cone with radius r and height h\n    \"\"\"\n    return np.pi*r*r*h\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    return (1.0/3.0)*radius*radius*math.pi+(1.0/2.0)*height*height*math.pi\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    \"\"\"\n    Calculate the surface area of a cone of radius r and height h,\n    where the radius is the distance from the center of the circle\n    to the center of the cone, and the height is the length of\n    the line segment between the top of the cone and the bottom\n    of the cone\n    \"\"\"\n    from math import pi\n    from math import sqrt\n    # find the diameter of the circle\n    diameter = 2*radius\n    # find the height of the cone\n    h = height\n    # find the length of the segment connecting the top and bottom\n    l = h*sqrt(1+h**2/diameter**2)\n    # calculate the area of the top and bottom\n    area_top = pi * diameter**2 * h / 3\n    area_bottom = pi * diameter**2 * l / 3\n    # sum the two areas together\n    return area_top + area_bottom\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(h,r):\n    return 2.0*pi*h*r**2\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\nimport math\n\n\ndef gcd(m, n):\n    if m == 0:\n        return n\n    if n == 0:\n        return m\n    if m == n:\n        return m\n    if m > n:\n        m, n = n, m\n    if n % m == 0:\n        return m\n    return gcd(n % m, m)\n\n\ndef main():\n    print(gcd(12, 17))\n    print(gcd(17, 12))\n    print(gcd(0, 0))\n    print(gcd(24, 12))\n    print(gcd(10, 0))\n    print(gcd(24, 0))\n    print(gcd(100, 0))\n    print(gcd(0, 100))\n\n\nmain()", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(x, y):\n    # Find the greater of the two integers\n    if x > y:\n        x, y = y, x\n\n    # Find the remainder after division of x and y\n    while y:\n        x, y = y, x % y\n    return x\n\n\n# Test cases", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    if b > a:\n        return gcd(b - a, a)\n    return gcd(a - b, b)\n\n#Test cases", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef test_gcd():\n    assert gcd(12, 17) == 1\n    assert gcd(12, 15) == 3\n    assert gcd(15, 17) == 3\n    assert gcd(123, 124) == 1\n    print(\"Tests passed.\")\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of a and b.\n    a and b must be positive.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        a, b = b, a\n\n    while b:\n        a, b = b, a % b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a%b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    \"\"\"\n    >>> a, b = 12, 17\n    >>> gcd(a, b)\n    1\n    >>> a, b = 15, 20\n    >>> gcd(a, b)\n    5\n    >>> a, b = 20, 15\n    >>> gcd(a, b)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a%b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(num1, num2):\n    \"\"\"\n    Compute the greatest common divisor (gcd) of two positive integers.\n    \"\"\"\n    # Add a constraint to check if the inputs are numbers\n    if type(num1) is not int or type(num2) is not int:\n        raise ValueError(\"The inputs are not integers\")\n\n    # Add a constraint to check if the inputs are positive integers\n    if num1 <= 0 or num2 <= 0:\n        raise ValueError(\"The inputs are not positive integers\")\n\n    # Add a constraint to check if the inputs are greater than 0\n    if num1 <= 0 or num2 <= 0:\n        raise ValueError(\"The inputs are not positive integers\")\n\n    # Greatest common divisor (gcd) is the greatest positive integer that\n    # divides both the input integers\n    return max(num1, num2)\n\n\n# Test code for the function\nnum1 = 12\nnum2 = 17", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n\tif a == 0:\n\t\treturn b\n\tif b == 0:\n\t\treturn a\n\tif a > b:\n\t\ttemp = a\n\t\ta = b\n\t\tb = temp\n\twhile a > 0:\n\t\tif a % b == 0:\n\t\t\treturn b\n\t\telse:\n\t\t\ta = a - b\n\treturn b\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    #write your code here\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\n#print(gcd(12, 17))\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    Takes radius as an argument\n    Returns the diameter of circle\n    \"\"\"\n    return 2*radius", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    \"\"\"\n    Return the diameter of a circle.\n    \"\"\"\n    return 2 * radius\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(n):\n    \"\"\"\n    >>> diameter_circle(10)\n    20\n    \"\"\"\n    d = 0\n    for i in range(n):\n        d += i\n    return d\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    :param radius:\n    :return:\n    \"\"\"\n    return 2*radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n#------------------------------------------------\n#   a = 0; b = 0; c = 0;\n#------------------------------------------------\ndef diameter_circle(r):\n    return 2*r\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    Calculates the diameter of a circle.\n    \n    Parameters\n    ----------\n    radius : int\n        The radius of the circle.\n    \n    Returns\n    -------\n    diameter : int\n        The diameter of the circle.\n    \"\"\"\n    diameter = 2 * radius\n    \n    return diameter\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(r):\n    return 2*r\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    pass\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n# answer\ndef diameter_circle(radius):\n\t\"\"\"\n\tFind the diameter of a circle.\n\t\"\"\"\n\treturn 2*radius\n\n# test case", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return radius*2\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    # your code here\n    ret_str = ''\n    for word in lst:\n        ret_str += word + ' '\n    return ret_str.strip()\n\ndef test_concatenate_elements():\n    # assert your function here\n    assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n    ", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(a_list):\n    \"\"\"\n    Concatenates a list of elements\n    \"\"\"\n    my_string = \"\"\n    for element in a_list:\n        my_string += element + \" \"\n    return my_string\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(lst):\n    s = ''\n    for i in lst:\n        s+=i\n    return s\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(li):\n    return ' '.join(li)\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(L):\n    result = \"\"\n    for item in L:\n        result += item+\" \"\n    return result[:-1]\n\n\ndef test_concatenate_elements():\n    L = ['hello', 'there', 'have', 'a', 'rocky', 'day']\n    print(concatenate_elements(L))\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(l):\n    return ' '.join(l)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list_of_strings):\n    \"\"\"Concatenate list of strings into a string\"\"\"\n    return ''.join(list_of_strings)\n#Test Case", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(strings):\n  return ' '.join(strings)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(l):\n    return '  '.join(l)\n\n# use assert statements to check your code works", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(list_of_strings):\n    return '  '.join(list_of_strings)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num_1,num_2):\n    div_sum = 0\n    for i in range(1,num_1+1):\n        if num_2%i==0:\n            div_sum+=i\n    if div_sum == num_2:\n        return num_2\n    return div_sum\n\n\nnWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1,num2):\n    if num2 == 0:\n        return 0\n    elif num1 < num2:\n        return num_comm_div(num1,num2-num1)\n    elif num1 > num2:\n        return num_comm_div(num1-num2,num2)\n    else:\n        return num1\n\nnum_comm_div(2,4)\n\n\n# +", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n    \"\"\"\n    Returns the number of common divisors between two numbers.\n    \"\"\"\n    if b == 0:\n        return 0\n    if a == b:\n        return 1\n    if a == 0:\n        return 0\n    for i in range(1, b):\n        if a % i == 0:\n            return i + num_comm_div(b, i)\n    return 0\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1, num2):\n    comm_div = 1\n    while True:\n        if (num1 % comm_div == 0) and (num2 % comm_div == 0):\n            return comm_div\n        else:\n            comm_div += 1\n\nnum1 = 10\nnum2 = 25", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num, div):\n    \"\"\"\n    >>> num_comm_div(2,4)\n    2\n    >>> num_comm_div(6,12)\n    6\n    \"\"\"\n    if num == 0 or num == 1:\n        return 0\n    if num == div or num == div + 1:\n        return div\n    if num % div == 0:\n        return div\n    if num % div == 1:\n        return num_comm_div(num - div, div)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n    assert a and b\n\n    c = 0\n\n    while a != 0 and b != 0:\n        if b == 0:\n            b = a\n            a = 0\n        elif a == 0:\n            a = b\n            b = 0\n        elif a == b:\n            a = 0\n            b = 0\n        elif a > b:\n            b = b - a\n        else:\n            a = a - b\n\n    return c\n\n#assert num_comm_div(10,20) == 2\n#assert num_comm_div(10,0) == 10\n#assert num_comm_div(0,10) == 10", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a, b):\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    while b != 0:\n        a, b = b, a%b\n    return a\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(n,k):\n    if k > n:\n        return 0\n    while k > 0:\n        if n % k == 0:\n            return k\n        k -= 1\n    return 0\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(m, n):\n    if m == 0 or n == 0:\n        return 0\n    return m if m == n else min(num_comm_div(m, n%m), num_comm_div(n, m%n))\n\ndef test_num_comm_div():\n    assert num_comm_div(2,4) == 2\n    assert num_comm_div(3,6) == 3\n    assert num_comm_div(6,3) == 3\n    assert num_comm_div(5,2) == 1\n    assert num_comm_div(11, 13) == 3\n    assert num_comm_div(10, 14) == 2\n    assert num_comm_div(10, 11) == 10\n\ndef is_prime(n):\n    \"\"\"\n    Write a python function to check if a number is prime or not.\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(4) == False\n    \"\"\"\n    if n < 2:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(4) == False\n    assert is_prime(5) == True\n    assert is_prime(6) == True\n    assert is_prime(7) == False\n    assert is_prime(8) == True\n    assert is_prime(9) == True\n    assert is_prime(10) == False\n    assert is_prime(11) == True\n    assert is_prime(12) == False\n    assert is_prime(13) == False\n    assert is_prime(14) == True\n   ", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1,num2):\n    if num1 == 0:\n        return num2\n    elif num2 == 0:\n        return num1\n    else:\n        if num1%num2 == 0:\n            return num2\n        elif num2%num1 == 0:\n            return num1\n        else:\n            if num1 < num2:\n                return num_comm_div(num1,num1-num2)\n            else:\n                return num_comm_div(num2,num2-num1)\n\n# Test cases"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x, y):\n    #your code here\n    return None\n\n#test cases", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x,y):\n    return x%y\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a%b\n\ndef main():\n    print(find(3,3))\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    while b != 0:\n        a,b = b, a%b\n    return a\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(num_1, num_2):\n    \"\"\"\n    Write a python function to find remainder of two numbers.\n    :param num_1: first number\n    :param num_2: second number\n    :return: remainder of two numbers\n    \"\"\"\n    if num_1 > num_2:\n        return num_1 - num_2\n    else:\n        return num_2 - num_1\n\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(num1, num2):\n    return (num1 % num2)", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x, y):\n    return (x-y)%y\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a%b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x, y):\n    return x % y\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a % b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(numbers):\n    '''\n    Takes a list of numbers and returns a list of numbers that are the sum\n    of every consecutive pair of numbers\n    '''\n    result = []\n    for i, num in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            result.append(num + numbers[j])\n    return result\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(lst):\n    def helper(lst):\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return [lst[0]]\n        if len(lst) == 2:\n            return [lst[0]+lst[1]]\n        return [lst[0]+lst[1]] + helper(lst[2:])\n    return helper(lst)", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(l):\n    return [x + y for x in l for y in l if x + 1 == y]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(l):\n\t\"\"\"\n\t\"\"\"\n\tl.sort()\n\tn = len(l)\n\tresult = []\n\tfor i in range(n-1):\n\t\tresult.append(l[i]+l[i+1])\n\treturn result\n\ndef add_consecutive_nums(l):\n\t\"\"\"\n\t\"\"\"\n\t#return sorted(list(range(len(l)) + 1))\n\treturn sorted(list(range(1, len(l)+1)))\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    if not nums or len(nums)==1:\n        return nums\n    return add_consecutive_nums(nums[1:]) + [nums[0]+nums[-1]]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    n = len(nums)\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            result.append(nums[i] + nums[j])\n    return result\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(L):\n    res = []\n    for i in range(len(L)-1):\n        res.append(L[i]+L[i+1])\n    return res\n\n\n# print(add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]))\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    return [num+num+1 for num in nums]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    new = []\n    for i in range(len(nums)):\n        new.append(nums[i] + nums[i+1])\n    return new\n\ndef test_add_consecutive_nums():\n    print(add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]))\n    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]) == [2, 4, 7, 8, 9, 11, 13]\n    assert add_consecutive_nums([1, 3, 5, 7]) == [4]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(lst):\n    res = []\n    for i in range(len(lst)):\n        if i == 0:\n            res.append(lst[i])\n        elif i == len(lst) - 1:\n            res.append(lst[i] + lst[i - 1])\n        else:\n            res.append(lst[i] + lst[i - 1] + lst[i + 1])\n    return res"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    \"\"\"\n    Returns the sum of first n natural numbers.\n\n    Args:\n        n (int): Sum of first n natural numbers.\n\n    Returns:\n        int: Sum of first n natural numbers.\n    \"\"\"\n    return n * (n+1) * (n+2)//3\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    Args:\n    n(int): Number of terms in series\n    Returns:\n    int: Sum of first n natural numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_Of_Series(n-1)\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"Calculate the sum of the first n natural numbers\"\"\"\n    # initialize result to 0\n    result = 0\n    for number in range(1, n+1):\n        result += number**3\n    return result\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return (sum_Of_Series(n-1) + sum_Of_Series(n-2)) * n\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n natural numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (n**3 + sum_Of_Series(n-1))\n\ndef test_sum_Of_Series():\n    assert sum_Of_Series(5) == 225\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    s = 0\n    for i in range(1, n+1):\n        s += i**3\n    return s\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    finds the sum of first n numbers\n    \"\"\"\n    series_sum = 0\n    for i in range(1, n+1):\n        series_sum += i**3\n    return series_sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    return (n*(n+1)*(n+2))/6", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    return (n ** 3) + 4 * (n ** 2) + 6 * n + 3\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return n**3 + sum_Of_Series(n-1)\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    counter = 0\n    while counter < len(arr):\n        zero = counter\n        while zero < len(arr) and arr[zero] == 0:\n            zero += 1\n        if zero == len(arr):\n            break\n        for i in range(zero, len(arr)-1):\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        counter += 1\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    first_zero = arr.index(0)\n    arr[:first_zero] = arr[first_zero + 1:]\n    arr.pop()\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    \"\"\"\n    Inplace solution.\n\n    :param arr: A list of integers.\n    :return: A list of integers.\n    \"\"\"\n\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(a):\n    return a[:] # create a copy\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    ret = []\n    i, j = 0, 0\n    while j < len(arr):\n        if arr[j] != 0:\n            ret.append(arr[j])\n            j += 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n    return ret\n\n\ndef test_re_order():\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\n\ndef test_re_order_with_nested_if():\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(num):\n    #if num is None:\n    #    return None\n\n    first = num[0]\n    last = num[len(num) - 1]\n    i = 0\n    j = len(num) - 1\n\n    while i < j:\n        if num[j] == 0:\n            j -= 1\n        else:\n            num[i], num[j] = num[j], num[i]\n            i += 1\n            j -= 1\n    num[i], num[j] = num[j], num[i]\n    return num\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    return sorted(arr, key=lambda x: x[1], reverse=True) + sorted(arr, key=lambda x: x[0], reverse=True)\n\n# test cases", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(a):\n    \"\"\"\n    Write a function to move all zeroes to the end of the given array.\n    \"\"\"\n    return [n for n in a if n != 0] + [n for n in a if n == 0]\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    \"\"\"\n    The basic approach to this problem is to traverse the array from\n    the back and swap the current element with the next element in the\n    array. This is guaranteed to swap the zero with the last element in the\n    array.\n    \"\"\"\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] == 0:\n            arr[i], arr[-1] = arr[-1], arr[i]\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n\tzero_pos = []\n\tfor i in range(len(arr)):\n\t\tif arr[i] == 0:\n\t\t\tzero_pos.append(i)\n\tfor j in range(len(arr) - 1, -1, -1):\n\t\tif arr[j] != 0:\n\t\t\tarr[j], arr[zero_pos.pop()] = arr[zero_pos.pop()], arr[j]\n\treturn arr\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\n# solution one\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\n\n# solution two\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if n == 0 or k == 0 or n == k:\n        return 1\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\n\n# solution three\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if n == 0 or k == 0 or n == k:\n        return 1\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\n\n# solution four\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\n# solution\ndef permutation_coefficient(n, k):\n    if k > n or k < 1:\n        return 0\n    elif k == 1:\n        return n\n    elif k == 2:\n        return n*(n-1)/2\n    else:\n        return permutation_coefficient(n-1, k-1)*n/k\n\n\n# solution 2\ndef permutation_coefficient(n, k):\n    if k > n or k < 1:\n        return 0\n    elif k == 1:\n        return n\n    elif k == 2:\n        return n*(n-1)/2\n    else:\n        return permutation_coefficient(n-1, k-1)*n/k", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    \"\"\"\n    n: int\n    k: int\n    \"\"\"\n    return (n + k - 1) * (n + k - 2) * ... * (n + 1) * k // 2\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Compute the permutation coefficient p(n, k)\n    https://en.wikipedia.org/wiki/Combination#Permutation_coefficient\n    \"\"\"\n    return binomial(n, k) * factorial(n - k)\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    \"\"\"\n    n = 10\n    k = 2\n    p(10, 2) = 90\n    \"\"\"\n    p = 1\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            p *= (j - 1) // (i - 1)\n        p /= (i - 1)\n    return p\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n\n    Examples\n    --------\n    >>> permutation_coefficient(10, 2)\n    90\n    \"\"\"\n    return binomial(n, k)\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    if n == 0 or k == 0:\n        return 0\n    return binomial(n, k) / factorial(k)\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nimport math\nfrom typing import List\n\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    num = math.factorial(n)\n    k_num = math.factorial(k)\n    res = 0\n    for i in range(k, n + 1):\n        res += math.factorial(n) / (math.factorial(k) * math.factorial(i - k))\n    return num / k_num * res\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef factorial(n):\n    if n == 0: return 1\n    return n * factorial(n-1)\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n    return (permutation_coefficient(n - 1, k - 1) * (n - k)) // k\n\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(word_list, to_remove):\n    return [word for word in word_list if word not in to_remove]\n\n# Test Function\nword_list = ['red', 'green', 'blue', 'white', 'black', 'orange']\nto_remove = ['white', 'orange']", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, remove_words):\n    words = set(words)\n    remove_words = set(remove_words)\n    return list(words - remove_words)\n\n\ndef test_remove_words():\n    print(\"Remove Words\")\n    print(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange']))\n    print()\n\n\ndef get_words(text, char):\n    \"\"\"\n    Use string functions to get a list of words in a text.\n    Ignore case for char and characters before first space.\n    \"\"\"\n    return text.split(char)\n\n\ndef test_get_words():\n    print(\"Get Words\")\n    print(get_words('Hello World', ''))\n    print()\n\n\ndef number_of_words(text):\n    \"\"\"\n    Use string functions to get a number of words in a text.\n    Ignore case for letters and words before first space.\n    \"\"\"\n    return len(text.split(' '))\n\n\ndef test_number_of_words():\n    print(\"Number Of Words\")\n    print(number_of_words('Hello World'))\n    print(number_of_words('  HELLO WORLD  '))\n    print()\n\n\ndef get_words_with_counts(text, char):\n    \"\"\"\n    Use string functions to get a list of words and counts for words in a text.\n    Ignore case for char and characters before first space.\n    \"\"\"\n    counts = {}\n    for word in text.split(char):\n        counts[word] = counts.get(word, 0) + 1\n    return counts\n\n\ndef test_get_words_with_counts():\n    print(\"Get Words With Counts\")\n    print(get_words_with_counts('Hello World', ''))\n    print(get_words_with_counts('  HELLO WORLD  ', ''))\n    print()\n\n\ndef get_words_with_counts_2(text, char):\n    \"\"\"\n    Use collections and Counter to get a list of words and counts for words in a text.\n    Ignore case for", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words,to_remove):\n    new_list = []\n    for word in words:\n        if word not in to_remove:\n            new_list.append(word)\n    return new_list\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, to_remove):\n    \"\"\"\n    remove_words(words, to_remove)\n    words - list\n    to_remove - list\n    Returns a list of words without the words in to_remove\n    \"\"\"\n    return [word for word in words if word not in to_remove]\n\ndef main():\n    \"\"\"\n    Do not add anything below this line.\n    \"\"\"\n    print(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange']))\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, skip_words):\n    return [word for word in words if word not in skip_words]\n\n\n# print(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange']))", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, to_remove):\n    remove = set(to_remove)\n    return [w for w in words if w not in remove]\n\n\ndef test_remove_words():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange']) == ['red', 'green', 'blue', 'black']", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(word_list, bad_words):\n    return [word for word in word_list if word not in bad_words]\n\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(string, words):\n\tfor word in words:\n\t\tstring.remove(word)\n\treturn string\n\n#print remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, to_remove):\n    return list(filter(lambda x: x not in to_remove, words))\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, remove_list):\n    res = []\n    for word in words:\n        if word not in remove_list:\n            res.append(word)\n    return res\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list_one, list_two):\n    if(len(list_one) != len(list_two)):\n        return False\n    for i in range(0, len(list_one)):\n        if list_one[i] != list_two[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(lst1, lst2):\n    if len(lst1)==len(lst2):\n        lst1.sort()\n        lst2.sort()\n        return lst1==lst2\n    return False", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1,list2):\n    if(list1==list2):\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(li1, li2):\n\tif len(li1)==len(li2):\n\t\tfor i in range(0,len(li1)):\n\t\t\tif li1[i]!=li2[i]:\n\t\t\t\treturn False\n\telse:\n\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(x,y):\n    if len(x) != len(y):\n        return False\n    \n    for i in range(len(x)):\n        if x[i] != y[i]:\n            return False\n    return True\n\ndef same_order(x,y):\n    if len(x) != len(y):\n        return False\n    if set(x) != set(y):\n        return False\n    \n    x.sort()\n    y.sort()\n    return x==y\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n    if len(list1) != len(list2):\n        return False\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\n# +\ndef same_order(l1,l2):\n    if len(l1)==len(l2):\n        for i in range(len(l1)):\n            if l1[i]!=l2[i]:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(lst1,lst2):\n\tif len(lst1) != len(lst2):\n\t\treturn False\n\n\tfor i in range(len(lst1)):\n\t\tif lst1[i] != lst2[i]:\n\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(l1, l2):\n    if len(l1)!=len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!=l2[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    total = 0\n    for i in range(1, n + 1, 2):\n        total += i\n    return total // 2\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    odd_num = []\n    for i in range(1,num+1):\n        if i % 2 != 0:\n            odd_num.append(i)\n    return sum(odd_num)/len(odd_num)", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    sum = 0\n    for i in range(1, num+1, 2):\n        sum += i\n    return int(sum/num)\n\n# print(average_Odd(10))\n# 5\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    a = 1\n    for i in range(1, n+1, 2):\n        a = a + i\n    return a // 2\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    total=0\n    for i in range(1,n+1,2):\n        total=total+i\n    return int(total/3)\n    ", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    i = 1\n    sum = 0\n    while i < n:\n        sum += i\n        i += 2\n    return sum/2\n\n# Test cases", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    if n%2 == 0:\n        return 0\n    else:\n        return n//2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 0\n\telse:\n\t\treturn n - (n % 2)\n\t", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    #your code here\n    if num%2 == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1,(num+1)//2+1):\n            sum = sum + i\n        return sum\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    sum = 0\n    for i in range(1, n+1):\n        if(i % 2 == 1):\n            sum = sum + i\n    average = (sum/n)\n    return average"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    if len(arr) == 1:\n        return 1\n    else:\n        return no_of_subsequences(arr[1:], k) + no_of_subsequences(arr[:len(arr)-1], k) + no_of_subsequences(arr[:len(arr)-1], k-arr[-1])\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    '''\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    res = 0\n    if len(arr) == 0:\n        return res\n    n = len(arr)\n    table = [0 for i in range(k + 1)]\n    table[1] = 1\n    for i in range(2, k + 1):\n        for j in range(n):\n            if arr[j] == 0:\n                table[i] += table[i - 1]\n            else:\n                break\n\n    for i in range(1, k + 1):\n        for j in range(i, n):\n            table[i] += table[j - i]\n\n    res = table[k]\n    return res\n\n\ndef no_of_subsequences_optimized(arr, k):\n    '''\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    res = 0\n    if len(arr) == 0:\n        return res\n    n = len(arr)\n    table = [0 for i in range(k + 1)]\n    table[1] = 1\n    for i in range(2, k + 1):\n        for j in range(n):\n            if arr[j] == 0:\n                table[i] += table[i - 1]\n            else:\n                break\n\n    for i in range(1, k + 1):\n        for j in range(i, n):\n            table[i] += table[j - i]\n\n    res = table[k]\n    return res\n\n\ndef test_no_of_subsequences():\n    assert no_of_subsequences([1,2,3,4], 10) == 11\n    assert no_of_subsequences([0,1,0,3], 7) == 7\n    assert no_of_subsequences([1,0,2,0,1], 5) == 8\n    assert no_of_subsequences([0,0,0,0,0,0,0,", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\n# Solution\ndef no_of_subsequences(arr, k):\n    if arr is None:\n        return 0\n\n    # Main loop\n    count = 0\n    for i in range(len(arr)):\n        count += no_of_subsequences(arr[i:], k)\n        if i + 1 != len(arr):\n            if arr[i] * arr[i + 1] > k:\n                count += no_of_subsequences(arr[i + 1:], k)\n\n    return count + 1\n\n\n# Tests", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    # Get the subsequences\n    subsequences = get_subsequences(arr)\n\n    # Find the number of subsequences having product smaller than k\n    count = 0\n    for s in subsequences:\n        if s == 0:\n            continue\n\n        if product(s) < k:\n            count += 1\n\n    return count\n\n\ndef product(s):\n    return reduce(operator.mul, s, 1)\n\n\ndef get_subsequences(arr):\n    subsequences = []\n    if len(arr) == 0:\n        subsequences.append([])\n        return subsequences\n\n    for i in range(len(arr)):\n        current = arr[:i]\n        tail = arr[i+1:]\n        for j in get_subsequences(tail):\n            subsequences.append(current + [j])\n\n    return subsequences\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(array, k):\n    \"\"\"\n    This function returns the number of subsequences having product smaller than k for the given non negative array.\n    \n    Algorithm:\n    -----------\n    1. Calculate the product of all numbers.\n    2. Divide the array into contiguous subsequences such that they contain the product.\n    3. Find the number of subsequences.\n    4. Repeat the steps 1 to 3 for each subsequence.\n    5. Multiply the subsequence product with the number of subsequences and store in the dictionary.\n    6. Calculate the sum of the dictionary.\n    \n    Time Complexity: O(N*K)\n    \n    \"\"\"\n    \n    n = len(array)\n    \n    def product(array):\n        \"\"\"\n        This function calculates the product of all elements in the array.\n        \"\"\"\n        result = 1\n        for i in range(n):\n            result *= array[i]\n        return result\n\n    def partition(array):\n        \"\"\"\n        This function divides the array into contiguous subsequences such that they contain the product.\n        \"\"\"\n        for i in range(n):\n            for j in range(i + 1, n):\n                if product(array[i:j+1]) == k:\n                    yield array[i:j+1]\n\n    return sum(product(array) * len(list(partition(array))) for array in partition(array))\n\n\narray = [1, 2, 3, 4]\nk = 10", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nimport pytest\n\n\ndef no_of_subsequences(arr, k):\n    \"\"\"\n    TC: O(N^2)\n    SC: O(N)\n    \"\"\"\n\n    if not isinstance(arr, list) or not isinstance(arr, tuple):\n        raise TypeError\n\n    return no_of_subsequences_recursive(arr, k)\n\n\ndef no_of_subsequences_recursive(arr, k):\n    \"\"\"\n    TC: O(N^2)\n    SC: O(N)\n    \"\"\"\n\n    n = len(arr)\n\n    if n < 1:\n        raise TypeError\n\n    if k < 1:\n        raise TypeError\n\n    if n == 1:\n        return 1\n\n    max_num = arr[-1]\n\n    for i in range(n-1, -1, -1):\n        if max_num < k:\n            return no_of_subsequences_recursive(arr[:i], k)\n\n        if max_num % k == 0:\n            return no_of_subsequences_recursive(arr[:i+1], k) + no_of_subsequences_recursive(arr[i+1:], k)\n        else:\n            return no_of_subsequences_recursive(arr[i+1:], k)\n\n\ndef no_of_subsequences_iterative(arr, k):\n    \"\"\"\n    TC: O(N^2)\n    SC: O(N)\n    \"\"\"\n\n    if not isinstance(arr, list) or not isinstance(arr, tuple):\n        raise TypeError\n\n    if len(arr) == 0:\n        return 0\n\n    if len(arr) == 1:\n        return 1\n\n    if k < 1:\n        raise TypeError\n\n    n = len(arr)\n\n    max_num = arr[-1]\n\n    count = 0\n\n    for i in range(n-1, -1, -1):\n        if max_num < k:\n            return count\n\n        if max_num % k == 0:\n            count = count + no_of_subsequences_iterative(arr[:i+1], k) + no_of_subsequences_iterative(arr[i+1:],", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr,k):\n    n = len(arr)\n    dp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i == 0:\n                dp[i][j] = 1\n            elif j == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n][k]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    \"\"\"\n    Time Complexity: O(n^2)\n    \"\"\"\n    length = len(arr)\n    subsequences = [1] + [0] * length\n    subsequences[0] = 1\n    for i in range(1, length):\n        for j in range(length - i):\n            if arr[j + i] * arr[j] < k:\n                subsequences[j + i] += subsequences[j]\n    return subsequences[-1]\n"]]