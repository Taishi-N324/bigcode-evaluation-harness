[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,character):\n    # Your code goes here\n    return string.replace(character,'',1).replace(character,'',1)\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str,x):\n    index = str.find(x)\n    if index==0 or index==len(str)-1:\n        return str[:index]+str[index+1:]\n    else:\n        return str\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str, ch):\n    i = 0\n    strLen = len(str)\n    while i < strLen and str[i] == ch:\n        i += 1\n\n    j = strLen - 1\n    while j >= i and str[j] == ch:\n        j -= 1\n\n    return str[i:j + 1]\n\ndef remove_Occ(str, ch):\n    return str.replace(ch, '', 1).replace(ch, '', -1)\n\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,c):\n    if c in string:\n        string = string.replace(c,\"\",1)\n    if c in string:\n        string = string.replace(c,\"\",-1)\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, char):\n    return string[0:string.index(char)] + string[string.index(char)+1:]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, ch):\n    if not string or ch not in string:\n        return string\n    index = string.index(ch)\n    if index == 0:\n        return remove_Occ(string[1:], ch)\n    if index == len(string) - 1:\n        return remove_Occ(string[0:len(string)-1], ch)\n    return string[0:index] + remove_Occ(string[index+1:], ch)", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str, c):\n    n = len(str)\n    i = 0\n    if n == 0:\n        return str\n    while i < n:\n        if str[i] == c:\n            if i == 0 or str[i-1] != c:\n                return str[0:i] + str[i+1:]\n            else:\n                j = i\n                while j < n:\n                    if str[j] == c:\n                        if j == n-1 or str[j+1] != c:\n                            return str[0:j] + str[j+1:]\n                        else:\n                            return str[0:j-1] + str[j+1:]\n                    j+=1\n        i+=1\n    return str\n\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,ch):\n    for i in range(string.count(ch)):\n        string = string.replace(ch,'',1)\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(strng,c):\n\treturn strng.replace(c,\"\").replace(c,\"\",1)\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str,c):\n    # return str.strip(c)\n    if str.startswith(c):\n        return str[1:].strip(c)\n    if str.endswith(c):\n        return str[:-1].strip(c)\n    return str\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n  sorted_matrix = []\n  for row in matrix:\n    sorted_row = sorted(row)\n    sorted_matrix.append(sorted_row)\n  sorted_matrix.sort(key=lambda row: sum(row))\n  return sorted_matrix\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\nimport pytest\n\n\ndef sort_matrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    res = []\n    for i in range(len(matrix)):\n        # print(matrix[i])\n        curr_sum = sum(matrix[i])\n        res.append([i, curr_sum, matrix[i]])\n    # print(res)\n    res.sort(key=lambda x: x[1])\n    # print(res)\n    final = []\n    for i in res:\n        final.append(i[2])\n    return final\n\n\ndef sort_matrix2(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    row = [sum(row) for row in matrix]\n    matrix.sort(key=lambda x: row.index(sum(x)))\n    return matrix\n\n\n@pytest.mark.parametrize(\n    \"matrix,result\",\n    [([[1, 2, 3], [2, 4, 5], [1, 1, 1]], [[1, 1, 1], [1, 2, 3], [2, 4, 5]])],\n)\ndef test_sort_matrix(matrix, result):\n    assert sort_matrix(matrix) == result", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\nimport random\ndef sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n):\n            M[i][j] = random.randint(1,9)\n    return M", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\nfrom typing import List\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=1024)\ndef rec(m: List[List[int]], i: int, j: int, v: int) -> int:\n    if i == j == v:\n        return 0\n    if j > v:\n        return rec(m, i, v, v - 1)\n    if v - i == 1:\n        return min(rec(m, i, v, v), rec(m, v + 1, j, v))\n    r = float('inf')\n    r = min(r, rec(m, i, v, v) + rec(m, v + 1, j, v))\n    r = min(r, rec(m, i, v, v + 1) + rec(m, v + 1, j, v - 1))\n    return r\n\n\ndef sort_matrix(m: List[List[int]]) -> List[List[int]]:\n    return [[m[i][j] for i in range(len(m))] for j in range(len(m))]\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    return [sorted(row) for row in matrix]", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # sort matrix by row\n    # sort by rows\n    for row in range(len(matrix)):\n        matrix[row] = sorted(matrix[row])\n    # sort rows\n    matrix.sort()\n    return matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    \"\"\"\n    :param matrix: list of list\n    :return: sorted list\n    \"\"\"\n    sum_matrix = []\n    for row in matrix:\n        sum_matrix.append(sum(row))\n    return sorted(zip(sum_matrix, matrix), key=lambda x: x[0])\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # fixme: why does this work for the first input, but not the second???\n    sorted_list = sorted(matrix, key = lambda row : sum(row))\n    return sorted_list\n\n# assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    list_of_sums = []\n    for i in matrix:\n        total = 0\n        for j in i:\n            total += j\n        list_of_sums.append(total)\n\n    list_of_sums.sort()\n    sorted_matrix = []\n    for j in list_of_sums:\n        for i in matrix:\n            if j == sum(i):\n                sorted_matrix.append(i)\n    return sorted_matrix\n\n\ndef main():\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n    print(sort_matrix([[2, 3, 4], [5, 6, 7], [8, 9, 10]]))\n    print(sort_matrix([[1, 2], [3, 4], [5, 6], [7, 8]]))\n    print(sort_matrix([[1, 2], [2, 4], [1, 1], [2, 2]]))\n\n\nmain()", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(m):\n    row_sum = []\n    for i in range(len(m)):\n        row_sum.append(sum(m[i]))\n    row_sum.sort()\n    rows = []\n    for i in row_sum:\n        rows.append(m[row_sum.index(i)])\n    return rows\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    dic={}\n    for word in words:\n        dic[word]=dic.get(word,0)+1\n    #dic = {word:dic.get(word,0)+1 for word in words}\n    return [(word,val) for word,val in dic.items() if val>=2]\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n\tres = {}\n\tfor word in words:\n\t\tif word in res:\n\t\t\tres[word] += 1\n\t\telse:\n\t\t\tres[word] = 1\n\treturn sorted(res.items(), key=lambda x: (-x[1], x[0]))\n\ndef count_common_alt(words):\n\tres = {}\n\tfor word in words:\n\t\tres[word] = res.get(word, 0) + 1\n\treturn sorted(res.items(), key=lambda x: (-x[1], x[0]))", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    # your code goes here\n    word_list = []\n    for word in words:\n        if word not in word_list:\n            word_list.append(word)\n    dict_of_count = {}\n    for word in word_list:\n        dict_of_count[word] = words.count(word)\n    sorted_by_count = sorted(dict_of_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_by_count", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(word_list):\n    \"\"\"\n    counts the number of times each word appears in the list\n    \"\"\"\n    word_dict = {}\n    for word in word_list:\n        if word not in word_dict:\n            word_dict[word] = 1\n        else:\n            word_dict[word] += 1\n    return word_dict.items()\n\ndef get_most_common(word_list):\n    \"\"\"\n    returns the most common words and their counts\n    \"\"\"\n    word_dict = count_common(word_list)\n    word_dict.sort(key=lambda x: x[1], reverse=True)\n    return word_dict\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n\t# TODO: your code here\n    words_dict = dict()\n    for word in words:\n        if word in words_dict:\n            words_dict[word] += 1\n        else:\n            words_dict[word] = 1\n    return list(words_dict.items())\n    pass\n\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    d = {}\n    for w in words:\n        if w in d:\n            d[w] += 1\n        else:\n            d[w] = 1\n    m = max(d.values())\n    return [k for k,v in d.items() if v==m]", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return sorted(counts.items(), key=lambda t:t[1], reverse=True)\n\ndef main():\n    print(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\nfrom collections import Counter\n\ndef count_common(word_list):\n    c = Counter(word_list)\n    return [(w,c[w]) for w in c.keys() if c[w] > 1]", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    d = {}\n    for word in words:\n        if word not in d:\n            d[word] = 0\n        d[word] += 1\n    # take the maximum value of the d.items() dictionary\n    # and return a list of tuples like [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    return sorted(d.items(), key = lambda x: x[1], reverse = True)", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    d = dict()\n    for word in words:\n        if word not in d:\n            d[word] = 1\n        else:\n            d[word] += 1\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)[:5]\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_volume(a,b,c):\n    return (a+b+c)/2*a*b*c\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    return a*b*c/2\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\nimport math\n\ndef find_Volume(h,w,l):\n    v = math.sqrt(l*l + w*w + h*h) * h / 3\n    return v\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    return (a*b*c)/2\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    area_a = (a/2)*(b/2)\n    area_b = (b/2)*(c/2)\n    area_c = (c/2)*(a/2)\n    total_area = area_a+area_b+area_c\n    volume = area_a*area_b*area_c/6\n    return volume\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\nimport math\ndef find_Volume(height,base_height,base_width):\n    vol = height*base_height*base_width/3\n    return vol\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base_length, height, width):\n    return base_length * height * width\n\n\ndef test_volume():\n    base_length = 10\n    height = 8\n    width = 6\n    assert find_Volume(base_length, height, width) == 240\n\ntest_volume()", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(l, b, h):\n    return (l*b*h)/3\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    # Your code here\n    return a*b*c\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    \"\"\"\n    Function to find the volume of a triangle prism.\n\n    Parameters\n    ----------\n    a : float\n        Length of the base of the triangle\n    b : float\n        Length of the height of the triangle\n    c : float\n        Length of the side of the triangle\n\n    Returns\n    -------\n    vol : float\n        The volume of the triangle prism\n\n    \"\"\"\n    vol = (1/3)*a*b*c\n    return vol\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    start=0\n    end=0\n    for index in range(0,len(s)):\n        if s[index].islower():\n            end=index\n        if index==len(s)-1:\n            end=index+1\n        if s[index].isupper():\n            if start!=end:\n                yield s[start:end]\n            start=end\n    yield s[start:end]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    result = []\n    idx = 0\n    for i, c in enumerate(string):\n        if c.islower():\n            result.append(string[idx:i])\n            idx = i + 1\n    result.append(string[idx:])\n    return result\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    word_list=[]\n    for c in s:\n        if c.islower():\n            word_list.append(c)\n        else:\n            if word_list:\n                word_list.append(c)\n            else:\n                word_list.append('')\n    return word_list\n\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    result = []\n    index = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            result.append(string[index:i])\n            index = i + 1\n    result.append(string[index:])\n    return result\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(text):\n    #your code here\n    return [x for x in text if x.islower()]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    pass\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(text):\n    \"\"\"\n    :param text: str\n    :return: list of strings\n    \"\"\"\n    result = []\n    word = ''\n    for i in range(len(text)):\n        if text[i].islower():\n            if word != '':\n                result.append(word)\n                word = ''\n        else:\n            word += text[i]\n    if word != '':\n        result.append(word)\n    return result\n\n\ndef test_split_lowerstring():\n    assert split_lowerstring(\"AbCd\")==['bC','d']\n    assert split_lowerstring(\"Ab cD\")==['b cD']\n    assert split_lowerstring(\"Ab  cD\")==['b  cD']\n    assert split_lowerstring(\"abcD\")==['abcD']\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(str):\n    new_str=str.split()\n    return new_str", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    new_list = []\n    for i in range(len(s)):\n        if s[i].islower():\n            if len(new_list) != 0:\n                new_list.append(s[i])\n        else:\n            if len(new_list) != 0:\n                new_list.append(s[i])\n                break\n    return new_list", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    return string.split(\"a\")\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef text_lowercase_underscore(s: str) -> str:\n    \"\"\"\n    >>> text_lowercase_underscore('aab_cbbbc')\n    'Found a match!'\n    >>> text_lowercase_underscore('a')\n    'Found a match!'\n    >>> text_lowercase_underscore('aaabbbccc_a_b_c')\n    'Found a match!'\n    >>> text_lowercase_underscore('aaabbbccc_d_b_c')\n    'Found no match!'\n    \"\"\"\n    word_list = s.split('_')\n    word_list_count = defaultdict(int)\n    for word in word_list:\n        if word.isalpha():\n            for letter in word:\n                word_list_count[letter] += 1\n        else:\n            return 'Found no match!'\n    if all(word_list_count[letter] == word_list_count[word[0]] for word in word_list):\n        return 'Found a match!'\n    else:\n        return 'Found no match!'", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    for i in range(0,len(text)-1):\n        if text[i].islower() and text[i+1] == '_':\n            return 'Found a match!'\n    return 'No Match'\n    ", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(string):\n    if len(string) <= 2:\n        return \"Found a match!\"\n    if string[0].islower() and string[1].islower() and string[2] == \"_\":\n        return \"Found a match!\"\n    else:\n        return \"No match.\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    if '_' not in text:\n        return 'No match!'\n    else:\n        return 'Found a match!'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    for item in text.split():\n        if item.islower():\n            print('Found a match!')\n            return 'Found a match!'\n\ntext_lowercase_underscore(\"aab_cbbbc\")\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(string):\n    pattern = \"[a-z]+\\_[a-z]+\\*[a-z]+\"\n    result = re.findall(pattern, string)\n    if len(result) > 0:\n        return \"Found a match!\"\n    else:\n        return \"Did not find a match!\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    pattern = r\"[a-z_]+(\\w)\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return \"Found a match!\"\n    else:\n        return \"No match\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n       text(str): String to be searched\n    Returns:\n       str: 'Found a match!' if text contains sequence of lowercase letters joined with an underscore\n            'cannont find' otherwise\n    \"\"\"\n    pass", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\nimport re\ndef text_lowercase_underscore(text):\n    # your code here\n    #regex = re.compile(\"[a-z]+_\")\n    regex = re.compile(r\"[\\w]+\")\n    if regex.match(text):\n        return \"Found a match!\"\n    else:\n        return \"No Match\"\n    ", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    # your code here\n    new_text = text.lower()\n    new_list = new_text.split(\"_\")\n    for i in new_list:\n        if not i.islower():\n            return \"No match\"\n    return \"Found a match!\"\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(n):\n    return n**2*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    \"\"\"\n    Arguments: side of the square\n    Returns: perimeter of the square\n    \"\"\"\n    return side * 4\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(a):\n    return a * 4", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(size):\n    return size*size\n\ndef square_perimeter_1(size):\n    return 4*size\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(x):\n    return 4 * x\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(size):\n    \"\"\"\n    >>> square_perimeter(10)\n    40\n    \"\"\"\n    return 4 * size\n\n# <YOUR CODE HERE>\nraise NotImplementedError()\n# </YOUR CODE HERE>", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side):\n    return 4*side\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return side * 4\n\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(size):\n    return 4*size"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    s1 = [i for i in s1 if i not in s2]\n    return \"\".join(s1)\n\n# TODO: 1) Improve the time complexity.\n#        2) Add a test case.\n#        3) What if the input strings are very large?", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    result = \"\"\n    for i in s1:\n        if i not in s2:\n            result += i\n    return result", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string_one, string_two):\n    new_str = \"\"\n    for char in string_one:\n        if char not in string_two:\n            new_str += char\n    return new_str\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n# def remove_dirty_chars(s1, s2):\n#     s1_chars = set(s1)\n#     s2_chars = set(s2)\n#     return ''.join(filter(lambda x: x not in s2_chars, s1_chars))\n\ndef remove_dirty_chars(s1, s2):\n    s1_chars = set(s1)\n    s2_chars = set(s2)\n    return ''.join([x for x in s1 if x not in s2_chars])", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(dirty_string, clean_string):\n    return \"\".join([c for c in dirty_string if c not in clean_string])", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string_1, string_2):\n    dirty_chars = [ch for ch in string_2 if ch in string_1]\n    return string_1.translate(str.maketrans('', '', ''.join(dirty_chars)))\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n#SOLUTION\ndef remove_dirty_chars(s1, s2):\n    return ''.join([ch for ch in s1 if ch not in s2])", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef remove_dirty_chars(a, b):\n    clean_string = \"\"\n    for i in a:\n        if i not in b:\n            clean_string += i\n    return clean_string\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(dirty_str, clean_str):\n    \"\"\"Return clean_str with all characters of dirty_str that appear in it\"\"\"\n    clean = ''\n    for c in dirty_str:\n        if c not in clean_str:\n            clean = clean + c\n    return clean\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str1, str2):\n    new_str = \"\"\n    for char in str1:\n        if char not in str2:\n            new_str += char\n    return new_str\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) < 1:\n        return False\n    \n    # Your code here\n    dict = {}\n    for i in nums:\n        if i in dict:\n            return True\n        else:\n            dict[i] = i\n            \n    return False\n    \ndef duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) < 1:\n        return False\n    \n    # Your code here\n    for i in nums:\n        if nums.count(i) > 1:\n            return True\n    return False", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(array):\n    new_array = array[:]\n    new_array.sort()\n    for i in range(len(new_array)-1):\n        if(new_array[i]==new_array[i+1]):\n            return True\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    return True if len(arr)==len(set(arr)) else False\n\ndef test_duplicate_with_duplicates(arr):\n    return False if len(arr)==len(set(arr)) else True\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    for i in arr:\n        if arr.count(i) > 1:\n            return True\n    return False", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(x):\n    if set(x) == len(x):\n        return False\n    else:\n        return True", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    \"\"\"Test function for duplicate function\"\"\"\n    new_arr = set(arr)\n    if new_arr == len(arr):\n        return False\n    return True\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if len(arr) < 2:\n        return False\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    for i in arr:\n        for j in arr:\n            if i==j:\n                return True\n    return False\n\ndef duplicate(arr):\n    return test_duplicate(arr)\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(num_list):\n    return True if len(num_list)!=len(set(num_list)) else False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    for num in arr:\n        for i in range(len(arr)):\n            if i == len(arr)-1:\n                break\n            if num == arr[i+1]:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n# solution 1\ndef is_woodall(n):\n    # base case\n    if n < 10:\n        return True\n\n    # recursive case\n    return is_woodall(n % 10) or is_woodall(n // 10)\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(number):\n    count = 0\n    while number > 0:\n        count += number % 10\n        number = number // 10\n    return count == 0\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    string = str(n)\n    if len(string) == 6:\n        if string[0] == '3' and string[1] == '8' and string[2] == '3':\n            return True\n        else:\n            return False\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    if n < 1:\n        return False\n    temp = 0\n    while n > 0:\n        temp += n % 10\n        n //= 10\n    return temp == 0\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodball(num):\n    if num%10 == 3 or num%10 == 8:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number):\n    if number % 3 == 0 and number % 5 == 0:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    if n <= 0:\n        raise ValueError('Input number cannot be less than or equal to 0.')\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\n# print(is_woodall(12))\n\ndef sum_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    return (num//1000)%10 == (num//100)%10 == (num//10)%10 == (num%10)%10 == 5\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodball(num):\n    if num % 12 == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    if n > 0:\n        sum_of_digits = 0\n        while(n > 0):\n            sum_of_digits += n % 10\n            n = int(n/10)\n        if sum_of_digits % 3 == 0:\n            return True\n        return False\n    return False\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [n*i for i in range(m)]", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(num, m):\n    return [num * i for i in range(1,m+1) if num * i < 1000]\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n    return [i for i in range(n,m*n+1,n)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\nfrom typing import List\n\n\ndef multiples_of_num(n: int, m: int) -> List[int]:\n    result = []\n\n    for i in range(m):\n        result.append(n * (i + 1))\n\n    return result\n\n\ndef multiples_of_num_2(n: int, m: int) -> List[int]:\n    return [n * (i + 1) for i in range(m)]\n\n\ndef multiples_of_num_3(n: int, m: int) -> List[int]:\n    return [n * i for i in range(1, m + 1)]\n\n\ndef multiples_of_num_4(n: int, m: int) -> List[int]:\n    return [i * n for i in range(1, m + 1)]\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [i * n for i in range(0, m)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [n*i for i in range(m)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    multiples = []\n    i = 0\n    while i < m:\n        multiples.append(n*i)\n        i += 1\n    return multiples\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    num = []\n    i = 0\n    while i < m:\n        num.append(n*i)\n        i+=1\n    return num\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n    a=n*(m-1)\n    return [a+x for x in range(m)]", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n  return [i*n for i in range(m)]\n  "], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(array):\n    '''\n    Best case: O(n)\n    Worst case: O(n)\n    '''\n    seen = {}\n    for num in array:\n        if num in seen:\n            return num\n        else:\n            seen[num] = 1", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    \"\"\"\n    Finds the first duplicate element in a given array of integers.\n    :param arr: a list of integers\n    :return: the first duplicate element\n    \"\"\"\n    # Check if there is a duplicate\n    # base case - there is no duplicate\n    # if arr[-1] == arr[-2]:\n    #     return arr[-1]\n\n    for index in range(len(arr) - 1):\n        if arr[index] == arr[index + 1]:\n            return arr[index]\n\n\ndef find_first_duplicate_no_brute(arr):\n    # If there are less than 2 elements\n    if len(arr) < 2:\n        return -1\n\n    # if arr[0] == arr[1]:\n    #     return arr[0]\n\n    # Initialize left and right pointers\n    left = 0\n    right = 1\n\n    # While left is less than right\n    while left < right:\n        # Check if the next two elements are equal\n        # if arr[left] == arr[right]:\n        #     return arr[left]\n        #\n        # If arr[left] is less than arr[right]\n        # increment left pointer\n        elif arr[left] < arr[right]:\n            left += 1\n        # If arr[left] is greater than arr[right]\n        # increment right pointer\n        else:\n            right += 1\n\n    # If the right pointer is not equal to the length of array\n    # return arr[right]\n    # return arr[right] if arr[right] != arr[-1] else -1\n    return arr[right] if arr[right] != arr[-1] else -1\n\n\n# Testing", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(array):\n    duplicate = None\n    for i in range(len(array)-1):\n        if array[i] == array[i+1]:\n            duplicate = array[i]\n    return duplicate\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    return arr.index(arr[arr.index(arr[arr.index(arr[arr.index(arr[arr.index(arr[arr.index(arr[arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(arr.index(", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\n# List comprehension to find all the duplicates.\n# Time complexity: O(n)\ndef find_first_duplicate(arr):\n    return [x for x in arr if arr.count(x) > 1]\n\n\n# Brute force approach.\n# Time complexity: O(n^2)\ndef find_first_duplicate_brute(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(a):\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                return a[i]\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    if len(arr) == 1:\n        return None\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return arr[i]\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    result = []\n    for i in range(len(arr)):\n        if arr[i] in arr[:i] or arr[i] in result:\n            return arr[i]\n        else:\n            result.append(arr[i])\n\narr = [1, 2, 3, 4, 4, 5]", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    hash_table = {}\n\n    for element in arr:\n        if element in hash_table:\n            return element\n\n        hash_table[element] = True\n\n    return -1\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(input_list):\n    seen = set()\n    for number in input_list:\n        if number in seen:\n            return number\n        else:\n            seen.add(number)\n    return -1\n\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list):\n    sum = 0\n    for i in list:\n        sum = max(sum,sum+i)\n    return sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(List):\n    max_sum = 0\n    for i in range(len(List[0])):\n        temp = 0\n        for j in range(len(List)):\n            temp+=List[j][i]\n        if temp>max_sum:\n            max_sum=temp\n    return max_sum", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(list_of_list):\n    max_sum = 0\n    for i in range(len(list_of_list)):\n        temp = 0\n        for j in range(len(list_of_list[i])):\n            temp += list_of_list[i][j]\n        max_sum = max(max_sum,temp)\n    return max_sum\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(array):\n  i = 0\n  j = 0\n  while i < len(array):\n    j = 0\n    while j < len(array[i]):\n      if j == 0:\n        maximum = array[i][j]\n      else:\n        maximum = max(array[i][j], array[i][j] + maximum)\n      j += 1\n    i += 1\n  return maximum", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list_of_lists):\n    max_sum = 0\n    for lst in list_of_lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n    return max_sum\n\n\ndef test_function(test_case):\n    list_of_lists = test_case[0]\n    solution = test_case[1]\n    output = maximum_Sum(list_of_lists)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = ([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]], 33)\ntest_function(test_case_1)\n\ntest_case_2 = ([[1, 2, 3, 4], [5, 6, 7, 8]], 12)\ntest_function(test_case_2)\n\ntest_case_3 = ([[1, 2, 3, 4, 5]], 15)\ntest_function(test_case_3)", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(a):\n    # Write your code here\n    sum = []\n    for i in a:\n        temp = 0\n        for j in i:\n            temp+=j\n        sum.append(temp)\n    max_sum = max(sum)\n    return max_sum", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(matrix):\n    pass\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(L):\n    sum=0\n    for i in range(len(L)):\n        for j in range(len(L[i])):\n            sum+=L[i][j]\n    return sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\n# O(n^2) time | O(1) space\ndef maximum_Sum(lists):\n    max_so_far = min_so_far = lists[0][0]\n    for i in range(1, len(lists)):\n        for j in range(len(lists[i])):\n            max_so_far = max(max_so_far, lists[i][j])\n            min_so_far = min(min_so_far, lists[i][j])\n    return max_so_far + min_so_far\n\n# O(n) time | O(1) space\ndef maximum_Sum(lists):\n    max_so_far = min_so_far = lists[0][0]\n    for i in range(len(lists)):\n        max_so_far = max(max_so_far, max(lists[i]))\n        min_so_far = min(min_so_far, min(lists[i]))\n    return max_so_far + min_so_far", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(l):\n    #code goes here\n    max = -10**10\n    for i in l:\n        for j in i:\n            max = max + j\n    return max\n\n#Test case"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(num):\n    return bin(num).replace('0b','')\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(num):\n    if num == 0:\n        return 0\n    else:\n        return num % 2 + 2 * binary_to_decimal(num // 2)\n\ndef main():\n    print(binary_to_decimal(100))\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_number: int) -> int:\n    \"\"\"\n    Use math module to convert number from binary to decimal\n    \"\"\"\n    return int(bin(binary_number),2)\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    \"\"\"\n    :param binary: binary number to convert to decimal\n    :return: decimal equivalent of binary number\n    \"\"\"\n    result = 0\n    for digit in binary:\n        result = result*2 + int(digit)\n    return result", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_num):\n    decimal_num = 0\n    for i, digit in enumerate(str(binary_num)[::-1]):\n        if digit == '1':\n            decimal_num += (2**i)\n    return decimal_num\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(bin_num):\n    return sum(2 ** i * int(d) for i, d in enumerate(reversed(bin(bin_num))))\n\n\ndef test_binary_to_decimal():\n    assert binary_to_decimal(100) == 4", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n\tdecimal = 0\n\tfor i in range(0,len(binary)):\n\t\tdecimal = decimal + (int(binary[i]) * (2 ** (len(binary)-1-i)))\n\treturn decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    decimal = 0\n    for digit in str(binary):\n        decimal *= 2\n        if digit == \"1\":\n            decimal += 1\n    return decimal\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr, n):\n    \"\"\"\n    a = [1, 1, 2, 3], n = 4\n    ans = 6\n    Product of non-repeated elements in the array = 1*2*3\n    \"\"\"\n    product = 1\n    for i in range(n):\n        if arr[i] not in arr[i+1:]:\n            product = product * arr[i]\n    return product\n\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(A, N):\n    product = 1\n    for i in range(N):\n        if (A[i] in A[:i]):\n            continue\n        else:\n            product *= A[i]\n    return product\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        N = int(input())\n        A = list(map(int, input().split()))\n        print(find_Product(A, N))\n\nmain()", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(array,n):\n    product = 1\n    for i in range(n):\n        product = product*array[i]\n    return product\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\nfrom typing import List\ndef find_Product(arr:List[int],n:int)->int:\n    hashmap = {}\n    prod = 1\n    for i in range(n):\n        if arr[i] in hashmap:\n            continue\n        else:\n            prod*=arr[i]\n            hashmap[arr[i]] = 1\n    return prod\n\ndef main():\n    print(\"Product of non-repeated elements:\",find_Product([1,1,2,3],4))\n    print(\"Product of non-repeated elements:\",find_Product([1,2,3],3))\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(A,n):\n    prod = 1\n    for i in range(n):\n        if A.count(A[i]) > 1:\n            continue\n        else:\n            prod *= A[i]\n    return prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    # code here\n    res = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            res*=i\n    return res\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\n# def find_product(arr,n):\n#     i=0\n#     while i<n:\n#         if arr[i]!=0:\n#             temp=arr[i]\n#             j=i+1\n#             while j<n:\n#                 if arr[j]!=0:\n#                     arr[j]=arr[j]*temp\n#                 j+=1\n#         i+=1\n#     temp=1\n#     for i in range(len(arr)):\n#         if arr[i]!=0:\n#             temp=temp*arr[i]\n#     return temp\n\ndef find_product(arr,n):\n    arr.sort()\n    return arr[-1]*arr[-2]", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\nfrom math import factorial\n\ndef find_Product(arr,n):\n    prod=1\n    fact = [factorial(i) for i in range(n,0,-1)]\n    for i in range(n):\n        prod*=arr[i]*fact[i]\n    return prod\n\n\ndef main():\n    print(find_Product([1,1,2,3],4))\n\n\nmain()", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(a,n):\n    \"\"\"\n    Your Code Here\n    \"\"\"\n    return sum([x for x in a if a.count(x)==1])\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_Product(arr,len(arr))\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[1,1,2,3], 6])\ntest_function([[1,2,3,4,5], 0])\ntest_function([[1,2,3,4,5,6,7,8,9,10], 3628800])\ntest_function([[1,1,2,2,3,3,4,4,5,5,6,6], 0])", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    if n==0:\n        return 1\n    elif n==1:\n        return arr[0]\n    elif n==2:\n        return arr[0]*arr[1]\n    else:\n        return (arr[0]*find_Product(arr[1:],n-1))\n"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef check_k_elements(l: List[Tuple], k: int) -> bool:\n    for item in l:\n        if not item:\n            return False\n        if len(item) < k:\n            return False\n\n    return True\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tup_list, k):\n    \"\"\"Check if the tuple list has all k elements\"\"\"\n    temp_dict = {}\n    for tup in tup_list:\n        if tup in temp_dict:\n            temp_dict[tup] += 1\n        else:\n            temp_dict[tup] = 1\n    for value in temp_dict.values():\n        if value != k:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom typing import List\nimport re\n\n\ndef check_k_elements(elements: List, k: int) -> bool:\n    \"\"\"Return True if all elements are equal to k, else return False.\"\"\"\n    if k == 1:\n        return all(elements) == k\n    if all(elements) == k:\n        return True\n    elif all(elements) != k:\n        return False\n    elif len(elements) > 2:\n        elements.sort(key=lambda x: x[0])\n        for element in elements:\n            elements.remove(element)\n        return check_k_elements(elements, k)\n    elif len(elements) == 2:\n        if elements[0] == elements[1]:\n            elements.remove(elements[0])\n            return check_k_elements(elements, k)\n        else:\n            return False\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(t_list, k):\n    s = set()\n    for i in t_list:\n        if type(i) != tuple:\n            return False\n        if len(i) > k:\n            return False\n        for j in i:\n            if j in s:\n                return False\n            s.add(j)\n    return True\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    tuple_set = set(tuple_list)\n    if len(tuple_set) == k:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    # Write your code here\n    all_element = True\n    for i in tuple_list:\n        if i[0] not in i:\n            all_element = False\n    if all_element == True:\n        return True\n    else:\n        return False\n\ndef test_function(test_case):\n    solution = check_k_elements\n    result = solution(*test_case[0])\n    print(result)\n    if result == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case = [([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], True),\n             ([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, ), (4, 4)], False),\n             ([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4)], True),\n             ([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, 4, 4)], False),\n             ([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, 4, 4, 4)], True),\n             ([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4)], False),\n             ([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, 4)], True),\n             ([(4, 4), (4, ", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuples, k):\n    # your code here\n    def k_elements_in_tuple(tuple):\n        if len(tuple) == k:\n            return True\n        return False\n    \n    for tuple in tuples:\n        if len(tuple) != k:\n            return False\n        for i in tuple:\n            if k_elements_in_tuple(i):\n                return True\n    return True\n\n#     for tuple in tuples:\n#         if len(tuple) != k:\n#             return False\n#         for i in tuple:\n#             if len(i) != k:\n#                 return False\n#     return True\n# def check_k_elements(tuples, k):\n#     # your code here\n#     for tuple in tuples:\n#         if len(tuple) != k:\n#             return False\n#         for i in tuple:\n#             if len(i) != k:\n#                 return False\n#     return True\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tlist, k):\n    # TODO: Write your code here\n    length = len(tlist)\n    if length == 0:\n        return False\n    if length == 1:\n        return True if tlist[0][0] == k else False\n\n    for i in range(0, length - 1):\n        if tlist[i][0] != k:\n            return False\n    return True if tlist[-1][0] == k else False\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom collections import Counter\nfrom typing import List, Tuple, Dict, Any\n\n\ndef check_k_elements(list_of_tuple: List[Tuple], k: int) -> bool:\n    \"\"\"\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, ), (4, 4, 4)], 4) == False\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, ), (4, 4)], 4) == True\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, ), (4, 4, 4, 4, 4)], 4) == False\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, ), (4, 4, 4, 4)], 4) == True\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, ), (4, 4, 4, 4, 5)], 4) == False\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4),"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(word_list):\n    # Your code here\n    word_list = [word.strip(\"1234567890\") for word in word_list]\n    return word_list", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(arr):\n    return [word for word in arr if not any(char.isdigit() for char in word)]\n\n# assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(lst):\n    return [i for i in lst if not any(c.isdigit() for c in i)]\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(l):\n    new_l = []\n    for i in l:\n        new_l.append(''.join([i for i in i if not i.isdigit()]))\n    return new_l", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(strings):\n    new_list = []\n    for string in strings:\n        for letter in string:\n            if letter.isdigit():\n                string = string.replace(letter, \"\")\n        new_list.append(string)\n    return new_list\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(list_str):\n    pass\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n  return [i for i in lst if not i.isdigit()]\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    lst_new = []\n    for l in lst:\n        result = ''.join(filter(str.isdigit, l))\n        lst_new.append(result)\n    return lst_new\n\n# assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(my_list):\n    \"\"\"\n    >>> remove(['4words', '3letters', '4digits'])\n    ['words', 'letters', 'digits']\n    \"\"\"\n    for i in my_list:\n        for j in i:\n            if j.isdigit():\n                my_list.remove(i)\n                \n    return my_list", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(a_list):\n    new_list = []\n    for i in a_list:\n        if i.isalpha():\n            new_list.append(i)\n    return new_list"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Base case\n    \"\"\"\n    if k==0 or k == n:\n        return 1\n    elif k>n:\n        return 0\n    \"\"\"\n    Recursive case\n    \"\"\"\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\n# if __name__ == \"__main__\":\n#     print(binomial_Coeff(5, 2))\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, r):\n    \"\"\"\n    Find binomial coefficient.\n    \"\"\"\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(x,y):\n    if x < y:\n        raise Exception(\"x must be greater than y\")\n    return reduce(mul, range(x, x-y, -1))\n\n#recursive function to find sum of digits of n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    if n == 0:\n        return 1\n    if k > n:\n        return binomial_Coeff(n-1,k)\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\n\ndef main():\n    print(\"Binomial Coefficient of 5,2 is\", binomial_Coeff(5, 2))\n    print(\"Binomial Coefficient of 5,0 is\", binomial_Coeff(5, 0))\n    print(\"Binomial Coefficient of 5,5 is\", binomial_Coeff(5, 5))\n    print(\"Binomial Coefficient of 0,2 is\", binomial_Coeff(0, 2))\n    print(\"Binomial Coefficient of 2,2 is\", binomial_Coeff(2, 2))\n    print(\"Binomial Coefficient of 2,0 is\", binomial_Coeff(2, 0))\n    print(\"Binomial Coefficient of 2,1 is\", binomial_Coeff(2, 1))\n\n\nmain()", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k < 0:\n        return 0\n    if k == 0:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    return (math.factorial(n) // math.factorial(k) // math.factorial(n-k))\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, r):\n    return factorial(n)/(factorial(r)*factorial(n-r))\n\n#test", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    return (factorial(n) // (factorial(n - k) * factorial(k)))\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,ele):\n\treturn arr[ele]\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(list,n):\n    list_count = [0]*n\n    for item in list:\n        list_count[item]+=1\n    for index,item in enumerate(list_count):\n        if item%2!=0:\n            return index\n\n\ndef test_function(test_case):\n    list = test_case[0]\n    solution = test_case[1]\n    output = get_Odd_Occurrence(list,solution)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case = [[[1,2,3,1,2,3,1],[7]],\n             [[1,2,3,4,5,6,7,8,9,10],[10]],\n             [[1,2,3,4,5,6,7,8,9,10],[1]],\n             [[1,2,3,4,5,6,7,8,9,10],[100]],\n             [[1,2,3,4,5,6,7,8,9,10],[3]],\n             [[1,2,3,4,5,6,7,8,9,10],[4]],\n             [[1,2,3,4,5,6,7,8,9,10],[5]],\n             [[1,2,3,4,5,6,7,8,9,10],[6]],\n             [[1,2,3,4,5,6,7,8,9,10],[7]],\n             [[1,2,3,4,5,6,7,8,9,10],[8]],\n             [[1,2,3,4,5,6,7,8,9,10],[9]],\n             [[1,2,3,4,5,6,7,8,9,10],[10]],\n             [[1,2,3,4,5,6,7,8,9,10],[11]]]\n\n\nfor test in test_case:\n    test_function(test)", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(array, n):\n    if n not in array:\n        return -1\n    return array.count(n)\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr,n):\n\toccurrence = 0\n\tfor i in range(n):\n\t\tif arr[i]%2!=0:\n\t\t\toccurrence = occurrence + 1\n\tfor i in range(n):\n\t\tif arr[i] == occurrence:\n\t\t\treturn arr[i]\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, n):\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for key in count:\n        if count[key] % 2 != 0:\n            return key\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(lst, element):\n    count = 0\n    for i in lst:\n        if i==element:\n            count += 1\n    if count%2 != 0:\n        return element\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    dic = {}\n    for i in arr:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in dic:\n        if dic[i] % 2 != 0:\n            return i\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_odd_occurrence(arr):\n    return [x for x in arr if arr.count(x) % 2 != 0]\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr,n):\n    my_dict = dict()\n    for ele in arr:\n        if ele in my_dict:\n            my_dict[ele] += 1\n        else:\n            my_dict[ele] = 1\n    for key in my_dict:\n        if my_dict[key] % 2 == 1:\n            return key\n    return -1\n\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    temp = {}\n    for ele in arr:\n        if ele not in temp:\n            temp[ele] = 0\n        temp[ele] = temp[ele] + 1\n    for ele in temp.keys():\n        if temp[ele] % 2 == 1:\n            return ele\n\n# Test cases:\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\n# O(n) time | O(n) space\ndef count_Substring_With_Equal_Ends(str):\n    if str == \"\":\n        return 0\n    \n    index = 0\n    num_of_substrings = 0\n    \n    while index < len(str):\n        num_of_substrings += 1\n        for i in range(index, len(str)):\n            if i >= len(str) - 1 or str[i] != str[i+1]:\n                break\n            num_of_substrings += 1\n        index += 1\n        \n    return num_of_substrings", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(str1):\n    count=0\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if i!=j:\n                if str1[i]==str1[j]:\n                    count+=1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    temp_dict = {}\n    for i in range(0, len(string)):\n        if string[i] not in temp_dict:\n            temp_dict[string[i]] = 1\n        else:\n            temp_dict[string[i]] = temp_dict[string[i]] + 1\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] == string[i+1]:\n            count = count + temp_dict[string[i]]\n    return count\n\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    result = 0\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if string[i] == string[j]:\n                result +=1\n    return result\n    ", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    result = 0\n    start = 0\n    for i in range(len(string)):\n        if string[i] == string[start]:\n            start = i\n            result += 1\n        else:\n            start = i + 1\n    return result\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(str_input):\n    if len(str_input) < 3:\n        return 0\n    # result = 1\n    i = 0\n    while i <= len(str_input) - 2:\n        if str_input[i] == str_input[-1]:\n            # result += 1\n            j = i + 1\n            while j < len(str_input) and str_input[j] == str_input[i]:\n                # result += 1\n                j += 1\n            i = j\n        i += 1\n    # return result\n    return i\n\ndef main():\n    print(count_Substring_With_Equal_Ends(\"abc\"))\n\n\nmain()", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    if len(s) < 2:\n        return 0\n    s_len = len(s)\n    count = 0\n    for i in range(s_len):\n        if i == 0:\n            continue\n        if s[i] == s[0]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    sub_length = len(str)\n    sum_sub = 1\n    for i in range(sub_length):\n        for j in range(i + 1, sub_length):\n            if str[i] == str[j]:\n                sum_sub += 1\n    return sum_sub\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i] == string[j]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\n\n\ndef top_k(arrs, k):\n    \"\"\"\n    :param arrs:\n    :param k:\n    :return:\n    >>> assert top_k([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n    >>> assert top_k([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],2)==[5, 7]\n    \"\"\"\n    res = []\n    counts = [defaultdict(int) for _ in arrs]\n    for i, arr in enumerate(arrs):\n        for elem in arr:\n            counts[i][elem] += 1\n    for i, arr in enumerate(arrs):\n        for elem in arr:\n            counts[i][elem] -= 1\n    for arr in counts:\n        for elem in arr:\n            heappush(res, (arr[elem], elem))\n        for _ in range(k):\n            heappop(res)\n    return [elem for freq, elem in res]\n\n\ndef test_top_k():\n    assert top_k([[1, 2, 6], [1, 3, 4, 5, 7, 8", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom collections import defaultdict\nfrom heapq import *\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef topK(lists, k):\n    # Build a map of counts\n    frequencyMap = {}\n    for x in lists:\n        for y in x:\n            if y in frequencyMap:\n                frequencyMap[y] += 1\n            else:\n                frequencyMap[y] = 1\n    # Initialize the min heap with the top k elements\n    topKHeap = MinHeap(k)\n    # Insert all elements into the heap\n    for key in frequencyMap:\n        topKHeap.insert(key, frequencyMap[key])\n    # Update the top k values in the heap\n    for i in range(0, k):\n        topKHeap.updateTopK(i)\n    # Extract the top k values\n    return topKHeap.pop()\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import heappush, heappop\nfrom collections import Counter", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nimport heapq\n\n\ndef find_k_frequent(integers_lists, k):\n    max_heap = []\n    result = []\n    for numbers in integers_lists:\n        for number in numbers:\n            if not max_heap or number > max_heap[0][0]:\n                heapq.heappush(max_heap, (-1 * number, number))\n            elif -1 * number < -1 * max_heap[0][0]:\n                heapq.heappushpop(max_heap, (-1 * number, number))\n    for index in range(k):\n        result.append(-1 * heapq.heappop(max_heap)[0])\n    return result\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import *\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nclass Solution:\n    def topKFreq(self, A, B, C, D, k):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :type D: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        return heapq.nlargest(k, A+B+C+D)", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import heappush, heappop\n\ndef func(lists, k):\n    freq = dict()\n    for lst in lists:\n        for n in lst:\n            freq[n] = freq.get(n, 0) + 1\n    maxheap = []\n    for key, value in freq.items():\n        heappush(maxheap, (-value, key))\n    res = [heappop(maxheap)[1] for i in range(k)]\n    return res\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef top_k(lists, k):\n    # Write your code here\n    import heapq\n    l = []\n    for l1 in lists:\n        for l2 in l1:\n            heapq.heappush(l, -l2)\n    if len(l) > k:\n        heapq.heappop(l)\n    return [(-x) for x in l]\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(num):\n    factors = []\n    for i in range(2,int(num**0.5)+1):\n        if num%i == 0:\n            if num//i == i:\n                factors.append(i)\n            else:\n                factors.append(i)\n                factors.append(num//i)\n    return factors[0]\n    ", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    if num==1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        for i in range(2,num):\n            if num%i==0:\n                return max(num/i, max_Prime_Factors(num/i))\n        return num\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    assert type(num) == int\n    ans = 1\n    for i in range(2,num+1):\n        if num % i == 0:\n            ans = max(ans,i)\n    return ans\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    if n == 1:\n        return n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n\n# print(max_Prime_Factors(15))\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\nfrom math import sqrt\n\n\ndef max_Prime_Factors(number):\n    # if number is 1, return 1, else return 2\n    if number == 1:\n        return 1\n    else:\n        for i in range(2, int(sqrt(number)) + 1):\n            if number % i == 0:\n                return i\n\n\ndef test_max_Prime_Factors():\n    # assert max_Prime_Factors(15) == 5\n    assert max_Prime_Factors(10) == 5\n    assert max_Prime_Factors(35) == 5\n    assert max_Prime_Factors(97) == 3\n    assert max_Prime_Factors(1) == 1", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    n : int\n    return: max prime factor of n\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            n //= i\n    return n if n > 1 else 1\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(number):\n    \"\"\"\n    >>> max_Prime_Factors(15)\n    5\n    >>> max_Prime_Factors(100)\n    10\n    >>> max_Prime_Factors(1000)\n    100\n    >>> max_Prime_Factors(6)\n    2\n    >>> max_Prime_Factors(7)\n    7\n    >>> max_Prime_Factors(97)\n    97\n    \"\"\"\n    n = number\n    i = 2\n    result = 1\n    while i <= n:\n        if n%i == 0:\n            result = i\n            while n%i == 0:\n                n = n / i\n        i = i + 1\n    return result\n\ndef test_max_Prime_Factors():\n    assert max_Prime_Factors(15) == 5\n    assert max_Prime_Factors(100) == 10\n    assert max_Prime_Factors(1000) == 100\n    assert max_Prime_Factors(6) == 2\n    assert max_Prime_Factors(7) == 7\n    assert max_Prime_Factors(97) == 97\n    assert max_Prime_Factors(111) == 111\n    assert max_Prime_Factors(267) == 267\n    assert max_Prime_Factors(1111) == 1111\n    assert max_Prime_Factors(2222) == 2222\n    assert max_Prime_Factors(11111) == 11111\n    assert max_Prime_Factors(22222) == 22222\n    assert max_Prime_Factors(111111) == 111111\n    assert max_Prime_Factors(222222) == 222222\n    assert max_Prime_Factors(1111111) == 1111111\n    assert max_Prime_Factors(2222222) == 2222222\n    assert max_Prime_Factors(111111", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n# Use the Sieve of Eratosthenes to find all primes\ndef max_Prime_Factors(num):\n\tprime_factors = []\n\t# Find all primes up to sqrt of the given number\n\tfor i in range(2,int(num**0.5)+1):\n\t\t# Check if i is a divisor of num\n\t\tif num % i == 0:\n\t\t\t# if yes then prime_factors will contain both i and num/i\n\t\t\tprime_factors.append(i)\n\t\t\tprime_factors.append(int(num/i))\n\treturn max(prime_factors)\n\n# Test Cases", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n# import math\n\n# def max_Prime_Factors(n):\n#     if n == 1:\n#         return 1\n#     for i in range(2, n):\n#         if n % i == 0:\n#             return max(max_Prime_Factors(i), max_Prime_Factors(n // i))\n#     return n\n\n\n# def max_Prime_Factors(n):\n#     return math.sqrt(n)\n\n\n# def max_Prime_Factors(n):\n#     prime_factors = []\n#     while n % 2 == 0:\n#         prime_factors.append(2)\n#         n = n / 2\n#     for i in range(3, int(math.sqrt(n)) + 1, 2):\n#         while n % i == 0:\n#             prime_factors.append(int(i))\n#             n = n / i\n#     if n > 2:\n#         prime_factors.append(n)\n#     return prime_factors\n\ndef max_Prime_Factors(n):\n    i = 2\n    factors = []\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\n# print(max_Prime_Factors(15))\n# print(max_Prime_Factors(15000))\n\ndef main():\n    num = 1500000\n    for i in range(1, num + 1):\n        # print(max_Prime_Factors(i))\n        print(len(max_Prime_Factors(i)))\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    # your code here\n    # idea to solve this problem is to take the number and divide it by\n    # 2 until it returns 0, then return the prime number that it divided by\n    # if this number is even, then we will be left with a new number to divide\n    # by, which is the next prime number, therefore, we need to divide by\n    # these numbers until the last prime number is found\n    # e.g.\n    # 7 = 7\n    # 3 = 3\n    # 3 = 1\n    # 3 = 3\n    # 1 = 1\n    # 1 = 3\n    # 1 = 7\n    # 3 = 3\n    # 7 = 7\n    # therefore the max prime factors are 7 and 3\n    if n % 2 == 0:\n        # if n is even, divide it by 2 to get the next number to\n        # divide by\n        return max_Prime_Factors(n / 2)\n    else:\n        # if n is odd, then divide it by 3, then it will be\n        # divided by 5, then by 7\n        return max(max_Prime_Factors(n / 3), max_Prime_Factors(n / 5), max_Prime_Factors(n / 7))\n\ndef test_max_Prime_Factors():\n    assert max_Prime_Factors(15) == 5\n    assert max_Prime_Factors(100) == 5\n    assert max_Prime_Factors(1000) == 11\n    assert max_Prime_Factors(1000000000) == 6857\n\n"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal):\n\tif decimal == 0:\n\t\treturn 0\n\treturn (decimal%2) + decimal_To_Binary(int(decimal/2))\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(n):\n    bin_list = []\n    while n:\n        bin_list.append(n%2)\n        n = n//2\n    bin_list.reverse()\n    return bin_list\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(number):\n    binary_list = []\n    while number != 0:\n        binary_list.append(number%2)\n        number = int(number / 2)\n    return binary_list[::-1]\n\n# assert decimal_To_Binary(10) == 1010\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(dec):\n    return bin(dec)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(num):\n\tif num==0:\n\t\treturn 0\n\telse:\n\t\treturn 1+decimal_To_Binary(num//2)", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_to_binary(decimal_number):\n    binary_number = ''\n    while decimal_number:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\ndef test_function():\n    assert decimal_to_binary(10) == '1010'\n    assert decimal_to_binary(12) == '1100'\n    assert decimal_to_binary(42) == '101010'\n    print(\"ALL TEST CASES PASSED\")\n\ntest_function()", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(dec):\n  x = []\n  while dec > 0:\n    x.append(dec % 2)\n    dec = dec // 2\n  return x[::-1]\n\n# assert decimal_To_Binary(10) == 1010\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(dec):\n    str_ = []\n    while(dec):\n        rem = dec % 2\n        str_.append(rem)\n        dec = dec // 2\n    return \"\".join(str(i) for i in str_[::-1])\n\ndef binary_To_Decimal(bin):\n    dec = 0\n    for i in range(len(bin)):\n        if bin[i] == '1':\n            dec += 2 ** (len(bin) - i - 1)\n    return dec", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(n):\n    return bin(n)[2:]\n\ndef binary_To_Decimal(binary_num):\n    return int(binary_num, 2)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal_number):\n\treturn bin(decimal_number)[2:]\n\ndef main():\n\tassert decimal_To_Binary(10) == 1010\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(array, end):\n    \"\"\"\n    :param array:\n    :param end:\n    :return:\n    \"\"\"\n    for num in range(len(array)):\n        if num != array[num]:\n            return num\n    for num in range(end):\n        if num not in array:\n            return num\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr,n):\n\tif len(arr) != n:\n\t\traise ValueError(\"array is not of size {}\".format(n))\n\treturn n*(n+1)/2 - sum(arr)\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(sorted_array, max_number):\n    return max_number + 1 - sorted_array[len(sorted_array) - 1] - sorted_array[len(sorted_array) - 2]\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\n#input array\narr = [1,2,3,4,5]\narr = sorted(arr)\n#print(\"array:\",arr)\n\n#missing number\nmissing_num = arr[-1] + 1\n#print(\"missing number:\", missing_num)\n\n#if no missing number", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,n):\n\tarr = set(arr)\n\ts = set(range(1,n+1))\n\treturn list(s.difference(arr))[0]\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\nimport sys\n\n\ndef find_missing(arr, target):\n    \"\"\"\n    Binary search on the given list of numbers to find the missing number in it.\n    :param arr: list of numbers in a sorted array\n    :param target: number to be searched in the array\n    :return: missing number if it exists in the array, else -1\n    \"\"\"\n    assert isinstance(arr, list)\n    assert isinstance(target, int)\n    start, end = 0, len(arr)\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            if mid > 0 and arr[mid] == arr[mid-1]:\n                start = mid + 1\n            else:\n                end = mid\n        elif arr[mid] > target:\n            end = mid\n        else:\n            start = mid + 1\n    return arr[start] if arr[start] != target else -1\n\n\ndef test_function(test_case):\n    target = test_case[0]\n    arr = test_case[1]\n    solution = test_case[2]\n    output = find_missing(arr, target)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Test cases\ntest_case_1 = [4, [1, 2, 3, 5], 4]\ntest_function(test_case_1)\n\ntest_case_2 = [1, [1, 2, 3, 5], -1]\ntest_function(test_case_2)\n\ntest_case_3 = [4, [1, 2, 3, 4, 6, 7], -1]\ntest_function(test_case_3)\n\n# Test cases for random inputs\nimport random\n\nfor i in range(100):\n    arr = list(range(1, random.randint(5, 100)))\n    arr.sort()\n    target = random.randint(1, max(arr))\n    solution = arr.index(target) + 1 if arr.index(target) != len(arr) - ", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\nimport unittest\nfrom typing import List\n\n\ndef find_missing(nums: List[int], n: int) -> int:\n    missing = nums.index(n)\n    if missing < 0:\n        return missing\n    return n - 1\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    total = (n*(n+1))//2\n    return total - sum(arr)\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(array, num):\n    \"\"\"\n    Find the missing number in a sorted array.\n\n    :param array: the array\n    :type array: list\n    :param num: the number to be found\n    :type num: int\n    :return: The missing number\n    \"\"\"\n    a = 0\n    b = len(array) - 1\n    while a <= b:\n        if array[a] + array[b] == num:\n            return num\n        elif array[a] + array[b] < num:\n            a += 1\n        else:\n            b -= 1\n    return num\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return n*(n+1)*(2*n+1)//6\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    count = 1\n    rect_num = 1\n    while count < n:\n        rect_num += count\n        count += 1\n    return rect_num\n\n\ndef main():\n    print(find_rect_num(int(input(\"Enter the nth rectangular number: \"))))\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return (n * (n+1)) // 2\n\ndef find_rect_num_2(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nfrom typing import Tuple\n\ndef find_rect_num(n: int) -> int:\n    n += 1\n    if n % 2 == 0:\n        return n * (n + 1) // 2\n    else:\n        return (n ** 2) // 2\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return n * (n + 1) * (n + 2) / 6.0\n\n\ndef main():\n    n = int(raw_input(\"Input n: \"))\n    print find_rect_num(n)\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return ((n + 1) * n) // 2\n\ndef find_rect_num_optimized(n):\n    return ((n + 1) * n) // 2\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\nfrom math import ceil\n\n\ndef find_rect_num(n: int) -> int:\n    \"\"\"\n    >>> find_rect_num(4)\n    20\n    >>> find_rect_num(2)\n    5\n    >>> find_rect_num(1)\n    1\n    \"\"\"\n    return ceil(n ** 2 / 2)\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return (n * (n + 1) * 2) // 2\n\n# Test cases", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    \"\"\"\n    :param n: The nth rectangular number\n    :return: The nth rectangular number\n    \"\"\"\n    return n * (n + 1) // 2\n\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(num1, num2, N):\n    return str(num1/num2)[N-1]\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(n,m,k):\n    s=n\n    for i in range(1,k+1):\n        if(s>=m):\n            s=s//m\n        else:\n            s=s-1\n        if(s<1):\n            return 0\n    return s\n\ndef find_Nth_Digit(n,m,k):\n    s=n\n    m=10*m\n    for i in range(1,k+1):\n        if(s>=m):\n            s=s//m\n        else:\n            s=s-1\n        if(s<1):\n            return 0\n    return s\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\nimport math\n\ndef find_Nth_Digit(N, x, y):\n    \n    f1 = x\n    f2 = y\n    s = math.log10(f1)\n    s1 = math.log10(f2)\n    if s>s1:\n        s = s1\n    elif s<s1:\n        f1 = f2\n        f2 = x\n        s = s1\n    s = s + 1\n    count = 1\n    p = 0\n    s = int(s)\n    while count<=N:\n        x = x - (f1/(math.pow(10, s)))\n        f1 = f1 - (f1/(math.pow(10, s)))\n        f2 = f2 + (f1/(math.pow(10, s)))\n        p = p + f1\n        s = s + 1\n        count = count + 1\n    return p % 10", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\nfrom math import log\n\n\ndef find_Nth_Digit(first, second, n):\n    ans = 0\n    tmp = 0\n    k = 0\n    while k < n:\n        tmp = first*tmp + second\n        first = tmp // 10\n        second = tmp % 10\n        k += 1\n        if k >= n:\n            ans = int(str(first)[n-1])\n    return ans\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(n, x, y):\n    print(x, y)\n    if x == y:\n        return str(n)\n    if n == 1:\n        return \"0\"\n    elif n == 2:\n        return str(x % 10)\n    elif n == 3:\n        return str((x // 10 + y) % 10)\n    elif n == 4:\n        return str(y % 10)\n    elif n == 5:\n        return str((x // 10 + y) // 10)\n    elif n == 6:\n        return str((y // 10) % 10)\n    elif n == 7:\n        return str(x // 100)\n    elif n == 8:\n        return str((x // 10 + y) // 100)\n    elif n == 9:\n        return str(y // 100)\n    elif n == 10:\n        return str(x // 1000)\n    elif n == 11:\n        return str((x // 10 + y) // 1000)\n    elif n == 12:\n        return str(y // 1000)\n    elif n == 13:\n        return str(x // 10000)\n    elif n == 14:\n        return str((x // 10 + y) // 10000)\n    elif n == 15:\n        return str(y // 10000)\n    elif n == 16:\n        return str(x // 100000)\n    elif n == 17:\n        return str((x // 10 + y) // 100000)\n    elif n == 18:\n        return str(y // 100000)\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(n, d1, d2):\n    \"\"\"\n    :param n: int\n    :param d1: int\n    :param d2: int\n    :return: int\n    \"\"\"\n    p = 1\n    q = 0\n    c = 0\n    while p*d1 + q*d2 <= n:\n        p, q = q, p + q\n        c += 1\n\n    return int(n - p * d1) // d2 + c\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, N):\n    n = N\n    count = 0\n    number = num1/num2\n    while n > 0:\n        number = number*10\n        n -= 1\n    count = len(str(number))\n    answer = int(str(number)[count-N])\n    return answer\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(n, a, b):\n    c = 0\n    while a != 0:\n        if a % 10 == n:\n            return c+1\n        a = a//10\n        c+=1\n    return c+1 if a == b else -1\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(a, b, n):\n    count = 0\n    while b > 0:\n        a, b = a * 10 + b, a\n        count += 1\n\n    while n > 0:\n        count += 1\n        n -= 1\n\n    index = count - n - 1\n    return a % 10 ** index // 10 ** (index - 1)\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\nfrom typing import List\n\n\ndef sort_mixed_list(mixed_list: List[int | str]) -> List[int | str]:\n    \"\"\"\n    Sort a mixed list of integers and strings in increasing order.\n\n    Parameters\n    ----------\n    mixed_list : List[int | str]\n        A list of integers and strings to sort\n\n    Returns\n    -------\n    List[int | str]\n        The sorted list of integers and strings\n    \"\"\"\n    return sorted(mixed_list)\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(l):\n    return sorted(l)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    \"\"\"Sort the list by numerical values, then alphabetically.\"\"\"\n    # Split into two lists by whether the values are strings or not.\n    sorted_list = []\n    for i in mixed_list:\n        if i.isdigit():\n            sorted_list.append(int(i))\n        else:\n            sorted_list.append(i)\n\n    # Sort the two lists separately.\n    return sorted(sorted_list) + sorted([i for i in mixed_list if not i.isdigit()])\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(a):\n    \"\"\"\n    Sort the mixed list using insertion sort.\n    \"\"\"\n    if not a:\n        return []\n    # initialize two pointers, one for the front and one for the back\n    front = 0\n    back = len(a) - 1\n    # while front is not larger than back\n    while front <= back:\n        # if a[front] is less than or equal to a[back]\n        if type(a[front]) <= type(a[back]):\n            front += 1\n            # if a[front] is less than or equal to a[back]\n        elif type(a[front]) >= type(a[back]):\n            # swap a[front] and a[back]\n            a[front], a[back] = a[back], a[front]\n            # update back\n            back -= 1\n        # if front is not larger than back\n    return a\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\n# naive solution\ndef sort_mixed_list(l):\n    new_l = []\n    for item in l:\n        if type(item) is int:\n            new_l.append(item)\n        else:\n            new_l.append(item)\n    return sorted(new_l)\n\n\n# top-down solution\ndef sort_mixed_list(l):\n    if len(l) <= 1:\n        return l\n    else:\n        return sort_mixed_list([x for x in l if type(x) is not int]) + [l[0] if type(l[0]) is int else None]\n\n\n# bottom-up solution\ndef sort_mixed_list(l):\n    if len(l) <= 1:\n        return l\n    else:\n        new_l = []\n        i = 0\n        j = len(l) - 1\n        while i < j:\n            if type(l[i]) is int:\n                new_l.append(l[i])\n                i += 1\n            elif type(l[j]) is int:\n                new_l.append(l[j])\n                j -= 1\n            else:\n                new_l.append(l[i])\n                i += 1\n                new_l.append(l[j])\n                j -= 1\n        new_l.append(l[i])\n        new_l.append(l[j])\n        return new_l", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    \"\"\"\n    Sort the given mixed list of integers and strings.\n    \n    >>> assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    >>> sort_mixed_list([1,2,3])\n    [1, 2, 3]\n    \"\"\"\n    ...\n\ndef test_sort_mixed_list():\n    assert sort_mixed_list([1,2,3]) == [1,2,3]\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]) == [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert sort_mixed_list([1,'a',2,'b']) == [1, 2, 'a', 'b']\n    assert sort_mixed_list([1,'2',2,'b']) == [1, '2', 2, 'b']\n    assert sort_mixed_list([1,2,'2',2,'b']) == [1, 2, '2', '2', 'b']\n    assert sort_mixed_list([1,2,'2',2,'b',3]) == [1, 2, '2', '2', 'b', 3]\n    assert sort_mixed_list(['z','2',2,'b']) == ['2', 2, '2', 'b', 'z']\n    assert sort_mixed_list([1,2,3,'3',3]) == [1, 2, 3, '3', 3]\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(li):\n    li.sort()\n    return li\n\nli = [19,'red',12,'green','blue', 10,'white','green',1]", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\nimport math\n\n\ndef sort_mixed_list(l):\n    return sorted(l, key=lambda i: (type(i).__name__, i))\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\n# Dynamic Programmming\ndef sort_mixed_list(mixed_list):\n    n = len(mixed_list)\n    sorted_list = [None] * n\n    for i in range(n):\n        if is_number(mixed_list[i]):\n            sorted_list[i] = mixed_list[i]\n        else:\n            sorted_list[i] = mixed_list[i].lower()\n    sorted_list.sort()\n    for i in range(n):\n        if not is_number(sorted_list[i]):\n            sorted_list[i] = int(sorted_list[i])\n    return sorted_list\n\ndef is_number(number):\n    try:\n        int(number)\n        return True\n    except:\n        return False", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    sorted_lst = []\n    for i in range(len(lst)):\n        if type(lst[i]) == str:\n            sorted_lst.append(lst[i])\n        else:\n            sorted_lst.append(lst[i])\n    \n    sorted_lst.sort()\n    return sorted_lst\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    even_list = []\n    odd_list = []\n    for i in range(len(lst)):\n        if lst[i]%2==0:\n            even_list.append(lst[i])\n        else:\n            odd_list.append(lst[i])\n    return len(even_list)/len(lst)", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(num):\n    # Write your code here.\n    even = [i for i in num if i%2==0]\n    odd = [i for i in num if i%2!=0]\n    return len(even)*len(odd)\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(nums):\n    even = odd = 0\n\n    for i in nums:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even + odd\n\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    num_evens = 0\n    num_odds = 0\n    for i in lst:\n        if i%2 == 0:\n            num_evens += 1\n        else:\n            num_odds += 1\n    return num_odds//2 + num_evens//2\n\ndef test_function(test_case):\n    if div_even_odd(test_case[0]) == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[1,3,5,7,4,1,6,8], 4])\ntest_function([[1,3,5,7,4,1,6,8], 3])\ntest_function([[1,3,5,7,4,1,6,8], 7])\ntest_function([[1,3,5,7,4,1,6,8], 2])\ntest_function([[1,3,5,7,4,1,6,8], 1])", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\nimport math\n\n\ndef div_even_odd(lst):\n    even_lst = []\n    odd_lst = []\n    for i in lst:\n        if i % 2 == 0:\n            even_lst.append(i)\n        else:\n            odd_lst.append(i)\n    if len(even_lst) > len(odd_lst):\n        return even_lst[0] / odd_lst[0]\n    else:\n        return odd_lst[0] / even_lst[0]\n\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n  if len(lst) < 2:\n    return 0\n  total = 0\n  num = 0\n  for i in lst:\n    if i % 2 == 0:\n      if num == 0:\n        total += 1\n        num += 1\n      else:\n        total += 1\n    else:\n      if num == 0:\n        total += 1\n        num += 1\n      else:\n        total += 2\n  return total\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(l):\n    for i in l:\n        if i%2==0:\n            num1=i\n            break\n    else:\n        return None\n    for i in l:\n        if i%2!=0:\n            num2=i\n            break\n    else:\n        return None\n    return (num1+num2)/2", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    count = 0\n    for i in lst:\n        if i%2==0:\n            count+=1\n        else:\n            count-=1\n    return count\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(num_list):\n    # create 2 lists: even and odd\n    even_num = []\n    odd_num = []\n    for i in num_list:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    # return the length of the two lists\n    return len(even_num), len(odd_num)\n\n# test", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    assert all(type(i) == int for i in lst)\n\n    even = odd = 0\n    for i in lst:\n        if i%2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(s):\n    #str = sorted(s)\n    #print(str)\n    if len(s)==1:\n        return s\n    if s[0]==s[1]:\n        return rearange_string(s[2:])+s[0]+s[1]\n    if s[0]!=s[1]:\n        return rearange_string(s[1:])+s[0]", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\n#https://www.geeksforgeeks.org/rearrange-characters-given-string-such-that-neighbouring-chars-are-not-equal/\n\ndef rearrange_string(string):\n    \n    stack = []\n    output = \"\"\n    for i in string:\n        if len(stack)==0:\n            stack.append(i)\n        elif stack[-1]==i:\n            stack.pop()\n        else:\n            stack.append(i)\n    return ''.join(stack)\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearrange_string(string):\n    string=sorted(string)\n    result=''\n    for i in string:\n        if result=='' or result[-1]!=i:\n            result+=i\n    return result", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(str):\n    lst = []\n    for i in range(len(str)):\n        if str[i] in lst:\n            return False\n        else:\n            lst.append(str[i])\n    return lst\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    result=\"\"\n    index=0\n    while index<len(string):\n        if index+1<len(string) and string[index]!=string[index+1]:\n            result+=string[index]\n            index+=2\n        elif index+1==len(string):\n            result+=string[index]\n            break\n        else:\n            result+=string[index]\n            index+=1\n    return result\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearrange_string(string):\n    s = string[0]\n    for char in string[1:]:\n        if char==s[0]:\n            continue\n        if char==s[-1]:\n            s = s[:-1]+char\n        else:\n            s+=char\n    return s", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(s):\n    if len(s) <= 1:\n        return s\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return rearange_string(s[:i]+s[i+2:])\n    return s", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\nimport string\n\ndef rearange_string(s):\n    if(len(s)<2):\n        return s\n    l=list(s)\n    for i in range(len(l)-1):\n        if(l[i]==l[i+1] and l[i] in string.ascii_lowercase):\n            l[i+1]=l[i+1].upper()\n            l[i]=l[i].upper()\n    return \"\".join(l)\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(input):\n    l = list(input)\n    if len(l)<3:\n        return \"\".join(l)\n    l1 = l[0]\n    l2 = l[1]\n    for i in l[2:]:\n        if l2 == i:\n            return \"\"\n        l2 = i\n    return l1+l2+\"\".join(l[2:])", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(s):\n    for i in range(len(s)-1):\n        if s[i]==s[i+1] and i!=0:\n            return \"\"\n    for i in range(len(s)-2):\n        if s[i]==s[i+1] and s[i+2]==s[i]:\n            return \"\"\n    return s"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\ndef freq_element(input_list: List[List[int]]) -> dict:\n    return dict(Counter(flat_list))\n\ndef flat_list(input_list: List[List[int]]) -> List[int]:\n    flat_list = []\n    for sub_list in input_list:\n        flat_list.extend(sub_list)\n    return flat_list", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nimport collections\n\ndef freq_element(l):\n    return collections.Counter(element for sublist in l for element in sublist)\n\n# Alternative approach\ndef freq_element(l):\n    freq = {}\n    for sublist in l:\n        for element in sublist:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(list):\n    return collections.Counter([i for sublist in list for i in sublist])\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import defaultdict\n\ndef freq_element(l):\n    freq = defaultdict(int)\n    for sublist in l:\n        for element in sublist:\n            freq[element] += 1\n    return freq\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\n\ndef freq_element(lst):\n    lst = [i for j in lst for i in j]\n    return Counter(lst)\n\n# print(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]))\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(array):\n    from collections import defaultdict\n    a=defaultdict(int)\n    for i in array:\n        for j in i:\n            a[j]+=1\n    return a\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\n#return a dict with key as an element of list and value as the count of how many times element is present\n#use collections module\nfrom collections import defaultdict\n\ndef freq_element(list_of_lists):\n    freq_dict = defaultdict(int)\n    for list in list_of_lists:\n        for i in list:\n            freq_dict[i]+=1\n    return freq_dict\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\ndef freq_element(list_of_lists):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    freq_dict = Counter()\n    for list in list_of_lists:\n        for element in list:\n            freq_dict[element] += 1\n    return freq_dict", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(arr):\n    arr1 = []\n    for i in range(len(arr)):\n        for j in arr[i]:\n            arr1.append(j)\n    return Counter(arr1)\n\n#assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\n\ndef freq_element(lst: list) -> dict:\n    return Counter([k for row in lst for k in row])\n\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x%2 ==0,lst))\n\ndef test_filter_evennumbers():\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    print(\"Success!\")\n\n\ndef test_filter_evennumbers():\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    print(\"Success!\")\n\n\ndef test_filter_evennumbers():\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    print(\"Success!\")\n\n\ndef test_filter_evennumbers():\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    print(\"Success!\")\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(mylist):\n    result = list(filter(lambda x: x % 2 == 0, mylist))\n    return result\n\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x % 2 == 0, lst))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(nums):\n    return list(filter(lambda n: n%2==0, nums))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(lst):\n    return list(filter(lambda num: num % 2 == 0, lst))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x % 2 == 0, lst))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n# list comprehension\ndef filter_evennumbers(numbers):\n    return [number for number in numbers if number%2==0]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(arr):\n    return list(filter(lambda x:x%2==0,arr))\n\narr1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\n# Solution 1:\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x%2 == 0, lst))\n\n# Solution 2:\ndef filter_evennumbers(lst):\n    return [x for x in lst if x%2 == 0]\n\n# Test case:\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(l):\n    return list(filter(lambda x: x%2==0, l))"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,n):\n    hashMap = dict()\n    for i in range(n):\n        hashMap[arr[i]] = hashMap.get(arr[i],0)+1\n    return sum(hashMap.values())-n\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    if n in arr:\n        return arr.count(n)\n    else:\n        return 0\n\n# assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,n):\n    d = {}\n    s = 0\n    for i in arr:\n        d[i] = d.get(i,0)+1\n        s += i\n    for i in range(1,n+1):\n        if i in d:\n            s -= i\n            d[i] -= 1\n    return s\n\narr = [1,2,3,1,1,4,5,6,1,2,3,4,5,6]\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\n# Approach 1\ndef find_Sum(arr,n):\n    seen = set()\n    result = 0\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n        else:\n            result += i\n    return result\n\n# Approach 2\ndef find_Sum(arr,n):\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                return arr[i]\n            if arr[j] > arr[i]:\n                break\n    return 0\n\n# Approach 3\ndef find_Sum(arr,n):\n    seen = set()\n    result = 0\n    for i in arr:\n        if i in seen:\n            result += i\n        seen.add(i)\n    return result\n\n# Approach 4\ndef find_Sum(arr,n):\n    seen = set()\n    result = 0\n    for i in arr:\n        result += i\n        seen.add(i)\n    return result - (len(seen) - 1) * len(arr)\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_Sum(arr: List[int], n: int) -> int:\n    dict_arr = {}\n\n    for num in arr:\n        dict_arr[num] = 1 + dict_arr.get(num, 0)\n\n    sum_of_arr = sum(dict_arr.values())\n    return n - sum_of_arr\n\n\ndef main():\n    assert find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8) == 3\n\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, n, Sum=0, index=0):\n    if index > n - 1:\n        return Sum\n    if arr[index] not in arr[index+1:]:\n        return find_Sum(arr, n, Sum+arr[index], index+1)\n    else:\n        return find_Sum(arr, n, Sum, index+1)", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,n):\n    arr=set(arr)\n    return sum(arr)", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, summ):\n    return find_Sum_util(arr, summ, {})\n\ndef find_Sum_util(arr, summ, result):\n    if summ == 0:\n        return result\n    if summ in result:\n        return result[summ]\n    else:\n        for i in range(0, len(arr)):\n            result[summ] = result.get(summ, 0) + arr[i]\n            result = find_Sum_util(arr[i+1:], summ-arr[i], result)\n        return result\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_Sum(arr, summ=summ)\n    if summ == 0:\n        assert output == solution, f'Expected {solution} but got {output}'\n    else:\n        assert output is solution, f'Expected {solution} but got {output}'\n\narr = [1, 2, 3, 1, 1, 4, 5, 6]\nsumm = 8\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [2, 3, 1, 2, 4, 3]\nsumm = 6\nsolution = 3\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [5, 6, 4, 6, 6, 1, 5, 1]\nsumm = 9\nsolution = 2\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 1, 1, 4, 5, 6]\nsumm = 0\nsolution = 3\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [2, 2, 2, 2, 2, 2]\nsumm", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    if n<0:\n        return 0\n    x = 0\n    for i in arr:\n        if arr.count(i)>1:\n            x += i\n    return x\narr = [1,2,3,4,1,1,4,5,6]\nn = 8", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n    curr_sum = 0\n    count = 0\n    for i in range(n):\n        if arr[i] != 0:\n            count += 1\n            curr_sum += arr[i]\n        else:\n            if count == 0:\n                continue\n            if curr_sum == k:\n                count = 0\n                curr_sum = 0\n                continue\n            curr_sum -= arr[i - count]\n            if curr_sum == k:\n                count = 0\n                curr_sum = 0\n                continue\n            count -= 1\n    return curr_sum\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\n\ndef text_match(text):\n    text = re.sub(r'[^\\w]', '', text)\n    result = []\n\n    for seq in re.findall(r'\\b[a-z]+', text):\n        if '_' in seq:\n            result.append(seq)\n\n    return f'Found {len(result)} matches!' if result else 'Nothing found.'\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    return re.findall(r'\\b[a-z_]+\\b',text)\n    ", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ntext = \"aab_cbbbc\"\n\ndef text_match(text):\n    # Write your code here.\n    pattern = re.compile(r\"[a-z]+_[a-z]+\")\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'No match!'\n\n\n# These are the tests we use to determine if the solution is correct.\n# You can add your own at the bottom, but they are otherwise not editable!\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    if re.search(\"_+\", text):\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    if re.search(r'[^a-z]', text):\n        return \"Invalid Text\"\n    elif re.search(r'_', text):\n        return \"Invalid Text\"\n    elif re.search(r'(?<=_)([a-z])(?=_)([a-z])', text):\n        return \"Found a match!\"\n    else:\n        return \"Invalid Text\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    \"\"\"\n    If the text contains the pattern aab_cbbbc then return the string 'Found a match!'.\n    Otherwise return the string 'No match'.\n    \"\"\"\n    result = re.search(r'^aab_cbbbc$', text)\n    if result is not None:\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    \"\"\"\n    find sequences of lowercase letters joined with an underscore using regex\n    return a string 'Found a match!' if the pattern is found, else return 'No match found'\n    \"\"\"\n    pattern = r\"[a-z]+\"\n    result = re.search(pattern, text)\n    if result:\n        return \"Found a match!\"\n    else:\n        return \"No match found\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    pattern = re.compile('^[a-z]+_?[a-z]+')\n    if pattern.match(text):\n        return 'Found a match!'\n    return 'Nothing found'\n\n#tests", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(string):\n    if re.search(r'\\w+_+\\w+', string):\n        return 'Found a match!'\n    else:\n        return 'No match.'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\n\ndef text_match(text: str) -> str:\n    matches = re.findall(\"[a-z]+_\\w+\", text)\n    if matches:\n        return f'Found a match! {matches}'\n    return f'No matches found.'\n\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(input):\n    print('input',input)\n    if input[0:5]=='python':\n        return 'matched'\n    else:\n        return 'Not matched!'\n    \ntext_match_string('python')```\n\n### Output:\n\ninput python\n\n### Description:\n\nExercise 21. Write a function that uses the regular expression `^[0-9]+(\\.[0-9]+)?$` to see whether a string consists of one or more digits followed by zero or one occurrence of a period and one or more digits.\n\n### Code:\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    if(text.startswith(\"python\")):\n        return(\"Matched!\")\n    else:\n        return(\"Not matched!\")\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    if text.startswith(\" python\"):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(target_str):\n    if target_str.find(' python') == 0:\n        return 'matched'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n    \"\"\"\n    TODO: Write a function that matches a word at the beginning of a string.\n    \"\"\"\n    if string[0] == 's':\n        return 'matched!'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(strng):\n    if strng[0:4] == \"pyth\":\n        return \"matched\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n  if text[:len(text_match_string.match)] == text_match_string.match:\n    return \"Matched!\"\n  else:\n    return \"Not matched!\"\n\ntext_match_string.match = \"python\"", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\n# a = 'python'\n\n# if text_match_string(a) == \"Not matched!\":\n#     print(\"Success\")\n# else:\n#     print(\"Fail\")\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    result = ''\n    for i in range(len(text)):\n        if text[i:i+4] == ' python':\n            result = 'Matched'\n    if result == '':\n        result = 'Not matched!'\n    return result\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(input_string):\n  if input_string.startswith(\"python\"):\n    return \"Matched\"\n  return \"Not matched!\""], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    \"\"\"\n    >>> get_gcd([2, 4, 6, 8, 16])\n    2\n    \"\"\"\n    from fractions import gcd\n    return gcd(*arr)\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom functools import reduce\n\n\ndef get_gcd(numbers):\n    \"\"\"\n    Greatest common divisor of the list numbers\n\n    :param numbers:\n    :return:\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    return reduce(lambda x, y: gcd(x, y), numbers)\n\n\ndef gcd(x, y):\n    \"\"\"\n    Calculate the greatest common divisor of two numbers\n\n    :param x:\n    :param y:\n    :return:\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] % arr[1] == 0:\n            return arr[1]\n        return arr[0]\n    elif len(arr) == 3:\n        return arr[0] if arr[0] % arr[1] == 0 else get_gcd([arr[1], arr[2]])\n    else:\n        mid = len(arr) // 2\n        l_gcd = get_gcd(arr[:mid])\n        r_gcd = get_gcd(arr[mid:])\n        l_gcd_small = l_gcd if l_gcd < r_gcd else r_gcd\n        return get_gcd(arr[mid:]) if l_gcd_small < arr[mid:] else get_gcd(arr[:mid])", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return gcd(arr[0], arr[1])\n\n    # find gcd of first two elements\n    a = arr[0]\n    b = arr[1]\n    while b:\n        a, b = b, a % b\n\n    # find gcd of the remaining elements\n    for num in arr[2:]:\n        a = gcd(a, num)\n\n    return a\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n\n    return gcd(b, a % b)\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom functools import reduce\n\n\ndef get_gcd(nums):\n    \"\"\"\n    Algorithm\n    ---------\n    If the greatest common divisor (GCD) of two numbers is equal to 1, then both numbers are said to be coprime.\n\n    For a given number a, the GCD of that number with any number b is given as follows.\n\n    GCD(a, b) = GCD(b, a%b)\n    This can be generalized as follows.\n    GCD(a, b) = GCD(b, a%b) = GCD(b, (a - b * (a/b)))\n\n    Parameters\n    ----------\n    nums : List[int]\n        A list of integer numbers\n\n    Returns\n    -------\n    int\n        The greatest common divisor (GCD) of the numbers in the input list\n    \"\"\"\n    return reduce(lambda x, y: y if (x == 1) else x, nums, nums[-1])\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    \"\"\"\n    Assume the given array is not empty and no negative elements.\n    \"\"\"\n    from functools import reduce\n    return reduce(lambda x, y: gcd(x, y), arr)\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    '''\n    :param arr: integer array\n    :return: GCD of the elements in the array\n    '''\n    if len(arr) < 2:\n        return arr[0]\n\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return get_gcd(arr[0], arr[1])\n        else:\n            return get_gcd(arr[1], arr[0])\n\n    l_arr = arr[:len(arr)//2]\n    r_arr = arr[len(arr)//2:]\n\n    return get_gcd(get_gcd(l_arr), get_gcd(r_arr))\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    \"\"\"\n    I created two dictionaries for keeping track of the prime factors and their multiplicities.\n    The key is the prime factor and the value is its multiplicity.\n    \"\"\"\n    dict1 = {}\n    dict2 = {}\n    for i in arr:\n        if i % 2 == 0:\n            if 2 not in dict1:\n                dict1[2] = 1\n            else:\n                dict1[2] += 1\n        for j in range(3, int(i ** 0.5) + 1, 2):\n            if i % j == 0:\n                if j not in dict1:\n                    dict1[j] = 1\n                else:\n                    dict1[j] += 1\n                if i // j not in dict2:\n                    dict2[i // j] = 1\n                else:\n                    dict2[i // j] += 1\n\n    dict_min = dict1\n    if dict_min == {}:\n        dict_min = dict2\n\n    \"\"\"\n    Create a new dictionary for keeping the prime factor and the multiplicity of its multiplicities.\n    Iterate over dict_min dictionary and for each key, add key and its value to the new dictionary.\n    Iterate over dict2 dictionary and for each key, if key exists in dict_min, add key and its value\n    to the new dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict_min.items():\n        new_dict[key] = value\n\n    for key, value in dict2.items():\n        if key in dict_min:\n            new_dict[key] += value\n\n    \"\"\"\n    Iterate over new dictionary and for each key, check if key is present in new_dict, then add\n    key and its value to gcd. Else, add gcd to gcd and add key and its value to gcd.\n    Return gcd.\n    \"\"\"\n    gcd = 1\n    for key, value in new_dict.items():\n        if key in new_dict:\n            gcd *= key\n            gcd %= 10 ** 9 + 7\n        else:\n            gcd += key\n    return gcd\n\ndef main():\n    t = int(input())\n    for", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(nums):\n    for num in nums:\n        if all([num % divisor == 0 for divisor in nums if divisor != num]):\n            return num\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(array):\n    if len(array) < 2:\n        return array[0]\n\n    array = sorted(array)\n    for i in range(len(array) - 1):\n        for j in range(i+1, len(array)):\n            if array[i] % array[j] == 0:\n                return array[i] // array[j]\n    return array[-1]"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    distinct = True\n    for i in range(len(nums)):\n        if i == len(nums) -1:\n            break\n        for j in range(i+1,len(nums)):\n            if nums[i] == nums[j]:\n                distinct = False\n    return distinct\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j and nums[i] == nums[j]:\n                return False\n    return True\n\n\ndef test_distinct2(nums):\n    return len(set(nums)) == len(nums)\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(numbers):\n    num_list = []\n    for number in numbers:\n        if number not in num_list:\n            num_list.append(number)\n    if len(num_list) == len(numbers):\n        return True\n    else:\n        return False\n\ntest_distinct([1,5,7,9]) == True", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\nfrom random import randint\n\ndef test_distinct(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return False\n    return True\n\ndef test():\n    for i in range(100):\n        lst = []\n        for i in range(randint(1,10)):\n            lst.append(randint(1,10))\n        if not test_distinct(lst):\n            print(\"Not distinct!\")\n        else:\n            print(\"Distinct!\")\n    print(\"Test Successful!\")", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(arr):\n    for i in arr:\n        for j in arr:\n            if i == j:\n                return False\n    return True\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    return all(x != y for x, y in zip(nums[:-1], nums[1:]))\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\nfrom random import randint\ndef test_distinct(arr):\n    return sorted(arr) != arr\n\n# random test cases", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    if len(set(nums)) == len(nums):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(lst):\n  return len(lst) == len(set(lst))\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(list):\n    s = set(list)\n    return len(list) == len(s)\n\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    temp = 1\n    for i in range(a,b+1):\n        temp *= i\n    if temp%10 == 0:\n        return 0\n    else:\n        return temp%10\n    ", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n\tif (a < 10) or (b < 10):\n\t\treturn 0\n\telse:\n\t\tif (b % a) == 0:\n\t\t\treturn b % a\n\t\telse:\n\t\t\treturn compute_Last_Digit(a,b%a)\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n\treturn int(str(math.factorial(a))[-1]) % int(str(math.factorial(b))[-1])\n\ndef compute_Last_Digit_Brute(a,b):\n\treturn int(math.factorial(a)) % int(math.factorial(b)) % 10\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a, b):\n    if b == 1:\n        return a\n    else:\n        return compute_Last_Digit(a*b % 10, b-1) % 10\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    assert a>b\n    n1 = a\n    n2 = b\n    if(n1%n2 == 0):\n        return n2\n    n1 = n1-n2\n    n2 = n2-1\n    while(n1!=0):\n        if(n1%n2 == 0):\n            return n2\n        n1 = n1-n2\n        n2 = n2-1\n\ndef main():\n    print(compute_Last_Digit(2,4))\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if a<b:\n        return 0\n    else:\n        return a%b\n\ndef compute_Last_Digit(a,b):\n    if a == b:\n        return a%b\n    elif a < b:\n        return 0\n    else:\n        return (a%b)\n\ndef compute_Last_Digit(a,b):\n    if b>a:\n        return 0\n    else:\n        return a%b\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if a > b:\n        return 0\n    else:\n        return (a % (10 ** (b - a))) % 10\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    fact = 1\n    for i in range(1,a+1):\n        fact = fact*i\n    for i in range(1,b+1):\n        fact = fact//i\n    return fact%10\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\nfrom functools import reduce\n\ndef compute_Last_Digit(a, b):\n\tfactors = prime_factors(a)\n\tfactors.sort()\n\tfactors.reverse()\n\treturn reduce(lambda x, y: x*y, factors) % 10\n\ndef prime_factors(n):\n\tprime = []\n\twhile n % 2 == 0:\n\t\tprime.append(2)\n\t\tn /= 2\n\tfor i in range(3,int(n**0.5)+1,2):\n\t\twhile n % i== 0:\n\t\t\tprime.append(i)\n\t\t\tn /= i\n\tif n > 2:\n\t\tprime.append(n)\n\treturn prime", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    n = a\n    if a>b:\n        n = b\n    for i in range(1,n+1):\n        k = i\n        while k<n:\n            k*=i\n        if k==n:\n            return i\n    return n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(num):\n    return (num & 15) + (num & 16)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(number):\n    binary = bin(number)[2:]\n    length = len(binary)\n    for i in range(length):\n        if binary[i] == \"1\":\n            binary[i] = \"0\"\n        else:\n            binary[i] = \"1\"\n    return int(\"\".join(binary), 2)\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(x):\n    return x ^ (x >> 1)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(num):\n    return num ^ (num-1)\n\ndef main():\n    num = 10\n    print('odd_bit_set_number({}) = {}'.format(num, odd_bit_set_number(num)))\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(x):\n    \"\"\"[summary]\n\n    Args:\n        x (int): [description]\n\n    Returns:\n        int: [description]\n    \"\"\"\n    return x | x+1\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    # write your code here\n    result = 0\n    while n>0:\n        if n%2==1:\n            result |= n\n        n = n//2\n    return result\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num:int) -> int:\n    return num | (num - 1)", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(number):\n    odd_bits = 0\n    for x in range(0, 32):\n        if number & 1 == 1:\n            odd_bits |= 1 << x\n        number >>= 1\n    return odd_bits", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    \"\"\"\n    Take an odd number and return a number with all odd bits set.\n    :param number:\n    :return:\n    \"\"\"\n    return number | (number-1)\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(n):\n    return n | (n + 1)\n\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list, n):\n    return [item[n] for item in list]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(matrix,element):\n    \"\"\"\n    :param matrix: 2d list\n    :param element: the element you want to return\n    :return: list with the specified element\n    \"\"\"\n    result = []\n    for row in matrix:\n        result.append(row[element])\n    return result\n\n\n# asserts", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l,i):\n    \"\"\"\n    Parameters\n    ----------\n    l : list\n        2-dimensional list\n    i : int\n        index of the specified element\n    Returns\n    -------\n    list\n        the specified element in the list.\n    \"\"\"\n    return [lst[i] for lst in l]\n\n\n# ## 7", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix,i):\n    return [row[i] for row in matrix]\n\n\n#assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2, 5, 1]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(input_matrix, position):\n    extracted_element = []\n    for i in input_matrix:\n        extracted_element.append(i[position])\n    return extracted_element\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(matrix,row_idx,column_idx=0):\n    return [x[row_idx][column_idx] for x in matrix]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(a_2d_list,position):\n    return [sub_list[position] for sub_list in a_2d_list]\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(arr, index):\n    result = []\n    for i in range(0, len(arr)):\n        if i == index:\n            result.append(arr[i][0])\n        else:\n            result.append(arr[i][1])\n    return result\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(lis,idx):\n    return [lis[i][idx] for i in range(len(lis))]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(arr, index):\n    new_arr = []\n    for list in arr:\n        new_arr.append(list[index])\n    return new_arr\n\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\n# Create a function to find minimum length list.\ndef min_length_list(lst):\n    min_len = len(lst[0])\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n            min_len_lst = l\n    return (min_len, min_len_lst)\n\n# Check the function with an example.", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(l):\n    return min([(len(item),item) for item in l])\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(arr):\n    return (lambda x: (x, x))(min(arr, key=len))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(l):\n    return (min(len(x) for x in l),[x for x in l if len(x)==min(len(x) for x in l)])", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(list_):\n    return min([(len(i),i) for i in list_])", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(a):\n    return min(a, key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lists):\n    min_length = 10**9\n    min_length_list = []\n    for list1 in lists:\n        min_length = min(min_length, len(list1))\n        min_length_list = list1 if len(list1) == min_length else min_length_list\n    return (min_length, min_length_list)\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\nfrom functools import reduce\n\n\ndef min_length_list(arr_of_lists: list) -> tuple:\n    \"\"\"\n    Find the list with minimum length using lambda function.\n    :param arr_of_lists:\n    :return:\n    \"\"\"\n    min_length = reduce(lambda min_length, lst: min_length if len(lst) < len(min_length) else len(lst), arr_of_lists,\n                        [9999999999])\n\n    if min_length == 9999999999:\n        return None, None\n    else:\n        return min_length, reduce(lambda min_length, lst: min_length if len(lst) == min_length else None,\n                                  arr_of_lists, [None])", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(l):\n    return min(l, key=lambda sub: len(sub))\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    return True if a==b==c else False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n\tif (a == b and b == c) or (a == c and c == b) or (b == c and c == a):\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n\tif a==b==c:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    return a==b==c\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    return (a+b+c)==(a+b+c)\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n\tif (a == b == c) :\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if (a+b+c)/2 == math.sqrt(a*a+b*b+c*c):\n        return True\n    else:\n        return False\n\n# assert check_equilateral(6,8,12)==False\n# assert check_equilateral(4,4,4)==True", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a == b == c:\n        return True\n    else:\n        return False\ncheck_equilateral(4,4,4)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nCheck if a line is Vertical or not\n\n### Code:\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    return (a==b==c) or (a==b!=c) or (a!=b==c) or (a!=b!=c)\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\nimport math\n\ndef check_equilateral(side_a,side_b,side_c):\n    if abs((math.pow(side_a,2) + math.pow(side_b,2) - math.pow(side_c,2))/(2*side_a*side_b)) <= 10**(-6):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base,height):\n    return base*height\n\ndef test_parallelogram_area():\n    base=5\n    height=6\n    assert parallelogram_area(base,height)==30", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base,height):\n    \"\"\"\n    base - length of the parallelogram base\n    height - length of the parallelogram height\n    \"\"\"\n    return base*height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base,height):\n    area=base*height\n    return area\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base, height):\n    return base * height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(w,h):\n    return w*h\n\ndef test_parallelogram_area():\n    assert parallelogram_area(10,20)==200\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base, height):\n    return base * height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a, b):\n    area = a*b\n    return area\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a,b):\n    # Your code here\n    return a*b\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base, height):\n    return base * height\n\n# assert parallelogram_area(10,20)==200\n# print(parallelogram_area(10,20))\n\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    if string[0]==string[len(string)-1]:\n        return \"Equal\"\n    else:\n        return \"Not equal\"\n\n\n# Main\nstring = \"abcda\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    if(str[0] == str[-1]):\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n    ", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str1):\n    first = str1[0]\n    last = str1[-1]\n    if(first == last):\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    return 'Equal' if s[0]==s[-1] else 'NotEqual'\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    if (s[0] == s[len(s)-1]):\n        return \"Equal\"\n    else:\n        return \"not Equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    \"\"\"\n    >>> check_Equality(\"abcda\")\n    'Equal'\n    >>> check_Equality(\"abca\")\n    'Not Equal'\n    >>> check_Equality(\"abc\")\n    'Equal'\n    >>> check_Equality(\"abcdd\")\n    'Not Equal'\n    \"\"\"\n    if s[0]==s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(st):\n\tif(st[0]==st[-1]):\n\t\treturn \"Equal\"\n\telse:\n\t\treturn \"NotEqual\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"not equal\"\n\n\n# Test Cases", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    if len(arr) == 0:\n        return []\n\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for val in arr[1:]:\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n\n    count_arr = [0] * (max_val - min_val + 1)\n    for val in arr:\n        count_arr[val - min_val] += 1\n\n    sorted_arr = [0] * len(arr)\n\n    pos = 0\n    for i in range(len(count_arr)):\n        for j in range(count_arr[i]):\n            sorted_arr[pos] = min_val + i\n            pos += 1\n\n    return sorted_arr\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(nums):\n    \"\"\"\n    Time complexity: O(n+k)\n    Space complexity: O(k)\n    \"\"\"\n    min_num = min(nums)\n    max_num = max(nums)\n    range = max_num - min_num + 1\n    count = [0] * range\n    sorted_nums = [0] * len(nums)\n    for num in nums:\n        count[num - min_num] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    for i in range(len(nums) - 1, -1, -1):\n        sorted_nums[count[nums[i] - min_num] - 1] = nums[i]\n        count[nums[i] - min_num] -= 1\n    return sorted_nums\n\ndef main():\n    nums = [1, 23, 4, 5, 6, 7, 8]\n    print(counting_sort(nums))\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    # find max and min numbers\n    maximum = max(arr)\n    minimum = min(arr)\n\n    # create list of length maximum - minimum + 1 and fill it with 0\n    count = [0] * (maximum - minimum + 1)\n\n    # fill the list with the count of each number\n    for i in arr:\n        count[i - minimum] += 1\n\n    # now the list count contains the count of each number\n    # move the number to correct location\n    for i in range(1,len(count)):\n        count[i] += count[i - 1]\n\n    # make the list copy of arr\n    copy = [0] * len(arr)\n\n    for i in range(len(arr) - 1, -1, -1):\n        number = arr[i]\n        index = number - minimum\n        index -= 1\n        index = count[index] - 1\n        count[index] -= 1\n        copy[index] = number\n\n    # return the sorted list\n    return copy", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    # Initialize an empty list of n elements to count the occurrence of each element in the array\n    count = [0] * len(arr)\n    \n    # For each element in the array, add 1 to its count\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Iterate over the count array, and add the same number of copies of the elements to the output array\n    res = []\n    for i in range(len(count)):\n        for j in range(count[i]):\n            res.append(i)\n\n    return res\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    # The maximum value in the input array\n    max_val = max(arr)\n    # The frequency table\n    freq = [0] * (max_val+1)\n    # Update the frequency table\n    for num in arr:\n        freq[num] += 1\n    # Update the frequency table\n    for i in range(len(freq)):\n        freq[i] += freq[i-1]\n    # Assign the values to sorted array\n    sorted_arr = [0] * len(arr)\n    for i in range(len(arr)-1, -1, -1):\n        num = arr[i]\n        sorted_arr[freq[num] - 1] = num\n        freq[num] -= 1\n    return sorted_arr\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(A):\n    size = len(A)\n    output = [0] * size\n    max_value = max(A)\n    count = [0] * (max_value + 1)\n    for num in A:\n        count[num] += 1\n    for i in range(1, size):\n        count[i] += count[i - 1]\n    for i in range(size - 1, -1, -1):\n        output[count[A[i]] - 1] = A[i]\n        count[A[i]] -= 1\n    return output\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(array):\n    if array == []:\n        return array\n    maximum = max(array)\n    length = maximum + 1\n    # Create a zero-filled list\n    count_list = [0] * length\n    # count the number of times each item in the list occurs\n    for item in array:\n        count_list[item] += 1\n    # populate the count_list to have the index be the new value and the value be the number of occurrences\n    # for example, count_list[i] = 2 means that i occurs 2 times\n    # however, in order to use the code below, we need to use count_list[i] - 1\n    for i in range(1, length):\n        count_list[i] += count_list[i - 1]\n\n    # Create a new list\n    new_list = [0] * len(array)\n\n    # for each element in the original list, we know which index it should go\n    for item in array:\n        index = count_list[item - 1] - 1\n        new_list[index] = item\n        count_list[item - 1] -= 1\n\n    return new_list\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\nfrom typing import List\n\ndef counting_sort(a: List[int]) -> List[int]:\n    counter = [0 for _ in range(max(a) + 1)]\n    for i in a:\n        counter[i] += 1\n\n    for i in range(1, len(counter)):\n        counter[i] += counter[i - 1]\n\n    sorted_a = [0 for _ in range(len(a))]\n    for i in range(len(a) - 1, -1, -1):\n        sorted_a[counter[a[i]] - 1] = a[i]\n        counter[a[i]] -= 1\n\n    return sorted_a\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(numbers):\n    \"\"\"\n    Return a sorted list of the given integers, ascending order.\n    >>> counting_sort([1,23,4,5,6,7,8])\n    [1, 4, 5, 6, 7, 8, 23]\n    \"\"\"\n    # Finding the maximum number in the list\n    max_num = max(numbers)\n    # Making a list of size max_num\n    # to use in the counting sort\n    count = [0] * (max_num + 1)\n    # Populate count array\n    for i in numbers:\n        count[i] += 1\n    # Finding the total sum of numbers in the list\n    total_sum = sum(count)\n    # Adding 1 to each index of count array to\n    # avoid overflow in the for loop\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    # Making a new list of the same size as the\n    # old one and initialize it with -1\n    new_list = [-1] * len(numbers)\n    # Populating the new list\n    for i in range(len(numbers)-1, -1, -1):\n        new_list[count[numbers[i]] - 1] = numbers[i]\n        count[numbers[i]] -= 1\n    # Returning the sorted list\n    return new_list\n\n# Just for testing", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(lst):\n\t\"\"\"\n\tlst: list of integers to be sorted\n\treturn list of integers sorted\n\t\"\"\"\n\tmaximum = max(lst)\n\tminimum = min(lst)\n\tlength = maximum - minimum + 1\n\tcounts = [0] * length\n\tfor item in lst:\n\t\tcounts[item-minimum] += 1\n\tfor i in range(1, length):\n\t\tcounts[i] += counts[i-1]\n\tsorted_lst = []\n\tfor item in lst:\n\t\tsorted_lst.append(item)\n\tfor item in reversed(lst):\n\t\tsorted_lst[counts[item-minimum]-1] = item\n\t\tcounts[item-minimum] -= 1\n\treturn sorted_lst\n\n\ndef main():\n\t\"\"\"\n\tSample input:\n\t>>> counting_sort([1,23,4,5,6,7,8])\n\t[1, 4, 5, 6, 7, 8, 23]\n\t>>> counting_sort([])\n\t[]\n\t>>> counting_sort([-2, -1, 0, 1, 2])\n\t[-2, -1, 0, 1, 2]\n\t\"\"\"\n\tassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\tassert counting_sort([]) == []\n\tassert counting_sort([-2,-1,0,1,2]) == [-2,-1,0,1,2]\n\tassert counting_sort([-23, 4, -2, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a, r, n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    else:\n        return (a * (r ** n - 1)) // (r - 1)\n\ndef test_tn_gp():\n    assert tn_gp(1,5,2)==16\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\nimport unittest\n\n\ndef tn_gp(a, r, n):\n    \"\"\"\n    Finds the t-nth term of geometric series a,r,n\n    \"\"\"\n    return a * r ** n\n\n\ndef test_tn_gp():\n    \"\"\"\n    Test cases for tn_gp\n    \"\"\"\n    assert tn_gp(1, 5, 2) == 16\n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(first, amt, t):\n    return first*(amt**(t-1))", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,r,n):\n    return a*(r**n-1)/(r-1)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\nimport math\nfrom functools import reduce\n\ndef tn_gp(a,n,r):\n    \"\"\"Returns t-nth term of geometric series given a, r and n.\"\"\"\n    return reduce(lambda x,y: x*y, [a for _ in range(n)])\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a, r, n):\n    return (a*(r**n))-((r**n-1)/(r-1))", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(r,n,t):\n    return r*(r**t-1)/(r-1)**2%n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(r, n, t):\n\t\"\"\"\n\t\tt: nth term\n\t\tn: total number of terms\n\t\tr: first term\n\t\"\"\"\n\tif t < 0 or t > n:\n\t\traise ValueError(\"n should be greater than or equal to 0 and should not be greater than n\")\n\treturn r * (r ** t - 1) // (r - 1) ** 2\n\n\n\n# assert tn_gp(1,5,2)==16\n# assert tn_gp(2,5,2)==20\n# assert tn_gp(3,5,2)==24\n# assert tn_gp(4,5,2)==28\n# assert tn_gp(5,5,2)==32\n# assert tn_gp(6,5,2)==36\n# assert tn_gp(7,5,2)==40\n# assert tn_gp(8,5,2)==44\n# assert tn_gp(9,5,2)==48\n# assert tn_gp(10,5,2)==52", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(first,n,p):\n    # Code here\n    return first*(p**n-1)/(p-1)\n\n#Test", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,r,t):\n    # Your code here.\n    return a*(r**t)\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    if str(num) == str(num)[::-1]:\n        return num - int(str(num)[::-1]) == 1\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    return num == int(str(num)[::-1]) + 1\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    rev = 0\n    while(num>0):\n        digit = num%10\n        num = num//10\n        rev = (rev*10)+digit\n    if rev == (num-1):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    if num == (num ** 2) - 1:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    rev = reverse(n)\n    if n == rev - 1:\n        return True\n    return False\n\ndef reverse(n):\n    num = 0\n    while n != 0:\n        num = num * 10 + n % 10\n        n = n // 10\n    return num\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    rev = num\n    while rev>0:\n        rev = rev//10\n    return num - 2*rev\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    try:\n        if num == int(str(num)[::-1])*2 - 1:\n            return True\n        else:\n            return False\n    except:\n        return False\n\n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n\tif str(num) == str(int(str(num)[::-1]) * 2 - 1):\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    rev_num = 0\n    temp = num\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n    return temp == rev_num + 1\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(arr,n):\n    arr.sort()\n    # print(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        return arr[n-1] * pow(10, n-2) + find_Max_Num(arr[:-1],n-1)\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits, N):\n\tif N == 1:\n\t\treturn max(digits)\n\telse:\n\t\treturn find_Max_Num(digits[1:], N-1) + int(''.join(str(x) for x in digits[0:1]))\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(arr, n):\n    answer = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if arr[i - 1] <= arr[j - 1] and arr[j - 1] <= arr[k - 1]:\n                    answer = max(answer, arr[i - 1] * 100 + arr[j - 1] * 10 + arr[k - 1])\n    return answer\n\ndef test_function(test_case):\n    arr = test_case[0]\n    n = test_case[1]\n    solution = test_case[2]\n    output = find_Max_Num(arr, n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case = [[[1, 2, 3], 3, 321],\n             [[2, 3, 4], 3, 432],\n             [[3, 4, 5], 3, 543],\n             [[1, 1, 2, 3, 3], 5, 12333]]\nfor test in test_case:\n    test_function(test)", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,k):\n    return int(''.join(sorted(str(digits),reverse=True)[0:k]))\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(a,n):\n    a.sort()\n    if len(a)==1:\n        return a[0]\n    elif len(a)==2:\n        if a[0]>a[1]:\n            return str(a[0])+str(a[1])\n        else:\n            return str(a[1])+str(a[0])\n    else:\n        if a[0]>a[1]:\n            return find_Max_Num(a[1:],n)+str(a[0])\n        else:\n            return find_Max_Num(a[1:],n)+str(a[1])\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(arr, n):\n    # write your code here\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0],arr[1])\n    if n == 3:\n        return max(arr[0],arr[1],arr[2])\n    for i in range(1,n):\n        max_num = max(arr[i],arr[i] + find_Max_Num(arr[0:i],i), arr[i] + find_Max_Num(arr[i+1:n],n-i-1))\n        print(i,max_num)\n    return max_num\n\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    n = test_case[1]\n    solution = test_case[2]\n    output = find_Max_Num(arr,n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [3,30,34,5,9]\nn = 5\nsolution = 39534\n\ntest_case = [arr,n,solution]\ntest_function(test_case)", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,k):\n    digit_set = set(digits)\n    for i in range(k):\n        digit_set.remove(max(digit_set))\n    return int(''.join(list(digit_set)))\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,n):\n    digits.sort(reverse=True)\n    l = []\n    for i in range(n):\n        l.append(str(digits[i]))\n    return \"\".join(l)\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(list_of_digits, num_of_digits):\n    # Hint: Sort the list and then use list slicing.\n    list_of_digits.sort()\n    return list_of_digits[:num_of_digits]\n\nlist_of_digits = [1,3,2]\nnum_of_digits = 3", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(arr,k):\n    def helper(arr,k,temp,ans):\n        if len(temp)==k:\n            if ans<int(''.join(temp)):\n                ans=int(''.join(temp))\n            return\n        for i in arr:\n            if i>temp[-1]:\n                helper(arr,k,temp+[i],ans)\n    ans=0\n    helper(arr,k,[],ans)\n    return ans\n\n\ndef test_Max_Num():\n    assert find_Max_Num([1,2,3],3) == 321\n\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_signs(num1,num2):\n\tif num1 > 0 and num2 < 0:\n\t\treturn True\n\telif num1 < 0 and num2 > 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef test_opposite_signs():\n\tassert opposite_signs(1,-2) == True\n\tassert opposite_signs(2,1) == False\n\ntest_opposite_signs()\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n# Answer\ndef opposite_Signs(x, y):\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    elif x>0 and y>0 or x<0 and y<0:\n        return False\n    else:\n        return None\n\n# Tests", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n\n    # Checking sign of a and b\n    if(a < 0):\n        if(b > 0):\n            return True\n        else:\n            return False\n    else:\n        if(b < 0):\n            return True\n        else:\n            return False\n\n\n# Test Cases", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(num1,num2):\n    if num1>0 and num2<0:\n        return True\n    elif num1<0 and num2>0:\n        return True\n    else:\n        return False\n\nopposite_Signs(1,-2)", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_signs(num1,num2):\n    if num1>=0 and num2<0:\n        return True\n    elif num1<0 and num2>=0:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1, num2):\n    if num1 > 0 and num2 > 0:\n        return False\n    elif num1 < 0 and num2 < 0:\n        return False\n    elif num1 == 0 and num2 == 0:\n        return True\n    elif num1 == 0 and num2 != 0:\n        return False\n    elif num1 != 0 and num2 == 0:\n        return False\n    elif num1 < 0 and num2 > 0:\n        return True\n    elif num1 > 0 and num2 < 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_signs(a,b):\n    if a>0 and b<0 or a<0 and b>0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(x,y):\n    if (x<0 and y<0) or (x>0 and y>0):\n        return True\n    elif x>0 and y<0 or x<0 and y>0:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if (a > 0 and b < 0) or (a < 0 and b > 0):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if (a > 0 and b < 0) or (a < 0 and b > 0):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\nfrom math import pi, ceil\n\n\ndef nth(n):\n    return int(ceil((2 * n * (n + 1)) / pi))\n\n\ndef is_octagonal(num):\n    for i in range(1, int(num ** 0.5) + 1):\n        if num - (8 * i ** 2) == 0:\n            return True\n    return False\n\n\ndef test_nth():\n    assert nth(1) == 1\n    assert nth(11) == 101\n    assert nth(12) == 123\n    assert nth(14) == 163\n    assert nth(18) == 207\n    assert nth(22) == 251\n    assert nth(26) == 295\n    assert nth(30) == 339\n    assert nth(34) == 383\n    assert nth(38) == 427\n    assert nth(42) == 471\n    assert nth(46) == 515\n    assert nth(50) == 559\n    assert nth(54) == 603\n    assert nth(58) == 647\n    assert nth(62) == 691\n    assert nth(66) == 735\n    assert nth(70) == 779\n    assert nth(74) == 823\n    assert nth(78) == 867\n    assert nth(82) == 911\n    assert nth(86) == 955\n    assert nth(90) == 1000\n    assert nth(94) == 1044\n    assert nth(98) == 1088\n    assert nth(102) == 1132\n    assert nth(106) == 1176\n    assert nth(110) == 1220\n    assert nth(114) == 1264\n    assert nth(118) == 1308\n    assert nth(122) == 1352\n    assert nth", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return 2*(n*(3*n-1))/2\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return 4 * n ** 2 - 3\n\ndef nth_octagonal(n):\n    #base case\n    if n == 0:\n        return 1\n\n    #recursive case\n    else:\n        i = nth_octagonal(n - 1)\n        return is_octagonal(i) + 1\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return 8 * (n - 1) ** 2 + 1\n\n\ndef nth_octagonal(n):\n    if is_octagonal(n) < 10:\n        return is_octagonal(n)\n\n    while n > 10:\n        n -= 10\n        n += 1\n    return is_octagonal(n)\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    num = (n*(3*n-1))/2\n    return num\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nfrom math import sqrt\n\n\ndef is_octagonal(n):\n    return 8 * (n ** 2) + 1\n\n\ndef nth(n):\n    if n % 2 == 0:\n        n += 1\n    return is_octagonal(int(sqrt(n)))\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nimport math\n\n\ndef is_octagonal(n):\n    return (8 * n * (n + 1)) // 2\n\n\ndef next_octagonal(n):\n    return is_octagonal(n + 1)\n\n\ndef find_nth_octagonal(n):\n    return next_octagonal(n - 1)\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return ((8*n + 1)**2 + (16*n + 1)**2)**(1/2)\n\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65\n\ndef main():\n    print is_octagonal(5)\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\nfrom math import sqrt\n\nfrom .utils import timeit\n\n\n@timeit\ndef is_octagonal(n):\n    return int(sqrt(n * (8 * n - 7) / 2) + 0.5) ** 2 == n * (8 * n - 7)\n\n\ndef main():\n    print(is_octagonal(5))\n    print(is_octagonal(10))\n    print(is_octagonal(20))\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\nfrom math import sqrt\nfrom functools import reduce\n\n\ndef is_octagonal(n):\n    return n ** 2 == reduce(lambda a, b: a + b, map(lambda x: x ** 2, range(1, int(sqrt(n)) + 1)))\n\n\ndef solve(n):\n    return sum(range(1, is_octagonal(n)))\n\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, max):\n    dp = [[0]*(max+1) for _ in range(len(arr))]\n    dp[0][arr[0]] = 1\n\n    for i in range(1, len(arr)):\n        for j in range(arr[i]+1):\n            dp[i][j] = dp[i-1][j]\n            if j+arr[i] <= max:\n                dp[i][j+arr[i]] = max(dp[i-1][j+arr[i-1]], dp[i][j])\n\n    return max(dp[i][max] for i in range(len(arr)))\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\nfrom typing import List\n\n\ndef max_len_sub(arr: List[int], diff: int) -> int:\n    \"\"\"\n    The subarray with diff will include the first element and the last element.\n    We can use two pointers from left and right to find the maximum length.\n\n    Args:\n        arr: the given array\n        diff: the difference between adjacent elements in subarray\n\n    Returns:\n        The maximum length of the subarray.\n\n    \"\"\"\n    left = 0\n    right = 0\n    count = 0\n    while right < len(arr):\n        if arr[right] - arr[left] == diff:\n            count += 1\n        else:\n            count -= 1\n            while count < 0:\n                count += 1\n                left += 1\n        right += 1\n    return right - left\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom typing import List\n\ndef max_len_sub(arr: List[int], k: int) -> int:\n    arr.sort()\n    if k <= 0:\n        return len(arr)\n\n    max_len = 0\n    left_idx = 0\n    for right_idx in range(len(arr)):\n        while arr[right_idx] - arr[left_idx] > k:\n            left_idx += 1\n        if arr[right_idx] - arr[left_idx] <= k:\n            max_len = max(max_len, right_idx - left_idx + 1)\n\n    return max_len\n\n# def max_len_sub(arr: List[int], k: int) -> int:\n#     arr.sort()\n#     if k <= 0:\n#         return len(arr)\n#\n#     left_idx = 0\n#     for right_idx in range(len(arr)):\n#         while arr[right_idx] - arr[left_idx] > k:\n#             left_idx += 1\n#         if arr[right_idx] - arr[left_idx] <= k:\n#             max_len = max(max_len, right_idx - left_idx + 1)\n#\n#     return max_len\n\n\n# Tests", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\nfrom typing import List\n\n\ndef max_len_sub(arr: List, threshold: int) -> int:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    n = len(arr)\n    pre_sum = [0] * n\n    for i in range(n):\n        pre_sum[i] = pre_sum[i - 1] + arr[i]\n\n    count = [0] * n\n    max_count = 0\n    for i in range(n):\n        count[i] = (arr[i] - threshold) // threshold\n        if count[i] > max_count:\n            max_count = count[i]\n\n    res = 0\n    for i in range(n):\n        if count[i] <= max_count:\n            res = max(res, i - pre_sum[i - count[i]] + 1)\n\n    return res\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nimport sys\nfrom typing import List\n\n\ndef max_len_sub(arr: List[int], k: int) -> int:\n    subsequence = []\n    for index, num in enumerate(arr):\n        if index == 0 or arr[index] - arr[index - 1] <= k:\n            subsequence.append(num)\n        else:\n            subsequence = []\n            subsequence.append(num)\n    max_len = len(subsequence)\n    for index, num in enumerate(arr):\n        if index == 0:\n            subsequence_with_two = subsequence\n        else:\n            if num - subsequence_with_two[-1] <= k:\n                subsequence_with_two.append(num)\n            else:\n                subsequence_with_two = []\n                subsequence_with_two.append(num)\n        if len(subsequence_with_two) > max_len:\n            max_len = len(subsequence_with_two)\n    return max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n, k = 1):\n    \"\"\"Returns the maximum length of subsequence with difference k among arr[0] to arr[n - 1]\"\"\"\n    dp = [[0 for i in range(n)] for i in range(n)]\n    if n == 1:\n        return 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, limit):\n    dp = {}\n    for i in range(len(arr)):\n        dp[arr[i]] = 1 if arr[i] <= limit else 0\n    \n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            val = arr[j] - arr[i]\n            if val in dp and dp[val] == 1:\n                ans = max(ans, dp[arr[i]] + 1)\n    return ans\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, val):\n    if len(arr) == 0:\n        return 0\n    i = 0\n    j = 1\n    max_len = 0\n    while(j < len(arr)):\n        if arr[j] - arr[i] == val:\n            max_len = max(max_len, j - i + 1)\n            i = j\n        j += 1\n    return max(max_len, j - i)\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, val):\n    # Write your code here.\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0 if arr[0] != val else 1\n    \n    arr.sort()\n    \n    for i in range(len(arr)):\n        if arr[i] != val:\n            continue\n        j = i + 1\n        while j < len(arr):\n            if arr[j] - arr[i] == val:\n                j += 1\n            else:\n                break\n        return j-i\n\n    return 0\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef max_len_sub(arr: List, k: int) -> int:\n    d: Dict = {}\n    max_length = 1\n    for i, num in enumerate(arr):\n        d[num] = i\n\n    length: int = 1\n    start: int = 0\n    for i, num in enumerate(arr):\n        length += 1\n        if num - k in d and i - d[num - k] - 1 >= start:\n            length = length - abs(d[num - k] - d[num] + 1 - start)\n            start = i - d[num - k] - 1\n        if length > max_length:\n            max_length = length\n    return max_length"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s,n):\n    # Write your code here\n    if n==1:\n        return 1\n    ans=0\n    for i in range(len(s)):\n        sub=s[i:i+n]\n        #print(sub)\n        if len(sub)==n and sub.isdigit():\n            ans+=1\n        if len(sub)==n and sub[0]=='0' and sub[1:].isdigit():\n            ans-=1\n        if len(sub)==n and sub[n-1]=='0' and sub[:n-1].isdigit():\n            ans-=1\n    return ans", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,n):\n    if(n == 1):\n        return len(s)\n    if(n == 2):\n        count = 0\n        for i in range(len(s)):\n            if(s[i] == '1' and s[i + 1] == '1'):\n                count += 1\n        return count\n    if(n == 3):\n        count = 0\n        for i in range(len(s)):\n            if(s[i] == '1' and s[i + 1] == '1' and s[i + 2] == '1'):\n                count += 1\n        return count\n    else:\n        count = 0\n        for i in range(len(s)):\n            if(s[i] == '1' and s[i + 1] == '1' and s[i + 2] == '1'):\n                count += 1\n            if(s[i] == '2' and s[i + 1] == '2' and s[i + 2] == '2'):\n                count += 1\n            if(s[i] == '3' and s[i + 1] == '3' and s[i + 2] == '3'):\n                count += 1\n            if(s[i] == '4' and s[i + 1] == '4' and s[i + 2] == '4'):\n                count += 1\n            if(s[i] == '5' and s[i + 1] == '5' and s[i + 2] == '5'):\n                count += 1\n            if(s[i] == '6' and s[i + 1] == '6' and s[i + 2] == '6'):\n                count += 1\n            if(s[i] == '7' and s[i + 1] == '7' and s[i + 2] == '7'):\n                count += 1\n            if(s[i] == '8' and s[i + 1] == '8' and s", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n# Solution 1\n\ndef count_Substrings(strng, N):\n\tcount = 0\n\tfor i in range(len(strng)-N+1):\n\t\tnum = int(strng[i:i+N])\n\t\tif(sum(int(i) for i in strng[i:i+N]) == N):\n\t\t\tcount+=1\n\treturn count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\nfrom collections import Counter\n\n\ndef count_Substrings(string, k):\n    # write your code here\n    length = len(string)\n    if length > k:\n        return 0\n    elif length < k:\n        return 0\n    elif length == k:\n        return 1\n    else:\n        count = 0\n        counter = Counter(string)\n        for item in counter.keys():\n            if item == length:\n                count += counter[item]\n        return count\n\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if j-i == n:\n                if sum([int(x) for x in s[i:j]]) == n:\n                    count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str,sum):\n\tl = len(str)\n\tstart,end = 0,0\n\tcount = 0\n\twhile end < l:\n\t\tif str[start]+str[end] == str[end]+str[start]:\n\t\t\t# print str[start]+str[end],str[start]+str[end] == str[end]+str[start]\n\t\t\tif sum == len(str[start:end+1]):\n\t\t\t\t# print str[start:end+1]\n\t\t\t\tcount += 1\n\t\t\tend += 1\n\t\t\tstart += 1\n\t\telif str[start]+str[end] < str[end]+str[start]:\n\t\t\tstart += 1\n\t\telse:\n\t\t\tend += 1\n\t\t# print start,end\n\treturn count", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str1,n):\n    # code here\n    str1_dict={}\n    for i in str1:\n        if(i in str1_dict):\n            str1_dict[i]+=1\n        else:\n            str1_dict[i]=1\n    sum=0\n    count=0\n    for i in str1_dict.values():\n        if(sum+i==n):\n            count+=1\n            sum=0\n        sum+=i\n    return count\n\n\n#{ \n#  Driver Code Starts", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(input_string, digit):\n    return len([x for x in input_string if sum([int(x) for x in x]) == digit])\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        if sum(int(ch) for ch in s[i:i+n]) == n:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s,n):\n    substrings = 0\n    for i in range(len(s)):\n        for j in range(len(s)-i):\n            if sum(map(int,list(s[j:j+i]))) == i:\n                substrings+=1\n    return substrings\n\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(list_of_nums):\n    sorted_list = sorted(list_of_nums)\n    return sorted_list[0]\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(a):\n    return min(a)\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\nfrom functools import reduce\ndef smallest_num(lst):\n    return min(lst)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n\treturn min(nums)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(num_list):\n    return min(num_list)\n\n\n# The above function is correct.", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n# O(nlogn) time complexity\ndef smallest_num(nums):\n    return min(nums)\n\n# O(n) time complexity\ndef smallest_num2(nums):\n    current = min(nums)\n    for num in nums:\n        if num < current:\n            current = num\n    return current\n\n# O(n) time complexity\ndef smallest_num3(nums):\n    min_num = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n    return min_num", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(numbers):\n  # Write your code here.\n  return min(numbers)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    min_num = lst[0]\n    for num in lst:\n        if num < min_num:\n            min_num = num\n    return min_num\n\ndef main():\n    lst = [10, 20, 1, 45, 99]\n    print(smallest_num(lst))\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n\tif len(lst) == 1:\n\t\treturn lst[0]\n\tif len(lst) > 1:\n\t\tfor i in lst:\n\t\t\tif i == min(lst):\n\t\t\t\treturn i\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    return min(nums)\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuple_list):\n    \"\"\"\n    max_difference([\n        (1, 2),\n        (3, 5),\n        (10, 3),\n        (1, 7)\n    ]) == 7\n    \"\"\"\n    return max(max(difference(t1, t2)) for t1, t2 in pairwise(tuple_list))\n\ndef pairwise(iterable):\n    \"\"\"\n    [(1, 2), (3, 5), (10, 3), (1, 7)] -> [(1, 2), (3, 5), (10, 3), (1, 7)]\n    \"\"\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\ndef difference(t1, t2):\n    \"\"\"\n    [(1, 2), (3, 5), (10, 3), (1, 7)] -> [(2-1), (5-3), (3-10), (7-1)]\n    \"\"\"\n    return [b - a for a, b in zip(t1, t2)]", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nimport heapq\n\n\ndef max_difference(numbers):\n    \"\"\"\n    :param numbers: a list of tuples\n    :return: max difference between available pairs in the given tuple list\n    \"\"\"\n    numbers = [(abs(a - b), (a, b)) for a, b in numbers]\n    heapq.heapify(numbers)\n    return heapq.heappop(numbers)[0]\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List\n\ndef max_difference(nums: List[tuple]) -> int:\n    nums.sort()\n    diff_list = []\n    for i in range(1, len(nums)):\n        diff_list.append(nums[i][0] - nums[i-1][0])\n    diff_list.append(nums[0][1] - nums[-1][1])\n    return max(diff_list)\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(t):\n    t.sort()\n    difference = 0\n    for i in range(len(t) - 1):\n        difference = max(difference, t[i + 1][0] - t[i][0], t[i + 1][1] - t[i][1])\n    return difference", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(pairs):\n    \"\"\"\n    Args:\n       pairs(list): list of pairs\n    Returns:\n       int: maximum difference\n    \"\"\"\n    diffs = [abs(x[0] - x[1]) for x in pairs]\n    return max(diffs)", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(pairs):\n    pairs.sort()\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            max_diff = max(max_diff, abs(pairs[i][0] - pairs[j][0]) + abs(pairs[i][1] - pairs[j][1]))\n    return max_diff\n\n\ndef max_difference2(pairs):\n    pairs.sort()\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            max_diff = max(max_diff, abs(pairs[i][0] - pairs[j][0]) + abs(pairs[i][1] - pairs[j][1]))\n    return max_diff\n\n\ndef max_difference3(pairs):\n    pairs.sort()\n    return max([abs(pairs[i][0] - pairs[j][0]) + abs(pairs[i][1] - pairs[j][1]) for i in range(len(pairs)) for j in range(i+1, len(pairs))])\n\n\ndef max_difference4(pairs):\n    pairs.sort()\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            max_diff = max(max_diff, abs(pairs[i][0] - pairs[j][0]) + abs(pairs[i][1] - pairs[j][1]))\n    return max_diff\n\n\ndef test_function(test_case):\n    pairs = test_case[0]\n    solution = test_case[1]\n    output = max_difference(pairs)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n# This is a brute force solution, which would work for very small inputs, but not very efficient for large inputs\n# def max_difference(tuples):\n#     max_diff = 0\n#     for i in range(len(tuples)):\n#         for j in range(i + 1, len(tuples)):\n#             if tuples[j][0] > tuples[i][1] and tuples[j][1] < tuples[i][0]:\n#                 max_diff = max(max_diff, tuples[j][0] - tuples[i][1])\n#     return max_diff\n\n\n# This is a more efficient solution using a heap queue\nfrom heapq import *\n\n\ndef max_difference(tuples):\n    # Create a min heap\n    heap = []\n    # for each tuple in the tuple list\n    for i in range(len(tuples)):\n        # Push each tuple on the heap\n        heappush(heap, -tuples[i][1])\n\n    # Initialize max_diff\n    max_diff = 0\n    # If there is at least 2 tuples\n    if len(heap) >= 2:\n        # while the heap has at least 2 tuples\n        while len(heap) >= 2:\n            # If the top of the heap is greater than the second tuple on the heap\n            if heappop(heap) > -heap[0]:\n                # If there is a difference between the top of the heap and the second tuple on the heap\n                if heap[0] - -heap[0] > max_diff:\n                    # Update max_diff\n                    max_diff = heap[0] - -heap[0]\n        # Return max_diff\n    return max_diff\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(lst):\n    \"\"\"\n    :param lst: tuple list\n    :return: maximum difference\n    \"\"\"\n    # your code here\n    return max([x[1] - x[0] for x in lst])\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List\n\n\ndef max_difference(pairs: List[tuple]) -> int:\n    pairs.sort(key=lambda pair: pair[1])\n    return pairs[-1][1] - pairs[0][1]\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef max_difference(pairs: List[Tuple[int]]) -> int:\n    # Make sure the list is not empty\n    if not pairs:\n        return 0\n\n    max_diff = 0\n\n    for i, pair_a in enumerate(pairs):\n        for j, pair_b in enumerate(pairs):\n            # Skip the same pair\n            if i == j:\n                continue\n\n            diff = abs(pair_a[0] - pair_b[0]) + abs(pair_a[1] - pair_b[1])\n            max_diff = max(max_diff, diff)\n\n    return max_diff\n\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subjects):\n    return sorted(subjects, key=lambda x: x[1])\n\n#assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks_tuples):\n    return sorted(marks_tuples, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\nsubject_marks = lambda marks: sorted(marks, key = lambda x: x[1])", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(grades):\n    grades.sort(key=lambda x: x[1], reverse=True)\n    return grades\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subject_grades):\n    \"\"\"\n    Sorts a list of tuples containing the subject name and the student's mark.\n    \n    Parameters\n    ----------\n    subject_grades : list of tuples\n        A list of tuples where each tuple contains the subject name and the student's mark.\n    \n    Returns\n    -------\n    subject_grades : list of tuples\n        A list of tuples where each tuple contains the subject name and the student's mark, sorted in ascending order.\n    \"\"\"\n    return sorted(subject_grades, key=lambda x: x[1])\n\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subjects):\n    return sorted(subjects, key=lambda x: x[1], reverse=True)", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(list_of_tuple):\n    return sorted(list_of_tuple, key=lambda student: student[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subject_marks):\n    return sorted(subject_marks, key=lambda x: x[1])\n\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    marks.sort(key=lambda tup: tup[1], reverse=True)\n    return marks\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subjects):\n    subjects.sort(key=lambda x: x[1])\n    return subjects\n\n\ndef test_subject_marks():\n    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [\n        ('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(arr):\n    if isinstance(arr, list):\n        return sum(recursive_list_sum(x) for x in arr)\n    else:\n        return arr\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n# Recursive Function\ndef recursive_list_sum(the_list):\n    if isinstance(the_list, int):\n        return the_list\n    elif isinstance(the_list, list):\n        return sum(recursive_list_sum(x) for x in the_list)\n    else:\n        return 0\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(l):\n    if len(l) == 0:\n        return 0\n    elif type(l[0]) == list:\n        return recursive_list_sum(l[0])+recursive_list_sum(l[1:])\n    else:\n        return l[0]+recursive_list_sum(l[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(numbers):\n    if type(numbers) is int:\n        return numbers\n    else:\n        return numbers[0]+recursive_list_sum(numbers[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n# My recursive solution\ndef recursive_list_sum(some_list):\n    if isinstance(some_list, int):\n        return some_list\n    else:\n        return some_list[0] + recursive_list_sum(some_list[1:])\n\n# Use reduce()\nimport functools\ndef recursive_list_sum(some_list):\n    return functools.reduce(lambda x, y: x + y, some_list)\n\n# Use map()\ndef recursive_list_sum(some_list):\n    return sum(map(recursive_list_sum, some_list))", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lis):\n    #Base cases\n    if not lis:\n        return 0\n    if not isinstance(lis[0], list):\n        return lis[0]\n\n    #recursive case\n    return recursive_list_sum(lis[0]) + recursive_list_sum(lis[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(alist):\n\tif type(alist) == int:\n\t\treturn alist\n\telif type(alist) == list:\n\t\treturn recursive_list_sum(alist[0])+recursive_list_sum(alist[1:])\n\telse:\n\t\traise TypeError(\"Only list or int is accepted\")\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(data, total=0):\n    if not data:\n        return total\n    elif isinstance(data, list):\n        for i in data:\n            total = total + recursive_list_sum(i, total)\n    elif isinstance(data, int) or isinstance(data, float):\n        total += data\n    else:\n        print('error data type')\n    return total", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list_to_sum):\n    if type(list_to_sum) == int:\n        return list_to_sum\n    elif type(list_to_sum) == list:\n        return sum(list_to_sum)\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    # Code here\n    return sum_list(lst)\n\ndef sum_list(lst):\n    if len(lst) == 0:\n        return 0\n    elif type(lst[0])==list:\n        return sum_list(lst[0]) + sum_list(lst[1:])\n    else:\n        return lst[0] + sum_list(lst[1:])\n# Test case 1"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(a_list):\n    count=0\n    for x in a_list:\n        if x>0:\n            count+=1\n    return count", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    count=0\n    for i in lst:\n        if i>0:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(arr):\n    return len([el for el in arr if el > 0])", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(l):\n    return len(list(filter(lambda x: x>0, l)))\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    \"\"\"\n    Takes a list as an argument and returns the number of positive numbers in that list.\n    \"\"\"\n    counter = 0\n    for i in lst:\n        if i > 0:\n            counter = counter + 1\n    return counter\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(input):\n    return len([item for item in input if item > 0])\n\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(arr):\n    pos_arr = []\n    for x in arr:\n        if x > 0:\n            pos_arr.append(x)\n    return len(pos_arr)\n\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(a):\n    count = 0\n    for x in a:\n        if x > 0:\n            count += 1\n    return count\n\n# test", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(a):\n    \"\"\"\n    Count the positive numbers in a list\n    \"\"\"\n    return sum(1 for i in a if i >= 0)\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\n#answer \ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n#test    "], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\nfrom __future__ import annotations\nimport itertools\n\n\ndef bell_number(n: int) -> int:\n    \"\"\"\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n    return sum(int(str(sum(c)) == str(c)) for c in itertools.combinations(range(2, n + 1), n - 1))", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    # Write your code here\n    return 1\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(num):\n    bell = 1\n    for i in range(1,num+1):\n        bell += i\n    return bell\n\ndef partition(n):\n    if n == 0:\n        return 1\n    return sum(partition(n - i) for i in range(1, n + 1))\n\ndef bell_number_partition(num):\n    total = 0\n    for i in range(1,num+1):\n        total += bell_number_partition(num-i)\n    return total + 1\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nfrom functools import lru_cache, partial\nimport math\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n: int) -> int:\n    \"\"\" Bell number: number of partitions of the set {1,2,3,...,n}. \"\"\"\n    # In the case of n=0 there is only one partition, {0}, so Bn=1.\n    if n==0:\n        return 1\n\n    # In the case of n=1 there is only one partition, {1}.\n    if n==1:\n        return 1\n\n    # Compute Bn by summing Bm for m=0 to n-1.\n    return sum([bell_number(m) for m in range(n)])", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    \"\"\"\n    Idea is to generate all the set of n bell numbers, and then count the length of that set.\n    \"\"\"\n    bells = []\n    for i in range(1,n+1):\n        bells.append(bell_number(i))\n    \n    return 1+sum(bells)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    return bell_number(n-1)+bell_number(n-2)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef partition(n,k):\n    p = [1]\n    for i in range(2,n+1):\n        p.append(p[i-1]+p[i-2])\n    return p[k]\n\ndef bell_number(n):\n    return partition(n,n)\n\n\ndef test():\n    assert bell_number(2)==2", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    \"\"\"\n    bell_number(n) -> integer\n    Return the n-th bell number.\n    \"\"\"\n    return sum(binomial(n,k) for k in range(n+1))\n\ndef bell_numbers():\n    \"\"\"\n    bell_numbers() -> sequence\n    Return a sequence of all bell numbers.\n    \"\"\"\n    bell = []\n    for n in range(1,1000):\n        bell.append(bell_number(n))\n    return bell\n\ndef partition(n):\n    \"\"\"\n    partition(n) -> integer\n    Return the number of ways to partition a set of n bell numbers.\n    \"\"\"\n    return bell_number(n)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sum(bell_number(i) for i in range(1, n))\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(lst):\n    monotonic = True\n    prev = None\n    for i in lst:\n        if prev is None:\n            prev = i\n            continue\n        elif prev > i:\n            monotonic = False\n            break\n        prev = i\n    return monotonic", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef isMonotonic(arr):\n  for i in range(len(arr) - 1):\n    if arr[i] > arr[i + 1] or arr[i] < arr[i + 1]:\n      return False\n  return True\n\narr = [6, 5, 4, 4]", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    inc = True\n    dec = True\n    prev = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == prev:\n            continue\n        if arr[i] > prev:\n            if dec:\n                return False\n            inc = True\n        elif arr[i] < prev:\n            if inc:\n                return False\n            dec = True\n        prev = arr[i]\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if arr == sorted(arr) or arr == sorted(arr, reverse=True):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(a):\n    # monotonic increases\n    # monotonic decreases\n    pass\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(a):\n    # if a is None or len(a) == 0:\n    #     return True\n    # if len(a) == 1:\n    #     return True\n    # if len(a) >= 2:\n    #     # if a is not sorted, return False\n    #     if a[0] <= a[1]:\n    #         for i in range(1, len(a)):\n    #             if a[i-1] >= a[i]:\n    #                 return False\n    #     elif a[0] >= a[1]:\n    #         for i in range(1, len(a)):\n    #             if a[i-1] <= a[i]:\n    #                 return False\n    #     else:\n    #         return False\n    #     return True\n    return all(a[i] <= a[i+1] or a[i] >= a[i+1] for i in range(len(a)-1))\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if len(arr) == 0:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            is_increasing = False\n        if arr[i] > arr[i - 1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing\n\n\ndef is_Monotonic_2(arr):\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            increasing = False\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n# Recursive Approach\ndef isMonotonic_recursive(arr):\n    if len(arr) <= 2:\n        return True\n\n    if arr[0] < arr[1]:\n        return isMonotonic_recursive(arr[1:]) and arr[1] <= arr[-1]\n    else:\n        return isMonotonic_recursive(arr[1:]) and arr[0] >= arr[-1]\n\n# Iterative Approach\ndef isMonotonic_iterative(arr):\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n            continue\n        elif arr[i] < arr[i-1] and arr[i] > arr[i+1]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l, sub_l):\n    l_iter = iter(l)\n    for sub_i in sub_l:\n        if next(l_iter) != sub_i:\n            return False\n    return True\n    \ndef is_sublist_v2(l, sub_l):\n    for sub_i in sub_l:\n        if sub_i not in l:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(list1,list2):\n    \"\"\"\n    Takes two lists as arguments and returns a boolean value that indicates whether the second list is a sublist of the first one or not.\n    \"\"\"\n    i=0\n    while i<len(list1):\n        if list1[i] == list2[0]:\n            j=0\n            while j<len(list2):\n                if list1[i+j] == list2[j]:\n                    j=j+1\n                else:\n                    break\n            if j == len(list2):\n                return True\n        i=i+1\n    return False", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(main_list,sub_list):\n    return True if sub_list[0] in main_list and sub_list[-1] in main_list and set(sub_list).issubset(set(main_list)) else False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(sub,l):\n\tif(len(sub) == 0):\n\t\treturn True\n\tif(sub[0] == l[0]):\n\t\treturn is_sublist(sub[1:],l[1:])\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(main,sub):\n    for i in range(len(sub)):\n        if sub[i] in main[i:len(sub)+i]:\n            continue\n        else:\n            return False\n    return True\n\ndef is_sublist(main,sub):\n    for i in range(len(main)):\n        if sub[0] in main[i:len(sub)]:\n            if main[i:len(sub)] == sub:\n                return True\n            else:\n                continue\n        else:\n            continue\n    return False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1,l2):\n    if l1[0]==l2[0]:\n        for i in range(1,len(l1)):\n            if l1[i]!=l2[i]:\n                break\n        else:\n            return True\n    return False", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(lst,sublst):\n    for i in range(len(lst)):\n        for j in range(len(sublst)):\n            if lst[i]==sublst[j]:\n                if i==0:\n                    return True\n                if lst[i-1]==sublst[j-1]:\n                    continue\n                else:\n                    return False\n    return False\n\nlst=[1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nsublst=[1,2,3,4,5,6,7,8,9]", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(a,b):\n    if len(b) == 0:\n        return True\n    elif len(b) == 1:\n        return a[0] == b[0]\n    else:\n        return a[0] == b[0] and is_sublist(a[1:],b[1:])\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n# my solution\ndef is_sublist(l1, l2):\n    for i in range(len(l2)):\n        if l2[i] in l1[i:]:\n            return True\n    return False\n\n# Time complexity: O(n) where n is the length of the list\n# Space complexity: O(n) for creating the copy of the list\n\n# 2. Using set", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(a,b):\n    for i in b:\n        if i in a:\n            return True\n    return False\n\na = [1,2,3,4]\nb = [2,3,4]"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(t, n):\n    if len(t) == 1:\n        return 'All tuples have same length'\n    for i in t:\n        if len(i) != n:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tup, length):\n    if len(tup) == 0:\n        return 'No tuples'\n    else:\n        first_tup = tup[0]\n        if len(first_tup) != length:\n            return 'No'\n        else:\n            for i in tup:\n                if len(i) != length:\n                    return 'No'\n            return 'All tuples have same length'\n        ", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(arr, n):\n  for i in range(len(arr)):\n    if len(arr[i]) != n:\n      return 'Not all tuples have same length'\n  return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\n# my solution\n\ndef get_equal(tup, length):\n    tup_len = len(tup[0])\n    for i in tup:\n        if len(i) != tup_len:\n            return \"All tuples have same length\"\n    return \"All tuples have same length\"\n\n# test\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tup, size):\n    return_str = ''\n    length_list = [len(item) for item in tup]\n    if not all(value == size for value in length_list):\n        return_str = 'Not All tuples have same length'\n    else:\n        return_str = 'All tuples have same length'\n    return return_str", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    for i in tuples:\n        if len(i) != length:\n            return \"Not all tuples have same length\"\n    return \"All tuples have same length\"", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tup_list, n):\n    for tup in tup_list:\n        if len(tup) != n:\n            return 'Some tuples have different length'\n    return 'All tuples have same length'", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tup, length):\n    for i in range(len(tup)):\n        if len(tup[i]) != length:\n            return \"All tuples have same length\"\n\n    return \"Some tuples have different length\"\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\n# Answer\n\n\ndef get_equal(tuples, length):\n    for tup in tuples:\n        if len(tup) != length:\n            return 'Not equal length'\n    return 'All tuples have same length'\n\n\n# Tests", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    # Check that each tuple in tuples has length equal to length\n    for t in tuples:\n        if len(t) != length:\n            return \"Not all tuples have same length\"\n    return \"All tuples have same length\"\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nfrom typing import List\n\n\ndef comb_sort(lst: List[int]) -> List[int]:\n    \"\"\"\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    >>> comb_sort([15, 10, 3, 20, 1])\n    [1, 3, 10, 15, 20]\n    >>> comb_sort([10, 25, 9, 37, 8])\n    [8, 9, 10, 25, 37]\n    >>> comb_sort([])\n    []\n    >>> comb_sort([7, 6, 5, 4, 3, 2, 1])\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> comb_sort([100, 100, 100, 100, 100])\n    [100, 100, 100, 100, 100]\n    \"\"\"\n\n    def get_gap(lst: List[int]) -> int:\n        \"\"\"\n        >>> get_gap([1, 2, 3, 4, 5, 6, 7])\n        7\n        >>> get_gap([5, 15, 37, 25, 79])\n        3\n        >>> get_gap([15, 10, 3, 20, 1])\n        4\n        >>> get_gap([10, 25, 9, 37, 8])\n        5\n        >>> get_gap([1, 2, 3, 4, 5, 6, 7])\n        7\n        >>> get_gap([])\n        1\n        >>> get_gap([7, 6, 5, 4,", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(elements):\n    # Your code here.\n    if len(elements) < 2:\n        return elements\n    gaps = [701, 301, 101, 31, 13, 4, 1]\n    current_gap = gaps[-1]\n    while True:\n        if current_gap == 1:\n            break\n        gap_index = 0\n        while gap_index < len(gaps) - 1:\n            if gaps[gap_index + 1] < gaps[gap_index]:\n                gaps[gap_index + 1], gaps[gap_index] = gaps[gap_index], gaps[gap_index + 1]\n                gap_index = 0\n            else:\n                gap_index += 1\n        current_gap = gaps[-1]\n    for gap in gaps[::-1]:\n        for i in range(len(elements)):\n            for j in range(len(elements) - gap):\n                if elements[j] > elements[j + gap]:\n                    elements[j], elements[j + gap] = elements[j + gap], elements[j]\n        print(\"gap: \", gap)\n        print(elements)\n    return elements\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(array):\n    gap = len(array)\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = len(array)\n        for i in range(gap):\n            if array[i] > array[i+1]:\n                array[i], array[i+1] = array[i+1], array[i]\n                swapped = True\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    length = len(arr)\n    gap = length\n    \n    while gap > 1:\n        gap = gap // 1.25\n        for i in range(gap, length):\n            curr_min = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > curr_min:\n                arr[j] = arr[j - gap]\n                j = j - gap\n            arr[j] = curr_min\n    return arr\n\ndef test_comb_sort():\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(lst):\n    gap = len(lst)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = (gap*10) // 13\n        swapped = False\n        for i in range(len(lst)-gap):\n            if lst[i] > lst[i+gap]:\n                lst[i], lst[i+gap] = lst[i+gap], lst[i]\n                swapped = True\n\n# test\nlst = [5, 15, 37, 25, 79]\ncomb_sort(lst)", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(alist):\n    def comb(n, k):\n        return int(math.ceil(n / k))\n\n    run = len(alist)\n    gap = comb(run, 1.3)\n    while gap > 1:\n        for i in range(gap, run):\n            temp = alist[i]\n            j = i\n            while j >= gap and alist[j - gap] > temp:\n                alist[j] = alist[j - gap]\n                j -= gap\n            alist[j] = temp\n        print(gap, alist)\n        run -= gap\n        gap = comb(run, 1.3)\n    return alist\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nimport math\nimport random\n\n\ndef comb_sort(elements: list):\n    gap = len(elements)\n    swapped = True\n    while swapped:\n        gap = math.floor(gap / 1.3)\n        swapped = False\n        for i in range(0, len(elements) - gap):\n            if elements[i] > elements[i + gap]:\n                elements[i], elements[i + gap] = elements[i + gap], elements[i]\n                swapped = True\n    return elements\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nimport math\nimport random\n\ndef comb_sort(list):\n    # TODO implement comb sort\n    return list\n\n\ndef test_comb_sort():\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\n\ndef generate_random_list(length=100):\n    \"\"\"Return a random list of ints between 0 and 10000.\"\"\"\n    return [random.randint(0, 10000) for i in range(length)]\n\n\ndef test_comb_sort_random_list():\n    \"\"\"Test comb sort on a random list of ints between 0 and 10000.\"\"\"\n    list = generate_random_list()\n    assert comb_sort(list) == sorted(list)\n\n\ndef main():\n    length = int(input('How long should the list be? '))\n    list = generate_random_list(length)\n    print('Unsorted:', list)\n    print('Sorted:', comb_sort(list))\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nfrom random import shuffle\n\n\ndef comb_sort(alist):\n    \"\"\"\n    Sort list in ascending order using comb sort algorithm\n    :param alist: list to be sorted\n    :return: sorted list\n    \"\"\"\n    length = len(alist)\n    gap = length\n    swapped = True\n    while gap > 1 or swapped:\n        gap = gap // 1.25\n        swapped = False\n        for i in range(0, length - gap):\n            if alist[i] > alist[i + gap]:\n                alist[i], alist[i + gap] = alist[i + gap], alist[i]\n                swapped = True\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(alist):\n    # write your code here"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    if num<0:\n        return False\n    else:\n        for i in range(1, int(num**0.5)+1):\n            if num == i**2 + (num - i**2):\n                return True\n            else:\n                continue\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(x):\n    square = x**2\n    if square == 0:\n        return True\n    else:\n        i = 1\n        while True:\n            n = i**2\n            if n > square:\n                break\n            if square - n == x:\n                return True\n            i += 1\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n))+1):\n        if math.pow(i,2) == n:\n            return True\n        if n % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    from math import sqrt\n    if num < 0:\n        num = -num\n    if num%4 == 0:\n        if sqrt(num) - int(sqrt(num)) == 0:\n            return True\n        else:\n            return False\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n\ts = int(n**.5)\n\treturn (s*s == n) or (s*(s+1) == n)", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef is_square(n):\n    \"\"\"\n    Return True if n is perfect square, otherwise False\n    \"\"\"\n    if n < 0:\n        return False\n    return int(math.sqrt(n)) ** 2 == n\n\n\ndef dif_Square(n):\n    \"\"\"\n    Return True if given number is difference of two squares, otherwise False\n    \"\"\"\n    if n < 0:\n        return False\n    for i in range(1, int(n**0.5) + 1):\n        if is_square(i):\n            if n - i * i == i:\n                return True\n    return False\n\n# assert dif_Square(5) == True\n# assert dif_Square(14) == True\n# assert dif_Square(16) == False\n# assert dif_Square(100) == True\n# assert dif_Square(56) == False\n# assert dif_Square(-12) == False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    for i in range(0,int(num**0.5)):\n        if num % (i**2) == 0:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(number):\n    if number < 0:\n        return False\n    while(number > 0):\n        square = int(math.sqrt(number))\n        if square*square == number:\n            return True\n        number -= square\n        number -= square\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    for i in range(1,int(n**0.5)+1):\n        if n-i*i in (m*m for m in range(1,int(n**0.5)+1)):\n            return True\n        if i*i-n in (m*m for m in range(1,int(n**0.5)+1)):\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    # Write your code here\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 4:\n        return True\n    elif n%4 == 0:\n        return True\n    else:\n        for i in range(2,int(n**.5)+1):\n            if n%i == 0:\n                if i*i != n:\n                    return False\n                else:\n                    return True\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\n\ndef multiple_split(string, split_regex):\n    return re.split(split_regex, string)\n\ndef multiple_split(string, split_regex):\n    return list(filter(None, re.split(split_regex, string)))\n\ndef multiple_split(string, split_regex):\n    return re.split(split_regex, string, maxsplit=1)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n\ndef multiple_split(string: str, delimiters: list) -> list:\n    \"\"\"\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', '\\n'])\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', '\\n', ' ', ''])\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', '\\n'])\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', '\\n', ' ', ''])\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', '\\n', ' ', ' ', '^'])\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', '\\n', ' ', ' ', ' $'])\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', '\\n', ' ', ' ', ' '])\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', '\\n', ' ', ' ', ' ', '^', '$'])\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.', ['*', '\\n', ' ', ' ',", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string, delimiters):\n    \"\"\"\n    >>> assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['\\n', '*']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['\\n', '*', '^']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['\\n', '*']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['\\n', '*']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['\\n', '*']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['\\n', '*']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['\\n', '*']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['\\n', '*']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> assert multiple_split('Forces of the \\ndarkness*are coming into the play.', ['\\n', '*']) == ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> assert multiple_split('Forces of the \\nd", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string, delimiters = [' ', '\\n', '.']):\n    return [i for i in re.split('[' + re.escape(str(delimiters)) + ']', string) if i]\n\ndef multiple_split(string, delimiters = [' ', '\\n', '.']):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    \"\"\"\n    return re.split('[' + re.escape(str(delimiters)) + ']', string)\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiters):\n    \"\"\"\n    Regex to split multiple delimiters, using groups.\n    :param string: str, string to split\n    :param delimiters: list, multiple delimiters\n    :return: list, split string\n    \"\"\"\n    return re.split(r\"(\" + \"|\".join(delimiters) + r\")\", string)\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(s, *args):\n    delimiters = args\n    return [match for match in re.split(\"|\".join(delimiters), s)]\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(s, delimiters):\n    return re.split(\"|\".join(map(re.escape, delimiters)), s)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string):\n    # return [re.sub(r'\\D', '', x) for x in re.split(r'\\d+', string)]\n    return [re.sub(r'\\D', '', x) for x in re.split(r'\\d+|\\W+', string)]", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\n\ndef multiple_split(text, delimiters=r'[,\\.:;|!?]'):\n    return re.split(delimiters, text)", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n# First method\ndef multiple_split(str, *delimiters):\n    return re.split(delimiters, str)\n\n# Second method\ndef multiple_split(str, *delimiters):\n    return [x for x in re.split(r'(' + '|'.join(delimiters) + r')', str)]\n\n# Third method\ndef multiple_split(str, *delimiters):\n    result = []\n    for delimiter in delimiters:\n        result.extend(str.split(delimiter))\n    return result"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, string):\n\n    if len(patterns) != len(string):\n        return False\n    \n    for idx, item in enumerate(patterns):\n        if item != string[idx]:\n            return False\n        \n    return True\n\n\ndef is_samepatterns(patterns, string):\n    return all(x in string for x in patterns)\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, words):\n    assert isinstance(patterns,list)\n    assert isinstance(words,list)\n    dict_patterns = {}\n    for i in patterns:\n        if i not in dict_patterns:\n            dict_patterns[i] = 1\n        else:\n            dict_patterns[i] += 1\n\n    return all(word in dict_patterns.keys() for word in words) and \\\n           all(dict_patterns[word] == words.count(word) for word in dict_patterns.keys())", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\nfrom collections import Counter\n\ndef is_samepatterns(patterns, word):\n    assert len(word) == len(patterns)\n    counts = Counter(word)\n    for pattern in patterns:\n        if not counts[pattern]:\n            return False\n        counts[pattern] -= 1\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns,array):\n    x=0\n    array=sorted(array)\n    while x<len(patterns):\n        if patterns[x]!=array[x]:\n            return False\n        x+=1\n    return True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, word):\n    if len(patterns) != len(word):\n        return False\n    for i, p in enumerate(patterns):\n        if word[i] != p:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, words):\n    if len(patterns) != len(words):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != words[i]:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns,sequence):\n    for i in range(len(patterns)):\n        if patterns[i] == sequence[i]:\n            continue\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, s):\n    count=0\n    for pattern in patterns:\n        if pattern in s:\n            count+=1\n    return count==len(patterns)\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, word):\n    if len(patterns) == 0:\n        return True\n\n    pattern = patterns.pop(0)\n    if len(patterns) == 0:\n        return pattern in word\n\n    if pattern not in word:\n        return False\n\n    return is_samepatterns(patterns, word.replace(pattern, ''))\n\n# test", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, string):\n    \"\"\"\n    Write your solution here.\n    :param patterns: List of strings.\n    :param string: String to check.\n    :return: True if it follows the sequence given in the patterns array.\n    \"\"\"\n    # your code here\n    return True"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(list, k):\n    a = []\n    for i in list:\n        if i[0]%k == 0 and i[1]%k == 0 and i[2]%k == 0:\n            a.append(i)\n    return str(a)\n\nlist = [(6, 24, 12), (7, 9, 6), (12, 18, 21)]\nk = 6", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(l, k):\n    return str(tuple(i for i in l if all(j%k==0 for j in i)))\n\n#return find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n\n#assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nfrom itertools import combinations\n\ndef find_tuples(l, k):\n    return str(list(filter(lambda x: all(y % k == 0 for y in x), combinations(l, 3))))\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(lst, k):\n    return '[{0}]'.format(', '.join(str(el) for el in lst if el % k == 0))\n\ndef test_find_tuples():\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 9) == '[(6, 24, 12), (7, 9, 6)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 10) == '[(6, 24, 12), (7, 9, 6)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 12) == '[(6, 24, 12), (12, 18, 21)]'\n\ntest_find_tuples()", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(l, k):\n    res = []\n    for elem in l:\n        if all(elem[i] % k == 0 for i in range(len(elem))):\n            res.append(elem)\n    return res\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(ls, k):\n    \"\"\"\n    :param ls: list of tuples\n    :param k: integer divisible by all the elements\n    :return: list of tuples with all elements divisible by k\n    \"\"\"\n    ls_out = []\n    for x in ls:\n        flag = True\n        for i in range(0, len(x)):\n            if x[i]%k != 0:\n                flag = False\n                break\n        if flag:\n            ls_out.append(tuple(x))\n    return ls_out\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(array, k):\n    # your code goes here\n    result = []\n    for i in range(len(array)):\n        if (array[i][0] % k == 0 and array[i][1] % k == 0 and array[i][2] % k == 0):\n            result.append(str(array[i]))\n    return str(result)\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef find_tuples(tuples: List[Tuple], k: int) -> str:\n    res = []\n    for t in tuples:\n        if all(elem % k == 0 for elem in t):\n            res.append(str(t))\n    return '[' + ', '.join(res) + ']'\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nimport pytest\n\n\ndef find_tuples(tuples, k):\n    res = []\n    for t in tuples:\n        if all(i % k == 0 for i in t):\n            res.append(t)\n    return str(res) if len(res) > 0 else '[]'\n\n\ndef test_find_tuples():\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 9) == '[(7, 9, 6)]'\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 7) == '[(7, 9, 6), (12, 18, 21)]'\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(list_of_tuples, k):\n    result = []\n    for t in list_of_tuples:\n        if all(a%k == 0 for a in t):\n            result.append(t)\n    return str(result)\n\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(x,y):\n    squares = 0\n    for i in range(1,x+1):\n        for j in range(1,y+1):\n            squares += 1\n    return squares\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_squares(width, height):\n    return width * height\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(width, height):\n\treturn width*height\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    \"\"\"\n    >>> count_Squares(4,3)\n    20\n    \"\"\"\n    return width * height\n\ndef test_count_Squares():\n    assert count_Squares(4,3) == 20\n    print(\"Success!\")\n\ntest_count_Squares()", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(width, height):\n    return width * height\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_squares(rows, cols):\n    # Write your code here.\n    return rows*cols\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_squares(height, width):\n    return height * width\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(x,y):\n    return x*y\n\n\ndef test_count_Squares():\n    assert count_Squares(4,3) == 20\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n#    0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n\n#   ..........\n#   ..........\n#   ..........\n#   ..........\n\n#   ..........\n#   ..........\n#   ..........\n#   ..........\n\n#   ..........\n#   ..........\n#   ..........\n#   ..........\n\n#   ..........\n#   ..........\n#   ..........\n#   ..........\n\n\ndef count_Squares(h, w):\n    n = 0\n    for i in range(h):\n        for j in range(w):\n            n = n + 1\n    return n\n\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    list = []\n    while (num):\n        list.append(num % 10)\n        num //= 10\n    even = 0\n    odd = 0\n    for x in list:\n        if x % 2 == 0:\n            even += x\n        else:\n            odd += x\n    if even != odd:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n\treturn int(str(num).count(\"0\")%2)\n\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n\t\"\"\"\n\t:param num: an integer\n\t:return: True if the sum of even and odd digits is different than num\n\t\"\"\"\n\tx = sum(digit % 2 for digit in str(num))\n\treturn x != num", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    sum_odd = 0\n    sum_even = 0\n    for i in str(n):\n        if int(i)%2==0:\n            sum_even+=int(i)\n        else:\n            sum_odd+=int(i)\n    return sum_odd-sum_even\n\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    return False\n\nis_Diff(12345)", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    s = 0\n    l = list(str(n))\n    for i in range(0,len(l)):\n        s += int(l[i])\n        if i%2 != 0:\n            s -= int(l[i])\n    return s\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (x):\n    # write your code here\n    sum_even = 0\n    sum_odd = 0\n    for i in str(x):\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    if sum_odd - sum_even == 0:\n        return True\n    return False\n\ndef test():\n    assert is_Diff (12345) == False\ntest()", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    odd_sum = 0\n    even_sum = 0\n    num = str(num)\n    for i in num:\n        if int(i)%2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    if even_sum - odd_sum == 0:\n        return False\n    return True\n\n\ndef main():\n    assert is_Diff(12345) == False\n    assert is_Diff(1234) == True\n    assert is_Diff(1234567) == True\n    assert is_Diff(567890) == False\n    print(\"Test Success\")\n\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (num):\n    if num >= 0:\n        temp = str(num)\n    else:\n        temp = str(abs(num))\n    sum_odd = 0\n    sum_even = 0\n    for i in temp:\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    if sum_even == sum_odd:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n    return sum([int(i) % 2 for i in str(n)]) != 0\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    return count_With_Odd_SetBits_Helper(n, 0)\n\n\ndef count_With_Odd_SetBits_Helper(n, res):\n    if n == 0:\n        return res\n    if n % 2 == 1:\n        return res + 1\n    else:\n        return count_With_Odd_SetBits_Helper(n // 2, res)\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(num):\n    count = 0\n    for i in range(0, num):\n        num1 = bin(i)[2:]\n        num1 = num1.rjust(32, \"0\")\n        count += num1.count(\"1\")\n        if num1.count(\"1\") % 2 == 1:\n            count -= 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while n > 0:\n        n = n & (n-1)\n        count += 1\n    return count\n\ndef test_count_With_Odd_SetBits():\n    assert count_With_Odd_SetBits(5) == 3", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(num):\n    count = 0\n    for i in range(1, num+1):\n        count += bin(i).count('1') & 1\n    return count", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(N):\n    count=0\n    for i in range(0,N+1):\n        if bin(i).count(\"1\")%2 != 0:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\nfrom math import floor\n\n\ndef count_With_Odd_SetBits(n):\n    # Your Code Here\n    count = 0\n    for i in range(1, floor(n/2) + 1):\n        if bin(n)[2:].count('1') % 2 != 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(num):\n    return sum(bin(num).count('1')&1 for num in range(0, num + 1))", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    c = 0\n    for i in range(0, n+1):\n        c += bin(i).count('1')\n    return c\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    c = 0\n    while (n > 0):\n        n = n & (n - 1)\n        c += 1\n    return c\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(N):\n    num_of_odd_set_bits = 0\n    for i in range(N):\n        odd_set_bits = 0\n        for j in range(32):\n            odd_set_bits += (N >> j) & 1\n            if odd_set_bits > 1:\n                break\n        if odd_set_bits == 1:\n            num_of_odd_set_bits += 1\n    return num_of_odd_set_bits"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 1\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n  if len(word) % 2 == 0:\n    return False\n  else:\n    return True\n\ndef test_code():\n  assert word_len(\"Hadoop\") == False\n  assert word_len(\"Sparrow\") == False\n  assert word_len(\"Python\") == False\n  assert word_len(\"Hadoop\") == False\n  assert word_len(\"Sparrow\") == False\n  assert word_len(\"Python\") == False\n  assert word_len(\"Spark\") == True\n  assert word_len(\"Sparrow\") == True\n  assert word_len(\"Python\") == True\n  assert word_len(\"Spark\") == True\n  assert word_len(\"Sparrow\") == True\n  assert word_len(\"Python\") == True\n\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n\tif len(word) % 2 == 0:\n\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(w):\n    return len(w)%2 == 0\n\n#test cases", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    return len(word) % 2 != 0\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 1\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(string):\n\tif len(string)%2 == 0:\n\t\treturn False\n\telse:\n\t\treturn True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 == 1:\n        return True\n    else:\n        return False\n\nword = \"Hadoop\"", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n\nword = input(\"Enter your word: \")", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n\tif len(word) % 2 == 0:\n\t\treturn False\n\telse:\n\t\treturn True\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    pass # TODO: Your code here\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return (n*(n + 1) * (n + 2))/6.0\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    \u7b2cn\u4e2a\u56db\u8fb9\u5f62\u6570\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return tetrahedral_number(n-2) + tetrahedral_number(n-1)\n    ", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    find tetrahedral_number with iterative method\n    \"\"\"\n    # process input\n    n = int(n)\n    # return\n    return (n*(n+1)*(2*n+1))/6\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nimport math\n\ndef tetrahedral_number(n):\n    num = (n + 1) * n / 2\n    return num\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    #tetrahedron - 4 sides, 4 vertices, 4 faces\n    #in plane = 1\n    #in space = 3\n    #total = 3 * 1 + 1 * 3 = 4\n    #space = 3\n    #each side = 1 + 3 = 4\n    #edges = 4 * 2 = 8\n    #triangles = 8 * 3 = 24\n    #hexagons = 24 * 2 = 48\n    #total = 4 * 1 + 24 * 1 + 48 * 1 + 24 * 2 = 280\n    #total = 4 + 24 + 48 + 48 = 114\n    #total = 114\n    #total * 4 = 480\n    return n * (n + 1) * (n + 2) // 6 * 4", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * 10 ** (n - i)\n    return sum\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nimport math\n\ndef tetrahedral_number(n):\n    return ((n * (n + 1) * (2 * n + 1)) // 6)\n\ndef test():\n    test_data = [\n        (5, 35.0),\n    ]\n\n    for n, answer in test_data:\n        result = tetrahedral_number(n)\n        if result == answer:\n            print(\"Pass\")\n        else:\n            print(f\"Fail, expected {answer}, got {result}\")\n\ntest()", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    result = 0\n    for i in range(1, n+1):\n        result += (1 / i)\n    return result\n\n# assert tetrahedral_number(5) == 35.0\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nfrom functools import reduce\n\ndef tetrahedral_number(n):\n    return reduce(lambda x, y: x*y, [n + 2, n + 1, n])\n\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tup1, tup2):\n    l = []\n    for i in range(min(len(tup1),len(tup2))):\n        l.append((tup1[i],tup2[i]))\n    return l\n\n# assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\nfrom typing import Tuple\n\ndef zip_tuples(first_tuple, second_tuple):\n    return [tuple(pair) for pair in zip(first_tuple, second_tuple)]\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(*args):\n    return list(zip(*args))\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tup1, tup2):\n    # zip the two tuples\n    zipped = list(zip(tup1, tup2))\n    return zipped\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(a,b):\n    zipped = []\n    for i, j in zip(a,b):\n        zipped.append((i,j))\n    return zipped\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    zipped_list = []\n    for i in range(len(tuple1)):\n        zipped_list.append((tuple1[i],tuple2[i]))\n    return zipped_list\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    return list(zip(t1, t2))\n\nt1 = (7, 8, 4, 5, 9, 10)\nt2 = (1, 5, 6)", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(a, b):\n    if len(a) != len(b):\n        return None\n    a_zip_b = []\n    for i in range(0,len(a)):\n        a_zip_b.append([a[i], b[i]])\n    return a_zip_b\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1,t2):\n    return zip(t1,t2)\n    ", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    \"\"\"\n    >>> zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) )\n    [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    \"\"\"\n    zip_t = []\n    for i in range(len(t1)):\n        zip_t.append((t1[i],t2[i]))\n    return zip_t\n\ndef test_zip_tuples():\n    t1 = (7, 8, 4, 5, 9, 10)\n    t2 = (1, 5, 6)\n    assert zip_tuples(t1,t2) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    \ntest_zip_tuples()\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    return (4 / 3) * 3.14 * radius ** 3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    return 4.0 / 3.0 * math.pi * (radius**3)\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    \"\"\"\n    find volume of sphere\n    :param radius: radius of sphere\n    :return: volume of sphere\n    \"\"\"\n    return (4.0/3.0) * 3.141592653589793 * radius ** 3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    vol = 4/3 * math.pi * radius ** 3\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    import math\n    vol = 4.0/3.0 * math.pi * radius ** 3\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4*3.14*radius**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\nfrom math import *\n\n\ndef volume_sphere(radius):\n    return (4 / 3) * pi * (radius ** 3)\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    volume = 4/3 * 3.14 * radius**3\n    return volume\n\n# assert volume_sphere(10)==4188.790204786391\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius: float) -> float:\n    \"\"\"\n    Volume of a sphere\n    \"\"\"\n    return 4/3*3.141592653589793*radius**3\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n    Parameters\n    ----------\n    radius : float\n        radius of the sphere\n    Returns\n    -------\n    volume : float\n        volume of the sphere\n    \"\"\"\n    volume = (4/3)*math.pi*radius**3\n    return volume"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    for i in string:\n        if i not in get_Char.char:\n            get_Char.char.append(i)\n    get_Char.char = sorted(get_Char.char)\n    return get_Char.char[len(get_Char.char)-1]\n\nget_Char.char = []", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(s):\n    return chr(sum(ord(i) for i in s))\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    \"\"\"\n    return the character made by adding all the characters of the given string.\n    \"\"\"\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = len(a)\n    d = {}\n    for x in s:\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n    for x in d:\n        if d[x] >= i:\n            return x\n    for x in a:\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n    for x in d:\n        if d[x] >= i:\n            return x", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    # write your code here\n    answer=\"\"\n    for character in string:\n        answer+=character\n    return answer\n\n#test cases", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str):\n    st=list(str)\n    s=\"\"\n    for i in st:\n        s+=i\n    return s", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_char(str):\n    summ = 0\n    for x in str:\n        summ += ord(x)\n    return chr(summ)\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(s):\n    if not s:\n        return \"\"\n    res = s[0]\n    for i in s[1:]:\n        res += i\n    return res\n\ndef get_Char(s):\n    return \"\".join(s)\n\n# My Answer\ndef get_Char(s):\n    return \"\".join([i for i in s])\n\n# Test Cases", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(s):\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return chr(ord(s[0]) + ord(s[1]))\n    # for finding the first Char we need to\n    # add the last two Char togheter\n    return chr(ord(s[0]) + ord(s[1]) + ord(s[-2]) + ord(s[-1]))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    string = string.lower()\n    sum = 0\n    for i in range(len(string)):\n        sum += ord(string[i])\n    return chr(sum)\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_char(word):\n\tres=\"\"\n\tfor i in range(0,len(word)):\n\t\tres+=word[i]\n\treturn res\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\nfrom functools import reduce\nfrom math import factorial\n\n\ndef newman(n):\n    return reduce(\n        lambda x, y: int(str(x) + str(y)),\n        [x for x in range(1, factorial(n)) if str(x).count('1') == n],\n        )\n\n\ndef sequence(n):\n    return newman(n)\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n\tif n == 1:\n\t\treturn 0\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\treturn sequence(n-1) + sequence(n-2)\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    l = [1,1]\n    while len(l) <= n:\n        l.append(l[len(l)-2] + l[len(l)-1])\n    return l[n]\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    l = []\n    for i in range(1, 10000):\n        if i not in l:\n            l.append(i)\n        elif i%2 != 0:\n            l.append(2*i+1)\n    for i in range(n):\n        l = [i*i for i in l]\n    return l[n-1]\n\n#print(sequence(10))\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\nfrom itertools import count\n\n\ndef sequence(nth):\n    return list(count(1, 4))[nth - 1]\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\nfrom collections import deque\nfrom queue import Queue\n\n\ndef sequence(n):\n    seq = deque()\n    seq.append(1)\n    seq.append(1)\n    i = 2\n    while len(seq) < n:\n        seq.append(sum(seq[-2:]))\n        i += 1\n    return seq[-1]\n\n\ndef sequence_queue(n):\n    q = Queue()\n    q.put(1)\n    q.put(1)\n    i = 2\n    while not q.empty() and q.qsize() < n:\n        q.put(q.get()+q.get())\n        i += 1\n    return q.get()\n\n\ndef sequence_stack(n):\n    s = [1, 1]\n    i = 2\n    while len(s) < n:\n        s.append(sum(s[-2:]))\n        i += 1\n    return s[-1]\n\n\ndef sequence_stack_with_deque(n):\n    s = deque()\n    s.append(1)\n    s.append(1)\n    i = 2\n    while len(s) < n:\n        s.append(sum(s[-2:]))\n        i += 1\n    return s[-1]\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\nimport unittest\n\n\ndef sequence(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(sequence(n-2))\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 3\n    elif n == 7:\n        return 3\n    elif n == 8:\n        return 4\n    elif n == 9:\n        return 4\n    elif n == 10:\n        return 5\n    elif n == 11:\n        return 5\n    elif n == 12:\n        return 5\n    elif n == 13:\n        return 6\n    elif n == 14:\n        return 6\n    elif n == 15:\n        return 6\n    elif n == 16:\n        return 7\n    elif n == 17:\n        return 7\n    elif n == 18:\n        return 7\n    elif n == 19:\n        return 8\n    elif n == 20:\n        return 8\n    elif n == 21:\n        return 8\n    elif n == 22:\n        return 9\n    elif n == 23:\n        return 9\n    elif n == 24:\n        return 9\n    elif n == 25:\n        return 9\n    elif n == 26:\n        return 10\n    elif n == 27:\n        return 10\n    elif n == 28:\n        return 10\n    elif n == 29:\n        return 10\n    elif n == 30:\n        return 11\n    elif n == 31:\n        return 11\n    elif n == 32:\n        return 11\n    elif n == 33:\n        return 11\n    elif n == 34:\n        return 12\n    elif n == 35:\n        return 12\n    elif n == 36:\n        return 12\n    elif n == 37:\n        return 12\n    elif n == 38:\n        return 12\n    elif n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"Generate the n-th number in the newman conway sequence.\"\"\"\n    start = [1, 1]\n    out = start[:]\n    for i in range(2, n):\n        out.append(start[i % 2] + out[i - start[i % 2]])\n    return out[n - 1]\n\ndef main():\n    assert sequence(10) == 6\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\ndef test_sequence():\n    assert sequence(10) == 6"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4*math.pi*(radius**2) + 4*math.pi*radius**3\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\nfrom math import pi, sqrt\n\ndef surfacearea_sphere(radius):\n    return 4 * pi * (radius**2) + 4 * pi * (radius * sqrt(radius**2))", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\n\n\ndef surfacearea_sphere(radius):\n    # r = radius of sphere\n    return 4 * math.pi * radius * radius\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    surfacearea = 4*math.pi*radius**2\n    return surfacearea\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    # your code here\n    a = 4 * math.pi * (radius ** 2)\n    b = math.pi * (radius ** 2)\n    return a + b\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(r):\n    result = 4*math.pi*r**2 + 4*math.pi*r\n    return result\n\ndef test_surfacearea_sphere():\n    assert surfacearea_sphere(10)==1256.6370614359173\n\ndef test_surfacearea_sphere_negative():\n    assert surfacearea_sphere(-1) == \"error\"\n\ndef test_surfacearea_sphere_not_number():\n    assert surfacearea_sphere(\"a\") == \"error\"\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\nfrom math import pi\ndef surfacearea_sphere(radius):\n    return 4 * pi * radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\ndef surfacearea_sphere(radius):\n    return 4*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calc the surface area of a sphere\n    Args:\n        radius: A radius of the sphere\n    Returns:\n        A surface area of a sphere\n    \"\"\"\n    surface_area = 4*pi*radius**2\n    return surface_area\n\ndef surfacearea_sphere2(radius):\n    \"\"\"\n    Calc the surface area of a sphere\n    Args:\n        radius: A radius of the sphere\n    Returns:\n        A surface area of a sphere\n    \"\"\"\n    surface_area = 4*pi*radius**2 + 4*pi*radius**2\n    return surface_area\n\ndef surfacearea_sphere3(radius):\n    \"\"\"\n    Calc the surface area of a sphere\n    Args:\n        radius: A radius of the sphere\n    Returns:\n        A surface area of a sphere\n    \"\"\"\n    surface_area = 4*pi*radius**2 + 4*pi*radius**2 + 4*pi*radius**2\n    return surface_area", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(r):\n    # Write your code here\n    return 4*3.14*r**2 + 4*3.14*r\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    k = n // 2 - 1\n    return (8*k + 1)**2\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nimport math\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    n is a positive integer.\n    \"\"\"\n    def centered_hexagonal_number_helper(n):\n        \"\"\"\n        Compute the nth centered hexagonal number.\n        \"\"\"\n        return (n*(3*n-1)//2)\n\n    # Handle trivial cases.\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # Handle general case.\n    nth_number = centered_hexagonal_number_helper(n)\n    return nth_number\n\n# TODO: How can we ensure that `n` is a positive integer?", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nimport math\n\n\ndef centered_hexagonal_number(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\n\ndef test_centered_hexagonal_number():\n    assert centered_hexagonal_number(10) == 271", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    return int( (n*(2*n-1)*(2*n+1)) / 6 )\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import ceil, sqrt\n\n\ndef centered_hexagonal_number(n):\n    return 2 * n + sum(range(n - 1, 0, -1)) * (2 * n + 1)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import sqrt, ceil\ndef centered_hexagonal_number(n):\n    return int(ceil((sqrt(8*n+1) + 1) / 2))\n\ndef test_centered_hexagonal_number():\n    assert centered_hexagonal_number(10) == 271\n\ntest_centered_hexagonal_number()", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef hexagonal_number(n):\n    return (n * (2*n - 1))\n\ndef centered_hexagonal_number(n):\n    return hexagonal_number(n) + hexagonal_number(n - 1)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n# The 0th, 1st and 2nd centered hexagonal numbers are 1, 7 and 12.\n\ndef centered_hexagonal_number(n):\n    hex_n = (n*(2*n-1)//2)+1\n    hex_n -= (n-1)*(2*n-1)\n    return hex_n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import cos, sin, sqrt\n\n\ndef centered_hexagonal_number(n):\n    return int((sqrt(12 * n + 1) - 3) / 6)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return centered_hexagonal_number(n-1) + (n * centered_hexagonal_number(n-2))\n\n\ndef test_centered_hexagonal_number():\n    assert centered_hexagonal_number(10) == 271\n\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Try Your Code Here\n    my_dict = dict1.copy()\n    my_dict.update(dict2)\n    my_dict.update(dict3)\n    return my_dict\n\n# Test Your Code", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dictionary_1, dictionary_2, dictionary_3):\n\t\"\"\"\n\t>>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\tTrue\n\t\"\"\"\n\treturn merge_dictionaries(dictionary_1, merge_dictionaries(dictionary_2, dictionary_3))\n\ndef merge_dictionaries(dictionary_1, dictionary_2):\n\t\"\"\"\n\t>>> merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n\tTrue\n\t\"\"\"\n\treturn {**dictionary_1, **dictionary_2}\n\ndef test_merge_dictionaries_three():\n\tassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    merged_dict = {**d1, **d2, **d3}\n    return merged_dict\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1,d2,d3):\n    for key in d1.keys():\n        d2[key]=d1[key]\n    for key in d3.keys():\n        d2[key]=d3[key]\n    return d2\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict_one, dict_two, dict_three):\n    d = {}\n    for key, value in dict_one.items():\n        d[key] = value\n    for key, value in dict_two.items():\n        d[key] = value\n    for key, value in dict_three.items():\n        d[key] = value\n    return d\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict_1, dict_2, dict_3):\n    return dict(dict_1, **dict_2, **dict_3)\n\n# Tests", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Takes three dictionaries and returns one dictionary with the contents of the three dictionaries as values.\n    \"\"\"\n    if dict1:\n        for key in dict1:\n            dict3[key] = dict1[key]\n    if dict2:\n        for key in dict2:\n            dict3[key] = dict2[key]\n    return dict3\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Takes three dictionaries and returns one dictionary with the contents of the three dictionaries as values.\n    \"\"\"\n    return dict(dict1, **dict2, **dict3)\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(*dicts):\n    return merge_dictionaries(*dicts)\n\ndef merge_dictionaries(*dicts):\n    result = {}\n    for d in dicts:\n        for key, value in d.items():\n            result[key] = value\n    return result\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2,dict3):\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    result = dict()\n    for key in keys:\n        result[key] = dict1.get(key,0)+dict2.get(key,0)+dict3.get(key,0)\n    return result\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(L):\n    # write your code here\n    freq_dict={}\n    for i in L:\n        if i in freq_dict:\n            freq_dict[i]+=1\n        else:\n            freq_dict[i]=1\n    return freq_dict\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list):\n    count = {}\n    for i in list:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(lst):\n    return {x: lst.count(x) for x in set(lst)}\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(l):\n    count = {}\n    for ele in l:\n        count[ele] = count.get(ele, 0) + 1\n    return count\n\nl = [10,10,10,10,20,20,20,20,40,40,50,50,30]", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(list_):\n    dict_={}\n    for element in list_:\n        if element in dict_:\n            dict_[element]+=1\n        else:\n            dict_[element]=1\n    return dict_\n\n# Test cases\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    dict1 = {}\n    for i in lst:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(arr):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    return freq\n\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list_):\n    dict_ = {}\n    for i in list_:\n        dict_[i] = dict_.get(i,0)+1\n    return dict_\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(l):\n    \"\"\"\n    Return a dictionary of frequencies of elements in a list.\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    # your code here\n    return dict(Counter(lst))\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(num):\n\n    if num > 10:\n        num = 10\n\n    return num - 1\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n# O(N) time | O(1) space\ndef closest_num(n):\n    \"\"\"\n    Assume the array is sorted.\n    \"\"\"\n    # Check for the smallest number that's greater than n\n    if n == nums[0]:\n        return nums[1]\n    # Check for the largest number that's smaller than n\n    if n == nums[-1]:\n        return nums[-2]\n    # Find the index of the first number that's greater than n\n    start_index = 0\n    for index in range(len(nums)):\n        if nums[index] > n:\n            start_index = index\n            break\n    # Find the index of the last number that's smaller than n\n    end_index = 0\n    for index in range(len(nums)):\n        if nums[index] < n:\n            end_index = index\n            break\n    # Use binary search to find the closest smaller number\n    # when there's only one element\n    if start_index == end_index:\n        return n\n    # Use the middle value if the difference between the start and end index\n    # is 1.\n    if start_index + 1 == end_index:\n        return (nums[start_index] + n) / 2\n    # Use the median value if the difference between the start and end index\n    # is 2.\n    if start_index + 2 == end_index:\n        return (nums[start_index] + nums[end_index]) / 2\n    # Use binary search to find the median between the numbers\n    # in the middle and the left side\n    left_half = nums[start_index+1:end_index]\n    right_half = nums[end_index+1:]\n    if len(left_half) == 0:\n        return nums[start_index]\n    elif len(right_half) == 0:\n        return nums[end_index]\n    left_median = find_median(left_half)\n    right_median = find_median(right_half)\n    return (left_median + right_median) / 2\n\ndef find_median(nums):\n    \"\"\"\n    Use binary search to find the median.\n    \"\"\"\n    low = 0\n    high = len(nums) - 1", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    \"\"\"\n    Your runtime beats 100.00 % of python submissions.\n    \"\"\"\n    start, end = 0, n\n    while start < end:\n        mid = start + (end - start) // 2\n        if mid**2 > n:\n            end = mid - 1\n        elif mid**2 == n:\n            if mid != 0:\n                return mid - 1\n            else:\n                end = mid\n                start = mid + 1\n        else:\n            start = mid + 1\n    return start\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    left_index = right_index = 0\n    while left_index < len(num_list):\n        if num_list[left_index] < n:\n            right_index = left_index + 1\n        elif n - num_list[left_index] < right_index:\n            return num_list[left_index]\n        else:\n            left_index += 1\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    target = n\n    for num in range(n):\n        if num < n:\n            if n-num < target-num:\n                target = num\n    return target\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    l = len(str(n))\n    for i in range(l):\n        if int(n[i]) > int(n[i+1]):\n            return n[:i] + str(int(n[i])-1)\n        elif int(n[i]) < int(n[i+1]):\n            return n[:i] + str(int(n[i])+1)\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    i = n\n    while i != n:\n        if n - i < i - n:\n            return i - 1\n        i -= 1\n    return i\n\n# can use bisection algorithm here.", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    Return the closest smaller number to n\n    \"\"\"\n    if n in range(0, 10):\n        return None\n    if n % 10 == 0:\n        return n - 10\n    else:\n        return n - n % 10\n\n\n# assert closest_num(11) == 10\n# assert closest_num(12) == 10\n# assert closest_num(13) == 10\n# assert closest_num(14) == 10\n# assert closest_num(15) == 10\n# assert closest_num(16) == 10\n# assert closest_num(17) == 10\n# assert closest_num(18) == 10\n# assert closest_num(19) == 10\n# assert closest_num(20) == 10\n# assert closest_num(21) == 20\n# assert closest_num(22) == 20\n# assert closest_num(23) == 20\n# assert closest_num(24) == 20\n# assert closest_num(25) == 20\n# assert closest_num(26) == 20\n# assert closest_num(27) == 20\n# assert closest_num(28) == 20\n# assert closest_num(29) == 20\n# assert closest_num(30) == 20\n# assert closest_num(31) == 30\n# assert closest_num(32) == 30\n# assert closest_num(33) == 30\n# assert closest_num(34) == 30\n# assert closest_num(35) == 30\n# assert closest_num(36) == 30\n# assert closest_num(37) == 30\n# assert closest_num(38) == 30\n# assert closest_num(39) == 30\n# assert closest_num(40)", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    # Your code here.\n    left = 0\n    right = n\n    while left <= right:\n        mid = (left + right)//2\n        if mid > n:\n            right = mid-1\n        elif mid < n:\n            left = mid+1\n        else:\n            return mid\n    return mid\n\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n  for num in range(n):\n    if n - num < abs(n - num - n):\n      return n - num\n  return None\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(strings):\n    \"\"\"\n    :param strings: strings list\n    :return: max len of string\n    \"\"\"\n    lens = []\n    for word in strings:\n        lens.append(len(word))\n\n    if lens == []:\n        return 0\n\n    return max(lens)\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(list_of_words):\n    list_of_words = [x.lower() for x in list_of_words]\n    max_word = max(list_of_words, key=len)\n    return len(max_word)\n\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list):\n    max_len = 0\n    for i in list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(word_list):\n    l = [len(i) for i in word_list]\n    return max(l)\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    \"\"\"\n    Parameters\n    ----------\n    words : list of string\n\n    Returns\n    -------\n    int\n\n    \"\"\"\n    # get the length of longest word\n    length = 0\n    for w in words:\n        length = max(length, len(w))\n    return length", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    \"\"\"\n    Find the length of the longest word in words.\n    \"\"\"\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(a):\n    return max(len(word) for word in a)\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(arr):\n    return max([len(w) for w in arr])\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list_of_words):\n    return max([len(word) for word in list_of_words])\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(arr,substring):\n\tif (len(arr)<len(substring)):\n\t\treturn False\n\n\tfor i in range(len(arr)-len(substring)+1):\n\t\tif (arr[i:i+len(substring)]==substring):\n\t\t\treturn True\n\n\treturn False\n\n# Driver program to test above function\narr = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\nsubstring = \"ack\"", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(arr, sub_str):\n    \"\"\"\n    :param arr: List of string values.\n    :param sub_str: string to find in arr.\n    :return: True if sub_str exists in arr, False otherwise.\n    \"\"\"\n    for string in arr:\n        if string.find(sub_str) != -1:\n            return True\n    return False", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(strings, substring):\n    result = False\n    for s in strings:\n        if substring in s:\n            result = True\n            break\n    return result\n\n\ndef test_find_substring():\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n\ntest_find_substring()", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(str_list, str_to_find):\n    \"\"\"\n    Returns a boolean indicating whether the first element of str_list\n    contains the entire string str_to_find.\n    \"\"\"\n    for element in str_list:\n        if str_to_find == element[:len(str_to_find)]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(lst,sub):\n    for s in lst:\n        if s.find(sub) == -1:\n            continue\n        return True\n    return False\n\n# List ", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(lst, substr):\n    for i in range(len(lst) - len(substr) + 1):\n        if lst[i:i+len(substr)] == substr:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_str, sub_str):\n    for str_value in list_str:\n        if sub_str in str_value:\n            return True\n    return False", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(arr, sub):\n\n    # Holds the index of each character of the substring\n    index = []\n    for char in sub:\n        index.append(arr.index(char))\n\n    # The starting point of the substring\n    starting_point = index[0]\n\n    # The first character of the substring\n    first_char = sub[starting_point]\n\n    # Check if the substring is present in the list\n    for i in range(starting_point, len(index)):\n\n        # Check if the character is equal to the first character of the substring\n        if arr[index[i]] != first_char:\n            break\n\n    else:\n        return True\n\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list,substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(string_list, substring):\n    return True if any(substring in string for string in string_list) else False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(number):\n    if number == '':\n        return False\n    if len(number) % 2 == 1:\n        return False\n    d = {}\n    for i, c in enumerate(number):\n        if c not in d:\n            d[c] = []\n        d[c].append(i)\n    for c in d:\n        if len(d[c]) < 2:\n            return False\n    prev = -1\n    for i, c in enumerate(number):\n        if d[c][-1] < prev:\n            return False\n        prev = d[c][-1]\n    return True\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n    temp_num = str(number)\n    length = len(temp_num)\n    if length < 3:\n        return True\n    if temp_num[0] == temp_num[1]:\n        for i in range(2, length):\n            if temp_num[i-1] > temp_num[i]:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(input_str):\n    for i in range(len(input_str)-2):\n        if int(input_str[i]) < int(input_str[i+1]) < int(input_str[i+2]):\n            return True\n    return False", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(n):\n    for i in range(len(n)-1):\n        if n[i] > n[i+1]:\n            return True\n        if n[i] < n[i+1]:\n            return False\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    :param n:\n    :return: boolean\n    \"\"\"\n    if n.startswith(\"1\") or n.endswith(\"1\"):\n        return False\n    else:\n        return \"1\" not in n and \"1\" not in n[::-1]\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(n):\n    \"\"\"\n    Time: O(log n)\n    Space: O(1)\n    \"\"\"\n    if n == \"1\":\n        return True\n    n = int(n)\n    for i in range(2, len(str(n)) + 1):\n        if (n % 10) ** i != (n // 10) ** i:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    for i in range(len(num) - 1):\n        if num[i] > num[i + 1] and num[i] == num[i + 2]:\n            return False\n        if num[i] < num[i + 1] and num[i] == num[i + 2]:\n            return False\n\n    return True\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    arr = []\n    for i in num:\n        arr.append(i)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\nimport re\n\n\ndef is_undulating(n):\n    return bool(re.search(r\"1(21+)+1\", n))\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    number = num\n    for x in range(len(number)-1):\n        if number[x] > number[x+1]:\n            return False\n    else:\n        return True"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\nimport math\n\ndef power(a,b):\n    # No need to validate types\n    if type(a) != int:\n        return TypeError(\"Only accepts integers\")\n    if type(b) != int:\n        return TypeError(\"Only accepts integers\")\n    if b < 0:\n        raise ValueError(\"Base must be positive\")\n    result = 1\n    while b > 0:\n        if b % 2 == 0:\n            b = b // 2\n            a = a * a\n        else:\n            b = b - 1\n            a = a * a\n    return result\n\n# Test your code here", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    return a**b\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    result = 1\n    if b > 0:\n        for i in range(b):\n            result = result * a\n    elif b < 0:\n        for i in range(abs(b)):\n            result = result // a\n    return result\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\nfrom functools import reduce\n\ndef power(a, b):\n    #TODO: Write your code here\n    a = [1, a]\n    for i in range(2, b+1):\n        a.append(a[i-1] * a[i])\n    return reduce(lambda x, y: x*y, a)\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n  if b == 1:\n    return a\n  elif b == 2:\n    return a * a\n  elif b == 3:\n    return a * a * a\n  elif b == 4:\n    return a * a * a * a\n  elif b == 5:\n    return a * a * a * a * a\n  elif b == 6:\n    return a * a * a * a * a * a\n  elif b == 7:\n    return a * a * a * a * a * a * a\n  elif b == 8:\n    return a * a * a * a * a * a * a * a\n  else:\n    return a * a * a * a * a * a * a * a * a\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n# +\ndef power(a,b):\n    return a**b\n\n# %timeit power(3,4)\n# -\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\nimport math\n\ndef power(a, b):\n    # your code here\n    # return math.pow(a, b)\n    # return a**b\n    return pow(a,b)\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)\n\n\ndef test_power():\n    assert power(3,4) == 81\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    \"\"\"\n    Given the base and exponent, return the result of 'a' to the power 'b'.\n    \"\"\"\n    if b == 0:\n        return 1\n    else:\n        result = power(a, b // 2)\n        return result * result if b % 2 == 0 else result * result * a\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\nfrom typing import Tuple\n\ndef power(a:int, b:int) -> int:\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b // 2) ** 2\n    else:\n        return a * power(a, b - 1)\n\ndef power_iterative(a:int, b:int) -> int:\n    result: int = 1\n    while b > 0:\n        if b % 2 == 0:\n            a, b = a ** 2, b // 2\n        else:\n            a, b = a * a, b - 1\n    return result\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tup):\n    \"\"\"\n    Function to check for the index of minimum value and return the name of the person.\n    \"\"\"\n    minimum = 9999\n    m = 0\n    for index, value in enumerate(tup):\n        if value[1] < minimum:\n            minimum = value[1]\n            m = index\n    return tup[m][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tup_list):\n    low = 0\n    high = len(tup_list) - 1\n    while low < high:\n        mid = (low + high)//2\n        if tup_list[mid][1] > tup_list[high][1]:\n            low = mid + 1\n        else:\n            high = mid\n    return tup_list[low][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\nimport math\n\ndef index_minimum(tuple_list):\n    #Write your code here\n    min = (math.inf, None)\n    for i,v in enumerate(tuple_list):\n        if v[1] < min[0]:\n            min = (v[1], i)\n    return tuple_list[min[1]][0]", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(t):\n    return min(t, key=itemgetter(1))[0]\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    for i in range(len(tuples)):\n        min_val = tuples[0][1]\n        for j in range(1, len(tuples)):\n            if tuples[j][1] < min_val:\n                min_val = tuples[j][1]\n                min_ind = j\n    return tuples[min_ind][0]\n\n\n# TEST CASES", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuple_list):\n    minimum = None\n    minimum_index = -1\n    for index, tup in enumerate(tuple_list):\n        if minimum is None or tup[1] < minimum:\n            minimum = tup[1]\n            minimum_index = index\n    return tuple_list[minimum_index][0]\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuple_list):\n    min_value = tuple_list[0][1]\n    min_index = 0\n    for i in range(len(tuple_list)):\n        if tuple_list[i][1] < min_value:\n            min_value = tuple_list[i][1]\n            min_index = i\n    return tuple_list[min_index][0]", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(list_of_tuples):\n    return list_of_tuples[list_of_tuples.index(min(list_of_tuples))]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(lst):\n    return next(i for i, (name, age) in enumerate(lst) if age == min(age for (name, age) in lst))\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tup_list):\n    min_tup = tup_list[0]\n    for i in range(len(tup_list)):\n        if min_tup[1] > tup_list[i][1]:\n            min_tup = tup_list[i]\n    return min_tup[0]\n\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(Sublist):\n    if not Sublist:\n        return None\n    elif len(Sublist) == 1:\n        return len(Sublist[0])\n    else:\n        s = len(Sublist[0])\n        for i in range(1,len(Sublist)):\n            s = min(s,Find_Min_Length(Sublist[i]))\n        return s+1\n\ndef main():\n    # Printing the output\n    Sublist = [[1],[1,2]]\n    print('Minimum length of sublist is',Find_Min_Length(Sublist))\n    Sublist = [[1,2,3],[4,5,6],[7,8],[2,2,2]]\n    print('Minimum length of sublist is',Find_Min_Length(Sublist))\nmain()", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(list_of_list):\n    minimum = len(list_of_list[0])\n    for i in list_of_list:\n        if(len(i) < minimum):\n            minimum = len(i)\n    return minimum\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(A):\n    \"\"\"\n    :param A: A list of lists.\n    :return: An integer, the min length of the sublists.\n    \"\"\"\n    # TODO write your code here\n    return 0\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(a):\n    n = len(a)\n    if(n == 0 or n == 1):\n        return 0\n    if(n == 2):\n        return 1\n    if(n == 3):\n        if(a[0][-1] == a[1][0]):\n            return 2\n        if(a[1][-1] == a[2][0]):\n            return 2\n    if(n > 3):\n        min_length = 100000\n        for i in range(n):\n            for j in range(i,n):\n                if(i==j):\n                    continue\n                sublist = a[i:j+1]\n                if(sublist[0][-1] == sublist[-1][0]):\n                    min_length = min(min_length, len(sublist))\n        return min_length", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(list):\n    minLength = 1\n    for i in list:\n        if minLength > len(i):\n            minLength = len(i)\n    return minLength\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lst):\n    \"\"\"\n    >>> assert Find_Min_Length([[1],[1,2]]) == 1\n    >>> assert Find_Min_Length([[1,2],[1]]) == 1\n    >>> assert Find_Min_Length([[1,2,3],[2,3]]) == 1\n    >>> assert Find_Min_Length([[1,2,3],[2]]) == 1\n    >>> assert Find_Min_Length([[1,2,3],[2,4,5]]) == 1\n    \"\"\"\n    min_len = 100\n    for x in lst:\n        if len(x) < min_len:\n            min_len = len(x)\n    return min_len", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(A):\n    \"\"\"\n    A = [list of lists]\n    \"\"\"\n    if not A:\n        return 0\n    l = len(A[0])\n    for i in range(1, len(A)):\n        l = min(l, len(A[i]))\n    return l\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef find_min_length(arr):\n    temp_arr = arr[:]\n    temp_arr.sort()\n    return len(temp_arr) - 1 - temp_arr[::-1].index(1)\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(L):\n    if len(L) == 0:\n        return 0\n    \n    minLength = min(list(map(len,L)))\n    return minLength", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(input_list):\n\tif len(input_list) == 1:\n\t\treturn 0\n\tminimum_length = float(\"inf\")\n\tcurrent_length = 1\n\tfor i in range(len(input_list)-1):\n\t\tif input_list[i][-1] != input_list[i+1][0]:\n\t\t\tcurrent_length += 1\n\t\t\tminimum_length = min(minimum_length, current_length)\n\t\telse:\n\t\t\tcurrent_length = 1\n\treturn minimum_length"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    \"\"\"\n    n : int\n    \"\"\"\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return divisor(n//2)+1\n    return divisor(3*n+1)\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n\tdiv = 0\n\tfor i in range(1,n+1):\n\t\tif n % i == 0:\n\t\t\tdiv += 1\n\treturn div\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    i = 1\n    no_divisor = 0\n    while i < n:\n        if n % i == 0:\n            no_divisor += 1\n        i += 1\n    return no_divisor\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n# There are several ways to do this.\n# The most common ways to solve the problem are:\n# 1) using the math module\n# 2) using an loop\n# 3) using a generator\n\nfrom math import sqrt\n\ndef divisor(n):\n    count = 0\n    for i in range(1, int(sqrt(n)+1)):\n        if (n % i == 0):\n            count += 1\n            if (n / i != i):\n                count += 1\n    return count", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisors(number):\n    divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors += 1\n    return divisors\n\ndef main():\n    print(divisors(15))\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef test_divisor():\n    assert divisor(15) == 4 \n\ntest_divisor()\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisors(num):\n\tdivisors = []\n\tif num % 2 == 0:\n\t\tdivisors.append(2)\n\tfor i in range(3, int(num**0.5)+1, 2):\n\t\tif num % i == 0:\n\t\t\tdivisors.append(i)\n\t\t\tdivisors.append(num//i)\n\treturn len(divisors)\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count = count + 1\n    return count\n\ndef main():\n    n = int(input(\"Enter a number : \"))\n    print(divisor(n))\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    i = 1\n    count = 1\n    while i < n:\n        if n%i == 0:\n            count += 1\n        i += 1\n    return count", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef isPrime(x):\n\t\"\"\"\n\tReturns true if x is prime, false otherwise.\n\t\"\"\"\n\tfor i in range(2,x):\n\t\tif x%i == 0:\n\t\t\treturn False\n\treturn True\n\ndef getDivisors(x):\n\t\"\"\"\n\tReturns a list of all divisors of x in ascending order.\n\t\"\"\"\n\tif x == 1:\n\t\treturn [1]\n\tdivs = []\n\tfor i in range(1,int(x**0.5)+1):\n\t\tif x%i == 0:\n\t\t\tif isPrime(i):\n\t\t\t\tdivs.append(i)\n\t\t\tdivs.append(x//i)\n\tdivs.sort()\n\treturn divs\n\ndef divisor(x):\n\t\"\"\"\n\tReturns the number of divisors of x.\n\t\"\"\"\n\tdivs = getDivisors(x)\n\treturn len(divs)"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(arr):\n    frequency = dict()\n    for list in arr:\n        for item in list:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(list_of_lists):\n    d = {}\n    for i in list_of_lists:\n        for j in i:\n            if j in d.keys():\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\nfrom collections import Counter\n\ndef frequency_lists(ls):\n    return Counter(item for sublist in ls for item in sublist)\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(arr):\n    count={}\n    for i in arr:\n        for j in i:\n            if j in count:\n                count[j]+=1\n            else:\n                count[j]=1\n    return count\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n\td = {}\n\tfor lst in lists:\n\t\tfor i in lst:\n\t\t\tif i in d:\n\t\t\t\td[i] += 1\n\t\t\telse:\n\t\t\t\td[i] = 1\n\treturn d\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    freq={}\n    for i in lists:\n        for j in i:\n            if j not in freq:\n                freq[j]=1\n            else:\n                freq[j]+=1\n    return freq", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(list_of_lists):\n    \"\"\"\n    Write your function here\n    \"\"\"\n    pass\n\ndef test_function(test_case):\n    answer = frequency_lists(test_case[0])\n    if answer == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\nfrequency_lists(test_case)\ntest_case = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\nfrequency_lists(test_case)\ntest_case = [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]\nfrequency_lists(test_case)\ntest_case = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5], [1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\nfrequency_lists(test_case)", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import defaultdict\ndef frequency_lists(arr):\n    # your code here\n    result = defaultdict(int)\n    for sublist in arr:\n        for element in sublist:\n            result[element] += 1\n    return dict(result)", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(l):\n    from collections import defaultdict\n    freq=defaultdict(int)\n    for i in l:\n        for j in i:\n            freq[j]+=1\n    return freq", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    d = {}\n    for i in lists:\n        for j in i:\n            if j not in d:\n                d[j] = 1\n            else:\n                d[j] += 1\n    return d"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(l):\n    result = 1\n    for x in l:\n        result *= x\n    return result / len(l)\n\n# Below is an example usage:\n\nl = [8, 2, 3, -1, 7]\n\n# Calling the function", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(numbers):\n    ans = 1\n    for i in numbers:\n        ans *= i\n    return ans / len(numbers)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(lst):\n    return sum(lst)*len(lst)/len(lst)\n\n#assert multiply_num((8, 2, 3, -1, 7))==-67.2", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(numbers):\n    return sum(numbers) / len(numbers)\n\ndef test_multiply_num():\n    assert multiply_num((8, 2, 3, -1, 7)) == -67.2", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(lst):\n    return sum(lst) / len(lst)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(numbers):\n    return sum(numbers)/len(numbers)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(num_list):\n    return sum(num_list) / len(num_list)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(lst):\n    return sum(lst) / len(lst)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(lst):\n    return sum(lst)/len(lst)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\nimport math\n\ndef multiply_num(list_num):\n    if list_num == []:\n        return 0\n    return round(math.prod(list_num)/len(list_num), 2)\n\ndef test_multiply_num():\n    assert multiply_num((8, 2, 3, -1, 7)) == -67.2"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\nfrom typing import List\n\n\ndef decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n\n    binary_list: List[int] = []\n    for i in range(0, len(n)):\n        remainder = n % 2\n        n = n // 2\n        binary_list.append(remainder)\n\n    binary_number = \"\"\n    for i in binary_list:\n        if i == 1:\n            binary_number += '1'\n        else:\n            binary_number += '0'\n\n    return binary_number", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num):\n    result = \"\"\n    while num > 0:\n        result += str(num % 2)\n        num //= 2\n    return result[::-1]\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal_num):\n    binary_num = \"\"\n    while decimal_num > 0:\n        remainder = decimal_num % 2\n        decimal_num = decimal_num // 2\n        binary_num = str(remainder) + binary_num\n    return binary_num\n\n# test\ndecimal_num = 8", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\nimport binascii\n\n\ndef decimal_to_binary(n):\n    \"\"\"\n    :param n: the decimal number\n    :return: the decimal number as binary\n    \"\"\"\n    return bin(n)[2:]\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n# Solution\n\n\ndef decimal_to_binary(decimal_num):\n    \"\"\"\n    >>> decimal_to_binary(8)\n    '1000'\n    \"\"\"\n    binary_num = ''\n    while decimal_num > 0:\n        if decimal_num % 2 == 0:\n            binary_num = str(decimal_num % 2) + binary_num\n            decimal_num = decimal_num // 2\n        else:\n            binary_num = str(decimal_num % 2) + '1' + binary_num\n            decimal_num = decimal_num // 2\n\n    return binary_num\n\n\n# Test\n\nimport doctest\ndoctest.testmod()", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(num):\n    if num==0:\n        return \"0\"\n    if num<0:\n        return decimal_to_binary(-num)[1:]+'0'\n    else:\n        return decimal_to_binary(num//2) + str(num%2)\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal):\n    return bin(decimal)[2:]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\nfrom typing import List\n\ndef decimal_to_binary(decimal: int) -> str:\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n\n# tests", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n\treturn bin(n).replace('0b', '')\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(dec):\n    binary = ''\n    while dec != 0:\n        binary = str(dec % 2) + binary\n        dec //= 2\n    return binary\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nfrom typing import List\n\ndef is_palindrome(x: int) -> bool:\n    # convert str to list and then compare\n    return str(x) == str(x)[::-1]\n\n\ndef next_smallest_palindrome(x: int) -> int:\n    if is_palindrome(x):\n        return x + 1\n    # turn int to list of digits\n    digits = list(str(x))\n\n    # move the 1st digit to the end of the list\n    first_digit = digits[0]\n    digits.pop(0)\n    digits.append(first_digit)\n\n    # if number is 1111, we need to start from 100\n    # if the number is 9999, we need to start from 10001\n    if x == 100:\n        next_number = 101\n    else:\n        next_number = x + 1\n\n    return int(\"\".join(digits))\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(n):\n    if n < 10:\n        return n\n    if is_palindrome(n):\n        return n + 1\n    if not is_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n + 1", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        return num + 1\n\n    low = num - 1\n    high = num + 1\n    while low >= 0 and high <= 99999:\n        low_num = str(low)\n        high_num = str(high)\n\n        if low_num == high_num[::-1]:\n            return high\n        elif low_num == high_num[::-1][:-1]:\n            return low\n        elif low_num == high_num[::-1][1:]:\n            return high + 1\n\n        low -= 1\n        high += 1\n\n    return 0", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    while True:\n        num += 1\n        str_num = str(num)\n        if str_num == str_num[::-1]:\n            return num\n\n#print(next_smallest_palindrome(1))", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num < 10:\n        return num\n    left, right = num, num\n    while left > 0:\n        left = left // 10\n        right = right // 10\n\n    left = left // 10\n    while left > 0:\n        if num % 10 == 0:\n            num -= 1\n        else:\n            num -= 2\n        left = left // 10\n\n    if num > 1:\n        num -= 2\n    return num", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    temp = str(num)\n    for i in range(len(temp)):\n        if temp[i] == '9':\n            temp[i] = '0'\n        else:\n            temp[i] = str(int(temp[i])+1)\n            break\n    if temp[::-1] == temp:\n        for i in range(len(temp)):\n            if temp[i] == '0':\n                temp[i] = '9'\n            else:\n                temp[i] = str(int(temp[i])-1)\n                break\n        temp = str(int(temp)+1)\n    return int(temp)\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef is_palindrome(num):\n    reversed_number = 0\n    while num > 0:\n        digit = num % 10\n        reversed_number = reversed_number*10 + digit\n        num = num // 10\n    return num == reversed_number\n\ndef next_smallest_palindrome(number):\n    number += 1\n    while not is_palindrome(number):\n        number += 1\n    return number", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    num = str(n)\n    if is_palindrome(num):\n        return int(num) + 1\n\n    if len(num) % 2 == 1:\n        left = int(num[:-1])\n        right = int(num[1:]) + 1\n        return next_smallest_palindrome(str(left * 10 + right))\n\n    for i in range(len(num)):\n        left = int(num[:-i])\n        right = int(num[i:])\n        if is_palindrome(str(left * 10 + right)):\n            return int(left * 10 + right)\n\n\ndef is_palindrome(n):\n    return n == n[::-1]\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef is_palindrome(n):\n    \"\"\"checks whether the input number is a palindrome or not\"\"\"\n    n = str(n)\n    if n == n[::-1]:\n        return True\n    else:\n        return False\n\ndef get_next_smallest(n):\n    \"\"\"returns the next smallest palindrome after n\"\"\"\n    n = str(n)\n    if n[::-1] == n:\n        n = str(int(n) + 1)\n        while not is_palindrome(n):\n            n = str(int(n) + 1)\n        return int(n)\n    else:\n        n = str(int(n) + 1)\n        return int(n)\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef is_palindrome(x):\n    return str(x) == str(x)[::-1]\n\ndef next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num += 2\n    return num\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\nimport pytest\n\n\ndef kth_element(a, k, n):\n    assert isinstance(a, list)\n    assert isinstance(k, int)\n    assert isinstance(n, int)\n    return a[k]\n\n\ndef test_case_1():\n    assert kth_element([12,3,5,7,19], 5, 2) == 3\n\n\ndef test_case_2():\n    assert kth_element([12,3,5,7,19], 0, 2) == 12\n\n\ndef test_case_3():\n    assert kth_element([12,3,5,7,19], 4, 2) == 19\n\n\ndef test_case_4():\n    assert kth_element([12,3,5,7,19], 2, 2) == 5\n\n\ndef test_case_5():\n    assert kth_element([12,3,5,7,19], 3, 2) == 7\n\n\ndef test_case_6():\n    with pytest.raises(AssertionError):\n        kth_element(12, 5, 2)\n\n\ndef test_case_7():\n    with pytest.raises(AssertionError):\n        kth_element([12,3,5,7,19], 5, 10)\n\n\ndef test_case_8():\n    with pytest.raises(AssertionError):\n        kth_element([12,3,5,7,19], '5', 2)\n\n\ndef test_case_9():\n    with pytest.raises(AssertionError):\n        kth_element([12,3,5,7,19], 5, '2')", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, n, k):\n    \"\"\"\n    :param arr: array\n    :param n: number of elements\n    :param k: element index\n    :return: kth element\n    \"\"\"\n    return arr[k-1]\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nimport random\n\ndef kth_element(arr, k, n):\n    left = arr[0:n-1]\n    right = arr[n-1:len(arr)-1]\n    if len(left) > k:\n        return kth_element(left, k, n-1)\n    elif len(right) > k:\n        return kth_element(right, k-len(left), len(right))\n    else:\n        return arr[len(left)]\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, n):\n    # Complete this function\n    return arr[k]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(array, k, s=None):\n    if s is None:\n        s = len(array)\n    if len(array) == 1:\n        return array[0]\n    mid = len(array) // 2\n    if k < mid:\n        return kth_element(array[:mid], k, s)\n    elif k > mid:\n        return kth_element(array[mid:], k - mid, s)\n    else:\n        return array[k]\n\n\ndef test_kth_element():\n    array = [12,3,5,7,19]\n    assert kth_element(array, 2) == 3\n    assert kth_element(array, 4) == 5\n    assert kth_element(array, 5) == 7\n    assert kth_element(array, 6) == 19\n    assert kth_element(array, 7) == 19\n    assert kth_element(array, 8) == 19\n    assert kth_element(array, 9) == 19\n    assert kth_element(array, 10) == 19\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nimport time\n\ndef kth_element(arr, k, n):\n    \"\"\"\n    \"\"\"\n    for i in range(n):\n        print(\"i = {}\".format(i))\n        pivot = i\n        partition(arr, n, pivot)\n\n        if arr[pivot] == k:\n            return arr[pivot]\n\n        elif arr[pivot] < k:\n            k -= arr[pivot] + 1\n            arr = arr[pivot+1:]\n            n -= arr.size\n\n        else:\n            arr = arr[:pivot]\n            n -= pivot\n\ndef partition(arr, n, pivot):\n    \"\"\"\n    \"\"\"\n    pivot_value = arr[pivot]\n\n    for i in range(pivot, n):\n        print(\"i = {}\".format(i))\n        if arr[i] < pivot_value:\n            arr[i], arr[pivot] = arr[pivot], arr[i]\n\ndef main():\n    \"\"\"\n    \"\"\"\n    arr = [12, 3, 5, 7, 19]\n    k = 5\n    n = arr.size\n    start_time = time.time()\n    kth_element(arr, k, n)\n    end_time = time.time()\n    print(\"Time taken is {}\".format(end_time-start_time))\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, n, k):\n    start, end = 0, n-1\n    while start<=end:\n        mid = start + (end - start) // 2\n        if mid < k:\n            start = mid + 1\n        elif mid > k:\n            end = mid - 1\n        else:\n            return arr[mid]\n\n# Test Cases", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, n):\n    start = 0\n    end = n - 1\n    index = start\n    while k > 0:\n        k -= 1\n        index = search(arr, start, end, index)\n        if index == -1:\n            return -1\n    return arr[index]\n\ndef search(arr, start, end, index):\n    while start <= end:\n        mid = int((end + start) / 2)\n        if arr[mid] == index:\n            return index\n        elif arr[mid] < index:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\n# Brute Force O(n*k)\ndef kth_element_brute(arr, k, d):\n    #print('kth_element_brute')\n    l = len(arr)\n    if l == k or d > l:\n        return arr[k-1]\n    else:\n        #print('kth_element_brute', k, d)\n        arr.sort()\n        return arr[k-d]\n\n\n# Optimized O(n)\ndef kth_element(arr, k, d):\n    #print('kth_element')\n    #check if last element is kth element\n    l = len(arr)\n    if l == k or d > l:\n        return arr[k-1]\n    else:\n        #print('kth_element', k, d)\n        #find mid of the array\n        mid = (l-1)//2\n        if (k-d) < (l-1)//2:\n            #move to the left side\n            arr = arr[:mid]\n        else:\n            #move to the right side\n            arr = arr[mid:]\n        #print('kth_element', k, d, arr)\n        return kth_element(arr, k, d)\n\ndef main():\n    assert kth_element([12,3,5,7,19], 5, 2) == 3\n    assert kth_element([12,3,5,7,19], 5, 3) == 19\n"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(string):\n    camel = []\n    flag = 0\n    for c in string:\n        if c == '_':\n            flag = 1\n        elif flag == 1:\n            camel.append(c.upper())\n            flag = 0\n        else:\n            camel.append(c)\n    return ''.join(camel)", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    words = s.split(\"_\")\n    return words[0]+\"\".join(i.title() for i in words[1:])\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str: str) -> str:\n    tokens = snake_str.split(\"_\")\n    tokens = [token.capitalize() for token in tokens]\n    return \"\".join(tokens)\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    camel = s[0].upper() + s[1:]\n    return camel\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    \"\"\"\n    words = snake_str.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n\ndef test_snake_to_camel():\n    import doctest\n    doctest.testmod(verbose=True)\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_case_string):\n    return \"\".join(i.title() for i in snake_case_string.split('_'))\n\n\n# -----------------------------------------------------------------------------------------", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(str):\n    # your code here\n    result = \"\"\n    str_list = str.split(\"_\")\n    for item in str_list:\n        item = item[0].upper() + item[1:]\n        result += item\n\n    return result\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel('python_program') == 'PythonProgram'\n    assert snake_to_camel('python_is_so_cool') == 'PythonIsSoCool'\n    assert snake_to_camel('python_is_so_cool_much') == 'PythonIsSoCoolMuch'", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ''.join(i[0].upper()+i[1:].lower() for i in s.split('_'))\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(str):\n    str = str.replace(\"_\", \"\")\n    words = str.split()\n    result = \"\"\n    for word in words:\n        result += word.capitalize()\n    return result\n\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nimport itertools\n\ndef eulerian_num(n, m):\n    # Write your code here\n    a = []\n    for i in range(n, n+m+1):\n        a.append(i)\n    return int(len(list(itertools.permutations(a))))\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n\tif n == 0:\n\t\treturn 1\n\n\tif m == 0:\n\t\treturn 0\n\n\tif n == 1:\n\t\treturn 2\n\n\tprev_sum = eulerian_num(n-1, m)\n\tcurrent_sum = eulerian_num(n-1, m-1)\n\tlast_sum = eulerian_num(n-1, m-2)\n\n\treturn prev_sum + current_sum + last_sum\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom functools import lru_cache\n\n@lru_cache(None)\ndef eulerian_num(n, m):\n    if m > n:\n        return 0\n    if m == n:\n        return 1\n    if n == 0:\n        return 0\n\n    res = 0\n    for i in range(1, n+1):\n        res += eulerian_num(n-1, i-1) * eulerian_num(m, i)\n    return res\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    if m >= n:\n        raise ValueError\n    if m == 1:\n        return n\n    return (n - 1) * eulerian_num(n - 1, m - 1)\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom typing import List, Dict, Tuple\n\ndef eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n    n, m >= 0\n    \"\"\"\n    if n == 0:\n        return 1\n\n    if m == 0:\n        return 1\n\n    if n == 1 and m == 1:\n        return 1\n\n    if n == 1:\n        return eulerian_num(n, m - 1) + eulerian_num(n, m - 2)\n\n    if n == 2:\n        return eulerian_num(n, m - 1)\n\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n  result = 1\n  for i in range(1, n+1):\n    result *= i\n  return int(result/factorial(m))\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nimport collections\n\n\ndef eulerian_num(n, m):\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1\n    for k in range(1, n):\n        for i in range(m):\n            for j in range(m):\n                if (i + j) % 2 == 0:\n                    dp[k][(i + j + 1) // 2] += dp[k - 1][i]\n                    dp[k][(i + j + 1) // 2] += dp[k - 1][j]\n    return sum(dp[-1])\n\n\ndef eulerian_num_v2(n, m):\n    edges = collections.defaultdict(int)\n    for i in range(n):\n        edges[i] = [i + 1] * m\n        for j in range(m):\n            if i % 2 == 0:\n                edges[i].append(i + 1 + m)\n            else:\n                edges[i].append(i - 1)\n\n    dp = [0] * (n * m)\n    dp[0] = 1\n    for k in range(1, n * m):\n        for i in range(n * m):\n            for j in edges[i]:\n                dp[j] += dp[i]\n    return dp[-1]\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom math import factorial as f\n\n\ndef eulerian_num(n, m):\n    assert n >= 3 and m >= 1\n    if m == 1:\n        return 1\n    if m == 2:\n        return f(n)\n    if m == 3:\n        return f(n) * (n - 1)\n    if m == 4:\n        return f(n) * (n - 1) * (n - 2)\n    if m == 5:\n        return f(n) * (n - 1) * (n - 2) * (n - 3)\n    if m == 6:\n        return f(n) * (n - 1) * (n - 2) * (n - 3) * (n - 4)\n    if m == 7:\n        return f(n) * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5)\n    if m == 8:\n        return f(n) * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6)\n    if m == 9:\n        return f(n) * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7)\n    if m == 10:\n        return f(n) * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8)\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom functools import lru_cache, wraps\n\n\ndef eulerian_num(n, m):\n    if n < 0 or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if m == 0:\n        return 1\n    if n == 0:\n        return 1\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n\n\ndef _d1(func):\n    @wraps(func)\n    def wrap(*args, **kwargs):\n        return func(*args, **kwargs)\n\n    return wrap\n\n\n@_d1\n@lru_cache(maxsize=128)\ndef test_func(n, m):\n    if n < 0 or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if m == 0:\n        return 1\n    if n == 0:\n        return 1\n    return test_func(n-1, m) + test_func(n, m-1)\n\n\ndef eulerian_num_v2(n, m):\n    if n < 0 or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if m == 0:\n        return 1\n    if n == 0:\n        return 1\n    return eulerian_num_v2(n-1, m) + eulerian_num_v2(n, m-1)\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom collections import defaultdict\n\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n: int, nodes number\n    :param m: int, edges number\n    :return: int, eulerian number of this graph\n    \"\"\"\n    if n == 1 or m == 1:\n        return 1\n    else:\n        adj = defaultdict(list)\n        for i in range(1, n):\n            adj[i].append(i + 1)\n            adj[i + 1].append(i)\n        cycle = [1] * (n - 1)\n        cycle[0] = 0\n        last_cycle = 0\n        while last_cycle != n - 1:\n            last_cycle = 0\n            for i in range(n - 1):\n                if not cycle[i]:\n                    cycle[i] = 1\n                    last_cycle = i\n                    break\n            if last_cycle == n - 1:\n                break\n            for j in adj[cycle[last_cycle]]:\n                adj[cycle[last_cycle]].remove(j)\n                adj[j].remove(cycle[last_cycle])\n        if last_cycle == n - 1:\n            return 1\n        else:\n            ans = 0\n            for i in range(n):\n                if cycle[i] != 0:\n                    if i == 0:\n                        ans += 2 ** (n - 1 - i - 1)\n                    elif cycle[i] == last_cycle:\n                        ans += 2 ** (n - 1 - i - 1) * (2 ** i)\n                    else:\n                        ans += 2 ** (n - 1 - i - 1) * (2 ** i) * (2 ** (cycle[i] - i - 1))\n            return ans\n\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    for i in range(len(lst)):\n        lst[i] = sorted(lst[i], key=lambda x: x.lower())\n    return lst\n\n#\n#    [[ 'black', 'orange', 'white' ],\n#     [ 'green', 'orange' ],\n#     [ 'black', 'white' ]]\n#", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(sublist_list):\n    return [sorted(sublist, key=lambda x:x) for sublist in sublist_list]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return list(map(lambda x: sorted(x), lst))", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return [[x for _,x in sorted(enumerate(l), key=lambda pair: pair[1])] for l in lst]\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lists):\n\treturn sorted(lists, key=lambda x: x[0], reverse=True)\n\ndef test_case():\n\tassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\n\ntest_case()", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return [[x for x in sorted(y, key=lambda word: word[::-1])] for y in lst]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(my_list):\n    for i in range(len(my_list)):\n        my_list[i] = sorted(my_list[i], key=lambda string: string)\n    return my_list\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(arr):\n    # your code here\n    res = [[sorted(x, key = lambda x: x.lower()) for x in y] for y in arr]\n    return res\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lists):\n    return sorted(lists, key=lambda sublist: sublist[0] + sublist[1])\n\n\n# def sort_sublists(lists):\n#     return sorted(lists, key=lambda sublist: sublist[0] + sublist[1])\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return [sorted(sublist, key=lambda x:x[::-1]) for sublist in lst]\n\n#assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n# Solution\ndef count(x):\n    return x.count(True)\n\n# Tests", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count_true(list):\n    return len(list) - list.count(False)\n\n# Add your code below\n# Test your code with different input values here", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(mylist):\n    \"\"\"\n    >>> count([True,False,True])\n    2\n    >>> count([True, False, True, False, True, False])\n    3\n    >>> count([])\n    0\n    \"\"\"\n    count = 0\n    for element in mylist:\n        if element:\n            count += 1\n    return count\n\n\ndef count_true_booleans(mylist):\n    \"\"\"\n    >>> count_true_booleans([True,False,True])\n    2\n    >>> count_true_booleans([True, False, True, False, True, False])\n    3\n    >>> count_true_booleans([])\n    0\n    \"\"\"\n    count = 0\n    for element in mylist:\n        if isinstance(element, bool):\n            if element:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(li):\n    return 0\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(list):\n\treturn sum(list)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\nfrom typing import List\ndef count_true(bools:List[bool]) -> int:\n    if not bools:\n        return 0\n    else:\n        count = 0\n        for bool_ in bools:\n            if bool_ == True:\n                count += 1\n        return count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\nfrom itertools import groupby\ndef count(list):\n    return len([i for i,j in groupby(list)])", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(numbers):\n    total = 0\n    for i in numbers:\n        total = total + 1\n    return total\n\n#Some random tests", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(bools):\n    return len([bool for bool in bools if bool])\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(list):\n    return list.count(True)\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, list2):\n    return list1 + list2\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\n# 1st Approach (my solution)\n# O(n) time | O(1) space\ndef add_lists(list1, list2):\n    first_index = 0\n    second_index = 0\n\n    while first_index < len(list1) and second_index < len(list2):\n        if list1[first_index] <= list2[second_index]:\n            return list1 + list2[second_index:]\n        first_index += 1\n\n    return list1 + list2\n\n\n# 2nd Approach (solution)\n# O(n) time | O(1) space\ndef add_lists(list1, list2):\n    return [x for x in sorted(list1 + list2)]\n\n\n# 3rd Approach (solution)\n# O(n) time | O(n) space\ndef add_lists(list1, list2):\n    return sorted(list1 + list2)\n\n\n# Test Cases", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(a, b):\n    return b + a\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(tuple_1, list_2):\n    return tuple_1 + list_2\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lst1, lst2):\n    return lst1 + lst2\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(lst1, lst2):\n    # return lst1 + lst2\n    lst2 = lst1 + lst2\n    return lst2\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(l1, l2):\n    l3 = []\n    l3.extend(l1)\n    l3.extend(l2)\n    return tuple(l3)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(l1, l2):\n    for i in l1:\n        l2.append(i)\n    return l2\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    new_list = list1 + list2\n    return new_list\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l, t):\n    for x in l:\n        t.append(x)\n    return t\n\nl = [1, 2, 3]\nt = (4, 5)\nadd_lists(l, t)"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(a,b):\n    return (b-a)\n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i>=10:\n            if i%16 == 0:\n                count += 1\n        else:\n            if i%16 == 1:\n                count += 1\n        i += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(low, high):\n    return (high - low) // 4 + 1\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\nimport math\n\ndef count_Hexadecimal(lower_limit, upper_limit):\n    count = 0\n    for i in range(lower_limit, upper_limit + 1):\n        s = str(i)\n        if len(s) % 2 == 0:\n            count += 1\n    return count\n\ndef count_Hexadecimal_optimized(lower_limit, upper_limit):\n    count = 0\n    for i in range(lower_limit, upper_limit + 1):\n        s = str(i)\n        if s[0] == \"4\" or s[0] == \"5\" or s[0] == \"6\" or s[0] == \"7\" or s[0] == \"8\" or s[0] == \"9\" or s[1] == \"A\" or s[1] == \"B\" or s[1] == \"C\" or s[1] == \"D\" or s[1] == \"E\" or s[1] == \"F\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(n, k):\n    hexadecimal_count = 0\n    for i in range(n, k+1):\n        hexadecimal_count += 1 if i < 16 else 2 if i < 36 else 3\n    return hexadecimal_count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, stop):\n    count = 0\n    for x in range(start,stop+1):\n        if(is_Hexadecimal(str(x))):\n            count = count + 1\n    return count\n\ndef is_Hexadecimal(number):\n    if(len(number) == 1):\n        if(number == '0' or number == '1' or number == '2' or number == '3' or number == '4' or number == '5' or number == '6' or number == '7' or number == '8' or number == '9'):\n            return False\n    if(len(number) == 2):\n        if(number == '00' or number == '01' or number == '02' or number == '03' or number == '04' or number == '05' or number == '06' or number == '07' or number == '08' or number == '09' or number == '10' or number == '11' or number == '12' or number == '13' or number == '14' or number == '15' or number == '16' or number == '17' or number == '18' or number == '19'):\n            return False\n    if(len(number) == 3):\n        if(number == '000' or number == '001' or number == '002' or number == '003' or number == '004' or number == '005' or number == '006' or number == '007' or number == '008' or number == '009' or number == '010' or number == '011' or number == '012' or number == '013' or number == '014' or number == '015' or number == '016' or number == '017' or number == '018' or number == '019' or number == '020' or number == '", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n    list_ = []\n    for i in range(start,end+1):\n        list_.append(hex(i))\n    return len(list_)\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,stop):\n    # create a list of hexadecimal numbers \n    hex_list = []\n\n    # loop through the range \n    for i in range(start,stop):\n        # append the numbers to a list\n        hex_list.append(hex(i))\n\n    # return the length of the list \n    return len(hex_list)", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(a, b):\n    return (b-a) + 1\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(n1,n2):\n    return sum(i < 10 or i > 9 for i in range(n1,n2+1))\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\n\ndef merge_sorted_list(*args):\n    result = []\n    for it in args:\n        while it:\n            heappush(result, it.pop(0))\n    return result\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(lists):\n    heapq.heapify(lists[0])\n    for li in lists[1:]:\n        li = merge_sorted_list_helper(li)\n        heapq.heappush(lists[0], li)\n    res = []\n    while len(lists[0]) > 0:\n        res.append(heapq.heappop(lists[0]))\n    return res\n\ndef merge_sorted_list_helper(li):\n    if len(li) == 0:\n        return li[0]\n    elif len(li) == 1:\n        return li[0]\n    else:\n        l = li.pop(0)\n        r = li.pop(0)\n        while len(li) > 0 and l < r:\n            l = li.pop(0)\n        li.append(l)\n        li.append(r)\n        return l\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n# given two sorted list\n# O(nlogn) time\n# O(1) space\ndef merge_sorted_list(list1, list2):\n    if not list1:\n        return list2\n    elif not list2:\n        return list1\n    \n    heap = [0]*(len(list1)+len(list2))\n    count = 0\n    list1_index = 0\n    list2_index = 0\n    while True:\n        if list1_index == len(list1):\n            heap[count] = list2[list2_index]\n            count += 1\n            list2_index += 1\n        elif list2_index == len(list2):\n            heap[count] = list1[list1_index]\n            count += 1\n            list1_index += 1\n        elif list1[list1_index] < list2[list2_index]:\n            heap[count] = list1[list1_index]\n            count += 1\n            list1_index += 1\n        else:\n            heap[count] = list2[list2_index]\n            count += 1\n            list2_index += 1\n        if list1_index == len(list1) and list2_index == len(list2):\n            break\n    return heap[0:count]\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom queue import PriorityQueue\n\n\ndef merge_sorted_list(ls1, ls2, ls3):\n    if not ls1:\n        return ls2\n    if not ls2:\n        return ls1\n    if not ls3:\n        return ls2\n    heap = PriorityQueue()\n    for i in ls1:\n        heap.put(i)\n    for i in ls2:\n        heap.put(i)\n    for i in ls3:\n        heap.put(i)\n    result = []\n    while not heap.empty():\n        result.append(heap.get())\n    return result\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nimport heapq\n\ndef merge_sorted_list(list1,list2,list3):\n    '''\n    Merges sorted list\n    '''\n    hq = []\n    for a in list1:\n        heapq.heappush(hq,a)\n    for b in list2:\n        heapq.heappush(hq,b)\n    for c in list3:\n        heapq.heappush(hq,c)\n    return [heapq.heappop(hq) for _ in range(len(list1)+len(list2)+len(list3))]\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(*iterables):\n    if not iterables:\n        return\n    heap_list = []\n    for iterable in iterables:\n        for item in iterable:\n            heapq.heappush(heap_list, item)\n    merged_list = []\n    while heap_list:\n        merged_list.append(heapq.heappop(heap_list))\n    return merged_list\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nfrom heapq import heappush,heappop\n\ndef merge_sorted_list(*args):\n    q = []\n    for x in args:\n        for y in x:\n            heappush(q,y)\n    res = []\n    while q:\n        res.append(heappop(q))\n    return res\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nimport heapq\n\n\ndef merge_sorted_list(*args):\n    h = []\n    for lst in args:\n        for x in lst:\n            heapq.heappush(h, x)\n    return [heapq.heappop(h) for _ in range(len(h))]", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nimport heapq\n\ndef merge_sorted_list(lst):\n    sorted_lst = list(itertools.chain(*lst))\n    heapq.heapify(sorted_lst)\n    return heapq.heappop(sorted_lst)\n\n# def merge_sorted_list(lst):\n#     result = []\n#     while lst:\n#         if not result or result[-1] < lst[0]:\n#             result.append(lst.pop(0))\n#         else:\n#             result.pop()\n#     return result", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nimport heapq\n\ndef merge_sorted_list(*args):\n    ret = []\n    h = []\n    for i in range(len(args)):\n        for j in args[i]:\n            heapq.heappush(h, j)\n    while h:\n        ret.append(heapq.heappop(h))\n    return ret\n"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string,length):\n    count = 0\n    for i in range(length):\n        string = string[1:] + string[0]\n        count += 1\n        if string[0] == \"0\":\n            count = 0\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string,n):\n    ans = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            ans += 1\n        else:\n            ans -= 1\n    ans = abs(ans)\n    if ans%2 == 0:\n        return int(ans/2)\n    else:\n        return int(ans/2)+1\n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s, k):\n    s=s.replace('1','0').replace('0','1')\n    s=s.replace('00','1').replace('11','0')\n    return s.count('0')\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string,n):\n    # code here\n    count = 0\n    while n>0:\n        #print(n)\n        n = n//2\n        #print(n)\n        count+=1\n    #print(count)\n    c = count//2\n    for i in range(0,len(string)):\n        if (string[i]==\"1\"):\n            if i>=c:\n                string = string[:i]+string[i+1:]+string[i]\n    return count", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string,n):\n    count = 0\n    for i in range(1,n):\n        temp = string[i:] + string[:i]\n        if temp.count('1')%2 != 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(binString,count):\n    if len(binString) != count:\n        raise Exception(\"String not of required length\")\n    count = 0\n    for i in range(len(binString)):\n        if binString[i] == '1' and (i == len(binString) - 1 or binString[i + 1] == '0'):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(st, n):\n    return (2 ** n) - (count(st, 1) - 1)\n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(b,m):\n    result=0\n    for i in range(m):\n        b=b[1:] + b[0]\n        if b[0]=='0':\n            result+=1\n    return result\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binaryString, n):\n    count = 0\n    temp = binaryString\n    \n    for i in range(n):\n        for j in range(len(binaryString)):\n            if(binaryString[j]=='1'):\n                temp = temp[:j]+temp[j+1:]\n                if(binaryString[j]=='0'):\n                    temp = temp[:j]+\"0\"+temp[j+1:]\n                else:\n                    temp = temp[:j]+\"1\"+temp[j+1:]\n                count +=1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(a,n):\n    l=[]\n    for i in range(n):\n        l.append(a)\n    l.append(a)\n    cnt=0\n    #l=['011001', '101101', '110111', '111011', '111101', '111110', '011001']\n    #for i in range(len(l)):\n    #    if l[i]==a:\n    #        cnt+=1\n    for i in range(n,len(l)):\n        if l[i]==a:\n            cnt+=1\n    return cnt\n\n"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n\tres = []\n\tfor i in range(start, end+1):\n\t\tif i not in [x[0] for x in lst] and i not in [x[1] for x in lst]:\n\t\t\tres.append((i, i))\n\treturn res\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    \"\"\"\n    O(n) time | O(n) space - where n is the length of the input ranges\n    \"\"\"\n    result = []\n    for range in ranges:\n        if not start <= range[0] <= range[1] <= end:\n            if range[0] == start:\n                result.append((range[0], end))\n            elif range[1] == end:\n                result.append((start, range[1]))\n            else:\n                result.append((start, range[0]))\n                result.append((range[1], end))\n    return result\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef extract_missing(ranges: List[Tuple[int, int]], start: int, end: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if len(ranges) == 0:\n        return []\n    else:\n        missing_ranges = []\n        current_start = start\n        for i in range(0, len(ranges)):\n            if ranges[i][0] > current_start:\n                missing_ranges.append((current_start, ranges[i][0] - 1))\n                current_start = ranges[i][1] + 1\n            elif ranges[i][1] > current_start:\n                current_start = ranges[i][1] + 1\n        if current_start < end:\n            missing_ranges.append((current_start, end - 1))\n    return missing_ranges\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(range_list, start, end):\n    result_list = []\n    for x in range(start, end):\n        result_list.append([x, x])\n\n    for pair in range_list:\n        for i in range(pair[0], pair[1]):\n            if [i, i] not in result_list:\n                result_list.append([i, i])\n    return result_list", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n    \"\"\"\n    lst: list\n    start: int\n    end: int\n    return: list\n    \"\"\"\n    lst_sorted = sorted(lst, key=lambda x: x[0])\n    res = []\n    for i in range(start, end):\n        if i not in map(lambda x: x[0], lst_sorted):\n            res.append([i, i])\n    res.extend([(i, j) for i, j in lst_sorted if i not in res])\n    return res\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(arr, start, end):\n    res = []\n    for i in range(start, end+1):\n        if not (i in arr):\n            res.append((i, i))\n    return res", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(intervals, start, end):\n    #TODO\n    return []\n    ", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(data, start, end):\n    \"\"\" Extract missing ranges from the given data. \"\"\"\n    result = []\n    for (s, e) in data:\n        # Check if the current range overlaps with start or end range.\n        if s == start:\n            result.append((start, e))\n        if e == end:\n            result.append((s, end))\n        # Check if the current range is within the start and end range.\n        if s >= start and e <= end:\n            # The current range is within the start and end range.\n            # Check if the current range is fully within the start and end range.\n            if s <= start and e >= end:\n                # The current range is fully within the start and end range.\n                result.append((start, end))\n            # The current range is not fully within the start and end range.\n            else:\n                # The current range is partially within the start and end range.\n                result.append((s, start))\n                result.append((end, e))\n    return result\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\n# Pseudocode", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(data, start, end):\n    ranges = []\n    for d in data:\n        if start <= d[0] and d[0] < end:\n            ranges.append((d[0], start-1))\n        if d[1] < start:\n            ranges.append((start, d[1]))\n        if d[1] >= end:\n            ranges.append((d[1], end-1))\n    ranges.sort()\n    ranges = [tuple(r) for r in ranges]\n    return ranges"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(l):\n    \"\"\"\n    l: list of lists\n    \"\"\"\n    output = []\n    for i in l:\n        if len(set(i)) == 1:\n            output.append(i[0])\n        else:\n            output.append(set(i).intersection(set(l[0])))\n    return output\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(l):\n    common_elements = set(l[0]).intersection(*l)\n    return list(common_elements)\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    # Your code goes here\n    pass", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(list_of_lists):\n    \"\"\"\n    list_of_lists: list of lists\n    \"\"\"\n    result = []\n    for item in list_of_lists[0]:\n        count = 0\n        for list in list_of_lists:\n            if item in list:\n                count += 1\n        if count >= len(list_of_lists) - 1:\n            result.append(item)\n    return result\n\n\ndef test_function(test_case):\n    output = common_in_nested_lists(test_case[0])\n    solution = test_case[1]\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]], [18, 12])", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(list_of_lists):\n    if len(list_of_lists) == 1:\n        return list_of_lists[0]\n    first = list_of_lists[0]\n    second = list_of_lists[1]\n    result = []\n    for i in first:\n        if i in second:\n            result.append(i)\n    if len(result) == 0:\n        return common_in_nested_lists(list_of_lists[2:])\n    return result\n\n# Alternative implementation.\ndef common_in_nested_lists(list_of_lists):\n    if len(list_of_lists) == 1:\n        return list_of_lists[0]\n    if len(list_of_lists) == 2:\n        return set(list_of_lists[0]).intersection(list_of_lists[1])\n    else:\n        return common_in_nested_lists(list_of_lists[1:]) | common_in_nested_lists(list_of_lists[0])\n\n# Test cases.", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(l):\n    s = set()\n    for l in l:\n        for i in l:\n            s.add(i)\n    return s\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lst):\n    return list(set([i for sublist in lst for i in sublist]))\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lst):\n    lst1 = set(lst[0])\n    for i in range(1,len(lst)):\n        lst1 = lst1.intersection(set(lst[i]))\n    return list(lst1)\n\n# assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n# assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n# assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n# assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n# assert common_in_nested_lists([[12", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(l):\n  set_list = set(l[0])\n  for sub_list in l[1:]:\n    set_list = set_list.intersection(sub_list)\n\n  return list(set_list)", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\n# O(m*n) time | O(m*n) space\n# Where m is the number of lists and n is the number of elements in each list.\ndef common_in_nested_lists(lists):\n    unique_set = set()\n    for list in lists:\n        unique_set = unique_set.union(set(list))\n    return [element for element in unique_set if lists[0].count(element) > 1]"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    return 2*(2*r+h)\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r,h):\n    return 2*r*pi + 2*h\n\n# Test Code", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r,h):\n    return 2*r + 2*3.14*r*h\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    import math\n    return 2*math.pi*r+2*h\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r,h):\n    return (2*r + 2*r*h)\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    return 2*r*h+2*h\n    ", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\nfrom math import pi\n\ndef perimeter(radius, height):\n    \"\"\"\n    Calculate the perimeter of a cylinder.\n    \"\"\"\n    perimeter = 2 * pi * radius + 2 * radius * height\n    return perimeter\n\n# Test the function", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r, h):\n    \"\"\"\n    >>> perimeter(2,4)\n    12\n    \"\"\"\n    return 2 * 3.141592653589793 * r + 2 * 3.141592653589793 * r * h\n\n\ndef test_perimeter():\n    assert perimeter(2, 4) == 12\n    assert perimeter(3, 5) == 20\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r,h):\n    \"\"\"\n    >>> perimeter(2,4)\n    12\n    \"\"\"\n    peri = (2*r) + (2*h)\n    return peri\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    \"\"\"\n    Function to calculate the perimeter of a cylinder.\n\n    Parameters\n    ----------\n    radius : int\n        radius of the cylinder\n    height : int\n        height of the cylinder\n\n    Returns\n    -------\n    float\n        perimeter of the cylinder\n\n    \"\"\"\n    return 2*(radius + height) + 2*math.pi*(radius**2)"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(text):\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    if s.replace('.', '', 1).isdigit():\n        return True\n    else:\n        return False\n\n# assert check_integer(\"python\")==False\n# assert check_integer(\"10\")==True\n# assert check_integer(\"10.1\")==False\n\n\n# write a function to check if a string represents a floating point number or not.", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(text):\n    if text[0] == '0':\n        if text[1] != 'x' and text[1] != 'X':\n            return False\n    try:\n        int(text)\n        return True\n    except:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except:\n        return False\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\ndef test_check_integer():\n    assert check_integer(\"python\")==False\n    assert check_integer(\"20\")==True\n    assert check_integer(\"001\")==True\n    assert check_integer(\"000000001\")==True\n    assert check_integer(\"00000000000000000000000000000001\")==True\n    assert check_integer(\"00000000000000000000000000000000\")==False\n    assert check_integer(\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(num):\n\ttry:\n\t\tint(num)\n\t\treturn True\n\texcept:\n\t\treturn False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n\treturn True if s.isdigit() else False\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n    tuples.sort()\n    index = 1\n    i = 0\n    while i < len(tuples):\n        while i < len(tuples) and tuples[i] == tuples[i-1]:\n            i += 1\n        if i > 0:\n            tuples[i-1] += (index, )\n            index += 1\n        i += 1\n    tuples.sort()\n    return str(tuples)\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tup_list):\n    d = {}\n    for i in tup_list:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return str(d)\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuplist):\n    tuplist = sorted(tuplist, key=lambda t: t)\n    for i in range(len(tuplist)):\n        tuplist[i] = (tuplist[i],len(tuplist)-i)\n    tuplist.reverse()\n    return str(tuplist)[1:-1]\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(input_list):\n    # your code goes here\n    # returns a sorted list of tuples\n    # the first item is the tuple and the second is the frequency\n    output_list = []\n    for elem in input_list:\n        output_list.append((elem, input_list.count(elem)))\n    output_list = sorted(output_list, key=lambda x: (-x[1], x[0]))\n    return output_list\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(list_of_tuples):\n    list_of_tuples = sorted(list_of_tuples)\n    # list_of_tuples.sort(key=lambda x:x)\n    d = {}\n    for i in list_of_tuples:\n        try:\n            d[i] += 1\n        except KeyError:\n            d[i] = 1\n    # d = Counter(list_of_tuples)\n    # list_of_tuples = sorted(d.items(), key=lambda x:x[1])\n    list_of_tuples = list(d.items())\n    list_of_tuples = sorted(list_of_tuples, key=lambda x: x[1], reverse=True)\n    return str(list_of_tuples)\n\n# def assign_freq(list_of_tuples):\n#     d = {}\n#     for i in list_of_tuples:\n#         try:\n#             d[i] += 1\n#         except KeyError:\n#             d[i] = 1\n#     # d = Counter(list_of_tuples)\n#     # list_of_tuples = sorted(d.items(), key=lambda x:x[1])\n#     list_of_tuples = list(d.items())\n#     list_of_tuples = sorted(list_of_tuples, key=lambda x: x[1], reverse=True)\n#     return str(list_of_tuples)\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tup_list):\n    # list to hold tuples and their frequencies\n    lst = []\n    # check if the list is empty\n    if tup_list:\n        # loop through each tuple in the list\n        for tup in tup_list:\n            # if the tuple exists in the list, increment its frequency by 1\n            if tup in lst:\n                lst.append((tup[0], tup[1], tup[2], lst.count(tup)))\n            # otherwise, add the tuple to the list with frequency = 1\n            else:\n                lst.append((tup[0], tup[1], tup[2], 1))\n    # else return an empty string\n    else:\n        return '[]'\n    # loop through each tuple and convert it to a string\n    for tup in lst:\n        tup = str(tup)\n        # replace the last character of the tuple with its frequency\n        tup = tup[:-2] + tup[-1]\n        # append the converted tuple to the result string\n        result += tup\n    # return the result string\n    return result\n\n# Test Cases", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuple_list):\n    from collections import Counter\n    c = Counter(tuple_list)\n    return '[' + ','.join([f'({item}, {c[item]})' for item in c.keys()]) + ']'\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\nfrom collections import defaultdict\n\ndef assign_freq(data):\n    freqs = defaultdict(int)\n    for key in data:\n        freqs[key] += 1\n    return str(list(freqs.items()))", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(a_list):\n    # Start with a frequency list that is all 0s\n    freq_list = []\n    for i in range(len(a_list[0])):\n        freq_list.append(0)\n\n    # Loop through the list and count the number of tuples with each value\n    for item in a_list:\n        for value in item:\n            freq_list[value-1] += 1\n\n    # Convert the frequency list into a string with each tuple\n    output = ''\n    for i in range(len(freq_list)):\n        if freq_list[i] > 0:\n            output += str(a_list[i]) + str(freq_list[i]) + ','\n\n    # Return the string without the last comma\n    return output[0:-1]\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tup):\n    freq = {}\n    for i in tup:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    new_tup = []\n    for i in freq.keys():\n        temp = i + (freq[i],)\n        new_tup.append(temp)\n    return str(new_tup)\n\n#assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\n# Given a list of numbers, write a function to check whether there are two consecutive elements in the list that sum up to a given target.\n# assert check_sum([1, 2, 3, 5], 8) == True\n# assert check_sum([1, 2, 3, 4, 5], 8) == True\n# assert check_sum([1, 2, 3, 4, 5], 10) == False\n# assert check_sum([1, 2, 3, 4, 5], 0) == True\ndef check_sum(num_list, target):\n    for i in range(len(num_list) - 1):\n        if num_list[i] + num_list[i + 1] == target:\n            return True\n    return False\n#assert check_sum([1, 2, 3, 5], 8) == True\n#assert check_sum([1, 2, 3, 4, 5], 8) == True\n#assert check_sum([1, 2, "], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(li):\n    for d in li:\n        for k,v in d.items():\n            if v is not None:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lst):\n    for i in lst:\n        for j in i:\n            if(i[j]!=None):\n                return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dict(lis):\n    for i in lis:\n        if len(i) == 0:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(d):\n    for i in d:\n        if i:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dits):\n    for dic in dits:\n        if len(dic)>0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n# Code here\ndef empty_dit(lst):\n    for i in lst:\n        if i:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lst):\n    for dictionary in lst:\n        if dictionary:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n# to do:\n\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dits):\n    for dit in dits:\n        if dit:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\nfrom functools import reduce\n\n\ndef tuple_to_int(tup):\n    return reduce(lambda x, y: x*y, tup)\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    \"\"\"\n        Convert a given tuple of positive integers into an integer.\n    \"\"\"\n    return int(''.join([str(i) for i in t]))\n\ndef tuple_to_int_another(t):\n    return sum([10**x*i for x,i in enumerate(t)])\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tuple_):\n    \"\"\"\n    Converts a tuple of integers into an integer\n    \"\"\"\n    number = 0\n    for x in tuple_:\n        number *= 10\n        number += x\n    return number\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    n = 0\n    for i in tup:\n        n = n * 10 + i\n    return n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tuple):\n    return int(''.join(map(str,tuple)))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\nimport functools\ndef tuple_to_int(tup):\n    return functools.reduce(lambda x,y: x*10+y, tup)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    n = 0\n    for x in t:\n        n = n*10 + x\n    return n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    \"\"\"Return the sum of elements of tup as an integer.\"\"\"\n    return sum(tup)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef tuple_to_int(x: Tuple[int, ...]) -> int:\n    return sum(10 ** i * n for i, n in enumerate(x))\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\nfrom functools import reduce\n\n\ndef tuple_to_int(tup: tuple) -> int:\n    return reduce(lambda x, y: x*10 + y, tup)\n\n\n# assert tuple_to_int((1,2,3))==123"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(my_list):\n    my_list = my_list.split()\n    float_list = []\n    for i in range(len(my_list)):\n        if (my_list[i][0].isnumeric() and my_list[i][1].isnumeric()):\n            float_list.append( (float(my_list[i][0]), float(my_list[i][1])) )\n\n    return str(float_list)\n\n# list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")])", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(l):\n    return [tuple(float(i) for i in j) for j in l]", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list):\n    answer = []\n    for i in list:\n        a = float(i[0])\n        b = float(i[1])\n        answer.append((a, b))\n    return str(answer)\n\n#Test 1\nlist1 = [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]\nans1 = list_to_float(list1)", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(input_list):\n    #your code here\n    return str(input_list).replace('(','').replace(')','').replace(',', '').replace(' ', '').replace(\"'\", '')\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    output = \"\"\n    for elem in lst:\n        output = output + \"(\" + str(float(elem[0])) + \",\" + str(float(elem[1])) + \"), \"\n    return output[:-2]\n\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\nfrom typing import List, Tuple, Union\nfrom datetime import datetime\n\n\ndef list_to_float(elements: List[Union[Tuple[str, str], Tuple[str, datetime]]]) -> str:\n    \"\"\"\n    :param elements:\n    :return: string of elements in format '(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)'\n    \"\"\"\n    # TODO: implement this function\n    result = ''\n    for el in elements:\n        if type(el) == tuple:\n            result += f\"({float(el[0])}, {float(el[1])}), \"\n        else:\n            result += f\"({float(el.year)}, {float(el.month)}), \"\n    return result[:-2]", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(arr):\n    return str([tuple(float(i) for i in tuple(j.split(','))) for j in arr])\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    return str(lst).replace(\",\", \",\\n\").replace(\"'\", '\"')\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(list_of_tuples):\n    return str(list(map(lambda x: (float(x[0]), float(x[1])), list_of_tuples)))\n\n\ndef test_list_to_float():\n    assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    assert list_to_float( [(\"1.23\", \"4.56\")] ) == '[(1.23, 4.56)]'\n    assert list_to_float( [(\"4\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(4.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    assert list_to_float( [(\"1.23\", \"4.56\"), (\"4\", \"8\")] ) == '[(1.23, 4.56), (4.0, 8.0)]'\n\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split(\" \")\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(s):\n\tlist=[]\n\tfor i in s:\n\t\tlist.append(i)\n\treturn list\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(st):\n    return st.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n  return string.split()", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    # Write your code here.\n    return string.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return list(string.split())\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    list1=[]\n    for i in string.split():\n        list1.append(i)\n    return list1\n\nstring1=input(\"enter your string : \")", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    x=str.split(\" \")\n    for i in range(len(x)):\n        x[i]=x[i].strip()\n    return x\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(str):\n    return str.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return string.split(\" \")\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nfrom typing import List\n\ndef search(arr: List, target: int) -> int:\n    start, end = 0, len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            if mid == start or arr[mid - 1] != target:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr,target):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        mid = (start+end)//2\n        if arr[mid] == target:\n            if mid > 0 and arr[mid-1] == target:\n                return target\n            elif mid < len(arr)-1 and arr[mid+1] == target:\n                return target\n            else:\n                return arr[mid]\n        elif arr[mid] > target:\n            end = mid\n        else:\n            start = mid+1\n    return arr[end]\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, val):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == val:\n            left += 1\n        elif arr[mid] < val:\n            if arr[mid] < arr[right]:\n                return arr[right]\n            else:\n                left = mid + 1\n        else:\n            if arr[mid] > arr[left]:\n                return arr[left]\n            else:\n                right = mid - 1", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(array, target):\n    lo = 0\n    hi = len(array) - 1\n\n    while lo < hi:\n        mid = (lo + hi) // 2\n\n        if array[mid] == target:\n            return array[mid]\n        elif array[mid] > target:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n\n    return array[lo]\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, target):\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = start + (end-start)//2\n        if target > arr[mid]:\n            start = mid+1\n        elif target < arr[mid]:\n            end = mid-1\n        else:\n            if mid == 0 or arr[mid-1] != target:\n                return mid\n            else:\n                start = mid+1\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nfrom typing import List\n\ndef search(arr:List, x:int) -> int:\n    # Base case\n    if not arr:\n        return -1\n\n    # find left and right indexes of x\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # x is at mid, so recur to left or right depending on whether it's smaller or greater than x.\n            if arr[mid - 1] != x:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] > x:\n            # x is to the left of mid, so recur on the left sub-array.\n            right = mid - 1\n        else:\n            # x is to the right of mid, so recur on the right sub-array.\n            left = mid + 1\n\n    # If we exit the loop, x was not found.\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\n# Time: O(n)\n# Space:O(1)\ndef search(arr,x):\n    left = 0\n    right = len(arr)-1\n\n    while left<right:\n        mid = left + (right-left)//2\n\n        if arr[mid] == x:\n            # found x\n            if arr[left] == x:\n                # element appears twice\n                if arr[left+1] != x:\n                    return arr[left+1]\n                else:\n                    right = mid-1\n\n            elif arr[right] == x:\n                if arr[right-1] != x:\n                    return arr[right-1]\n                else:\n                    left = mid+1\n            else:\n                return arr[mid]\n        elif arr[mid] < x:\n            left = mid+1\n        else:\n            right = mid-1\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,val):\n    if(arr==[]):\n        return None\n    elif(arr[0]==val):\n        return arr[0]\n    elif(arr[0]!=val and arr[-1]!=val):\n        print(val)\n        print(arr)\n        return val\n    elif(arr[0]==val and arr[1]==val):\n        return None\n    else:\n        print(val)\n        print(arr)\n        if(val in arr[1:-1]):\n            print(val)\n            print(arr)\n            return search(arr[1:-1],val)\n        elif(val in arr[1:]):\n            print(val)\n            print(arr)\n            return val\n        else:\n            return search(arr[:-1],val)\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, n):\n    if len(arr) == 1:\n        return 1\n    start = 0\n    end = len(arr) - 1\n    mid = start + (end - start)//2\n    while mid <= end:\n        if arr[mid] != arr[start]:\n            return mid\n        elif arr[mid] != arr[end]:\n            return mid + 1\n        else:\n            start = mid + 1\n        mid = start + (end - start)//2\n    return -1\n\n\ndef test_search():\n    arr = [1,1,2,2,3]\n    assert search(arr, 5) == 3", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nfrom typing import List\n\n\ndef search(arr: List[int], x: int) -> int:\n    \"\"\"\n    Time Complexity: O(logN)\n    Space Complexity: O(1)\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            if mid > 0 and arr[mid - 1] == x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\ndef main():\n    assert search([1, 1, 2, 2, 3], 5) == -1\n    assert search([1, 1, 2, 2, 3], 3) == 2\n\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(x):\n    x.sort(key=lambda x: x[0], reverse=True)\n    x.sort(key=lambda x: x[1], reverse=True)\n    return x[0][0]*x[0][1]\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(lst):\n    \"\"\"\n    Takes in a list of tuples and returns the product of the maximum pair within the list.\n    Args:\n       lst(list): list of tuples\n    Returns:\n       int: product of the maximum pair in the list\n    \"\"\"\n    max_prod = 1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][0]*lst[j][1]>max_prod:\n                max_prod = lst[i][0]*lst[j][1]\n    return max_prod\n\n# assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(lst):\n\tmax_prod = 0\n\tfor i in lst:\n\t\tfor j in lst:\n\t\t\tif i[0] < j[0] and i[1] > j[1]:\n\t\t\t\tmax_prod = max(max_prod, i[0] * i[1])\n\treturn max_prod\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\n# We can use the built in function max() to do the maximum product\n\ndef max_product_tuple(list_tuple):\n    return max(map(lambda x: x[0]*x[1], list_tuple))\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom functools import reduce\n\n\ndef max_product_tuple(list_of_tuples):\n    \"\"\"Return the maximum product from the tuples.\n    \"\"\"\n    prod = reduce(lambda x, y: x * y, [i * j for i, j in list_of_tuples])\n    return prod\n\n\ndef main():\n    \"\"\"Read in data and print output.\n    \"\"\"\n    list_of_tuples = []\n    while True:\n        tup = tuple(map(int, input('Enter two integer: ').split()))\n        list_of_tuples.append(tup)\n        if len(tup) == 0:\n            break\n    print('Maximum product of the tuple is {}'.format(max_product_tuple(list_of_tuples)))\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\nimport pytest\nfrom itertools import product\n\n\ndef max_product_tuple(lst):\n    result = 1\n    for p1, p2 in product(lst, repeat=2):\n        result = max(result, p1[0] * p2[1])\n    return result\n\n\ndef test_max_product_tuple():\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom typing import List\n\n\ndef max_product_tuple(pairs: List[tuple]) -> int:\n    return max([x[0] * x[1] for x in pairs])\n\n\n# assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(lst):\n    lst.sort()\n    lst1=[]\n    lst2=[]\n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n        lst2.append(lst[i][1])\n    lst1.sort()\n    lst2.sort()\n    max_prod=0\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            prod=lst1[i]*lst2[j]\n            max_prod=max(max_prod,prod)\n    return max_prod\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(lst):\n    return max(x[0]*x[1] for x in lst)", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\nimport itertools\n\ndef max_product_tuple(a):\n    '''\n    :param a: list of tuples\n    :return: max of product of tuples\n    '''\n    max_product = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            max_product = max(max_product,a[i][0] * a[j][1])\n    return max_product\n\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, first, second, third):\n    if first + second + third == sum(arr):\n        return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(a, x, y, z):\n    a.sort()\n    print(a)\n    if a[0] + a[1] + a[2] == x and a[2] + a[3] + a[4] == y and a[4] + a[5] + a[6] == z:\n        return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\nfrom typing import Tuple\nfrom functools import reduce\n\n\ndef check_triplet(arr: list, a: int, b: int, c: int) -> bool:\n    return bool(reduce((lambda x, y: x and y), [a in arr, b in arr, c in arr]))\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, a, b, c):\n    arr.sort()\n    return a in arr and b in arr and c in arr\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, s, v1, v2):\n    \"\"\"\n    :param arr: array\n    :param s: sum\n    :param v1: value1\n    :param v2: value2\n    :return: True if the triplet exists else False\n    \"\"\"\n    arr.sort()\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        s_curr = arr[i] + arr[j]\n        if s_curr == s:\n            if arr[i] == v1 and arr[j] == v2:\n                return True\n            elif arr[i] == v2 and arr[j] == v1:\n                return True\n        elif s_curr < s:\n            i += 1\n        else:\n            j -= 1\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, a, b, c):\n    s = sum(arr)\n    return  (s - a) == (b + c) and (s - b) == (a + c) and (s - c) == (a + b)\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, x, y, z):\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i != j and x+y+z == arr[i] + arr[j]:\n                return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, x, y, z):\n    arr.sort()\n    return arr[0] + arr[-1] == x and arr[-2] + arr[-1] == y and arr[-3] + arr[-1] == z\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, sum1, sum2, sum3):\n    arr.sort()\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if (sum1 == arr[i] + arr[j] + arr[k] and sum2 == sum1 and sum3 == sum1):\n                    return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(nums, first, second, third):\n    return sorted([first, second, third]) == sorted(nums)[:3]\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    s=sum([i for i in range(1,10)])\n    for i in range(10):\n        s=s+(i**2)\n    return s", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\n#brute force approach\ndef smartNumber(n):\n    i = 1\n    while(True):\n        if (smartNumberTest(i) and i < n):\n            return i\n        i += 1\n        \ndef smartNumberTest(n):\n    return (sum(int(d) for d in str(n)) == n) and (isPrime(n))\n\ndef isPrime(n):\n    # 1 is not prime\n    if n == 1:\n        return False\n\n    i = 2\n\n    # iterate till sqrt(n)\n    while i ** 2 <= n:\n\n        # if i divides n, then n is not prime\n        if n % i == 0:\n            return False\n\n        i += 1\n    return True\n    \n# n = 7\n# res = []\n# for i in range(1,n+1):\n#     res.append(smartNumber(i))\n\n# print(res)\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n < 1:\n        return 30\n    elif n == 1:\n        return 30\n    elif n < 2:\n        return 30\n    elif n < 4:\n        return 31\n    elif n < 6:\n        return 32\n    elif n < 8:\n        return 33\n    elif n < 10:\n        return 34\n    elif n < 12:\n        return 35\n    elif n < 14:\n        return 36\n    elif n < 16:\n        return 37\n    elif n < 18:\n        return 38\n    elif n < 20:\n        return 39\n    elif n < 22:\n        return 40\n    elif n < 24:\n        return 41\n    elif n < 26:\n        return 42\n    elif n < 28:\n        return 43\n    elif n < 30:\n        return 44\n    elif n < 32:\n        return 45\n    elif n < 34:\n        return 46\n    elif n < 36:\n        return 47\n    elif n < 38:\n        return 48\n    elif n < 40:\n        return 49\n    elif n < 42:\n        return 50\n    elif n < 44:\n        return 51\n    elif n < 46:\n        return 52\n    elif n < 48:\n        return 53\n    elif n < 50:\n        return 54\n    elif n < 52:\n        return 55\n    elif n < 54:\n        return 56\n    elif n < 56:\n        return 57\n    elif n < 58:\n        return 58\n    elif n < 60:\n        return 59\n    elif n < 62:\n        return 60\n    elif n < 64:\n        return 61\n    elif n < 66:\n        return 62\n    elif n < 68:\n        return 63\n    elif n < 70:\n        return 64\n    elif n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    # Your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 30\n    for i in range(3, 10000):\n        if isSmart(i):\n            n -= 1\n        if n == 0:\n            return i\n    raise Exception(\"should not reach here\")\n\ndef isSmart(n):\n    return sum(int(c) for c in str(n)) == 14\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    if n==1:\n        return 30\n    if n==2:\n        return 33\n    if n==3:\n        return 37\n    if n==4:\n        return 41\n    if n==5:\n        return 46\n    if n==6:\n        return 52\n    if n==7:\n        return 59\n    if n==8:\n        return 67\n    if n==9:\n        return 77\n    if n==10:\n        return 88\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    x = 1\n    y = 31\n    a = 30\n    i = 1\n    while i < n:\n        x += y\n        y += a\n        a += 31\n        i += 1\n    return x", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nimport math\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    else:\n        x = int(math.sqrt(n))\n        if(is_square(x)):\n            return x + 1\n        else:\n            return smartNumber(x**2)\n\ndef is_square(n):\n    return int(math.sqrt(n))**2 == n\n\n# Driver Code\nn = 10", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    # TODO: Write your code here.\n    # TODO: Write your code here.\n    if n == 1:\n        return 30\n    elif n == 2:\n        return 48\n    elif n == 3:\n        return 62\n    else:\n        return 100 * smartNumber(n-1) + smartNumber(n-2) + 10 * n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    num = 0\n    for i in range(1, n):\n        num += 3 * i * (3*i - 1) // 2\n        if i == 3:\n            num -= 3\n    return num", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\n# your code here\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    elif n == 2:\n        return 27\n    elif n == 3:\n        return 24\n    elif n == 4:\n        return 21\n    elif n == 5:\n        return 18\n    elif n == 6:\n        return 15\n    elif n == 7:\n        return 12\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 6\n    elif n == 10:\n        return 3\n    else:\n        print('No such number exists')\n\n# Test your function"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(number):\n    \"\"\"returns sum of all amicable numbers\"\"\"\n\n    sum_amicable = 0\n    amicable_set = set()\n\n    for num in range(1, number):\n        if not num in amicable_set:\n            if is_amicable(num):\n                amicable_set.add(num)\n                sum_amicable += num\n\n    return sum_amicable\n\ndef is_amicable(num):\n    \"\"\"returns true if a number is an amicable number\"\"\"\n    if not num in amicable_set:\n        return False\n    else:\n        sum = 0\n        temp = num\n        while num != 0:\n            sum += int(num % 10)\n            num = int(num / 10)\n        if num == sum and num != temp:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(a):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    s=0\n    for i in range(1,a+1):\n        if is_amicable(i):\n            s+=i\n    return s\n\ndef is_amicable(a):\n    \"\"\"\n    Returns True if a is an amicable number.\n    \"\"\"\n    s=0\n    d=[]\n    for i in range(1,a):\n        if a%i==0:\n            d.append(i)\n            s+=i\n    if a!=sum(d):\n        return False\n    d.append(s)\n    if a!=sum(d):\n        return False\n    return True\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    sum=0\n    for i in range(1,n+1):\n        if is_amicable(i,n):\n            sum+=i\n    return sum\n\ndef is_amicable(m,n):\n    return m==sum_divisors(n) and n==sum_divisors(m)\n    \ndef sum_divisors(n):\n    sum=1\n    for i in range(2,n):\n        if n%i==0:\n            sum+=i\n    return sum", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(max_number):\n  # Start at 1 because you need at least 2 numbers to calculate an amicable\n  # number\n  numbers_so_far = [1]\n  result = 0\n  for i in range(2, max_number):\n    if i in numbers_so_far:\n      # Ignore numbers that have already been added to the result\n      continue\n    else:\n      # If this is an amicable number, add to the list of numbers_so_far\n      # and add the sum of its amicable numbers to the result\n      amicable = amicable_number(i)\n      if amicable != 0:\n        numbers_so_far.append(amicable)\n        result += amicable\n      else:\n        numbers_so_far.append(i)\n  return result\n\ndef amicable_number(num):\n  \"\"\"\n  Returns the amicable number of a given number or 0 if no amicable number\n  exists.\n  \"\"\"\n  # Skip numbers that are already in the numbers_so_far list\n  if num in numbers_so_far:\n    return 0\n\n  # If num is 1, it has no amicable number\n  if num == 1:\n    return 0\n\n  # If num is 2, its amicable number is the amicable number of 1, which is\n  # 0\n  if num == 2:\n    return 0\n\n  # If num is an even number, the amicable number is its half (since the sum\n  # of the half of an even number is equal to the sum of the other half)\n  if num % 2 == 0:\n    return num/2\n\n  # Otherwise, the amicable number is the sum of the other half\n  return (num - num/2)\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nimport math\ndef amicable_numbers_sum(n):\n    amicable_numbers = []\n    for i in range(1,n+1):\n        if i == sum_proper_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_proper_divisors(n):\n    sum_of_proper_divisors = 1\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            sum_of_proper_divisors += i\n    if n==sum_of_proper_divisors:\n        return sum_of_proper_divisors\n    else:\n        return n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(num):\n    #Sum of all amicable numbers.\n    amicable_sum = 0\n    for i in range(1, num):\n        #Sum of all divisors of i.\n        amicable_divisors_sum = sum_of_divisors(i)\n        #i is not equal to sum of all divisors of i and the reverse is also true.\n        if i != amicable_divisors_sum and amicable_divisors_sum != sum_of_divisors(amicable_divisors_sum):\n            amicable_sum += i\n            amicable_sum += amicable_divisors_sum\n    return amicable_sum\n\ndef sum_of_divisors(num):\n    #Sum of all divisors of num.\n    sum = 0\n    #Iterate from 1 to num.\n    for i in range(1, num+1):\n        if num % i == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nimport timeit\n\ndef get_amicable_numbers(number):\n    amicable_numbers = []\n    # find amicable numbers\n    for i in range(1, number):\n        if i in amicable_numbers:\n            continue\n        else:\n            amicable_numbers.append(i)\n            amicable_numbers.append(get_sum_of_divisors(i))\n    return amicable_numbers\n\ndef get_sum_of_divisors(number):\n    sum = 0\n    for i in range(1, int(number**0.5)+1):\n        if number % i == 0:\n            sum += i\n            if i != number // i:\n                sum += number // i\n    return sum\n\ndef amicable_numbers_sum(number):\n    amicable_numbers = get_amicable_numbers(number)\n    return sum(amicable_numbers)\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = []\n    sums = []\n    for i in range(1, limit):\n        for j in range(1, limit):\n            if i != j and i + j == get_amicable_number(i) and get_amicable_number(j) == i:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n                sums.append(i)\n                sums.append(j)\n                break\n    return sum(sums)\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(limit):\n    result = 0\n    for number in range(1, limit):\n        if amicable(number):\n            result += number\n    return result\n\n\ndef amicable(number):\n    \"\"\"\n    Check if a number is amicable\n    \"\"\"\n    if number == 0:\n        return False\n    total = 0\n    a = b = number\n    for i in range(1, number // 2 + 1):\n        if a % i == 0 and b % i == 0:\n            total += i\n            if i != a and i != b:\n                total -= a // i\n                total -= b // i\n    return total == number\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nfrom functools import reduce\n\n\ndef amicable_numbers(a: int) -> list:\n    \"\"\"\n    Returns a list of amicable numbers from 1 to a.\n\n    :param a:\n    :return:\n    \"\"\"\n    amicable = []\n    for i in range(1, a):\n        if i == amicable_numbers_sum(i):\n            amicable.append(i)\n\n    return amicable\n\n\ndef amicable_numbers_sum(a: int) -> int:\n    \"\"\"\n    Returns the sum of amicable numbers from 1 to a.\n\n    :param a:\n    :return:\n    \"\"\"\n    amicable = amicable_numbers(a)\n    return reduce(lambda x, y: x + y, amicable)\n\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nimport math\ndef angle_complex(a,b):\n    return math.atan2(b, a)", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(real, imaginary):\n    return math.atan(imaginary / real)\n\n#assert angle_complex(0,1j)==1.5707963267948966 \n#assert angle_complex(2,0)==0\n#assert angle_complex(-2,0)==math.pi\n#assert angle_complex(0,0)==0\n#assert angle_complex(0,-1)==-0.7853981633974483\n#assert angle_complex(0,1)==0.7853981633974483\n#assert angle_complex(2,3)==0.7853981633974483\n#assert angle_complex(-2,3)==3.141592653589793\n#assert angle_complex(2,-3)==-3.141592653589793\n#assert angle_complex(-2,-3)==-0.7853981633974483\n#assert angle_complex(1,2)==1.4142135623730951\n#assert angle_complex(3,4)==0.5235987755982988\n#assert angle_complex(-3,4)==4.235619449019234\n#assert angle_complex(3,-4)==-4.235619449019234\n#assert angle_complex(-3,-4)==-0.5235987755982988\n#assert angle_complex(2,1)==1.2617993877991494\n#assert angle_complex(2,-1)==-1.2617993877", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    return np.arctan2(b,a)\n\n# Importing math.cos from math library\nfrom math import cos, sin\n\n# Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n    return np.arctan2(b,a)\n\n# Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n    return np.arctan2(b,a)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(a, b):\n    c = np.sqrt(a ** 2 + b ** 2)\n    if a == 0:\n        if b >= 0:\n            return np.pi / 2\n        else:\n            return -np.pi / 2\n    return np.arctan(b / a) / np.pi * 180\n\ndef angle_complex_naive(a, b):\n    c = np.sqrt(a ** 2 + b ** 2)\n    if a == 0:\n        if b >= 0:\n            return np.pi / 2\n        else:\n            return -np.pi / 2\n    return np.arctan(b / a)\n\ndef angle_complex_from_cartesian(x, y):\n    return np.arctan2(y, x) / np.pi * 180\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    c=np.sqrt(a**2+b**2)\n    d=np.arctan(b/a)\n    return d\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real,imaginary):\n    return np.arctan2(imaginary,real)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real,imag):\n    \"\"\"\n    Function to get the angle of a complex number.\n    \"\"\"\n    return np.arctan(imag/real)", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(a,b):\n    pass\n\ndef test_angle_complex():\n    assert angle_complex(0,1j)==1.5707963267948966", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(a,b):\n    import math\n    return math.atan2(b, a)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    return np.arctan2(y,x)"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary_string, k):\n    '''\n    :param binary_string: binary string \n    :param k: k length\n    :return: maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string\n    '''\n    count = 0\n    dp = [0] * (len(binary_string) + 1)\n    for i in range(len(binary_string)):\n        count += int(binary_string[i])\n        dp[i + 1] = dp[i] + int(binary_string[i])\n        #print(dp[i+1])\n        if dp[i + 1] - dp[i] > k:\n            return dp[i + 1] - dp[i]\n    #print(dp)\n    return count\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary_string, size):\n\tcount_0, count_1 = 0, 0\n\tif len(binary_string) > size:\n\t\tbinary_string = binary_string[:size]\n\tfor i in binary_string:\n\t\tif i == '0':\n\t\t\tcount_0 += 1\n\t\telse:\n\t\t\tcount_1 += 1\n\treturn count_1 - count_0\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary, n):\n\tcount = 0\n\tfor i in range(n):\n\t\tif binary[i] == \"1\":\n\t\t\tcount += 1\n\t\telse:\n\t\t\tcount -= 1\n\tmax_count = count\n\tfor i in range(n-1):\n\t\tsub = binary[i:i+2]\n\t\tif sub.count(\"1\") > max_count:\n\t\t\tmax_count = sub.count(\"1\")\n\treturn max_count\n\ndef test():\n\tassert find_length(\"11000010001\", 11) == 6\n\tassert find_length(\"101\", 2) == 2\n\tassert find_length(\"101\", 1) == 1\n\tassert find_length(\"11000010001\", 2) == 4\n\ntest()", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, k):\n    # Write your code here\n    i, j, c0, c1 = 0, 0, 0, 0\n    max_val = 0\n    while j < len(binary_string):\n        if binary_string[j] == \"0\":\n            c0 += 1\n        else:\n            c1 += 1\n        while j - i + 1 - k <= 0:\n            if binary_string[i] == \"0\":\n                c0 -= 1\n            else:\n                c1 -= 1\n            i += 1\n        # print(i, j, c0, c1)\n        max_val = max(max_val, c0 - c1)\n        j += 1\n    return max_val\n\n# assert find_length(\"11000010001\", 11) == 6", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(str, n):\n    answer = 0\n    for i in range(len(str)):\n        if i + n >= len(str):\n            break\n        if str[i:i+n].count('0') != str[i:i+n].count('1'):\n            answer = max(answer, i + n - len(str[i:i+n]))\n    return answer\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binaryString, k):\n    binaryString = binaryString.lower()\n    if(len(binaryString) < k):\n        return 0\n    else:\n        count1, count0 = 0, 0\n        for i in range(0, len(binaryString)):\n            if(binaryString[i] == '0'):\n                count0 += 1\n            else:\n                count1 += 1\n            if(count1 - count0 > k):\n                return count1 - count0\n            if(count0 - count1 > k):\n                return count0 - count1\n    return 0\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(string, pattern):\n    if len(string) == 0:\n        return 0\n    longest = 0\n    for i in range(0, len(string)):\n        start = i\n        end = i\n        count0 = 0\n        count1 = 0\n        while end < len(string):\n            if string[end] == pattern:\n                count1 += 1\n            elif string[end] == '1':\n                count0 += 1\n            end += 1\n            if (count0 == count1) or (count0 > count1):\n                break\n        if end - start > longest:\n            longest = end - start\n    return longest\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(s, length):\n    \"\"\"\n    :param s: input string\n    :param length: length of sub-string to be analyzed\n    :return: difference in number of 0s and 1s in sub-string\n    \"\"\"\n    n = len(s)\n    if n < length:\n        return 0\n    if n == length:\n        return sum([int(x) for x in s]) % 2\n    if length % 2 == 0:\n        return find_length(s[0:length], length//2) + find_length(s[length//2:], length//2)\n    else:\n        return find_length(s[0:length-1], length//2) + find_length(s[length//2:], length//2+1)\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, k):\n    curr_diff = 0\n    ans = 0\n    for i in range(len(s)):\n        if i + k <= len(s):\n            curr_diff += s[i] - s[i+k]\n            if curr_diff > ans:\n                ans = curr_diff\n    return ans\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, k):\n    left_index = 0\n    max_length = 0\n    current_0_count = 0\n    current_1_count = 0\n\n    while left_index < len(binary_string):\n        # update the current count\n        if binary_string[left_index] == \"0\":\n            current_0_count += 1\n        else:\n            current_1_count += 1\n\n        # update the max length if the current sub-string is greater\n        if current_0_count == k or current_1_count == k:\n            max_length = max(max_length, abs(current_0_count - k) + abs(current_1_count - k))\n\n        if current_0_count > k or current_1_count > k:\n            # if any of the count exceed k, move the pointer to the beginning of the sub-string\n            left_index += 1\n            current_0_count -= binary_string[left_index - 1] == \"0\"\n            current_1_count -= binary_string[left_index - 1] == \"1\"\n\n    return max_length\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\nfrom math import sqrt\nfrom functools import reduce\n\ndef common_divisors(a, b):\n    \"\"\"\n    Returns a list of all the common divisors of two numbers.\n    \"\"\"\n    # Your code here.\n    # return lcm(a,b)\n    if a<b:\n        a,b=b,a\n    a_divisors=set([1])\n    while b>0:\n        b,a=a%b,b\n        a_divisors.add(a)\n    return a_divisors\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of all the common divisors of two numbers.\n    \"\"\"\n    # Your code here.\n    return sum(common_divisors(a,b))\n\ndef sum_of_common_divisors_and_multiples(a, b):\n    \"\"\"\n    Returns the sum of all the common divisors and multiples of two numbers.\n    \"\"\"\n    # Your code here.\n    lcm=a*b//reduce(lambda x,y:x*y//gcd(x,y),common_divisors(a,b))\n    return sum(common_divisors(a,b)) + lcm\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef gcd(a, b):\n    a = max(a, b)\n    b = min(a, b)\n    for i in range(2, a):\n        if b % i == 0 and a % i == 0:\n            gcd(i, b // i)\n            gcd(i, a // i)\n            return i\n    return a\n\ndef common_divisor(x, y):\n    c = gcd(x, y)\n    return (x + y - c) // 2\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(n1, n2):\n    \"\"\"\n    >>> sum_of_common_divisors(10, 15)\n    6\n    >>> sum_of_common_divisors(10, 12)\n    4\n    >>> sum_of_common_divisors(10, 8)\n    2\n    >>> sum_of_common_divisors(10, 30)\n    10\n    >>> sum_of_common_divisors(10, 6)\n    0\n    >>> sum_of_common_divisors(2, 4)\n    0\n    \"\"\"\n    sum_of_common = 0\n    for i in range(1, min(n1, n2) + 1):\n        if n1 % i == 0 and n2 % i == 0:\n            sum_of_common += i\n    return sum_of_common\n\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(num1, num2):\n  common_divisors = []\n  for i in range(1,int(num1/2)+1):\n    if (num1%i == 0) and (num2%i == 0):\n      common_divisors.append(i)\n  print(common_divisors)\n  return sum(common_divisors)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum(num1,num2):\n  temp = 1\n  if num1 > num2:\n    while num1 % temp != 0:\n      temp += 1\n    while num2 % temp != 0:\n      temp += 1\n    return num1 // temp + num2 // temp\n  elif num2 > num1:\n    while num2 % temp != 0:\n      temp += 1\n    while num1 % temp != 0:\n      temp += 1\n    return num1 // temp + num2 // temp\n  else:\n    return 0", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef common_divisors(a,b):\n    \"\"\"\n    >>> common_divisors(10,15)\n    6\n    \"\"\"\n    return sum(i for i in range(1,min(a,b)+1) if a % i == 0 and b % i == 0)\n\nimport doctest\ndoctest.testmod()", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisor(a,b):\n    # Write your code here\n    if a == 0:\n        return 0\n    elif b == 0:\n        return 0\n    else:\n        return sum_common_divisor(b,a%b) + b\n\ndef sum_of_common_divisors(a,b):\n    return a + b - sum_common_divisor(a,b)\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(n1,n2):\n    return sum(list(set(list(divisors(n1)).intersection(divisors(n2)))))\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef common_divisors(num1, num2):\n    \"\"\"\n    Return the sum of common divisors of two given numbers.\n    \"\"\"\n    return sum(set(range(1,num1 + 1)) & set(range(1, num2 + 1)))\n\n\ndef test_sum_common_divisors():\n    assert common_divisors(10, 15) == 6\n    assert common_divisors(13, 24) == 12\n    assert common_divisors(17, 28) == 16\n\n\ndef run_test_cases():\n    test_sum_common_divisors()"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    result = 0\n    while x>0:\n        if x&1:\n            result += y\n        x >>= 1\n        y <<= 1\n    return result", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a, b):\n    result = a * b\n    return result\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\nimport math\ndef multiply_int(n1,n2):\n    if (n1 < 0 and n2 < 0) or (n1 > 0 and n2 > 0):\n        return n1*n2\n    return (n1*-1)*(n2*-1)\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    if a == 0:\n        return 0\n    elif a == 1:\n        return b\n    elif b == 1:\n        return a\n    else:\n        return b+multiply_int(a,b-1)\n\ndef multiply_int_2(a,b):\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return a * b\n    else:\n        return (a*b)+multiply_int_2(a,b-1)\n    \ndef multiply_int_3(a,b):\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1:\n        return b * b\n    elif b == 1:\n        return a * b\n    else:\n        return (a*b)+multiply_int_3(a,b-1)\n\ndef multiply_int_4(a,b):\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1 or b == 1:\n        return a * b\n    else:\n        return (a*b)+multiply_int_4(a,b-1)\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n\ndef multiply_int_with_help(a,b):\n    return a*b\n\ndef multiply_int_with_generator(a,b):\n    yield a*b\n    yield a*b\n\ndef multiply_int_with_generator_with_return(a,b):\n    return a*b\n\ndef multiply_int_with_generator_with_return_and_call(a,b):\n    return multiply_int_with_generator_with_return(a,b)\n\ndef multiply_int_with_generator_with_return_and_call_and_mul(a,b):\n    return multiply_int_with_generator_with_return_and_call(a,b)*2\n\ndef multiply_int_with_generator_with_return_and_call_and_mul_and_div(a,b):\n    return multiply_int_with_generator_with_return_and_call_and_mul(a,b)/2\n\ndef multiply_int_with_generator_with_return_and_call_and_mul_and_div_and_sub(a,b):\n    return multiply_int_with_generator_with_return_and_call_and_mul_and_div(a,b)-10\n\ndef multiply_int_with_generator_with_return_and_call_and_mul_and_div_and_sub_and_mul_and_div(a,b):\n    return multiply_int_with_generator_with_return_and_call_and_mul_and_div_and_sub(a,b)*2\n\ndef multiply_int_with_generator_with_return_and_call_and_mul_and_div_and_sub_and_mul_and_div_and_pow(a,b):\n    return multiply_int_with_generator_with_return_and_call_and_mul_and_div_and_sub_and_mul_and_div(a,b)**2\n\ndef multiply_int_with_generator", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x, y):\n    result = 0\n    while x > 0:\n        result += y\n        x -= 1\n    return result\n\n\ndef multiply_int2(x, y):\n    return x * y\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a, b):\n    a = str(a)\n    b = str(b)\n    return int(a + b)\n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\n#takes the length of the word and the list of words\n#returns a list of words longer than n\ndef long_words(n, lst):\n    lst_longer = []\n    for word in lst:\n        if len(word)>n:\n            lst_longer.append(word)\n    return lst_longer", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,word_list):\n    long_word = []\n    for i in word_list:\n        if len(i)>n:\n            long_word.append(i)\n    return long_word", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    words.sort(key = lambda x: len(x))\n    return [word for word in words if len(word) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\nimport unittest\n\n\ndef long_words(n, words):\n    return [word for word in words if len(word) > n]\n\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n, words):\n    new_list = []\n    for word in words:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,s):\n    res = []\n    for word in s.split():\n        if len(word)>n:\n            res.append(word)\n    return res\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n\treturn [word for word in words if len(word)>n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,l):\n    return [w for w in l if len(w) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    if len(matrix) != 4:\n        return False\n    else:\n        row = []\n        col = []\n        diag = []\n        #print(matrix)\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                row.append(matrix[i][j])\n                col.append(matrix[j][i])\n                if i == j:\n                    diag.append(matrix[i][j])\n                if i == (len(matrix) - j - 1):\n                    diag.append(matrix[i][j])\n        if sorted(row) == sorted(col) == sorted(diag) == sorted(list(range(1,16))):\n            return True\n        else:\n            return False\n#test_list=[[1,2,3],[4,5,6],[7,8,9]]\n#test_list2=[[2,3,1],[4,5,6],[7,8,9]]\n#test_list3=[[1,3,2],[4,5,6],[7,8,9]]\n#test_list4=[[1,2,3],[4,5,6],[7,8,9]]\n#test_list5=[[1,3,2],[4,5,6],[7,8,9]]\n\n#print(magic_square_test(test_list))\n#print(magic_square_test(test_list2))\n#print(magic_square_test(test_list3))\n#print(magic_square_test(test_list4))\n#print(magic_square_test(test_list5))\ndef magic_square(matrix):\n    total_sum=0\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i==j:\n                total_sum+=matrix[i][j]\n            elif i==(len(matrix)-j-1):\n                total", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(arr):\n    a = sorted(arr)\n    for i in range(len(a)):\n        if (a[i] != i+1) and (a[i] != 0):\n            return False\n    return True\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(square):\n    x = 0\n    for i in range(4):\n        for j in range(4):\n            if square[i][j] != 0 and x != square[i][j]:\n                return False\n            x += 1\n\n    for i in range(4):\n        for j in range(4):\n            if square[j][i] != 0 and x != square[j][i]:\n                return False\n            x += 1\n    return True\n\n\ndef magic_square(square):\n    import numpy as np\n    if np.any(square == 0):\n        return False\n    if np.all(np.sum(square, axis=0) == 48):\n        return True\n    if np.all(np.sum(square, axis=1) == 48):\n        return True\n\n    if np.all(np.sum(square, axis=1) == np.sum(square, axis=0)):\n        return True\n\n    if np.all(np.sum(square, axis=0) == np.sum(square, axis=1) + 3):\n        return True\n\n    if np.all(np.sum(square, axis=1) == np.sum(square, axis=0) + 3):\n        return True\n\n    return False", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    matrix = np.array(matrix)\n    return np.all(np.sum(matrix, axis=0) == np.full(4, 28)) and \\\n           np.all(np.sum(matrix, axis=1) == np.full(4, 28)) and \\\n           np.all(np.sum(np.diag(matrix)) == 28) and \\\n           np.all(np.sum(np.diag(matrix[::-1])) == 28)", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(array):\n\tsum_ = 0\n\tfor i in range(4):\n\t\tfor j in range(4):\n\t\t\tsum_ += array[i][j]\n\tif sum_ == 144:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef magic_square_test(array):\n\tif magic_square(array):\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(n):\n    if n > 9:\n        print(\"Number of elements must be less than or equal to 9\")\n        return False\n    if n < 1:\n        print(\"Number of elements must be greater than 0\")\n        return False\n    if n == 1:\n        return [[1]]\n    if n == 2:\n        return [[1, 1], [1, 1]]\n    if n == 3:\n        return [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    if n == 4:\n        return [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n    if n == 5:\n        return [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]\n    if n == 6:\n        return [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]\n    if n == 7:\n        return [[1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1], [1, 2,", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square(l):\n    return l[0][0]+l[0][1]+l[0][2]==l[1][0]+l[1][1]+l[1][2]==l[2][0]+l[2][1]+l[2][2]==\\\nl[0][0]+l[1][0]+l[2][0]==l[0][1]+l[1][1]+l[2][1]==l[0][2]+l[1][2]+l[2][2]==\\\nl[0][0]+l[1][1]+l[2][2]==l[0][2]+l[1][1]+l[2][0]==True\ndef magic_square_test(l):\n    if len(l)==4 and len(l[0])==4:\n        return magic_square(l)\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    for row in range(4):\n        if row not in range(4):\n            return False\n        for column in range(4):\n            if column not in range(4):\n                return False\n    sum_list = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for row in range(4):\n        for column in range(4):\n            sum_list[row + column] += matrix[row][column]\n    if sum(sum_list) != 54:\n        return False\n    if sum_list[0] != sum_list[4] or sum_list[0] != sum_list[8] or sum_list[2] != sum_list[6]:\n        return False\n    if sum_list[1] != sum_list[5] or sum_list[1] != sum_list[7] or sum_list[3] != sum_list[5]:\n        return False\n    if sum_list[2] != sum_list[4] or sum_list[3] != sum_list[6]:\n        return False\n    if sum_list[0] != sum_list[2] or sum_list[0] != sum_list[6]:\n        return False\n    if sum_list[1] != sum_list[3] or sum_list[1] != sum_list[5]:\n        return False\n    if sum_list[4] != sum_list[6] or sum_list[4] != sum_list[8]:\n        return False\n    return True\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(square):\n    sum = 0\n    for i in range(4):\n        for j in range(4):\n            sum += square[i][j]\n    if sum == 34:\n        return True\n    return False\n\ndef magic_square(square):\n    sum = 0\n    for i in range(4):\n        for j in range(4):\n            sum += square[i][j]\n    if sum == 34:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(magic_square):\n    sum_of_columns = [sum(x) for x in zip(*magic_square)]\n    sum_of_rows = [sum(x) for x in magic_square]\n    sum_of_diagnals = [sum(magic_square[i][i] for i in range(len(magic_square))), sum(magic_square[i][(len(magic_square)-i)-1] for i in range(len(magic_square)))]\n    return sum(sum_of_columns) == sum(sum_of_rows) == sum(sum_of_diagnals) == 26 and all(i == j for i, j in zip(*magic_square))\n\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    frequency = Counter(lst)\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item, count\n    return None\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    max_freq = 1\n    max_item = lst[0]\n    for i in range(len(lst)):\n        freq = lst.count(lst[i])\n        if freq > max_freq:\n            max_freq = freq\n            max_item = lst[i]\n    return max_item, max_freq\n\n#test", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    d = {}\n    m = 0\n    k = None\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n        if d[i] > m:\n            m = d[i]\n            k = i\n    return k, m\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\nfrom collections import defaultdict\n\ndef max_occurrences(lst):\n    freq_dict = defaultdict(int)\n    for elem in lst:\n        freq_dict[elem] += 1\n    \n    max_freq = 0\n    max_elem = -1\n    for key, value in freq_dict.items():\n        if value > max_freq:\n            max_freq = value\n            max_elem = key\n    \n    return max_elem, max_freq\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(arr):\n  # Write your code here\n  frequency = {}\n  max_occurrence = -1\n  max_item = -1\n\n  for i in arr:\n    frequency[i] = frequency.get(i, 0) + 1\n\n    if frequency[i] > max_occurrence:\n      max_occurrence = frequency[i]\n      max_item = i\n\n  return (max_item, max_occurrence)\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(alist):\n    adict = {}\n    for ele in alist:\n        if ele in adict:\n            adict[ele] += 1\n        else:\n            adict[ele] = 1\n    \n    max_key = 0\n    max_val = 0\n    for key, value in adict.items():\n        if max_val < value:\n            max_val = value\n            max_key = key\n    return max_key, max_val\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\nimport pytest\nfrom frequency import max_occurrences\n\n\n@pytest.mark.parametrize(\"test_input,expected\", [\n    ([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2], (2, 5)),\n    ([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2, 1, 2], (2, 7)),\n    ([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2, 1, 2, 1, 2], (2, 8)),\n    ([1, 2, 3, 4, 5, 6, 7, 8], (1, 8)),\n    ([8, 8, 8, 8, 8, 8, 8, 8], (8, 8)),\n    ([1], (1, 1)),\n    ([1, 1], (1, 2)),\n    ([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], (1, 13)),\n    ([1, 2, 3, 4, 5, 6, ", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(items):\n    if not items:\n        return None\n\n    max_item, max_occurrences = items[0], 1\n    for i in items:\n        if items.count(i) > max_occurrences:\n            max_item, max_occurrences = i, items.count(i)\n\n    return max_item, max_occurrences\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(list):\n    max_item = None\n    max_count = 0\n    for item in list:\n        if item in list:\n            if list.count(item) > max_count:\n                max_count = list.count(item)\n                max_item = item\n    return (max_item, max_count)\n\n# Test your code\nlist1 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\nlist2 = [2,3,2,2,3,2,2,2]\nlist3 = []\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\nfrom typing import Tuple\n\n\ndef max_occurrences(items: list) -> Tuple[int, int]:\n    # Count occurrences\n    occ_dict = {item: items.count(item) for item in items}\n    max_occ = max(occ_dict.values())\n    # Return max occurrence key and value\n    return (\n        next(k for k, v in occ_dict.items() if v == max_occ),\n        max_occ,\n    )\n\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str1):\n    vowels = ['a','e','i','o','u']\n    str1 = list(str1)\n    i = 0\n    while i < len(str1):\n        if str1[i] in vowels:\n            str1[i],str1[i+1] = str1[i+1],str1[i]\n        i += 2\n    return ''.join(str1)\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    assert reverse_vowels(\"Python\") == \"Python\"\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for i in range(len(string)):\n        if string[i] in vowels:\n            string = string[i:i+1] + string[:i:-1] + string[i+1:]\n    return string", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    # your code here\n    # two pointer approach - one for iterating the string and one for iterating the vowels\n    start_index = 0\n    end_index = len(string)-1\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # reverse the vowels in the string\n    while start_index < end_index:\n        # move the vowel pointer till it finds a vowel\n        while start_index < end_index and string[start_index] not in vowels:\n            start_index += 1\n        # if no vowel is found in this string, exit the loop\n        if start_index >= end_index:\n            break\n        # now move the string pointer till it finds the vowel at the vowel pointer position\n        while start_index < end_index and string[start_index] in vowels:\n            end_index -= 1\n        # now the string pointer and vowel pointer are at same position\n        # now swap the vowel and string\n        string[start_index], string[end_index] = string[end_index], string[start_index]\n    return string\n\n# test cases", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(input_string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = []\n    i = 0\n    while i < len(input_string):\n        if input_string[i] in vowels:\n            result.insert(0,input_string[i])\n            i += 1\n        else:\n            result.append(input_string[i])\n            i += 1\n    return ''.join(result)", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    return \"\".join(reversed([c for c in s if c in 'aeiou']))\n\n\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"Python is a fun language\") == \"Python si a fun language\"\n    assert reverse_vowels(\"Python is a fun language for fun\") == \"Pythn si a fnu nalayg for fun\"\n    assert reverse_vowels(\"\") == \"\"\n    assert reverse_vowels(\"no vowels here\") == \"no vowels here\"\n    assert reverse_vowels(\"Python is a fun language for fun\") == \"Pythn si a fnu nalayg for fun\"\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels = list(map(lambda x: x, vowels))\n    vowels = \"\".join(vowels)\n    vowels_reversed = list(reversed(vowels))\n    vowels_reversed = \"\".join(vowels_reversed)\n    vowels = list(vowels_reversed)\n    vowels = \"\".join(vowels)\n    return \"\".join([c for c in string if c in vowels])\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\nimport re\n\ndef reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    regex = re.compile('[%s]' % re.escape(vowels))\n    vowel_list = regex.split(string)\n    vowel_list.reverse()\n    return ''.join(vowel_list)\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(strng):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    strng = strng.lower()\n    newStrng = \"\"\n    for char in strng:\n        if char in vowels:\n            newStrng += char[::-1]\n        else:\n            newStrng += char\n    return newStrng\n\n\n# test cases", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    res = ''\n    vowels = 'aeiou'\n    for ch in string:\n        if ch in vowels:\n            res = ch + res\n        else:\n            res = res + ch\n    return res", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    # TODO: Write your code here\n    string = list(string)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(string)):\n        if string[i] in vowels:\n            string[i] = string[i]\n            string.insert(i, string.pop())\n    return \"\".join(string)\n\n\ndef test_function(test_case):\n    string = test_case[0]\n    solution = test_case[1]\n    output = reverse_vowels(string)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case = [\"Python\", \"PhtyNo\"]\ntest_function(test_case)"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)\n\n# 16. Write a function to convert a list of integers into a string", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\n# METHOD 1\n# def tup_string(tup):\n#     res = \"\"\n#     for i in range(len(tup)):\n#         res += tup[i]\n#     return res\n\n# METHOD 2\ndef tup_string(tup):\n    return ''.join(tup)", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return ''.join(tup)\n\n# Tests", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \"\".join(tup)\n\ndef tup_string2(tup):\n    return \"\".join(tup).capitalize()\n\n# test\ntup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n# If you do this all at once, it is not the most efficient way to do it\ndef tup_string(tup):\n    out = \"\"\n    for char in tup:\n        out += char\n    return out\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    s=''\n    for i in tup:\n        s=s+i\n    return s", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    s = \"\"\n    for i in tup:\n        s = s + str(i)\n    return s\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \"\".join(tup)\n\n#tests\ntup_string((\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"))", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    str = ''\n    for x in tup:\n        str += x\n    return str\n\n\n# print(tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))) #exercises\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum([i for i in numbers if i < 0])\n\ndef test_sum_negativenum():\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x<0, nums))", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(num):\n    return sum(filter(lambda x:x<0,num))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(num):\n    # return sum(filter(lambda x: x<0, num))\n    return sum(map(lambda x: x if x<0 else 0, num))\n\ndef test_function():\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\ntest_function()", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(list_of_num):\n  return sum(list(filter(lambda x: x < 0, list_of_num)))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n#Answer\ndef sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n#Test", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n# Solution:\n# Using lambda functions\ndef sum_negativenum(arr):\n    sum = 0\n    for num in arr:\n        if num < 0:\n            sum += num\n    return sum\n\n\ndef sum_negativenum2(arr):\n    return sum(filter(lambda num: num < 0, arr))\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(lst):\n    return sum(filter(lambda x: x<0, lst))\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    return sum([item for item in nums if item<0])\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numList):\n    return sum([item for item in numList if item < 0])\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,n):\n    if p>=n:\n        return \"EVEN\"\n    else:\n        if arr[n-p-1]%2==0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,k):\n    val = arr[-1]\n    if k == 1:\n        return 'ODD' if val%2==1 else 'EVEN'\n    elif p == 1:\n        return 'ODD' if val%2==1 else 'EVEN'\n    return check_last(arr[:-1],p-1,k)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, n):\n    # code here\n    for i in range(p):\n        if arr[n-1]%2 != 0:\n            return \"ODD\"\n        n -= 1\n    return \"EVEN\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,n):\n\tif p==0:\n\t\treturn \"ODD\"\n\telse:\n\t\tn=n-1\n\t\tif arr[n]%2==0:\n\t\t\treturn check_last(arr,p-1,n)\n\t\telse:\n\t\t\treturn check_last(arr,p-1,n)\n\t", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(a,p,op):\n    if p==0:\n        if op==1:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    else:\n        if op==1:\n            return check_last(a[:-1],p-1,0)\n        else:\n            return check_last(a[:-1],p-1,1)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,x):\n    for i in range(p):\n        if arr[-1]%2 == 0:\n            arr.remove(arr[-1])\n            arr.insert(0,x)\n        else:\n            arr.remove(arr[-1])\n            arr.append(x)\n    \n    return \"EVEN\" if arr[-1]%2 == 0 else \"ODD\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    for i in range(p):\n        temp = q+i*q\n        if arr[temp]%2==0:\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n\n# Code credits - w3resource\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,odd_count):\n    for i in range(p):\n        if(arr[-1]%2):\n            odd_count+=1\n            if(odd_count>1):\n                return \"ODD\"\n        else:\n            odd_count=0\n    return \"EVEN\"\n\n\n#test cases", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(a, p, k):\n    if(p == 0):\n        return \"EVEN\"\n    if(a[len(a)-1]%2 == 0):\n        return check_last(a[:len(a)-1], p-1, k)\n    else:\n        return check_last(a[:len(a)-1], p-1, k+1)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(nums, p, op):\n    last = nums[len(nums) - 1]\n    if(op == 1):\n        last = last + 1\n    elif(op == 2):\n        last = last - 1\n    else:\n        return -1\n    \n    if(last % 2 == 0):\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    # TODO: Write your code here\n    if n == 0:\n        return 0\n    return 6*n**2\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom math import sqrt\n\n\ndef hexagonal_num(n):\n    # type: (int) -> int\n    return (n * (2 * n - 1)) // 2\n\n\ndef solve(n):\n    # type: (int) -> int\n    return hexagonal_num(n)\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return (n * (2 * n - 1)) // 2\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    if n == 1:\n        return 1\n    return 2*hexagonal_num(n-1) + (4*(n-1)*(2*n-1))\n    ", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nimport math\nfrom typing import List, Union\n\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Find the nth hexagonal number.\n\n    n: nth hexagonal number to find\n    \"\"\"\n    if n == 0:\n        return 0\n    return (n * (2 * n - 1)) // 2\n\n\ndef hexagonal_num_2(n: int) -> int:\n    \"\"\"\n    Find the nth hexagonal number.\n\n    n: nth hexagonal number to find\n    \"\"\"\n    if n == 0:\n        return 0\n    return (n + 1) * (2 * n + 1) // 2\n\n\ndef hexagonal_nums(n: int) -> List[int]:\n    \"\"\"\n    Find the first n hexagonal numbers.\n\n    n: number of hexagonal numbers to find\n    \"\"\"\n    return [hexagonal_num(i) for i in range(n)]\n\n\ndef hexagonal_nums_2(n: int) -> List[int]:\n    \"\"\"\n    Find the first n hexagonal numbers.\n\n    n: number of hexagonal numbers to find\n    \"\"\"\n    return [hexagonal_num_2(i) for i in range(n)]\n\n\ndef dist(hexagon_num: int) -> int:\n    \"\"\"\n    Find the distance to the nearest integer of a hexagonal number.\n\n    hexagon_num: hexagonal number to find the distance of\n    \"\"\"\n    return int(math.sqrt(8 * hexagon_num + 1) - 1)\n\n\ndef dist_2(hexagon_num: int) -> int:\n    \"\"\"\n    Find the distance to the nearest integer of a hexagonal number.\n\n    hexagon_num: hexagonal number to find the distance of\n    \"\"\"\n    return int(math.sqrt(1 + 8 * hexagon_num) - 1)\n\n\ndef dist_list(hexagon_nums: List[int]) -> List[int]:\n    \"\"\"\n    Find the distance to the nearest integer of each hexagonal number.\n\n    hexagon_nums: list of hexagonal numbers to find the distance of\n    \"\"\"\n    return [dist(", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom math import sqrt\n\n\ndef hexagonal_num(n):\n    return int((n*(2*n-1)) / 2)\n\n\ndef hexagonal_formula(n):\n    return int(sqrt(8*n + 1) - 1)\n\n\ndef test():\n    assert hexagonal_num(10) == 190\n    assert hexagonal_formula(10) == 190\n\n\ntest()", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nimport math\n\n\ndef hexagonal_num(n):\n    if n < 1:\n        return 0\n\n    return (n * (2 * n - 1)) // 2\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    pass\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n\treturn sum(range(n*2, 1,-2))\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nfrom math import floor, ceil, sqrt\n\n\ndef hexagonal_num(n: int):\n    return int(sqrt(8 * n + 1) - 1)\n\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kw_use, rate=0.10):\n    \"\"\"\n    kw_use: kilowatt-hour used\n    rate: rate per unit\n    \"\"\"\n    bill = kw_use * rate\n    return bill", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(hours):\n    return hours * 1.50\n\n# Test your function with below:", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kWh):\n    price = 0.15\n    if kWh >= 0 and kWh <= 200:\n        return kWh * price\n    elif kWh > 200 and kWh <= 1000:\n        return 200 * price + 0.2 * (kWh - 200)\n    else:\n        return 400 + 0.03 * (kWh - 1000)\n\ndef test_cal_electbill():\n    assert cal_electbill(75) == 246.25\n    assert cal_electbill(200) == 200*0.15\n    assert cal_electbill(1500) == 200*0.15 + 0.2*(1500-200) + 0.03*(1500-1000)", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(duration):\n    b = 0.0\n    if duration <= 0:\n        b = 0\n    elif duration <= 20:\n        b = 12.0\n    elif duration <= 40:\n        b = 14.40\n    elif duration <= 60:\n        b = 17.28\n    elif duration <= 80:\n        b = 20.56\n    elif duration <= 100:\n        b = 24.20\n    elif duration <= 120:\n        b = 28.20\n    elif duration <= 140:\n        b = 32.64\n    elif duration <= 160:\n        b = 37.52\n    elif duration <= 180:\n        b = 42.80\n    elif duration <= 200:\n        b = 48.48\n    elif duration <= 220:\n        b = 54.56\n    elif duration <= 240:\n        b = 61.12\n    elif duration <= 260:\n        b = 68.16\n    elif duration <= 280:\n        b = 75.76\n    elif duration <= 300:\n        b = 83.84\n    elif duration <= 320:\n        b = 92.48\n    elif duration <= 340:\n        b = 101.60\n    elif duration <= 360:\n        b = 111.20\n    elif duration <= 380:\n        b = 121.28\n    elif duration <= 400:\n        b = 131.84\n    elif duration <= 420:\n        b = 142.88\n    elif duration <= 440:\n        b = 154.40\n    elif duration <= 460:\n        b = 166.40\n    elif duration <= 480:\n        b = 178.88\n    elif duration <= 500:\n        b = 191.84\n   ", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kWh):\n    return kWh*1.25\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(usage):\n    return (usage*0.0085) + 1.05\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    #Write your code here\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(time):\n    \"\"\"\n    >>> cal_electbill(10)\n    38\n    \"\"\"\n    return 45 + time * 0.05\n\n\ndef calc_tax(price):\n    \"\"\"\n    >>> calc_tax(10)\n    5\n    \"\"\"\n    return price * 0.05\n\n\ndef calc_tip(price, tip_percent):\n    \"\"\"\n    >>> calc_tip(10, 10)\n    1\n    \"\"\"\n    return price * (tip_percent / 100)\n\n\ndef cal_mealcost(meal_price, tip_percent):\n    \"\"\"\n    >>> cal_mealcost(10, 10)\n    15\n    \"\"\"\n    return meal_price + calc_tip(meal_price, tip_percent)\n\n\ndef cal_totalcost(meal_price, tip_percent, tax_percent):\n    \"\"\"\n    >>> cal_totalcost(10, 10, 5)\n    17\n    \"\"\"\n    tip = calc_tip(meal_price, tip_percent)\n    tax = calc_tax(tip)\n    return meal_price + tip + tax\n\n\ndef cal_electcost(time):\n    \"\"\"\n    >>> cal_electcost(10)\n    45\n    \"\"\"\n    return 45 + time * 0.05\n\n\ndef cal_totalcost_with_elect(meal_price, tip_percent, tax_percent, time):\n    \"\"\"\n    >>> cal_totalcost_with_elect(10, 10, 5, 10)\n    226.25\n    \"\"\"\n    tip = calc_tip(meal_price, tip_percent)\n    tax = calc_tax(tip)\n    elect = cal_electcost(time)\n    return meal_price + tip + tax + elect\n\n\ndef cal_electbill_with_meal(meal_price, tip_percent, tax_percent, time):\n    \"\"\"\n    >>> cal_electbill_with_meal(10, 10, 5, 10)\n    226.25\n    \"\"\"\n    tip = calc_tip(meal_price, tip_percent)\n    tax = calc_", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    price = 0.119\n    return price * kwh\n\n# assert cal_electbill(75)==246.25\n#assert cal_electbill(123)==279.675", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    return (kwh*0.125) + 24.625\n\ndef cal_electbill(kwh):\n    return round(kwh * 0.125, 2) + 24.625\n\ndef cal_electbill(kwh):\n    return round(kwh * 0.125 + 24.625, 2)\n\ncal_electbill(75)"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\nimport math\n\ndef zero_count(lst):\n    z = 0\n    for i in lst:\n        if i == 0:\n            z += 1\n    return float(z)/len(lst)", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    \"\"\"\n    Given an array of integers, returns the fraction of zeroes in the array.\n\n    The return value should be a number between 0 and 1, where 0 is no zeros\n    in the array, and 1 is all zeros in the array.\n    \"\"\"\n    return float(sum(arr == 0)) / len(arr)", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    # Your code here\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n    return count/len(arr)", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(array):\n    #code here\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n  zero_count=0\n  for i in arr:\n    if i == 0:\n      zero_count+=1\n  return float(zero_count)/len(arr)\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\nimport unittest\n\ndef zero_count(lst):\n    if len(lst) == 0:\n        return 0.0\n\n    zero_count = 0\n    for number in lst:\n        if number == 0:\n            zero_count += 1\n\n    return zero_count / len(lst)\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(array):\n    count = 0\n    for number in array:\n        if number == 0:\n            count = count + 1\n\n    return count/len(array)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\nimport numpy as np\n\n\ndef zero_count(arr):\n    assert isinstance(arr, np.ndarray)\n    return np.where(arr == 0)[0].size / arr.size\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(array):\n    count=0\n    for i in array:\n        if(i==0):\n            count+=1\n    return count/len(array)\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(nums):\n    zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n    return zeroes/len(nums)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n\ta = 0\n\twhile(n > 0):\n\t\ta += (n & 1)\n\t\tn >>= 1\n\t\tprint(a)\n\treturn (a == 1)\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    i = 0\n    while n:\n        if n % 2 == 1:\n            return False\n        n //= 2\n        i += 1\n    return True\n\n#assert is_Sum_Of_Powers_Of_Two(10) == True\n#assert is_Sum_Of_Powers_Of_Two(24) == True\n#assert is_Sum_Of_Powers_Of_Two(64) == False", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n  return is_Sum_Of_Powers_Of_Two_Util(n,0)\n\ndef is_Sum_Of_Powers_Of_Two_Util(n,p):\n  if(p==0):\n    if(n==0):\n      return True\n    else:\n      return False\n  if(p>31):\n    return False\n  if((n&(1<<p))>0):\n    if(is_Sum_Of_Powers_Of_Two_Util(n&(~(1<<p)),p+1)):\n      return True\n    else:\n      return False\n  else:\n    return is_Sum_Of_Powers_Of_Two_Util(n&(~(1<<p)),p+1)\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    return bin(n).count(\"1\") % 2 == 0\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(number):\n    count = 0\n    while number > 0:\n        if number % 2 == 0:\n            number //= 2\n            count += 1\n        else:\n            return False\n    return count > 0\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        i = 1\n        while i < n:\n            if n & (1<<i):\n                n = n - (1<<i)\n                i = 1\n            else:\n                i = i + 1\n        return n == 0\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    if num == 0:\n        return False\n    elif num == 1:\n        return True\n    elif num % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(num/2)\n    elif num % 2 == 1:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n < 0:\n        return False\n\n    if n == 0:\n        return True\n\n    x = 0\n    y = n\n\n    while y & (y - 1) == 0:\n        x += 1\n        y &= (y - 1)\n\n    while x != 0:\n        if n - (1 << x) == 0:\n            return True\n        x -= 1\n\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n#Approach-1 \ndef is_Sum_Of_Powers_Of_Two(n):\n    if n < 0:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % 2 == 0:\n            return True\n        n = n//2\n    return False\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    import math\n    return 2 * math.pi * radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    import math\n    circumference=2*math.pi*radius\n    return circumference\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n\treturn 2*3.141592653589793*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return 2*3.1415926535*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2*math.pi*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    \"\"\"Return the circumference of a circle\"\"\"\n    return 2*pi*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    import math\n    return 2*math.pi*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    \"\"\"\n    >>> circle_circumference(10)\n    62.830000000000005\n    \"\"\"\n    return 2 * pi * radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    circumference = 2*math.pi*radius\n    return circumference\n\ndef test_circle_circumference():\n    assert circle_circumference(10)==62.830000000000005\ntest_circle_circumference()\ndef circle_circumference(radius):\n    from math import pi\n    c = 2 * pi * radius\n    return c\n\ndef test_circle_circumference():\n    assert circle_circumference(10)==62.830000000000005\ntest_circle_circumference()\ndef circle_circumference(radius):\n    from math import pi\n    return 2 * pi * radius\n\ndef test_circle_circumference():\n    assert circle_circumference(10)==62.830000000000005\ntest_circle_circumference()\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\ndef test_circle_circumference():\n    assert circle_circumference(10)==62.830000000000005\ntest_circle_circumference()\n\ndef circle_circumference(radius):\n    return 2*math.pi*radius\n\ndef test_circle_circumference():\n    assert circle_circumference(10)==62.830000000000005\ntest_circle_circumference()```\n\n### Output:\n\n<empty_output>", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2*3.1415926*radius\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(a):\n    # a = [(3, 4, 5), (4, 5, 7), (1, 4)]\n    temp = []\n    for x in a:\n        for i in x:\n            if i not in temp:\n                temp.append(i)\n    return temp\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuple_list):\n    singles = set()\n    for each in tuple_list:\n        if each in singles:\n            singles.remove(each)\n        else:\n            singles.add(each)\n    return list(singles)", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(lst):\n    seen = set()\n    new_lst = []\n    for i in range(0, len(lst)):\n        if lst[i] not in seen:\n            new_lst.append(lst[i])\n            seen.add(lst[i])\n\n    return new_lst\n\nlst = [(3, 4, 5), (4, 5, 7), (1, 4)]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(lst):\n    return [item for lst in lst for item in lst if lst.count(item) == 1]", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\nimport itertools\n\ndef extract_singly(lst):\n    return [x for x in itertools.chain.from_iterable(lst) if x not in itertools.chain.from_iterable(lst[:lst.index(x)] + lst[lst.index(x) + 1:])]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom typing import List\n\ndef extract_singly(input: List[tuple]) -> List[int]:\n    \"\"\"\n    Args:\n        input (list): list of tuples\n\n    Returns:\n        list: list of the elements that only appear once in the input list\n    \"\"\"\n    return [el for el in input for el in el if input.count(el) == 1]", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(lst):\n    # code here\n    return [item for tup in lst for item in tup if tup.count(item)==1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom typing import List, Tuple, Set, Dict\n\ndef extract_singly(list_of_tuple: List[Tuple[int]]) -> Set[int]:\n    \"\"\"\n    \u8fd9\u91cc\u7684\u601d\u8def\u5c31\u662f\u904d\u5386\u6574\u4e2a\u5143\u7d20\uff0c\u901a\u8fc7\u5b57\u5178\u5b58\u653e\u5143\u7d20\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u8be5\u5143\u7d20\n    \u7531\u4e8e\u5143\u7d20\u662f\u6709\u5e8f\u7684\uff0c\u90a3\u4e48\u5c31\u901a\u8fc7\u4e8c\u5206\u67e5\u627e\u5c31\u80fd\u591f\u627e\u5230\u5bf9\u5e94\u7684\u5143\u7d20\u4e86\n    \"\"\"\n    dict: Dict[int, int] = dict()\n    for i in range(len(list_of_tuple)):\n        if list_of_tuple[i][0] not in dict:\n            dict[list_of_tuple[i][0]] = 1\n        elif dict[list_of_tuple[i][0]] == 1:\n            return set([list_of_tuple[i][0]])\n        else:\n            return set()\n    return set()\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(t_list):\n    return [elem for elem in t_list if t_list.count(elem) == 1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(seq):\n    \"\"\"\n    >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [3, 4, 5, 7, 1]\n    \"\"\"\n    return list(set([item for sublist in seq for item in sublist]))\n\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nimport math\ndef pancake_sort(arr):\n    # Write your code here\n    pass", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\n# Naive Solution\ndef pancake_sort_naive(a):\n    a_copy = a[:]\n    len_a = len(a)\n    while len_a > 1:\n        for i in range(1, len_a):\n            if a_copy[i-1] > a_copy[i]:\n                a_copy = flip(a_copy, i)\n        a_copy = flip(a_copy, len_a-1)\n        len_a -= 1\n    return a_copy\n\n# Defining the flip function\ndef flip(a, n):\n    a_copy = a[:]\n    for i in range(n):\n        a_copy[i], a_copy[i+1] = a_copy[i+1], a_copy[i]\n    return a_copy\n\n# Sample Test Cases", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(lst):\n    if lst == []:\n        return []\n    result = []\n    while lst != []:\n        index = find_max_index(lst)\n        result.append(lst[index])\n        lst = flip(lst, index)\n    return result\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(array):\n    \"\"\"\n    Returns a sorted copy of the list.\n    \"\"\"\n    result = []\n    for value in array:\n        result.append(value)\n    while len(result) > 1:\n        # Find the largest element in the array,\n        # and the index it's at.\n        max_index = 0\n        max_value = result[0]\n        for i, value in enumerate(result[1:], start=1):\n            if value > max_value:\n                max_index = i\n                max_value = value\n        # Swap the first and max_index values.\n        result[0], result[max_index] = result[max_index], result[0]\n        # Reverse the first len(result) elements.\n        result[0:len(result)] = result[len(result)-1::-1]\n    return result\n\n\ndef test_pancake_sort():\n    \"\"\"\n    Run tests on pancake_sort function.\n    \"\"\"\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([]) == []\n    assert pancake_sort([1, 2, 3]) == [1, 2, 3]", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nfrom typing import List\n\ndef pancake_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    >>> pancake_sort([2, 2, 3, 4, 3, 1, 3, 4, 4])\n    [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    >>> pancake_sort([2, 2, 3, 4, 3, 1, 3, 4, 4])\n    [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    >>> pancake_sort([])\n    []\n    \"\"\"\n    if len(arr) == 1:\n        return arr\n\n    for i in range(len(arr)-1, 0, -1):\n        j = i\n        while j > 0 and arr[j-1] > arr[j]:\n            arr[j-1], arr[j] = arr[j], arr[j-1]\n            j -= 1\n\n    n = len(arr)\n    for i in range(n-2, -1, -1):\n        j = n-1\n        while j > i and arr[j-1] > arr[j]:\n            arr[j-1], arr[j] = arr[j], arr[j-1]\n            j -= 1\n    return arr\n\n\ndef test_pancake_sort():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([2, 2, 3, 4,", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    temp = []\n    for i in range(len(lst), 1, -1):\n        j = 0\n        while lst[j] != i:\n            j += 1\n        if j != 0:\n            temp = [j+1] + temp\n        temp = [i] + temp\n    return temp\n\n\n#test", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    for x in range(len(arr)-1, -1, -1):\n        swapped = False\n        for i in range(1, x+1):\n            if arr[i-1] > arr[i]:\n                arr[i-1], arr[i] = arr[i], arr[i-1]\n                swapped = True\n        if swapped:\n            yield arr\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    index_list = []\n    for i in range(len(lst)):\n        while lst[i] != lst[i-1]:\n            index_list.append(i-1)\n            index_list.append(i)\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n    return lst\n\n# assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    return\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    \"\"\"\n    Solution 1\n    - https://stackoverflow.com/questions/32469524/pancake-sort-in-python\n    \"\"\"\n    def flip(arr, index):\n        \"\"\"Flip the array in place from the beginning to the index\"\"\"\n        # arr[0:index] = reversed(arr[0:index])\n        for i in range(index):\n            arr[i], arr[index - i - 1] = arr[index - i - 1], arr[i]\n    \n    # Find the largest item and flip it to the end\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    for index in range(len(arr)):\n        if arr[index] > arr[-1]:\n            break\n    flip(arr, index)\n\n    # Use a stack to keep track of how many flips are needed for each index\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    stack = []\n\n    # Flip the array in reverse\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    for i in range(len(arr) - 1, -1, -1):\n        flip(arr, i)\n\n    # Reverse the array\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    arr.reverse()\n\n    # Get the index that is flipped to the end\n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    index = 0\n    while stack or index < len(arr):\n        if stack:\n            # Number of flips are on the stack\n            index = stack.pop()\n        elif index < len(arr):\n            # Push the number of flips required for the next index to the stack\n            stack.append(index)\n            index += 1\n\n    return arr\n\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            counter += 1\n    return counter\n\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(a,b,c):\n    list_with_unique_pairs = set()\n    for i in a:\n        for j in b:\n            for k in c:\n                pair = [i, j]\n                if pair not in list_with_unique_pairs and pair[::-1] not in list_with_unique_pairs:\n                    list_with_unique_pairs.add(pair)\n    return len(list_with_unique_pairs)", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(a,b,c):\n    count = 0\n    for i in a:\n        for j in b:\n            for k in c:\n                if i == j and j == k:\n                    count += 1\n    return count", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\n# 1.\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if (list1[i] == list2[i]) and (list1[i] == list3[i]):\n            count += 1\n    return count\n\n# 2.\ndef count_samepair(list1, list2, list3):\n    pairs = []\n    for item1 in list1:\n        if item1 in list2:\n            if item1 in list3:\n                pairs.append(item1)\n    return len(pairs)\n\n# 3.\ndef count_samepair(list1, list2, list3):\n    list1_set = set(list1)\n    list2_set = set(list2)\n    list3_set = set(list3)\n    pairs = list1_set & list2_set & list3_set\n    return len(pairs)\n\n# 4.\ndef count_samepair(list1, list2, list3):\n    return len(set(list1) & set(list2) & set(list3))\n\n# 5.\ndef count_samepair(list1, list2, list3):\n    pair = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                pair.append(i)\n    return len(pair)\n\n# 6.\ndef count_samepair(list1, list2, list3):\n    for x in list1:\n        if x in list2 and x in list3:\n            return 1\n    return 0\n\n# 7.\ndef count_samepair(list1, list2, list3):\n    pairs = []\n    for i in list1:\n        if i in list2 and i in list3:\n            pairs.append(i)\n    return len(pairs)", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the same pair in three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    res = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                res += 1\n    for i in list2:\n        for j in list3:\n            if i == j:\n                res += 1\n    for i in list3:\n        for j in list1:\n            if i == j:\n                res += 1\n    return res", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\nfrom typing import List\n\n\ndef count_samepair(arr1: List, arr2: List, arr3: List) -> int:\n    # TODO: Write your code here\n    count = 0\n    for x in arr1:\n        if x in arr2 and x in arr3:\n            count += 1\n    return count\n\n\n# These are the tests we use to determine if the solution is correct.\n# You can add your own at the bottom, but they are otherwise not editable!\n\ndef printInteger(n):\n    print('[', n, ']', sep='', end='')\n\n\ntest_case_number = 1\n\narr_1 = [1, 2, 3, 4, 5, 6, 7, 8]\narr_2 = [2, 2, 3, 1, 2, 6, 7, 9]\narr_3 = [2, 1, 3, 1, 2, 6, 7, 9]\nexpected_count = 3", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count +=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(l1,l2,l3):\n    l_set = set(l1)\n    count = 0\n    for i in l2:\n        for j in l3:\n            if i == j:\n                count += 1\n                break\n    return count\n\n\n# Driver code\n\nl1 = [1,2,3,4,5,6,7,8]\nl2 = [2,2,3,1,2,6,7,9]\nl3 = [2,1,3,1,2,6,7,9]", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(a,b,c):\n    count = 0\n    for i in a:\n        for j in b:\n            for k in c:\n                if (i == j) and (j == k):\n                    count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuples):\n    cnt = 0\n    for i in range(len(tuples)):\n        if len(tuples[i]) > 1:\n            cnt += 1\n    return cnt\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(t):\n    return len(t) - len(set(tuple(map(lambda x:x[0], t))))\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    return len([x for x in tup if type(x)==list])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    return sum(1 for _ in tup if isinstance(_, list))\n\n#test function", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\nfrom typing import List\n\n\ndef find_lists(list_of_list: List[list]) -> int:\n    \"\"\"\n    Find the number of list in given list\n    \"\"\"\n    counter = 0\n    for i in list_of_list:\n        if isinstance(i, list):\n            counter += 1\n    return counter\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\n# def find_lists(tup):\n#     list_num = 0\n#     for i in tup:\n#         list_num += len(i)\n#     return list_num\n\n# Or\n\ndef find_lists(tup):\n    return sum(len(l) for l in tup)", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    count = 0\n    for i in t:\n        if type(i) == list:\n            count += 1\n    return count", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_list):\n    # Write your code here\n    return len([x for x in tuple_list if isinstance(x, list)])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuple_arg):\n    # TODO: Write your solution here\n    count = 0\n    for i in range(len(tuple_arg)):\n        for j in range(i + 1, len(tuple_arg)):\n            # print(tuple_arg[i], tuple_arg[j])\n            if tuple_arg[i] == tuple_arg[j]:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\n# def find_lists(tup):\n#     return len([i for i in tup if isinstance(i, list)])\n\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    #code here\n    ans=0\n    for i in range(n):\n        for j in range(i+1,n):\n            ans+=abs(arr[i]-arr[j])\n    return ans\n    \n#Test cases", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\nfrom functools import reduce\nfrom operator import add\ndef sum_Pairs(arr,N):\n    sum_pairs = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            sum_pairs = sum_pairs + abs(arr[i] - arr[j])\n    return sum_pairs", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    pair = sum_Pair(arr)\n    total = 0\n    for i in range(0,n):\n        for j in range(0,i+1):\n            total += pair[i]-pair[j]\n    return total\n\ndef sum_Pair(arr):\n    arr.sort()\n    pair = []\n    for i in range(0,len(arr)):\n        if i != 0 and arr[i]!=arr[i-1]:\n            pair.append(arr[i])\n    return pair\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    sum_ = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_ += abs(arr[i]-arr[j])\n    return sum_\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\nfrom typing import List\ndef sum_Pairs(lst: List[int], k: int) -> int:\n    pairs = []\n    for i in range(len(lst) - 1):\n        for j in range(i+1, len(lst)):\n            pairs.append(abs(lst[i] - lst[j]))\n    return sum(pairs)\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(nums,n):\n    assert len(nums)==n\n    ans =0\n    for i in range(n):\n        for j in range(i+1,n):\n            ans+=abs(nums[i]-nums[j])\n    return ans\n\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,k):\n    if len(arr) == 0:\n        return 0\n    if k>len(arr):\n        return -1\n    arr.sort()\n    total = 0\n    for i in range(len(arr)):\n        j = i+1\n        while j<len(arr):\n            if j-i<k:\n                break\n            total+=abs(arr[i]-arr[j])\n            j+=1\n    return total\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr, n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return abs(arr[0])\n    \n    return abs(arr[0] - arr[1]) + sum_Pairs(arr[1:],n-1)\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,n):\n    # code here\n    sum1=0\n    for i in range(n):\n        for j in range(i,n):\n            sum1+=abs(arr[i]-arr[j])\n    return sum1\n#main\nn=int(input())\narr=[int(i) for i in input().split()]", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(nums, k):\n    if k<1:\n        return 0\n    diff = 0\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if j-i<k:\n                diff += abs(nums[i] - nums[j])\n    return diff\n\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\nimport sys\n\ndef max_Abs_Diff(arr, k):\n    return max(abs(arr[i+1]-arr[i]) for i in range(len(arr)-1) if (i<k) or (arr[i]-arr[i+1])*(arr[i+k]-arr[i])>0)\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    if len(arr) == 1:\n        return 0\n    min1 = arr[0]\n    max1 = arr[0]\n    max_diff = arr[1] - arr[0]\n    for i in range(1, n):\n        min1 = min(min1, arr[i])\n        max1 = max(max1, arr[i])\n        max_diff = max(max_diff, abs(arr[i] - max1))\n    return max_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(A,N):\n    return max(A[i+1]-A[i] for i in range(N-1))\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(a, k):\n    # your code goes here\n    a.sort()\n    if k < 2:\n        return max(a[0],a[1]) - min(a[0],a[1])\n    else:\n        return max(a[0],a[1]) - min(a[0],a[1]) + max_Abs_Diff(a[2:],k-1)\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    max_diff = -10000\n    for i in range(n-1):\n        for j in range(i+1,n):\n            max_diff = max(max_diff, abs(arr[i]-arr[j]))\n    return max_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\nimport numpy as np\n\ndef max_Abs_Diff(arr, k):\n    arr = np.array(arr)\n    arr = np.sort(arr)\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n            if diff > k:\n                break\n    return max_diff\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, k):\n    min_ele = min(arr)\n    max_ele = max(arr)\n    for i in arr:\n        if(abs(i-min_ele) > k):\n            return abs(i-min_ele)\n    return abs(i-max_ele)\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\nfrom typing import List\ndef max_Abs_Diff(arr: List[int], k: int) -> int:\n    arr.sort()\n    i = 0\n    j = len(arr) - 1\n    # the maximum difference we can get\n    max_diff = 0\n    # if the maximum difference is less than k, we cannot find the answer\n    if k < arr[j] - arr[i]:\n        return 0\n    # If the maximum difference is equal to k, then the smallest element of the array can be removed\n    # from the array and we are left with the original array.\n    # In this case the answer is the sum of all the elements of the array\n    while arr[j] - arr[i] > k:\n        max_diff += arr[i]\n        i += 1\n    # we have now removed all the elements of the array whose value is less than k.\n    # Now, we need to find the minimum value in the array to make the difference less than k\n    # The answer is the smallest value in the array that is greater than the current largest value in the array\n    # the difference between the largest and smallest value in the array is the answer\n    while arr[j] - arr[i] >= k:\n        max_diff += arr[j]\n        j -= 1\n    return max_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr, n):\n    maximum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            maximum = max(maximum, abs(arr[i]-arr[j]))\n    return maximum\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,k):\n    arr.sort()\n    print(arr)\n    diff = []\n    for i in range(len(arr)-1):\n        diff.append(abs(arr[i+1]-arr[i]))\n    print(diff)\n    return max(diff) if max(diff)<=k else k\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\n# ascii_value_string(\"python\")\n# def ascii_value_string(s):\n#     sum=0\n#     for i in s:\n#         sum=sum+i\n#     return sum\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n  total = 0\n  for i in string:\n    total += ord(i)\n  return total\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    total = 0\n    for c in s:\n        total += ord(c)\n    return total\n\n# assert ascii_value_string(\"python\")==112", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(word):\n    return sum([ord(i) for i in word])\n\ndef test_function():\n    test_cases = [\n        [\"python\", 112],\n        [\"coding\", 99],\n        [\"google\", 103]\n    ]\n    for word, ascii_value in test_cases:\n        assert ascii_value == ascii_value_string(word)\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    total=0\n    for i in s:\n        total += ord(i)\n    return total\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    sum_of_ascii_values = 0\n    for letter in s:\n        sum_of_ascii_values += ord(letter)\n    return sum_of_ascii_values\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(str1):\n    str1 = str1.lower()\n    count = 0\n    for i in str1:\n        count += ord(i)\n    return count\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    return sum(ord(i) for i in s)\n\ndef test_ascii_value_string():\n    assert ascii_value_string(\"python\")==112\n\ntest_ascii_value_string()", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(a_string):\n    a=0\n    for letter in a_string:\n        a+=ord(letter)\n    return a\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return sum(ord(char) for char in string)\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=10000)\ndef max_path_sum(triangle, i, j):\n    if i == j:\n        return triangle[i][j]\n\n    if i > j:\n        return max_path_sum(triangle, j, i)\n\n    return max(triangle[i][j] + max(max_path_sum(triangle, i + 1, k)\n                                     for k in range(j + 1)),\n               max_path_sum(triangle, i + 1, j))\n\n\ndef main():\n    triangle = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\n    print(max_path_sum(triangle, 0, 2))\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\n# Here are some examples.\n\n# given [1,0,0], [4,8,0], [1,5,3]\n#      1   1 \n#      / \\  / \\\n#     4   8 0  5\n#      /  / \\  /\n#     1  5   3\n# the answer is 14, because:\n# 1+4+5+3\n# 1+4+8+0+3\n# 1+0+8+5+3\n# 1+0+0+5+3\n\n\n# This is a dynamic programming solution.\ndef max_path_sum(triangle, row_start, row_end):\n    \"\"\"\n    return the maximum total path sum from the row_start to row_end (not included)\n    \"\"\"\n    # init matrix\n    # to store the the path sum\n    # if triangle[x][y] == 0, means that the matrix is empty\n    # else it is the path sum at [x][y]\n    matrix = [[0 for x in range(row_end+1)] for y in range(row_start)]\n    # we can use the bottom left as a base case\n    matrix[row_start][row_start] = triangle[row_start][row_start]\n\n    # filling the matrix from bottom to top\n    for x in range(row_start, row_end):\n        for y in range(x+1):\n            if y == 0:\n                # case 1: the path is from left to right\n                matrix[x][y] = matrix[x-1][y] + triangle[x][y]\n            elif y == x:\n                # case 2: the path is from top to down\n                matrix[x][y] = matrix[x-1][y-1] + triangle[x][y]\n            else:\n                # case 3: the path is from left to down\n                matrix[x][y] = max(matrix[x-1][y], matrix[x-1][y", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, r, c):\n    if len(triangle) <= r or len(triangle[r]) <= c:\n        return -float(\"inf\")\n\n    max_a = max(triangle[r-1][c], triangle[r-1][c-1])\n\n    if r == 1:\n        return max(triangle[r-1][c], triangle[r-1][c-1])\n    else:\n        return max(max_a, max_path_sum(triangle, r-1, c)) + triangle[r-1][c]\n\n\ndef test():\n    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row_start, row_end):\n    row_count = row_end - row_start + 1\n    # Initialize all 2D arrays to -inf\n    max_path_sum_memo = [[-inf for _ in range(row_count)] for _ in range(row_count)]\n\n    for row in range(row_start, row_end + 1):\n        max_path_sum_memo[row][0] = triangle[row][0]\n        for col in range(1, row + 1):\n            max_path_sum_memo[row][col] = triangle[row][col] + max(max_path_sum_memo[row - 1][col - 1],\n                                                                 max_path_sum_memo[row - 1][col])\n\n    return max(max_path_sum_memo[row_end])\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\nfrom typing import List\n\n\ndef max_path_sum(triangle: List[List[int]], row: int, col: int) -> int:\n    if not triangle:\n        return 0\n\n    left = triangle[row - 1][col - 1] if col > 0 else 0\n    right = triangle[row - 1][col] if col < len(triangle[0]) - 1 else 0\n    top = triangle[row][col - 1] if row > 0 else 0\n\n    return max(left, right, top) + max_path_sum(triangle, row - 1, col)\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, col, row):\n    if col >= len(triangle) or row >= len(triangle[col]):\n        return -10000\n\n    max_sum = triangle[col][row]\n    max_sum_path = triangle[col][row]\n    if row < len(triangle[col]) - 1:\n        max_sum_path = max(max_path_sum(triangle, col, row+1), max_path_sum(triangle, col, row+2))\n    if col < len(triangle) - 1:\n        max_sum_path = max(max_sum_path, max_path_sum(triangle, col+1, row))\n\n    return max_sum + max_sum_path", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, i, j):\n    if j == i:\n        return triangle[i][i]\n    if j < i:\n        return 0\n    if i == 1:\n        if j == 1:\n            return triangle[i][i]\n        else:\n            return max(triangle[i][j], triangle[i-1][j])\n    if i == 2:\n        if j == 1:\n            return max(triangle[i][j], triangle[i-1][j])\n        elif j == 2:\n            return max(triangle[i][j], triangle[i-1][j], triangle[i-2][j-1])\n        else:\n            return max(triangle[i][j], triangle[i-1][j], triangle[i-2][j-1], triangle[i-2][j])\n    if i == 3:\n        if j == 1:\n            return max(triangle[i][j], triangle[i-1][j], triangle[i-2][j])\n        elif j == 2:\n            return max(triangle[i][j], triangle[i-1][j], triangle[i-2][j], triangle[i-3][j-1])\n        elif j == 3:\n            return max(triangle[i][j], triangle[i-1][j], triangle[i-2][j], triangle[i-3][j-1], triangle[i-3][j])\n        else:\n            return max(triangle[i][j], triangle[i-1][j], triangle[i-2][j], triangle[i-3][j-1], triangle[i-3][j], triangle[i-2][j-1])", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nimport unittest\n\n\ndef max_path_sum(triangle, row_start, row_end):\n    \"\"\"\n    :param triangle: the triangle to solve\n    :param row_start: the top row of the triangle\n    :param row_end: the bottom row of the triangle\n    :return: the maximum path sum in the triangle\n    \"\"\"\n    if row_start == row_end:\n        return triangle[row_start][row_start]\n\n    path_sum_above = float(\"-inf\")\n\n    if row_start + 1 < row_end:\n        path_sum_above = max_path_sum(triangle, row_start + 1, row_end)\n\n    path_sum_below = float(\"-inf\")\n    if row_start > 0:\n        path_sum_below = max_path_sum(triangle, row_start - 1, row_end)\n\n    path_sum_right = float(\"-inf\")\n    if row_start < row_end - 1:\n        path_sum_right = max_path_sum(triangle, row_start, row_end - 1)\n\n    return triangle[row_start][row_start] + max(path_sum_above, path_sum_below, path_sum_right)\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nimport math\n\n\ndef max_path_sum(triangle, row, col):\n    max_path_sum_ = math.inf\n    # end condition\n    if row == 0:\n        return triangle[row][col]\n    else:\n        # find the path sum of current and upper triangle\n        upper_triangle_path_sum = max_path_sum(triangle, row - 1, col)\n        max_path_sum_ = max(max_path_sum_, upper_triangle_path_sum)\n        if col != 0:\n            left_triangle_path_sum = max_path_sum(triangle, row - 1, col - 1)\n            max_path_sum_ = max(max_path_sum_, left_triangle_path_sum)\n        right_triangle_path_sum = max_path_sum(triangle, row - 1, col)\n        max_path_sum_ = max(max_path_sum_, right_triangle_path_sum)\n    return max_path_sum_\n\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    num_digits = [int(x) for x in str(num)]\n    return max(sum(num_digits), sum(num_digits[::-1]))\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    assert isinstance(n, int) and n >= 0\n    nums = [int(i) for i in str(n)]\n    nums.sort()\n    m, n = 0, 0\n    for i in nums:\n        if i % 2 == 0:\n            m += i\n        else:\n            n += i\n    return m + n\n\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    max_sum = 0\n    for i in range(1,len(str(n))+1):\n        for j in range(i,len(str(n))+1):\n            max_sum = max(max_sum,sum([int(k) for k in str(n)[i:j]]))\n    return max_sum", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    sum1=0\n    sum2=0\n    for i in str(num):\n        sum1+=int(i)\n        sum2+=sum1\n    if sum1>sum2:\n        return sum1\n    else:\n        return sum2\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(number):\n    if number < 10:\n        return number\n    s = 0\n    while(number):\n        s += number % 10\n        number //= 10\n    return s\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    num1 = sum(map(int, str(num)))\n    num2 = sum(map(int, str(num * 2)))\n    return max(num1,num2)\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    n1 = n%10\n    n = n/10\n    n2 = n%10\n    n = n/10\n    n3 = n%10\n    n = n/10\n    n4 = n%10\n    n = n/10\n    n5 = n%10\n    n = n/10\n    n6 = n%10\n    n = n/10\n    n7 = n%10\n    n = n/10\n    n8 = n%10\n    n = n/10\n    n9 = n%10\n    n10 = n%10\n    n11 = n%10\n    n12 = n%10\n    n13 = n%10\n    n14 = n%10\n    n15 = n%10\n    n16 = n%10\n    n17 = n%10\n    n18 = n%10\n    n19 = n%10\n    n20 = n%10\n    n21 = n%10\n    n22 = n%10\n    n23 = n%10\n    n24 = n%10\n    n25 = n%10\n    n26 = n%10\n    n27 = n%10\n    n28 = n%10\n    n29 = n%10\n    n30 = n%10\n    n31 = n%10\n    n32 = n%10\n    n33 = n%10\n    n34 = n%10\n    n35 = n%10\n    n36 = n%10\n    n37 = n%10\n    n38 = n%10\n    n39 = n%10\n    n40 = n%10\n    n41 = n%10\n    n42 = n%10\n    n43 = n%10\n    n44 = n%10\n    n45 = n%10\n    n46 = n%10\n   ", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef sum_digits_twoparts(num):\n    def helper(num, parts, result, sum_sofar):\n        if num == 0:\n            if sum_sofar > result[0]:\n                result[0] = sum_sofar\n                parts[0] = deepcopy(parts_sofar)\n            return\n        if sum_sofar + num % 10 >= result[0]:\n            result[0] = sum_sofar + num % 10\n            parts[0] = deepcopy(parts_sofar)\n        helper(num // 10, parts, result, sum_sofar + num % 10)\n\n    result = [0]\n    parts = defaultdict(list)\n    helper(num, parts, result, 0)\n    return result[0], parts[result[0]]\n\n\ndef test_sum_digits_twoparts():\n    assert sum_digits_twoparts(35) == (17, [5, 2])\n\n\ndef test_sum_digits_twoparts_zero():\n    assert sum_digits_twoparts(0) == (0, [])", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    count = 0\n    while n:\n        n, r = divmod(n, 10)\n        count += r\n    return count\n\n# assert sum_digits_twoparts(35)==17\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    x = y = 0\n    while num > 0:\n        digit = num % 10\n        x += digit\n        y += 9 - digit\n        num //= 10\n    return max(x, y)\n\n\n# Sum of 3 numbers: 1 + 2 + 3 = 6\n# Sum of 4 numbers: 1 + 2 + 3 + 4 = 10\n#\n# The sum of all possible sums is: 6 + 10 = 16\n#\n# The sum of 10 numbers is 55, thus the maximum sum is 16\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(nums: List[int], k: int) -> int:\n    def _longest_subseq_with_diff_one(nums: List[int], current_k: int, start: int, end: int) -> int:\n        if end - start == 1:\n            return 1 if abs(nums[start] - nums[end]) == k else 0\n        if current_k == 0:\n            return 0\n\n        if nums[start] + k == nums[end]:\n            return _longest_subseq_with_diff_one(nums, current_k - 1, start + 1, end) + 1\n\n        if nums[start] - k == nums[end]:\n            return _longest_subseq_with_diff_one(nums, current_k - 1, start + 1, end) + 1\n\n        return max(\n            _longest_subseq_with_diff_one(nums, current_k, start + 1, end),\n            _longest_subseq_with_diff_one(nums, current_k, start, end - 1),\n        )\n\n    return _longest_subseq_with_diff_one(nums, k, 0, len(nums) - 1)\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, k):\n    if k<0:\n        return -1\n    if len(arr) < 2:\n        return 0\n    if k == 0:\n        return 1\n    max_l = 0\n    dp = [[0 for i in range(k+1)] for j in range(len(arr))]\n    for i in range(len(arr)):\n        dp[i][0] = 1\n    for i in range(1, k+1):\n        for j in range(len(arr)):\n            if arr[j] <= i:\n                dp[j][i] = dp[j-1][i]\n            else:\n                dp[j][i] = max(dp[j-1][i], dp[j-1][i-arr[j]]+1)\n                max_l = max(max_l, dp[j][i])\n    return max_l\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(arr: List[int], diff: int) -> int:\n    max_count = 0\n    for i in range(len(arr)):\n        count = 1\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] != diff:\n                break\n            count += 1\n        max_count = max(max_count, count)\n    return max_count\n\n\ndef test_longest_subseq_with_diff_one():\n    arr = [1, 2, 3, 4, 5, 3, 2]\n    diff = 7\n    expected_max_count = 6\n    actual_max_count = longest_subseq_with_diff_one(arr, diff)\n    assert actual_max_count == expected_max_count\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n):\n    # Your code here\n    max_len = 0\n    dp = [1] * n\n    for i in range(1, n):\n        if arr[i] == arr[i-1] + 1:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 1\n        max_len = max(max_len, dp[i])\n    return max_len\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[j] - arr[i]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return 0\n    res, cnt = 1, 0\n    for i in range(len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            cnt += 1\n        else:\n            cnt = 0\n        res = max(res, cnt + 1)\n    return res\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 3, 2]\n    k = 7\n    print(longest_subseq_with_diff_one(arr, k))\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, k):\n    \"\"\"\n    Time Complexity: O(nlogn)\n    \"\"\"\n    arr.sort()\n    res = 0\n    diff = 1\n    curr_sum = 0\n    index = 0\n    while index < len(arr):\n        if curr_sum + arr[index] - 1 <= k:\n            curr_sum += arr[index]\n            res += 1\n        else:\n            diff += 1\n            curr_sum = arr[index]\n            res = 1\n        index += 1\n    return res\n\n\n# Test cases", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(seq, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [0] * n\n    dp[0] = 1\n    seq_set = set(seq)\n\n    for i in range(1, n):\n        for j in range(i-1, -1, -1):\n            if seq[j] + 1 == seq[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    result = max(dp)\n\n    for i in range(len(seq)):\n        if dp[i] == result:\n            if seq[i] - 1 in seq_set:\n                result -= 1\n\n    return result\n\n\ndef longest_subseq_with_diff_one_optimized(seq, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [0] * n\n    dp[0] = 1\n    seq_set = set(seq)\n\n    for i in range(1, n):\n        for j in range(i-1, -1, -1):\n            if seq[j] + 1 == seq[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    for i in range(len(seq)):\n        if dp[i] == max(dp):\n            if seq[i] - 1 in seq_set:\n                return dp[i] - 1\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, sum):\n\n    # dp[i] = length of the longest subsequence of arr[:i]\n\n    dp = [1] * len(arr)\n    max_len = 1\n\n    for i in range(1, len(arr)):\n\n        for j in range(i - 1, -1, -1):\n\n            if arr[i] - arr[j] == 1 and sum - arr[j] >= 0:\n\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_len = max(max_len, dp[i])\n\n    return max_len\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(array: List[int], k: int) -> int:\n    max_len = 0\n    for i in range(len(array)):\n        if i > 0 and array[i] == array[i - 1]:\n            continue\n        for j in range(i + 1, len(array)):\n            if j > i + 1 and array[j] == array[j - 1]:\n                continue\n            diff = abs(array[i] - array[j])\n            if diff > k:\n                break\n            if diff == k:\n                max_len = max(max_len, j - i + 1)\n            else:\n                max_len = max(max_len, 1)\n    return max_len\n\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n#User function Template for python3\n\n#User function code goes here\ndef does_Contain_B(first,last,B):\n    if(first<last):\n        if(B>=(first+last)/2):\n            return does_Contain_B(first,(first+last)/2,B) or does_Contain_B((first+last)/2,last,B)\n        else:\n            return does_Contain_B(first,(first+last)/2,B) or does_Contain_B((first+last)/2,last,B)\n    return first==B or last==B\n\n\n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(A,B,N):\n    if (A==B):\n        return True\n    else:\n        if (A<B):\n            A = A + 1\n        else:\n            B = B - 1\n        return does_Contain_B(A,B,N)\n\ndef test():\n    assert(does_Contain_B(1,7,3)==True)\n\ntest()", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(start_index, end_index, B):\n    if B > end_index:\n        return False\n    for i in range(start_index, end_index + 1):\n        if B == i:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(n, a, b):\n    temp = a\n    while a != n:\n        temp = temp + a\n        a = temp\n        temp = temp + b\n        b = temp\n    if a == n:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n#infinite sequence\nL = [1,2,3,4,5,6,7]\n\ndef does_Contain_B(A,B,C):\n\tfor i in L:\n\t\tif (i == B) and ((i + C) == A):\n\t\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(A,N,B):\n    i = 0\n    while(A<=N):\n        if(i == B):\n            return True\n        i+=1\n    return False\n    ", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(x,a,b):\n    sum = a + b\n    while sum<x:\n        sum = sum + b\n    if sum == x:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    a_new = a\n    b_new = b\n    c_new = c\n    sum_number = 0\n    while True:\n        if a_new == 0 and b_new == 0 and c_new == 0:\n            break\n        sum_number = a_new + b_new + c_new\n        if sum_number == 100:\n            return True\n        else:\n            if sum_number < 100:\n                a_new += 1\n                b_new += 1\n                c_new += 1\n            else:\n                if sum_number >= 100:\n                    a_new += 1\n                    b_new += 1\n                    c_new = 0\n                else:\n                    if sum_number < 50:\n                        a_new += 1\n                        b_new = 0\n                        c_new += 1\n                    else:\n                        if sum_number >= 50:\n                            a_new = 0\n                            b_new += 1\n                            c_new += 1\n                        else:\n                            if sum_number < 20:\n                                a_new += 1\n                                b_new = 0\n                                c_new = 0\n                            else:\n                                if sum_number >= 20:\n                                    a_new = 0\n                                    b_new += 1\n                                    c_new = 0\n    return False", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,n):\n    a1=b\n    a2=n\n    b1=1\n    b2=1\n    while True:\n        if a1<=a2 and b1<=b2:\n            if a1==b1:\n                return True\n            else:\n                a1=a1+b1\n                b1=b1+b2\n        else:\n            return False\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    if a == 1 or b == 1:\n        return True\n    for i in range(2,a):\n        if (a % i == 0) and (b % i == 0):\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    return True if ((a % b) == 0) else False\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if gcd(a,b)==1:\n        return True\n    else:\n        return False\n\ndef gcd(a,b):\n    if b==0:\n        return a\n    return gcd(b,a%b)\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if(a%b == 0):\n        return False\n    elif(b%a == 0):\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\nfrom math import sqrt\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef is_coprime(a, b):\n    if a == 0 or b == 0:\n        return False\n    return gcd(a, b) == 1\n\n\ndef is_coprime_1(a, b):\n    \"\"\"\n    An efficient solution to check whether two numbers are coprime or not.\n    \"\"\"\n    if a == 1 or b == 1:\n        return True\n    if a == 0 or b == 0:\n        return False\n    if a > b:\n        return is_coprime_1(b, a)\n    if a % 2 == 0 and b % 2 == 0:\n        return False\n    i = 3\n    while i <= int(sqrt(a)):\n        if a % i == 0 and b % i == 0:\n            return False\n        i = i + 2\n    return True\n\n\ndef main():\n    assert is_coprime(17, 13) is True\n    assert is_coprime(101, 127) is True\n    assert is_coprime(99, 101) is False\n    assert is_coprime_1(17, 13) is True\n    assert is_coprime_1(101, 127) is True\n    assert is_coprime_1(99, 101) is False\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n\tif a < b:\n\t\ttemp = a\n\t\ta = b\n\t\tb = temp\n\telif a == b:\n\t\treturn False\n\tfor i in range(2,b):\n\t\tif b%i == 0:\n\t\t\treturn False\n\t\telif a%i == 0:\n\t\t\treturn False\n\treturn True\n\ndef gcd(a,b):\n\tif a < b:\n\t\ttemp = a\n\t\ta = b\n\t\tb = temp\n\twhile(b):\n\t\ta = a%b\n\t\tb = b%a\n\treturn a\n\ndef lcm(a,b):\n\treturn (a*b)//gcd(a,b)\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    while a % b != 0:\n        a,b=b,a%b\n    return b == 1\n\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(num1, num2):\n    if num1 == 0:\n        return False\n    if num2 == 0:\n        return False\n    if num1 < 0 or num2 < 0:\n        return False\n    for i in range(2,num1 + 1):\n        if num1%i == 0 and num2%i == 0:\n            return False\n    return True\n\n\ndef test_is_coprime():\n    assert is_coprime(17, 13) is True\n    assert is_coprime(17, 11) is False\n    assert is_coprime(23, 3) is True\n    assert is_coprime(1, 1) is True\n    assert is_coprime(2, 2) is True\n    assert is_coprime(1, 2) is False\n    assert is_coprime(1, 3) is False\n    assert is_coprime(2, 3) is True\n    assert is_coprime(4, 5) is False\n    assert is_coprime(4, 7) is True", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(x, y):\n\t\"\"\"\n    Input: two positive integers\n    Output: boolean\n    \"\"\"\n\tif x == 1 or y == 1:\n\t\treturn True\n\telse:\n\t\tif gcd(x, y) == 1:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\n\ndef gcd(x, y):\n\twhile y:\n\t\tx, y = y, x%y\n\treturn x\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(n1,n2):\n    if n1 == 1 or n2 == 1:\n        return False\n    if n1 == 0 or n2 == 0:\n        return True\n    elif n1 == n2:\n        return False\n    elif n1 > n2:\n        return is_coprime(n2, n1)\n    elif n1 < n2:\n        return is_coprime(n1, n2)\n    else:\n        return False\n\ndef test_is_coprime():\n    assert is_coprime(17,13) == True\n    assert is_coprime(17,25) == False\n    assert is_coprime(2,0) == True\n    assert is_coprime(0,0) == True\n    assert is_coprime(2,3) == False\n\ntest_is_coprime()"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom typing import List\n\n\ndef merge_sort(a: List[int]) -> List[int]:\n    if len(a) <= 1:\n        return a\n    mid = len(a) // 2\n    left = merge_sort(a[:mid])\n    right = merge_sort(a[mid:])\n    return merge(left, right)\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    l = r = 0\n    result = []\n    while l < len(left) and r < len(right):\n        if left[l] < right[r]:\n            result.append(left[l])\n            l += 1\n        else:\n            result.append(right[r])\n            r += 1\n    result.extend(left[l:])\n    result.extend(right[r:])\n    return result\n\n\ndef main() -> None:\n    array = [3, 4, 2, 6, 5, 7, 1, 9]\n    result = merge_sort(array)\n    print(result)\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) < 2:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    arr = []\n    while left and right:\n        if left[0] <= right[0]:\n            arr.append(left.pop(0))\n        else:\n            arr.append(right.pop(0))\n    arr += left + right\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n        merge_sort(left_arr)\n        merge_sort(right_arr)\n        i = j = k = 0\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] < right_arr[j]:\n                arr[k] = left_arr[i]\n                i += 1\n            else:\n                arr[k] = right_arr[j]\n                j += 1\n            k += 1\n        while i < len(left_arr):\n            arr[k] = left_arr[i]\n            i += 1\n            k += 1\n        while j < len(right_arr):\n            arr[k] = right_arr[j]\n            j += 1\n            k += 1\n    return arr\n\n\ndef merge_sort_inplace(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n        merge_sort_inplace(left_arr)\n        merge_sort_inplace(right_arr)\n        i = j = k = 0\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] < right_arr[j]:\n                arr[k] = left_arr[i]\n                i += 1\n            else:\n                arr[k] = right_arr[j]\n                j += 1\n            k += 1\n        while i < len(left_arr):\n            arr[k] = left_arr[i]\n            i += 1\n            k += 1\n        while j < len(right_arr):\n            arr[k] = right_arr[j]\n            j += 1\n            k += 1\n    return arr\n\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) == 1:\n        return arr\n\n    middle = len(arr)//2\n    left = merge_sort(arr[:middle])\n    right = merge_sort(arr[middle:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n\n    result.extend(left)\n    result.extend(right)\n\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(lst):\n  n = len(lst)\n  if n == 1:\n    return lst\n  else:\n    mid = n//2\n    lst_left = merge_sort(lst[:mid])\n    lst_right = merge_sort(lst[mid:])\n\n    return merge(lst_left, lst_right)\n\n\ndef merge(lst_left, lst_right):\n  i = 0\n  j = 0\n  result = []\n  while i < len(lst_left) and j < len(lst_right):\n    if lst_left[i] < lst_right[j]:\n      result.append(lst_left[i])\n      i += 1\n    else:\n      result.append(lst_right[j])\n      j += 1\n\n  result += lst_left[i:]\n  result += lst_right[j:]\n  return result\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(nums):\n\n    if len(nums) <= 1:\n        return nums\n\n    mid = len(nums) // 2\n    left = merge_sort(nums[:mid])\n    right = merge_sort(nums[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n\n    result = []\n    i, j = 0, 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    return result + left[i:] + right[j:]\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n    return arr", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) == 1:\n        return arr\n    else:\n        half = len(arr)//2\n        left = merge_sort(arr[:half])\n        right = merge_sort(arr[half:])\n        return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\nfrom typing import List\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"\n    Sorts the left and right lists and merges them together\n    \"\"\"\n    result: List[int] = []\n    left_index: int = 0\n    right_index: int = 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n    result += left[left_index:]\n    result += right[right_index:]\n    return result\n\n\ndef merge_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Sorts the array by using merge sort\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    left: List[int] = arr[:len(arr) // 2]\n    right: List[int] = arr[len(arr) // 2:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\nimport math\n\n\ndef merge(left, right):\n    result = []\n    l, r = 0, 0\n    while l < len(left) and r < len(right):\n        if left[l] < right[r]:\n            result.append(left[l])\n            l += 1\n        else:\n            result.append(right[r])\n            r += 1\n    result.extend(left[l:])\n    result.extend(right[r:])\n    return result\n\n\ndef merge_sort(lst):\n    if len(lst) <= 1:\n        return lst\n    mid = math.floor(len(lst) / 2)\n    left = merge_sort(lst[:mid])\n    right = merge_sort(lst[mid:])\n    return merge(left, right)\n\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    # Remember the vertex of a parabola in the form (h, k) is:\n    # h = -b/(2a)\n    # k = -d/(4a)\n    # where d = b**2 - 4ac\n    return (-b/(2*a), -((b**2) - (4*a*c))/(4*a))\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef parabola_vertex(a: float, b: float, c: float) -> Tuple[float, float]:\n    # return a, b / 2\n    # return (-b / 2 * (-1), -b / 4 * (-1)**2 - a / 2 * (-1))\n    return (-b / 2 * (-1), -b / 4 * (-1) ** 2 + a / 4 * (-1) ** 2)\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    D = b ** 2 - 4 * a * c\n    return ((-b + D ** 0.5) / (2 * a), (-b - D ** 0.5) / (2 * a))\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    vertex_x = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n    vertex_y = a*vertex_x**2 + b*vertex_x + c\n    return vertex_x, vertex_y\n\na = 5\nb = 3\nc = 2\nparabola_vertex(a, b, c)\n\n#%%\n\n\ndef plot_parabola(a, b, c, xlim=[-5,5], ylim=[-5,5]):\n    x = np.linspace(xlim[0], xlim[1], 1000)\n    y = a*x**2 + b*x + c\n    plt.plot(x, y)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    \"\"\"returns the x- and y-coordinates of the parabola vertex\"\"\"\n    try:\n        return (-b/(2*a), -c/(2*a**2))\n    except ZeroDivisionError:\n        return (\"none\")\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\nimport math\ndef parabola_vertex(a, b, c):\n    x = ((-b) + math.sqrt(b**2 - 4*a*c))/2*a\n    y = ((-b) - math.sqrt(b**2 - 4*a*c))/2*a\n    return x, y\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nfrom math import sqrt\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Function to find the vertex of a parabola given by\n    equation ax**2 + bx + c = 0\n    \"\"\"\n    # First, we need to solve for x\n    # Therefore we take the derivate of the equation and set it to zero\n    # dx/dx = 2ax + b\n    # 2ax + b = 0\n    # ax = -b/2a\n    # x = -b/2a\n\n    # then we substitute x in the equation\n    # ax**2 + bx + c = 0\n    # a(-b/2a)**2 + b(-b/2a) + c = 0\n    # a(-b**2)/(4a**2) + b(-b)/(2a) + c = 0\n    # a(-b**2)/(4a**2) - b**2/(4a**2) + c = 0\n    # c = a(-b**2)/(4a**2) - b**2/(4a**2)\n    # c = (b**2 - 4ac)/(4a**2)\n    return -b/(2*a), (b**2 - 4*a*c)/(4*a**2)\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Function to find the focus of a parabola given by\n    equation ax**2 + bx + c = 0\n    \"\"\"\n    # First, we need to solve for x\n    # Therefore we take the derivate of the equation and set it to zero\n    # dx/dx = 2ax + b\n    # 2ax + b = 0\n    # ax = -b/2a\n    # x = -b/2a\n\n    # then we substitute x in the equation\n    # ax**2 + bx + c = 0\n    # a(-b/2a)**2 + b(-b/2a) + c = 0\n    # a(-b**2)/(4a**2) + b(-b)/(2a) + c = 0\n    # a(-b**2)/(4", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nimport math\n\ndef parabola_vertex(a, b, c):\n    D = b * b - 4 * a * c\n\n    if D < 0:\n        return None\n\n    x1 = (-b + math.sqrt(D)) / (2 * a)\n    x2 = (-b - math.sqrt(D)) / (2 * a)\n\n    return (x1, x2)\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a, b, c):\n    return (-b/(2*a), ((-b)**2 - 4*a*c) / (4*a))\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    return ((-b/(2*a)), (-c/(b**2)))\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_of_lists,element):\n    return [row[element] for row in list_of_lists]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(arr, index):\n    # Write your code here.\n    return [arr[x][index] for x in range(len(arr))]\n\n#Example\narr = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n# first method\ndef specified_element(list, index):\n    return [[i[index] for i in list] for i in list]\n\n# second method\ndef specified_element2(list, index):\n    return [row[index] for row in list]\n\n#third method\ndef specified_element3(list, index):\n    return [row[index] for row in list]\n\n# fourth method\ndef specified_element4(list, index):\n    return [x[index] for x in list]", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(array,index):\n\tif len(array[0])<index+1:\n\t\treturn 'Index out of bounds'\n\treturn [element[index] for element in array]\n\t", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(two_d_list, element):\n    result = []\n    for i in two_d_list:\n        if element in i:\n            result.append(i[element])\n    return result\n\n# test", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l,element):\n    element_list=[]\n    for row in l:\n        for item in row:\n            if item==element:\n                element_list.append(row)\n    return element_list", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst,element):\n    l=[]\n    for i in range(len(lst)):\n        l.append(lst[i][element])\n    return l\n\n# input_lst= [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\n# element=0\n# print(specified_element(input_lst,element))\n# assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(A,x):\n    res=[]\n    for i in range(len(A)):\n        for j in range(len(A[i])):\n            if A[i][j]==x:\n                res.append(A[i][j])\n    return res", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(mat,column):\n    return [row[column] for row in mat]\n\n\ndef main():\n    mat = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\n    print(specified_element(mat,0))\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list, element):\n    \"\"\"\n    Takes in a list and an element to return every element from the list that has the element.\n    :param list: a 2D list to iterate through.\n    :param element: the element to return every element with.\n    :return: a 1D list with all elements that contain the element.\n    \"\"\"\n    return [row[element] for row in list]\n\n\ndef test_specified_element():\n    \"\"\"\n    Test case for specified_element\n    \"\"\"\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0) == [1, 4, 7]\n\n\ndef test_specified_element_empty_list():\n    \"\"\"\n    Test case for specified_element with an empty list\n    \"\"\"\n    assert specified_element([], 0) == []\n\n\ndef test_specified_element_no_element():\n    \"\"\"\n    Test case for specified_element with no element in the list\n    \"\"\"\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1) == []\n\n\ndef test_specified_element_list_one_element():\n    \"\"\"\n    Test case for specified_element with a list with one element\n    \"\"\"\n    assert specified_element([[1]], 0) == [1]\n\n\ndef test_specified_element_list_one_element_no_element():\n    \"\"\"\n    Test case for specified_element with a list with one element and no element\n    \"\"\"\n    assert specified_element([[1]], 1) == []"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n#\n# Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 0\n#\n# def even_bit_toggle_number(num):\n#     \"\"\"\n#     Function to toggle all even bits of a given number.\n#     :param num: int\n#     :return: int\n#     \"\"\"\n#     return num\n#\n# #\n# assert even_bit_toggle_number(10) == 0\n# print(\"All even bits are toggled.\")\n\ndef even_bit_toggle_number(num):\n    \"\"\"\n    Function to toggle all even bits of a given number.\n    :param num: int\n    :return: int\n    \"\"\"\n    num = num & ~1\n    return num\n\n#\n# assert even_bit_toggle_number(10) == 0\n# print(\"All even bits are toggled.\")\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    This function will take in a number and flip all the bits where the index is an even number.\n\n    :param number: an integer\n    :return: number with flipped bits\n    \"\"\"\n\n    return number ^ (1 << 1) ^ (1 << 3) ^ (1 << 5) ^ (1 << 7) ^ (1 << 9) ^ (1 << 11) ^ (1 << 13) ^ (1 << 15)\n\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 0", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# Python program to toggle all even bits of a given number\ndef even_bit_toggle_number(num):\n    return num^(num>>1)\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return (num ^ (num & -num)) - num\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    # TOGGLE EVERY EVEN BIT\n    number = number & (number - 1)\n    return number", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    number = bin(number)\n    l = len(number)\n    for i in range(l):\n        if number[i] == \"0\":\n            number = number[:i] + \"1\" + number[i+1:]\n        else:\n            number = number[:i] + \"0\" + number[i+1:]\n    return int(number, 2)\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    number_list = list(bin(number))\n    #print(number_list)\n    if number_list[1] == '1':\n        number_list[1] = '0'\n    else:\n        number_list[1] = '1'\n    #print(number_list)\n    return int(''.join(number_list), 2)\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num: int) -> int:\n  if num == 0:\n    return 0\n  \n  num_list = [i for i in bin(num)[2:]]\n  num_list = num_list[::-1]\n  \n  result = []\n  for i in num_list:\n    if i == '0':\n      result.append('1')\n    else:\n      result.append('0')\n  \n  return int(''.join(result), 2)\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# Write your code here\ndef even_bit_toggle_number(num):\n    num = ~num + 1\n    return num\n\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return n ^ (n >> 1)\n\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(data):\n    return tuple(map(tuple, map(map_str_int, data)))\n\n\n# tuple_int_str((('333', '33'), ('1416', '55')))\n# # 333, 33\n# # 1416, 55\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(my_tuple):\n    result = tuple()\n    for x in my_tuple:\n        result = result + (int(x[0]), int(x[1]),)\n    return result\n\n\ndef test_tuple_int_str():\n    assert tuple_int_str((('333', '33'), ('1416', '55'))) == ((333, 33), (1416, 55))\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n# you can use a list comprehension, but it's not necessary.\n# just a very clever way of looping through a tuple and collecting the ints\ndef tuple_int_str(aTuple):\n    newTuple = []\n    for tup in aTuple:\n        newTuple.append((int(tup[0]), int(tup[1])))\n    return tuple(newTuple)", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tup):\n    new_tup = []\n    for i in tup:\n        new_tup.append(tuple(int(j) for j in i))\n    return new_tup\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple([tuple([int(x) for x in y]) for y in tup])\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tup):\n    \"\"\"Return a tuple with the values converted from strings to integers.\"\"\"\n    return [(int(i[0]), int(i[1])) for i in tup]\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    new = []\n    for i in tup:\n        new.append((int(i[0]), int(i[1])))\n    return new\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(s):\n    s = list(s)\n    for i in range(0, len(s)):\n        s[i] = (int(s[i][0]), int(s[i][1]))\n    return tuple(s)\n\n# assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(t):\n    #t = tuple([(int(a[0]), int(a[1])) for a in t])\n    t = tuple((int(a[0]), int(a[1])) for a in t)\n    return t\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(value):\n    # Write your code here\n    return tuple(tuple(int(x) for x in y) for y in value)\n\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(L):\n    res = []\n    for v in L:\n        if v == res[-1][0]:\n            res[-1][0] += 1\n        else:\n            res.append([1,v])\n    return res\n\ndef decode_list(L):\n    return [v * l for (l,v) in L]", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\nimport operator\nfrom collections import Counter\n\ndef encode_list(my_list):\n    encoded_list = []\n    for element in my_list:\n        #print(element)\n        if element == element:\n            encoded_list.append([1, element])\n        else:\n            my_dict = {}\n            for key in element.keys():\n                my_dict[key] = element[key]\n            counter_dict = Counter(my_dict)\n            for key in counter_dict:\n                #print(counter_dict[key])\n                encoded_list.append([counter_dict[key], key])\n    return encoded_list\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(array):\n    result = []\n    current_list = [array[0]]\n    for i in range(1, len(array)):\n        if array[i] == current_list[i-1]:\n            current_list.append(array[i])\n        else:\n            result.append(current_list)\n            current_list = [array[i]]\n    result.append(current_list)\n    return result\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lst):\n    l = []\n    for i in lst:\n        if i in l:\n            j = l.index(i)\n            l[j][0] += 1\n        else:\n            l.append([1, i])\n    return l\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(l):\n    return [encode_list_helper(l, i) for i in range(len(l))]\n\ndef encode_list_helper(l, i):\n    if i == len(l)-1:\n        return [1, l[i]]\n    if l[i] == l[i+1]:\n        return [1, l[i]] + encode_list_helper(l, i+1)\n    return [1, l[i]] + [1] + encode_list_helper(l, i+1)\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\nimport math\n\ndef encode_list(list):\n    # your code here\n    return list\n\ndef test_encode_list():\n    assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\ntest_encode_list()\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lst):\n    return [x for x in lst]\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(l):\n    \"\"\"Return a list of run-lengths of the elements in l.\"\"\"\n    # Your Code Here\n    res = []\n    temp = []\n    count = 1\n    for i in range(len(l)):\n        if i+1 < len(l) and l[i]==l[i+1]:\n            count += 1\n        else:\n            temp.append(count)\n            temp.append(l[i])\n            res.append(temp)\n            temp = []\n            count = 1\n    if temp:\n        res.append(temp)\n    return res\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(l):\n  output = []\n  if l == []:\n    return l\n  else:\n    previous = l[0]\n    count = 0\n    for item in l:\n      if item != previous:\n        if count != 0:\n          output.append([count,previous])\n        count = 1\n        previous = item\n      else:\n        count += 1\n    output.append([count,previous])\n    return output\n  ", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(l):\n  new_l=[]\n  prev=l[0]\n  count=1\n  for i in range(1,len(l)):\n    if l[i] == prev:\n      count += 1\n    else:\n      new_l.append([count,prev])\n      prev = l[i]\n      count=1\n  new_l.append([count,prev])\n  return new_l"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, n):\n    if k == n:\n        return 0\n    arr.sort()\n    arr1 = []\n    for i in arr:\n        arr1.append(i)\n    index = 0\n    while index < len(arr):\n        count = 0\n        for i in range(index,len(arr)):\n            if arr1[i] != arr1[index]:\n                break\n            count += 1\n        if count == 1:\n            index += 1\n            continue\n        if count == 2:\n            arr1[index] = arr1[index]+arr1[index+1]\n            del arr1[index+1]\n        if count > 2:\n            arr1[index] = arr1[index]+arr1[index+1]\n            del arr1[index+1]\n            count -= 1\n            while count > 1:\n                arr1[index] = arr1[index]+arr1[index+1]\n                del arr1[index+1]\n                count -= 1\n        index += 1\n    for i in range(len(arr1)):\n        if arr1[i] == k:\n            return 0\n    return 1\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, n):\n    ans = 0\n    for i in range(n):\n        temp = arr[i]\n        arr[i] = 0\n        x = arr.count(0)\n        if x == k:\n            ans += 1\n        arr[i] = temp\n    return ans\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, n, k):\n    operations = 0\n    for i in range(n):\n        operations += min(arr[i], k - arr[i])\n    return operations\n\ndef test_min_Ops():\n    assert min_Ops([2,2,2,2],4,3) == 0\n    assert min_Ops([2,2,2,2],4,3) == 0\n    assert min_Ops([1,3,2,3,1],5,3) == 1\n    assert min_Ops([1,2,3,4],4,2) == 0\n    assert min_Ops([2,2,2,2],4,3) == 0\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,n,k):\n    i=0\n    j=0\n    c=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                c+=1\n                arr[i],arr[j]=arr[j],arr[i]\n                if k==0:\n                    return c\n                k-=1\n    return c\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n# List Comprehension\ndef min_Ops(nums,k,n):\n\treturn min(x-1 for x in nums if x-1 in nums)\n\n# def min_Ops(nums,k,n):\n# \tcount = 0\n# \tfor i in nums:\n# \t\tif nums.count(i) != 1:\n# \t\t\tcount += 1\n# \treturn count", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(A, k, M):\n  ops = 0\n  for i in range(M):\n    val = A[i]\n    A[i] = M\n    for j in range(i + 1, M):\n      if A[j] == val:\n        A[j] = M\n        k -= 1\n        if k == 0:\n          return ops\n        ops += 1\n    A[i] = val\n\n  return ops\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n# this is the recursive solution\n# complexity is O(n)\ndef min_Ops(a,k,n):\n    if n == 1:\n        if a[0] >= k:\n            return 0\n        else:\n            return k - a[0]\n    elif n == 2:\n        if a[0] != a[1]:\n            return min_Ops(a[1:],k,n) + min_Ops(a[:1],k,n)\n        else:\n            return 0\n    else:\n        if a[0] != a[1] and a[0] != a[2]:\n            return min_Ops(a[1:],k,n) + min_Ops(a[:1],k,n)\n        elif a[0] != a[1] and a[0] == a[2]:\n            return min_Ops(a[1:],k,n) + min_Ops(a[:2],k,n) - 1\n        else:\n            return min_Ops(a[1:],k,n) + min_Ops(a[:2],k,n)\n            ", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,n):\n    if k > n*(n-1)/2:\n        return k-n*(n-1)/2\n    else:\n        return k\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n# example 1:\n# [2,2,2,2]\n# 4\n# 3\n# \n# 2^2 + 2^2 + 2^2 = 12\n# 12 % 3 = 0\n# [2,2,2,2]\n\n# example 2:\n# [1,2,3,4]\n# 5\n# 2\n# \n# 1^2 + 2^2 + 3^2 + 4^2 = 30\n# 30 % 2 = 0\n# [1,2,3,4]\n\n\n# example 3:\n# [1,1,1,1]\n# 4\n# 1\n# \n# 1^2 + 1^2 + 1^2 + 1^2 = 16\n# 16 % 1 = 0\n# [1,1,1,1]\n\n\n# example 4:\n# [3,3,3,3]\n# 5\n# 3\n# \n# 3^2 + 3^2 + 3^2 + 3^2 = 48\n# 48 % 3 = 2\n# [2,2,2,2]\n\n# def min_Ops(arr,k,a):\n# \tcount = 0\n# \tnew_arr = [0]*len(arr)\n# \tfor i in range(len(arr)):\n# \t\tnew_arr[i] = arr[i]**2 % a\n\n# \tfor i in range(len(new_arr)):\n# \t\t# print(new_arr)\n# \t\tif new_arr[i] >= k:\n# \t\t\tcount += k - new_arr[i]\n# \t\t\tnew_arr[i] = k\n# \tfor i in range(len(new_arr)):\n# \t\tif new_arr[i] < k:\n# \t\t\tcount += k -", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,i):\n    if len(arr) == 1:\n        return 0\n    if i == 0:\n        return 1e9\n    if arr[0] != arr[i]:\n        if arr[0] > arr[i]:\n            return min_Ops(arr[1:],k,i-1) + 1\n        else:\n            return min_Ops(arr[1:],k,i-1) + 1\n    else:\n        return min_Ops(arr[1:],k-1,i)\n\n\ndef min_Ops2(arr,k):\n    if len(arr) == 1:\n        return 0\n    if arr[0] == arr[1]:\n        return min_Ops2(arr[2:],k)\n    else:\n        return min_Ops2(arr[2:],k)+1\n"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month == 'January':\n        if day <= 18:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'February':\n        return 'winter'\n    elif month == 'March':\n        return 'spring'\n    elif month == 'April':\n        return 'spring'\n    elif month == 'May':\n        return 'summer'\n    elif month == 'June':\n        return 'summer'\n    elif month == 'July':\n        return 'summer'\n    elif month == 'August':\n        return 'autumn'\n    elif month == 'September':\n        return 'autumn'\n    elif month == 'October':\n        return 'autumn'\n    elif month == 'November':\n        return 'winter'\n    elif month == 'December':\n        return 'winter'\n    else:\n        return 'Error'\n\n#assert month_season('April', 29) == ('summer')\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month == 'March' or month == 'April' or month == 'May':\n        return ('Spring')\n    elif month == 'June' or month == 'July' or month == 'August':\n        return ('Summer')\n    elif month == 'September' or month == 'October' or month == 'November':\n        return ('Fall')\n    elif month == 'December' or month == 'January' or month == 'February':\n        return ('Winter')\n    else:\n        return ('Invalid')", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    if month == 'January':\n        if day < 18:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'February':\n        if day < 18:\n            return 'winter'\n        else:\n            return 'summer'\n    elif month == 'March':\n        if day < 18:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'April':\n        return 'spring'\n    elif month == 'May':\n        return 'summer'\n    elif month == 'June':\n        return 'summer'\n    elif month == 'July':\n        return 'summer'\n    elif month == 'August':\n        return 'summer'\n    elif month == 'September':\n        return 'fall'\n    elif month == 'October':\n        return 'fall'\n    elif month == 'November':\n        return 'fall'\n    elif month == 'December':\n        return 'winter'\n\n#print(month_season('January',4))\n#print(month_season('December',25))\n#print(month_season('January',18))\n#print(month_season('January',19))\n#print(month_season('February',18))\n#print(month_season('February',19))\n#print(month_season('March',18))\n#print(month_season('March',19))\n#print(month_season('April',18))\n#print(month_season('April',19))\n#print(month_season('May',18))\n#print(month_season('May',19))\n#print(month_season('June',18))\n#print(month_season('June',19))\n#print(month_season('July',18))\n#print(month_season('July',19))\n#print(month_season('August',18))\n#print(month_season('August',19))\n#print(month_season('September',18))\n#print(month_season('September',19))\n#print(month", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month.lower() in ['january','february','march']:\n        if day >= 19 and day <= 20:\n            return \"winter\"\n        if day >= 21 and day <= 30:\n            return \"spring\"\n    if month.lower() in ['april','may','june']:\n        if day >= 19 and day <= 20:\n            return \"summer\"\n        if day >= 21 and day <= 30:\n            return \"summer\"\n    if month.lower() in ['july','august','september']:\n        if day >= 19 and day <= 20:\n            return \"autumn\"\n        if day >= 21 and day <= 30:\n            return \"autumn\"\n    if month.lower() in ['october','november','december']:\n        if day >= 19 and day <= 20:\n            return \"winter\"\n        if day >= 21 and day <= 30:\n            return \"winter\"\n\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    if (month == \"January\") or (month == \"February\"):\n        return(\"winter\")\n    elif (month == \"March\") or (month == \"April\"):\n        return(\"spring\")\n    elif (month == \"May\") or (month == \"June\"):\n        return(\"summer\")\n    elif (month == \"July\") or (month == \"August\"):\n        return(\"autumn\")\n    elif (month == \"September\") or (month == \"October\"):\n        return(\"winter\")\n    elif (month == \"November\") or (month == \"December\"):\n        return(\"winter\")\n    else:\n        return \"Error: No such month or day exists\"\n    ", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\n#def month_season():\n    #return print(\"winter\")\n\n#month_season()\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    if month in ('January','February','March') and day<18:\n        return 'spring'\n    elif month in ('April','May','June') and day<21:\n        return 'summer'\n    elif month in ('July','August','September') and day<21:\n        return 'fall'\n    else:\n        return 'winter'\n\n#print(month_season('January',1))", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    if month == 'January' or month == 'February':\n        return 'winter'\n    elif month == 'March' or month == 'April':\n        return 'spring'\n    elif month == 'May' or month == 'June':\n        return 'summer'\n    elif month == 'July' or month == 'August':\n        return 'autumn'\n    elif month == 'September' or month == 'October':\n        return 'winter'\n\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if day>21 and day<31:\n        return ('winter')\n    elif day>10 and day<21:\n        return ('spring')\n    elif day>1 and day<11:\n        return ('summer')\n    elif day>22 and day<31:\n        return ('autumn')\n    else:\n        return ('winter')", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if month == months[0]:\n        return(\"winter\")\n    elif month == months[1]:\n        return(\"winter\")\n    elif month == months[2]:\n        return(\"spring\")\n    elif month == months[3]:\n        return(\"spring\")\n    elif month == months[4]:\n        return(\"summer\")\n    elif month == months[5]:\n        return(\"summer\")\n    elif month == months[6]:\n        return(\"summer\")\n    elif month == months[7]:\n        return(\"fall\")\n    elif month == months[8]:\n        return(\"fall\")\n    elif month == months[9]:\n        return(\"fall\")\n    elif month == months[10]:\n        return(\"winter\")\n    elif month == months[11]:\n        return(\"winter\")\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = (n-b)/a\n    y = n/b\n    return f\"x = {x}, y = {y}\"\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n\t\"\"\"\n\t:param a:\n\t:param b:\n\t:param n:\n\t:return:\n\t\"\"\"\n\t# solution 1: brute force\n\t# sol = {}\n\t# for x in range(n):\n\t# \tif n % x == 0:\n\t# \t\tsol[x] = n/x\n\t# \t\tsol[n/x] = x\n\t# for y in sol:\n\t# \tif a*y + b*x == n:\n\t# \t\treturn \"x = \", sol[y], \", y = \", sol[x]\n\t#\n\t# return \"x = \", 0, \", y = \", 0\n\t#\n\t# solution 2: with modulo\n\tx = 1\n\ty = 0\n\twhile a*x + b*y != n:\n\t\tx += 1\n\t\ty = n - a*x\n\treturn \"x = \", x, \", y = \", y\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = y = None\n    for i in range(n, 1, -1):\n        if n%i == 0:\n            x = n//i\n            y = i\n            break\n    return x, y\n\n# testing\na, b, n = 2, 3, 7", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nfrom utils import nCr\n\ndef solution(a, b, n):\n    for x in range(1, int(n / a) + 1):\n        y = nCr(a, b, x)\n        if y == n / a:\n            return 'x = %d, y = %d' % (x, y)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = (-1) * (n // a) if a > 0 else (-1) * ((-1) * n // a)\n    y = ((-1) * n % a) if a > 0 else ((-1) * n % (-1) * a)\n    return ('x = ', x, ', y = ', y)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = n / a\n    y = n / b\n    if x != int(x) or y != int(y):\n        return \"Impossible\"\n    else:\n        return \"x = \", x, \", y = \", y\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nfrom itertools import combinations\n\n\ndef solution(a, b, n):\n    x, y = 0, 0\n    for x_i, y_i in combinations(range(1, n + 1), 2):\n        if a * x_i + b * y_i == n:\n            return f\"x = {x_i}, y = {y_i}\"", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    if a == b:\n        return 'x = ', a, ', y = ', n/a\n    elif a > b:\n        return solution(b, a, n)\n    else:\n        return solution(a, b, n)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    import math\n    d = math.gcd(a, b)\n    x = n // a\n    if (n % a == 0) and (a % d == 0):\n        y = n // a\n        return('x = ', x, ', y = ', y)\n    elif (n % b == 0) and (b % d == 0):\n        y = n // b\n        return('x = ', x, ', y = ', y)\n    else:\n        raise ValueError('No solution for the equation exists.')\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a: int, b: int, n: int) -> tuple:\n    # Write your code here.\n    y = -(-n // a)\n    x = n - (a * y)\n    return (\"x = \", x, \", y = \", y)"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(l1,l2):\n  l1_new = []\n  for i in l1:\n    if i not in l2:\n      l1_new.append(i)\n  return l1_new\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\nfrom typing import List\ndef remove_elements(array_one:List[int], array_two:List[int]) -> List[int]:\n    for element in array_two:\n        array_one.remove(element)\n    return array_one\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    for i in list2:\n        try:\n            list1.remove(i)\n        except:\n            pass\n    return list1\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(L1,L2):\n    return list(set(L1).difference(set(L2)))\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(lst1,lst2):\n    return [x for x in lst1 if x not in lst2]\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    return list(set(list1) - set(list2))\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1,list2):\n    return list(filter(lambda x:x not in list2, list1))", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(a, b):\n    for x in b:\n        a.remove(x)\n    return a\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\n#Solution 1\ndef remove_elements(l1,l2):\n    for i in l2:\n        l1.remove(i)\n    return l1\n\n#Solution 2\ndef remove_elements(l1,l2):\n    l1 = [x for x in l1 if x not in l2]\n    return l1\n\n#Solution 3\ndef remove_elements(l1,l2):\n    return list(set(l1) - set(l2))\n\n#Test 1", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    new_list = []\n    for elem in list1:\n        if elem not in list2:\n            new_list.append(elem)\n    return new_list\n\ndef remove_elements_v2(list1, list2):\n    return list(filter(lambda x: x not in list2, list1))"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n,x=1):\n    if n <= x:\n        return n\n    else:\n        return sum_series(n-1,x) + n-x\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(x):\n    return sum(range(x + 1, 0, -2))\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    sum_of_series = 0\n    for i in range(1, n+1, 2):\n        sum_of_series += i\n    return sum_of_series\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    ans = 0\n    for i in range(n, 0, -2):\n        ans += i\n    return ans\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n\treturn sum([i for i in range(n,0,-2)])\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    sum = 0\n    for i in range(n):\n        sum += i + (n - 1 - i)\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n, x=2):\n    series = 0\n    if x % 2 == 0:\n        x = x - 2\n    else:\n        x = x - 1\n    while n > 0:\n        series += n\n        n -= x\n    return series\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    assert type(n)==int, \"n should be an integer.\"\n    if n < 0: raise ValueError\n    if n == 1: return 0\n    series = [n]\n    i = 2\n    while n > 0:\n        n -= i\n        series.append(n)\n        i += 2\n    return sum(series)", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n,x):\n    i=x\n    count=0\n    while n-i>0:\n        count+=n-i\n        i+=2\n    return count\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    series = n\n    while series > 0:\n        series -= 2\n        series += 1\n    return series\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    return n/2*s**2\n\n#test", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    a=s*s*math.sin(math.pi/n)\n    return a", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    return n*s**2/4\n\n# Test cases", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nimport math\ndef area_polygon(r,s):\n    return (s*r**2)/math.tan(math.pi/s)\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nimport math\ndef area_polygon(n,s):\n    return (n*s**2)/4\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,r):\n    \"\"\"\n    This function takes in two arguments, n which is the number of sides of the regular polygon and r which is the radius of the polygon.\n    The function then calculates the area of the regular polygon as A = n/2*r^2\n    \"\"\"\n    return ((n/2)*r**2)\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(sides, radius):\n    return (sides * radius * radius) / (4.0 * math.tan(math.pi / sides))\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    return (n*(s**2))/4\n\ndef test_area_polygon():\n    assert area_polygon(4,20)==400.00000000000006\n\ndef test_area_polygon_2():\n    assert area_polygon(5,20)==1000.0000000000002\n\ntest_area_polygon()\ntest_area_polygon_2()\n\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    \"\"\"\n    n: number of sides\n    s: side length\n    \"\"\"\n    return s*s*n/4\n\narea_polygon(3,10)```\n\n### Output:\n\n<empty_output>", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(num_sides,radius):\n    \"\"\"\n    calculate area of a polygon.\n    \"\"\"\n    return num_sides*radius**2/2.0\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n1, n2):\n  if n1 == n2:\n    return True\n  else:\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n1+1):\n      if n1%i == 0:\n        sum1 = sum1+i\n    for i in range(1,n2+1):\n      if n2%i == 0:\n        sum2 = sum2+i\n    if sum1 == sum2:\n      return True\n    else:\n      return False", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n, m):\n    i = 1\n    while n%i==0:\n        i = i+1\n    j = 1\n    while m%j==0:\n        j = j+1\n    return i+j == n+m\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(num1, num2):\n    divisors1 = set()\n    divisors2 = set()\n    for i in range(1,num1):\n        if num1 % i == 0:\n            divisors1.add(i)\n    for j in range(1,num2):\n        if num2 % j == 0:\n            divisors2.add(j)\n    return divisors1 == divisors2\n\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    divisors_a = sum(range(1, int(a ** 0.5) + 1) if a % x == 0 else 0 for x in range(2, a))\n    divisors_b = sum(range(1, int(b ** 0.5) + 1) if b % x == 0 else 0 for x in range(2, b))\n    return divisors_a == divisors_b\n\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(num1,num2):\n    sum1=0\n    sum2=0\n    for i in range(1,num1+1):\n        if(num1%i==0):\n            sum1+=i\n        if(num2%i==0):\n            sum2+=i\n    if(sum1==sum2):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n, k):\n    d1 = []\n    d2 = []\n    for i in range(1, int(n ** 0.5 + 1)):\n        if n % i == 0:\n            d1.append(i)\n            d1.append(n // i)\n\n    for i in range(1, int(k ** 0.5 + 1)):\n        if k % i == 0:\n            d2.append(i)\n            d2.append(k // i)\n\n    d1 = set(d1)\n    d2 = set(d2)\n    if len(d1) == len(d2):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    divisors_a = getDivisors(a)\n    divisors_b = getDivisors(b)\n    return (sum(divisors_a) == sum(divisors_b))\n\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sumDivisors(n):\n    sum = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            sum += i\n            sum += n // i\n    return sum\n\ndef areEquivalent(n1, n2):\n    return sumDivisors(n1) == sumDivisors(n2)\n\n#assert areEquivalent(36,57) == False", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1, num2):\n    s1 = sum(set(divisors(num1)))\n    s2 = sum(set(divisors(num2)))\n    return s1 == s2\n\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if ord(string[i]) in range(65, 91) or ord(string[i]) in range(97, 123):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(str):\n    num_char=0\n    for i in str:\n        if i in \"abcdefghijklmnopqrstuvwxyz\":\n            num_char+=1\n    return num_char\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(str):\n    from collections import Counter\n    a = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    count_dict = Counter(str.lower())\n    count_dict_copy = Counter(str.upper())\n    return sum([count_dict_copy[i] for i in a if i in count_dict])\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    \"\"\"\n    O(n) time and space\n    \"\"\"\n    d = {}\n    for letter in string.lower():\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    for letter in string.upper():\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    return d\n\n\ndef count_char_position(string):\n    \"\"\"\n    O(n) time and space\n    \"\"\"\n    d = {}\n    for letter in string.lower():\n        d[letter] = string.lower().count(letter) + string.upper().count(letter)\n    return d\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\nfrom typing import Dict\n\n\ndef count_char_position(s: str) -> int:\n    alphabet = dict.fromkeys(map(lambda x: x.lower(), 'abcdefghijklmnopqrstuvwxyz'))\n    return sum(alphabet[char] for char in s)\n\n\ndef count_char_position(s: str) -> int:\n    # Takes O(n)\n    # 1. Create a dict of lower case English alphabet\n    # 2. Loop through the string, increment the values in the dictionary by the characters\n    # 3. Return the sum of all values\n\n    alphabet = dict.fromkeys(map(lambda x: x.lower(), 'abcdefghijklmnopqrstuvwxyz'))\n    count = 0\n    for char in s:\n        count += alphabet.get(char, 0)\n    return count\n\n\ndef count_char_position(s: str) -> int:\n    # Takes O(n)\n    # 1. Create a dict of lower case English alphabet\n    # 2. Loop through the string, check whether the character is in the dict and add it's value (default is 0)\n    # 3. Return the sum of all values\n\n    alphabet = dict.fromkeys(map(lambda x: x.lower(), 'abcdefghijklmnopqrstuvwxyz'))\n    count = 0\n    for char in s:\n        count += alphabet[char]\n    return count\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(s):\n\tcount = 0\n\tfor i in range(0,len(s)):\n\t\tif s[i].lower() in string.ascii_lowercase:\n\t\t\tcount += 1\n\t\telif s[i].lower() in string.ascii_uppercase:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(text:str) -> int:\n    count = 0\n    for i in text:\n        count += ord(i.lower()) - 96 == ord(i) - 65\n    return count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(s):\n    n_upper = n_lower = n_other = 0\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                n_upper += 1\n            else:\n                n_lower += 1\n        else:\n            n_other += 1\n    return n_upper, n_lower, n_other\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\nfrom typing import Dict, List\n\n\ndef count_char_position(str_val: str) -> Dict[str, int]:\n    char_list: List[str] = list(map(str.lower, str_val))\n    return {char: str_val.count(char) for char in char_list}\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\nfrom collections import Counter\n\ndef count_char_position(input_string):\n\n    # Create a list to store the values\n    list_of_occurences = []\n\n    # Store all the lower case characters\n    lower_case_letters = list(Counter(input_string).keys())\n\n    # Store all the upper case characters\n    upper_case_letters = list(Counter(input_string).keys())\n\n    # Convert both the list to sets as we need uniqueness\n    lower_case_letters = set(lower_case_letters)\n    upper_case_letters = set(upper_case_letters)\n\n    # Find the difference between both the set to get the list of characters that are at same position\n    # and only if they are at same position\n    for i in lower_case_letters.difference(upper_case_letters):\n        list_of_occurences.append(input_string.count(i))\n\n    return list_of_occurences\n\n\ndef count_char_position(input_string):\n    return [input_string.count(c) for c in set(input_string.lower()) if input_string.count(c) > input_string.count(c.upper())]\n\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(lst,k):\n  num_of_pairs =0\n  for i in range(len(lst)):\n    for j in range(i+1,len(lst)):\n      if (lst[i]^lst[j]) == k:\n        num_of_pairs+=1\n  return num_of_pairs\nlst1 = [5,4,7,2,1]", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(nums, num):\n    ans = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] ^ nums[j] == num:\n                ans += 1\n\n    return ans\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, x):\n    xor = 0\n    dict = {}\n    res = 0\n    for i in arr:\n        xor ^= i\n    dict[xor] = 0\n    for i in arr:\n        if dict.get(xor ^ i) is None:\n            dict[xor ^ i] = 1\n        else:\n            res += 1\n    return res\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,sum):\n    if len(arr)<=2:\n        return 0\n    dp = [0]*sum\n    for i in range(len(arr)):\n        dp[arr[i]]=1\n        for j in range(arr[i]+1,sum):\n            if dp[j]==0:\n                dp[j]=1\n    return dp[sum-1]\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, target):\n    n = len(arr)\n    arr.sort()\n    if n % 2 != 0:\n        return 0\n    return arr[n-1] + arr[n-2]\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,value):\n    odd = 0\n    even = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]^arr[j] == value:\n                if arr[i]%2==0 and arr[j]%2==0:\n                    even+=1\n                elif arr[i]%2!=0 and arr[j]%2!=0:\n                    odd+=1\n                else:\n                    continue\n    return even\n\n\narr = [5,4,7,2,1]\nval = 5", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, x):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] ^ arr[j] == x:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,x):\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]^arr[j]==x and arr[i]+arr[j]%2==0:\n                pair_count+=1\n    return pair_count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,xor):\n    res = []\n    temp = []\n    for i in range(len(arr)):\n        temp.append(arr[i])\n        xor = xor^arr[i]\n        if xor%2==0:\n            res.append(temp)\n        if i==len(arr)-1 and xor%2!=0:\n            res.append(temp)\n    return res\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,val):\n    result = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]^arr[j] == val:\n                result += 1\n    return result\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    while True:\n        if 2**i >= n:\n            return 2**i\n        i += 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n# My Code\ndef next_Power_Of_2(n):\n    return 2**(n.bit_length())\n\n# Best Practices\ndef next_Power_Of_2(n):\n    return 1 << (n - 1).bit_length()", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if(n < 1):\n        return 1\n    elif(n == 1):\n        return 1\n    elif(n & n-1 == 0):\n        return n\n    else:\n        return n << 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while i<n:\n        i*=2\n    return i\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n# Naive solution\ndef next_Power_Of_2(n):\n    x = 1\n    while x < n:\n        x = x*2\n    return x\n\n\n# Binary solution\ndef next_Power_Of_2(n):\n    x = 1\n    while x < n:\n        x = x*2\n    return x\n\n# For very large values of x\n# x = int(math.log(x, 2))\n# x = pow(2, x+1)\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    # code here\n    if n == 0:\n        return 1\n    ans = 1\n    while n >= ans:\n        ans *= 2\n    return ans\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    if n & (n-1) == 0:\n        return n\n    else:\n        n = n - 1\n        while n & (n-1) != 0:\n            n = n >> 1\n        return n << 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    return 2**n - 1 if (2**n - 1) <= n else 2**(n+1) - 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n\tn=str(bin(n))[2:]\n\tif n[-1]=='1':\n\t\tprint(n)\n\t\treturn int(n,2)\n\tn=str(bin(n+1))[2:]\n\tn=n.lstrip('0')\n\tn=n.replace('0','1')\n\treturn int(n,2)\n\nn=100"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, n):\n    count = 0\n    for i in arr:\n        if i == n:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(lst, num):\n    freq = 0\n    for i in lst:\n        if i == num:\n            freq += 1\n    return freq\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    num = 5\n    print(\"Frequency of\", num, \"in array\", lst, \"is\", frequency(lst, num))\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\n#Solution\ndef frequency(arr,n):\n    count = 0\n    for i in arr:\n        if i == n:\n            count += 1\n    return count\n\n\n#Testing", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,n):\n    return arr.count(n)\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(array,number):\n    return array.count(number)\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(numbers, number):\n    '''\n    Gives the frequency of the number in the given array\n    '''\n    count = 0\n    for num in numbers:\n        if(num == number):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(array,x):\n    count = 0\n    for i in array:\n        if x == i:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(array, x):\n    count = 0\n    for item in array:\n        if x == item:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, n):\n    result = 0\n    for i in arr:\n        if i == n:\n            result += 1\n    return result\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\n#from math import sqrt\n\n\ndef get_pell(n):\n    i,j = 0,1\n    for x in range(n-1):\n        i, j = j, i+j\n    return i\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nfrom math import sqrt\n\ndef get_pell(n):\n    # YOUR CODE HERE\n    return\n\n\ndef test_get_pell():\n    assert get_pell(1) == 1\n    assert get_pell(2) == 5\n    assert get_pell(3) == 12\n    assert get_pell(4) == 12\n    assert get_pell(5) == 29\n    assert get_pell(6) == 50\n    assert get_pell(7) == 81\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    return 2*(n*n - 1)\n\ndef test_pell():\n    assert get_pell(4) == 12\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n - 1) ** 2 - get_pell(n - 2) ** 2\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    >>> get_pell(4)\n    12\n    >>> get_pell(1)\n    1\n    >>> get_pell(0)\n    1\n    >>> get_pell(-1)\n    Traceback (most recent call last):\n    ...\n    ValueError: Number must be positive.\n    \"\"\"\n    if n <= 0:\n        raise ValueError('Number must be positive.')\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n - 1) + 2 * get_pell(n - 2)\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 12\n    else:\n        x = 1\n        y = 2\n        for i in range(n-1):\n            tmp = x\n            x = x + y\n            y = tmp + y\n        return y\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    prev = 1\n    curr = 1\n    for _ in range(1, n):\n        prev, curr = curr, prev + 2*curr\n    return curr\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    Return the nth pell number.\n    \"\"\"\n    a = 1\n    b = 2\n    while n > 1:\n        temp = a\n        a = a + b\n        b = temp + b\n        n -= 1\n    return a\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\nfrom math import sqrt, floor\n\n\ndef get_pell(n):\n    \"\"\"\n    Calculates the nth pell number\n    :param n: the nth pell number\n    :return: the nth pell number\n    \"\"\"\n    d = 1\n    p = 0\n    q = 1\n    for i in range(1, n + 1):\n        p = d * p + p\n        q = d * q + q\n        d += 2\n    return p\n\n\ndef get_pell2(n):\n    \"\"\"\n    Calculate the nth pell number with the first term being 1\n    :param n: the nth pell number\n    :return: the nth pell number\n    \"\"\"\n    p = 1\n    q = 1\n    d = 1\n    for i in range(1, n):\n        p = p * d + 1\n        q = q * d + 1\n        d += 2\n    return p\n\n\ndef get_pell_sqrt(n):\n    \"\"\"\n    Calculate the nth pell number by using sqrt\n    :param n: the nth pell number\n    :return: the nth pell number\n    \"\"\"\n    p = 0\n    q = 1\n    d = 1\n    for i in range(1, n):\n        p = p * d + 1\n        q = q * d + 1\n        d += 2\n        p = floor(sqrt(p))\n        q = floor(sqrt(q))\n    return p\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    n = n + 1\n    a = 1\n    b = 2\n    c = 0\n    while n != 1:\n        c = a + b\n        a = b\n        b = c\n        n -= 1\n    return c\n\ndef test():\n    for n in range(1, 100):\n        print(get_pell(n))\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(l, start, stop):\n    return sum(l[start:stop])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\nfrom typing import List\n\ndef sum_range_list(arr:List[int], first_index: int, last_index:int) -> int:\n    return sum(arr[first_index:last_index])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list, start, end):\n    return sum(list[start:end+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst,start,end):\n    sum = 0\n    for i in lst[start:end+1]:\n        sum = sum+i\n    return sum", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(nums, start, end):\n    return sum(nums[start:end+1])\n\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list( list, lower, upper):\n    # Your Code Here\n    new_list = []\n    for i in range(lower, upper + 1):\n        new_list.append(list[i])\n    return sum(new_list)\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(nums, a, b):\n    return sum(nums[a:b+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list,start,end):\n    list_ = []\n    for i in list[start:end]:\n        list_.append(i)\n    return sum(list_)", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(a,i,j):\n    a=sorted(a)\n    return sum(a[i:j+1])\n\n\ndef test_sum_range_list():\n    a = [2,1,5,6,8,3,4,9,10,11,8,12]\n    i = 8\n    j = 10\n    assert sum_range_list(a,i,j)==29\n\n\ndef test_sum_range_list2():\n    a = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\n    i = 1\n    j = 1\n    assert sum_range_list(a,i,j)==5\n\n\ndef test_sum_range_list3():\n    a = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\n    i = 1\n    j = 4\n    assert sum_range_list(a,i,j)==16\n\n\ndef test_sum_range_list4():\n    a = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]\n    i = 0\n    j = 4\n    assert sum_range_list(a,i,j)==17", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(my_list, start, stop):\n    if stop < start:\n        temp = start\n        start = stop\n        stop = temp\n    return sum(my_list[start:stop+1])\n\n\ndef main():\n    my_list = [2,1,5,6,8,3,4,9,10,11,8,12]\n    print(sum_range_list(my_list, 8, 10))\n\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n  perimeter = 0\n  for i in range(n):\n    perimeter += 2 * math.pi * i\n  return perimeter * 2\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    peri = 0\n    for i in range(n):\n        peri += 10 * (n - i)\n    return peri\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(number_sides):\n    \"\"\"\n    :param number_sides: number of sides of pentagon\n    :return: perimeter of pentagon\n    \"\"\"\n    return number_sides * 20\n\n\ndef test_perimeter_pentagon():\n    assert perimeter_pentagon(5) == 25\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(num_sides):\n    \"\"\"\n    Calculates the perimeter of a polygon given the number of sides.\n    \"\"\"\n    if num_sides < 3:\n        raise Exception(\"At least 3 sides required.\")\n\n    return num_sides * 3.14\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(size):\n    \"\"\"\n    Your solution here.\n    \"\"\"\n    if size == 1:\n        return 0\n    return 5 * perimeter_pentagon(size-1) + 5\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    perimeter = n*12\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    perimeter = 0\n    for i in range(n):\n        perimeter = perimeter + (3 * (n - i) * i)\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\n# Solution \n\ndef perimeter_pentagon(n):\n    \"\"\"\n    Returns the perimeter of a pentagon.\n    \"\"\"\n    return 5*n\n\n# Tests", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(num):\n    \"\"\"\n    the length of each side\n    \"\"\"\n    length_side = 200\n    perimeter = length_side * (num - 2) * 3\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\nimport math\ndef perimeter_pentagon(num_sides):\n    perimeter = 0\n    for i in range(num_sides):\n        perimeter += (2 * (i + 1))\n    return perimeter\n\ndef perimeter_pentagon2(num_sides):\n    perimeter = (num_sides - 2) * 2\n    return perimeter\n\ndef perimeter_pentagon3(num_sides):\n    perimeter = 0\n    for i in range(num_sides):\n        perimeter += 2 * math.sin(math.radians(360 / num_sides * (i + 1)))\n    return perimeter\n\ndef perimeter_pentagon4(num_sides):\n    perimeter = 2 * num_sides * math.sin(math.radians(180 / num_sides))\n    return perimeter"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(s):\n    ans = 0\n    for x in s:\n        if x == \"s\":\n            ans += 1\n        elif x == \"t\":\n            ans += 1\n        elif x == \"d\":\n            ans += 1\n    return ans\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(input_str):\n    # your code goes here\n    count = 0\n    for i in input_str:\n        if i == \"std\":\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str1):\n    i = 0\n    std_count = 0\n    while i < len(str1):\n        if str1[i:i+3] == \"std\":\n            std_count += 1\n        i += 1\n    return std_count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    \"\"\"\n    Parameter: string - string\n\n    Returns: int - number of occurrences of \"std\" in the given string\n    \"\"\"\n    # Write your code here\n    answer = 0\n    for i in range(len(string)):\n        if (string[i:i+3] == \"std\"):\n            answer += 1\n    return answer\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    i = 0\n    occurance = 0\n    while i < len(string):\n        if string[i] == \"s\" and string[i+1] == \"t\" and string[i+2] == \"d\":\n            occurance += 1\n            i += 3\n        else:\n            i += 1\n    return occurance\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for i in string:\n        if i == 's':\n            if string[i+1] == 't':\n                if string[i+2] == 'd':\n                    count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    count = 0\n    for i in str:\n        if i == 's' and str[0] == 's' and str[1] == 't' and str[2] == 'd':\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(str):\n    result = 0\n    for i in range(0,len(str)):\n        if(str[i]=='s' and str[i+1]=='t' and str[i+2]=='d'):\n            result = result+1\n    return result\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str1):\n    cnt = 0\n    for i in str1:\n        if i == \"s\" and str1[0] == \"t\" and str1[1] == \"d\" and str1[2] == \"s\":\n            cnt += 1\n    return cnt\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(text):\n  return text.count(\"std\")\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(inp_str):\n    return \"\".join(e for e in inp_str if e.isalnum())", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(text):\n\tresult=\"\"\n\tfor i in text:\n\t\tif i.isalnum()==True:\n\t\t\tresult=result+i\n\treturn result\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    return ''.join(filter(lambda x: x.isalnum(), s))\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\n#remove_splchar(\"python  @#&^%$*program123\")\ndef remove_splchar(mystr):\n    newstr = \"\"\n    for char in mystr:\n        if char.isalnum():\n            newstr += char\n    return newstr\n\n#remove_splchar(\"python  @#&^%$*program123\")", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return re.sub(r'[^A-Za-z0-9]+', '', string)\n\n# Test", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n    return ''.join(i for i in str if i.isalnum())\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    # Complete this function\n    return \"\".join(c for c in s if c.isalnum())\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \"\"\"\n    return ''.join(c for c in text if c.isalnum())\n\ndef remove_splchar_regex(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \"\"\"\n    return re.sub('[^a-zA-Z0-9]+', '', text)\n\n# Test", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(s):\n    return re.sub(r'\\W+','',s)\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n    return re.sub(r\"[^a-zA-Z0-9]+\", \"\", str)\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(items):\n    dictionary = {}\n    for key, value in items:\n        if key not in dictionary:\n            dictionary[key] = [value]\n        else:\n            dictionary[key].append(value)\n    return dictionary\n\n# test cases", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(list_keyvalue):\n    my_dict = {}\n    for (k, v) in list_keyvalue:\n        if k not in my_dict:\n            my_dict[k] = [v]\n        else:\n            my_dict[k].append(v)\n    return my_dict\n\n#assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n    # Write your code here.\n    from collections import defaultdict\n    d = defaultdict(list)\n    for k,v in pairs:\n        d[k].append(v)\n    return dict(d)\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\n# def group_keyvalue(pairs):\n#     d = {}\n#     for k, v in pairs:\n#         if k in d:\n#             d[k].append(v)\n#         else:\n#             d[k] = [v]\n#     return d\n\ndef group_keyvalue(pairs):\n    d = {}\n    for k, v in pairs:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return {k: v for k, v in d.items() if len(v) > 1}", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(pairs):\n\tdic = {}\n\tfor pair in pairs:\n\t\tif pair[0] not in dic:\n\t\t\tdic[pair[0]] = [pair[1]]\n\t\telse:\n\t\t\tdic[pair[0]].append(pair[1])\n\treturn dic", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n    d = {}\n    for (k,v) in pairs:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(lst):\n    groups = {}\n    for key, value in lst:\n        if key in groups:\n            groups[key].append(value)\n        else:\n            groups[key] = [value]\n    return groups\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(key_values):\n    d = {}\n    for k, v in key_values:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(seq):\n    groups = {}\n    for k, v in seq:\n        groups.setdefault(k, []).append(v)\n    return groups\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(list_of_tuples):\n    dic = {}\n    for item in list_of_tuples:\n        if item[0] not in dic:\n            dic[item[0]] = []\n        dic[item[0]].append(item[1])\n    return dic\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    stack = []\n    for s in string:\n        if s == \"(\" or s == \"[\":\n            stack.append(s)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                if s == \")\" and stack[-1] == \"(\":\n                    stack.pop()\n                elif s == \"]\" and stack[-1] == \"[\":\n                    stack.pop()\n                else:\n                    return False\n    return len(stack) == 0\n\n\ndef test_is_valid_parenthese():\n    assert is_valid_parenthese(\"(){}[]\")==True\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\n# using stack\n# runtime is O(n) and space is O(n)\ndef is_valid_parentheses(input_string):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in input_string:\n        if char in mapping:\n            if stack:\n                if mapping[char] == stack.pop():\n                    pass\n                else:\n                    return False\n            else:\n                return False\n        else:\n            stack.append(char)\n\n    if stack:\n        return False\n    return True\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    stack = []\n    for i in string:\n        if i == \"(\" or i == \"{\":\n            stack.append(i)\n        elif i == \")\" or i == \"}\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if not is_match(i, top):\n                return False\n    if stack:\n        return False\n    return True\n\ndef is_match(s, t):\n    return (s == \"(\" and t == \")\") or (s == \"{\" and t == \"}\") or (s == \"[\" and t == \"]\")", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    left_parenthesis = ['(',')', '{', '[']\n    right_parenthesis = [')','}', ']', ']']\n    dic = {left_parenthesis[i]: right_parenthesis[i] for i in range(len(left_parenthesis))}\n\n    i = 0\n    length = len(string)\n    while i < length:\n        if string[i] in dic:\n            i += 1\n            continue\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    stack = []\n\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n        elif char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    paren_stack = []\n\n    for char in string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                return False\n\n    if len(paren_stack) == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(parenthesis_str):\n    if len(parenthesis_str)%2 !=0:\n        return False\n    else:\n        paranth_dict = {\"(\":\")\",\"[\":\"]\",\"{\":\"}\"}\n        paranthes_list = list(parenthesis_str)\n        for idx, paranth in enumerate(paranthes_list):\n            if paranth == \"(\":\n                paranthes_list[idx+1] == \")\"\n            elif paranth == \"[\":\n                paranthes_list[idx+1] == \"]\"\n            elif paranth == \"{\":\n                paranthes_list[idx+1] == \"}\"\n\n        for paranth in paranthes_list:\n            if paranth not in paranth_dict:\n                return False\n        return True\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n# Solution\ndef is_valid_parentheses(parenthese):\n    \"\"\"Return whether parentheses in string are balanced.\"\"\"\n    if not parenthese:\n        return True\n    stack = []\n    for paren in parenthese:\n        if paren in '()[]':\n            stack.append(paren)\n        elif not stack:\n            return False\n        elif paren == ')' and stack[-1] == '(':\n            stack.pop()\n        elif paren == ']' and stack[-1] == '[':\n            stack.pop()\n        elif paren == '}' and stack[-1] == '{':\n            stack.pop()\n    return not stack", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    s=list(string)\n    counter=0\n    for i in s:\n        if i==\"(\":\n            counter+=1\n        elif i==\")\":\n            counter-=1\n        if counter<0:\n            return False\n    return True if counter==0 else False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    if string == \"\":\n        return True\n    if string[0] == \"(\" and is_valid_parenthese(string[1:]):\n        return True\n    if string[0] == \"[\" and is_valid_parenthese(string[1:]):\n        return True\n    if string[0] == \"{\" and is_valid_parenthese(string[1:]):\n        return True\n    if string[0] == \")\" and string[1] == \")\" and is_valid_parenthese(string[2:]):\n        return True\n    if string[0] == \"]\" and string[1] == \"]\" and is_valid_parenthese(string[2:]):\n        return True\n    if string[0] == \"}\" and string[1] == \"}\" and is_valid_parenthese(string[2:]):\n        return True\n    return False"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(base_x, base_y, height):\n    perimeter = base_x + base_y + height\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a, b, c):\n    return a + b + c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    \"\"\"\n    Perimeter of a triangle is the sum of its side lengths\n\n    Parameters\n    ----------\n    a: int\n        length of side a of the triangle\n    b: int\n        length of side b of the triangle\n    c: int\n        length of side c of the triangle\n\n    Returns\n    -------\n    perimeter: int\n        perimeter of the triangle\n    \"\"\"\n    perimeter = a + b + c\n    return perimeter", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    \"\"\"Returns the perimeter of a triangle given 3 side lengths\"\"\"\n    return a+b+c\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(b,c,a):\n    \"\"\"\n    Use this function to find the perimeter of a triangle.\n    \"\"\"\n    return a + b + c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a, b, c):\n    return a + b + c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return 2*a + 2*b + 2*c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return 2*a + 2*b + 2*c\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    p = a + b + c\n    return p\n\n#%%", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return 2 * (a + b + c)\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n\tprint(a)\n\tprint(b)\n\ta1 = a\n\tb1 = b\n\tdiv = 2\n\tlcm = a\n\twhile lcm<b:\n\t\tlcm = a*b//div\n\t\tif lcm in range(a,b):\n\t\t\treturn (a,lcm)\n\t\tdiv+=1\n\treturn (lcm,b)\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nfrom math import ceil\n\ndef answer(a,b):\n    x=ceil(a/2)\n    y=ceil(b/2)\n    if(x**2<=a and y**2<=b):\n        return (x,y)\n    else:\n        return (-1,-1)\n\n\n# answer(3,8)\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nfrom functools import reduce\n\ndef answer(m,n):\n    #m = 3, n = 8\n    if m < n:\n        return answer(n,m)\n    elif m == n:\n        return m,n\n\n    for i in range(m+1,n+1):\n        if (m*i) % n == 0:\n            return (m, i)\n    return False\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef gcd(a, b):\n    if(a == 0):\n        return b\n    else:\n        return gcd(b%a,a)\n    \ndef lcm(a, b):\n    return (a * b) // gcd(a,b)\n\ndef answer(a, b):\n    l, r = 1, 10**10\n    while l < r:\n        mid = l + (r - l)//2\n        if lcm(mid,mid) > b:\n            r = mid - 1\n        elif lcm(mid,mid) < a:\n            l = mid + 1\n        else:\n            return (mid, mid)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(lower,upper):\n    for i in range(lower,upper+1):\n        for j in range(i,upper+1):\n            if lcm(i,j) <= upper and lcm(i,j) >= lower:\n                return i,j\n    return -1, -1\n\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\ndef gcd(x,y):\n    while x != 0:\n        x, y = y % x, x\n    return y\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nfrom math import gcd\n\n\ndef answer(a, b):\n    l = a\n    r = b\n    while l <= r:\n        mid = (l+r)//2\n        if (mid == l or mid == r) and gcd(mid, a) == 1:\n            return (mid, a)\n        if (gcd(mid, b) != 1 and gcd(mid, a) == 1) or gcd(mid, a)*gcd(mid, b) < gcd(a, b):\n            r = mid - 1\n        else:\n            l = mid + 1\n    return None\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    for i in range(a,b+1):\n        if (a*b)%i==0:\n            return (a,b)\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a, b):\n    if a > b:\n        a,b = b,a\n    numbers = [x for x in range(a, b+1)]\n    lcm = numbers[0]\n    for number in numbers[1:]:\n        lcm = lcm*number // gcd(lcm,number)\n    return numbers[0],lcm\n\ndef gcd(x,y):\n    if x==0:\n        return y\n    if y==0:\n        return x\n    if x>y:\n        return gcd(x%y,y)\n    else:\n        return gcd(x,y%x)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nimport math\n\n\ndef answer(min_num, max_num):\n    max_factors = []\n    for num in range(min_num, max_num+1):\n        max_factors.append(num)\n\n    max_factors = sorted(max_factors, key=lambda x: x * math.log(x))\n    for i in range(len(max_factors) - 1):\n        for j in range(i + 1, len(max_factors)):\n            if lcm(max_factors[i], max_factors[j]) >= min_num and lcm(max_factors[i], max_factors[j]) <= max_num:\n                return max_factors[i], max_factors[j]\n    else:\n        return None\n\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(min_num,max_num):\n    lcm = 0\n    for i in range(min_num,max_num+1):\n        if lcm != 0:\n            continue\n        for j in range(min_num,max_num+1):\n            if i*j == lcm:\n                print(i,j)\n                return i,j\n            if lcm == 0:\n                lcm = i*j\n    return None\n"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literal, string):\n    for lit in literal:\n        if lit in string:\n            return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\nimport re\n\ndef string_literals(litt,string):\n    \"\"\"\n    Function string_literals() takes two arguments:\n        litt: a list of strings\n        string: a string\n    Returns:\n        Matching_litt: if any of the strings in litt is found in string, then return Matching_litt, otherwise return empty string\n    \"\"\"\n    if len(litt) == 0:\n        return \"\"\n    else:\n        for lit in litt:\n            if lit in string:\n                Matching_litt = lit\n                return Matching_litt\n        string_literals(litt[1:],string)\n\n# assert string_literals(['language'], 'python language') == 'Matched!'\n# assert string_literals(['language', 'website'], 'python language is the best') == 'language'\n# assert string_literals(['language', 'website'], 'python website is the best') == 'website'\n# assert string_literals(['language', 'website'], 'python') == ''", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(keywords, text):\n    \"\"\"Return if any of the keywords is in text\"\"\"\n    for keyword in keywords:\n        if keyword in text:\n            return 'Matched!'\n    return 'Not Found'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals,string):\n    \"\"\"\n    Input: literals(list):list of literals,string(str):string to search\n    Output: Boolean\n    \"\"\"\n    for literal in literals:\n        if literal in string:\n            return 'Matched!'\n    return 'Not Matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n    return 'Matched' if all(char in string for char in literals) else 'Not Matched'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(lits, txt):\n    for lit in lits:\n        if lit in txt:\n            print ('Matched!')\n            return\n    print ('Not Matched')\n\nstring_literals(['python', 'python-a'], 'python language')", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(values,text):\n    if not isinstance(values,(list,tuple)):\n        values = [values]\n    if not isinstance(values,(list,tuple)) or not isinstance(text,(list,tuple)):\n        return \"False\"\n    for value in values:\n        if str(value) in str(text):\n            return \"Matched!\"\n    return \"False\"\n\n# Tests", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals,str1):\n    if len(literals)==0:\n        return ('Matched!')\n    else:\n        result=''\n        for literal in literals:\n            result=result+literal\n            if str1.find(result)==-1:\n                result=result[:-1]\n                return ('No match')\n            else:\n                result=result[:-1]\n                result=result+','\n    return('Matched!')", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,s):\n    if not isinstance(literals,list):\n        literals=[literals]\n    for literal in literals:\n        if s.find(literal)!=-1:\n            return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals, s):\n    return any(literal in s for literal in literals)\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    def divides(x):\n        return n % x == 0\n\n    return divides(2) and divides(3) and divides(5)\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(number):\n    if number >= 14:\n        if number % 2 == 0 and is_num_palindrome(number):\n            return True\n    return False\n\ndef is_num_palindrome(number):\n    str_num = str(number)\n    return str_num == str_num[::-1]\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    if n%2 == 0 and n > 2:\n        if n == 2:\n            return True\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n%i == 0:\n                return False\n        return True\n    elif n%2 == 1:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n\tif num == 1:\n\t\treturn False\n\telif num % 2 == 0:\n\t\treturn is_num_keith(num / 2)\n\telse:\n\t\treturn False\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(n):\n    return is_num_keith_helper(n, 0, 0)\n\ndef is_num_keith_helper(n, count, digit):\n    if digit == 0:\n        if n % 10 == 0:\n            return is_num_keith_helper(n//10, 0, 1)\n        else:\n            return True\n    else:\n        if count == 2:\n            return False\n        else:\n            if n % 10 == digit:\n                return is_num_keith_helper(n//10, count+1, digit)\n            else:\n                return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    return (num > 0) and (num % 3 == 0) and (num % 4 == 0) and (num % 5 == 0)\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(number):\n    n = number\n    x = n + 1\n    while x <= n**2:\n        if n**2 % x == 0:\n            return False\n        x += 1\n    return True", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\nimport math\n\n\ndef is_num_keith(num):\n    is_keith = True\n\n    if num == 1 or num == 4:\n        return True\n\n    if num == 2 or num == 3:\n        return False\n\n    for i in range(2, math.floor(math.sqrt(num)) + 1):\n        if num % i == 0:\n            is_keith = False\n            break\n\n    return is_keith\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(number):\n    # Your code here\n    return False\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    \"\"\"\n    return True if n is a keith number, otherwise False\n    \"\"\"\n    return (n == sum(int(d)**3 for d in str(n)))\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, long1, lat2, long2):\n    R = 6372.8 # Radius of the earth in kilometers. Use 3956 for miles\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(long1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(long2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    distance = R * c * 1000\n    return distance\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,long1,lat2,long2):\n    from math import sin, cos, sqrt, atan2, radians\n    lat1, long1, lat2, long2 = map(radians,[lat1,long1,lat2,long2])\n    dlong = long2 - long1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlong / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    R = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return R * c", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\nimport math\ndef distance_lat_long(lat_1, lon_1, lat_2, lon_2):\n    \"\"\"\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(math.radians, [lon_1, lat_1, lon_2, lat_2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nfrom math import sin, cos, sqrt, atan2, radians\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r\n\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\n\ndef distance_lat_long(lat1, long1, lat2, long2):\n    p = 0.017453292519943295     #Pi/180\n    a = 0.5 - math.cos((lat2 - lat1) * p)/2 + math.cos(lat1 * p) * math.cos(lat2 * p) * (1 - math.cos((long2 - long1) * p)) / 2\n    return 12742 * math.asin(math.sqrt(a))\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n    R = 6378.137\n    lat1 = math.radians(lat1)\n    long1 = math.radians(long1)\n    lat2 = math.radians(lat2)\n    long2 = math.radians(long2)\n\n    dLat = lat2 - lat1\n    dLong = long2 - long1\n\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(lat1) * math.cos(lat2) * math.sin(dLong / 2) * math.sin(dLong / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    distance = R * c\n    return round(distance,2)", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\n#Write your code here\ndef distance_lat_long(lat1, long1, lat2, long2):\n    import math\n    \n    #put your code here\n    R = 6372.8 # Radius of the earth in kilometers. Use 3956 for miles\n    lat1 = math.radians(lat1)\n    long1 = math.radians(long1)\n    lat2 = math.radians(lat2)\n    long2 = math.radians(long2)\n\n    dLat = lat2 - lat1\n    dLong = long2 - long1\n\n    a = (math.sin(dLat/2))**2 + math.cos(lat1) * math.cos(lat2) * (math.sin(dLong/2))**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return R * c", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6372.8\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    distance = R * c\n    return distance", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    if (lat1==lat2 and lon1==lon2):\n        return 0\n    elif (abs(lat1-lat2)>=90):\n        return 0\n    else:\n        a = (pow(math.sin((lat2-lat1)/2),2)+math.cos(lat1)*math.cos(lat2)*pow(math.sin((lon2-lon1)/2),2))\n        c = 2*math.atan2(math.sqrt(a),math.sqrt(1-a))\n        d = 6378.137*c\n        return d\n\n#Testing Code:\nimport math", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lng1,lat2,lng2):\n    d_lat=lat2-lat1\n    d_lng=lng2-lng1\n    a=math.sin(d_lat/2)**2+math.cos(lat1)*math.cos(lat2)*math.sin(d_lng/2)**2\n    c=2*math.atan2(math.sqrt(a),math.sqrt(1-a))\n    r=6371\n    return c*r\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, length):\n    if length == 0:\n        return \"\"\n    \n    prefix = \"\"\n    for char in strings[0]:\n        for string in strings:\n            if char != string[length]:\n                return prefix\n        \n        prefix += char\n    \n    return prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strs, k):\n    if len(strs) == 0:\n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        str = strs[i]\n        if len(str) < len(prefix):\n            return prefix[:len(str)]\n        else:\n            for j in range(len(prefix)):\n                if str[j] != prefix[j]:\n                    prefix = prefix[:j]\n                    break\n    return prefix[:k]\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, limit):\n    if len(strings) == 0 or len(strings) > limit:\n        return ''\n    if len(strings) == 1:\n        return strings[0]\n    else:\n        for i in range(len(strings[0])):\n            if strings[0][i] != strings[1][i]:\n                return strings[0][:i]\n        return common_prefix(strings[1:], limit)\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    if n <= 0:\n        return \"\"\n    shortest = strings[0]\n    for s in strings[1:]:\n        if len(shortest) > len(s):\n            shortest = s\n    result = \"\"\n    for i,c in enumerate(shortest):\n        for s in strings:\n            if i >= len(s):\n                return result\n            if c != s[i]:\n                return result\n        result += c\n    return result\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(words, k):\n    for i in range(0, min(k, len(words[0]))):\n        for j in range(1, min(k, len(words[0]))):\n            if not words[0][i].startswith(words[j][i]):\n                return words[0][0:i]\n    return words[0][0:i]\n\n\n# Tests", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(arr, length):\n    # Make sure there is a string in the array.\n    if arr is None or len(arr) == 0:\n        return None\n    # Save the first element of the array.\n    first = arr[0]\n    # Initialize the length.\n    prefix_length = 0\n    # Iterate through the first string.\n    for i in range(min(length, len(first))):\n        # If the characters are not the same, return the shorter common prefix.\n        if arr[0][i] != first[i]:\n            return first[:i]\n        # Increment the length.\n        prefix_length += 1\n    # Return the common prefix.\n    return first[:prefix_length]\n\n# Create an example array.\narr = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"]\n\n# Get the common prefix of the array.\nresult = common_prefix(arr, 4)\n\n# Print the result.", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(arr):\n    n = len(arr)\n    for i in range(min(n)):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                return arr[i]\n    return arr[0]\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(words, k):\n    \"\"\"\n    :type words: List[str]\n    :type k: int\n    :rtype: str\n    \"\"\"\n    if len(words) == 0:\n        return None\n    if len(words) == 1:\n        return words[0][:k]\n    prefix = words[0][:k]\n    for word in words[1:]:\n        while prefix != word[:k] and prefix != None and prefix != \"\":\n            prefix = prefix[:-1]\n    return prefix\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strs, max_len):\n    # Sort input strings based on length. \n    strs = sorted(strs, key=len, reverse=True)\n    # If the first character matches, continue.\n    for i in range(min(max_len, min(len(strs[0]), len(strs[1]))) - 1):\n        if strs[0][i] != strs[1][i]:\n            return strs[0][:i]\n    return strs[0][:max(len(strs[0]), len(strs[1])) - 1]\n\ndef test_common_prefix():\n    strs = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"]\n    max_len = 4\n    prefix = common_prefix(strs, max_len)\n    expected_prefix = \"ta\"\n    assert prefix == expected_prefix\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(str_list, n):\n    prefix = str_list[0][:n]\n    for i in str_list[1:]:\n        for j in range(n):\n            if j == len(i):\n                return prefix\n            elif i[j] != prefix[j]:\n                prefix = prefix[:j]\n                break\n    return prefix\n\n"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\ndef find_character(string):\n    alpha = re.findall('[a-zA-Z]', string)\n    alpha = list(set(alpha))\n    spec = re.findall('[A-Z]', string)\n    spec = list(set(spec))\n    spec_lower = re.findall('[a-z]', string)\n    spec_lower = list(set(spec_lower))\n    number = re.findall('[0-9]', string)\n    number = list(set(number))\n\n    return alpha, spec, spec_lower, number\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\ndef find_character(string):\n    pattern1 = re.compile(\"[a-z]+\")\n    pattern2 = re.compile(\"[A-Z]+\")\n    pattern3 = re.compile(\"[^a-zA-Z0-9]+\")\n    pattern4 = re.compile(\"[0-9]+\")\n\n    lower = re.findall(pattern1, string)\n    upper = re.findall(pattern2, string)\n    special = re.findall(pattern3, string)\n    numeric = re.findall(pattern4, string)\n\n    return lower, upper, special, numeric\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(string):\n    #Your code goes here.\n    #find uppercase, lowercase, special character and numeric values using regex\n    up = re.findall('[A-Z]', string)\n    low = re.findall('[a-z]', string)\n    spec = re.findall('[!\"#$\\%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~]', string)\n    num = re.findall('[0-9]', string)\n    return up, low, spec, num", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\ndef find_character(string):\n    a,b,c,d = [],[],[],[]\n    for i in re.finditer(r'[\\w]', string):\n        if i.group(0).isupper():\n            a.append(i.group(0))\n        elif i.group(0).islower():\n            b.append(i.group(0))\n        elif i.group(0).isnumeric():\n            c.append(i.group(0))\n        else:\n            d.append(i.group(0))\n    return a,b,c,d\n\n#assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\ndef find_character(text):\n    upper_values = re.findall('[A-Z]', text)\n    lower_values = re.findall('[a-z]', text)\n    special_char = re.findall('[~!@#$%^&*()_+={}|[]:;\"\\'<>,./?]', text)\n    numeric_values = re.findall('[0-9]', text)\n\n    return upper_values, lower_values, special_char, numeric_values\n\ndef test_function(test_case):\n    text = test_case[0]\n    solution = test_case[1]\n    output = find_character(text)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntext = \"ThisIsGeeksforGeeks\"\nsolution = (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\ntest_case = [text, solution]\ntest_function(test_case)\n\ntext = \"This is Geeks for Geeks\"\nsolution = (['T', 'h', 'i', 's', ' ', 'G', 'e', 'e', 'k', 's', ' ', 'f', 'o', 'r', ' ', 'G', 'e', 'e', 'k', 's'], [], [], [])\ntest_case = [text, solution]\ntest_function(test_case)\n\ntext = \"This is a sentence that has numbers 42 and 9000 in it!\"\nsolution = (['T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', '", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(str_):\n    import re\n    str = str_.lower()\n    alpha = re.findall('[a-z]', str)\n    alpha = sorted(alpha)\n    digit = re.findall('[0-9]', str)\n    digit = sorted(digit)\n    special = re.findall('[^\\w]', str)\n    special = sorted(special)\n    return alpha, digit, special, []\n\nstr_ = \"ThisIsGeeksforGeeks\"\nalpha, digit, special, vowel = find_character(str_)", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nfrom re import sub\n\n\ndef find_character(string):\n    return (\n        sub('[^A-Z]', '', string),\n        sub('[^a-z]', '', string),\n        sub('[^@#$%^&*()_+{}\":;|<>,.?/', '', string),\n        sub('[^0-9]', '', string)\n    )\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\ndef find_character(s):\n    upper = []\n    lower = []\n    special = []\n    numeric = []\n    for i in re.findall('[A-Z]', s):\n        upper.append(i)\n    for i in re.findall('[a-z]', s):\n        lower.append(i)\n    for i in re.findall('[!@#$%^&*()_+\\-=\\[\\]{};':,./?\"<>\\|\\]', s):\n        special.append(i)\n    for i in re.findall('[0-9]', s):\n        numeric.append(i)\n    return upper, lower, special, numeric\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(string):\n    return re.findall(r'[A-Z]', string), re.findall(r'[a-z]', string), re.findall(r'[0-9]', string), re.findall(r'[!@#$%&\\*]', string)\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\n\ndef find_character(s):\n    \"\"\"\n    Find all the special characters, numeric characters,\n    uppercase characters and lowercase characters using regex.\n\n    >>> find_character(\"ThisIsGeeksforGeeks\")\n    (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    >>> find_character(\"Anurag2019\")\n    (['A', 'N', 'U', 'R', 'A', 'G'], [], ['2', '0', '1', '9'], [])\n    >>> find_character(\"Be$yOu\")\n    (['B', 'E'], ['y', 'o', 'u'], [], [])\n    >>> find_character(\"Aa1b2\")\n    (['A', 'A'], ['1', 'b', '2'], [], [])\n    >>> find_character(\"a\")\n    (['a'], [], [], [])\n    \"\"\"\n    letters = re.findall(\"[a-z]\", s)\n    numbers = re.findall(\"\\d\", s)\n    special_chars = re.findall(r\"[^a-zA-Z0-9]\", s)\n    uppercase = re.findall(r\"[A-Z]\", s)\n    lowercase = re.findall(r\"[a-z]\", s)\n    return uppercase, lowercase, special_chars, numbers"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k):\n    if not arr:\n        return 0\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i+k == j:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, diff):\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == diff:\n                pairs += 1\n    return pairs\n\ndef main():\n    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n    assert count_pairs([1, 5, 3, 4, 2], 5, 1) == 3\n    assert count_pairs([1, 5, 3, 4, 2], 1, 1) == 2\n    print(\"All test cases passed\")\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\n# naive implementation:\n# TLE\ndef count_pairs_naive(arr, k):\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == k:\n                ans += 1\n    return ans\n\n\n# brute force\ndef count_pairs(arr, k):\n    res = 0\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] - arr[j] == k:\n                res += 1\n    return res\n\n# binary search\ndef count_pairs(arr, k):\n    ans = 0\n    arr = sorted(arr)\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right + 1) // 2\n        if arr[mid] - arr[left] == k:\n            ans += (right - mid)\n            left = mid\n        elif arr[mid] - arr[left] > k:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return ans", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0 if k != arr[0] else 1\n    count = 0\n    for i in range(len(arr)):\n        count += (arr[i] - k) in arr[:i]\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k):\n    arr.sort()\n    hashmap = dict()\n    for i in range(len(arr)):\n        if arr[i] not in hashmap:\n            hashmap[arr[i]] = [1, i]\n        else:\n            hashmap[arr[i]][0] += 1\n    c = 0\n    for i in range(len(arr)):\n        if arr[i] + k in hashmap:\n            c += hashmap[arr[i] + k][0]\n        if arr[i] - k in hashmap:\n            c += hashmap[arr[i] - k][0]\n    return c\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, x):\n    d = {}\n    # iterate through the array\n    for i in range(0, len(arr)):\n        if arr[i] - x in d:\n            d[arr[i] - x] += 1\n        else:\n            d[arr[i] - x] = 1\n    return d.get(k, 0)\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(nums, k, val):\n    return sum(map(lambda x: nums.count(x) * (nums.count(x) - 1) // 2, filter(lambda x: x - k == val, nums)))\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef count_pairs(array, k, target):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # initialize a dictionary to store pairs that have difference k\n    pairs_dict = defaultdict(list)\n\n    for num in array:\n        # update pairs_dict with the pair that has difference k\n        pairs_dict[num - k].append(num)\n        # update pairs_dict with the pair that has difference k - 1\n        pairs_dict[num - k + 1].append(num)\n\n    # initialize count_pairs to zero\n    count_pairs = 0\n\n    # iterate through pairs_dict\n    for num in pairs_dict:\n        # iterate through pairs in each key of pairs_dict\n        for pair in pairs_dict[num]:\n            # check if the pair is equal to target\n            if pair == target:\n                # increment count_pairs by 1\n                count_pairs += 1\n\n    return count_pairs", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(nums, k):\n    ret = 0\n    for i in range(len(nums)):\n        j = i + 1\n        while j < len(nums):\n            if nums[j] - nums[i] == k:\n                ret += 1\n                j += 1\n            else:\n                break\n    return ret\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k):\n    dict = {}\n    for ele in arr:\n        if k-ele in dict:\n            dict[k-ele] += 1\n        else:\n            dict[ele] = 1\n\n    total = 0\n    for ele in arr:\n        if ele in dict:\n            total += dict[ele]\n        if k-ele in dict:\n            total -= dict[k-ele]\n    return total\n\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(nums,num):\n    return [i for i in nums if i>num]\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst, num):\n  if lst == []:\n    return False\n\n  if lst[0] > num:\n    return True\n  else:\n    return greater_specificnum(lst[1:], num)\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(arr, num):\n    arr = [num if num > x else x for x in arr]\n    return arr\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(my_list,specificnum):\n    for i in my_list:\n        if i>specificnum:\n            print(\"found a number greater than \"+str(specificnum))\n        else:\n            print(\"not found\")", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst, num):\n    \"\"\"Return a list of all elements in lst that are greater than num.\"\"\"\n    return [x for x in lst if x > num]\n\n# Test your function with this code", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst,num):\n    for i in lst:\n        if i>num:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(array,n):\n    for i in array:\n        if i>n:\n            return True\n    return False", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst, num):\n    return [x for x in lst if x > num]\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(values,num):\n    return True if num in values else False\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nfrom math import *\n\ndef parabola_focus(a,b,c):\n    disc = b**2 - 4*a*c\n    x1 = (-b + sqrt(disc))/(2*a)\n    x2 = (-b - sqrt(disc))/(2*a)\n    return (x1, x2)\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nimport math\ndef parabola_focus(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        # two roots\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        return x1, x2\n    elif d == 0:\n        # one root\n        x = -b/(2*a)\n        return x, x\n    else:\n        # no real roots\n        return None, None\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    if discriminant == 0:\n        x = -b/(2*a)\n        return x, None\n    elif discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nimport math\n\ndef parabola_focus(a,b,c):\n    x = (-b + math.sqrt(b**2-4*a*c))/(2*a)\n    y = (-b - math.sqrt(b**2-4*a*c))/(2*a)\n    return x,y\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nfrom math import sqrt\ndef parabola_focus(a, b, c):\n    return (-b/(2*a), (b*b-4*a*c)/(4*a))\n\ndef test_parabola_focus():\n    assert parabola_focus(5,3,2)==(-0.3, 1.6)\n\ntest_parabola_focus()\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n  D = (b**2 - 4 * a * c)**0.5\n  foci = []\n  for i in (-1,1):\n    x = (-b - i * D)/(2 * a)\n    foci.append(x)\n  return (foci[0], foci[1])\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\nimport math\n\ndef parabola_focus(a, b, c):\n    # TODO: Write your function here\n    # a = x coordinate of focus\n    # b = y coordinate of focus\n    # c = constant of parabola\n    # x = 0\n    # y = b\n    # a = y - x*x\n    # 0 = y - x*x - b\n    # y = x*x + b\n    # -b = x*x + b\n    # x*x = -b\n    # x = sqrt(-b)\n    # y = x*x + b\n    # -b = x*x + b\n    # b^2 = 4ac\n    # b = sqrt(4ac)\n    # x = sqrt(-b)\n    # y = x*x + b\n    return (-math.sqrt(-b), -math.sqrt(-b)*math.sqrt(-b) + b)\n\n# Test Cases", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    x = b/2/a\n    y = 0.5*(a*x**2 + c)\n    return x,y\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\nimport math\n\ndef parabola_focus(a,b,c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        return x1,x2\n    elif d == 0:\n        return (-b/(2*a),-b/(2*a))\n    else:\n        return \"There is no focus\"\n\n#print(parabola_focus(5,3,2))\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    delta = (b*b) - (4*a*c)\n    if delta < 0:\n        return None\n    else:\n        return (-b + math.sqrt(delta) )/ (2*a),(-b - math.sqrt(delta) )/ (2*a)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(str_in,str_list):\n    for i in str_list:\n        if re.search(r'\\b'+i+'\\b',str_in):\n            return \"Matched!\"\n    return \"Didn't Match!\"\n\n# print(check_literals('The quick brown fox jumps over the lazy dog.',['fox']))", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(s, literals):\n    for lit in literals:\n        if re.search(r'\\b'+lit+'\\b', s, re.IGNORECASE):\n            return 'Matched!'\n    return 'No match.'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(a,b):\n    \"\"\"\n    a: str\n    b: list of str\n\n    returns: str or None\n\n    >>> check_literals('The quick brown fox jumps over the lazy dog.',['fox'])\n    'Matched!'\n    \"\"\"\n    # pass\n    import re\n    if type(b) is not list:\n        b = [b]\n    for i in b:\n        if re.search(i,a):\n            return 'Matched!'\n    return None", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\n\ndef check_literals(text, literals):\n    \"\"\"\n    :param text: string\n    :param literals: list of strings\n    :return: string\n    \"\"\"\n\n    for literal in literals:\n        if re.search(literal, text):\n            return \"Matched!\"\n    return \"No Match!\"\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(st, ls):\n    for l in ls:\n        try:\n            if re.search(l, st):\n                return \"Matched!\"\n        except:\n            return \"No match\"\n    return \"No match\"\n\ndef check_literals(st, ls):\n    for l in ls:\n        if l in st:\n            return 'Matched!'\n    return 'No match'\n\ndef check_literals(st, ls):\n    for l in ls:\n        if re.search(l, st):\n            return 'Matched!'\n    return 'No match'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(string,list_of_literals):\n\tlist_of_literals_regex = [re.escape(str(literal)) for literal in list_of_literals]\n\treturn re.search('|'.join(list_of_literals_regex),string)\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string, literals):\n    \"\"\"\n    :param string: The string to search in\n    :param literals: The list of literals to search for\n    :return: Return a string 'Matched!' if a literal is found in string, else return None.\n    \"\"\"\n    if re.search('|'.join(literals), string):\n        return 'Matched!'\n    else:\n        return None\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string,literals):\n    result = 'Not matched'\n    for literal in literals:\n        pattern = r'\\b'+literal+r'\\b'\n        if re.search(pattern,string):\n            result = 'Matched!'\n    return result\n\n# assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string, literals):\n    for literal in literals:\n        if re.search(literal, string):\n            return 'Matched!'\n    return 'Not Found!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string,literals):\n    for literal in literals:\n        if re.search(r'\\b'+literal+r'\\b',string):\n            return 'Matched!'\n    return 'Not Found!'"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(s1, s2, m, n):\n    subseq = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                subseq[i][j] = subseq[i - 1][j - 1] + 1\n            else:\n                subseq[i][j] = max(subseq[i - 1][j], subseq[i][j - 1])\n    return subseq[m][n]\n\n\n# assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n# assert longest_common_subsequence(\"abcde\", \"ace\", 5, 4) == 3\n# assert longest_common_subsequence(\"abcde\", \"ace\", 5, 5) == 4\n\n# from functools import reduce\n#\n#\n# def longest_common_subsequence(s1, s2, m, n):\n#     if m == 0 or n == 0:\n#         return 0\n#     if s1[m - 1] == s2[n - 1]:\n#         return 1 + longest_common_subsequence(s1, s2, m - 1, n - 1)\n#     else:\n#         return max(longest_common_subsequence(s1, s2, m, n - 1), longest_common_subsequence(s1, s2, m - 1, n))\n#\n# print(longest_common_subsequence(\"abcde\", \"ace\", 5, 4))\n# print(longest_common_subsequence(\"abcde\", \"ace\", 5, 5))\n# print(longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", ", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(str1, str2, m, n):\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(X, Y, m, n):\n    \"\"\"\n    Return the length of longest common subsequence of\n    sequences X and Y.\n    \"\"\"\n    # Create a table to store results of subproblems\n    L = [[None]*(n+1) for i in range(m+1)]\n    # Fill diagonals\n    for i in range(m+1):\n        L[i][0] = 0\n    for j in range(n+1):\n        L[0][j] = 0\n    # Fill rest of table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            # If first characters are same,\n            # then recur for second characters\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            # Else the longer of two will do\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    # Return the length of L[m][n]\n    return L[m][n]\n\ndef lcs(X, Y, m, n):\n    \"\"\"\n    Prints longest common subsequence of X[0..m-1]\n    and Y[0..n-1] in a form of table.\n    \"\"\"\n    # Print header\n    print(\"{:12s}{:12s}\".format('X[{:d}]'.format(0), 'Y[{:d}]'.format(0)))\n    # Run a loop to print subproblems\n    for i in range(1, m+1):\n        print(\"{:12s}{:12s}\".format('X[{:d}]'.format(i), 'Y[{:d}]'.format(0)))\n    for j in range(1, n+1):\n        print(\"{:12s}{:12s}\".format('X[{:d}]'.format(0), 'Y[{:d}]'.format(j)))\n    # Print L[m][n]\n    print(\"", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(seq1, seq2, m, n):\n    table = [[0 for i in range(n + 1)] for j in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if seq1[i-1] == seq2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    return table[m][n]\n\n# test case\nseq1 = \"AGGTAB\"\nseq2 = \"GXTXAYB\"", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef lcs(X, Y):\n    n, m = len(X), len(Y)\n    A = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i-1] == Y[j-1]:\n                A[i][j] = A[i-1][j-1] + 1\n            else:\n                A[i][j] = max(A[i-1][j], A[i][j-1])\n    return A[n][m]\n\n\ndef longest_common_subsequence(X, Y, n, m):\n    # Create the LCS table\n    LCS = [[None] * m for _ in range(n)]\n    LCS[0][0] = 0\n    for i in range(1, n):\n        LCS[i][0] = 0\n    for j in range(1, m):\n        LCS[0][j] = 0\n\n    # Fill the table in a bottom-up manner.\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i][j - 1], LCS[i - 1][j])\n\n    # Find the length of the LCS\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            i -= 1\n            j -= 1\n            LCS[i][j] += 1\n        elif LCS[i - 1][j] >= LCS[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return LCS[n][m", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(s1, s2, m, n):\n    '''\n    :param s1: string\n    :param s2: string\n    :param m: int\n    :param n: int\n    :return: int\n    '''\n    LCS = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i][j-1], LCS[i-1][j])\n\n    return LCS[m][n]", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef lcs(X, Y, n, m):\n    T = [[0 for x in range(m + 1)] for x in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                T[i][j] = T[i - 1][j - 1] + 1\n            else:\n                T[i][j] = max(T[i - 1][j], T[i][j - 1])\n\n    return T[n][m]\n\ndef longest_common_subsequence(X, Y):\n    n = len(X)\n    m = len(Y)\n    return lcs(X, Y, n, m)\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(seq1, seq2, m, n):\n    if m == 0 or n == 0:\n        return 0\n    if seq1[m - 1] == seq2[n - 1]:\n        return 1 + longest_common_subsequence(seq1, seq2, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(seq1, seq2, m, n-1), longest_common_subsequence(seq1, seq2, m-1, n))\n\n\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\n\ndef longest_common_subsequence_with_dp(seq1, seq2, m, n):\n    # Create an empty table of size m x n\n    # Fill the first row and first column as 0\n    table = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if seq1[i - 1] == seq2[j - 1]:\n                table[i][j] = 1 + table[i-1][j-1]\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    return table[m][n]\n\n\ndef test_longest_common_subsequence_with_dp():\n    assert longest_common_subsequence_with_dp(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\n\ndef longest_common_subsequence_with_dp_optimized(seq1, seq2, m, n):\n    table = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(s1, s2, m, n):\n    # A 2D array to keep track of LCS length of s1[0..m-1] & s2[0..n-1]\n    L = [[0]*(n+1) for i in range(m+1)]\n    # Following steps build L[m+1][n+1] in bottom up fashion. Note\n    # that L[i][j] contains length of LCS of X[0..i-1] & Y[0..j-1]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # L[m][n] contains length of LCS of X[0..m-1] & Y[0..n-1]\n    return L[m][n]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(X, Y, x, y):\n    if x == 0 or y == 0:\n        return 0\n    elif X[x - 1] == Y[y - 1]:\n        return 1 + longest_common_subsequence(X, Y, x - 1, y - 1)\n    else:\n        return max(longest_common_subsequence(X, Y, x, y - 1), longest_common_subsequence(X, Y, x - 1, y))\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\nimport math\n\ndef prod_Square(n):\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if (n/i)%i == 0:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    sqrts = set()\n    for i in range(1, int(n**0.5)+1):\n        if n%i==0:\n            sqrts.add(i)\n            sqrts.add(n//i)\n    if len(sqrts)==1:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\nfrom math import sqrt\ndef prod_Square(n):\n    for i in range(2,int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    for i in range(1, int(n**0.5)+1):\n        if n%i==0:\n            if i**2==n:\n                return True\n            if n%i!=0:\n                if n/(i**2)==i:\n                    return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\nfrom math import sqrt\n\n\ndef prod_Square(n):\n    return sqrt(n) % 1 == 0\n\n\ndef test_prod_Square():\n    assert prod_Square(25) == False\n    assert prod_Square(24) == True", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    if n < 1:\n        return False\n    # if n is power of 2 then it can be written as sum of two squares\n    if n == 1:\n        return False\n    if n & (n - 1) == 0:\n        return True\n    for i in range(3,int(n**.5)+2):\n        if n%i == 0:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    sq = 0\n    for i in range(1,int(num**0.5)+1):\n        if num%i == 0:\n            sq = sq + 1\n    if sq == 2:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\n# O(sqrt(n)) Time | O(1) Space\ndef prod_Square(num):\n    sqrt_num = int(num ** 0.5)\n    for i in range(1, sqrt_num + 1):\n        if num % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\nimport math\n\ndef prod_Square(num):\n    root = math.sqrt(num)\n    if(math.ceil(root) ** 2 == num):\n        return True\n    elif(math.floor(root) ** 2 == num):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,size):\n    # Write your code here\n    for i in range(size):\n        while arr[i] > 0 and arr[i] <= size and arr[i] - 1 != i and arr[i - 1] > arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(size):\n        if i + 1 != arr[i]:\n            return i + 1\n    return size + 1", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr,n):\n    # Write your code here\n    if n < 2:\n        return 1\n    elif n == 2:\n        return arr[1] if arr[0] != 1 else 2\n    else:\n        flag = [0]*(n+1)\n        for i in range(n):\n            flag[arr[i]] = 1\n        for i in range(2,n+1):\n            if flag[i] == 0:\n                return i\n\n\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    for i in range(len(arr)):\n        if arr[i]<=0:\n            arr[i] = n + arr[i]\n\n    for i in range(len(arr)):\n        if arr[i] > n:\n            return i + 1\n\n    return n + 1\n\ndef test_function():\n    test_cases = [\n        (4, [1, 2, 3, -1, 5], 4),\n        (2, [1, 2, 0], 3),\n        (3, [3, 4, -1, 1], 2),\n    ]\n    for case in test_cases:\n        assert case[2] == first_Missing_Positive(case[1], case[0])\n\ntest_function()", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(nums,size):\n\t# Your code here\n\tfor i in range(size):\n\t\tif nums[i] <=0:\n\t\t\tnums[i]=0\n\n\tfor i in range(size):\n\t\tif nums[i] > 0 and nums[i] <= size:\n\t\t\tcontinue\n\t\telse:\n\t\t\tnums[i] = nums[abs(nums[i])-1]\n\t\t\tnums[i] = abs(nums[i])\n\n\tfor i in range(size):\n\t\tif nums[i] != i+1:\n\t\t\treturn i+1\n\n\treturn size+1\n\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(array,size):\n\tif array==None or size<=0:\n\t\treturn -1\n\n\tfor i in range(size):\n\t\tarray[abs(array[i])-1]=array[abs(array[i])-1]*-1\n\n\tfor i in range(size):\n\t\tif array[i]>=0:\n\t\t\tcontinue\n\t\tarray[i]=abs(array[i])-1\n\n\tfor i in range(size):\n\t\tif array[i]>0:\n\t\t\treturn i+1\n\t\tif array[i]==0:\n\t\t\treturn i+2\n\n\treturn size+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(array,n):\n    #write your code here\n    for i in range(n):\n        if array[i]<=0:\n            array[i]=1\n    for i in range(1,n+1):\n        if i not in array:\n            return i\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr,n):\n    i = 0\n    while i < n:\n        if arr[i] != i+1:\n            if arr[i] < 0:\n                temp = arr[i]\n                arr[i] = -1\n                while i < n and arr[i] != temp:\n                    i+=1\n                if i < n and arr[i] == temp:\n                    arr[i] = i+1\n        i+=1\n    for i in range(n):\n        if arr[i] == -1:\n            return i+1\n    return n+1", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(seq,n):\n    i = 0\n    while i < n:\n        if seq[i] <= 0:\n            i += 1\n            continue\n        elif seq[i] == i + 1:\n            i += 1\n            continue\n        else:\n            while i < n and seq[i] != i + 1:\n                seq[seq[i]-1] = seq[i]\n                i += 1\n            if i == n:\n                break\n    for x in range(1,n+1):\n        if seq[x-1] != x:\n            return x\n    return n + 1\n\n# test cases", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(l, n):\n    return [i for i in range(1,n+1) if i not in l]\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    pos=[i for i in range(1,n+1) if i not in arr]\n    return pos[0] if pos else 1\n\n# # Test the code"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(a,b,c,d):\n    \"\"\"\n    Function to count the number of integral co-ordinates\n    \"\"\"\n    result = 0\n    for x in range(a,c+1):\n        for y in range(b,d+1):\n            if is_int(x) and is_int(y):\n                result += 1\n    return result\n\ndef is_int(x):\n    \"\"\"\n    Function to determine if a number is integral or not\n    \"\"\"\n    return abs(x - int(x)) < 1e-9\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x0, y0, x1, y1):\n    count = 0\n    if (x1 > x0 and y1 > y0):\n        count = count + (x1 - x0 + 1) * (y1 - y0 + 1)\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x,y,x1,y1):\n\tif(x < x1 and y < y1):\n\t\treturn 4\n\telif(x == x1 and y < y1):\n\t\treturn 1\n\telif(x < x1 and y == y1):\n\t\treturn 1\n\telif(x == x1 and y == y1):\n\t\treturn 0\n\telse:\n\t\treturn 0\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    return (x2-x1+1)*(y2-y1+1)", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    if x1 <= x2 and y1 <= y2:\n        return ((x2-x1+1)*(y2-y1+1))\n    else:\n        return None\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    return 1 + count_Intgral_Points(x1+1, y1, x2, y2) + count_Intgral_Points(x1, y1+1, x2, y2) + count_Intgral_Points(x1, y1, x2-1, y2) + count_Intgral_Points(x1, y1, x2, y2-1)\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(a,b,c,d):\n    \"\"\"\n    inputs:\n        a, b, c, d: the coordinates of the square\n    returns:\n        count: the number of integral co-ordinates that lie inside a square\n    \"\"\"\n    count = 0\n    for i in range(a, c+1):\n        for j in range(b, d+1):\n            if(i**2 + j**2 <= 12):\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x,y,xmax,ymax):\n    count = 0\n    for i in range(x, xmax + 1):\n        for j in range(y, ymax + 1):\n            if is_Int(i) and is_Int(j):\n                count += 1\n    return count\n\ndef is_Int(x):\n    if x - int(x) == 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\nimport math\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    return int(math.ceil((x2-x1)*1.0))+int(math.ceil((y2-y1)*1.0))\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    month = month.lower()\n    if month == \"january\":\n        return False\n    elif month == \"february\":\n        return False\n    elif month == \"march\":\n        return False\n    elif month == \"april\":\n        return False\n    elif month == \"may\":\n        return False\n    elif month == \"june\":\n        return False\n    elif month == \"july\":\n        return False\n    elif month == \"august\":\n        return False\n    elif month == \"september\":\n        return False\n    elif month == \"october\":\n        return False\n    elif month == \"november\":\n        return False\n    elif month == \"december\":\n        return False\n    else:\n        return True", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month_name):\n    if month_name == \"February\":\n        return False\n    return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(input_name):\n    if input_name in months:\n        if months[input_name] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\ndef test_check_monthnumber(self):\n    self.assertEqual(check_monthnumber(\"February\"), False)\n\n# This method will be used by the tester to test your code.\n# Don't change the method name\ndef test_suite():\n    test_cases = [\n        [\"February\", False],\n        [\"March\", False],\n        [\"April\", True],\n        [\"May\", True],\n        [\"June\", True],\n        [\"July\", True],\n        [\"August\", True],\n        [\"September\", True],\n        [\"October\", True],\n        [\"November\", True],\n        [\"December\", True],\n        [\"January\", False]\n    ]\n    suite = unittest.TestSuite()\n    for test_case in test_cases:\n        suite.addTest(MonthTest('test_check_monthnumber', test_case))\n    return suite\n\n# Run the test case", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n    monthdict={\"January\":31,\"February\":28,\"March\":31,\"April\":30,\"May\":31,\"June\":30,\"July\":31,\"August\":31,\"September\":30,\"October\":31,\"November\":30,\"December\":31}\n    if monthdict[monthname] ==30:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month == \"February\" or month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return False\n    else:\n        return True\n    ", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month == \"January\" or month == \"April\" or month == \"June\" or month == \"July\" or month == \"September\" or month == \"October\" or month == \"November\":\n        return False\n    elif month == \"February\":\n        if year % 4 == 0:\n            return False\n        else:\n            return True\n    elif month == \"March\" or month == \"May\" or month == \"August\" or month == \"December\":\n        return False\n    else:\n        return True\n# assert check_monthnumber(\"February\")==False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    return (month in [\n        \"January\", \"February\", \"April\", \"June\", \"July\", \"September\", \"November\"] or\n        month.endswith(\"th\"))\n\n# test code", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    if months.index(month)%2==0:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    c1=c2=0\n    for i in range(len(s)):\n        if(s[i].isalpha()):\n            c1=c1+1\n        if(s[i].isnumeric()):\n            c2=c2+1\n    if(c1!=0 and c2!=0):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(str):\n    if str.count(\"9\") > 0 and str.count(\"a\") > 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str):\n    return any(c.isalpha() for c in str) and any(c.isdigit() for c in str)\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    if s.isdigit() and s.isalpha():\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(str_):\n    if (re.search(r'\\d',str_)):\n        return True\n    elif (re.search(r'[a-zA-Z]',str_)):\n        return True\n    else:\n        return False\n\n# Test your code", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    #return isinstance(string, str) and any(char.isdigit() for char in string) and any(char.isalpha() for char in string)\n    return any(char.isdigit() for char in string) and any(char.isalpha() for char in string)\n\n#assert check_String('thishasboth29') == True\n#assert check_String('just_a_String') == False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_string(string):\n    has_letter = False\n    has_number = False\n    for s in string:\n        if s.isalpha():\n            has_letter = True\n        if s.isnumeric():\n            has_number = True\n    return has_letter and has_number\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_string(s):\n    for i in s:\n        if i.isalpha() or i.isdigit():\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(s):\n    if bool(re.search(r'\\d',s)) and bool(re.search(r'[a-zA-Z]', s)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str):\n\tif(any(c.isalpha() for c in str) and any(c.isnumeric() for c in str)):\n\t\treturn True\n\telse:\n\t\treturn False"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    \"\"\"\n    Takes in a tuple and returns a list of unique values\n\n    Args:\n       tup(tuple): Tuple containing values that needs to be removed of duplicates\n    Returns:\n       list: list of unique values\n    \"\"\"\n    unique_list = []\n    for i in tup:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tuple):\n    return list(set(tuple))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(t):\n    return tuple(set(t))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(t):\n    return list(set(t))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\nfrom functools import reduce\n\ndef remove_tuple(tup):\n    return reduce(lambda x,y: x if x not in y else x, tup)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tuple_):\n    temp_tuple = list(tuple_)\n    temp_tuple.sort()\n    for i in range(len(temp_tuple)):\n        if i == len(temp_tuple) - 1:\n            break\n        if temp_tuple[i] == temp_tuple[i+1]:\n            del temp_tuple[i]\n    return tuple(temp_tuple)\n\n\n#assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n#assert remove_tuple((3, 2, 1, 3, 5, 1, 3)) == (1, 2, 3, 5)\n#assert remove_tuple((2, 2, 2, 2, 2, 2, 2)) == (2,)\n#assert remove_tuple((2, 1, 2, 2, 1)) == (1, 2)\n#assert remove_tuple((1, 1, 1, 1, 1)) == (1,)\n#assert remove_tuple((1, 1)) == (1,)\n#assert remove_tuple((1, )) == (1,)\n#assert remove_tuple(()) == ()\n#assert remove_tuple((1, 1, 1, 1, 1, 1, 1, 1)) == (1, )\n#assert remove_tuple((1, 1, 1, 1, 1, 1, 1)) == (1, )\n#assert remove_tuple((1, 1, 1, 1, 1, 1, 1, 1, 1)) == (1, )\n#assert remove_tuple((1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) == (1, )\n#assert remove_tuple((1", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_duplicates(tup):\n    for i in range(len(tup)):\n        for j in range(i+1, len(tup)):\n            if tup[i] == tup[j]:\n                del tup[j]\n                j -= 1\n    return tup\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\nfrom typing import List\n\n\ndef remove_tuple(lst: tuple) -> List:\n    result = []\n    for x in lst:\n        if x not in result:\n            result.append(x)\n    return result\n\n\ndef test_function(test_case):\n    output = remove_tuple(test_case[0])\n    solution = test_case[1]\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(((1, 3, 5, 2, 3, 5, 1, 1, 3), (1, 2, 3, 5)))", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    \"\"\"\n    Remove the duplicates from the given tuple.\n\n    Args:\n       tup(tuple): tuple containing numbers\n    Returns:\n       list: list containing the unique numbers\n    \"\"\"\n    return [x for x in tup if tup.count(x) == 1]", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tup):\n    i = 0\n    while i < len(tup) - 1:\n        if tup[i] == tup[i + 1]:\n            tup.pop(i)\n            tup.pop(i)\n        else:\n            i += 1\n    return tup\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    decimal = 0\n    octal = octal*10\n    while octal != 0:\n        decimal = decimal + (octal % 10)\n        octal = octal // 10\n    return decimal\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(num):\n    r\"\"\"\n    Convert octal number to decimal number.\n    \n    Parameters\n    ----------\n    num: int\n        Input octal number.\n    \n    Returns\n    -------\n    num: int\n        Converted decimal number.\n    \n    Examples\n    --------\n    >>> octal_To_Decimal(25)\n    21\n    \"\"\"\n    num = str(num)\n    return int(num, 8)", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n    decimal = 0\n    count = 0\n    for i in str(octal_number):\n        decimal += int(i) * (8 ** count)\n        count += 1\n    return decimal\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_num):\n\t'''\n\tTakes an octal number as argument and returns the decimal number equivalent.\n\t'''\n\treturn(octal_num)\n\t#return bin_To_Decimal(oct(octal_num)[2:]) #remove '0o' part\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(num):\n    return 0\n\ndef main():\n    for i in range(10):\n        print (octal_To_Decimal(i))\n        ", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(oct):\n    return sum(int(c) for c in str(oct))\n\n# assert octal_To_Decimal(25) == 21", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(n):\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 0\n    if n % 10 == 0:\n        return n * pow(8,len(str(n)))\n    return n * pow(8,len(str(n))-1) + (n % 10)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    return int(octal,8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n\tdecimal = 0\n\tmultipliers = [1,8,64,512,4096,32768,262144,2097152,16777216,134217728,1073741824,8589934592,72057594037927936,614891462917470592,5242880000000000000]\n\tif octal == 0:\n\t\treturn 0\n\telse:\n\t\tfor i in range(len(octal)):\n\t\t\tvalue = int(octal[i])\n\t\t\tdecimal = decimal + value * multipliers[len(octal)-i-1]\n\treturn decimal\n\ndef test_octal_To_Decimal():\n\tassert octal_To_Decimal(25) == 21\n\tassert octal_To_Decimal(0) == 0\n\tassert octal_To_Decimal(22) == 18\n\ntest_octal_To_Decimal()", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(oct):\n    return octal_to_decimal(oct)\n\ndef octal_to_decimal(oct):\n    result = 0\n    for i in range(len(str(oct))):\n        result = result + (int(str(oct)[i]) * (8 ** (len(str(oct)) - 1 - i)))\n    return result\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, item):\n    first = -1\n    start = 0\n    end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == item:\n            first = mid\n            break\n        if array[mid] > item:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return first\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, x, lo, hi):\n    if lo < hi:\n        mid = (lo+hi)//2\n        if x == array[mid]:\n            if mid == 0 or array[mid-1] < x:\n                return mid\n            else:\n                return first(array, x, lo, mid-1)\n        elif x > array[mid]:\n            return first(array, x, mid+1, hi)\n        else:\n            return first(array, x, lo, mid-1)\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, low, high):\n    if low == high:\n        return low\n    mid = (low + high) // 2\n    if arr[mid] == low:\n        return first(arr, low, mid - 1)\n    if arr[mid] == high:\n        return first(arr, mid + 1, high)\n    if arr[mid] > low:\n        return first(arr, low, mid - 1)\n    return first(arr, mid + 1, high)\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(nums, search):\n    \"\"\"\n    The solution to this problem involves using a bisection search algorithm.\n    Bisection search starts by setting the left and right index to the first and last index in the array.\n    Then, the middle index is computed using the formula middle = (left + right) // 2.\n    The element at the middle index is compared to the search element.\n    If the element at the middle index is equal to the search element,\n    then the first occurrence of the search element is found and its index is returned.\n    Otherwise, if the search element is greater than the element at the middle index,\n    then the right index is set to the middle index minus 1 and the algorithm is repeated.\n    Otherwise, if the search element is less than the element at the middle index,\n    then the left index is set to the middle index plus 1 and the algorithm is repeated.\n    This algorithm continues until the left index becomes equal to the right index or the left index is greater than the right index.\n    In the event that the search element is not found, then -1 is returned.\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if nums[middle] == search:\n            return middle\n        elif nums[middle] > search:\n            right = middle - 1\n        else:\n            left = middle + 1\n    return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(a, x, y):\n    if len(a) == 0:\n        return -1\n    if x >= y:\n        return -1\n    if a[x] == x:\n        return x\n    if a[y] == y:\n        return y\n    return first(a, x+1, y-1)", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(A,x,y):\n    \"\"\"\n    Finds first position of x in A between index y and A.len-1\n    \"\"\"\n    if y>len(A)-1:\n        return -1\n    elif x==A[y]:\n        return y\n    elif x<A[y]:\n        return first(A,x,y-1)\n    else:\n        return first(A,x,y+1)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(A,x,n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (high + low)//2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,l,h):\n\tif arr[l] == h:\n\t\treturn l\n\tif l == h:\n\t\treturn -1\n\tmid = (l+h)//2\n\tif arr[mid] < h:\n\t\treturn first(arr,mid+1,h)\n\telse:\n\t\treturn first(arr,l,mid)", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,search_el,key=lambda x: x):\n    left = 0\n    right = len(arr) - 1\n    if left > right:\n        return -1\n    while left <= right:\n        mid = (left + right) // 2\n        if key(arr[mid]) < search_el:\n            left = mid + 1\n        elif key(arr[mid]) > search_el:\n            right = mid - 1\n        else:\n            return mid\n    return left\n\ndef first_index(arr,search_el,key=lambda x: x):\n    return first(arr,search_el,key)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(a, x, y):\n    for i in range(0, len(a)):\n        if (a[i] == x or a[i] == y):\n            return i\n    return -1\n\n\n# assert first([1,2,3,4,5,6,6],6,6) == 5"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(list_tuples, k):\n    output = []\n    for t in list_tuples:\n        if len(t) != k:\n            output.append(t)\n    return output\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(my_list, k):\n    result = []\n    for i in my_list:\n        if len(i) != k:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(my_list, k):\n    for i in range(len(my_list)):\n        if len(my_list[i]) == k:\n            del my_list[i]\n\n    return my_list\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(arr, k):\n    return [a for a in arr if len(a) > k]", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(array, k):\n    \"\"\"Takes an array and the length k and removes all the tuples of length k from the array\"\"\"\n    return [x for x in array if len(x) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\nimport unittest\n\ndef remove_tuples(L, k):\n\treturn [x for x in L if len(x) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(ls, k):\n    res = []\n    for i in ls:\n        if len(i) != k:\n            res.append(i)\n    return res\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    res = []\n    for t in tuples:\n        if len(t) == k:\n            continue\n        res.append(t)\n    return res", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(lst, k):\n    l = len(lst)\n    for i in range(l):\n        temp = lst[i]\n        for j in range(i + 1, l):\n            if len(temp) + len(lst[j]) == k:\n                lst[i] += lst[j]\n                del lst[j]\n                break\n    return lst\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(l, k):\n    return [x for x in l if len(x) != k]\n\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\n# def find_exponentio(tup_a, tup_b):\n#     # return tup_a[0]*tup_b[0]*tup_a[1]*tup_b[1]*tup_a[2]*tup_b[2]*tup_a[3]*tup_b[3]\n#     return tuple(i*j for i, j in zip(tup_a, tup_b))\n\ndef find_exponentio(tup_a, tup_b):\n    result = [tup_a[0]*tup_b[0]]\n    for i in tup_a[1:]:\n        result.append(result[-1]*i)\n    for i in tup_b[1:]:\n        result.append(result[-1]*i)\n    return tuple(result)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(n, m):\n    for i in range(4):\n        if m[i] >= n[i]:\n            m[i] -= n[i]\n            n[i] = 0\n        else:\n            break\n    return tuple(n) + tuple(m)", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\n# Keep your function more readable and generic\n# when using tuples as arguments\ndef find_exponentio(x, y):\n    result = (1, 1, 1, 1)\n    for i in x:\n        for j in y:\n            result = tuple((a*b) % MOD for a,b in zip(result, (i, j)))\n    return result\n\nMOD = 10 ** 9 + 7", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(a, b):\n    result = (1, 1, 1, 1)\n    for i in range(len(a)):\n        if a[i] == 0 and b[i] == 0:\n            result = (0, 0, 0, 0)\n        elif a[i] == 0:\n            result = (0, 0, 0, result[3] * b[i])\n        elif b[i] == 0:\n            result = (result[0] * a[i], 0, 0, result[3] * b[i])\n        else:\n            result = (result[0] * a[i], result[1] * a[i] * b[i], result[2] * a[i] * b[i], result[3] * b[i])\n    return result\n\n# assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\nimport functools\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Optional\nfrom typing import Tuple\n\n\ndef _find_exponentio(\n    left: Tuple[Any], right: Tuple[Any], power: int, memo: Dict[Tuple, Tuple]\n) -> Tuple[Any, Any]:\n    if power == 0:\n        return 1, 0\n    if power == 1:\n        return left, right\n    if power in memo:\n        return memo[power]\n\n    result = _find_exponentio(left, right, power // 2, memo)\n    result_left = result[0] * result_right = result[1] * result[1]\n    result_left *= result_right\n    result_left *= left if power % 2 == 0 else right\n    result_right *= left if power % 2 == 0 else right\n\n    memo[power] = result\n    return result_left, result_right\n\n\ndef find_exponentio(left: Tuple[Any], right: Tuple[Any]) -> Tuple[Any, Any]:\n    return _find_exponentio(left, right, len(left) + len(right), {})\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\nimport math\n\ndef find_exponentio(base, exponent):\n    \"\"\"\n    >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n    (100000, 4096, 78125, 7776)\n    \"\"\"\n    product = base[0]\n    for i in range(1, len(base)):\n        product *= base[i]\n\n    power = exponent[0]\n    for i in range(1, len(exponent)):\n        power *= exponent[i]\n\n    return (product, power, math.pow(product, power), math.pow(product, power) % 100000)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(tup1, tup2):\n    ans = ()\n    for i in tup1:\n        for j in tup2:\n            ans += (i**j,)\n    return ans\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(tup1, tup2):\n    \"\"\"\n    Returns the tuple of the result of exponentiating every element of the\n    first tuple by the corresponding element of the second tuple.\n    \"\"\"\n    # Create a list of tuples\n    product_list = []\n    # Zip the tuples and multiply the corresponding elements\n    for a, b in zip(tup1, tup2):\n        product_list.append(a * b)\n    return tuple(product_list)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n\tresult = []\n\tfor i in range(0,len(a)):\n\t\tc = 0\n\t\tfor j in range(0,len(b)):\n\t\t\tif a[i] == b[j]:\n\t\t\t\tc += 1\n\t\tresult.append(c)\n\treturn tuple(result)\n\n# assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n# assert find_exponentio((5, 6, 7, 5), (10, 4, 5, 6)) == (100000, 4096, 78125, 7776)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\nimport itertools\nfrom typing import Iterable\n\nfrom .prime_factors import find_prime_factors\n\n\ndef find_exponentio(lhs: Iterable, rhs: Iterable) -> tuple:\n    \"\"\"\n    Iterative method for exponentiation\n    \"\"\"\n    num, den = lhs\n    den, num = den, num * den\n    power, rest = 1, 1\n    for p in rhs:\n        power *= num\n        rest = rest * den % num\n        den, num = num, rest\n    return power, den, num, rest\n\n\ndef find_exponentio_recursive(lhs: Iterable, rhs: Iterable) -> tuple:\n    \"\"\"\n    Recursive method for exponentiation\n    \"\"\"\n    if not rhs:\n        return 1, 1, 1, 1\n    p, d, n, r = find_exponentio(lhs, rhs[1:])\n    return p * n, d, n * r % d, r\n\n\ndef find_exponentio_prime(lhs: Iterable, rhs: Iterable) -> tuple:\n    \"\"\"\n    Method for exponentiation, with using prime factorization\n    \"\"\"\n    def get_prime_power(value: int, num: int) -> tuple:\n        _, p, num = find_prime_factors(num)\n        return value, p ** min(p, num)\n\n    num, den = lhs\n    num, den = tuple(map(get_prime_power, (num, den)))\n    power, rest = 1, 1\n    for p, q in zip(num, rhs):\n        power *= p ** q\n        rest = rest * den % p ** q\n        den, num = num, rest\n    return power, den, num, rest\n\n\ndef find_exponentio_prime_recursive(lhs: Iterable, rhs: Iterable) -> tuple:\n    \"\"\"\n    Method for exponentiation, with using prime factorization\n    Recursive method\n    \"\"\"\n    if not rhs:\n        return 1, 1, 1, 1\n    num, den = lhs\n    p, q = num\n    p, q = tuple"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    \"\"\"\n    a and b are the lengths of the major and minor axes of the ellipse.\n    \"\"\"\n    return (a+b)*np.sqrt(4-(a-b)**2)\n\n\ndef f(x):\n    \"\"\"\n    Write a function that takes in two parameters and returns the area of\n    a triangle with the given height and base.\n    \"\"\"\n    return 0.5*x**2\n\n\ndef integrate_triangle(height,base):\n    \"\"\"\n    Write a function that takes in the height and base of a triangle and\n    returns the area of the triangle.\n    \"\"\"\n    return 0.5*height*base\n\ndef triangles(base,height):\n    return integrate_triangle(height,base)\n\ndef area(radius,angle):\n    return np.pi*radius**2*np.sin(angle)\n\ndef swept_area(radius,angle):\n    return np.pi*radius*radius*angle\n\ndef circle_area(radius):\n    return np.pi*radius*radius\n\ndef area_of_circle(radius):\n    return np.pi*radius*radius\n\ndef integrate_circle(radius):\n    \"\"\"\n    Return the area of a circle of radius radius.\n    \"\"\"\n    return 0.5*area_of_circle(radius)\n\ndef integrate_ellipse(a,b):\n    \"\"\"\n    Return the area of an ellipse of major and minor axis lengths a and b.\n    \"\"\"\n    return 0.5*(a+b)*np.sqrt(4-(a-b)**2)\n\ndef integrate_parabola(c,a):\n    return integrate.quad(lambda x:c*x*x-a*x,0,np.inf)[0]\n\ndef integrate_curve(f,a,b):\n    return integrate.quad(lambda x:f(x),a,b)[0]\n\ndef area_of_curve(f,a,b):\n    \"\"\"\n    Write a function that takes in a function and an interval [a,b]\n    and returns the area under the curve f(x", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    print(a,b)\n    return (a+b)**2*math.sin(math.asin(math.sqrt(b/a)))/2\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nimport math\n\n\ndef largest_triangle(a, b):\n    return math.sqrt(4 * a ** 2 * b ** 2 - (a ** 2 - b ** 2) ** 2)\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfrom math import sqrt\n\n\ndef largest_triangle(a, b):\n    \"\"\"\n    :param a: 1st axis length of ellipse\n    :param b: 2nd axis length of ellipse\n    :return: largest triangle inscribed in ellipse\n    \"\"\"\n    sqrt2 = sqrt(2)\n    h = (a + b) / 2\n    return max(sqrt2 * h, sqrt(h * h + a * b) / 2)\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfrom itertools import permutations\nimport math\n\ndef is_triangle(side1, side2, side3):\n    return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1\n\ndef largest_triangle(a, b):\n    return max(sides for sides in permutations(range(2*a, 2*a + 2*b), 3) if is_triangle(*sides))\n\n# print(largest_triangle(3,2))", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n\treturn a*b*sin(pi/4)\n\ndef largest_triangle_inscribed_in_ellipse(a,b):\n\t\"\"\"\n\tSolution 1:\n\thttps://www.math.hmc.edu/calculus-2/unit-3/lesson-7-the-largest-inscribed-triangle-on-an-ellipse\n\t\"\"\"\n\treturn (a**2 + b**2 - sqrt(a**4 + b**4))/2.0\n\ndef largest_triangle_inscribed_in_ellipse_2(a,b):\n\t\"\"\"\n\tSolution 2:\n\thttps://stackoverflow.com/questions/22992696/largest-inscribed-triangle-in-an-ellipse\n\t\"\"\"\n\treturn 2*sqrt(a**2+b**2)*tan(pi/4)\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\ndef largest_triangle(a, b):\n    \"\"\"find the largest triangle that can be inscribed in an ellipse\"\"\"\n    x = 0\n    y = 0\n    while x < 1:\n        while y < 1:\n            if math.hypot(x, y) ** 2 == a * b:\n                return 2 * math.hypot(x, y)\n            y += 1\n        x += 1\n        y = 0\n    return 0\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n\t\"\"\"\n\t:param a: ellipse major axis\n\t:param b: ellipse minor axis\n\t:return: largest triangle height\n\t\"\"\"\n\treturn (a*b)/sqrt(a**2-b**2)\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\n\ndef largest_triangle(a,b):\n    if a>b:\n        a,b=b,a\n    s=math.sqrt(b*b-a*a)\n    return a*s/(2*math.sin(math.asin(a/b)))\n\ndef main():\n    a,b=map(int,input().split())\n    print(largest_triangle(a,b))\n\nmain()", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    return min(a,b)*sqrt(1-((max(a,b)/min(a,b))**2))\n\n# Main"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    p = 0\n    while(2**p <= n):\n        p+=1\n    return p-1\n\ndef test():\n    assert highest_Power_of_2(10) == 8\n    assert highest_Power_of_2(15) == 4\n    assert highest_Power_of_2(16) == 4\n    assert highest_Power_of_2(20) == 4\n    assert highest_Power_of_2(21) == 5\n    print(\"Test Success\")\n\ntest()", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# define a function to find highest power of 2\ndef highest_Power_of_2(n):\n    if n == 1:\n        return n\n    else:\n        return n << 1\n\n# call function", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(num):\n    x = 1\n    while x<=num:\n        x = x*2\n    x = x//2\n    return x\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(x):\n    return int(math.log(x, 2))\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n & (n-1) == 0:\n        return n\n    else:\n        i = 0\n        while (n& 2) == 0:\n            n >>= 1\n            i+=1\n        return (2**(i))\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    # write your code here\n    x = 1\n    while x <= n:\n        if x**2 <= n:\n            x += 1\n        else:\n            return x-1\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Solution 1\n\ndef highest_Power_of_2(num):\n    n = 1\n    while n <= num:\n        n *= 2\n    return n//2\n\n\n# Solution 2\n\ndef highest_Power_of_2(num):\n    num -= 1\n    n = 1\n    while n <= num:\n        n *= 2\n    return n//2\n\n\n# Solution 3\n\ndef highest_Power_of_2(num):\n    return (1 << ((num - 1).bit_length()))", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(num):\n    \"\"\"\n    >>> highest_Power_of_2(10)\n    8\n    \"\"\"\n    if num == 1:\n        return 1\n    if num % 2 == 0:\n        return num // 2\n    return highest_Power_of_2(num // 2)\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(number):\n    result = 0\n    while number > 1:\n        number = number >> 1\n        result += 1\n    return result\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    p = 0\n    while True:\n        n //= 2\n        p += 1\n        if n == 0:\n            return p\n        if n%2 != 0:\n            return p-1\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(numbers):\n    \"\"\"\n    :param numbers: list\n    :return:\n    \"\"\"\n    return [i for i, n in enumerate(numbers) if n == max(numbers)]", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    maxes = [i for i, x in enumerate(lst) if x == max(lst)]\n    return maxes\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(list_of_numbers):\n    index_max = []\n    for i in range(len(list_of_numbers)):\n        if list_of_numbers[i] == max(list_of_numbers):\n            index_max.append(i)\n    return index_max\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(input):\n    return [i for i,x in enumerate(input) if x == max(input)]", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(numbers):\n    index = []\n    max_val = numbers[0]\n    for idx, number in enumerate(numbers):\n        if number > max_val:\n            max_val = number\n            index = [idx]\n        elif number == max_val:\n            index.append(idx)\n    return index\n\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(values):\n    if len(values) == 0:\n        return []\n    max_pos = 0\n    max_value = values[0]\n    for i, value in enumerate(values):\n        if max_value < value:\n            max_pos = i\n            max_value = value\n    return [max_pos]\n\nposition_max([12,33,23,10,67,89,45,667,23,12,11,10,54])```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nQ2. Check if a list of integers is a permutation of another list of integersWrite a function to check if a list of integers is a permutation of another list of integers.\n\n### Code:\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(arr):\n    return [i for i, num in enumerate(arr) if num == max(arr)]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\n# naive solution\ndef position_max(lst):\n    pos = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i]>lst[j]:\n                pos.append(i)\n    return pos\n\n# more efficient solution\ndef position_max_2(lst):\n    pos = []\n    for i in range(len(lst)):\n        if lst[i] == max(lst):\n            pos.append(i)\n    return pos\n\n# test", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(array):\n    max = array[0]\n    max_pos = 0\n    i=1\n    while i<len(array):\n        if array[i]>max:\n            max = array[i]\n            max_pos=i\n        i+=1\n    return [max_pos]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\nimport numpy as np\n\ndef position_max(L):\n    assert type(L)==list\n    pos_max = []\n    for i in range(len(L)):\n        if(L[i]>max(L)):\n            pos_max.append(i)\n    return pos_max\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    return True", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(L):\n    return all([x==L[0] for x in L])\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(list1):\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!=j:\n                if list1[i]!=list1[j]:\n                    return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            return False\n    return True\n\n# test case", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    l = len(lst)\n    if l == 0:\n        return True\n    return lst[0] == lst[1] and chkList(lst[1:])", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(mylist):\n    for i in range(len(mylist)):\n        for j in range(i,len(mylist)):\n            if mylist[i] == mylist[j]:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(arr):\n    if len(arr) == len(set(arr)):\n        return True\n    return False\n\n# driver code", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    if len(lst) == 0:\n        return True\n    else:\n        if lst[0] == lst[1]:\n            return chkList(lst[2:])\n        else:\n            return False\n\n# Driver code", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    seen = set()\n    return len(lst) == len(seen.add(lst[0]))\n\n#assert chkList(['one','one','one']) == True\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(s):\n    s = list(s)\n    for i in range(0, len(s)):\n        if(s[i]%2 == 0):\n            s.pop(i)\n    return ''.join(s)\n\n\ndef main():\n    print(remove_even(\"python\"))\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    return ''.join(x for x in string if x % 2 != 0)\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    result = ''\n    for c in string:\n        if c%2 != 0:\n            result += c\n    return result\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\n# Solution\ndef remove_even(string):\n    # your code here\n    return str(string).translate(str.maketrans('', '', '02468'))\n\n# Tests", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    new = \"\"\n    for i in string:\n        if int(i)%2 != 0:\n            new += i\n    return new\n\n#Tests", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\n# Function to remove even characters in a string\ndef remove_even(string):\n    # Create an empty string and append the odd characters\n    new_string = \"\"\n    for char in string:\n        if char%2 != 0:\n            new_string += char\n    return new_string\n\n# Test your function", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    # remove even characters from string\n    string = [string[i] if i%2==0 else \" \" for i in range(len(string))]\n    return \"\".join(string)", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(str_list):\n  result = \"\"\n  for i in str_list:\n    if i % 2 == 0:\n      continue\n    else:\n      result = result + i\n  return result\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(input):\n    return ''.join(x for x in input if x%2!=0)\n\ndef test_remove_even():\n    assert remove_even(\"python\")==(\"pto\")\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    a = list(string)\n    for i in range(0, len(a)):\n        if i % 2 == 0:\n            a.pop(i)\n    return ''.join(a)\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_distance(number1, number2):\n\tdistance = 0\n\tbinary_number1 = bin(number1)[2:]\n\tbinary_number2 = bin(number2)[2:]\n\tfor i in range(len(binary_number1)):\n\t\tdistance += int(binary_number1[i]) ^ int(binary_number2[i])\n\treturn distance", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(n1, n2):\n    count = 0\n    while n1 != 0 or n2 != 0:\n        n1 = n1 & (n1 - 1)\n        n2 = n2 & (n2 - 1)\n        count += 1\n    return count\n\n#Hamming Distance using bitwise operator\ndef hamming_Distance_b(n1, n2):\n    \"\"\"\n    Write a python function to find the hamming distance between given two integers.\n    assert hamming_Distance(4,8) == 2\n    \"\"\"\n    return bin(n1 ^ n2).count(\"1\")\n\ndef main():\n    assert hamming_Distance(4,8) == 2\n    assert hamming_Distance_b(4,8) == 2\n    print(\"Hamming Distance: \")\n    print(hamming_Distance(4,8))\n    print(hamming_Distance_b(4,8))\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n    return bin(x ^ y).count(\"1\")\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_distance(int1, int2):\n    if int1 == int2:\n        return 0\n    if int1 ^ int2 != 0:\n        return 1\n    return 2\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x,y):\n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    return len(x) - len(y)\n\n#assert hamming_Distance(4,8) == 2\n#print(hamming_Distance(4,8))", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x,y):\n    return bin(x ^ y).count(\"1\")\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_distance(a,b):\n    distance = 0\n    while a != b:\n        distance +=1\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return distance\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n    return bin(x^y).count(\"1\")\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_distance(a, b):\n    if(a>b):\n        a,b=b,a\n    count=0\n    while a>0:\n        if a%2==1:\n            count+=1\n        a=a//2\n    return count+hamming_distance(b//2,b%2)\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n# time complexity: O(1) space complexity: O(1)\ndef hamming_Distance(a, b):\n\t\"\"\"\n\t:type a: int\n\t:type b: int\n\t:rtype: int\n\t\"\"\"\n\treturn bin(a^b).count('1')\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str,c):\n    count = 0\n    for char in str:\n        if char == c:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str,char):\n    return str.count(char)\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\n# Use lambda function\n\ndef count(str,ch):\n    return str.count(ch)\n\ndef test():\n    assert count(\"abcc\",\"c\") == 2\n    assert count(\"abc\",\"a\") == 3\n    assert count(\"abc\",\"b\") == 2\n    print(\"All Passed\")\n\ntest()\n\n\n#Use a map\ndef count(str,ch):\n    return len(list(filter(lambda x: x==ch,str)))\n\ndef test():\n    assert count(\"abcc\",\"c\") == 2\n    assert count(\"abc\",\"a\") == 3\n    assert count(\"abc\",\"b\") == 2\n    print(\"All Passed\")\n\ntest()\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str,char):\n  count=0\n  for i in str:\n    if i == char:\n      count+=1\n  return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str, ch):\n    c = 0\n    for i in str:\n        if i == ch:\n            c += 1\n    return c\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, char):\n    n = 0\n    for s in string:\n        if s == char:\n            n += 1\n    return n\n\n# TEST CASE", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\n# Solution\ndef count(string,character):\n    count=0\n    for i in string:\n        if i==character:\n            count+=1\n    return count\n\n# Testing", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string,char):\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, character):\n    if string == None:\n        return 0\n    else:\n        count = 0\n        for i in range(len(string)):\n            if string[i] == character:\n                count += 1\n        return count\n\n\n#testcases\nstring1 = \"abcc\"\ncharacter1 = \"c\"", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(myString, char):\n  if len(myString) == 0:\n    return 0\n  return 1 + count(myString[1:], char) if myString[0] == char else count(myString[1:], char)\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom typing import List\n\n\ndef inversion_elements(list_of_tuples: List[tuple]) -> List[int]:\n    \"\"\"\n    Finds and returns the inversions of elements of given tuple list.\n\n    Parameters\n    ----------\n    list_of_tuples : List[tuple]\n        A list of tuples.\n\n    Returns\n    -------\n    List[int]\n        The inversions of elements in the list_of_tuples.\n    \"\"\"\n    list_of_tuples_size = len(list_of_tuples)\n    inversions = [None for _ in range(list_of_tuples_size)]\n\n    for index, tuple_value in enumerate(list_of_tuples):\n        for tuple_index, tuple_value_index in enumerate(tuple_value):\n            if tuple_index >= index and tuple_value_index < list_of_tuples_size:\n                if inversions[tuple_value_index] is None:\n                    inversions[tuple_value_index] = index\n                elif tuple_value_index < inversions[tuple_value_index]:\n                    inversions[tuple_value_index] = index\n\n    return inversions", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\nfrom typing import List\n\n# here we can use list comprehension to achieve our goal.\n# the if statement can use lambda function.\n# lambda is a anonymous function.\n# we can use it to shorten code.\n\ndef inversion_elements(elements: List[int]) -> List[int]:\n    return [elem * -1 for elem in elements if elem % 2 == 0]\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom collections import Counter\nfrom itertools import accumulate\nfrom functools import reduce\nfrom typing import Iterable, Tuple, Iterator, List, Any\n\ndef inversion_elements(items: Iterable[Any]) -> List[int]:\n    \"\"\"\n    Complexity: O(nlogn)\n    \"\"\"\n    return [i for i in accumulate(sorted(items), lambda x, y: x > y) if i == 0]\n\n\ndef inversion_elements2(items: Iterable[Any]) -> List[int]:\n    \"\"\"\n    Complexity: O(n)\n    \"\"\"\n    count = Counter(items)\n    inversions = 0\n    for x, v in count.most_common():\n        inversions += v * (v - 1) // 2\n    return inversions\n\n\ndef inversion_elements3(items: Iterable[Any]) -> List[int]:\n    \"\"\"\n    Complexity: O(n)\n    \"\"\"\n    return list(map(lambda pair: pair[1] * (pair[1] - 1) // 2, Counter(items).most_common()))\n\n\ndef inversion_elements4(items: Iterable[Any]) -> List[int]:\n    \"\"\"\n    Complexity: O(n)\n    \"\"\"\n    return [x * (x - 1) // 2 for x in Counter(items).values()]\n\n\ndef inversion_elements5(items: Iterable[Any]) -> List[int]:\n    \"\"\"\n    Complexity: O(n)\n    \"\"\"\n    return reduce(lambda acc, x: acc + x * (x - 1) // 2, Counter(items).values(), 0)\n\n\ndef inversion_elements6(items: Iterable[Any]) -> List[int]:\n    \"\"\"\n    Complexity: O(n)\n    \"\"\"\n    items = sorted(items)\n    inversions = []\n    for i in range(len(items)):\n        if i > 0 and items[i] <= items[i - 1]:\n            inversions.append(items[i - 1])\n    return inversions\n\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom random import randint, shuffle\n\n\ndef inversion_elements(t):\n    l = len(t)\n    res = []\n\n    for i in range(l):\n        for j in range(i + 1, l):\n            if t[i] > t[j]:\n                res.append((t[i], t[j]))\n\n    return res\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom collections import Counter\nimport random\n\n\ndef inversion_elements(elements):\n    count = Counter(elements)\n    for i in range(len(elements)):\n        for j in range(len(elements)):\n            if elements[i] > elements[j]:\n                if count[elements[i]] > 0:\n                    count[elements[i]] -= 1\n                    count[elements[j]] += 1\n                else:\n                    raise ValueError('something wrong')\n    return [key for key, value in count.items() if value > 0]\n\n\ndef test_inversion_elements():\n    n = 5\n    elements = tuple(random.randint(0, n ** 2) for _ in range(n))\n    assert set(inversion_elements(elements)) == set(\n        elements[::-1][::-1]\n    ) - set(elements)\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\nfrom typing import List\n\n\ndef inversion_elements(seq: List[int]) -> List[int]:\n    if not seq:\n        return []\n\n    inverted = []\n\n    for number in seq:\n        inverted.append(number)\n\n    inverted.sort()\n\n    return inverted\n\n\ndef test_inversion_elements() -> None:\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    assert inversion_elements((2, 1, 3, 5, 4, 6)) == (3, 5, 4, 6, 2, 1)\n    assert inversion_elements((1, 1)) == (1, 1)\n    assert inversion_elements((1)) == (1,)\n    assert inversion_elements(()) == ()\n    assert inversion_elements(tuple()) == tuple()", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\nfrom time import time\n\ndef sort_list(a):\n    \"\"\"\n    Function to sort a list in ascending order\n    \"\"\"\n    a.sort()\n    return a\n\ndef inversion_elements(a):\n    \"\"\"\n    Function to find the inversions of tuple elements in the given tuple list.\n    \"\"\"\n    return sort_list([abs(i) for i in a])\n\na = (7, 8, 9, 1, 10, 7)", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\n# To understand the basic idea behind the problem, just look at this diagram:\n# 7       8       9     1     10     7\n# |       |       |     |     |     |\n# |       |       |     |     |     |\n# 10      8      7     1     10     7\n# |       |       |     |     |     |\n# |       |       |     |     |     |\n# 8       8      7     1     10     7\n# |       |       |     |     |     |\n# |       |       |     |     |     |\n# 9       9      7     1     10     7\n# |       |       |     |     |     |\n# |       |       |     |     |     |\n# 9       9      7     1     10     7\n# |       |       |     |     |     |\n# |       |       |     |     |     |\n# 9       9      7     1     10     7\n\n# The key observation here is that the inversion occurs when we consider pairs of elements of the tuple, and\n# if the first element is greater than the second, then the pair is an inversion.\n\n# The first idea that comes to mind is to have two counters: one that counts down and one that counts up,\n# and then increment or decrement those two counters depending on the pair.\n# If one of the counters is above the other, then the pair is an inversion.\n\n# O(n) solution\ndef inversion_elements(tuple_list):\n    up_counter, down_counter = len(tuple_list)-1, 0\n\n    for index in range(len(tuple_list)):\n        # the first element is already in the right position\n        if index == 0:\n            continue\n\n        if tuple_list[index] < tuple_list[index-1]:\n            down_counter += 1\n        elif tuple_list[index", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nimport pytest\n\n\ndef inversion_elements(input_list):\n    \"\"\"\n    >>> inversion_elements((7, 8, 9, 1, 10, 7))\n    (-8, -9, -10, -2, -11, -8)\n    \"\"\"\n    # use a list of tuples, where each tuple contains:\n    #   the value of the number\n    #   the index\n    #   the count of inversions\n    # the list is sorted by value, then by index\n    result = []\n    for n in sorted(input_list, reverse=True):\n        inversion_count = 0\n        # use a list of tuples, where each tuple contains:\n        #   the value of the number\n        #   the index\n        #   the count of inversions\n        # iterate through the sorted list, stopping at the first value that is\n        # larger than the value of n\n        for i, (val, idx, inv_count) in enumerate(result):\n            if val > n:\n                # we have found an inversion\n                inversion_count += inv_count + 1\n                # insert the number and its inversion count in the result\n                result.insert(i, (n, idx, inversion_count))\n                # break the loop, so we don't also add the number's inversion\n                # count to the next elements\n                break\n        else:\n            # if the loop is not broken, n is the smallest value in the list\n            # so we should add 1 for the inversion count\n            result.append((n, len(result), 1))\n\n    # strip the tuple counts from the result list\n    # return the final list of tuples sorted by index\n    return sorted(result, key=lambda t: t[1])\n\n\n@pytest.mark.parametrize(\n    \"in_list, expected\",\n    [\n        ((7, 8, 9, 1, 10, 7), (-8, -9, -10, -2, -11, -8)),\n        ((1, 2, 3", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom math import factorial\n\n\ndef _count_inversions(l):\n    \"\"\"\n    Recursively count the number of inversions in a list.\n\n    :param l: List of elements\n    :return: Number of inversions\n    \"\"\"\n    # Base case: empty list\n    if not l:\n        return 0\n\n    # Split list into left and right half\n    left = l[0: len(l) // 2]\n    right = l[len(l) // 2: len(l)]\n\n    # Count inversions recursively in left and right half\n    inversions_left = _count_inversions(left)\n    inversions_right = _count_inversions(right)\n\n    # Count inversions for the split\n    split_inversions = 0\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            i += 1\n        else:\n            # Swap elements\n            left[i], right[j] = right[j], left[i]\n\n            # Increase split inversions count\n            split_inversions += len(left) - i\n            i += 1\n            j += 1\n\n    # Merge left and right inversion counts\n    inversions = inversions_left + inversions_right + split_inversions\n\n    return inversions\n\n\ndef inversion_elements(l):\n    \"\"\"\n    Calculate the number of inversions in a list of elements in the tuple list.\n\n    :param l: Tuple list\n    :return: Tuple of the number of inversions for each element in the list\n    \"\"\"\n    if not l:\n        return l\n\n    # Calculate the number of inversions for each element in the list\n    inversion_counts = []\n    for element in l:\n        inversion_counts.append(_count_inversions((element,)))\n\n    return tuple(inversion_counts)\n\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuple):\n    result = []\n    for i in range(len(tuple)-1):\n        result.append(tuple[i] + tuple[i+1])\n    return result\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_list):\n    return_list = []\n    for tuple in tuple_list:\n        return_list.append(tuple[0])\n        return_list.append(tuple[1])\n    return return_list\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tup):\n    result = []\n    for i in range(0, len(tup), 2):\n        result.append(tup[i] + tup[i+1])\n    return result\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tup):\n    \"\"\"\n    Return the concatenated elements in the tuple.\n    \"\"\"\n    return_list = []\n    for i in tup:\n        return_list.append(i)\n    return ' '.join(return_list)\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple):\n    return tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5]", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(lst):\n    i = 0\n    while i < len(lst) - 1:\n        lst[i] = lst[i] + \" \" + lst[i + 1]\n        del lst[i + 1]\n        i += 1\n    return lst\n\ndef main():\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\nimport itertools\n\ndef concatenate_elements(s):\n    return [\"\".join(t) for t in itertools.groupby(s)]\n\n# assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n# assert concatenate_elements((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")) == ('a', 'b', 'c', 'd', 'e', 'f')", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tup):\n    \"\"\"Return a new tuple of tuples after concatenating the adjacent elements of given tuple.\"\"\"\n    new_tup = []\n    for i in range(len(tup)):\n        if i == 0:\n            new_tup.append(tup[i])\n        else:\n            new_tup[i-1] = new_tup[i-1] + tup[i]\n\n    return new_tup\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(t):\n    res = []\n    for i in range(len(t)):\n        if i == 0:\n            res.append(t[0])\n        else:\n            if t[i-1].endswith(\" \"):\n                res[-1] = res[-1] + t[i]\n            else:\n                res.append(t[i])\n    return res\n\ndef test_concatenate_elements():\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert concatenate_elements((\"DSP\", \" \", \"IS\", \" \", \"BEST\", \" \", \"FOR\", \" \", \"ALL\", \" \", \"UTS\")) == ('DSP ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'UTS')\n    assert concatenate_elements((\"DSP \", \" IS\", \" \", \"BEST\", \" \", \"FOR\", \" \", \"ALL\", \" \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert concatenate_elements((\"DSP \", \" IS \", \" \", \"BEST\", \" \", \"FOR\", \" \", \"ALL\", \" \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert concatenate_elements((\"DSP \", \" IS\", \" \", \"BEST \", \" \", \"FOR\", \" \", \"ALL\", \" \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert concatenate_elements((\"DSP \", \" IS\", \" \", \"BEST\", \" \", \"FOR \", \" \", \"ALL\", \" \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert concatenate_elements((\"DSP \", \" IS\", \" \", \"BEST\", \" \", \"FOR\", \" \", \"ALL \", \" \", \"UTS\")) ==", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(elements):\n    new_tuple = []\n    for i in range(len(elements)):\n        new_tuple.append(elements[i])\n        if i+1 != len(elements):\n            new_tuple.append(\" \")\n    return tuple(new_tuple)\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s: str) -> int:\n\n    def find_longest_repeating_subseq_dp(s, index, memo):\n        if index in memo:\n            return memo[index]\n        if index == len(s):\n            return 0\n        res = find_longest_repeating_subseq_dp(s, index + 1, memo)\n        if index > 0 and s[index] == s[index - 1]:\n            res = max(res, find_longest_repeating_subseq_dp(s, index + 1, memo) + 1)\n        memo[index] = res\n        return res\n\n    return find_longest_repeating_subseq_dp(s, 0, {})", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(string):\n    arr = [[] for _ in range(26)]\n    for i, ch in enumerate(string):\n        arr[ord(ch)-ord('A')].append(i)\n    \n    m = len(string)\n    n = len(arr[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            if len(arr[j]) == 0:\n                continue\n            for k in arr[j]:\n                if k == i:\n                    continue\n                else:\n                    dp[i][j] = max(dp[i][j], 1 + dp[k][j])\n\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            if len(arr[j]) == 0:\n                continue\n            for k in arr[j]:\n                if k == i:\n                    continue\n                else:\n                    res = max(res, 1 + dp[k][j])\n    \n    return res", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    m = defaultdict(lambda: 0)\n    for i in range(len(s)):\n        m[s[i]] += 1\n    dp = [1] * len(s)\n    for i in range(1, len(s)):\n        for j in range(0, i):\n            if m[s[i]] == m[s[j]] and s[i] != s[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    length = len(string)\n    matrix = [[0] * length for i in range(length)]\n    max_subseq_len = 0\n    max_repeating_subseq = \"\"\n    for i in range(length):\n        matrix[i][i] = 1\n        max_subseq_len = max(max_subseq_len, 1)\n    for i in range(length):\n        for j in range(i, length):\n            if string[i] == string[j]:\n                matrix[i][j] = matrix[i - 1][j - 1] + 1\n                if max_subseq_len < matrix[i][j]:\n                    max_subseq_len = matrix[i][j]\n                    max_repeating_subseq = string[i : j + 1]\n    return max_subseq_len\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef find_longest_repeating_subseq(string: str) -> int:\n    string_len = len(string)\n    if string_len == 0:\n        return 0\n    elif string_len == 1:\n        return 1\n    elif string_len == 2:\n        if string[0] == string[1]:\n            return 0\n        else:\n            return 1\n    else:\n        lookup = [1] * string_len\n        for i in range(1, string_len):\n            for j in range(i):\n                if string[i] == string[j]:\n                    lookup[i] = max(lookup[j], lookup[i - 1]) + 1\n        return max(lookup)\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(text):\n    subsequences = [text[i:j] for i in range(len(text)) for j in range(i+1, len(text)+1)]\n    counter = dict()\n\n    for subsequence in subsequences:\n        if subsequence not in counter.keys():\n            counter[subsequence] = 1\n        else:\n            counter[subsequence] += 1\n\n    max_len = 0\n    for subsequence, count in counter.items():\n        if count > max_len:\n            max_len = count\n    return max_len\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(seq):\n    n = len(seq)\n    subseq_len = [[0 for x in range(n)] for y in range(n)]\n    \n    for i in range(n):\n        subseq_len[i][i] = 1\n        for j in range(i):\n            if seq[i] == seq[j]:\n                subseq_len[i][j] = subseq_len[j][i] + 1\n            if subseq_len[i][j] >= subseq_len[i][i]:\n                subseq_len[i][i] = subseq_len[i][j]\n    max_len = 0\n    for i in range(n):\n        for j in range(i):\n            if subseq_len[i][j] == subseq_len[i][i]:\n                if subseq_len[i][j] > max_len:\n                    max_len = subseq_len[i][j]\n    return max_len - 1\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(seq):\n    memo = {}\n    def helper(i, j):\n        if i >= len(seq) or j >= len(seq):\n            return 0\n        if i == j:\n            return 1\n        if (i, j) in memo:\n            return memo[(i, j)]\n        \n        count = 0\n        if seq[i] == seq[j]:\n            count = helper(i+1, j+1)\n        count = max(count, helper(i+1, j), helper(i, j+1))\n        memo[(i, j)] = count\n        return count\n    return helper(0, 0)\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef find_longest_repeating_subseq(input_string: str) -> int:\n    longest_repeating_length = 0\n    current_length = 0\n    current_dict = {}\n    current_subseq = \"\"\n\n    for index, char in enumerate(input_string):\n        if char in current_dict:\n            current_length += 1\n            if current_length > longest_repeating_length:\n                longest_repeating_length = current_length\n                current_subseq = current_dict[char]\n                current_subseq += char\n                current_dict[char] = current_subseq\n            elif current_length == longest_repeating_length:\n                current_subseq += char\n                current_dict[char] = current_subseq\n        else:\n            current_dict[char] = char\n            current_length += 1\n\n    return longest_repeating_length\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    n = len(s)\n    memo = [0] * (n+1)\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if s[j-1] == s[i-1]:\n                if memo[i-j] >= 2:\n                    memo[i] = max(memo[i], j + memo[i-j])\n    return memo[n]\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(decimal):\n    if len(decimal.split('.')[0]) > 4:\n        return False\n    else:\n        try:\n            decimal = float(decimal)\n        except ValueError:\n            return False\n\n        if abs(decimal % 1) < 0.01:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(decimal):\n    # write your solution here\n    if re.search(\"^[-+]?[0-9]+([.][0-9]+)?$\", decimal) is None:\n        return False\n    return True\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(string):\n    if re.search(r'^\\d+(\\.\\d+)?$',string):\n        m = re.search(r'(\\d+)(\\.\\d+)?$',string)\n        return True if len(m.group()) == len(string) else False\n    else:\n        return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(number):\n    import re\n    if number.isdigit():\n        return False\n    if number.count('.') == 1:\n        if len(number) == 2:\n            if number[0] == '0':\n                return False\n        else:\n            number = re.sub(r'^0+', '', number)\n            if len(number) == 2:\n                return False\n    else:\n        return False\n    if number.replace('.', '', 1).isdigit():\n        return False\n    if re.search(r'^\\d+(\\.\\d+)?\\d*(\\.\\d+)?$', number):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(decimal):\n    pattern = r\"(\\d+)(\\.\\d{0,2})\"\n    return bool(re.match(pattern, decimal))\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(num):\n\t\"\"\"\n\t:param num: str, input the given decimal with a precision of 2\n\t:return: bool, return True if the input is a valid decimal with a precision of 2, else return False\n\t\"\"\"\n\tpattern = r'\\d*\\.?\\d*2$'\n\tregex = re.compile(pattern)\n\tif regex.match(num):\n\t\treturn True\n\telse:\n\t\treturn False\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\n\ndef is_decimal(decimal):\n    pattern = r'^\\d+(\\.\\d{2})?$'\n    if re.fullmatch(pattern, decimal):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\n# is_decimal(n)\n#     return True if re.match(r\"\\d+(?:\\.\\d{1,2})?\", n) else False\n\n\ndef is_decimal(n):\n    try:\n        float(n)\n        return True\n    except:\n        return False\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(num):\n    \"\"\"\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('123.12')\n    False\n    >>> is_decimal('123.123')\n    True\n    \"\"\"\n    return bool(re.match(r'\\d+\\.\\d+$', num))\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(string):\n    if string.isnumeric() == False:\n        return False\n\n    if string.find('.') == -1:\n        return False\n\n    if string[0] == '.':\n        return False\n\n    if string[-1] == '.':\n        return False\n\n    if string.find('.') > 2:\n        return False\n\n    if string.find('.') == len(string) - 3:\n        return False\n\n    if string.find('.') == len(string) - 2:\n        return False\n\n    return True\n\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nimport heapq\n\ndef heap_replace(heap, value):\n    \"\"\"\n    Replace the smallest element with a new value.\n    \"\"\"\n    heap[0] = value\n    heapq.heapify(heap)\n\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nfrom heapq import *\ndef heap_replace(heap, item):\n    return heappushpop(heap,item)\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    heap[0] = item\n    bubble_up(heap, 0)\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    # find the index of the smallest element in heap\n    smallest_index = 0\n    for i in range(1, len(heap)):\n        if heap[i] < heap[smallest_index]:\n            smallest_index = i\n    # replace the smallest element with item\n    heap[smallest_index] = item\n    # call heapify on the sub tree to maintain heap property\n    heapify(heap, smallest_index)\n    return heap\n\ndef heapify(heap, smallest_index):\n    # heapify the sub tree rooted at smallest_index\n    left_index = 2 * smallest_index + 1\n    right_index = 2 * smallest_index + 2\n    smallest_index = smallest_index\n    if left_index < len(heap) and heap[left_index] < heap[smallest_index]:\n        smallest_index = left_index\n    if right_index < len(heap) and heap[right_index] < heap[smallest_index]:\n        smallest_index = right_index\n    if smallest_index != smallest_index:\n        heap[smallest_index], heap[smallest_index] = heap[smallest_index], heap[smallest_index]\n        heapify(heap, smallest_index)", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_item):\n    heap[0] = new_item\n    i = 0\n    while i*2+1 < len(heap):\n        j = i * 2 + 1\n        if j + 1 < len(heap) and heap[j] > heap[j+1]:\n            j += 1\n        if heap[i] > heap[j]:\n            heap[i], heap[j] = heap[j], heap[i]\n            i = j\n        else:\n            break\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap,x):\n    heap.append(x)\n    heap_max_heapify(heap,len(heap)-1)\n    return heap.pop(0)\n\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap,x):\n\t#inorder to find the smallest element\n\t#min_index = 1\n\t#while heap[min_index]<=heap[min_index//2]:\n\t#\tmin_index = min_index//2\n\t#\n\t#heap[1] = heap[min_index]\n\t#heap[min_index] = x\n\t#i = min_index\n\t#while i>1 and heap[i//2]>heap[i]:\n\t#\theap[i//2],heap[i] = heap[i],heap[i//2]\n\t#\ti = i//2\n\t#\n\t#return heap\n\n\tif not heap:\n\t\treturn [x]\n\n\tif x<heap[1]:\n\t\theap[1],x = x,heap[1]\n\t\treturn heap\n\n\tn = len(heap)\n\t#print(n)\n\theap = heap[1:]+heap[:1]\n\ti = 1\n\twhile i*2<=n:\n\t\tmin_index = i*2\n\t\tif min_index < n and heap[min_index]>heap[min_index+1]:\n\t\t\tmin_index = min_index+1\n\n\t\tif heap[i]<heap[min_index]:\n\t\t\theap[i],heap[min_index] = heap[min_index],heap[i]\n\t\t\ti = min_index\n\t\telse:\n\t\t\tbreak\n\n\theap[i] = x\n\n\treturn heap\n\n# assert heap_replace([25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n# assert heap_replace([25, 44,", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\nfrom heapq import heapify, heappush, heappop\n\n\ndef heap_replace(heap, item):\n    if len(heap) == 0:\n        return [item]\n    item_ = heap[0]\n    heap[0] = item\n    heapify(heap)\n    return [item_, item]", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nfrom heapq import heappop, heappush\n\ndef heap_replace(heap, item):\n    \"\"\"\n    Replaces the smallest element from the given heap and then inserts a new item.\n    \"\"\"\n    smallest = heappop(heap)\n    heappush(heap, item)\n    return smallest", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(lst,item):\n\tprint(lst)\n\tif len(lst)==0:\n\t\tlst.append(item)\n\t\treturn lst\n\t# if the item to be replaced is the minimum in the heap\n\t# then replace the minimum with the last element\n\tif lst[0]==item:\n\t\tlst[0]=lst[-1]\n\t\tlst.pop(-1)\n\t\theapify(lst)\n\t\treturn lst\n\t# put the new item at the start of the list\n\telse:\n\t\tlst.insert(0,item)\n\t\t# heapify the list\n\t\theapify(lst)\n\t\treturn lst\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(string):\n    return re.fullmatch(\"[a-z0-9]+\",string)", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\n\ndef is_allowed_specific_char(string):\n    if re.search(\"[^a-zA-Z0-9]\", string):\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(string):\n    if re.match(\"^[A-Za-z0-9]*$\",string):\n        return True\n    return False\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(s):\n    pattern = r'[a-z0-9]'\n    return bool(re.match(pattern, s))\n\n# Test cases", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(s):\n    allowed = \"[a-z]+[0-9]+\"\n    return bool(re.match(allowed, s))\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\ndef is_allowed_specific_char(string):\n    pattern = \"[a-zA-Z0-9]\"\n    return re.match(pattern, string) is not None\n\ndef is_allowed_specific_char2(string):\n    return all(x in \"abcdefghijklmnopqrstuvwxyz0123456789\" for x in string)\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(string):\n    \"\"\"\n    Return True if the string contains only a certain set of characters.\n    >>> is_allowed_specific_char(\"ABCDEFabcdef123450\")\n    True\n    >>> is_allowed_specific_char(\"ABCdef123450\")\n    False\n    >>> is_allowed_specific_char(\"ABCDEFabcdef123450_\")\n    False\n    >>> is_allowed_specific_char(\"abcdef123450\")\n    False\n    >>> is_allowed_specific_char(\"aB\")\n    False\n    >>> is_allowed_specific_char(\"A0\")\n    False\n    >>> is_allowed_specific_char(\"123450\")\n    False\n    >>> is_allowed_specific_char(\"ab\")\n    True\n    >>> is_allowed_specific_char(\"AB\")\n    True\n    >>> is_allowed_specific_char(\"a\")\n    True\n    >>> is_allowed_specific_char(\"A\")\n    True\n    >>> is_allowed_specific_char(\"0\")\n    True\n    >>> is_allowed_specific_char(\"0123456789\")\n    True\n    \"\"\"\n    # create a regular expression that allows only a-z, A-Z, 0-9 and the underscore\n    pattern = re.compile(\"[a-zA-Z0-9_]+\")\n\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(str):\n    regex = re.compile(\"[A-Za-z0-9]+$\")\n    if re.match(regex,str):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(input_str):\n    regex = re.compile(r\"^[a-z0-9]+$\")\n    return regex.match(input_str)\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\n\ndef is_allowed_specific_char(string):\n    \"\"\"\n    This function will check if the string contains only a-z, a-z and 0-9 characters by using regex.\n\n    Args:\n       string(string): String to be verified\n    Returns:\n       bool: True if it contains only a-z, a-z and 0-9 characters and False otherwise\n    \"\"\"\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", string))\n\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    return (sum(bin(n).count('1') for i in range(n)) + sum(bin(n).count('0') for i in range(n))) / 2\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n\t# Your code goes here\n\tc=0\n\twhile(n>0):\n\t\tif(n%2==1):\n\t\t\tc+=1\n\t\tif(n%10==1):\n\t\t\tc+=1\n\t\tn=n//10\n\treturn c\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\n# Write your code here\ndef count_Num(number, n = 1):\n    if number == 0:\n        return 0\n    if n == 1:\n        return count_Num(number >> 1, n) + (number & 1)\n    else:\n        return count_Num(number >> 1, n) + count_Num(number >> (n - 1), n)\n\ndef count_Num_alternate(number, n = 1):\n    if n == 0:\n        return 0\n    return count_Num_alternate(number >> 1, n) + (number & 1)\n\n\ndef count_Num_bottom_up(number, n = 1):\n    return count_Num_bottom_up(number >> 1, n) + count_Num_bottom_up(number >> (n - 1), n)\n\n\ndef count_Num_alternate_bottom_up(number, n = 1):\n    return count_Num_alternate_bottom_up(number >> 1, n) + count_Num(number >> (n - 1), n)\n\n\ndef main():\n    # print(count_Num(2))\n    # print(count_Num_alternate(2))\n    # print(count_Num_bottom_up(2))\n    # print(count_Num_alternate_bottom_up(2))\n    pass\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    # initialize the value\n    ans = 0\n    # write your code here\n    for i in range(100):\n        if (num >> i) & 1:\n            for j in range(100):\n                if (num >> j) & 1:\n                    ans += 1\n    return ans\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(x):\n    count = 0\n    x = bin(x)\n    for i in range(len(x)):\n        if x[i] == '1':\n            if x[i-1] == '0' and x[i+1] == '1':\n                count+=1\n            elif x[i+1] == '0' and x[i-1] == '1':\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n  count=0\n  for i in range(1, n+1):\n    if is_nth_bit_set(i,2) and is_oth_bit_set(i,3):\n      count+=1\n  return count\n\ndef is_nth_bit_set(n,nth_bit):\n  return (n & 1 << nth_bit) == 1 << nth_bit\n\ndef is_oth_bit_set(n,oth_bit):\n  return (n & 1 << oth_bit) == 1 << oth_bit\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    cnt = 0\n    if n & 1:\n        cnt = 1\n    if n & 2:\n        cnt += 1\n    if n & 4:\n        cnt += 1\n    if n & 8:\n        cnt += 1\n    if n & 16:\n        cnt += 1\n    if n & 32:\n        cnt += 1\n    if n & 64:\n        cnt += 1\n    if n & 128:\n        cnt += 1\n    if n & 256:\n        cnt += 1\n    if n & 512:\n        cnt += 1\n    if n & 1024:\n        cnt += 1\n    if n & 2048:\n        cnt += 1\n    if n & 4096:\n        cnt += 1\n    if n & 8192:\n        cnt += 1\n    if n & 16384:\n        cnt += 1\n    if n & 32768:\n        cnt += 1\n    return cnt\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if i ^ j == 1 and i & j == 1:\n                count += 1\n    return count\n\n# assert count_Num(100) == 177\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    \"\"\"\n    Time Complexity : O(n)\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        if((i+1) & n) and ((i+2) & n):\n            count+=1\n    return count"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return sum([x**4 for x in range(n)])", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    x = 0\n    for i in range(n+1):\n        x += i**4\n    return x\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    # Write your code here.\n    sum = 0\n    for i in range(n+1):\n        sum += i**4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return (n**4 - n**3) / 3\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n):\n        sum += (i**4)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i*i*i\n    return sum\n\ndef test_function():\n    assert fourth_Power_Sum(2) == 17, \"Sum of 4th power of 2 is not equal to 17\"\n    print(\"Pass\")\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\nimport unittest\n\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**4\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    if n<1:\n        return 0\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**4\n    return sum\n\n#assert fourth_Power_Sum(2) == 17\n#assert fourth_Power_Sum(3) == 38"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(string_tuple1, string_tuple2):\n    return tuple(string_tuple1 + string_tuple2)\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(string_tuple_1, string_tuple_2):\n    return tuple([i+j for i,j in zip(string_tuple_1, string_tuple_2)])\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    \"\"\"\n    Parameters\n    ----------\n    tuple1: tuple\n        Contains the first tuple\n    tuple2: tuple\n        Contains the second tuple\n    Returns\n    -------\n    tuple\n        Concatenation of the two tuples\n    \"\"\"\n    return tuple1 + tuple2\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n\t\"\"\"\n\t:param tuple1: A tuple of strings.\n\t:param tuple2: A tuple of strings.\n\t:return: A tuple of strings, the concatenation of the two tuples.\n\t\"\"\"\n\treturn tuple([tuple1[i] + \" \" + tuple2[i] for i in range(len(tuple1))])\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(strings1, strings2):\n    return tuple([string1 + string2 for string1, string2 in zip(strings1, strings2)])\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(st1, st2):\n    return tuple(map(lambda x: x[0]+' '+x[1], zip(st1,st2)))\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\n#Defining the function\ndef concatenate_strings(s1, s2):\n    \"\"\"\n    Concatenate strings from two tuples\n    \"\"\"\n    return tuple(a + b for a, b in zip(s1, s2))\n\n#Testing the function", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(a, b):\n    # initialize an empty string\n    res = []\n\n    # loop through elements in tuples\n    for i in range(len(a)):\n        # append each element of first tuple to a new list\n        res.append(a[i] + ' ' + b[i])\n\n    # return a tuple with elements in res list\n    return tuple(res)\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n    lst = []\n    for i in tuple1:\n        lst.append(i)\n    for j in tuple2:\n        lst.append(j)\n    return tuple(lst)", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tup1, tup2):\n    return tuple(tup1[i]+tup2[i] for i in range(len(tup1)))\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(r):\n    return 57.29577951308232088*r\n\ndef test_degree_radian():\n    assert degree_radian(90) == 5156.620156177409, \"Test 1\"\n    assert degree_radian(180) == 7626.620156177409, \"Test 2\"\n    assert degree_radian(270) == 10196.620156177409, \"Test 3\"\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radians):\n    return radians * 180 / math.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    return radian * 180 / math.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(angle):\n    degree = angle * 57.29577951308232\n    return degree\n\ndef test_degree_radian():\n    assert degree_radian(90) == 5156.620156177409, \"Failed for 90\"\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(degrees):\n    return degrees * (math.pi/180)\n\ndef degree_radian(degrees):\n    return degrees * math.pi / 180\n\ndef degree_radian(degrees):\n    return degrees * math.pi / 180\n\ndef degree_radian(degrees):\n    return degrees * math.pi / 180\n\ndef degree_radian(degrees):\n    return degrees * math.pi / 180", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian*180.0/math.pi", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n\treturn 5156.620156177409 * radian\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radians):\n\tdegree = radians * 180 / np.pi\n\treturn degree\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\nfrom math import sin, cos, radians\n\n\ndef degree_radian(x):\n    return int((180 / (2*pi)) * x)\n\n\ndef radian_degree(x):\n    return int(x * (180 / (2*pi)))\n\n\n# print(degree_radian(radians(6)))", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radians):\n    return radians * (180/math.pi)\n\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    res = []\n    for i in l:\n        if isinstance(i, list):\n            res+=decode_list(i)\n        else:\n            res+=[i]*i\n    return res\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(lst):\n    for el in lst:\n        if isinstance(el, list):\n            decode_list(el)\n        else:\n            for _ in range(el):\n                yield el\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(arr):\n    i=0\n    j=0\n    lst=[]\n    while j<len(arr):\n        if type(arr[j])==int:\n            lst.extend([arr[j]]*arr[i])\n            i+=1\n            j+=1\n        else:\n            j+=1\n    return lst\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(l):\n    new_l = []\n    for elem in l:\n        if isinstance(elem, int):\n            new_l += [elem]\n        else:\n            new_l += [elem[0]]*elem[1]\n    return new_l", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(x):\n    s = []\n    for i in x:\n        if type(i) is list:\n            s = s + [i[0]] * i[1]\n        else:\n            s = s + [i]\n    return s", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(nums):\n  nums.sort()\n  for i,n in enumerate(nums):\n    if type(n)==int:\n      nums[i]=[n]\n  nums2=[]\n  for i in range(len(nums)):\n    if type(nums[i])==int:\n      nums2.extend(nums[i])\n    else:\n      nums2.extend(nums[i])\n  return nums2", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(input_list):\n    def process_list(temp_list):\n        if isinstance(temp_list[0], list):\n            for i in range(len(temp_list)):\n                if isinstance(temp_list[i][0], int):\n                    process_list(temp_list[i])\n                else:\n                    temp_list[i][0]=process_list(temp_list[i][0])\n        else:\n            temp_list[0]=temp_list[0]\n        return temp_list[0]\n\n    temp_list=[]\n    for element in input_list:\n        if isinstance(element, list):\n            temp_list.append(element)\n        else:\n            if isinstance(element, int):\n                temp_list.append([element, 1])\n            else:\n                temp_list.append(element)\n    return process_list(temp_list)", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(run_length_encoded):\n    return [num for (num, count) in run_length_encoded for _ in range(count)]\n\n# Test cases:", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(lst):\n    if not lst:\n        return []\n    cur, ret = lst[0], []\n    for i, v in enumerate(lst[1:]):\n        if v[0] != cur[0]:\n            ret += [cur]\n            cur = v\n        else:\n            cur[1] += v[1]\n    ret += [cur]\n    return ret\n\ndef test_decode_list():\n    assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(run_length_encoded):\n    decoded = []\n    for i in range(len(run_length_encoded)):\n        if type(run_length_encoded[i])==list:\n            decoded += run_length_encoded[i]*run_length_encoded[i+1]\n            i += 2\n        else:\n            decoded.append(run_length_encoded[i])\n    return decoded"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1, list2):\n    if type(list1) is not list or type(list2) is not list:\n        return False\n    if len(list1) == 0:\n        return True\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n        else:\n            return False\n    return check_subset_list(list1, list2)", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(lst1,lst2):\n    if len(lst1) == 0:\n        return True\n    else:\n        first = lst1[0]\n        for ele in lst2:\n            if first in ele:\n                lst1.remove(first)\n                return check_subset_list(lst1,lst2)\n    return False\n\n\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(l1, l2):\n    def check(l1, l2):\n        if not l2:\n            return True\n        elif l2[0] == []:\n            return check(l1, l2[1:])\n        elif l2[0] == [[]]:\n            return check(l1, l2[1:])\n        elif l2[0] == [[]] and check(l1, l2[1:]):\n            return True\n        elif l2[0] == [[]] and not check(l1, l2[1:]):\n            return False\n        else:\n            return check(l1, l2[1:]) and l2[0][0] in l1 or check(l1, l2[1:])\n    return check(l1, l2)", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(sub, main):\n    #Checks if the sub list is a subset of the main list\n    result = True\n    for x in sub:\n        for y in main:\n            if x in y:\n                pass\n            else:\n                result = False\n                break\n    return result\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1, list2):\n    return list2.count(list1) >=1\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(l1,l2):\n    if len(l1) == 0:\n        return True\n    if len(l2) == 0:\n        return False\n\n    return (l1[0] == l2[0]) and check_subset_list(l1[1:],l2[1:])\n\n# assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1,list2):\n    set1 = set(list1)\n    for elem in list2:\n        set2 = set(elem)\n        if set1.issubset(set2):\n            return True\n    return False\n\n#assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list_1, list_2):\n    if list_1 == []:\n        return True\n    if list_2 == []:\n        return False\n    for i in list_1:\n        if i in list_2:\n            list_2.remove(i)\n        else:\n            return False\n    return True", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    for item1 in list1:\n        for item2 in list2:\n            if item1==item2:\n                return True\n    return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(L, B):\n    if L==[] and B==[]:\n        return True\n    if L==[] or B==[]:\n        return False\n    for i in range(len(B)):\n        if B[i]==[]:\n            continue\n        if L[-1]==B[i][-1]:\n            return check_subset_list(L[:-1], B[i][:-1])\n    return False\n\n#assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    # your code goes here\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            return string[i]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(st):\n    s = set()\n    for char in st:\n        if char not in s:\n            s.add(char)\n        else:\n            return char\n    return None\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(s):\n    # Your code here\n    # Go through every character in the string\n    for char in s:\n        # If the character already exists in the string, return it.\n        if s.count(char) > 1:\n            return char\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str):\n\thashTable = {}\n\tfor ele in str:\n\t\tif ele not in hashTable:\n\t\t\thashTable[ele] = 0\n\t\telse:\n\t\t\treturn ele\n\t\t\tbreak\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(s: str) -> str:\n    return s[1:] if s[1:].find(s[0]) != -1 else first_Repeated_Char(s[1:])\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\nfrom collections import Counter\n\ndef first_Repeated_Char(string):\n    \"\"\"Returns the first repeated character in the string.\"\"\"\n\n    if len(string) == 0:\n        return ' '\n\n    string_dict = dict(Counter(string))\n    print(string_dict)\n    for c in string:\n        if string_dict[c] > 1:\n            return c\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    '''\n    Function to find the first repeated character in a given string\n    '''\n    hash_map = {}\n    for i in range(len(str)):\n        if str[i] in hash_map:\n            return str[i]\n        hash_map[str[i]] = i\n    return \"No Repeated Characters Found\"", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_repeated_char(str):\n    str_set = set()\n    str_set = list(str)\n\n    for char in str_set:\n        if str_set.count(char) > 1:\n            return char\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    for i in range(len(string)):\n        if string.count(string[i]) > 1:\n            return string[i]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(s):\n    index=0\n    for i in range(len(s)):\n        if s[i] == s[index]:\n            index += 1\n        else:\n            s[index] = s[i]\n    print(s)"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(num1, num2):\n    if num1 > num2:\n        larger_num = num1\n    else:\n        larger_num = num2\n    smaller_num = abs(num1 - num2)\n    operations = 0\n    while(smaller_num > 0):\n        if larger_num >= smaller_num:\n            operations += larger_num // smaller_num\n            larger_num %= smaller_num\n        else:\n            smaller_num -= 1\n    return operations", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a, b):\n\n    if a == b:\n        return 0\n\n    elif a < b:\n        a, b = b, a\n\n    operations = []\n    while a != b:\n        if a % 2 != 0:\n            a = a + 1\n            operations.append('addition')\n        else:\n            a = a//2\n            operations.append('subtraction')\n        if b % 2 != 0:\n            b = b + 1\n            operations.append('addition')\n        else:\n            b = b//2\n            operations.append('subtraction')\n    return operations\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(n1,n2):\n    operations = 0\n    while n1 != n2:\n        if n1 > n2:\n            n1 -= n2\n            operations += 1\n        else:\n            n2 -= n1\n            operations += 1\n    return operations", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a, b):\n    \n    # 1)\n    if a < b:\n        return a - b\n    \n    # 2)\n    if b < a:\n        return b - a\n    \n    return 0\n\n# 3)", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_operations(A,B):\n    \"\"\"\n    :param A: int\n    :param B: int\n    :return: int\n    \"\"\"\n    if A==B:\n        return 0\n    elif A>B:\n        smaller = B\n    else:\n        smaller = A\n    result = 0\n    while True:\n        if A%smaller==0:\n            result += A//smaller\n            break\n        A = A-smaller\n        result += 1\n    return result\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(num1,num2):\n    import math\n    diff = abs(num1-num2)\n    return diff\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_operations(num1, num2):\n    # minuend and subtrahend\n    m = num1\n    s = num2\n    \n    # count of operations\n    c = 0\n    \n    # carry\n    carry = 0\n    # while num1 > num2\n    while m > s:\n        \n        if m%2 != 0:\n            # if m is odd, then add one\n            m -= 1\n            c += 1\n        elif m%2 == 0:\n            # if m is even, then we need to look at carry\n            if carry == 0:\n                # if carry is 0, then we need to add one\n                m -= 1\n                c += 1\n            else:\n                # if carry is 1, then we need to add one to carry and carry is 0\n                carry = 0\n                m -= 2\n                c += 1\n        \n    return c\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(num1, num2):\n    # complete this function\n    if num1 == num2:\n        return 0\n    elif num1 > num2:\n        num1,num2 = num2,num1\n    if num1%2 != 0:\n        return 1\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a,b):\n    return abs(a-b)\n\n\ndef min_operations_v2(a,b):\n    # given a is less than b\n    if a > b:\n        a, b = b, a\n    # now a < b\n    operations = 0\n    while a != 0:\n        operations += a\n        a -= 1\n    return operations - b\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a, b):\n    if a > b:\n        a, b = b, a\n    while a != b:\n        a, b = min(a, b), max(a, b)\n        a -= a % 2\n        b -= b % 2\n    return b // 2\n\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nfrom typing import Tuple, Union\n\n\ndef extract_min_max(\n    tuple_: Tuple[Union[int, float]],\n    k: int,\n) -> Tuple[Union[int, float]]:\n    if k > len(tuple_):\n        return sorted(tuple_)[:k]\n    if k == 1:\n        return tuple_[:2]\n    return tuple_[:k + 1][-2:]", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tup, k):\n\treturn tup[0:k], tup[-k:]\n\n# test 1\ntup = (5, 20, 3, 7, 6, 8)", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nimport math\ndef extract_min_max(list1, k):\n    return list1[0:k], list1[-k:]\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(elements, k):\n    return min(elements[:k]), max(elements[:k])\n\n#assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n#assert extract_min_max((1, 3, 2, 5, 4, 7, 10), 3) == (1, 2, 3)\n\n# Input\n#elements = (1, 3, 2, 5, 4, 7, 10)\n#k = 3\n# Output\n# (1, 2, 3)\n#\n# Input\n#elements = (5, 20, 3, 7, 6, 8)\n#k = 2\n# Output\n# (3, 5, 8, 20)\n#\n# Input\n#elements = (5, 20, 3, 7, 6, 8)\n#k = 6\n# Output\n# (3, 5, 6, 7, 8, 20)\n\n\n# Write a function to add an element to the end of a tuple.\n#assert add_to_tuple((1, 2, 3), 4) == (1, 2, 3, 4)\n#assert add_to_tuple((3, 4, 5, 6), 7) == (3, 4, 5, 6, 7)\n#assert add_to_tuple((5, 6, 7, 8, 9), 1) == (5, 6, 7, 8, 9, 1)\n\ndef add_to_tuple(elements, n):\n    return elements + (n,)\n\n#assert add_to_tuple((1, 2, 3), 4)", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tup, k):\n    if len(tup) < k:\n        return tup\n    else:\n        return tup[0], tup[k-1], tup[-1], tup[-k]\n\n\n# Test 1", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nfrom typing import List, Tuple\n\ndef extract_min_max(tup: Tuple, k: int) -> Tuple:\n    \"\"\"\n    :param tup: tuple of integers\n    :param k: int\n    :return: tuple of k largest and smallest values of the given tuple\n    \"\"\"\n    if k > len(tup):\n        return tup\n    min_k = tup[:k]\n    max_k = tup[len(tup) - k:]\n    for elem in tup:\n        if elem in min_k:\n            min_k.remove(elem)\n        if elem in max_k:\n            max_k.remove(elem)\n    min_k = min_k + tup[k:]\n    max_k = tup[:len(tup) - k] + max_k\n    return min_k, max_k\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(sequence, k):\n    return sequence[:k], sequence[-k:]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(arr, k):\n    return (sorted(arr)[:k], sorted(arr)[-k:])\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\n# Since the answer is of no use, it will not be included in the final submission.\n\n\ndef extract_min_max(tup, k):\n    # print(tup)\n    # print(tup[:k])\n    # print(tup[-k:])\n    return tup[:k], tup[-k:]\n\n# Given a list of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly L characters. Extra spaces should be distributed as evenly as possible. If there are multiple ways to pack the words, you should choose the way that uses the least extra space.\n\ndef full_justify(words, maxWidth):\n    answer = []\n    prev_space = 0\n    for i in range(len(words)):\n        # print(words[i])\n        if len(words[i]) + prev_space > maxWidth:\n            # print(prev_space)\n            # print(maxWidth)\n            # print(len(words[i]))\n            # print(answer)\n            answer.append(\" \".join(words[i - prev_space:i]))\n            answer.append(\" \" * (maxWidth - len(answer[-1]) - prev_space))\n            prev_space = 0\n        else:\n            prev_space += len(words[i]) + 1\n    if prev_space > 0:\n        answer.append(\" \".join(words[i - prev_space:]))\n        answer.append(\" \" * (maxWidth - len(answer[-1]) - prev_space))\n    return \"\\n\".join(answer)\n\n# Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\n\ndef first_uniq_char(s):\n    store = []\n    for i in s:\n        if i in store:\n            continue\n        else:\n            store.append(i", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tuple_, k):\n    return tuple_[:k], tuple_[-k:]\n"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(text, n):\n    \"\"\"\n    :type text: str\n    :type n: int\n    :rtype: str\n    \"\"\"\n    if not text:\n        return ''\n    if n < 1:\n        return text\n    special_char = [' ', ',', '.']\n    count = 0\n    for c in text:\n        if c in special_char:\n            count += 1\n        if count == n:\n            break\n    for i in range(n):\n        text = text.replace(text[count], ':')\n        count -= 1\n    return text", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, n):\n  special_chars = list(string)\n  i = 0\n  while i < len(string) and n:\n    for s in special_chars:\n      if string.count(s) > 0:\n        string = string.replace(s, s + ':')\n        n -= 1\n    i += 1\n  return string\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(s,n):\n    s1=list(s)\n    for i in range(len(s1)):\n        if(s1[i]==',' or s1[i]=='.' or s1[i]==' '):\n            if n==0:\n                continue\n            elif(n>1):\n                n=n-1\n                s1[i]=':'\n            else:\n                break\n    return ''.join(s1)\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(sentence,num):\n    cnt = 0\n    for s in sentence:\n        if s == ' ':\n            cnt += 1\n        elif s == '.':\n            cnt += 1\n        elif s == ',':\n            cnt += 1\n        if cnt > num:\n            return sentence.replace(s,':')\n    return sentence", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\nimport re\n\ndef replace_max_specialchar(s,n):\n    return re.sub(' ', ': ', re.sub(',', ': ', re.sub('.', ': ', s, 1), n))", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\nimport unittest\n\ndef replace_max_specialchar(text, n):\n    # Complete this function\n    l = text.split(' ')\n    for i in range(len(l)):\n        l[i] = l[i].replace(',', ':')\n    l = ' '.join(l)\n    l = l.replace('.', ':')\n    l = l.replace(' ', ':')\n    l = l.replace(',', ':')\n    l = l.replace('.', ':')\n    return l\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(line,n):\n    line = line.replace(' ','')\n    line = line.replace('.','')\n    line = line.replace(',','')\n    return line\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\nimport re\n\ndef replace_max_specialchar(s,n):\n    string = \"\"\n    for i in s:\n        if i == \" \":\n            string += ':'\n        elif i == \",\":\n            string += ':'\n        elif i == \".\":\n            string += ':'\n        else:\n            string += i\n    return re.sub(r\"::+\",r\":\", string[:n]) + string[n:]\n\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\n# def replace_max_specialchar(input_string, n):\n#     # Write your code here.\n#     input_string = input_string.replace(\" \",\":\")\n#     input_string = input_string.replace(\".\",\":\")\n#     input_string = input_string.replace(\",\",\":\")\n#     return input_string\n\n\ndef replace_max_specialchar(input_string, n):\n    # Write your code here.\n    input_list = list(input_string)\n    for i in range(len(input_string)):\n        if input_list[i] == \",\":\n            if i < n:\n                input_list[i] = \":\"\n            elif i > len(input_string)-n:\n                input_list[i] = \":\"\n            else:\n                input_list[i] = \":\"\n\n    for i in range(len(input_string)):\n        if input_list[i] == \".\":\n            if i < n:\n                input_list[i] = \":\"\n            elif i > len(input_string)-n:\n                input_list[i] = \":\"\n            else:\n                input_list[i] = \":\"\n\n    for i in range(len(input_string)):\n        if input_list[i] == \" \":\n            if i < n:\n                input_list[i] = \":\"\n            elif i > len(input_string)-n:\n                input_list[i] = \":\"\n            else:\n                input_list[i] = \":\"\n\n    return \"\".join(input_list)", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(str_input,max_count):\n    str_len = len(str_input)\n    count = 0\n    if str_len < max_count:\n        return str_input\n    for i in range(str_len):\n        if str_input[i] == ' ':\n            count += 1\n        if str_input[i] == ',':\n            count += 1\n        if str_input[i] == '.':\n            count += 1\n        if count >= max_count:\n            str_input = str_input.replace(' ',':')\n            str_input = str_input.replace(',',':')\n            str_input = str_input.replace('.',':')\n            break\n    return str_input\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n#Answer\ndef first_even(lst):\n    return lst[0] if lst[0] % 2 == 0 else lst[1] if lst[1] % 2 == 0 else first_even(lst[2:])", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (list):\n    for i in list:\n        if i % 2 == 0:\n            return i\n    return None\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(num_list):\n    for i in range(len(num_list)):\n        if num_list[i] % 2 == 0:\n            return num_list[i]\n    return -1", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(l):\n    if len(l) != 0:\n        for index in range(len(l)):\n            if l[index] % 2 == 0:\n                return l[index]\n    return \"List is empty\"\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    for i in numbers:\n        if i % 2 == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n    return None\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(nums):\n    for x in nums:\n        if x % 2 == 0:\n            return x\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even (lst):\n    \"\"\"Returns the first even number in a given list\"\"\"\n    if lst == []:\n        return\n    elif len(lst) == 1:\n        if lst[0] % 2 == 0:\n            return lst[0]\n        else:\n            return False\n    else:\n        if lst[0] % 2 == 0:\n            return lst[0]\n        elif lst[1] % 2 == 0:\n            return lst[1]\n        else:\n            return False\n        ", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n\n\n#assert first_even([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\n# First Solution\ndef first_even(nums):\n    for i in nums:\n        if i % 2 == 0:\n            return i\n\n\n# Second Solution\ndef first_even(nums):\n    for i, num in enumerate(nums):\n        if num % 2 == 0:\n            return num\n\n\n# Third Solution\ndef first_even(nums):\n    return next((i for i in nums if i % 2 == 0), None)\n\n\n# Fourth Solution\ndef first_even(nums):\n    return next(num for num in nums if num % 2 == 0)"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    t=type(tup[0])\n    for i in tup:\n        if type(i)!=t:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(lst):\n  if type(lst) != tuple:\n    return False\n  if len(lst) == 0:\n    return True\n  data_types = [type(item) for item in lst]\n  if data_types.count(data_types[0]) == len(lst):\n    return True\n  else:\n    return False", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple1):\n    \"\"\"\n    input: tuple1\n    output: boolean\n    \"\"\"\n    if len(tuple1) == 0:\n        return True\n    else:\n        a = tuple1[0]\n        if isinstance(a, list):\n            return check_type(a)\n        else:\n            for i in tuple1:\n                if isinstance(i, list):\n                    return False\n                elif type(i) != type(a):\n                    return False\n            return True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\nimport unittest\n\ndef check_type(tup):\n    \"\"\"\n    Check if all the elements in tuple have same data type or not.\n    \"\"\"\n    return type(tup[0]) == type(tup[-1])\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    # get the first element from tuple\n    first_element = tup[0]\n    # get the data type of first element\n    first_element_type = type(first_element)\n    # get the length of tuple\n    length = len(tup)\n    \n    # variable to store first element type\n    previous_type = first_element_type\n    \n    # variable to check if data type is same\n    same_type = True\n    \n    # traverse the tuple to check if all data types are same\n    for i in range(length):\n        # get the current element\n        current_element = tup[i]\n        # get the current element type\n        current_element_type = type(current_element)\n        \n        # if the current element type is not same as first element type\n        if current_element_type != previous_type:\n            same_type = False\n        \n        # update previous element type\n        previous_type = current_element_type\n    \n    # return the result\n    return same_type\n\n# test code", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_value):\n    \"\"\"\n    Write your logic here\n    \"\"\"\n    return True\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n# O(n) time | O(1) space\ndef check_type(tuple_obj):\n    element_type = type(tuple_obj[0])\n    for i in range(1, len(tuple_obj)):\n        if type(tuple_obj[i]) != element_type:\n            return False\n    return True", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    if len(set(map(type, tup))) == 1:\n        return True\n    else:\n        return False\n\ndef test_check_type():\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_val):\n    # Try to convert all elements of the tuple into a string\n    for i in tuple_val:\n        try:\n            str(i)\n        except:\n            return False\n    \n    # All elements converted\n    return True\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n#Find all unique elements in list and count their occurrences \n#If all elements of a list have same data type then count will be same \n#If count is different then data types are different \ndef check_type(tup):\n    count = {}\n    for i in tup:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return len(count) == 1\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef is_majority(array, n, m):\n    if len(array) <= 1:\n        return False\n\n    counter = defaultdict(int)\n\n    for item in array:\n        counter[item] += 1\n\n    for i, count in counter.items():\n        if count == m and count > n/2:\n            return True\n\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef majority_element(array, size):\n    # TODO: Write your code here\n    counter = {}\n    for i in range(size):\n        if array[i] in counter:\n            counter[array[i]] += 1\n        else:\n            counter[array[i]] = 1\n    for key in counter:\n        if counter[key] > size // 2:\n            return True\n    return False\n\n\ndef is_majority(array, size, target):\n    return majority_element(array, size) and target in array", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, m, e):\n\tif len(arr) < 3:\n\t\treturn False\n\tcount = 0\n\tfor i in arr:\n\t\tif i == e:\n\t\t\tcount += 1\n\t\tif count == m:\n\t\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(array, size, num):\n    first = 0\n    last = size - 1\n    while(first < last):\n        if(array[first] == num and array[last] == num):\n            return True\n        elif(array[first] == num):\n            first += 1\n        elif(array[last] == num):\n            last -= 1\n        else:\n            return False\n    return False\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, lower, upper):\n    return (arr[lower:upper]).count(arr[lower:upper][int(upper/2)]) >= (upper - lower)/2\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, x):\n    l, r = 0, n - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if arr[m] < x:\n            l = m + 1\n        elif arr[m] > x:\n            r = m - 1\n        else:\n            # found x\n            if (m > 0 and arr[m] == arr[m - 1]) or (m < r and arr[m] == arr[m + 1]):\n                l = m + 1\n            else:\n                return True\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef majority_element_checker(array, n, target):\n\tif n == 1:\n\t\treturn array[0] == target\n\telse:\n\t\tmid = n // 2\n\t\tif array[mid] == target:\n\t\t\treturn is_majority(array[:mid], n - mid, target) or is_majority(array[mid + 1:], n - mid, target)\n\t\telse:\n\t\t\treturn is_majority(array[:mid], n - mid, target) or is_majority(array[mid:], n - mid, target)\n\ndef is_majority(array, n, target):\n\treturn majority_element_checker(array, n, target)\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n# Return true if the element is majority element else return false\n\n\ndef is_majority(arr, size, n):\n    sum = 0\n    for i in range(size):\n        if arr[i] == n:\n            sum += 1\n        if sum == n:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, x):\n    count = 0\n\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            count -= 1\n\n        if count == 0:\n            return False\n\n        if count > 0:\n            return True\n\n    return False", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, num):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == num:\n            count += 1\n        if count > n // 2:\n            return True\n    return False\n\n"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        n = n&(n-1)\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while (n):\n        n = n & (n-1)\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(x):\n    result = 0\n    while x > 0:\n        if x & 1 == 1:\n            result += 1\n        x = x >> 1\n    return result\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    return bin(n).count('1')\n\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    bits = 0\n    while n:\n        bits += n & 1\n        n >>= 1\n    return bits\n\ndef count_Set_Bits_Counting_Method(n):\n    return bin(n).count('1')\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count=0\n    while n:\n        count+=n & 1\n        n=n >>1\n    return count", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(num):\n    result = 0\n    while num:\n        result += num & 1\n        num >>= 1\n    return result\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while(n):\n        n = n & (n - 1)\n        count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    if start == end-1:\n        if arr[start] < arr[end]:\n            return arr[start]\n        else:\n            return arr[end]\n    mid = (start+end)//2\n    if arr[start] > arr[end]:\n        if arr[start] < arr[mid]:\n            return find_Min(arr, start, mid)\n        else:\n            return find_Min(arr, mid, end)\n    else:\n        if arr[mid] < arr[end]:\n            return find_Min(arr, mid, end)\n        else:\n            return find_Min(arr, start, mid)", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(nums, start, end):\n    if start == end:\n        return nums[start]\n    else:\n        mid = (start+end) // 2\n        if nums[mid] < nums[end]:\n            return nums[mid]\n        elif nums[mid] < nums[start]:\n            return find_Min(nums, mid+1, end)\n        else:\n            return find_Min(nums, start, mid-1)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n# time complexity: O(logn)\n# space complexity: O(1)\n\n\ndef find_Min(arr, start, end):\n    if start >= end:\n        return arr[start]\n    mid = int((start + end) / 2)\n    if arr[mid] <= arr[end]:\n        if arr[start] <= arr[mid]:\n            return arr[start]\n        else:\n            return find_Min(arr, start, mid - 1)\n    else:\n        return find_Min(arr, mid + 1, end)", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    if start > end:\n        return arr[start]\n\n    mid = (start + end) // 2\n    if arr[mid] < arr[start]:\n        if arr[mid] < arr[end]:\n            return find_Min(arr, mid + 1, end)\n        else:\n            return find_Min(arr, start, mid - 1)\n    else:\n        if arr[mid] < arr[start + 1]:\n            return arr[mid]\n        else:\n            if arr[mid] < arr[end]:\n                return find_Min(arr, start + 1, mid - 1)\n            else:\n                return find_Min(arr, mid + 1, end)\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,start,end):\n    if end - start == 1:\n        if arr[start] < arr[end]:\n            return arr[start]\n        return arr[end]\n    \n    mid = (start + end)//2\n    if arr[start] > arr[mid]:\n        if arr[start] > arr[end]:\n            return arr[start]\n        \n        if arr[mid] < arr[end]:\n            return find_Min(arr,mid,end)\n        \n        if arr[start] > arr[mid]:\n            return find_Min(arr,start,mid)\n        \n    return arr[mid]\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n# A simple approach would be to start from the middle and traverse the list.\n# The idea is to find the middle index of the list and then check whether the element at the middle index is the min.\n# If not then traverse the list till you find the smallest element.\n# This algorithm is O(n) where n is the number of elements in the list.\n# Time complexity of O(n).\n# Space complexity of O(1).\n\ndef find_Min(arr,left,right):\n    # Base case\n    if left == right:\n        return arr[left]\n\n    # Find the middle index\n    mid = (left+right)//2\n\n    # If the middle element is the minimum element return the element\n    if mid == left or mid == right or arr[mid] < arr[mid-1]:\n        return arr[mid]\n\n    # If the element at the left is the minimum element return the element\n    if arr[left] <= arr[mid] and arr[mid] <= arr[right]:\n        return arr[mid]\n\n    # If the element at the right is the minimum element return the element\n    if arr[mid] <= arr[left] and arr[left] <= arr[right]:\n        return arr[left]\n\n    # If the element at the right is the minimum element return the element\n    if arr[mid] <= arr[right] and arr[right] <= arr[left]:\n        return arr[right]\n\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, start, end):\n\n    # find the minimum in the array,\n    # if there is a duplicates return the first instance of the duplicates\n    min = arr[start]\n    for i in range(start, end):\n        if arr[i] < min:\n            min = arr[i]\n    return min\n\n\n\ndef main():\n    arr = [1, 3, 4, 5, 6, 10, 11, 15, 20, 21, 23, 26]\n    print(find_Min(arr, 0, len(arr)))\n\n\nmain()", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,s,e):\n    if s==e:\n        return arr[s]\n    mid = (s+e)//2\n    if arr[mid]>arr[mid+1]:\n        return find_Min(arr,s,mid)\n    else:\n        return find_Min(arr,mid+1,e)\n\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_Min(arr,0,len(arr)-1)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1,2,3,4,5]\nsolution = 1\ntest_case = [arr,solution]\ntest_function(test_case)\n\narr = [12,11,13,5,6]\nsolution = 5\ntest_case = [arr,solution]\ntest_function(test_case)\n\narr = [12,11,13,5,6,7]\nsolution = 5\ntest_case = [arr,solution]\ntest_function(test_case)", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, low, high):\n\n    if high < low:\n        return\n\n    mid = low + (high - low) // 2\n\n    if arr[mid] > arr[high]:\n        return find_Min(arr, low, mid-1)\n    elif arr[mid] < arr[high]:\n        return find_Min(arr, mid+1, high)\n    else:\n        return find_Min(arr, low, mid-1)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,start,end):\n    if(start == end):\n        return arr[start]\n    if(start+1 == end):\n        return min(arr[start],arr[end])\n    mid = int((start+end)/2)\n    if(mid == 0 or mid == len(arr)-1):\n        return min(arr[start],arr[end])\n    if(arr[start] < arr[mid] and arr[mid] < arr[end]):\n        return arr[mid]\n    elif(arr[start] < arr[mid] and arr[mid] > arr[end]):\n        return find_Min(arr,start,mid)\n    elif(arr[start] > arr[mid] and arr[mid] < arr[end]):\n        return find_Min(arr,mid+1,end)\n    elif(arr[start] > arr[mid] and arr[mid] > arr[end]):\n        return find_Min(arr,mid+1,end)\n\narr = [3,4,5,1,2]"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    \"\"\"\n    Fill in this function to return the string with all odd index characters removed.\n    \"\"\"\n    return string[:len(string):2]\n\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    '''\n    This function removes the odd indexed characters of a given string.\n    '''\n    return string[::2]\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return \"\".join(list(string)[::2])\n\n#test cases", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    return \"\".join(x for i,x in enumerate(s) if i%2!=0)\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    return \"\".join(string[i] for i in range(0,len(string),2))\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    return ''.join([string[i] for i in range(0, len(string), 2)])\n\n\n# Test the solution", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(st):\n    \"\"\"\n    This function takes in a string as input and then removes all characters that have odd index values.\n    \"\"\"\n    return \"\".join([s for i, s in enumerate(st) if i % 2 == 0])\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\nfrom typing import List\n\n\ndef odd_values_string(string: str) -> str:\n    \"\"\"\n    A function to remove the characters which have odd index values of a given string.\n    :param string: A given string\n    :return: String with characters removed based on odd index values\n    \"\"\"\n    return \"\".join(string[::2])\n\n\ndef odd_values_list(string: List[str]) -> List[str]:\n    \"\"\"\n    A function to remove the characters which have odd index values of a given list of strings.\n    :param string: A given list of strings\n    :return: List of strings with characters removed based on odd index values\n    \"\"\"\n    return [odd_values_string(s) for s in string]", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return ''.join([x for i, x in enumerate(string) if i % 2 == 0])\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(str):\n    return \"\".join(i for i in str[::2])\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(n1,n2,n3):\n    if n1<n2:\n        if n1<n3:\n            return n1\n        else:\n            return n3\n    else:\n        if n2<n3:\n            return n2\n        else:\n            return n3\n\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    if b < a and b < c:\n        return b\n    if c < a and c < b:\n        return c\n\ndef min_of_three_elegant(a,b,c):\n    return min(a, min(b,c))\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a, b, c):\n    if a <= b <= c:\n        return a\n    elif b <= c < a:\n        return b\n    elif c < a <= b:\n        return a\n    elif c <= b < a:\n        return b\n    elif a < b <= c:\n        return c\n    elif b < a <= c:\n        return c\n    elif a <= c < b:\n        return c\n    else:\n        return a\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n  if a<b and a<c:\n    return a\n  if b<a and b<c:\n    return b\n  if c<a and c<b:\n    return c\n\ndef min_of_three2(a,b,c):\n  if a<=b and a<=c:\n    return a\n  if b<=a and b<=c:\n    return b\n  if c<=a and c<=b:\n    return c\n\ndef min_of_three3(a,b,c):\n  if a<b and b<c:\n    return a\n  if a<c and c<b:\n    return a\n  if b<a and a<c:\n    return b\n  if b<c and c<a:\n    return b\n  if c<a and a<b:\n    return c\n  if c<b and b<a:\n    return c\n  \ndef min_of_three4(a,b,c):\n  if a<=b and b<=c:\n    return a\n  if a<=c and c<=b:\n    return a\n  if b<=a and a<=c:\n    return b\n  if b<=c and c<=a:\n    return b\n  if c<=a and a<=b:\n    return c\n  if c<=b and b<=a:\n    return c\n  \n  ", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\n# Approach 1: Use built-in min() function\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n\n# Approach 2: Use if else statement\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(x, y, z):\n    min_number = min(x, y, z)\n    if x == min_number:\n        return y if y < z else z\n    if y == min_number:\n        return x if x < z else z\n    if z == min_number:\n        return x if x < y else y\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    min_of_three = a\n    if b<min_of_three:\n        min_of_three = b\n    if c<min_of_three:\n        min_of_three = c\n    return min_of_three\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n    else:\n        return 0\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c\n    else:\n        return 0\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(n1,n2,n3):\n    if n1 <= n2 and n1 <= n3:\n        return n1\n    if n2 <= n1 and n2 <= n3:\n        return n2\n    if n3 <= n1 and n3 <= n2:\n        return n3\n    return -1\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(range, start, end):\n    return ((start & range) == range) and ((end & range) == range)\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    # your code here\n    for i in range(start,end+1):\n        if bin(i).count('1') != 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(x,i,j):\n    if i < x and j >= x:\n        return False\n    elif i > x and j <= x:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start_bit, end_bit):\n    if end_bit < start_bit:\n        raise ValueError(\"Invalid Range\")\n    \n    # Convert the bits to a binary string\n    bits = bin(start_bit)[2:]\n    bits = bits.zfill(end_bit-start_bit+1)\n    \n    # Check for the all bits set condition\n    for bit in bits:\n        if bit == '0':\n            return False\n\n    return True\n\ndef all_Bits_Set_In_The_Given_Range(start_bit, end_bit):\n    if end_bit < start_bit:\n        raise ValueError(\"Invalid Range\")\n    mask = (1 << (end_bit-start_bit+1)) - 1\n    return not (start_bit & mask)\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(num,low,high):\n    if low >= high:\n        return True\n    return (num >> low) & 1 == 1\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    # Code here\n    #1) if the number is smaller than l or greater than r then False\n    #2) if the number is equal to l and r then True\n    #3) if the number is greater than r or lesser than l then it is False\n\n    # if l <= n and n <= r:\n    #     return True\n    if n >= l and n <= r:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(N,A,B):\n    bits = [0 for _ in range(N)]\n    for i in range(A,B+1):\n        for j in range(N):\n            if i & (1 << j) != 0:\n                bits[j] = 1\n                break\n    return all(bits)\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(a, b):\n    if a & b == 0:\n        return True\n    else:\n        return False\n\n#using bitwise OR\ndef all_Bits_Set_In_The_Given_Range(a, b):\n    if a | b == 2**32:\n        return True\n    else:\n        return False\n\n#using bitwise AND\ndef all_Bits_Set_In_The_Given_Range(a, b):\n    if a & b == a:\n        return True\n    else:\n        return False\n\n#using bitwise XOR\ndef all_Bits_Set_In_The_Given_Range(a, b):\n    if a^b != 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(N,L,R):\n    if(L<0 or R<0 or R<L or R>=N or L>=N):\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(a,b,n):\n    if n < 0:\n        return False\n\n    if (a & (2**n-1)) == (2**n-1):\n        return False\n    else:\n        if (b & (2**n-1)) == (2**n-1):\n            return False\n        else:\n            return True\n        "], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\n# return: reversed array\ndef re_arrange_array(arr, n):\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] < 0:\n            i += 1\n        elif arr[j] > 0:\n            j -= 1\n        else:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n    return arr\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = re_arrange_array(arr, len(arr))\n    print(output)\n    if sum(output) == sum(solution):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n# test_function([[9, 2, -3, -1, 4, 5, 6, -7, 8], [9, -1, -3, 2, -7, 4, 5, 6, 8]])\ntest_function([[9, 2, -3, -1, 4, 5, 6, -7, 8, 9], [9, -1, -3, 2, -7, 4, 5, 6, 8, 9]])", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    i = j = k = 0\n    while i < n and j < n:\n        while j < n and arr[j] > 0:\n            j += 1\n        if j < n:\n            arr[k] = arr[i]\n            k += 1\n            i += 1\n            j += 1\n        else:\n            arr[k] = arr[i]\n            k += 1\n            i += 1\n    while i < n:\n        arr[k] = arr[i]\n        k += 1\n        i += 1\n    return arr", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    \"\"\"\n    Returns the re-arranged array\n    \"\"\"\n    count = 0\n    neg_arr = []\n    for i in arr:\n        if i < 0:\n            count += 1\n            neg_arr.append(i)\n        else:\n            continue\n    for i in range(count):\n        arr.insert(i, neg_arr[i])\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(array, size):\n    i = 0\n    j = size - 1\n    while i <= j:\n        while array[i] < 0:\n            i += 1\n        while array[j] >= 0:\n            j -= 1\n        if i < j:\n            array[i], array[j] = array[j], array[i]\n        i += 1\n        j -= 1\n    return array\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, max_val):\n    if len(arr) == 0:\n        return arr\n    neg_index = 0\n    pos_index = 1\n    while pos_index < len(arr) and arr[pos_index] <= 0:\n        pos_index += 1\n    if pos_index == len(arr):\n        return arr\n    return re_arrange_array(arr[:neg_index] + arr[pos_index:], max_val) + re_arrange_array(arr[neg_index:pos_index], max_val)\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, n):\n    left = right = 0\n\n    while left < right:\n        while left < right and array[right] >= 0:\n            right -= 1\n        array[left], array[right] = array[right], array[left]\n        left += 1\n        while left < right and array[left] < 0:\n            left += 1\n        array[left], array[right] = array[right], array[left]\n        right -= 1\n    return array\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, limit):\n    temp = []\n    for i in arr:\n        if i > 0:\n            temp.append(i)\n        else:\n            if len(temp) == 0:\n                temp.append(i)\n            else:\n                if i > temp[-1]:\n                    temp.append(i)\n                elif i <= temp[-1]:\n                    temp.insert(0, i)\n    return temp[:limit]\n\ndef re_arrange_array2(arr, limit):\n    temp = []\n    for i in arr:\n        if i > 0:\n            temp.append(i)\n        else:\n            if len(temp) == 0:\n                temp.append(i)\n            else:\n                if i > temp[-1]:\n                    temp.append(i)\n                elif i <= temp[-1]:\n                    temp.insert(0, i)\n    return temp[:limit]\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, n):\n    return [x for x in sorted(array) if x >= 0] + [x for x in sorted(array) if x < 0]\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(nums, k):\n    neg_start, neg_end, pos_start, pos_end = 0, 0, 0, 0\n    neg_arr, pos_arr = [], []\n    while neg_end < k and pos_end < k:\n        if nums[neg_end] < 0:\n            neg_arr.append(nums[neg_end])\n            neg_end += 1\n        else:\n            pos_arr.append(nums[pos_end])\n            pos_end += 1\n    while neg_end < k:\n        neg_arr.append(nums[neg_end])\n        neg_end += 1\n    while pos_end < k:\n        pos_arr.append(nums[pos_end])\n        pos_end += 1\n    return neg_arr + pos_arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    negative, positive = [], []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    for i in range(n):\n        if negative:\n            arr[i] = negative.pop()\n        else:\n            arr[i] = positive.pop()\n    return arr\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(str, ch):\n    return str.replace(\" \", ch)\n\n# Tests\nimport pytest\n\ndef test_replace_blank():\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\ndef test_replace_blank_no_change():\n    assert replace_blank(\"hello people\",\"#\")==(\"hello people\")\n\ndef test_replace_blank_str():\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\ndef test_replace_blank_one_space():\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\ndef test_replace_blank_two_spaces():\n    assert replace_blank(\" hello people\",'@')==(\" hello@people\")\n\ndef test_replace_blank_two_spaces_no_change():\n    assert replace_blank(\" hello people\",\"#\")==(\" hello people\")", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, c):\n    return str.replace(\" \", c)\n\ndef replace_blank(str, c):\n    for i in range(len(str)):\n        if str[i] == ' ':\n            str = str[:i] + c + str[i+1:]\n    return str\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(sentence, replace_with):\n    # Code Here\n    new_sentence = ''\n    for i in sentence:\n        if i==' ':\n            new_sentence += replace_with\n        else:\n            new_sentence += i\n    return new_sentence", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s,k):\n    new_s=s.replace(' ','k')\n    return new_s\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(text, ch):\n    return text.replace(' ', ch)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(s, character):\n    return \"\".join(character if char==\" \" else char for char in s)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, replace_char):\n    # code goes here\n    return string.replace(' ', replace_char)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\nimport re\n\n\ndef replace_blank(s, ch):\n    return re.sub(\"\\s\", ch, s)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s,ch):\n    return s.replace(' ','@')\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(str1, ch):\n    new_str = \"\"\n    for i in str1:\n        if i==' ':\n            new_str += ch\n        else:\n            new_str += i\n    return new_str\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nimport unittest\n\ndef max_sum(triangle, len):\n    \"\"\"\n\n    :param triangle: a list of lists\n    :param len: length of each list in the triangle\n    :return: the max sum of the numbers in the triangle\n    \"\"\"\n\n    # sanity check\n    if not triangle or len <= 0:\n        return 0\n    if len == 1:\n        return triangle[0][0]\n    else:\n        max_sum = 0\n        for i in range(len):\n            max_sum = max(max_sum, max_sum_helper(triangle, len, i))\n\n    return max_sum\n\ndef max_sum_helper(triangle, len, index):\n    \"\"\"\n    Helper function that finds the max sum of the numbers that lie on the path from the root to the\n    leaf at index.\n    :param triangle: a list of lists\n    :param len: length of each list in the triangle\n    :param index: the index of the leaf node in the path\n    :return: the max sum of the numbers\n    \"\"\"\n    if len == 2:\n        return triangle[0][0] + triangle[1][0]\n    else:\n        return max(triangle[index][0] + triangle[index][index + 1] + max_sum_helper(triangle, len - 1, index + 1), max_sum_helper(triangle, len - 1, index))\n\ndef max_sum_bottom_up(triangle, len):\n    \"\"\"\n    Recursively finds the max sum of the numbers in the triangle bottom up.\n    :param triangle: a list of lists\n    :param len: length of each list in the triangle\n    :return: the max sum of the numbers\n    \"\"\"\n    if len == 1:\n        return triangle[0][0]\n    else:\n        max_sum = [triangle[0][0]] * (len - 1)\n        for i in range(1, len):\n            for j in range(i - 1, -1, -1):\n                max_sum[i] = max(max_sum[i], triangle[i][j] + max_sum[j])\n        return max(max_sum", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n  # handle edge cases\n  if len(triangle) == 0:\n    return 0\n  if len(triangle) == 1:\n    if len(triangle[0]) == 1:\n      return triangle[0][0]\n    elif len(triangle[0]) == 0:\n      return 0\n    else:\n      return triangle[0][0] + triangle[0][-1]\n  # build dp table\n  dp = [[0] * (n + 1) for _ in range(len(triangle))]\n  # populate first row\n  for i in range(n):\n    dp[0][i] = triangle[0][i]\n  # populate rest of the table\n  for j in range(1, len(triangle)):\n    for i in range(n):\n      dp[j][i] = max(dp[j - 1][i], dp[j - 1][i - 1]) + triangle[j][i]\n  return dp[-1][-1]", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, row):\n    total = 0\n    for index in range(row - 1, -1, -1):\n        total += triangle[index][index]\n    return total", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, n):\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = triangle[i][i]\n\n    for j in range(n-2,-1,-1):\n        for i in range(j+1, n):\n            dp[i][j] = max(dp[i][j+1], dp[i+1][j]) + triangle[i][j]\n\n    return dp[0][0]\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, height):\n    \"\"\"\n    O(n^2) time, O(n) space\n    :param triangle: list of list of numbers\n    :param height:\n    :return:\n    \"\"\"\n    max_sum_by_index = [0 for i in range(height)]\n\n    for i in range(height):\n        # for every row, starting from the bottom, find the max sum\n        # by going left to right and adding the value at that position\n        # to the max sum found in the previous row\n        for j in range(i, -1, -1):\n            max_sum_by_index[j] = triangle[j][i] + max(max_sum_by_index[j + 1], 0)\n\n    return max_sum_by_index[0]\n\n\ndef max_sum_bottom_up(triangle):\n    \"\"\"\n    O(n^2) time, O(1) space\n    :param triangle: list of list of numbers\n    :return:\n    \"\"\"\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] = triangle[i][j] + max(triangle[i + 1][j], triangle[i + 1][j + 1])\n\n    return triangle[0][0]", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, row):\n    max_val = triangle[0][0]\n\n    for i in range(1, row):\n        for j in range(i+1):\n            val = triangle[i][j] + max(triangle[i-1][j], triangle[i-1][j-1])\n            if val > max_val:\n                max_val = val\n\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, num_rows):\n    if not triangle:\n        return 0\n    sums = [triangle[0][0]]\n    for row in triangle[1:]:\n        sums.append(max(sums[i-1]+row[i] for i in range(1, len(row))) or 0)\n    return sums[num_rows-2]\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(triangle: List[List[int]], n: int) -> int:\n    max_sum = triangle[0][0]\n    for i in range(n):\n        for j in range(i + 1):\n            if triangle[i][j] + triangle[i][j + 1] > max_sum:\n                max_sum = triangle[i][j] + triangle[i][j + 1]\n    return max_sum\n\n\ndef test_max_sum() -> None:\n    \"\"\"\n    Run sample tests\n    \"\"\"\n    assert max_sum([[1], [2, 1], [3, 3, 2]], 3) == 6\n    assert max_sum([[1], [2, 1], [3, 4, 2]], 3) == 8\n    assert max_sum([[1, 3], [7, 5, 2], [4, 7, 1, 1]], 3) == 14\n    assert max_sum([[1, 2, 4], [2, 4, 6], [7, 5, 2, 8]], 3) == 22", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, index):\n    if index == 0:\n        return triangle[0][0]\n    elif index == 1:\n        return max(triangle[0][0], triangle[1][0] + triangle[0][1])\n    else:\n        return max(triangle[0][0] + max_sum(triangle[1:index], index - 1),\n                   triangle[1][0] + triangle[0][1] + max_sum(triangle[2:index], index - 2))\n\ndef test_max_sum():\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, n):\n    for i in range(n-2, -1, -1):\n        triangle[i][0] += triangle[i+1][0]\n        triangle[i][1] += max(triangle[i+1][0], triangle[i+1][1])\n    return max(triangle[0][0], triangle[0][1])\n\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nimport heapq\ndef larg_nnum(lst,n):\n    return heapq.nlargest(n,lst)\n\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nIn order to make it more efficient, we can use heapq.merge. Then we can use heapq.heappop() to remove the least element.\n\n### Code:\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(lst,n):\n    pass\n\n#assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nimport random\ndef larg_nnum(arr,n):\n    arr=sorted(arr)[-n:]\n    return arr\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(lst,n):\n    return sorted(lst,reverse=True)[:n]", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(dataset, n):\n    # A function to get the n largest items from a dataset.\n    return sorted(dataset, reverse = True)[:n]\n\n# Test", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(data, n):\n    # TODO: Implement me\n    # sort data\n    data = sorted(data)\n    # append first n elements to list l\n    l = [data[0]]\n    for i in range(1,n):\n        l.append(data[i])\n    return l\n\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\n# assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(data, n):\n    data.sort()\n    return data[-n:]\n\ndef test_larg_nnum():\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)==[100, 90]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(nums, n):\n    \"\"\"\n    Time: O(nlogn)\n    Space: O(n)\n    \"\"\"\n    return sorted(nums, reverse=True)[:n]\n\n\ndef test_larg_nnum():\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(ds,n):\n    ds = sorted(ds,reverse=True)\n    return ds[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(lst,n):\n    return sorted(lst,reverse=True)[:n]\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius,height):\n    lateralsurface_cylinder = 2 * 3.14159 * radius * height + 2 * 3.14159 * radius ** 2\n    return lateralsurface_cylinder\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateral_surface_cylinder(radius, height):\n    lateral_area = 2*(pi*radius*height) + 2*pi*radius**2\n    return lateral_area\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius, height):\n    return 2*math.pi*radius*height + 2*math.pi*radius**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\nimport math\ndef lateralsurface_cylinder(r,h):\n    area = 2*math.pi*r*h +2*math.pi*r**2\n    return area", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(r,h):\n    return 2*pi*r*h+2*pi*r*r\n    ", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n\t\"\"\"\n\t[summary]\n\tCalculate the lateral surface area of a cylinder\n\n\tParameters\n\t----------\n\tr : float\n\t\tRadius of the cylinder\n\th : float\n\t\tHeight of the cylinder\n\n\tReturns\n\t-------\n\tfloat\n\t\tThe lateral surface area of the cylinder\n\n\t\"\"\"\n\tsa=2*3.14*r*h\n\treturn sa\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius,height):\n    return 2*np.pi*radius**2+(2*np.pi*radius*height)*2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n    \"\"\"\n    h= height\n    r=radius\n    pi*r^2 + pi*r*h+ pi*h^2\n    \"\"\"\n    return 2*np.pi*r**2 + 2*np.pi*r*h + 2*np.pi*h**2\n\n# TESTING THE LATERAL SURFACE AREA OF THE CYLINDER", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n    return 2*math.pi*r*h + 2*math.pi*r**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius,height):\n    lateralsurface=((2*radius)*height)+((2*pi)*radius**2)\n    return lateralsurface\n#testing the function"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(n):\n    \"\"\"\n    Args:\n       n(int): lenght of a side of a cube\n    Returns:\n       vol(int): volume of a cube\n    \"\"\"\n    return n**3", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side):\n    return side ** 3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(num):\n    return num**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(n):\n    return n**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(x):\n    volume = x*x*x\n    return volume\n\ndef main():\n    print(\"Hello World\")\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side):\n    return side ** 3\n\n\ndef test_volume_cube():\n    assert volume_cube(3) == 27\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    vol = side**3\n    return vol", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\nimport math\ndef volume_cube(a):\n    return pow(a,3)\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side):\n    return side**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    \"\"\"\n    You have been given the side of a cube, find its volume, and return it.\n    :param side: the side of the cube\n    :return: volume of the cube\n    \"\"\"\n    return side**3\n\ndef test_volume_cube():\n    assert volume_cube(3) == 27"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    num = bin(num)\n    num = num[2:]\n    if len(num) % 2 == 0:\n        num = num[:len(num)//2]\n        num = num + \"0\"*(len(num)//2)\n    else:\n        num = num[:len(num)//2+1]\n        num = num + \"0\"*(len(num)//2+1)\n    num = int(num,2)\n    return num\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    return num | (num & -num)\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(n):\n    if n % 2 == 0:\n        n = n + 1\n    else:\n        n = n - 1\n    return n\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number: int) -> int:\n    number = number & 0b0000000000000000000000000011111111\n    return number\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    \"\"\"\n    Pythonic way to set all even bits\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Can't set even bits in negative numbers\")\n    else:\n        return num & (~1)\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    even = 0\n    for i in range(0, 32):\n        if (num & 1) == 1:\n            even |= 1 << i\n        num = num >> 1\n    return even\n\ndef test_even_bit_set_number():\n    assert even_bit_set_number(10) == 10\n    assert even_bit_set_number(100) == 2\n    assert even_bit_set_number(10000000) == 0\n\ntest_even_bit_set_number()\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n\t# This is a function to set all even bits of a given number.\n\t# Use the bitwise AND operator ( & ) to perform bitwise operations.\n\t# The bitwise AND operator ( & ) sets the bits that are common between the two operands.\n\t# For example, 001010 & 000110 = 000010 ( 2 )\n\t# 001010 & 001010 = 001010 ( 10 )\n\t# 001010 & 000111 = 000010 ( 2 )\n\treturn number & 0xAAAAAAAA\n\n\n# Write a python function to set all odd bits of a given number.", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n & (n-1)\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    n = n & ~(n+1)\n    return n\n\n# for i in range(2, 11):\n#     print(i, even_bit_set_number(i))", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(x):\n    return x | x >> 1\n\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(side_of_triangle, unit):\n    count = 0\n    if(side_of_triangle >= unit):\n        a = unit\n        b = unit\n        c = side_of_triangle - unit\n        count = count + 1\n        while(a <= (side_of_triangle - unit)):\n            b = unit\n            c = side_of_triangle - (a + b)\n            if(b < a):\n                break\n            if(b == a):\n                count = count + 1\n            if(b < c):\n                a = b + 1\n            else:\n                a = c + 1\n    return count\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\nimport math\ndef No_of_Triangle(side,hight):\n    if side % hight == 0:\n        return int((math.pow(side,3) - math.pow(hight,3)) / math.pow(hight,2)) + 1\n    return 0\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        side = int(input())\n        hight = int(input())\n        print(No_of_Triangle(side,hight))\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(length, width):\n    return int((length**2)*(width**2)/120)\n\n#print(No_of_Triangle(4,2))\n#print(No_of_Triangle(3, 3))\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(side, a):\n    if side < 1:\n        return 0\n    if side == 1:\n        return a+1\n\n    cnt = 0\n    if side%2 == 0:\n        cnt = (side//2)*a\n    else:\n        cnt = (side//2)*a + a+1\n    return cnt\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\nfrom math import sqrt\n\ndef is_integer(x):\n    return int(x) == x\n\n\ndef No_of_Triangle(h, r):\n    result = 0\n\n    for i in range(1, h + 1):\n        for j in range(1, h + 1):\n            for k in range(1, h + 1):\n                if (i + j + k == h and sqrt(i ** 2 + j ** 2 + k ** 2) == r):\n                    result += 1\n\n    return result\n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\nfrom math import sqrt\ndef No_of_Triangle(R,n):\n    counter=0\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            for k in range(1,j+1):\n                hypotenuse=sqrt(R**2-(i**2)+(j**2)-(k**2))\n                if(hypotenuse==R):\n                    counter+=1\n    return(counter)", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\n# Function to count the maximum number of equilateral triangles\ndef No_of_Triangle(s, l):\n\n    # Create an empty list to store the equilateral triangles\n    triangles = []\n\n    # Iterate till s/2 to form a triangle\n    for i in range(s//2):\n\n        # Iterate till l/2 to form a triangle\n        for j in range(l//2):\n\n            # Append the formed triangle\n            triangles.append([i*2, i*2+1, i*2+2])\n\n    # Iterate through all the formed triangles to find the equilateral triangles\n    for i in range(len(triangles)-2):\n\n        # Iterate through all the formed triangles to find the equilateral triangles\n        for j in range(i+1, len(triangles)):\n\n            # Iterate through all the formed triangles to find the equilateral triangles\n            for k in range(j+1, len(triangles)):\n\n                # Check if the formed triangles are equilateral\n                if (triangles[i][1] - triangles[i][0])**2 + (triangles[j][1] - triangles[j][0])**2 + (triangles[k][1] - triangles[k][0])**2 == 36:\n\n                    # Append the equilateral triangle\n                    triangles.append([triangles[i][0], triangles[j][1], triangles[k][2]])\n\n    # Return the maximum number of equilateral triangles\n    return len(triangles)", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\nimport math\ndef No_of_Triangle(n,r):\n    if(r<0):\n        return 0\n    if(r>=n):\n        return 1\n    return(No_of_Triangle(n-1,r)+No_of_Triangle(n-1,r-1))", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n,k):\n    n = n - 1\n    k = k - 1\n    return n * k * (n + k + 1) // 3\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(side,n):\n    triangles = 1\n    for i in range(n):\n        triangles *= 4\n    return triangles\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(lst):\n    dic = dict()\n    for i in range(len(lst)):\n        if lst[i] in dic.keys():\n            dic[lst[i]] += 1\n        else:\n            dic[lst[i]] = 1\n    return dic\n\n# Test code", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(records):\n    res = {}\n    for record in records:\n        if record[1] not in res:\n            res[record[1]] = []\n        res[record[1]].append(record)\n    return res\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(records):\n    result = {}\n    for i in records:\n        if (i[0], i[1]) in result:\n            result[(i[0], i[1])] += 1\n        else:\n            result[(i[0], i[1])] = 1\n\n    return result\n\n# assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    result = {}\n    for tuple_ in tuples:\n        key = tuple_[0]\n        val = tuple_[1]\n        if key in result:\n            result[key] += 1\n        else:\n            result[key] = 1\n    return result\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(records):\n    return {t: records.count(t) for t in records if records.count(t) > 1}\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(records):\n  return {}\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n\toccurences = {}\n\tfor time, event in tuples:\n\t\tif time not in occurences:\n\t\t\toccurences[time] = []\n\t\toccurences[time].append(event)\n\treturn occurences\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    list_of_tuples = []\n    dict_of_tuples = {}\n    for i in tuples:\n        if i in list_of_tuples:\n            dict_of_tuples[i] += 1\n        else:\n            list_of_tuples.append(i)\n            dict_of_tuples[i] = 1\n    return dict_of_tuples\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    dict_counter = {}\n    for tuple in tuples:\n        if tuple in dict_counter:\n            dict_counter[tuple] += 1\n        else:\n            dict_counter[tuple] = 1\n    return dict_counter", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    output = {}\n    for record in tuples:\n        if record in output:\n            output[record] += 1\n        else:\n            output[record] = 1\n    return output\n\n# 1st\ndef check_occurences(tuples):\n    occurrences = {}\n    for record in tuples:\n        if record not in occurrences:\n            occurrences[record] = 0\n        occurrences[record] += 1\n    return occurrences\n\n# 2nd\ndef check_occurences(tuples):\n    d = {}\n    for r in tuples:\n        if r not in d:\n            d[r] = 0\n        d[r] += 1\n    return d\n\n# 3rd\ndef check_occurences(tuples):\n    return {r: tuples.count(r) for r in tuples}\n\n# 4th\ndef check_occurences(tuples):\n    return {r: tuples.count(r) for r in tuples}\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    l = []\n    for i in range(len(string)):\n        l.append(string[i])\n        l.append(string[:i+1])\n    return len(set(l)) - 1\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\nimport unittest\n\n\ndef number_of_substrings(string):\n    return len(string) * len(string[1:])\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(s):\n    if s is None:\n        return 0\n    \n    if s == \"\":\n        return 1\n    \n    count = 0\n    j = 0\n    for i in range(len(s)):\n        if s[i] == s[j] and j > 0:\n            count += 1\n            j -= 1\n        else:\n            j = i\n            \n    return count + 1\n        ", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(str):\n    return len(list(set([x[i:i+len(str)] for i in range(len(str))])))\n\n# assert number_of_substrings(\"abc\") == 6", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    return sum([1 for i in range(len(string)) for j in range(i+1, len(string)+1)])\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef count_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if(i==j):\n                continue\n            else:\n                count += 1\n    return count\n\ndef test():\n    assert count_substrings(\"abc\") == 6\n    assert count_substrings(\"a\") == 1\n    print(\"Success!\")\n\ntest()", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            for j in range(len(s)):\n                if j > i:\n                    if s[j] == 'b':\n                        for k in range(len(s)):\n                            if k > j:\n                                if s[k] == 'c':\n                                    count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(input_string):\n    \"\"\"\n    Count number of substrings using naive approach.\n\n    Parameters\n    ----------\n    input_string: str\n\n    Returns\n    -------\n    number_of_substrings: int\n    \"\"\"\n\n    number_of_substrings = 0\n    substring = ''\n    for letter in input_string:\n        substring = substring + letter\n        if substring:\n            number_of_substrings += 1\n\n    return number_of_substrings\n\ndef number_of_substrings_no_extra_space(input_string):\n    \"\"\"\n    Count number of substrings using one extra space.\n\n    Parameters\n    ----------\n    input_string: str\n\n    Returns\n    -------\n    number_of_substrings: int\n    \"\"\"\n\n    number_of_substrings = 0\n    substring = ''\n    for letter in input_string:\n        substring += letter\n        if substring:\n            number_of_substrings += 1\n\n    return number_of_substrings\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(s):\n    return len(s) * len(s[1:])\n\n\ndef main():\n    test_cases = [\"abc\", \"ab\", \"a\", \"\"]\n    for test_case in test_cases:\n        print(f\"The number of substrings in {test_case} is {number_of_substrings(test_case)}\")\n\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 0 or m == 0:\n        return 0\n    \n    if m <= 1000000:\n        return 1\n    \n    # We can think of this problem as computing the value of the Fibonacci sequence.\n    # The value at index n is given by: fib(n) = fib(n-1) + fib(n-2)\n    # fib(n) = fib(n-1) + fib(n-2) where fib(n-1) is the fib(n-2) value.\n    # So, fib(n) = 2 * fib(n-2).\n    \n    # This can be written as fib(n) - fib(n-2) = 2 * fib(n-2)\n    # So, fib(n) - fib(n-2) is always 2 * fib(n-2).\n    \n    # fib(n) = fib(n-1) + fib(n-2)\n    # fib(n) = fib(n-1) + 2 * fib(n-2)\n    # fib(n) = 2 * fib(n-1) + fib(n-2)\n    # fib(n) = 2 * fib(n-1) + 2 * fib(n-2)\n    # fib(n) = 2 * fib(n-2) + 2 * fib(n-3)\n    # fib(n) = 2 * fib(n-3) + 2 * fib(n-4)\n    # ...\n    \n    # Let's call the fib(n-2) value x.\n    # x = 2 * fib(n-4)\n    # x = 2 * x\n    # x = 2^2 * fib(n-6)\n    # x = 2^3 * fib(n-8)\n    # ...\n    # x = 2^n * fib(n-2n)\n    \n    # So, the fib(n)", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    if n == 1:\n        return m - 1\n    return get_total_number_of_sequences(n-1, m) + (m - 2) * get_total_number_of_sequences(n-2, m)\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\nfrom itertools import count\n\n\ndef get_total_number_of_sequences(n: int, m: int):\n    return sum(\n        map(\n            lambda i: i * (m - 2 * i + 1) // 2 + i * (m - 2 * i) // 2,\n            count(1),\n        )\n    )\n\n\ndef get_total_number_of_sequences_optimized(n: int, m: int):\n    if m < 0:\n        return 0\n\n    if m == 0:\n        return 1\n\n    if m == 1:\n        return n\n\n    if n == 0:\n        return 0\n\n    prev_n_sequences = 0\n    n_sequences = 0\n\n    for i in range(1, m // 2 + 1):\n        prev_n_sequences = n_sequences\n        n_sequences += prev_n_sequences\n\n    return n_sequences + prev_n_sequences", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n: int, m: int) -> int:\n    return (m + n - 1)//n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\n#my answer\ndef get_total_number_of_sequences(n, m):\n    num_seq = 0\n    for i in range(1, n+1):\n        for j in range(0, m+1):\n            if i*2 <= j:\n                num_seq += 1\n    return num_seq\n\n\n#answer from solution\ndef get_total_number_of_sequences(n, m):\n    return sum(i*2 <= j for i in range(1, n+1) for j in range(0, m+1))\n\n\n#answer from solution\ndef get_total_number_of_sequences(n, m):\n    return sum(1 for i in range(1, n+1) for j in range(0, m+1) if i*2 <= j)", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(m, n):\n    #\n    # Write your code here.\n    #\n    return\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    return (m - 1) * (2 ** n) - 1\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n    if m < 2 * n:\n        return 0\n    return get_total_number_of_sequences(n - 1, 2 * n - 1) + get_total_number_of_sequences(n - 1, m)\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\n# here we will make use of 2 for loops\n# one for keeping track of the prev_number\n# the other for iterating over all the possible choices\n# for every choice we will update the prev_number\n\ndef get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    else:\n        prev_number = 1\n        for i in range(2, m+1):\n            prev_number += get_total_number_of_sequences(i-1, n-1)\n        return prev_number", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 1:\n        return m\n    if n == 2:\n        return m - 1\n\n    result = 0\n    for i in range(2, m, 2):\n        result += get_total_number_of_sequences(n - 1, i)\n    return result\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(my_list, my_list2):\n    my_list[-1] = my_list2\n    return my_list\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list, replace_list):\n    return list[:len(list)-1]+replace_list\n\nreplace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list1, list2):\n    list1.pop(-1)\n    list1.extend(list2)\n    return list1\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n# Your solution goes here\ndef replace_list(my_list, new_list):\n    my_list[-1] = new_list\n    return my_list\n# Call the function\nreplace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(l1, l2):\n    l1[-1] = l2\n    return l1\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst1, lst2):\n    lst1[-1]=lst2\n    return lst1\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list1,list2):\n    for i in range(len(list2)):\n        list1[len(list1)-1-i]=list2[i]\n    return list1\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(old_list, new_list):\n    old_list[len(old_list) - 1] = new_list\n    return old_list\n\n\ndef test_replace_list():\n    old_list = [1, 3, 5, 7, 9, 10]\n    new_list = [2, 4, 6, 8]\n    assert replace_list(old_list, new_list) == [1, 3, 5, 7, 9, 2, 4, 6, 8]", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, val):\n    lst.pop()\n    lst.append(val)\n    return lst\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(my_list, new_list):\n    \"\"\"\n    Fill in this function to replace the last element of the list with another list\n    >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n    [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    >>> replace_list([1, 2, 3, 4, 5],[6, 7, 8, 9, 10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    # my_list[len(my_list) - 1] = new_list\n    my_list.append(new_list)\n    return my_list\n\n# doctest.run_docstring_examples(replace_list, globals())\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(height, width, depth):\n    myarr = []\n    for i in range(height):\n        myarr.append([])\n        for j in range(width):\n            myarr[i].append([])\n            for k in range(depth):\n                myarr[i][j].append('*')\n    return myarr\n\n# assert array_3d(6,4,3) == [[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\n\n# TODO: Write a function to get the number of occurance of a character in a string\n# assert number_of_occurance('mom', 'mom') == 1\n\ndef number_of_occurance(sub_string, string):\n    count = 0\n    for i in range(len(string) - len(sub_string) + 1):\n        if string[i:i + len(sub_string)] == sub_string:\n            count += 1\n    return count\n\n# assert number_of_occurance('mom', 'mom') == 1\n# assert number_of_occurance('mom', 'mommom') == 2\n# assert number_of_occurance('mom', 'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(x,y,z):\n    return [[['*']*z for i in range(y)] for j in range(x)]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(a,b,c):\n    list_array_3d = [[['*' for i in range(b)] for i in range(c)] for i in range(a)]\n    return list_array_3d\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(r,c,z):\n\tnew3d=[]\n\tfor i in range(r):\n\t\tnew3d.append([])\n\t\tfor j in range(c):\n\t\t\tnew3d[i].append([])\n\t\t\tfor k in range(z):\n\t\t\t\tnew3d[i][j].append(\"*\")\n\treturn new3d\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(r,c,l):\n    arr=[]\n    for i in range(r):\n        arr.append(['*']*c)\n    for i in range(l):\n        for j in range(r):\n            for k in range(c):\n                arr[j][k]='*'\n    return arr\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(n,m,o):\n    l=[]\n    for i in range(o):\n        l.append([])\n        for j in range(m):\n            l[i].append(['*']*n)\n    return l\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(x, y, z):\n    result = []\n    for i in range(x):\n        a = []\n        for j in range(y):\n            b = []\n            for k in range(z):\n                b.append('*')\n            a.append(b)\n        result.append(a)\n    return result\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows, columns, depth):\n    # return list of lists of lists with all elements as '*'\n    return [[['*']*columns]*rows]*depth\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(x, y, z):\n    return [[['*' for _ in range(z)] for _ in range(y)] for _ in range(x)]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(h,w,l):\n    a=[]\n    for i in range(h):\n        b=[]\n        for j in range(w):\n            c=[]\n            for k in range(l):\n                c.append('*')\n            b.append(c)\n        a.append(b)\n    return a\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(s):\n    return len(s)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(st):\n    total_chars=0\n    for ch in st:\n        total_chars+=1\n    return total_chars\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(sentence):\n  print(sentence)\n  return(len(sentence))\n\ncount_charac(\"python programming\")```\n\n### Output:\n\npython programming\n\n### Description:\n\nWrite a function to find the length of the longest word in a string.\n\n### Code:\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(text):\n    count=0\n    for ch in text:\n        count+=1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n  return sum(map(len,string))\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_chars(string):\n    count = 0\n    for char in string:\n        count +=1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_characters(s):\n    return len(s)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(str1):\n  count = 0\n  for i in str1:\n    count+=1\n  return count\n\ndef count_charac1(str1):\n  return len(str1)\n\ndef count_charac2(str1):\n  return sum(1 for i in str1)\n\ndef count_charac3(str1):\n  return sum(i.isalnum() for i in str1)\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\n# abraham's solution\ndef sort_on_occurence(my_list):\n    from collections import defaultdict\n    occurences = defaultdict(list)\n    # for each element in the list, add to occurences defaultdict the count of the first element of the tuple\n    for element in my_list:\n        occurences[element[0]].append(element)\n    # sort the defaultdicts by the first element, to get a list of lists\n    occurences_sorted = sorted(occurences.items())\n    # for each element in occurences_sorted, sort the list by the second element (the count)\n    return [sorted(element[1], key=lambda x: x[1]) for element in occurences_sorted]\n\n# tests", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\n# Time: O(nlogn)\n# Space:O(n)\ndef sort_on_occurence(arr):\n    ans = []\n    for i in range(len(arr)):\n        idx = arr[i][0]\n        val = arr[i][1:]\n        ans.append(val + [idx] * (len(arr)-i-1))\n    return ans\n\n\ndef main():\n    print(sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]))\n\n\nmain()", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(data):\n    # Write your code here\n    return sorted(data, key=lambda x:x[0])\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(list_of_tuples):\n    sorted_by_first_elements = []\n    first_elements = []\n    for item in list_of_tuples:\n        first_elements.append(item[0])\n    for first_element in first_elements:\n        for i in range(len(list_of_tuples)):\n            if list_of_tuples[i][0] == first_element:\n                sorted_by_first_elements.append(list_of_tuples[i])\n    return sorted_by_first_elements\n\ndef test_function(test_case):\n    sorted_by_occurence = sort_on_occurence(test_case[0])\n    if sorted_by_occurence == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')],\n             [(1, 'Cara', 'Jake', 2), (2, 'Bob', 1)])\n\ntest_function([(1, 'Jake'), (1, 'Bob'), (1, 'Cara')],\n             [(1, 'Cara', 'Bob', 'Jake')])\n\ntest_function([(1, 'Jake'), (1, 'Bob'), (2, 'Cara')],\n             [(1, 'Bob', 'Jake', 2), (2, 'Cara', 1)])\n\ntest_function([(1, 'Jake'), (1, 'Bob'), (1, 'Cara')],\n             [(1, 'Bob', 'Cara', 'Jake')])\n\ntest_function([(1, 'Jake'), (1, 'Bob'), (1, 'Cara'), (2, 'Cara'), (1, 'Bob')],\n             [(1, 'Bob', 'Cara', 'Jake', 2), (2, 'Cara', 1, 1, 1)])", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: x[0])", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(l):\n    d = {}\n    for t in l:\n        if t[0] in d:\n            d[t[0]].append(t)\n        else:\n            d[t[0]] = [t]\n    return [t for t in d.values()]\n\ndef sort_on_occurence2(l):\n    d = {}\n    for t in l:\n        if t[0] in d:\n            d[t[0]] += [t]\n        else:\n            d[t[0]] = [t]\n    return [t for t in d.values()]\n\ndef sort_on_occurence3(l):\n    d = {}\n    for t in l:\n        d[t[0]] = d.get(t[0], []) + [t]\n    return [d[key] for key in sorted(d)]\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom collections import Counter\n\ndef sort_on_occurence(list_of_tuples):\n    \"\"\"\n    Sort list of tuples based on the first element of tuple,\n    which is the number of the element in list.\n    >>> sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])\n    [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    >>> sort_on_occurence([(3, 'Cara'), (1, 'Bob')])\n    [(1, 'Bob', 3), (3, 'Cara', 1)]\n    \"\"\"\n    # Add 1 to all of the element to avoid sort function to treat numbers as strings\n    list_of_tuples = [(num + 1, item) for (num, item) in list_of_tuples]\n    # Get all of the unique elements\n    unique_items = list(set([item for (num, item) in list_of_tuples]))\n    # Get count of each of the unique element\n    count = Counter([item for (num, item) in list_of_tuples])\n    # Store the result in a list\n    result = []\n    # For each unique element, get the index where to place it in the result list\n    for item in unique_items:\n        index = count[item]\n        result.append((item, index + 1))\n    # Create a list of tuples for each element, with its count index,\n    # then its actual value, and its count\n    result = [(item, count_index, item) for (item, count_index) in result]\n    # Sort list of tuples based on count index\n    result.sort(key=lambda x: x[1])\n    # Sort list of tuples based on first element of tuple\n    result.sort(key=lambda x: x[0])\n    # Return result list\n    return result", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(list_of_tuples):\n    \"\"\"Sorts the given list of tuples on the first element of the tuple\"\"\"\n    hash_of_first_element = {}\n    sorted_list = []\n    for tuple_item in list_of_tuples:\n        if tuple_item[0] in hash_of_first_element:\n            hash_of_first_element[tuple_item[0]].append(tuple_item)\n        else:\n            hash_of_first_element[tuple_item[0]] = [tuple_item]\n    for key in hash_of_first_element:\n        sorted_list.extend(sorted(hash_of_first_element[key], key=lambda x: x[1]))\n    return sorted_list", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom collections import Counter\nfrom typing import List, Tuple\n\n\ndef sort_on_occurence(input_list: List[Tuple]) -> List[Tuple]:\n    input_dict = dict()\n    for t in input_list:\n        input_dict[t[0]] = input_dict.get(t[0], 0) + 1\n    return [(t[0], t[1], k, v) for k, v in sorted(input_dict.items()) for t in input_list if t[0] == k]"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    This function takes an integer and returns the next perfect square greater than the given number\n    \"\"\"\n    x = math.sqrt(n)\n    if x.is_integer():\n        return x + 1\n    else:\n        return x * x\n\n\n# Test cases", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    sq = int(n**(0.5))\n    if (sq**2 == n):\n        return sq*2\n    else:\n        return sq*2 + 1\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\nimport math\n\n\ndef next_Perfect_Square(n):\n    if n == 1:\n        return 1\n    if n % 4 == 0:\n        return math.sqrt(n) + 1\n    else:\n        return math.sqrt(n) + 2\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    return (int)(pow(n,1/2)+0.5) ** 2\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(num):\n    root = num\n    if num%2 == 0:\n        root += 1\n    while True:\n        if root**2 > num:\n            return root\n        else:\n            root += 2", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    s = int(n**.5)\n    while s*s < n:\n        s += 1\n    return s*s", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\nfrom math import sqrt\n\n\ndef next_Perfect_Square(number):\n    i = sqrt(number)\n    print(i)\n    return i + 1\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    return int(n**(1/2))**2\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    \"\"\"\n    return (n + 1)**2\n\n\ndef main():\n    assert next_Perfect_Square(35) == 36\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    if n == 0:\n        return 1\n    # return int(math.sqrt(n)) + 1\n    i = 1\n    while i*i <= n:\n        i = i + 1\n    return i * i\n\n# O(sqrt(n))\ndef next_Perfect_Square(n):\n    left = 0\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid*mid == n:\n            return mid\n        if mid*mid > n:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n\ndef next_Perfect_Square(n):\n    i = 1\n    while i*i < n:\n        i = i + 1\n    return i * i\n\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    sum_arr = [0]*(n+1)\n    for i in range(n):\n        sum_arr[i+1] = sum_arr[i] + arr[i]\n\n    max_sum = -10**7\n    for i in range(1, n):\n        for j in range(0, i):\n            if sum_arr[i] - sum_arr[j] > max_sum:\n                max_sum = sum_arr[i] - sum_arr[j]\n\n    return max_sum\n\n# Time Complexity: O(n^3)\n# Space Complexity: O(n)\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nimport sys\nfrom typing import List\n\nMAX_INT = sys.maxsize\n\n\ndef max_sum_b_tonic(arr: List[int], size: int) -> int:\n    dp = [[0] * size for _ in range(size)]\n    for i in range(size - 1, -1, -1):\n        for j in range(size):\n            dp[i][j] = arr[j] + dp[i + 1][j] if j + 1 < size else arr[j]\n\n    max_sum = dp[0][0]\n    for i in range(size):\n        for j in range(size):\n            if i != j:\n                max_sum = max(max_sum, dp[i][j] + dp[i][j + 1])\n\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(array, length):\n    # Initialize a list to store the prefix sum\n    prefix_sum = [0 for i in range(length)]\n    \n    # Add the first value of array in the prefix sum list\n    prefix_sum[0] = array[0]\n    \n    # Iterate over the array to find the prefix sum of each value\n    for i in range(1, length):\n        prefix_sum[i] = prefix_sum[i - 1] + array[i]\n    \n    # Initialize a list to store the suffix sum\n    suffix_sum = [0 for i in range(length)]\n    \n    # Add the last value of array in the suffix sum list\n    suffix_sum[length - 1] = array[length - 1]\n    \n    # Iterate over the array to find the suffix sum of each value\n    for i in range(length - 2, -1, -1):\n        suffix_sum[i] = suffix_sum[i + 1] + array[i]\n    \n    # Initialize a list to store the max_sum\n    max_sum = [0 for i in range(length)]\n    \n    # Iterate over the array to find the maximum sum of the subsequence\n    for i in range(length):\n        if i == 0:\n            max_sum[i] = max(prefix_sum[0], suffix_sum[0])\n        elif i == length - 1:\n            max_sum[i] = max(prefix_sum[i], suffix_sum[i])\n        else:\n            max_sum[i] = max(prefix_sum[i], suffix_sum[i], prefix_sum[i - 1] + suffix_sum[i + 1])\n    \n    return max(max_sum)\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, n):\n    def get_max_sum(arr, n, i):\n        if i == n:\n            return 0\n        if i == n-1:\n            return arr[n-1]\n        first = get_max_sum(arr, n, i+1)\n        second = arr[i] + get_max_sum(arr, n, i+2)\n        return max(first, second)\n    return get_max_sum(arr, n, 0)\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, k):\n    # Write your code here.\n    return 0", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, n):\n    # base case\n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return arr[0]\n    \n    # dp[i] := max sum till index i\n    dp = [0 for i in range(n)]\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[n-1]\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(a, n):\n    dp = [[0] * n for i in range(n)]\n    for i in range(1, n):\n        dp[i][i] = a[i]\n    for l in range(2, n):\n        for i in range(0, n - l):\n            j = i + l\n            dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + a[j]\n    return dp[0][n - 1]\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    if n == 1:\n        return arr[0]\n\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == 1 or j == 1:\n                dp[i][j] = arr[i - 1]\n            elif arr[i - 1] < arr[j - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i][j - 1] + arr[i - 1]\n\n    return dp[n][n]\n\n\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nn = len(arr)\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    dp = [[0 for x in range(n)] for x in range(n)]\n    max_so_far = dp[0][0]\n    for i in range(n):\n        dp[i][i] = arr[i]\n        if i > 0:\n            dp[i][i-1] = max(dp[i][i-1], arr[i])\n        max_so_far = max(max_so_far, dp[i][i])\n    for x in range(1, n):\n        for y in range(0, n-x):\n            dp[y][y+x] = arr[y+x]\n            dp[y][y+x] = max(dp[y][y+x], dp[y][y+x-1] + arr[y+x])\n            max_so_far = max(max_so_far, dp[y][y+x])\n    return max_so_far\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n\n    dp = [0 for i in range(len(arr))]\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        if arr[i] > k:\n            dp[i] = dp[i-2] + arr[i]\n        else:\n            dp[i] = dp[i-1]\n\n    return max(dp[-1], dp[-2])\n\n\ndef max_subarray_sum(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n\n    dp = [0 for i in range(len(arr))]\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        if arr[i] <= k:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-2]\n\n    return max(dp[-1], dp[-2])\n\n"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\nimport math\n\ndef babylonian_squareroot(number):\n    guess = number\n    i = 0\n    epsilon = 0.00001\n    while math.fabs(guess*guess - number) > epsilon:\n        guess = (guess + number/guess) / 2.0\n        i += 1\n        if i > 10000:\n            print(\"infinite loop reached\")\n    return guess\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(number):\n    low = 0\n    high = number\n    while high-low>1:\n        mid = (high+low)/2\n        if mid*mid>number:\n            high = mid\n        else:\n            low = mid\n    return mid\n\n# assert(babylonian_squareroot(345)==18)\n# assert(babylonian_squareroot(200)==14.142135623730951)\n# assert(babylonian_squareroot(10)==3.162277660168379)\n\ndef babylonian_squareroot_gen(number):\n    while True:\n        low = 0\n        high = number\n        mid = (high+low)/2\n        if mid*mid>number:\n            high = mid\n        else:\n            low = mid\n        yield mid\n\ndef babylonian_squareroot_gen2(number):\n    low = 0\n    high = number\n    while True:\n        mid = (high+low)/2\n        if mid*mid>number:\n            high = mid\n        else:\n            low = mid\n        yield mid\n\ndef babylonian_squareroot_gen3(number):\n    low = 0\n    high = number\n    mid = (high+low)/2\n    while True:\n        if mid*mid>number:\n            high = mid\n        else:\n            low = mid\n        yield mid\n\ndef babylonian_squareroot_gen4(number):\n    low = 0\n    high = number\n    mid = (high+low)/2\n    while True:\n        if mid*mid>number:\n            high = mid\n        else:\n            low = mid\n        yield mid\n\n# a = babylonian_squareroot_gen(200)\n# assert(next(a)==14.142135623730951)\n# print([a.next() for i in range(5)])\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(num):\n    # your code here\n    num = num / 2\n    return num\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"number must be non-negative\")\n    if number == 0:\n        return 0\n    guess = number / 2\n    while True:\n        diff = number - guess * guess\n        if abs(diff) < 0.0001:\n            return guess\n        guess = guess - diff / guess\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Returns the square root of the float number x using babylonian method\n    :param x:\n    :return:\n    \"\"\"\n    if x == 0:\n        return 0\n    if x < 0:\n        raise ValueError('cannot take sqrt of negative number')\n    i = 0\n    y = x\n    while y != y * y:\n        y = (y + x / y) / 2\n        i += 1\n    return y, i\n\ndef test_babylonian_squareroot():\n    x = 10\n    root, i = babylonian_squareroot(x)\n    assert root == 3.162277660168379\n    assert i == 4\n\ntest_babylonian_squareroot()", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(num):\n  guess=1\n  while True:\n    print(\"try\",guess,\"^2\")\n    if abs(guess**2-num)<0.00001:\n      return guess\n    guess=guess-(guess**2-num)/(2*guess)\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\ndef test_babylonian_squareroot(x, expected):\n    assert babylonian_squareroot(x) == approx(expected)\n\ntest_babylonian_squareroot(10, 3.162277660168379)\n\n# def is_palindrome(string):\n#     # return True or False if the string is a palindrome\n#     # e.g. is_palindrome(\"tacocat\") == True\n#     # e.g. is_palindrome(\"abc\") == False\n#     # e.g. is_palindrome(\"racecar\") == True\n#     # e.g. is_palindrome(\"a\") == True\n#     # e.g. is_palindrome(\"A\") == True\n#     # e.g. is_palindrome(\"Ananas\") == True\n#     # e.g. is_palindrome(\"tootootootootooto\") == False\n#     # e.g. is_palindrome(\"antidisestablishmentarianism\") == True\n#     # e.g. is_palindrome(\"\") == True\n#     # e.g. is_palindrome(\"    \") == True\n#     # e.g. is_palindrome(\"     \") == True\n#     # e.g. is_palindrome(\"  \") == True\n#     # e.g. is_palindrome(\"A palindrome is a word, phrase, number, or other sequence of characters which reads the same backwards as forwards.\") == True\n#     # e.g. is_palindrome(\"A palindrome is a word, phrase, number, or other sequence of characters which reads the same backwards as forwards.\") == False\n#     # e.g. is_palindrome(\"a\") == True\n#     # e.g. is_palindrome(\"A\") == True\n#     # e.g. is_palindrome(\"An", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport math\n\n\ndef babylonian_squareroot(n):\n    lo = 0\n    hi = n\n    epsilon = 10**-6\n    while hi - lo > epsilon:\n        mid = (lo + hi) / 2\n        squared = mid*mid\n        if squared == n:\n            return mid\n        elif squared < n:\n            lo = mid\n        else:\n            hi = mid\n    return mid\n\n\ndef test_babylonian_squareroot():\n    assert babylonian_squareroot(10) == 3.162277660168379\n    assert babylonian_squareroot(100) == 10.0\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(num):\n    low = 0\n    high = num\n    num = int(num)\n    while(low <= high):\n        mid = int((low + high)/2)\n        if(mid ** 2 == num):\n            return mid\n        if(mid ** 2 < num):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return mid", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport math\n\ndef babylonian_squareroot(a):\n    x0 = 1\n    y0 = 1\n    x1 = a / 2\n    y1 = 1 / 2\n    while abs(x1 - x0) > 0.000001:\n        x0 = x1\n        y0 = y1\n        x1 = a / x0\n        y1 = (1 / x0) + (1 / 2 * (x0 / y0))\n    return x1\n\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n\tif len(s) < 2:\n\t\treturn len(s)\n\n\tn = len(s)\n\tT = [[0] * n for i in range(n)]\n\tfor i in range(n):\n\t\tT[i][i] = 1\n\n\tfor l in range(2, n + 1):\n\t\tfor i in range(n - l + 1):\n\t\t\tj = i + l - 1\n\t\t\tif s[i] == s[j]:\n\t\t\t\tT[i][j] = 2 + T[i + 1][j - 1]\n\t\t\telse:\n\t\t\t\tT[i][j] = max(T[i + 1][j], T[i][j - 1])\n\n\treturn T[0][n - 1]\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    n = len(s)\n    L = [[0]*n for i in range(n)]\n    for i in range(n-1,-1,-1):\n        for j in range(i,n):\n            if i == j:\n                L[i][j] = 1\n            elif s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i+1][j], L[i][j-1])\n    return L[0][n-1]\n\n# # Accepted Solution\n# def lps(s):\n#     n = len(s)\n#     L = [[0]*n for i in range(n)]\n#     for i in range(n-1,-1,-1):\n#         for j in range(i,n):\n#             if i == j:\n#                 L[i][j] = 1\n#             elif s[i] == s[j]:\n#                 L[i][j] = L[i+1][j-1] + 2\n#             else:\n#                 L[i][j] = max(L[i+1][j], L[i][j-1])\n#     return L[0][n-1]", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\nfrom collections import defaultdict\n\ndef lps(s):\n    #s = \"TENS FOR TENS\"\n    m = len(s)\n    if m == 0:\n        return 0\n    s = \" \" + s + \" \"\n    table = defaultdict(lambda: -1)\n    table[m] = 0\n    for i in range(m-1, -1, -1):\n        if i + 1 < m and s[i] == s[i+1]:\n            table[i] = table[i+2] + 2\n        elif s[i] in table:\n            table[i] = table[s[i]] + 1\n        else:\n            table[i] = 1\n    #print(table)\n    return table[0]", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n\t# recursion\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> TTT\n\t# TTT -> T", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(string):\n    longest_palindromic_subsequence = [1]*len(string)\n    for i in range(len(string)):\n        for j in range(i, -1, -1):\n            if string[i] == string[j]:\n                if i == j:\n                    longest_palindromic_subsequence[i] = 2\n                else:\n                    longest_palindromic_subsequence[i] = longest_palindromic_subsequence[j]+2\n                break\n    return max(longest_palindromic_subsequence)\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    l = len(string)\n    if l == 1:\n        return 1\n    dp = [ [0 for j in range(l)] for i in range(l) ]\n    for i in range(l):\n        dp[i][i] = 1\n    for i in range(l-1, -1, -1):\n        for j in range(i+1, l):\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][l-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(string):\n    lps_list = []\n    for i in range(0, len(string)):\n        lps_list.append([i, i])\n    for i in range(2, len(string)):\n        for j in range(0, len(string)):\n            if string[i] == string[j]:\n                if i == j+1:\n                    lps_list[j][1] += 1\n                else:\n                    lps_list[j][1] = lps_list[j-1][1]+2\n            else:\n                lps_list[j][1] = max(lps_list[j][1], lps_list[j-1][1])\n    return max(lps_list[-1][1], max(lps_list))\n        ", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(str):\n    str = str.lower()\n    dp = [[0 for _ in range(len(str))] for __ in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                if i == j-1:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i+1][j-1]+2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    n = len(s)\n    lps = [0]*n\n    i=0\n    j=1\n    while i <n and j<n:\n        if s[i]==s[j]:\n            lps[j] = lps[j-1]+1\n            i+=1\n            j+=1\n        else:\n            if lps[j-1] > lps[j]:\n                j = lps[j-1] +1\n            else:\n                i+=1\n                j = i\n    return lps[n-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(string):\n    \"\"\"Returns the length of the longest palindromic subsequence of a string\"\"\"\n    \n    if not string:\n        return 0\n    \n    # Create a matrix of the same size as string\n    # containing the length of the longest palindromic subsequence\n    # for that character at that index\n    dp = [[0]*len(string) for _ in range(len(string))]\n    \n    # Initialize all diagonals to 0 \n    # diagonals are the characters at the same index in the string\n    for idx in range(len(string)):\n        dp[idx][idx] = 1\n        \n    # Create the max_length_palindrome_subsequence list\n    # to store the length of the longest palindromic subsequence\n    # for each index in the string\n    max_length_palindrome_subsequence = [0]*len(string)\n    \n    # Iterate over the string from left to right\n    # and from bottom to top to build the longest palindromic subsequence\n    for idx in range(len(string)):\n        for jdx in range(idx, -1, -1):\n            if string[jdx] == string[idx]:\n                if idx == jdx:\n                    dp[idx][jdx] = 2\n                elif dp[jdx+1][idx-1] > 0:\n                    dp[idx][jdx] = dp[jdx+1][idx-1] + 2\n                else:\n                    dp[idx][jdx] = 1\n                max_length_palindrome_subsequence[idx] = max(max_length_palindrome_subsequence[idx], dp[idx][jdx])\n                \n    return max_length_palindrome_subsequence[0]\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += 1.0/i\n    return total\n\n# Test case 1", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nfrom math import log\n\ndef harmonic_sum(n):\n    return 1 / (n * log(n))\n\ndef test_harmonic_sum():\n    assert harmonic_sum(7) == 2.5928571428571425", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return 1/sum([1.0/i for i in range(1, n+1)])\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nfrom math import log, factorial\n\n\ndef harmonic_sum(n: int):\n    return 1 / sum([1 / (i + 1) for i in range(n)])\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nimport math\n\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n\n#assert harmonic_sum(7) == 2.5928571428571425\n\ndef test_harmonic_sum(n, expected):\n    assert harmonic_sum(n) == expected", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\n# my solution\ndef harmonic_sum(n):\n    result = 0\n    for i in range(1, n+1):\n        result += 1.0 / i\n    return result\n\n# my solution with exponent\ndef harmonic_sum_exp(n):\n    return sum([1.0/i for i in range(1, n+1)])\n\n# @yonghao's solution\ndef harmonic_sum_ye(n):\n    return 1 - 1 / (2 * n) - 1 / (3 * n ** 2) - 1 / (4 * n ** 3) - 1 / (5 * n ** 4)\n\n# @yonghao's solution with exponent\ndef harmonic_sum_exp_ye(n):\n    result = 1\n    for i in range(1, n+1):\n        result -= 1/i\n    return result\n\n# @yonghao's solution without exponent\ndef harmonic_sum_ye_v1(n):\n    return 1 - (1 / 2) - (1 / 3) - (1 / 4) - (1 / 5)\n\n# @yonghao's solution without exponent\ndef harmonic_sum_ye_v2(n):\n    if n == 1:\n        return 0\n    return 1 - (1 / 2) - (1 / 3) - (1 / 4) - (1 / 5) + harmonic_sum_ye_v2(n-1)\n\n# @yonghao's solution without exponent\ndef harmonic_sum_ye_v3(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1 - 1 / (2 * 2) - 1 / (3 * 2) - 1 / (4 * 2) - 1 / (5 * 2)\n    return 1 - (1 / 2) - (1 / 3) - (1 / 4) - (1 / 5) + harmonic_sum", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    \"\"\"Returns the harmonic sum of n-1\"\"\"\n    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\n\n# Test the function", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n: int) -> float:\n    return sum(1 / i for i in range(1, n + 1))\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\n#-----------------------------------------------"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(a, b):\n    res = list(filter(lambda x: x in b, a))\n    return res\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\ndef intersection_array_with_lambda(arr1, arr2):\n    return list(set(arr1) & set(arr2))", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(array1, array2):\n    return list(set(array1) & set(array2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(array1, array2):\n    return list(set(array1) & set(array2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    \"\"\"\n    >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])\n    [1, 2, 8, 9]\n    \"\"\"\n    return list(set(arr1).intersection(set(arr2)))\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1,arr2):\n    return list(set(arr1).intersection(arr2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1,arr2):\n    arr3 = list(set(arr1) & set(arr2))\n    return arr3\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(array1, array2):\n    intersection = []\n    for i in array1:\n        if i in array2:\n            intersection.append(i)\n    return intersection\n\ndef test_intersection_array():\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(t, x):\n    return t.count(x)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(arr, x):\n    x_count = 0\n    for i in arr:\n        if i == x:\n            x_count += 1\n    return x_count\n\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, X):\n    count = 0\n    for i in tup:\n        if i == X:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(t, x):\n    c = 0\n    for i in range(len(t)):\n        if t[i] == x:\n            c += 1\n    return c", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tup, X):\n    count = 0\n    for elem in tup:\n        if elem == X:\n            count += 1\n    return count\n\ndef test_count_X():\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\ntest_count_X()", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, el):\n\treturn tup.count(el)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(t, x):\n    x_count = 0\n    for element in t:\n        if element == x:\n            x_count += 1\n    return x_count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup,x):\n    return tup.count(x)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(t,x):\n    if t==():\n        return 0\n    else:\n        if t[0] == x:\n            return 1 + count_X(t[1:], x)\n        else:\n            return count_X(t[1:], x)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup,x):\n    i=0\n    for item in tup:\n        if item == x:\n            i = i+1\n    return i\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, new_element):\n    lst_copy = lst.copy()\n    for i in range(len(lst_copy)):\n        lst_copy.insert(i, new_element)\n    return lst_copy", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(my_list, element):\n    my_list_new = []\n    for i in my_list:\n        my_list_new.append(element)\n        my_list_new.append(i)\n    return my_list_new\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(arr, element):\n    return [element]+arr\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(arr, elem):\n    res = []\n    for i in arr:\n        res.append(elem)\n        res.append(i)\n    return res\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(l,element):\n    return [element] + l[:-1] + [l[-1]]", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(elements, to_insert):\n    # your code here\n    elements.insert(0, to_insert)\n    return elements\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(L,element):\n    if len(L) > 0:\n        L[0] = element\n        for i in range(1,len(L)):\n            L[i] = L[i-1]\n        return L\n    else:\n        return []\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, value):\n    lst = lst.copy()\n    for i in range(len(lst)):\n        lst.insert(i, value)\n    return lst\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list_elements, element):\n    return list_elements[:1] + [element] + list_elements[1:]\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, element):\n    \"\"\"\n    insert_element(lst, element) -> lst\n    Inserts the element into each position of lst.\n    \n    >>> insert_element(['Red', 'Green', 'Black'], 'c')\n    ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    \"\"\"\n    new_lst = [element]\n    new_lst.extend(lst)\n    return new_lst\n\n\ndef main():\n    print(insert_element(['Red', 'Green', 'Black'], 'c'))\n\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nfrom math import sqrt\n\ndef convert(number):\n    r = sqrt(number.real ** 2 + number.imag ** 2)\n    if number.imag > 0:\n        theta = number.imag / r\n    elif number.imag < 0:\n        theta = - number.imag / r\n    else:\n        theta = 0.0\n    return (r, theta)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(num):\n    return ((num.real**2 + num.imag**2)**0.5, (num.real/num.imag))\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport math\n\ndef convert(z):\n    return (math.sqrt(z.real ** 2 + z.imag ** 2), math.atan2(z.imag, z.real))\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nfrom math import cos, sin, pi\n\ndef convert(c):\n    \"\"\"\n    Returns the polar coordinates of the complex number c\n\n    Parameters\n    ----------\n    c : complex number\n\n    Returns\n    -------\n    polar coordinates\n\n    Raises\n    ------\n    TypeError: if the argument is not a complex number\n\n    Notes\n    -----\n    The polar coordinates are of the form (r, \u03b8) where r is the absolute\n    value of the complex number and \u03b8 is the argument (measured in radians)\n\n    Examples\n    --------\n    >>> assert convert(1) == (1.0, 0.0)\n    \"\"\"\n    if not isinstance(c, complex):\n        raise TypeError('Argument must be a complex number')\n    if c == 0:\n        return (0.0, 0.0)\n    r = abs(c)\n    \u03b8 = c.imag * 1j / c.real\n    return (r, \u03b8)", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nfrom math import sqrt\nfrom typing import Tuple\n\n\ndef convert(z: complex) -> Tuple[float, float]:\n    \"\"\"\n    :param z: a complex number.\n    :return: a tuple (r, theta) where r is the absolute value of z and theta is the angle in radians.\n    \"\"\"\n    return sqrt(z.real ** 2 + z.imag ** 2), abs(z.imag)\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nimport math\n\ndef convert(z):\n    return z.real, z.imag, math.sqrt(z.real**2 + z.imag**2)\n\n\n# def convert(z):\n#     r = z.real\n#     i = z.imag\n#     if i == 0:\n#         return r, 0, math.sqrt(r**2)\n#     else:\n#         return r, math.atan(r/i), math.sqrt(r**2 + i**2)\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nimport math\n\ndef convert(x):\n    r = math.sqrt(x.real**2 + x.imag**2)\n    theta = math.atan2(x.imag, x.real)\n    return r, theta\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport math\nfrom cmath import rect\n\n\ndef convert(z):\n    r = math.sqrt(z.real ** 2 + z.imag ** 2)\n    t = math.atan2(z.imag, z.real)\n\n    return r, t\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nfrom complex_utils import convert\n\n\ndef test_convert():\n    assert convert(0) == (0.0, 0.0)\n    assert convert(1) == (1.0, 0.0)\n    assert convert(1+0j) == (1.0, 0.0)\n    assert convert(1j) == (0.0, 1.0)\n    assert convert(1+1j) == (1.0, 1.0)\n    assert convert(-1-1j) == (1.0, -1.0)\n    assert convert(-1j) == (0.0, -1.0)\n    assert convert(-1+1j) == (1.0, -1.0)", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport cmath\n\n\ndef convert(number):\n    \"\"\"\n    :param number: complex number\n    :return: tuple in polar coordinates\n    \"\"\"\n    return cmath.polar(number)\n\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(l):\n    \"\"\"\n    Args:\n       l(list): list containing integers and strings\n    Returns:\n       int: count of integers in the list\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n# Run tests", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\nimport pytest\n\ndef count_integer(numbers):\n    return numbers.count(int)\n\n\ndef test_count_integer():\n    assert count_integer([1,2,'abc',1.2]) == 2\n\ndef test_negative_input():\n    with pytest.raises(TypeError):\n        count_integer(\"Hello\")\n\n\ndef test_float_input():\n    assert count_integer([1.0, 2.0, 3.0]) == 2\n\n\ndef test_empty_list():\n    assert count_integer([]) == 0", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(l):\n    count = 0\n    for i in l:\n        if i == int(i):\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(arr):\n    count = 0\n    for i in arr:\n        if type(i) is int:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(nums):\n    count = 0\n    for i in nums:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(numbers):\n    count = 0\n    for number in numbers:\n        if isinstance(number, int):\n            count += 1\n    return count\n\ndef test_function(test_case):\n    numbers = test_case[0]\n    solution = test_case[1]\n    output = count_integer(numbers)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[1,2,'abc',1.2],2])\ntest_function([[1,'abc',1.2],1])\ntest_function([[1,'abc',1.2, 'xyz'],3])", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list):\n    count = 0\n    for i in range(0,len(list)):\n        if isinstance(list[i], int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i,int):\n            count+=1\n    return count\n\n\ndef count_integer_v2(lst):\n    return sum(isinstance(i,int) for i in lst)\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    return len([i for i in lst if type(i) == int])\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count = count + 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(st):\n    return list(filter(lambda x: x[0] in 'ae', st.split()))\n\n#%%", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(text):\n    return [w for w in text.split() if w[0] in ['a', 'e']]\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    s = s.split()\n    return [x for x in s if x[0] == 'a' or x[0] == 'e']\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(input_string):\n    result = []\n    for word in input_string.split():\n        if word[0] == \"a\" or word[0] == \"e\":\n            result.append(word)\n    return result", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n    list_words = []\n    for i in s:\n        if i == \"a\" or i == \"e\":\n            list_words.append(i)\n    return list_words", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\n#Solution\ndef words_ae(s):\n    lst = []\n    if (s.startswith(\"a\") or s.startswith(\"e\")):\n        lst.append(s[:1])\n    if (s.startswith(\"a\") or s.startswith(\"e\")):\n        lst.append(s[:2])\n    return lst\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(str):\n  return [i for i in str.split(' ') if i[0] == \"a\" or i[0] == \"e\"]\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    word_list = string.split(\" \")\n    word_ae = []\n    for word in word_list:\n        if (word[0] == \"a\" or word[0] == \"e\"):\n            word_ae.append(word)\n    return word_ae\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\nimport re\n\ndef words_ae(s):\n    return re.findall(r'a|e', s)\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n  words = []\n  # print(string)\n  # print(string.split())\n  for word in string.split():\n    if (word[0] == 'a' or word[0] == 'e'):\n      words.append(word)\n  return words\n\ndef test_function(test_case):\n  string = test_case[0]\n  solution = test_case[1]\n  output = words_ae(string)\n  if sum(x in output for x in solution) == len(solution):\n    print(\"Pass\")\n  else:\n    print(\"Fail\")\n\ntest_function([\"python programe\",['ame']])\ntest_function([\"aaabbceeee\",['a', 'e', 'e', 'e']])"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, N):\n    from itertools import combinations\n    return list(combinations(colors, N))\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    if n==1:\n        return [color for color in colors]\n    if n==2:\n        return [tuple(sorted((color1,color2))) for color1 in colors for color2 in colors]\n    return [tuple(sorted((color1,color2,color3))) for color1 in colors for color2 in colors for color3 in colors]\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,n):\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n+1):\n            ans.append((colors[i],colors[j]))\n    return ans\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,num):\n    # This will have to use recursion and backtracking.\n    # It will keep track of the colours it has picked and will use a list to store that.\n    # It will keep track of the total number of colours it has picked.\n    # It will keep track of the colours it needs to pick.\n    \n    # If the number of colours picked is equal to the number of colours needed, append that to the list and return.\n    # If the number of colours picked is greater than the number of colours needed, we have used all the colours and return.\n    # If the number of colours picked is less than the number of colours needed, we have not used all the colours and we need to recursively pick the rest of the colours.\n\n    # print(colors,num)\n    # if num==3:\n    #     return [colors]\n    # if num==1:\n    #     for color in colors:\n    #         return [(color,)]\n    # if num>3:\n    #     return []\n    # return combinations_colors(colors,num+1)\n    # if num<3:\n    #     return []\n\n    # This works but takes too long to run.\n    return combinations_colors(colors,num+1) + [tuple([colors[i] for i in range(num)])]\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(lst, k):\n    if k > 3:\n        return False\n    else:\n        res = []\n        lst = list(lst)\n        if not lst:\n            return False\n        else:\n            return reduce(lambda x, y: x+y, combinations(lst, k))", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors,length):\n    if length==0:\n        return []\n    result=[]\n    for i in range(len(colors)):\n        sub_result=combinations_colors(colors[:i]+colors[i+1:],length-1)\n        for sub in sub_result:\n            result.append((colors[i],)+sub)\n    return result\n\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colours, n):\n    if not colours or n < 1:\n        return []\n    if n == 1:\n        return [colours]\n    comb = combinations_colors(colours[1:], n - 1)\n    return [(c[0], x) for c in comb for x in colours] + comb\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\n#define an empty function\ndef combinations_colors(arr,n):\n    #your code here\n    return list(itertools.combinations(arr,n))\n\n#do some test", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, N):\n    \"\"\"\n    :param colors: list\n    :param N: integer\n    :return: list of tuples\n    \"\"\"\n    return itertools.combinations(colors, N)\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colrs,n):\n    if n==1:\n        return colrs\n    else:\n        return [tuple([j]+i) for i in combinations_colors(colrs,n-1) for j in colrs]\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    primes = [True] * n\n    primes[0] = False\n    primes[1] = False\n\n    for i in range(2,int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i,n,i):\n                primes[j] = False\n    return sum(primes)\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(N):\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 0\n    else:\n        return count_Primes_nums(N - 1) + 1\n\n\n# assert count_Primes_nums(5) == 2\n# assert count_Primes_nums(10) == 4\n# assert count_Primes_nums(300) == 168\n# assert count_Primes_nums(100000000) == 489009\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    count=0\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j==0:\n                break\n        else:\n            count=count+1\n            print(i)\n    return count\ncount_Primes_nums(1000)", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    count = 0\n    # for i in range(2, n):\n    for i in range(2, int(n**0.5)):\n        for j in range(i, n, i):\n            # if n % i == 0:\n            if n % j == 0:\n                # count = count + 1\n                pass\n            else:\n                continue\n    count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(number):\n    if number <= 0:\n        print(\"Input must be greater than 0\")\n    else:\n        primes = 0\n        for i in range(2,number):\n            flag = 1\n            for j in range(2,i):\n                if i%j == 0:\n                    flag = 0\n            if flag == 1:\n                primes += 1\n        print(primes)\n\ncount_Primes_nums(5)", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\nfrom math import sqrt\n\n\ndef is_Prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(num):\n    cnt = 0\n    for i in range(2, num):\n        if is_Prime(i):\n            cnt += 1\n    return cnt\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\nimport math\n\ndef count_Primes_nums(n):\n    primes_nums = 0\n    for num in range(2, n+1):\n        if is_Prime(num):\n            primes_nums += 1\n    return primes_nums\n\n\ndef is_Prime(num):\n    if num < 2:\n        return False\n    for divisor in range(2, math.ceil(math.sqrt(num)) + 1):\n        if num % divisor == 0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(N):\n    N = int(N)\n    primes = [True]*(N+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(N**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, N+1, i):\n                primes[j] = False\n    return primes.count(True)\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x,y):\n    # your code here\n    # swap numbers\n    return y,x\n    #return x,y\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    \"\"\"\n    >>> swap_numbers(10,20)\n    (20, 10)\n    >>> swap_numbers(30,50)\n    (50, 30)\n    \"\"\"\n    a, b = b, a\n    return a, b\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    c=a\n    a=b\n    b=c\n    return a,b\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    x,y=y,x\n    return (x,y)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x, y):\n    return (y,x)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a,b):\n    return b,a\n\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    a,b = b,a\n    return a,b\n\ndef test_swap_numbers():\n    \"\"\"\n    Should work for all positive integers and floating points.\n    \"\"\"\n    assert swap_numbers(1,2) == (2,1)\n    assert swap_numbers(2.0,1) == (1,2.0)\n    assert swap_numbers(1.0,2.0) == (2.0,1.0)\n    assert swap_numbers(3,2) == (2,3)\n\n\n# Test\ndef test_swap_numbers_raises():\n    \"\"\"\n    If a and b are the same, the function should raise ValueError\n    \"\"\"\n    assert swap_numbers(1,1) == (1,1)\n    assert swap_numbers(1,1.0) == (1,1.0)\n    assert swap_numbers(1.0,1) == (1,1.0)\n    assert swap_numbers(1.0,1.0) == (1,1.0)", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1, num2):\n  temp = num1\n  num1 = num2\n  num2 = temp\n  return num1, num2\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return b,a\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x,y):\n    return y,x\n\n#assert swap_numbers(10,20)==(20,10)\n\ndef swap_numbers(x,y):\n    x,y = y,x\n    return x,y\n\ndef swap_numbers(x,y):\n    temp = x\n    x = y\n    y = temp\n    return x,y\n\ndef swap_numbers(x,y):\n    return x,y,y,x\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(nums):\n    \"\"\"\n    This function counts number of odd elements in the list using lambda function\n    :param nums: list\n    :return: count of odd elements\n    \"\"\"\n    return len(list(filter(lambda x: x % 2 != 0, nums)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len(list(filter(lambda x: x%2==1, lst)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(n):\n    count = 0\n    for i in n:\n        if i % 2:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return len([i for i in lst if i % 2 == 1])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len([x for x in lst if x%2!=0])\n\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len([x for x in lst if x%2!=0])", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ncount_odd = lambda x: len([i for i in x if i % 2 != 0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(nums):\n    return len(list(filter(lambda x: x%2 != 0, nums)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\nfrom nose.tools import assert_equal\n\n\ndef count_odd(nums):\n    return len(filter(lambda x: x % 2, nums))\n\n\ndef test():\n    print('Example:')\n    print(count_odd([1, 2, 3, 5, 7, 8, 10]))\n\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert_equal(count_odd([1, 2, 3, 5, 7, 8, 10]), 4)\n    assert_equal(count_odd([0, 2, 3, 5, 7, 8, 10]), 4)\n    assert_equal(count_odd([1, 3, 5, 7, 9]), 0)\n    print('Wow! You are doing great. Time to check it!')\n\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\n# lambda function can be used as well.\n# Using map function\ndef count_odd(lst):\n    return len(list(filter(lambda x: x % 2, lst)))\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuple1, tuple2):\n    return max(tuple1, tuple2, key=lambda x: x[1])\n\n# Tests", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(first_tuple, second_tuple):\n  # your code here\n  if len(first_tuple) == len(second_tuple):\n    return max_pair(first_tuple, second_tuple)\n  elif len(first_tuple) > len(second_tuple):\n    return max_pair(first_tuple, second_tuple[0:len(first_tuple)])\n  else:\n    return max_pair(first_tuple[0:len(second_tuple)], second_tuple)\n\ndef max_pair(first, second):\n  max_i = 0\n  max_j = 0\n  max_value = first[0][0] * second[0][1]\n  for i in range(len(first)):\n    for j in range(len(second)):\n      if first[i][0] * second[j][1] > max_value:\n        max_value = first[i][0] * second[j][1]\n        max_i = i\n        max_j = j\n  return first[max_i], second[max_j]\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(a, b):\n\tpass\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n# The idea is to select the largest element in the first tuple, the largest element in the second tuple, and so on until all of the elements have been selected.\n# This way, we ensure that the largest elements are selected first, and the least likely to be selected are selected last.\ndef maximize_elements(first_tuple, second_tuple):\n    # We can combine the two tuples into a single tuple in which we add a None value to indicate which tuple each value came from.\n    combined_tuple = (None,) + first_tuple + (None,) + second_tuple + (None,)\n\n    # Then we can sort the combined tuple.\n    sorted_tuple = sorted(combined_tuple, reverse=True)\n\n    # We can ignore the None values by selecting every other value.\n    return tuple(sorted_tuple[1::2])\n\n\n# We can test this function with the following code.\n# Test.assert_equals(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))), ((6, 7), (4, 9), (2, 9), (7, 10)))\n# Test.assert_equals(maximize_elements(((3, 1), (2, 5), (6, 8), (7, 1)), ((6, 10), (8, 9), (4, 3), (1, 2))), ((6, 10), (8, 9), (4, 3), (7, 5)))", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(elements1, elements2):\n    result = []\n    for i, tuple1 in enumerate(elements1):\n        for tuple2 in elements2:\n            if tuple2[1] > tuple1[1]:\n                result.append(tuple2)\n            elif tuple2[1] == tuple1[1]:\n                result.append((tuple1[0], max(tuple1[1], tuple2[1])))\n\n    return result\n\n\ndef test_maximize_elements():\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n# Solution\ndef maximize_elements(one, two):\n    # Declare an empty list called 'max_one'\n    max_one = []\n    # Declare an empty list called 'max_two'\n    max_two = []\n    # Iterate over the tuples in 'one'\n    for item in one:\n        # Append the maximum value in 'two' to 'max_two'\n        max_two.append(max(two))\n        # Append the minimum value in 'one' to 'max_one'\n        max_one.append(min(one))\n    # Return 'max_one' and 'max_two'\n    return (max_one, max_two)\n\n# Tests", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tup1, tup2):\n    max_tup = []\n    max_num = 0\n    for i in range(len(tup1)):\n        max_num = max(tup1[i][1], tup2[i][1])\n        max_tup.append((tup1[i][0], max_num))\n    return max_tup\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(a, b):\n\tres = []\n\tfor i in range(len(a)):\n\t\tif a[i][0] > b[i][0]:\n\t\t\tres.append(a[i])\n\t\telse:\n\t\t\tres.append(b[i])\n\treturn tuple(res)\n\n# Problem 4", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tup1, tup2):\n    if len(tup1) == 0:\n        return tup2\n    if len(tup2) == 0:\n        return tup1\n    if tup1[0][0] > tup2[0][0]:\n        return tup1\n    elif tup1[0][0] < tup2[0][0]:\n        return tup2\n    else:\n        return maximize_elements(tup1[1:], tup2)\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple_1, tuple_2):\n    \"\"\"\n    :param tuple_1: tuple of tuples\n    :param tuple_2: tuple of tuples\n    :return: tuple of tuples\n    \"\"\"\n    if len(tuple_1) == 0:\n        return tuple_2\n    if len(tuple_2) == 0:\n        return tuple_1\n    max_tuple_1_index = 0\n    max_tuple_2_index = 0\n    max_1_1 = tuple_1[0][0]\n    max_2_1 = tuple_2[0][0]\n    for i in range(1, len(tuple_1)):\n        if tuple_1[i][0] > max_1_1:\n            max_1_1 = tuple_1[i][0]\n            max_tuple_1_index = i\n        if tuple_1[i][1] > max_1_1:\n            max_1_1 = tuple_1[i][1]\n    for i in range(1, len(tuple_2)):\n        if tuple_2[i][0] > max_2_1:\n            max_2_1 = tuple_2[i][0]\n            max_tuple_2_index = i\n        if tuple_2[i][1] > max_2_1:\n            max_2_1 = tuple_2[i][1]\n    return (max_tuple_1_index, max_tuple_2_index)\n\n\n# print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    current = 3\n    primes = [2, 3]\n\n    while len(primes) < n:\n        if is_prime(current):\n            primes.append(current)\n        current += 2\n\n    return primes[-1]\n\n# test cases", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n# The Newman-Shanks-Williams algorithm\n# The basic idea is to reduce the problem to a form that can be solved using\n# a binary search. We want to test whether n is prime, which is equivalent\n# to testing whether n is coprime to all primes less than or equal to sqrt(n).\ndef newman_prime(n):\n    # Check whether n is prime\n    if not is_prime(n):\n        return None\n    \n    # If n < 12, we can test each odd number < sqrt(n) and see if any of them\n    # divide n.\n    if n < 12:\n        for x in range(3, int(n**0.5) + 1, 2):\n            if n % x == 0:\n                return None\n    \n    # Otherwise, we use the binary search to test for n being prime.\n    return newman_prime_binary(n)\n\n\n# The binary search function.\n# In this version, the first value in the test set is guaranteed to be prime.\n# Otherwise, we could accidentally exit the search early.\ndef newman_prime_binary(n):\n    # Check whether n is prime\n    if not is_prime(n):\n        return None\n    \n    # Choose a number between 3 and sqrt(n)\n    b = int((n**0.5) + 1)\n    \n    # We are going to test between 3 and sqrt(n) for divisors.\n    # We also need to make sure we haven't already found a divisor.\n    # We do this by starting at b//2 and testing whether the difference\n    # between b and b//2 is prime.\n    # By testing the middle number, we can make sure we are not missing any\n    # divisors.\n    while b - 1 > 2 and not is_prime(b - 1 - (b - 1) // 2):\n        b -= 1\n    \n    # Check each odd number between 3 and b\n    for a in range(3, b, 2):\n        # If we find a number that is not coprime to n, we are done\n        if gcd(a, n) != 1:\n           ", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    return prime_newman_shanks_williams(n)\n\ndef prime_newman_shanks_williams(n):\n    a, b = 1, 2\n    d, m, t, r, s, q, p = 4, 4, 2, 1, 3, 1, 24\n    while True:\n        if t == n:\n            return a\n        u = d * d - 4 * b\n        if u < 0:\n            d, m, t, r, s, q, p = (d + m) // 2, (m * m) // 4, 2 * t, 2 * r, 2 * s, 2 * q, 2 * p\n        else:\n            v = u ** (1 / 2)\n            x = v if v % 2 else v + 1\n            y = sqrt(x)\n            y = y if y % 2 else y + 1\n            a, b, d, m, t, r, s, q, p = (a + b * y) // 2, (b + x - y * y) // 2, x, y, u // x, v // y, x * v, x * y, y * y\n            if t > n:\n                p = p if p % 2 else p + 1\n            if r > n:\n                s = s if s % 2 else s + 1\n            if q > n:\n                p = p if p % 2 else p + 1\n            if p > n:\n                q = q if q % 2 else q + 1\n\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nfrom itertools import takewhile\n\ndef newman_prime(n:int)->int:\n    \"\"\"Returns nth prime number using Newman\u2013Shanks\u2013Williams algorithm\"\"\"\n    def sieve_of_eratosthenes(n:int)->list:\n        \"\"\"Returns sieve of eratosthenes\"\"\"\n        a = [True]*n\n        a[0],a[1] = False,False\n        for i in range(2,int(n**0.5)+1):\n            if a[i]:\n                a[i*i::i] = [False]*((n-i*i-1)//i+1)\n        return [i for i in range(len(a)) if a[i]]\n\n    def is_prime(n:int)->bool:\n        \"\"\"Returns True if n is prime and False otherwise\"\"\"\n        if n<4:\n            return True\n        if n%2 == 0:\n            return False\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n        return True\n\n    sieve = sieve_of_eratosthenes(10**7)\n    while len(sieve) < n:\n        p,q = next(itertools.takewhile(lambda x: not is_prime(x[0]*x[1]), itertools.product(sieve,sieve)))\n        sieve += [p*q]\n    return sieve[n-1]\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman-shanks-williams prime.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return newman_prime_helper(n)\n\ndef newman_prime_helper(n):\n    \"\"\"\n    Helper function for newman_prime.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        i = 3\n        while True:\n            if is_prime(i):\n                i += 2\n            else:\n                j = 3\n                while True:\n                    if is_prime(i + j + 4):\n                        i += 2\n                        j = 3\n                    else:\n                        i += 4\n                        j += 2\n                        if j == 3:\n                            break\n                    if j == 3:\n                        break\n                if i >= 10000:\n                    return i\n                else:\n                    return newman_prime_helper(n - 1)\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    newman_prime_list = [2, 3, 5, 7]\n    while len(newman_prime_list) < n:\n        newman_prime_list = [newman_prime_list[-1] + newman_prime_list[-2] + 2, newman_prime_list[-1] + newman_prime_list[-2] + 4] + newman_prime_list\n    return newman_prime_list[-1]\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(nth):\n    \"\"\"\n    Args:\n        nth (int): nth newman-shanks-williams prime number.\n    Returns:\n        nth prime number.\n    \"\"\"\n    assert nth >= 1, 'nth must be an integer greater than or equal to 1'\n    # initialize variables\n    s = 0\n    t = 2\n    i = 1\n    j = 0\n    r = 0\n    # prime number checking logic\n    while True:\n        r = s + t\n        s = t\n        t = r\n        # check if prime\n        if is_prime(r):\n            i += 1\n            if i == nth:\n                return r\n\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    Args:\n        num (int): the number to check if prime.\n    Returns:\n        True if prime, False if not.\n    \"\"\"\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nimport math\n\ndef is_prime(x):\n    \"\"\" Test if x is a prime number. \"\"\"\n    if x < 2 or not isinstance(x, int):\n        return False\n    if x == 2:\n        return True\n    for y in range(2, int(math.sqrt(x)) + 1):\n        if x % y == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\" Return the nth newman\u2013shanks\u2013williams prime number. \"\"\"\n    # Check if n is prime\n    if is_prime(n):\n        return n\n    # Check if n is a newman\u2013shanks\u2013williams prime\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and n // i != i:\n            return i\n    # Check if n is prime\n    return is_prime(n)", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    p = 2\n    q = 3\n    k = 2\n    while (k < n):\n        if (MillerRabin(p)):\n            if (p % q == 0):\n                p = p + 2\n            else:\n                k = k + 1\n        else:\n            p = p + 2\n        q = next_prime(q)\n    return p\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n\tassert n >= 0\n\ta, b, m, r = 2, 1, 3, 1\n\twhile r < n:\n\t\ta, b, m = b, a + b + m, m + 1\n\t\tr = gcd(a, m)\n\treturn a\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\nimport operator\n\ndef division_elements(elements_1, elements_2):\n    return tuple(map(operator.truediv, elements_1, elements_2))\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\nfrom typing import Iterable, Tuple, Union\n\n\ndef division_elements(nums1: Iterable, nums2: Iterable) -> Tuple:\n    if len(nums1) != len(nums2):\n        raise ValueError(f\"The tuples should have the same length: {len(nums1)} and {len(nums2)}\")\n    return tuple(n1 / n2 for n1, n2 in zip(nums1, nums2))\n\n\ndef test_division_elements():\n    assert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert division_elements((10, 4, 6, 9), (5, 3, 3, 3)) == (2, 1, 2, 3)", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(numerator, denominator):\n    return [num / den for num, den in zip(numerator, denominator)]\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    l=[]\n    for i in range(len(tuple1)):\n        l.append(tuple1[i]/tuple2[i])\n    return tuple(l)\n\n#assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    print(tuple1)\n    print(tuple2)\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] / tuple2[i])\n    return tuple(result)", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple_1, tuple_2):\n    return tuple(i/j for i, j in zip(tuple_1, tuple_2))\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple_1, tuple_2):\n    \"\"\"\n    >>> division_elements((10, 4, 6, 9),(5, 2, 3, 3))\n    (2, 2, 2, 3)\n    >>> division_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5))\n    (1, 1, 1, 1, 1)\n    \"\"\"\n    return tuple([elem_1 / elem_2 for elem_1, elem_2 in zip(tuple_1, tuple_2)])\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n# def division_elements(list1, list2):\n#     return tuple((x / y) for x, y in zip(list1, list2))\n\n\n# def division_elements(list1, list2):\n#     return tuple(x / y for x, y in zip(list1, list2))\n\n\ndef division_elements(list1, list2):\n    return tuple(x / y for x, y in zip(list1, list2))\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\nfrom typing import Tuple\n\n\ndef division_elements(numbers_1: Tuple, numbers_2: Tuple) -> Tuple:\n    assert len(numbers_1) == len(numbers_2)\n\n    result = []\n    for i in range(len(numbers_1)):\n        result.append(numbers_1[i] / numbers_2[i])\n    return result\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\nfrom functools import reduce\n\n\ndef division_elements(numbers, divisor):\n    \"\"\"\n        :param numbers: given numbers\n        :param divisor: given divisor\n        :return: result of numbers divided by divisor\n    \"\"\"\n    return reduce(lambda x, y: x * y / divisor, numbers)\n\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(input_list, length):\n    start = 0\n    end = length\n    output_list = []\n    output_list.append(input_list[start:end])\n    start = length\n    output_list.append(input_list[start:])\n    return output_list\n\n# test your function here", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(list_to_split,length_of_first_part):\n    \"\"\"\n    input:\n    list_to_split: list of integers\n    length_of_first_part: integer\n    \n    output:\n    list: First part of the list\n    list: Second part of the list\n    \"\"\"\n    \n    return list_to_split[:length_of_first_part],list_to_split[length_of_first_part:]\n\ndef test_split_two_parts():\n    \"\"\"\n    Test cases for split_two_parts()\n    \"\"\"\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts([1,1,2,3,4,4,5,1],2)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts([1,1,2,3,4,4,5,1],1)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts([1,1,2,3,4,4,5,1],5)==([1, 1, 2, 3, 4], [4, 5, 1])\n    assert split_two_parts([1,1,2,3,4,4,5,1],8)==([1, 1, 2, 3, 4, 4, 5], [1])\n    assert split_two_parts([1,1,2,3,4,4,5,1],9)==([1, 1, 2, 3, 4, 4, 5, 1], [])\n    assert split_two_parts([1,", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, n):\n    return lst[:n], lst[n:]\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, length):\n    return lst[:length], lst[length:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(arr, length):\n    if len(arr) <= length:\n        return [arr, []]\n    else:\n        return [arr[:length], arr[length:]]\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(numbers, p):\n    part1 = numbers[:p]\n    part2 = numbers[p:]\n    return part1, part2\n\n# assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\ndef split_two_parts2(numbers, p):\n    return numbers[:p], numbers[p:]\n\n# assert split_two_parts2([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(l, split_size):\n  first_part = []\n  second_part = []\n\n  for i in range(split_size):\n    first_part.append(l.pop(0))\n\n  while l:\n    second_part.append(l.pop(0))\n\n  return first_part, second_part\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(l, n):\n    return l[:n], l[n:]\n\ndef split_two_parts_iterative(l, n):\n    return iter(l[:n]), iter(l[n:])\n\ndef split_two_parts_recursive(l, n):\n    if n == 0:\n        return ([], l)\n    elif n > len(l):\n        return split_two_parts_recursive(l, n-len(l))\n    else:\n        return split_two_parts_recursive(l[1:], n-1), [l[0]] + l[n:]\n\ndef split_two_parts_generator(l, n):\n    for x in l[:n]:\n        yield x\n    for x in l[n:]:\n        yield x\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(A, x):\n    list1 = A[:x]\n    list2 = A[x:]\n    return list1, list2\n\n#This is a very simple solution to a simple problem.\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(a,length):\n    a = list(a)\n    a1 = a[:length]\n    a2 = a[length:]\n    return a1,a2"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\n# def merge_dict(d1, d2):\n#     for key in d2.keys():\n#         if key not in d1.keys():\n#             d1[key] = d2[key]\n#         else:\n#             d1[key] += d2[key]\n#     return d1\n\n# def merge_dict(d1, d2):\n#     d = d1.copy()\n#     d.update(d2)\n#     return d\n\ndef merge_dict(d1, d2):\n    for key in d2.keys():\n        if key not in d1.keys():\n            d1[key] = d2[key]\n        else:\n            d1[key] += d2[key]\n    return d1\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(x, y):\n    z = x.copy()\n    z.update(y)\n    return z\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict_1, dict_2):\n\t# Your code here\n\treturn dict(dict_1, **dict_2)\n\n# assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n# assert merge_dict({},{})=={}\n# assert merge_dict({'a': 100},{'x': 300, 'y': 200})=={'a': 100, 'x': 300, 'y': 200}\n# assert merge_dict({'a': 100, 'b': 200},{'x': 300})=={'x': 300, 'a': 100, 'b': 200}\n# assert merge_dict({'a': 100, 'b': 200},{'a': 100})=={'a': 100, 'b': 200}\n# assert merge_dict({'a': 100, 'b': 200, 'c': 300},{'a': 100, 'c': 300})=={'a': 100, 'b': 200, 'c': 300}\n# assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200, 'a': 100, 'b': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(a, b):\n    for key, value in b.items():\n        if key in a:\n            a[key] = a[key] + value\n        else:\n            a[key] = value\n    return a\n\na = {'a': 100, 'b': 200}\nb = {'x': 300, 'y': 200}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    for key, value in dict2.items():\n        dict1[key] = value\n    return dict1\n\n# Test", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    for i in dict2.keys():\n        if i in dict1.keys():\n            dict1[i] += dict2[i]\n        else:\n            dict1[i] = dict2[i]\n    return dict1\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    for k in dict1:\n        if k in dict2:\n            dict2[k]+=dict1[k]\n        else:\n            dict2[k]=dict1[k]\n    return dict2\n\n# TODO\ndef merge_dict_in_place(dict1, dict2):\n    return None\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1, d2):\n  for k, v in d2.items():\n    d1[k] = v\n  return d1\n\nd1 = {'a': 100, 'b': 200}\nd2 = {'x': 300, 'y': 200}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\n\ndef main():\n    assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\nmain()"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(human_age):\n\treturn human_age*7\n\ndog_age(12)", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age_in_months):\n    return age_in_months / 12\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(years):\n    return 4 * years\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_age):\n    return human_age * 7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(years_in_dog_years):\n    return 7*years_in_dog_years + 14\n\ndog_age(6)\n\n\n# In[4]:\n\n\n# Pig latin\ndef piglatin(str):\n    vowels = 'aeiou'\n    piglatin_string = ''\n    for letter in str:\n        if letter in vowels:\n            piglatin_string += letter + 'way'\n        else:\n            piglatin_string += letter + letter[1:] + 'ay'\n    return piglatin_string\npiglatin('hello')\n\n\n# In[6]:\n\n\ndef is_palindrome(str):\n    return str[0] == str[-1] and str[0] == str[-2] and str[0] == str[-3] and str[0] == str[-4] and str[0] == str[-5]\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\ndef dog_age(human_years):\n    return math.floor(human_years / 7)\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(year):\n    dog_age = year * 7 + 3\n    return dog_age\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(dog_years):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    :param dog_years: The number of dog's years\n    :type dog_years: int\n    :return: The number of dog's years\n    :rtype: int\n    \"\"\"\n    return dog_years * 7\n\n\n# Read the following instructions and write the function\n# that takes a list of strings as input and returns a list\n# of strings, each string is the first letter of the corresponding\n# string in the original list, in lower case.\n# assert first_letter(['hi', 'hey', 'hello', 'howdy'])==['h', 'h', 'h', 'h']\n\n\ndef first_letter(lst):\n    \"\"\"\n    Return a list of strings, where each string is the first\n    letter of the corresponding string in the original list, in lower case.\n\n    :param lst: The list of strings\n    :type lst: list of strings\n    :return: The list of strings\n    :rtype: list of strings\n    \"\"\"\n    return [x[0].lower() for x in lst]\n\n\n# Read the following instructions and write the function\n# that takes a list of strings as input and returns a list\n# of integers, where each integer is the length of the corresponding\n# string in the original list.\n# assert len_list(['hi', 'hey', 'hello', 'howdy'])==[2, 3, 5, 4]\n\n\ndef len_list(lst):\n    \"\"\"\n    Return a list of integers, where each integer is the length of the corresponding\n    string in the original list.\n\n    :param lst: The list of strings\n    :type lst: list of strings\n    :return: The list of integers\n    :rtype: list of integers\n    \"\"\"\n    return [len(x) for x in lst]\n\n\n# Read the following instructions and write the function\n# that takes a list of integers as input and returns a list\n# of integers that contains the elements of the original list,\n# except for the first and last elements.\n# assert drop_first_last_elements([0, 1, 2, 3, 4])==[1, 2, 3]\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(dog_age_in_weeks):\n    dog_years = dog_age_in_weeks / 52\n    return dog_years\n\n# TODO: Write a function to calculate a cat's age in cat's years.\ndef cat_age(cat_age_in_weeks):\n    cat_years = cat_age_in_weeks / 52\n    return cat_years\n\n# TODO: Write a function to calculate a rabbit's age in rabbit's years.\ndef rabbit_age(rabbit_age_in_months):\n    rabbit_years = rabbit_age_in_months / 12\n    return rabbit_years", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(human_age):\n    \"\"\"\n    Returns the age of a dog in dog's years given human's age in human years\n    \"\"\"\n    return 7 + human_age * 4\n\n\ndef test_dog_age(expected, actual):\n    \"\"\"\n    Test the function dog_age with test cases\n    \"\"\"\n    assert expected == actual, \"Expected: {} Actual: {}\".format(expected, actual)\n\n\ndef test_dog_age_function():\n    \"\"\"\n    Test the function dog_age with some test cases\n    \"\"\"\n    test_dog_age(61, dog_age(12))\n    test_dog_age(32, dog_age(7))\n    test_dog_age(4, dog_age(20))\n\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(l, n):\n    return [l[i::n] for i in range(n)]\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    split_list = []\n    for i in range(0, len(lst), n):\n        split_list.append(lst[i:i + n])\n    return split_list\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(l, n):\n    return [l[i::n] for i in range(n)]\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(my_list, n):\n    return [my_list[i:i + n] for i in range(0, len(my_list), n)]\n\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Test Cases", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n  return [lst[i::n] for i in range(n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(l,n):\n    return l[i:i + n]\n\ndef list_split(l,n):\n    \"\"\"\n    :type l: List[str]\n    :type n: int\n    :rtype: List[List[str]]\n    \"\"\"\n    return [l[i::n] for i in range(0,n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    return [lst[i::n] for i in range(n)]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return 6*side**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(length):\n    return length**2*6\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n# this is a function\n# def lateralsurface_cube(n):\n#     area = 6 * n * n * n\n#     return area\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(l):\n    return 6 * l ** 2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateral_surface_cube(x):\n    return 2*x**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateral_surface_cube(n):\n  lateral_area = (4*(n**2))+(2*n)\n  return lateral_area", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\nimport numpy as np\ndef lateralsurface_cube(num):\n    return 6*num**2", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(edge_length):\n    return 6 * edge_length ** 2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return side**2*2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(x):\n    return 6*x**2\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_sum(n):\n    \"\"\"\n    :param n: Number of elements of the series\n    :type n: int\n    :return: Sum of the squares of first n odd natural numbers\n    :rtype: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i ** 2)\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, n+1, 2))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum_odd = 0\n    for i in range(n, 0, -2):\n        sum_odd += i ** 2\n    return sum_odd\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    # Hint:\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    return sum([num**2 for num in range(1, n+1, 2)])", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_sum(n):\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i * i\n\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    # your code here\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + (i**2)\n        i = i + 2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    a = 0\n    for i in range(1,n+1,2):\n        a += i**2\n    return a\n\n#assert square_Sum(10) == 385\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum=0\n    i=0\n    while(i<n):\n        sum+=i**2\n        i+=2\n    return sum\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    return int(''.join(map(str, [n,n+1])))\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(7)\n    1729\n    >>> find_star_num(100)\n    25164150\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 37\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    sum = 0\n    for i in range(n):\n        sum = sum + (i+1) * (i+2) * i * 4\n    return sum\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    return (1+8*n)*(3*n-1)//2\n\ndef test_find_star_num():\n    assert find_star_num(3) == 37\n    assert find_star_num(4) == 55\n    assert find_star_num(5) == 73\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n\t# Base case\n\tif n == 1:\n\t\treturn 2\n\telif n == 2:\n\t\treturn 3\n\telse:\n\t\treturn find_star_num(n-1) + 2 * find_star_num(n-2)\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\nfrom math import floor\n\n\ndef find_star_num(n):\n    if n == 1:\n        return 6\n    elif n == 2:\n        return 14\n    else:\n        power = floor(log2(n))\n        num_of_stars = int(2 ** power)\n        star_pos = 3 * num_of_stars\n        return star_pos + (2 * power - 1)\n\n\ndef log2(x):\n    return floor(log10(x))\n\n\ndef log10(x):\n    return log10(x, 10)\n\n\ndef log10(x, base):\n    if x >= base:\n        return 1 + log10(x / base, base)\n    else:\n        return 0\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n: int) -> int:\n    # the nth star is the nth fibonacci number\n    return fibonacci(n + 1)\n\n\ndef fibonacci(n: int) -> int:\n    if n <= 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef is_divisible(num):\n    if num % 3 == 0 or num % 5 == 0 or num % 7 == 0:\n        return True\n    return False\n\ndef find_star_num(n):\n    count = 1\n    for i in range(1, n):\n        count += 1\n    return count\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    ans = find_star_num(n)\n    print(ans)\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    if n <= 0: return 0\n    result = 0\n    for i in range(1, n):\n        result += i * (i+1) / 2\n        result += i * i\n    return int(result)\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nimport math\n\ndef find_star_num(n):\n    # TODO return nth star number\n    # print(n)\n    return (n*(n*n+1))//2\n\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(ch):\n    return ord(ch)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(c):\n    return ord(c)\n\n# Tests\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(ch):\n    return ord(ch)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\ndef test_ascii_value():\n    assert ascii_value('A') == 65\n    assert ascii_value('a') == 97\n    assert ascii_value(' ') == 32\n    assert ascii_value('!') == 33\n    assert ascii_value('?') == 63\n    assert ascii_value('~') == 126", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(a):\n    return ord(a)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(c):\n    return ord(c)\n\n\ndef main():\n    print(\"ascii value of 'A':\", ascii_value('A'))\n    print(\"ascii value of 'B':\", ascii_value('B'))\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(character):\n    return ord(character)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\nimport re\n\ndef ascii_value(char):\n    return ord(char)\n\ndef test():\n    assert ascii_value('A') == 65\n    assert ascii_value(' ') == 32\n    assert ascii_value('D') == 68\n    assert ascii_value('Z') == 90\n    assert ascii_value('a') == 97\n    assert ascii_value('z') == 122\n    assert ascii_value('1') == 49\n    assert ascii_value('9') == 57\n    assert ascii_value('-') == 45\n    assert ascii_value('+') == 43\n    assert ascii_value('_') == 95\n    assert ascii_value('0') == 48\n    assert ascii_value('.') == 46\n    assert ascii_value('/') == 47\n    assert ascii_value('!') == 33\n    assert ascii_value('@') == 64\n    assert ascii_value(' ') == 32\n    assert ascii_value('\"') == 34\n    assert ascii_value('#') == 35\n    assert ascii_value('%') == 37\n    assert ascii_value('&') == 38\n    assert ascii_value(\"'\") == 39\n    assert ascii_value('(') == 40\n    assert ascii_value(')') == 41\n    assert ascii_value(',') == 44\n    assert ascii_value(':') == 58\n    assert ascii_value('*') == 42\n    assert ascii_value(';') == 59\n    assert ascii_value('?') == 63\n    assert ascii_value('|') == 124\n    assert ascii_value('<') == 60\n    assert ascii_value('>') == 62\n    assert ascii_value('[') == 91\n    assert ascii_value(']') == 93\n    assert ascii_value('{') == 123\n    assert ascii_value('}') == 125\n    assert ascii_value('$') == 36\n    assert ascii_value('~') == 126\n    assert ascii_value('\\\\') == 92\n    assert ascii_value('^') == 94\n    assert ascii_value('`')", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(c):\n    return ord(c)\n\n# Test the function", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst,n):\n    assert isinstance(lst,list)\n    assert isinstance(n,int)\n    return sum(lst[i] for i in range(0,n,2))\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(list, length):\n    \"\"\"\n    Returns the sum of even numbers at even positions.\n    \"\"\"\n    result = 0\n    for i in range(0, length, 2):\n        result += list[i]\n    return result\n\ndef test_function(test_case):\n    list = test_case[0]\n    solution = test_case[1]\n    output = sum_even_and_even_index(list, len(list))\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[5, 6, 12, 1, 18, 8], 6])\ntest_function([[5, 6, 12, 1, 18, 8], 1])\ntest_function([[5, 6, 12, 1, 18, 8], 2])\ntest_function([[5, 6, 12, 1, 18, 8], 3])\ntest_function([[5, 6, 12, 1, 18, 8], 4])\ntest_function([[5, 6, 12, 1, 18, 8], 5])\ntest_function([[5, 6, 12, 1, 18, 8], 7])\ntest_function([[5, 6, 12, 1, 18, 8], 8])\ntest_function([[5, 6, 12, 1, 18, 8], 9])", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(array,even_index):\n    sum = 0\n    for i in range(even_index):\n        if array[i] % 2 == 0:\n            sum += array[i]\n\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst,n):\n    sum = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst,n):\n    if len(lst) < n:\n        return \"Invalid Input\"\n    else:\n        sum = 0\n        for i in range(0,len(lst),2):\n            sum += lst[i]\n        return sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst, index):\n\tsum = 0\n\tfor i in range(0, len(lst)):\n\t\tif i % 2 == 0 and lst[i] % 2 == 0:\n\t\t\tsum += lst[i]\n\treturn sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(nums, n):\n    return sum(nums[i] for i in range(0, len(nums), 2) if i%2==0)\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(lst,n):\n  return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 == 0)\n\n# Tests", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(list_to_sum,even_index):\n\tsum = 0\n\tif (even_index >= 0) and (even_index <= len(list_to_sum)):\n\t\tfor i in range(len(list_to_sum)):\n\t\t\tif (i%2 == 0) and (i == even_index):\n\t\t\t\tsum += list_to_sum[i]\n\telse:\n\t\treturn None\n\treturn sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr,n):\n    total = 0\n    for i in range(0,n,2):\n        total+=arr[i]\n    return total"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum=0\n    for i in range(2,n+1,2):\n        sum=sum+i**5\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return sum([i**5 for i in range(0,n,2)])\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    total = 0\n    for i in range(1,n+1,2):\n        total += i ** 5\n    return total\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    \"\"\"\n    >>> even_Power_Sum(0)\n    0\n    >>> even_Power_Sum(1)\n    0\n    >>> even_Power_Sum(2)\n    1056\n    \"\"\"\n    sum_of_power_n = 0\n    for i in range(0,n):\n        sum_of_power_n += pow(i+2,5)\n    return sum_of_power_n\n\ndef main():\n    test_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for test_case in test_data:\n        result = even_Power_Sum(test_case)\n        print(result)\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(0, n, 2):\n        sum += i**5\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i**5\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    return sum([x**5 for x in range(2, n+1) if x%2==0])\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return sum([num**5 for num in range(n) if num%2==0])", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n\n\n# assert even_Power_Sum(2) == 1056\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(lst):\n  return [item for item, _ in lst]\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\nfrom functools import reduce\n\ndef rear_extract(records):\n    return list(map(lambda x: x[2], records[::-1]))\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    return records[-1]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(L):\n    return [x[-1] for x in L]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(list_of_tuples):\n    list_of_records = list_of_tuples.copy()\n    list_of_records.reverse()\n    return [record[1] for record in list_of_records]", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(l):\n    return [r[1] for r in reversed(l)]\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    \"\"\"\n    params:\n        records: list of tuples records\n    return:\n        List of rear elements of records\n    \"\"\"\n    return [r[-1] for r in records]", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(rec_list):\n    \"\"\"\n    rear_extract([[(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]]) == [21, 20, 19]\n    \"\"\"\n    rec_list.reverse()\n    return list(map(lambda x:x[-1], rec_list))\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    lst = []\n    for rec in records:\n        lst.append(rec[2])\n    return lst\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    res = []\n    while records:\n        res.append(records[-1])\n        del records[-1]\n    return res\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\nimport unittest\n\n\ndef substract_elements(t1, t2):\n    t_new = [t1[i] - t2[i] for i in range(len(t1))]\n    return tuple(t_new)\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\nfrom typing import Tuple\n\n\ndef substract_elements(left: Tuple, right: Tuple) -> Tuple:\n    if len(left) != len(right):\n        raise IndexError(\"The tuples have different length\")\n\n    result: Tuple = ()\n    for index, left_item in enumerate(left):\n        right_item = right[index]\n        result += (left_item - right_item,)\n    return result\n\n\ndef main():\n    left: Tuple = (10, 4, 5)\n    right: Tuple = (2, 5, 18)\n\n    assert substract_elements(left, right) == (8, -1, -13)\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\nfrom typing import Tuple\n\ndef substract_elements(tuple_1:Tuple[int], tuple_2:Tuple[int])->Tuple[int]:\n    return tuple(map(lambda x, y: x - y, tuple_1, tuple_2))\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    return tuple(a-b for a,b in zip(tuple1,tuple2))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple_1, tuple_2):\n    return tuple_1[0] - tuple_2[0], tuple_1[1] - tuple_2[1], tuple_1[2] - tuple_2[2]\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1, t2):\n\tt3 = []\n\tfor i in range(len(t1)):\n\t\tt3.append(t1[i]-t2[i])\n\treturn t3\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n# A. Using a for loop\ndef substract_elements(first_tuple, second_tuple):\n    result = []\n    for i in range(len(first_tuple)):\n        result.append(first_tuple[i] - second_tuple[i])\n    return tuple(result)\n\n\n# B. Using zip\ndef substract_elements(first_tuple, second_tuple):\n    return tuple(a - b for a, b in zip(first_tuple, second_tuple))", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(x, y):\n    assert isinstance(x, tuple)\n    assert isinstance(y, tuple)\n    assert len(x) == len(y)\n    return tuple([x[i] - y[i] for i in range(len(x))])\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\nimport collections\n\n\ndef substract_elements(t1, t2):\n    \"\"\"\n    :type t1: tuple\n    :type t2: tuple\n    :rtype: tuple\n    \"\"\"\n    # We can use dict to store the relation of 2 tuple\n    # for key, val in zip(t1, t2):\n    #     if key in dict:\n    #         dict[key] -= val\n    #     else:\n    #         dict[key] = val\n    # return tuple(dict.values())\n\n    dict = collections.defaultdict(int)\n    for i in range(len(t1)):\n        dict[t1[i]] -= t2[i]\n    for key, val in dict.items():\n        if val < 0:\n            return -1\n    return tuple(dict.values())\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tup_a, tup_b):\n    # Your code here\n    n = len(tup_a)\n    tup_c = []\n    for i in range(n):\n        tup_c.append(tup_a[i]-tup_b[i])\n    return tup_c\n\n# testing\ntup1 = (10, 4, 5)\ntup2 = (2, 5, 18)"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(2, n, 2):\n        sum += binomial_coeff(n, i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum_even = 0\n    for i in range(n, -1, -2):\n        sum_even += binomial_coeff(n, i)\n    return sum_even\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    s=0\n    for i in range(n,0,-2):\n        s+=binomial(i,i-1)\n    return s\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    # your code here\n    return int((2**(n) + 2*(n - 1))/2)\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"Returns sum of even index binomial coefficients for n.\n\n    Args:\n        n (int): Number for which binomial coefficients are to be found.\n\n    Returns:\n        int: Sum of even index binomial coefficients for n.\n\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            sum += binom(n,i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n, 2):\n        sum += binomial(n, i)\n    return sum\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    # your code here\n    sum = 0\n    for i in range(1,n,2):\n        sum = sum + binomial_Coeff(n,i)\n    return sum\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nimport math\ndef even_binomial_Coeff_Sum(n):\n    # Write your code here\n    s = 0\n    for i in range(0, n, 2):\n        s += math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n    return s\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n\tsum=0\n\tfor i in range(0,n,2):\n\t\tsum+=binomial_Coeff(n,i)\n\treturn sum\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n\treturn sum(binom(n,i) for i in range(0,n,2))\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(a,n,x):\n    stack=[]\n    for i in range(0,n):\n        if(a[i]==x):\n            stack.append(a[i])\n    for i in range(0,n):\n        if(a[i]!=x):\n            a[i-len(stack)]=a[i]\n    return len(stack)-1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, n, k):\n    # code here\n    arr.sort()\n    l,r=0,n-1\n    while l<=r:\n        mid=(l+r)//2\n        if arr[mid]-arr[mid-1]==k:\n            if mid==n-1 or arr[mid]-arr[mid+1]==k:\n                return mid\n            l=mid+1\n        elif arr[mid]-arr[mid-1]>k:\n            r=mid-1\n        else:\n            l=mid+1\n    return l\n\n\n#{ \n#  Driver Code Starts\n#Initial Template for Python 3", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,n,ele):\n    for i in range(n-1,-1,-1):\n        if arr[i] != ele:\n            return i\n    return -1\n\n# Driver code", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, elem, n):\n    arr.remove(elem)\n    return arr.index(elem)\n\n# Test Case", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(array, index, length):\n    # Code Here\n    for i in range(length):\n        if array[i] == index:\n            return i\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\n# write your code here\ndef get_Position(arr,n,x):\n    start = 0\n    end = n-1\n    count = 0\n\n    while(start<=end):\n        mid = (start+end)//2\n\n        if(arr[mid]==x):\n            if(count==0):\n                start = mid\n                count += 1\n            else:\n                end = mid-1\n        elif(arr[mid]>x):\n            end = mid-1\n        else:\n            start = mid+1\n\n    return start", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(nums,element,start):\n    if(element < nums[start]):\n        return start\n    elif(element > nums[-1]):\n        return -1\n    else:\n        for i in range(start,len(nums)):\n            if(element == nums[i]):\n                return i\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,n,k):\n    \"\"\"\n    :param arr: given array\n    :param n: size of array\n    :param k: remove element at this position\n    :return: position of last removed element\n    \"\"\"\n    cnt = 0\n    for i in arr:\n        if cnt < k:\n            cnt += 1\n        else:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, n, x):\n  if n < 0 or x not in arr:\n    return -1\n  else:\n    if arr.index(x) == n - 1:\n      return n\n    else:\n      return get_Position(arr[:n-1],n-1,x)", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,num,element):\n    position=0\n    while position < len(arr) and arr[position] != element:\n        position += 1\n    return position\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n\tpi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196\n\treturn pi*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    return math.pi*r*r*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius,height):\n    return pi*radius*radius*height\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius,height):\n    return ((radius**2)*height) * pi\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\n#solution\ndef volume_cylinder(radius, height):\n    return pi*(radius**2)*height\n\n# test", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    pi=3.14\n    return pi*(r**2)*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    from math import pi\n    return pi*r**2*h\n\n# Write a function to find the surface area of a rectangle.\ndef surface_rectangle(a,b):\n    return 2*a*b\n\n# Write a function to find the surface area of a square.\ndef surface_square(s):\n    return 4*s**2\n\n# Write a function to find the surface area of a regular polygon.\ndef surface_regular_polygon(s,n):\n    return n*s*(s-2*math.sin(math.pi/n))\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    from math import pi\n    return (4/3)*pi*r**3\n\n# Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    from math import pi,sin,cos\n    return 4*pi*r**2\n\n# Write a function to find the surface area of a cone.\ndef surface_cone(r,h):\n    from math import pi,sin,cos\n    return pi*r*r + pi*r*h*sin(pi/3) + pi*r**2\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    from math import pi,sin,cos\n    return (1/3)*pi*r**2*h\n\n# Write a function to find the surface area of a pyramid.\ndef surface_pyramid(b,h):\n    from math import pi,sin,cos\n    return pi*b**2 + pi*b*h*sin(pi/3) + pi*b*h\n\n# Write a function to find the volume of a pyramid.\ndef volume_pyramid(b,h):\n    from math import pi,sin,cos\n    return (1/3)*pi*b*h**2 + 1/6*b**2*h\n\n# Write a function to find the surface area of a frustum.\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius,height):\n    volume = pi*radius**2*height\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r,h):\n    \"\"\"\n    Return the volume of a cylinder.\n    \"\"\"\n    V = math.pi * r**2 * h\n    return V\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\nimport math\ndef volume_cylinder(r,h):\n    return math.pi*(r**2)*h\n\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d, value):\n    return {k:v for k,v in d.items() if v==value}\n\n#Below is an example usage:\n\nimport math\n\ndef dict_filter(d, value):\n    return {k:v for k,v in d.items() if v==value}\n\n# Enter the dictionary\nd = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}\n\n# Calling the function", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, v):\n    return {k:v for (k,v) in d.items() if v>v}\n\n\n# Test the function\ndict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nQ2. Write a function that takes in a dictionary and returns True if the value in a specified key is in the list of possible values.\n\n### Code:\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dic, num):\n    new_dic = {}\n    for key in dic.keys():\n        if dic[key] >= num:\n            new_dic[key] = dic[key]\n    return new_dic\n\ndef dict_filter_alt(dic, num):\n    return {key: dic[key] for key in dic.keys() if dic[key] >= num}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict1,n):\n    result = {}\n    for key in dict1:\n        if dict1[key] == n:\n            result[key] = dict1[key]\n    return result", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(my_dict, value):\n    return {key: value for key, value in my_dict.items() if value==value}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary,value):\n  #Start with an empty dictionary\n  filtered_dict = {}\n  #Iterate through the dictionary\n  for key,value in dictionary.items():\n    if value >= value:\n      filtered_dict[key] = value\n  #return the filtered dictionary\n  return filtered_dict\n\n#Test the dictionary filter function", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d,v):\n    d_filtered = {}\n    for k,v in d.items():\n        if v == v:\n            d_filtered[k] = v\n    return d_filtered\n\n#assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\n#assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},200)=={}\n\n# assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},150)=={'Pierre Cox': 190}\n\n# assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={'Pierre Cox': 190}\n\n# assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary, value):\n    filtered_dict = {}\n    for k, v in dictionary.items():\n        if v == value:\n            filtered_dict[k] = v\n    return filtered_dict\n\n# Test", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary,value):\n    return dict(filter(lambda x: x[1] == value, dictionary.items()))\n\n# Test", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict,value):\n    return {k: v for k, v in dict.items() if v > value}\n# assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    return len(list(filter(lambda i : i != tup[-1], tup)))\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tup):\n    count = 0\n    for i in range(0, len(tup)):\n        if isinstance(tup[i], tuple):\n            count += count_first_elements(tup[i])\n        else:\n            break\n    return count + 1\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nfrom typing import List, Tuple\n\nimport pytest\n\n\ndef count_first_elements(elements: Tuple) -> int:\n    return sum(elements[0] == element for element in elements)\n\n\ndef test_count_first_elements() -> None:\n    assert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\n    assert count_first_elements((1, 5, 7, (4, 6, 8), 10)) == 4\n    assert count_first_elements((1, 5, 7, (4, 6, 8, 10))) == 4\n    assert count_first_elements((1, 5, 7, 4, 6, 8, 10)) == 5\n    assert count_first_elements((1, 5, 7, 4, 6, 8, 10, 1)) == 6\n\n\ndef test_count_first_elements_negative_input() -> None:\n    with pytest.raises(TypeError):\n        count_first_elements(1)\n\n\ndef test_count_first_elements_empty_input() -> None:\n    with pytest.raises(ValueError):\n        count_first_elements(())\n\n\ndef test_count_first_elements_non_tuple_input() -> None:\n    with pytest.raises(TypeError):\n        count_first_elements([1])", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(record_tuple):\n    # Write your code here\n    # Write your code here\n    return count_elements(record_tuple, [])\n\n# write the following test cases", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_):\n    count = 0\n    for i in range(len(tuple_)):\n        if type(tuple_[i]) is tuple:\n            count += count_first_elements(tuple_[i])\n        elif type(tuple_[i]) is int:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    c = 0\n    for i in tup:\n        if type(i) == tuple:\n            c += count_first_elements(i)\n        else:\n            c += 1\n    return c\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(iterable):\n\tif type(iterable) is not tuple:\n\t\traise TypeError(\"The input must be a tuple\")\n\telif len(iterable) == 0:\n\t\treturn 0\n\telif len(iterable) == 1:\n\t\treturn 1\n\n\tfirst_element = iterable[0]\n\tif type(first_element) is tuple:\n\t\tfirst_element = count_first_elements(first_element)\n\telse:\n\t\tfirst_element = 0\n\n\treturn first_element + count_first_elements(iterable[1:])", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(T):\n    \"\"\"\n    >>> count_first_elements((1, 5, 7, (4, 6), 10) )\n    3\n    >>> count_first_elements((1, 2))\n    2\n    \"\"\"\n    if isinstance(T, tuple):\n        if not T:\n            return 0\n        return count_first_elements(T[1:]) + 1\n    return 0\n\n\ndef test_count_first_elements():\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n    assert count_first_elements((1, 2)) == 2\n\n\n# ----------------------------------------------------------\n# b. write a function to find the last record in the given tuple\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\n# The given tuple could be viewed as a list of lists\n# where each inner list is a record\n# and the record contains an element and a pointer to the next record\n# the pointer is a tuple (index, first_element)\n# 1 : (0,1)\n# 5 : (1,5)\n# 7 : (2,7)\n# (4,6) : (3,(4,6))\n# 10 : (4,10)\n\n# A list of lists can be converted to a list of tuples\n# which is more compact and easier to process\n\n# (4,6) : (3,4,6)\n# 10 : (4,10)\n\n# We need to find the pointer to the record of the given element\n# this record contains the first element in a tuple\n# this first element is the same as the given element\n\n# def count_first_elements(t):\n#     # input:  t is a tuple of (element, pointer)\n#     # output: the number of first elements before the given element\n#     # def helper(t):\n#     #     # input:  t is a tuple of (element, pointer)\n#     #     # output: the number of first elements before the given element\n#     #     # check whether the element matches the pointer\n#     #     # if it matches, return 1\n#     #     # otherwise, return 0\n#     #     # if the pointer is empty, return 0\n#     #     # if the pointer is not empty,\n#     #     # then pointer is (index, first_element)\n#     #     # record the number of first elements before the first_element\n#     #     # and return 0\n#     #     # if the pointer is not empty,\n#     #     # then pointer is (index, first_element)\n#     #     # return helper(t[1])\n\n#     #     if t[0] == t[1][1]:\n#", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple_list):\n    \"\"\"\n    Parameters:\n        tuple_list(list) : List of tuples to count first element of\n\n    Returns:\n        int : Number of first element of each tuple\n\n    \"\"\"\n    count = 0\n    for tup in tuple_list:\n        count += tup[0]\n    return count\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    assert n > 0\n    return n * (3*n - 1)/2\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    return int((1 + math.sqrt(10 * n + 1)) / 2.0) * int((1 + math.sqrt(10 * n + 1)) / 2.0) == 10 * n + 1\n\n\ndef nth_decagonal(n):\n    if n == 1:\n        return 10\n    if n == 2:\n        return 21\n    if n == 3:\n        return 27\n    if n == 4:\n        return 36\n    if n == 5:\n        return 46\n    if n == 6:\n        return 55\n    if n == 7:\n        return 64\n    if n == 8:\n        return 72\n    if n == 9:\n        return 80\n    if n == 10:\n        return 89\n    if n == 11:\n        return 97\n    if n == 12:\n        return 104\n    if n == 13:\n        return 111\n    if n == 14:\n        return 118\n    if n == 15:\n        return 124\n    if n == 16:\n        return 130\n    if n == 17:\n        return 136\n    if n == 18:\n        return 142\n    if n == 19:\n        return 148\n    if n == 20:\n        return 154\n    if n == 21:\n        return 159\n    if n == 22:\n        return 164\n    if n == 23:\n        return 169\n    if n == 24:\n        return 174\n    if n == 25:\n        return 179\n    if n == 26:\n        return 184\n    if n == 27:\n        return 189\n    if n == 28:\n        return 194\n    if n == 29:\n        return 199\n    if n == 30:\n        return 204", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    if n == 1:\n        return 1\n    a = 1\n    c = 1\n    for i in range(3, n):\n        if is_triangle(i):\n            a = i\n            c = (n - i) ** 2\n    return c + a\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n\treturn n * (3 * n - 1) / 2\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nimport math\n\n\ndef is_num_decagonal(num):\n    sqrt = math.sqrt(num)\n    if int(sqrt) ** 2 == num:\n        return num\n    else:\n        return 0\n\n\ndef find_nth_decagonal(n):\n    num = 0\n    for i in range(1, n):\n        num += is_num_decagonal(i)\n    return num\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nfrom .utils import memoize\n\n@memoize\ndef decagonal_num(n):\n    '''\n    returns nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 10\n    else:\n        return 10*n + decagonal_num(n-1) - n\n\n@memoize\ndef decagonal_count(n):\n    '''\n    returns the number of decagonal numbers up to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + decagonal_count(n-1)\n\ndef is_num_decagonal(n):\n    '''\n    Returns True if n is a decagonal number.\n    '''\n    return n == decagonal_num(decagonal_count(n)-1)", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nfrom math import cos, sin\n\ndef is_num_decagonal(num):\n    return num == sum(int(d) * d ** 2 for d in str(num))\n\ndef decagonal_num(n):\n    # return sum(int(d) * d ** 2 for d in str(n))\n    x, y = 0, 0\n    for d in str(n):\n        x += int(d) * d ** 2\n        y += int(d) * d\n        if y * y > x * (x - 3 * y):\n            return n\n    return n\n\ndef decagonal_num(n):\n    # return sum(int(d) * d ** 2 for d in str(n))\n    x, y = 0, 0\n    for d in str(n):\n        x += int(d) * d ** 2\n        y += int(d) * d\n        if y * y > x * (x - 3 * y):\n            return n\n    return n\n\ndef decagonal_num(n):\n    # return sum(int(d) * d ** 2 for d in str(n))\n    x, y = 0, 0\n    for d in str(n):\n        x += int(d) * d ** 2\n        y += int(d) * d\n        if y * y > x * (x - 3 * y):\n            return n\n    return n\n\ndef decagonal_num(n):\n    return sum(int(d) * d ** 2 for d in str(n))\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    # Your code here\n    pass\n\n# Test your solution", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    # TODO write your code here\n    pass\n\n\ndef test_is_num_decagonal():\n    assert is_num_decagonal(3) == 27", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(num):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(9)\n    225\n    >>> is_num_decagonal(10)\n    240\n    >>> is_num_decagonal(5000)\n    12841500\n    \"\"\"\n    return (8*num*(num+1))//3\n\ndef nth_decagonal(n):\n    \"\"\"\n    >>> nth_decagonal(3)\n    27\n    >>> nth_decagonal(9)\n    225\n    >>> nth_decagonal(10)\n    240\n    >>> nth_decagonal(5000)\n    12841500\n    \"\"\"\n    i = 1\n    while True:\n        result = is_num_decagonal(i)\n        if result == n:\n            return result\n        i += 1\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr,n):\n    for i in range(len(arr)):\n        if arr[i] == n:\n            return (True, i)\n    return (False, -1)\n\ndef sequential_search_optimized(arr,n):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] == n:\n            return (True, mid)\n        if arr[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True,i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(lst, element):\n    for i in range(len(lst)):\n        if lst[i] == element:\n            return (True, i)\n    return (False, -1)\n\n# Test", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr,element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True,i)\n    return (False,-1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, target):\n    for i, val in enumerate(arr):\n        if val == target:\n            return True, i\n\n    return False, None\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\n# [11,23,58,31,56,77,43,12,65,19]\n\n# def sequential_search(arr,num):\n#     for index,i in enumerate(arr):\n#         if i == num:\n#             return (True,index)\n#     return (False,-1)\n\ndef sequential_search(arr,num):\n    for index,i in enumerate(arr):\n        if i == num:\n            return (True,index)\n    return (False,-1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(array, x):\n    for index, value in enumerate(array):\n        if value == x:\n            return (True, index)\n    return (False, None)\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, key):\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return (True, i)\n    return (False, -1)\n\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        arr.sort()\n        previous = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] == previous:\n                return False\n            else:\n                previous = arr[i]\n        return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    return len(set(lst)) == len(lst)\n    ", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    #return True if no two elements are equal else false\n    return len(set(lst)) == len(lst)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n\t\"\"\"\n\tfunction to check if the elements of a list are unique or not\n\tArgs:\n\t\tlst: a given list.\n\t\"\"\"\n\tif not lst:\n\t\treturn True\n\telse:\n\t\treturn all([lst.count(item) == 1 for item in lst])", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(l):\n    \"\"\"\n    l: list\n    return: bool\n    \"\"\"\n    seen = set()\n    for item in l:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return len(set(arr)) == len(arr)\n\n# Test", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(my_list):\n    if len(my_list) > len(set(my_list)):\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(list):\n  if len(set(list)) == len(list):\n    return True\n  else:\n    return False\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(l1,l2):\n    return list(map(lambda x,y: x-y,l1,l2))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1,list2):\n    return list(map(lambda x,y: x-y,list1,list2))\n\n# print(sub_list([1, 2, 3],[4,5,6]))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\ndef test_sub_list():\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\ndef test_sub_list2():\n    assert sub_list([0, 0, 0],[0,0,0])==[0,0,0]\n\ndef test_sub_list3():\n    assert sub_list([-1, -2, -3],[-4,-5,-6])==[3,7,10]\n\ndef test_sub_list4():\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\ndef test_sub_list5():\n    assert sub_list([-1, -2, -3],[-4,-5,-6])==[3,7,10]\n\ndef test_sub_list6():\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\ndef test_sub_list7():\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\ndef test_sub_list8():\n    assert sub_list([-1, -2, -3],[-4,-5,-6])==[3,7,10]\n\ndef test_sub_list9():\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\ndef test_sub_list10():\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\ndef test_sub_list11():\n    assert sub_list([-1, -2, -3],[-4,-5,-6])==[3,7,10]\n\ndef test_sub_list1", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(a,b):\n    return list(map(lambda x, y: x - y, a, b))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(l1,l2):\n    return list(map(lambda x: x[0]-x[1],zip(l1,l2)))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(l1,l2):\n    return list(map(lambda a,b:a-b,l1,l2))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(l1,l2):\n    return list(map(lambda x, y: x-y, l1,l2))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\n# Solution 1: using zip\ndef sub_list1(list1,list2):\n    return list(map(lambda x,y: x - y, list1, list2))\n\n# Solution 2: using map and lambda function\ndef sub_list2(list1,list2):\n    return list(map(lambda x,y: lambda x,y: x - y, list1, list2))\n\n# Test cases", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(l1,l2):\n    return list(map(lambda x: x[0]-x[1],zip(l1,l2)))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\nimport unittest\n\n\ndef sub_list(first, second):\n    return list(map(lambda x: x[0] - x[1], zip(first, second)))\n\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    count = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,0:0}\n    for x in num:\n        count[int(x)]+=1\n    if count[0]==0 or count[1]==1 or count[2]==2 or count[3]==3 or count[4]==4 or count[5]==5 or count[6]==6 or count[7]==7 or count[8]==8 or count[9]==9:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    digits = list(map(int, list(str(number))))\n    print(digits)\n    for digit in digits:\n        if digit > 0 and digit < len(digits):\n            if digits[digit] > digit:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    for i in num:\n        print(i, end=\"\")\n        if i > int(i):\n            print(f\"\\nInvalid input!\")\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    return all(val <= num for num,val in zip(n,range(10)))", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    \"\"\"\n    >>> validate(1234)\n    True\n    >>> validate(1231)\n    False\n    >>> validate(121)\n    True\n    \"\"\"\n    string = str(n)\n    if int(string[0]) <= int(string[0]):\n        if int(string[1]) <= int(string[1]):\n            if int(string[2]) <= int(string[2]):\n                if int(string[3]) <= int(string[3]):\n                    return True\n    return False", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\nimport math\n\ndef validate(num):\n    freq = [0,0,0,0,0,0,0,0,0,0]\n    for i in str(num):\n        freq[int(i)] += 1\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\nimport re\n\n\ndef validate(num):\n    \"\"\"\n    :param num: input integer\n    :return: True if num is valid else False\n    \"\"\"\n    if type(num) is int:\n        num = str(num)\n    if not re.match(r'\\d', num):\n        return False\n    num = re.sub(r'[^\\d]', '', num)\n    num = [int(digit) for digit in num]\n\n    for digit in num:\n        if digit <= num.count(digit):\n            return True\n    return False\n\n\ndef main():\n    print(validate(1234))\n    print(validate(1233))\n    print(validate('1234'))\n    print(validate('1233'))\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    return [ True if x <= int(x) else False for x in str(num)]\n\n#Below is an example usage:\n\nimport unittest\n\ndef validate(num):\n    return [ True if x <= int(x) else False for x in str(num)]\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    return all(int(digit) <= int(digit) for digit in str(num))\n\n# Testing", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    return all([1 if (i <= j) else 0 for i,j in zip(num, str(num))])\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(element,name):\n    if element.count(name)==len(element):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list1,string):\n    for i in list1:\n        if i != string:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst,x):\n    for i in lst:\n        if(i!=x):\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst,element):\n    for i in lst:\n        if i != element:\n            return False\n    return True\n    ", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list,element):\n    \"\"\"\n    Function to check if all elements of a list are equal to a given string.\n\n    Args:\n       list(list): List of elements to check\n       element(str): Element to check if it is in the list\n    Returns:\n       bool: True or False\n    \"\"\"\n    for x in list:\n        if x != element:\n            return False\n    return True\n\n#Below is an example usage:\n\nimport random\n\ndef check_element(list,element):\n    \"\"\"\n    Function to check if all elements of a list are equal to a given string.\n\n    Args:\n       list(list): List of elements to check\n       element(str): Element to check if it is in the list\n    Returns:\n       bool: True or False\n    \"\"\"\n    for x in list:\n        if x != element:\n            return False\n    return True\n\n# Enter the list\nlist = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\n# Calling the function", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(mylist, element):\n    for x in mylist:\n        if x!= element:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list, value):\n    return all([item == value for item in list])\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n# O(n) time | O(n) space\ndef check_element(list,element):\n\tif len(list) == 0:\n\t\treturn True\n\telse:\n\t\tif list[0] == element:\n\t\t\treturn check_element(list[1:],element)\n\t\telse:\n\t\t\treturn False\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst,element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(my_list,string):\n    \"\"\"This function will check if the string is in the list.\"\"\"\n    for element in my_list:\n        if element == string:\n            return True\n    return False"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    \"\"\"\n    Matches a string that has an a followed by two to three 'b'.\n    \"\"\"\n    if text[0] == 'a' and text[1] != 'b' and text[1] != 'c':\n        if text[2] == 'b':\n            if text[3] == 'b':\n                if len(text) == 4:\n                    return text + 'b'\n                elif len(text) == 5:\n                    return text + 'bb'\n                elif len(text) == 6:\n                    return text + 'bbb'\n                else:\n                    return \"Not matched!\"\n            else:\n                return \"Not matched!\"\n        else:\n            return \"Not matched!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if re.match(r\"a[b]{2,3}$\",text):\n        return (\"Matched!\")\n    else:\n        return ('Not matched!')\n\ntext_match_two_three('acb')```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nQ7. write a function that matches a string that has an a followed by two to three 'b' or two to three 'c'\n\n### Code:\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if re.search(r'a(b){2,3}$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(string):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    if 'a' in string and 2 <= string.count('b') <= 3:\n        return string\n    else:\n        return \"Not matched!\"", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(str):\n    if str[0] == 'a' and  str[1:3] == 'bb' or str[1] == 'a' and  str[0:2] == 'bb':\n        return 'Matched'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(s):\n    if len(s)==0:\n        return \"Not matched!\"\n    elif s[-1] !='a':\n        return \"Not matched!\"\n    elif len(s)<2:\n        return \"Not matched!\"\n    elif s[-2] !='b':\n        return \"Not matched!\"\n    elif len(s)<3:\n        return \"Not matched!\"\n    else:\n        return \"Matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    match=re.search('a(b{2,3})',text)\n    if match:\n        return match.group(0)\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(string):\n    a_count=string.count(\"a\")\n    b_count=string.count(\"b\")\n    \n    if (a_count==0) or (b_count==0):\n        return(\"Not matched\")\n    elif a_count==b_count+1:\n        return(\"Not matched\")\n    elif a_count>b_count+1:\n        return(\"Not matched\")\n    elif a_count==b_count:\n        if b_count>2:\n            return(\"Not matched\")\n        else:\n            return(\"Matched\")\n    elif b_count>2:\n        return(\"Matched\")\n    else:\n        return(\"Not matched\")", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    # TODO: Write your code here\n    if \"a\" in text and \"b\" in text and len(text) > 3:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(string):\n    pattern = re.compile(r'a.*b')\n    result = pattern.findall(string)\n    if not result:\n        return \"Not matched!\"\n    return result\n\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nimport random\n\n\ndef max_sub_array_sum_repeated(array, k, n):\n    if k == 1:\n        return max_sub_array_sum(array, 0, n)\n    if k == 2:\n        if n % 2 == 1:\n            return max(max_sub_array_sum(array, 0, n), max_sub_array_sum(array, 1, n))\n        else:\n            return max(max_sub_array_sum(array, 0, n), max_sub_array_sum(array, 1, n - 1))\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        if i == 0:\n            a[i] = array[i]\n            b[i] = array[i]\n        elif i == 1:\n            a[i] = max(array[i], a[0] + array[i])\n            b[i] = max(array[i], b[0] + array[i])\n        else:\n            a[i] = max(a[i - 1] + array[i], b[i - 2] + array[i])\n            b[i] = max(b[i - 1] + array[i], a[i - 2] + array[i])\n    return max(a[n - 1], b[n - 2])\n\n\ndef max_sub_array_sum(array, start, n):\n    if start == n - 1:\n        return max(array[start], array[start + 1])\n    if array[start] > array[start + 1]:\n        return max_sub_array_sum(array, start + 1, n)\n    else:\n        return max(array[start], max_sub_array_sum(array, start + 1, n))\n\n\n# array = [10, 20, -30, -1]\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, size):\n    # base case\n    if size <= 0:\n        return 0\n    # max sum of contiguous sub array\n    max_subarray_sum = arr[0]\n    # max sum of sub array so far\n    max_subarray_so_far = arr[0]\n    for i in range(1, size):\n        # adding the current element to the previous one\n        # gives the maximum sum of sub array so far\n        max_subarray_so_far = max(arr[i], arr[i] + max_subarray_so_far)\n        # if the max sum of sub array so far is greater than the max sum of\n        # contiguous sub array, then set the max sum of contiguous sub array\n        # equal to the max sum of sub array so far\n        max_subarray_sum = max(max_subarray_so_far, max_subarray_sum)\n    return max_subarray_sum\n\ndef main():\n    arr = [10, 20, -30, -1]\n    k = 4\n    size = len(arr)\n\n    print(\"Maximum sum of contiguous sub array =\", max_sub_array_sum_repeated(arr, k, size))\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(A, k, n):\n    A_list = A * k\n    return max_sub_array_sum(A_list)\n\ndef max_sub_array_sum(A):\n    start, max_sum = 0, -99999\n    for i in range(len(A)):\n        if start > 0:\n            max_sum = max(max_sum, 0)\n        max_sum += A[i]\n        if max_sum < 0:\n            start = i + 1\n    return max_sum", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nfrom functools import reduce\n\n\ndef max_sub_array_sum_repeated(array: list, k: int, m: int):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n    temp = 0\n    for _ in range(k):\n        for i in array:\n            temp += i\n            if temp > result:\n                result = temp\n            if i < 0:\n                temp = 0\n    return result\n\n\ndef max_sub_array_sum_repeated2(array: list, k: int, m: int):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n    temp = 0\n    for _ in range(k):\n        for i in array:\n            temp += i\n            if temp < 0:\n                temp = 0\n            if temp > result:\n                result = temp\n    return result\n\n\ndef max_sub_array_sum_repeated3(array: list, k: int, m: int):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n    temp = 0\n    for i in array:\n        temp += i\n        if temp < 0:\n            temp = 0\n        result = max(temp, result)\n    return result\n\n\ndef max_sub_array_sum_repeated4(array: list, k: int, m: int):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    array = array * m\n    return max(reduce(lambda x, y: x if x > y else y, array, 0), 0)\n\n\ndef max_sub_array_sum_repeated5(array: list, k: int, m: int):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    array = array * m\n    return max(reduce(lambda x, y: x", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\nfrom functools import reduce\n\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    if n < k:\n        return 0\n    if k == 1:\n        return max(arr)\n    # return reduce(lambda x, y: max(x, y), arr)\n    # return max(map(sum, zip(arr, arr[1:])))\n\n    # this solution is faster than the above one\n    return max(max_sub_array_sum_repeated(arr[:n], k - 1, n - 1), max_sub_array_sum_repeated(arr[1:], k - 1, n - 1))\n\n\ndef main():\n    print(max_sub_array_sum_repeated([-2, 5, -1, 4, -1, 20], 2, 6))\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(nums, k, m):\n    # Write your code here.\n    # create an empty list\n    # append the original array k times\n    # return the largest sum of the sub array in the modified array\n    pass", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, n, k):\n    # initialize the ans to the first element\n    ans = arr[0]\n\n    # initialize the current sum to the first element\n    current_sum = arr[0]\n\n    # iterate till the nth element\n    for i in range(1, n):\n        # if the number of iterations is odd\n        # we will be adding the next element to the current sum\n        if i % 2 == 1:\n            # if current sum becomes negative\n            if current_sum < 0:\n                # update current sum\n                current_sum = arr[i]\n            else:\n                # update current sum to max of current sum and current element\n                current_sum = max(current_sum + arr[i], arr[i])\n\n        # if the number of iterations is even\n        # we will be adding the next element to the ans\n        else:\n            # update ans to max of ans and current sum\n            ans = max(ans, current_sum)\n            # update current sum\n            current_sum = arr[i]\n\n    # we will be adding the last element to the ans if the number of iterations\n    # is odd\n    if k % 2 == 1:\n        ans = max(ans, current_sum)\n\n    return ans\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    # your code here\n    largest_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            new_arr = arr*k\n            sub_arr = new_arr[i:j+1]\n            # print(new_arr)\n            # print(sub_arr)\n            if max(sub_arr) > largest_sum:\n                largest_sum = max(sub_arr)\n    return largest_sum", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nimport pytest\n\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    :param arr: given array of numbers\n    :param k: number of times to repeat the array\n    :param n: length of the array\n    :return: largest sum of sub array\n    \"\"\"\n    arr_k = arr * k\n    sum_array = [sum(arr_k[:i + 1]) for i in range(n)]\n    max_sum = sum_array[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, sum_array[i] + max_sum)\n    return max_sum\n\n\n@pytest.mark.parametrize(\n    \"arr, k, n, expected\",\n    [\n        ([10, 20, -30, -1], 4, 3, 30),\n        ([2, 2, 2, 2], 2, 4, 8),\n        ([2, 2, 2, 2], 3, 4, 12),\n        ([2, 2, 2, 2], 4, 4, 16),\n        ([2, 2, 2, 2], 5, 4, 20),\n        ([1, 1, 1, 1], 1, 4, 4),\n        ([1, 1, 1, 1], 2, 4, 6),\n        ([1, 1, 1, 1], 3, 4, 8),\n        ([1, 1, 1, 1], 4, 4, 10),\n        ([1, 1, 1, 1], 5, 4, 12),\n        ([2, 2, 2, 2], 1, 4, 2),\n        ([2, 2, 2, 2], 2, 4, 4),\n        ([2, 2", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sum = 0\n    min_sum = 0\n    ans = 0\n    for i in range(n):\n        for j in range(i, n, k):\n            sum = 0\n            for s in range(j - i + 1):\n                sum += arr[s]\n            max_sum = max(max_sum, sum)\n            min_sum = min(min_sum, sum)\n            ans = max(ans, sum - max_sum)\n    return max(ans, max_sum - min_sum)\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    return sum(i**2 for i in range(n))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\nfrom typing import List\n\ndef square_Sum(n: int) -> int:\n    # write your code here\n    return (n * (n + 1)) * (2 * n + 1) // 6\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(0, n, 2):\n        sum += i**2\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n % 2 == 1:\n        return square_Sum(n - 1)\n    elif n % 2 == 0:\n        return square_Sum(n - 1) + n * n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    \"\"\"\n    >>> square_Sum(2)\n    20\n    >>> square_Sum(10)\n    2500\n    \"\"\"\n    return sum([i**2 for i in range(0, n*2, 2)])\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_sum(n):\n    return sum([i**2 for i in range(0,n,2)])\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    result = 0\n    for i in range(n):\n        result += i ** 2\n    return result\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i * i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    return (n**2) * ((n+1)**2) // 4\n\ndef main():\n    assert square_Sum(2) == 20\n    assert square_Sum(3) == 25\n    assert square_Sum(10) == 1100\n    assert square_Sum(100) == 102025\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n  return sum([i*i for i in range(1,n*2,2)])\n\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\nimport numpy as np\nfrom functools import reduce\nfrom math import gcd\n\ndef modular_inverse(array, p, q=None):\n    if q is None:\n        q = p\n    d = reduce(gcd, array)\n    return [int((i * q) // d) for i in array]\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, N):\n    for i in range(N):\n        if arr[i] == i and (arr[i] % p) == 0:\n            return i\n\n# Tests", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom math import gcd\nfrom collections import Counter\n\n\ndef modular_inverse(arr, p, m):\n    g = gcd(p, m)\n    return (arr[i] * pow(arr[j], -1, p)) % p if gcd(arr[i], p) == 1 else 0", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, q):\n    for i in range(len(arr)):\n        arr[i] = pow(arr[i], q, p)\n        if arr[i] == i:\n            return i\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom math import gcd\n\n\ndef modular_inverse(arr: list, p: int, mod: int = 10**9+7) -> int:\n    \"\"\"\n    Finds the element in the array having modular inverse with prime number `p` equal to itself.\n    If no such element exists, it returns -1.\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    res = [arr[0] % p]\n    for i in range(1, len(arr)):\n        res.append((arr[i]*res[-1] - res[-2]) % p)\n    if res[-1] == 0:\n        return -1\n    for i in range(len(arr)):\n        res[i] = (res[i]*mod - res[-1]) % p\n    return res[-1]\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(array, p, n):\n    \"\"\"\n    O(n) time | O(n) space\n    \"\"\"\n    elements = set(array)\n    inverses = {}\n    for element in elements:\n        inverses[element] = pow(element, n - 2, p)\n    return len([ element for element in array if inverses[element] == element ])", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(nums, p, mod):\n    \"\"\"\n    :type nums: List[int]\n    :type p: int\n    :type mod: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    if nums[-1] % p == 0:\n        return p - 1\n    return 1", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom typing import List\n\n\ndef modular_inverse(arr: List[int], p: int, mod: int) -> int:\n    # * To find modular inverse, first of all we need to reduce the range of the array into a cycle, say\n    # * n. Then we can find the modular inverse of any number in the range of [0, n) in a cycle.\n    # * Let's consider 10. Here, it will be equal to 3, 7, 1, 9, 5, 3, 7, 1, 9, 5, ....\n    # * So, we have to find this cycle and find its length.\n    # * To find its length, we can start with 1 and subtract 1 from it until it becomes -1.\n    # * So, it will be 1, -1, 2, -2, 3, -3, 4, -4, 5, ....\n    # * Now, it becomes 5, 9, 1, 5, 9, 1, 5, ....\n    # * We can notice that it is a cycle of length 2.\n    # * So, we can write this equation:\n    # * for i in range(n):\n    # *     gcd = x[i] * x[i+1] % p\n    # *     x[i+1] = x[i] * (p - 2) // gcd % p\n    # * return x[0]\n    # *\n    # * See the following resources for more info:\n    # * https://www.geeksforgeeks.org/find-the-inverse-of-a-number-under-modulo-m-using-extended-euclidean-algorithm/\n    # * https://www.geeksforgeeks.org/find-the-inverse-of-a-number-in-modulo-m-using-extended-euclidean-algorithm/\n    # * https://www.geeksforgeeks.org/find-the-inverse-of-a-number-in-modulo-m/\n    # * https://www.", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(A, p, inverse_of_p):\n    arr = []\n    for i in range(len(A)):\n        if inverse_of_p == modular_pow(A[i], p-2, p):\n            arr.append(A[i])\n    return arr\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom __future__ import print_function\n\nimport math\n\n\ndef modular_inverse(arr, p, n):\n    \"\"\"\n    Time Complexity: O(NlogP)\n    Space Complexity: O(N)\n    \"\"\"\n    if arr is None:\n        return None\n\n    # if P is not prime\n    if not is_prime(p, n):\n        return None\n\n    ans = 1\n\n    # make the ans be P^k\n    for elem in arr:\n        ans *= elem\n\n    # ans should be a number less than N\n    while ans > n:\n        ans %= n\n\n    # inverse of 0 is 0\n    if ans == 0:\n        return None\n\n    # Make ans to be 1\n    for elem in arr:\n        ans *= math.pow(elem, p - 2, p)\n\n    return ans\n\n\ndef is_prime(p, n):\n    \"\"\"\n    Checks whether p is a prime number or not\n\n    Time Complexity: O(sqrt(N))\n    Space Complexity: O(1)\n    \"\"\"\n    # calculate largest prime less than sqrt(N)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if not n % i:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\nimport calendar\n\n\ndef odd_Days(year):\n    \"\"\"\n    Calculate the number of odd days in the year\n    :param year: an integer representing the year\n    :return: an integer representing the number of odd days in the year\n    \"\"\"\n    cal = calendar.Calendar(year=year)\n    return len(cal.itermonthdays2(year, 1)) % 2\n\n\ndef main():\n    print(odd_Days(2018))\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return len([i for i in range(1, year+1) if i % 2 != 0])\n    ", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    count = 0\n    for month in range(1,13):\n        if month == 2:\n            if year%400 == 0:\n                count += 29\n            elif year%4 == 0:\n                count += 28\n            else:\n                count += 29\n        else:\n            if month == 4 or month == 6 or month == 9 or month == 11:\n                count += 30\n            else:\n                count += 31\n    return count\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return sum(int(i) % 2 == 1 for i in str(year))\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return len( [d for d in range(1,32) if ((d+1) % 2) == 1] )\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    #loop through the year\n    for day in range(1,366):\n        if day%2 == 1:\n            #increment the odd counter by one\n            odd_counter += 1\n    return odd_counter\n\n\n#unit testing\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    count = 0\n    for i in range(1, year+1):\n        if i % 2 != 0:\n            count += 1\n    return count\n\n#assert odd_Days(100) == 5", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(n):\n    return 365 - 2*n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n\tresult = 0\n\tfor i in range(1, 366):\n\t\tif i % 2 != 0:\n\t\t\tresult += 1\n\treturn result\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_days(y):\n    return sum([1 for i in range(1, 32) if i % 2 == 1])\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    \"\"\"Returns a list of lists with maximum length from a list of lists\"\"\"\n    max = 0\n    # Write your code below\n    return None", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom collections import Counter\n\ndef max_length(arr):\n    max_len = max(len(arr[i]) for i in range(len(arr)))\n    max_index = [i for i in range(len(arr)) if len(arr[i]) == max_len]\n    return (max_len, max_index)", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(input):\n    max_length = 0\n    for sublist in input:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            sublist_max = sublist\n    return max_length, sublist_max\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(input_list):\n    max_len = 0\n    final_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            final_list = [i]\n        elif len(i) == max_len:\n            final_list.append(i)\n\n    return (max_len, final_list)\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(nums):\n    max_len = 0\n    res = []\n\n    for i in range(len(nums)):\n        temp = []\n        for j in range(len(nums[i])):\n            if j == 0:\n                temp.append(nums[i][j])\n            elif nums[i][j] == nums[i][j-1]:\n                continue\n            elif nums[i][j] > nums[i][j-1]:\n                temp.append(nums[i][j])\n            else:\n                break\n        if len(temp) > max_len:\n            max_len = len(temp)\n            res = [nums[i]]\n        elif len(temp) == max_len:\n            res.append(nums[i])\n    return max_len, res\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(array):\n    return None\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom collections import deque\n\ndef max_length(lists):\n\n    length = deque()\n    length.append(0)\n    for sublist in lists:\n        if sublist:\n            length.append(1)\n        else:\n            length.append(0)\n\n    max_len = max(length)\n    max_lists = []\n\n    while length and len(length) > 1:\n        length.popleft()\n        length.append(0)\n        if length[0] != 0:\n            max_lists.append(lists[length.index(1)])\n\n    return max_len, max_lists\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    max_length = 0\n    longest = []\n    for sub in lists:\n        sub_len = len(sub)\n        if max_length < sub_len:\n            max_length = sub_len\n            longest = sub\n    return max_length, longest\n\n\ndef test_max_length():\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15]]) == (2, [9, 11])\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25, 27, 29]]) == (5, [19, 21, 23, 25, 27, 29])\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [19, 21, 23, 25, 27, 29]]) == (5, [19, 21, 23, 25, 27, 29])\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom typing import List\n\ndef max_length(list_of_lists: List[List]) -> List:\n    \"\"\"\n    :param list_of_lists: a list of lists\n    :return: a list of lists with max length\n    \"\"\"\n    max_len = 0\n    max_list = None\n    for i in list_of_lists:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(L):\n    return max([(len(item), item) for item in L])\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 0 or n == 1:\n        return 1\n    dp = [[[0 for i in range(k)] for j in range(n+1)] for i in range(n+1)]\n    dp[0][0][0] = 1\n    dp[1][0][0] = 1\n    for i in range(n+1):\n        dp[i][i][0] = 1\n\n    for i in range(2, n+1):\n        for j in range(1, i+1):\n            for l in range(1, k+1):\n                dp[i][j][l] = dp[i-1][j-1][l-1] + dp[i-1][j-1][l]\n    return dp[n][n][k]\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\nfrom collections import defaultdict\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    Return the number of ways to paint the fence such that at most 2 adjacent posts have the same color\n\n    :param n: number of posts in the fence\n    :param k: number of colors available\n    :return: number of ways to paint the fence\n    \"\"\"\n    # memo = defaultdict(int)\n    memo = {}\n\n    def count(n, k):\n        if (n, k) in memo:\n            return memo[(n, k)]\n\n        if k == 1:\n            return 1\n\n        if n < 2:\n            return 0\n\n        count_no_of_ways = 0\n        for i in range(1, k):\n            if i > 1:\n                count_no_of_ways += count(n - 2, k - 1)\n            count_no_of_ways += count(n - 1, k - 1)\n\n        memo[(n, k)] = count_no_of_ways\n        return count_no_of_ways\n\n    return count(n, k)\n\ndef count_no_of_ways2(n, k):\n    \"\"\"\n    Optimized version of count_no_of_ways()\n\n    :param n: number of posts in the fence\n    :param k: number of colors available\n    :return: number of ways to paint the fence\n    \"\"\"\n    memo = {}\n\n    def count(n, k):\n        if (n, k) in memo:\n            return memo[(n, k)]\n\n        if k == 1:\n            return 1\n\n        if n < 2:\n            return 0\n\n        count_no_of_ways = 0\n        if n - 2 >= 1:\n            count_no_of_ways += count(n - 2, k - 1)\n        count_no_of_ways += count(n - 1, k - 1)\n\n        memo[(n, k)] = count_no_of_ways\n        return count_no_of_ways\n\n   ", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    # TODO: Write your code here\n    ans = 0\n    if n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        ans = k*count_no_of_ways(n-1, k)\n        ans += count_no_of_ways(n-2, k)\n        return ans\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\n# This solution is inspired from this solution to the same problem in Leetcode\n# https://leetcode.com/problems/paint-fence/solution/\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * (k - 1) // 2\n    elif n == 3:\n        return k * (k - 1) * (k - 2) // 6\n    else:\n        return (\n            k\n            * (k - 1)\n            * (k - 2)\n            * (k - 3)\n            // 24\n            + count_no_of_ways(n - 2, k)\n            * count_no_of_ways(2, k)\n            * (k - 1)\n            * 2\n        )\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if k == 1:\n        return 2 ** (n - 1)\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return k\n    \n    return count_no_of_ways(n-2, k) * (k-1) + count_no_of_ways(n-1, k)\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    def recurse(n, k, p, total):\n        if n == 0:\n            return 1\n        if p > n:\n            return 0\n        ans = 0\n        for c in range(k):\n            if (c == p - 1) or (c == p) or (c == p + 1):\n                continue\n            ans += recurse(n - 1, k, c, total + 1)\n        return ans\n\n    return recurse(n, k, -1, 0)\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nfrom collections import defaultdict\n\n\ndef count_no_of_ways(n, k):\n    dp = defaultdict(lambda: 0)\n    for i in range(n):\n        dp[i + 1] = dp[i] + k\n    for i in range(n - 1, 1, -1):\n        dp[i - 1] += dp[i]\n        if i >= 2:\n            dp[i - 2] += (k * (k - 1)) * dp[i]\n    return dp[0]\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nimport math\n\n\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if k == 1:\n        return n\n    if n == 2:\n        return k * (k - 1) // 2\n    else:\n        return count_no_of_ways(n - 1, k) * (k - 1) + (n - 1) * count_no_of_ways(n - 2, k - 1)\n\n\ndef test_count_no_of_ways():\n    assert count_no_of_ways(2, 4) == 16\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k*(k-1)*k//6\n    return count_no_of_ways(n-1, k) + (k-1) * count_no_of_ways(n-2, k)\n\ndef count_no_of_ways_2(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k*(k-1)*k//6\n    prev_memo = [None]*(n+1)\n    memo = [None]*(n+1)\n\n    def count(n, k, prev):\n        if prev_memo[n] != None:\n            return prev_memo[n]\n\n        if n == 1:\n            if prev == 0:\n                return 1\n            else:\n                return k\n\n        if n == 2:\n            if prev == 0 or prev == 1:\n                return k\n            else:\n                return 0\n\n        if n == 3:\n            if prev == 0 or prev == 1 or prev == 2:\n                return k*(k-1)*k//6\n            else:\n                return 0\n\n        memo[n] = count(n-1, k, prev) + (k-1)*count(n-2, k, 1 if prev == 0 else 0)\n        return memo[n]\n\n    return count(n, k, 0)\n\ndef count_no_of_ways_3(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k*(k-1)*k//6\n    prev_memo = [None]*(n+1)\n    memo = [None]*(n+1)\n\n    def count(n, k, prev):\n        if prev_memo[", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    Time complexity: O(n*k^2)\n    \"\"\"\n    # we want to paint posts with at most two colors\n    if n < 2:\n        return 1\n    # memoization\n    # [[0 for _ in range(n)] for _ in range(n)]\n    # memo[i][j] = count of ways to paint i posts with at most two colors\n    # memo[i][j] = memo[i - 1][j] + memo[i - 1][j - 1]\n    # memo[0][0] = 1\n    # memo[0][1] = 0\n    # memo[0][2] = 0\n    # memo[1][0] = 1\n    # memo[1][1] = 1\n    # memo[1][2] = 0\n    # memo[2][0] = 1\n    # memo[2][1] = 2\n    # memo[2][2] = 2\n    memo = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        memo[i][i] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            memo[i][j] = memo[i-1][j] + memo[i-1][j-1]\n    return memo[n][2]\n\ndef count_no_of_ways_memo(n, k):\n    memo = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(1, n+1):\n        memo[i][i] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            memo[i][j] = memo[i-1][j] + memo[i-1][j-1]\n    return memo[n][2]"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\n# def find(a,b):\n#     return a/b\n#\n#\n# def test_cases():\n#     assert find(10,3) == 3\n#     assert find(4,2) == 2\n#\n#\n# test_cases()\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(x,y):\n    return x / y\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num, den):\n    return num//den\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n\tquotient = a / b\n\treturn quotient\n\ndef test_find():\n\tassert find(10,3) == 3\n\tassert find(100,20) == 5\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(num,div):\n\treturn num / div\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(x,y):\n\treturn x/y\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(x, y):\n    return x // y\n\ndef find_2(x, y):\n    while y:\n        x, y = x-y, y\n    return x\n\ndef find_3(x, y):\n    return x % y\n\ndef find_4(x, y):\n    while y:\n        x, y = x-y, x\n    return x\n\ndef find_5(x, y):\n    while x >= y:\n        x = x-y\n    return x\n\ndef find_6(x, y):\n    return x-y\n\ndef find_7(x, y):\n    if x < y:\n        y = x-y\n    return x\n\ndef find_8(x, y):\n    while x and y:\n        x, y = x-y, x\n    return x", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a, b):\n    return a//b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1,num2):\n    return num1/num2\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(x,y):\n    q = x//y\n    r = x%y\n    return q\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a, b):\n    return (a**2 + b**2) ** 0.5", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    #side C must be the hypotenuse of a right triangle\n    c = sqrt(a**2+b**2)\n    #the other side is the perpendicular bisector of C\n    return c/(sqrt(2))\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return math.sqrt(a**2 + b**2)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return ((a*a)+ (b*b))**0.5 - a\n\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(s1,s2):\n    c = np.sqrt(s1**2 + s2**2)\n    a = np.sqrt(s1**2 + c**2)\n    b = np.sqrt(s2**2 + c**2)\n    return np.sqrt(b**2 + a**2 - c**2)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    return sqrt(pow(a, 2) + pow(b, 2)) - a\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\ndef otherside_rightangle(a, b):\n    if a + b < 5:\n        return 0\n    else:\n        return math.sqrt((a * a) + (b * b)) - a - b", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n# <function> <arguments>\ndef otherside_rightangle(a, b):\n  c = (a**2 + b**2)**(0.5)\n  return c\n\n# tests", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    x = (b**2) - (a**2)\n    return x ** .5\n\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    c=((a**2+b**2)**0.5)\n    return c-a-b\n\n#assert otherside_rightangle(7,8)==10.63014581273465\n\n#assert otherside_rightangle(10,9)==13.16227766016838\n\n#assert otherside_rightangle(10,10)==14.142135623730951\n\n#assert otherside_rightangle(10,11)==15.410958994842534\n\n#assert otherside_rightangle(11,10)==15.410958994842534\n\n#assert otherside_rightangle(11,11)==16.881917989685068\n\n#assert otherside_rightangle(11,12)==18.489292607280063\n\n#assert otherside_rightangle(12,11)==18.489292607280063\n\n#assert otherside_rightangle(12,12)==20.282743338922796"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(my_list):\n    result = my_list[0]\n    for element in my_list:\n        if element > result:\n            result = element\n    return result\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(list_of_items):\n    if type(list_of_items[0]) == str:\n        return max(list_of_items)\n    elif type(list_of_items[0]) == int or float:\n        return max(list_of_items, key=int)\n    else:\n        raise TypeError('Items in list must be of the same type')\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    # Your code goes here\n    max_ = None\n    for i in lst:\n        if isinstance(i, str):\n            if max_ is None or i.upper() > max_.upper():\n                max_ = i\n        elif isinstance(i, int):\n            if max_ is None or i > max_:\n                max_ = i\n        else:\n            if max_ is None or i > max_:\n                max_ = i\n    return max_\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    lst = list(lst)\n    maximum = lst[0]\n    for i in lst:\n        if maximum < i:\n            maximum = i\n    return maximum\n\n# test", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(list_val):\n    list_val.sort()\n    return list_val[len(list_val)-1]\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n  max_val = -1\n\n  for val in lst:\n    if type(val) is not str:\n      max_val = max(max_val, val)\n\n  return max_val\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list):\n    return max(list)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    largest = -1\n    for i in lst:\n        if type(i) == int:\n            if i > largest:\n                largest = i\n        elif type(i) == str:\n            if len(i) > len(largest):\n                largest = i\n        else:\n            pass\n    return largest", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\nfrom typing import Any, Dict, List\nimport operator\n\n\ndef max_val(data: List[Any]) -> Any:\n    \"\"\"Return the maximum value in a given heterogeneous list.\"\"\"\n    max_val: Dict[str, Any] = {\"data\": None, \"type\": str}\n    for val in data:\n        if max_val[\"data\"] is None:\n            max_val[\"data\"] = val\n            max_val[\"type\"] = type(val)\n        elif max_val[\"data\"] < val:\n            max_val[\"data\"] = val\n            max_val[\"type\"] = type(val)\n    return max_val[\"data\"]\n\n\ndef max_val_better(data: List[Any]) -> Any:\n    \"\"\"Return the maximum value in a given heterogeneous list.\"\"\"\n    max_val: Dict[str, Any] = {\"data\": None, \"type\": str}\n    for val in data:\n        if max_val[\"data\"] is None:\n            max_val[\"data\"] = val\n            max_val[\"type\"] = type(val)\n        elif operator.gt(max_val[\"data\"], val):\n            max_val[\"data\"] = val\n            max_val[\"type\"] = type(val)\n    return max_val[\"data\"]\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(heterogeneous_list):\n    if len(heterogeneous_list) == 1:\n        return heterogeneous_list[0]\n    else:\n        try:\n            if heterogeneous_list[0] > max_val(heterogeneous_list[1:]):\n                return heterogeneous_list[0]\n            else:\n                return max_val(heterogeneous_list[1:])\n        except TypeError:\n            return heterogeneous_list[0]\n\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(x):\n    # your code here\n    divisors = []\n    for i in range(1, x+1):\n        if x%i == 0:\n            divisors.append(i)\n    return sum(divisors)\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    return sum([i for i in range(1,n+1) if n%i==0])\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\n# Naive Solution\ndef sum_div(num):\n\tdivs = []\n\ti = 1\n\twhile(num):\n\t\tif num%i == 0:\n\t\t\tnum /= i\n\t\t\tdivs.append(i)\n\t\telse:\n\t\t\ti += 1\n\treturn sum(divs)\n\n# Dynamic programming solution\ndef sum_div(num):\n\tdivs = []\n\tdp = [0 for i in range(num+1)]\n\ti = 1\n\twhile(num):\n\t\tif num%i == 0:\n\t\t\tnum /= i\n\t\t\tdivs.append(i)\n\t\t\tdp[i] = dp[i-1] + 1\n\t\telse:\n\t\t\ti += 1\n\treturn sum(divs)\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    res = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            res += i\n    return res", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    divisors = 1\n    for i in range(1, int(n**(1/2))+1):\n        if n % i == 0:\n            divisors += i\n            if i != int(n**(1/2)):\n                divisors += int(n**(1/2))\n    return divisors\n\n#print(sum_div(8))", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    sum_ = 1\n    for i in range(1, n):\n        if n%i == 0:\n            sum_ += i\n    return sum_\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    result = 1\n    for i in range(1,n+1):\n        if n%i==0:\n            result = result + i\n    return result\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    return sum(i for i in range(1, n+1) if n%i == 0)\n\n# print(sum_div(8))\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum = 1\n    for x in range(1,n):\n        if n%x==0:\n            sum = sum + x\n    return sum\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    return sum(i for i in range(1, n) if n % i == 0)\n\ndef test_sum_div():\n    assert sum_div(8)==7"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    inv_count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inv_count+=1\n    return inv_count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr, n):\n    if n == 0 or n == 1:\n        return 0\n    inv_count = 0\n    for i in range(n):\n        inv_count += get_Inv_Count(arr,i)\n        inv_count += get_Inv_Count(arr, n - i - 1)\n        inv_count += compare(arr[i], arr[n - i - 1])\n    return inv_count\n\ndef compare(a, b):\n    if a > b:\n        return 1\n    elif a == b:\n        return 0\n    else:\n        return -1\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(nums,n):\n    x = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if nums[i]>nums[j]:\n                x+=1\n    return x\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, size):\n    inv_cnt = 0\n    for i in range(size):\n        for j in range(i+1,size):\n            if arr[i] > arr[j]:\n                inv_cnt += 1\n    return inv_cnt\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(nums, n):\n    nums.sort()\n    inv = 0\n    for i in range(1,len(nums)):\n        if nums[i] < nums[i-1]:\n            inv += 1\n    return inv\n\ndef test_case(expected, actual):\n    assert expected == actual, 'Expected %s, actual %s' % (expected, actual)\n\ndef test_get_Inv_Count():\n    test_case(5, get_Inv_Count([1,20,6,4,5],5))\n    test_case(0, get_Inv_Count([1,2,3,4,5],5))\n    test_case(0, get_Inv_Count([1,2,3,4,5],4))\n    test_case(0, get_Inv_Count([1,2,3,4,5],3))\n    test_case(0, get_Inv_Count([1,2,3,4,5],2))\n    test_case(0, get_Inv_Count([1,2,3,4,5],1))\n    test_case(0, get_Inv_Count([1,2,3,4,5],0))\n    test_case(0, get_Inv_Count([],0))\n    test_case(0, get_Inv_Count([],1))\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\n# Uncomment the line below if it is required\n#arr = [1,20,6,4,5]\n#n = 5\n\ndef get_Inv_Count(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i]>arr[j]:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    Inv_Count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                Inv_Count += 1\n    return Inv_Count\n\n# OR\ndef get_Inv_Count(arr,n):\n    Inv_Count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                Inv_Count += 1\n    return Inv_Count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    inversions = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inversions += 1\n    return inversions\n\ndef get_Inv_Count_optimized(arr,n):\n    inversions = 0\n    for i in range(n-1):\n        inversions += (n-i-1) * arr[i]\n    return inversions\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inv_count+=1\n    return inv_count\n\n\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    return [item for sublist in lst for item in sublist]\n\n\ndef flatten_list_recursive(lst):\n    if not isinstance(lst, list):\n        return [lst]\n    return flatten_list_recursive(lst[0]) + flatten_list_recursive(lst[1:])\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    new_list = []\n    for elem in nested_list:\n        if isinstance(elem, list):\n            new_list += flatten_list(elem)\n        else:\n            new_list.append(elem)\n    return new_list\n\ndef flatten_list_rec(nested_list):\n    if not nested_list:\n        return []\n    elif isinstance(nested_list[0], list):\n        return flatten_list(nested_list[0]) + flatten_list_rec(nested_list[1:])\n    else:\n        return [nested_list[0]] + flatten_list_rec(nested_list[1:])\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(input_list):\n    flattened_list = []\n    for element in input_list:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n# Recursive way\ndef flatten_list(lst):\n    if not isinstance(lst, list):\n        return [lst]\n    return flatten_list(lst[0]) + flatten_list(lst[1:])\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    if type(lst) == int or type(lst) == float:\n        return [lst]\n    else:\n        return sum(flatten_list(i) for i in lst)\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n\tresult = []\n\tdef flatten(lst):\n\t\tfor item in lst:\n\t\t\tif isinstance(item, list):\n\t\t\t\tflatten(item)\n\t\t\telse:\n\t\t\t\tresult.append(item)\n\tflatten(lst)\n\treturn result\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    flat = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flat.extend(flatten_list(elem))\n        else:\n            flat.append(elem)\n    return flat", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    flat_list = []\n    for element in lst:\n        if isinstance(element, list):\n            flat_list = flat_list + flatten_list(element)\n        else:\n            flat_list.append(element)\n    return flat_list\n\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            for subelement in element:\n                flat_list.append(subelement)\n        else:\n            flat_list.append(element)\n    return flat_list", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(list):\n    flattened = []\n    for i in list:\n        if isinstance(i, list):\n            flattened += flatten_list(i)\n        else:\n            flattened.append(i)\n    return flattened\n\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(L1, L2):\n    return [l for l in L1 if l in L2]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(lst1, lst2):\n    lst_intersection = []\n    for i in range(0,len(lst1)):\n        if lst1[i] in lst2:\n            lst_intersection.append(lst1[i])\n    return lst_intersection\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list_1,list_2):\n    return [x for x in list_1 if x in list_2]\n\n# assert intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(L1, L2):\n    result = []\n    for i in L1:\n        for j in L2:\n            if i in j:\n                result.append(i)\n                break\n    return result", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(lst1,lst2):\n    res=[]\n    for i in lst1:\n        for j in lst2:\n            if i==j:\n                res.append(i)\n    return res\n\nlst1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nlst2=[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(l1, l2):\n    l1_set = set(l1)\n    l2_set = set(l2)\n    return [l1_set.intersection(l2_set)]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1,list2):\n    res = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1 in item2:\n                res.append(item1)\n    return res\n\n\n#assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    pass\n\n#assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(input_list):\n    list_of_tuples = []\n    for student in input_list:\n        list_of_tuples.append(tuple(student))\n    list_of_tuples = sorted(list_of_tuples,key=lambda x: x[1], reverse=True)\n    return list_of_tuples[0]\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(list):\n    dict=collections.defaultdict(int)\n    for name,score in list:\n        dict[name]+=score\n    max_tuple=max(dict.items(),key=lambda x:x[1])\n    return max_tuple\n    ", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(marks):\n    marks_list = sorted(marks, key=lambda x: x[1], reverse=True)\n    s1 = set()\n    for i in marks_list:\n        if i[0] not in s1:\n            s1.add(i[0])\n    s2 = set()\n    for i in marks_list:\n        s2.add((i[1], i[0]))\n    s2 = sorted(s2, reverse=True)\n    max_tup = s2[0]\n    return max_tup[1], max_tup[0]\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    highest_total = 0\n    winner = \"\"\n    for i in tuples:\n        if i[1] > highest_total:\n            highest_total = i[1]\n            winner = i[0]\n    return winner,highest_total\n\n#test", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(grades):\n    # Create a dictionary to store grades\n    grades_dict = {}\n    for i in grades:\n        if i[0] in grades_dict:\n            grades_dict[i[0]] += i[1]\n        else:\n            grades_dict[i[0]] = i[1]\n    # Sort grades_dict by value\n    grades_dict = sorted(grades_dict.items(), key=lambda x:x[1], reverse=True)\n    # Return the first element of the sorted dictionary\n    return grades_dict[0]\n\n# Tests", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(scores):\n    name = scores[0][0]\n    score = scores[0][1]\n    for i in range(1, len(scores)):\n        if scores[i][1] > score:\n            name = scores[i][0]\n            score = scores[i][1]\n    return name, score", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(list):\n    current_max = 0\n    for name,grade in list:\n        if grade > current_max:\n            current_max = grade\n    return current_max\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    pass\n\n# test case", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(list_of_tuples):\n    name_aggregate = {}\n    for name, aggregate in list_of_tuples:\n        if name not in name_aggregate:\n            name_aggregate[name] = aggregate\n        else:\n            name_aggregate[name] += aggregate\n    return max(name_aggregate.items(), key=lambda x: x[1])\n\n#assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n  aggregate = {}\n  for name, score in tuples:\n    if name not in aggregate:\n      aggregate[name] = score\n    else:\n      aggregate[name] += score\n  return max(aggregate, key = aggregate.get)"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    \"\"\"\n    >>> count_binary_seq(0)\n    1\n    >>> count_binary_seq(1)\n    2\n    >>> count_binary_seq(2)\n    3\n    >>> count_binary_seq(3)\n    5\n    >>> count_binary_seq(4)\n    10\n    >>> count_binary_seq(5)\n    20\n    >>> count_binary_seq(6)\n    40\n    >>> count_binary_seq(7)\n    80\n    >>> count_binary_seq(8)\n    160\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return count_binary_seq(n-1)*2 + count_binary_seq(n-2)\n\ndef test_count_binary_seq():\n    for i in range(1, 10):\n        assert count_binary_seq(i) == math.factorial(2*i)\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nimport math\n\n\ndef count_binary_seq(n):\n    return 2 ** n\n\n\ndef count_binary_seq_efficient(n):\n    return int(math.pow(2, n))", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    \"\"\"\n    :param n: The length of binary sequence.\n    :return: the count of binary sequences.\n    \"\"\"\n    res = 0\n    for i in range(1, 2**n + 1):\n        cur_res = 0\n        for j in range(1, n + 1):\n            cur_res += (i >> (n - j + 1) & 1)\n        if cur_res == cur_res >> 1:\n            res += 1\n    return res", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n == 1:\n        return 2.0\n    return 2*count_binary_seq(n-1)\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\nimport unittest\n\n\ndef count_binary_seq(n):\n    \"\"\"\n    Count the number of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    return (1 << n) - (1 << (n // 2))\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    return 2.0 ** (2 * n)\n\n#The Time Complexity is O(2^n)\n#The Space Complexity is O(1)", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    ans = 0.0\n    for i in range(n+1):\n        ans += 1.0\n    return ans\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n == 0:\n        return 2.0\n    if n == 1:\n        return 2.0\n    res = 0.0\n    for i in xrange(1, n+1):\n        res += count_binary_seq(n-i)\n    return res\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    binary = bin(2 ** n - 1)[2:]\n    result = 0\n    for i in range(1, len(binary) + 1):\n        result += int(binary, 2) / 2.0 ** i\n    return result\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    \"\"\"\n    :type n: int\n    :rtype: float\n    \"\"\"\n    # return 2 ** n\n    return (1 + 2 ** n) / 2\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if len(d.keys()) == 0:\n        return 0\n    return 1 + max([dict_depth(v) for v in d.values()])\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n\t\"\"\"\n\t\td : dict\n\t\"\"\"\n\tif not isinstance(d, dict):\n\t\traise ValueError(\"not a dict\")\n\treturn 1 + max([dict_depth(v) for v in d.values()])\n\n\n# def dict_depth(d):\n# \tif isinstance(d, dict):\n# \t\treturn 1 + max([dict_depth(v) for v in d.values()])\n# \telse:\n# \t\treturn 0\n\n\n# def dict_depth(d, depth=0):\n# \tif isinstance(d, dict):\n# \t\treturn 1 + max([dict_depth(v, depth+1) for v in d.values()])\n# \telse:\n# \t\treturn depth\n\n\n# def dict_depth(d):\n# \tif isinstance(d, dict):\n# \t\tdepth = 0\n# \t\tfor v in d.values():\n# \t\t\tdepth = max(depth, dict_depth(v))\n# \t\treturn 1 + depth\n# \telse:\n# \t\treturn 0\n\n\n# def dict_depth(d):\n# \tif isinstance(d, dict):\n# \t\treturn max(1 + dict_depth(v) for v in d.values())\n# \telse:\n# \t\treturn 0\n\n\n# def dict_depth(d):\n# \tif isinstance(d, dict):\n# \t\treturn 1 + max([dict_depth(v) for v in d.values()])\n# \telif isinstance(d, list):\n# \t\treturn 1 + max([dict_depth(v) for v in d])\n# \telse:\n# \t\treturn 0\n\n\n# def dict_depth(d):\n# \t\"\"\"\n# \t\td : dict\n# \t\"\"\"\n# \tif isinstance(d, dict):\n# \t\treturn 1 + max([dict_depth(v) for v in d.values()])\n# \telif isinstance(d,", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 1\n    else:\n        return 1 + max(dict_depth(x) for x in d.values())\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(some_dict):\n  \"\"\"Return the depth of a dictionary\"\"\"\n  if isinstance(some_dict, dict):\n    if some_dict.values() != []:\n      return 1+max(dict_depth(some_dict[i]) for i in some_dict.keys())\n    else:\n      return 1\n  else:\n    return 0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    return 0 if type(d) != dict else 1 + max(dict_depth(value) for value in d.values())\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dictionary):\n  depth = 0\n  if type(dictionary) == dict:\n    depth = 1 + max([dict_depth(value) for value in dictionary.values()])\n  return depth\n\n\n# test code\nimport unittest\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if isinstance(d, dict):\n        count = 1\n        for val in d.values():\n            if isinstance(val, dict):\n                count += dict_depth(val)\n        return count\n    else:\n        return 0", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\nfrom pprint import pprint\n\n\ndef dict_depth(myDict):\n    if not isinstance(myDict, dict):\n        return 0\n\n    if len(myDict) == 0:\n        return 0\n\n    return 1 + max([dict_depth(v) for v in myDict.values()])\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    depth = 0\n    if type(d) == dict:\n        depth += 1\n        for x in d.values():\n            depth = max(depth, dict_depth(x))\n    return depth\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for v in d.values()])\n    else:\n        return 0\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    res = 0\n    while n & 1 == 0:\n        res += 1\n        n >>= 1\n    return res\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    if n & (n-1) == 0:\n        return -1\n    else:\n        bit = 0\n        while n & 1 == 0:\n            bit += 1\n            n = n >> 1\n        return bit\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    temp = n\n    i = 0\n    while(temp != 0):\n        temp = temp >> 1\n        i += 1\n    return i - 1\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n\tif n == 0:\n\t\treturn -1\n\tbit_num = 0\n\twhile n > 0:\n\t\tbit_num += 1\n\t\tn = n & (n-1)\n\treturn bit_num\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(number):\n    if number == 0:\n        return 0\n    for i in range(0, 32):\n        if (number & (1 << i)) == (1 << i):\n            return i\n    return 0\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(number):\n    \"\"\"\n    Function to find the most significant bit number which is also a set bit.\n    :param number:\n    :return:\n    \"\"\"\n    # Compute the binary representation of the given number.\n    # Bits of a binary number are numbered from the least significant bit (LSB) to the most significant bit (MSB).\n    bin_number = bin(number)[2:]\n    # Set the bit number.\n    # A set bit is a bit that is set to 1, that is, it has a value of 1.\n    # The most significant bit is the leftmost bit in a binary number.\n    # The least significant bit is the rightmost bit in a binary number.\n    bit_number = bin_number.find('1', 0, len(bin_number))\n    return bit_number", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    count = 0\n    while(n):\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    return int.bit_length(n) - 1\n\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    msb = -1\n    while msb < n:\n        if msb == -1:\n            msb = 0\n        msb += 1\n        if (msb & n):\n            return msb\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(x):\n    return bin(x).count('1')\n\ndef test():\n    assert set_Bit_Number(6) == 4\n\ntest()\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr, n):\n    ans1 = 0\n    ans2 = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i]>arr[j]:\n                ans1 +=1\n            elif arr[i]<arr[j]:\n                ans2 +=1\n    return ans1 == ans2\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr, n):\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if arr[i] > arr[j]:\n            return False\n\n        if arr[i] < arr[j]:\n            i += 1\n\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n\n    return True\n\n\n# for testing\n\n# assert solve([1,0,2],3) == True\n# assert solve([1,0,1,2],4) == False\n# assert solve([1,0,1,0,2],5) == True\n# assert solve([0,0,1,0,2,0,1],7) == False\n# assert solve([0,0,1,0,2,0,1,0,2,0,1],10) == True\n# assert solve([0,0,0,0,0,0,0,0,0,0],10) == False\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(a,n):\n\ta.sort()\n\tb=a[::-1]\n\tinv1=inv2=0\n\tfor i in range(n):\n\t\tif a[i]!=b[i]:\n\t\t\tinv1+=1\n\t\tif a[i]!=i:\n\t\t\tinv2+=1\n\tif inv1!=inv2:\n\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    return sum(arr1[i] > arr2[i] for i in range(len(arr1))) == sum(arr1[i] < arr2[i] for i in range(len(arr2)))\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(A, N):\n    if not A:\n        return 0\n    if N == 1:\n        return 1\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] > A[j]:\n                count += 1\n    return count\n\ndef main():\n    print(solve([1,0,2],3))\n    print(solve([3,2,1],3))\n    print(solve([1,2,3],3))\n    print(solve([1,2,3],2))\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef sort(arr):\n    n = len(arr)\n    arr.sort()\n    return arr\n\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n\ndef swap_count(arr, n):\n    i = 0\n    j = n - 1\n    count = 0\n    while i < j:\n        if arr[i] > arr[j]:\n            count = count + j - i\n            swap(arr, i, j)\n        i = i + 1\n        j = j - 1\n    return count\n\n\ndef inversion_count(arr, n):\n    return swap_count(sort(arr), n)\n\ndef solve(arr1, arr2):\n    n = len(arr1)\n    return inversion_count(arr1, n) == inversion_count(arr2, n)", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(a,n):\n    if n<=0:\n        return False\n    inversion_count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if a[i]>a[j]:\n                inversion_count+=1\n    return inversion_count==n*(n-1)//2\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr,n):\n\tcount1 = 0\n\tcount2 = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tcount1 += 1\n\t\t\telif arr[i] < arr[j]:\n\t\t\t\tcount2 += 1\n\tif count1 == count2:\n\t\treturn True\n\telse:\n\t\treturn False\n\narr = [1,2,3,4,5,6,7,8,9,10]", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\nfrom collections import Counter\n\ndef solve(arr1,arr2):\n    return Counter(arr1) == Counter(arr2)\n\n\n# Time Complexity: O(N)\n# Space Complexity: O(1)\n# Difficulty: Easy\n# Tags: Hashmap, Counter, Sort", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr1,n1,arr2,n2):\n    arr1.sort()\n    arr2.sort()\n    x=0\n    y=0\n    count1=0\n    count2=0\n    while x<n1 and y<n2:\n        if arr1[x]<=arr2[y]:\n            x+=1\n        else:\n            y+=1\n            count2+=1\n    return count1==count2\n\n\narr1=[1,0,2]\nn1=len(arr1)\narr2=[2,1,0]\nn2=len(arr2)"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\nfrom collections import defaultdict\n\ndef find_element(l,pairs,index,rotations):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    l.extend(l[:index])\n    pairs = [((pairs[i][0]+rotations)%len(l),pairs[i][1]) for i in range(len(pairs))]\n    #print(l,pairs)\n    d = defaultdict(list)\n    for pair in pairs:\n        d[pair[0]].append(pair[1])\n    #print(d)\n    for i in range(index+len(pairs)):\n        #print(d[i])\n        if d[i]:\n            return d[i][0]\n    return None\n\nl = [1,2,3,4,5]\npairs = [[0,2],[0,3]]\nindex = 2\nrotations = 1\nfind_element(l,pairs,index,rotations)", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\nfrom typing import List, Optional\n\n\ndef find_Element(arr: List[int], rotations: List[List[int]], index: int, r_count: int) -> Optional[int]:\n    if len(rotations) == 0:\n        return arr[index]\n    else:\n        left = rotations[0][0]\n        right = rotations[0][1]\n        if left > index or right < index:\n            return arr[index]\n        elif left <= index <= right:\n            return arr[(index + r_count) % len(arr)]\n        else:\n            return find_Element(arr, rotations[1:], index, r_count + (index - left))\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\nfrom collections import defaultdict\ndef find_element(arr,rotations,index,index_at_end):\n    if len(arr) == 1:\n        return arr[0]\n\n    map_ = defaultdict(list)\n    for i in range(len(arr)):\n        map_[arr[i]].append(i)\n\n    for i in range(len(rotations)):\n        rotations[i].sort()\n\n    # print(map_)\n    # print(rotations)\n    # print(index)\n    # print(index_at_end)\n\n    if index_at_end == 0:\n        return find_element(arr[rotations[index][0]:],rotations,index,1)\n    elif index_at_end == 1:\n        return find_element(arr[rotations[index][0]:rotations[index][1]],rotations,index,1)\n    else:\n        return find_element(arr[rotations[index][0]:rotations[index][1]],rotations,index,0)\n\narr = [1,2,3,4,5]\nrotations = [[0,2],[0,3]]\nindex = 0\nindex_at_end = 0\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\nfrom collections import deque\ndef find_Element(lst,rotations,index,no_of_rotations):\n    q = deque(lst)\n    for i in range(no_of_rotations):\n        q.rotate(-rotations[i][1])\n        q.rotate(rotations[i][0])\n    return q[index]", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_element(list, list_of_rotations, index, rotations):\n    if rotations == 0:\n        return list[index]\n\n    for i in range(len(list_of_rotations)):\n        new_list = list[:]\n        for j in range(len(list_of_rotations[i])):\n            new_list[list_of_rotations[i][j]] = list[list_of_rotations[i][j + 1]]\n        list = new_list\n\n    return list[index]\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,rotations,index,count):\n    if count == 0:\n        return arr[index]\n    #print(arr)\n    for i in rotations:\n        arr.insert(i[0],arr.pop(i[1]))\n        count -= 1\n        if count == 0:\n            return arr[index]\n\n\narr = [1,2,3,4,5]\nrotations = [[0,2],[0,3]]\nindex = 2\ncount = 1\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,rotations,n,i):\n    for j in range(i):\n        arr = rotate_Left(arr,rotations[j])\n    return arr[rotations[i][1]]\n\ndef rotate_Left(arr,rotations):\n    n = len(arr)\n    for i in range(rotations[0]):\n        arr.append(arr.pop(0))\n    return arr\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\nfrom collections import deque\ndef find_Element(arr,mapping,i,rotations):\n    a,b = deque(arr),deque(arr)\n    for _ in range(rotations):\n        a.rotate(-1)\n    if mapping[0][0] == i:\n        return a.popleft()\n    if mapping[0][1] == i:\n        return a.pop()\n    if mapping[1][0] == i:\n        return b.popleft()\n    if mapping[1][1] == i:\n        return b.pop()\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr, rotations, index, rot_count):\n    # write your code here\n    result = arr[index]\n    for rotation in rotations:\n        temp = arr[rotation[0]]\n        arr[rotation[0]] = arr[rotation[1]]\n        arr[rotation[1]] = temp\n        rot_count += 1\n    return arr[index], rot_count\n\n#print(find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1))", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,rotations,index,i):\n    # Base Case\n    if index == i:\n        return arr[0]\n    elif index > len(arr):\n        return -1\n    # Recursive Case\n    else:\n        if i >= len(rotations):\n            return arr[index]\n        else:\n            return find_Element(arr,rotations,index-rotations[i][0],rotations[i][1])\n\n\ndef test_cases():\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,2) == 5\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,3) == 1\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,4) == -1\n    print(\"Success\")\n\n\ntest_cases()"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(word_list):\n    if len(word_list) < 2:\n        return None\n    start_index = word_list[0].find(\"p\")\n    if start_index > -1:\n        for i in range(1, len(word_list)):\n            if word_list[i].find(\"p\") != start_index:\n                return (word_list[0], word_list[i])\n    return None", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    return (words[0], words[1])\n\n# print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n\tfor word in words:\n\t\tif word[0] == 'p':\n\t\t\treturn word, word.split(' ')[1]\n\n# print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(list_words):\n    return (list_words[0], list_words[1])\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    word_list = words.split()\n    start = []\n    for word in word_list:\n        if word[0] == \"p\":\n            start.append(word)\n    return (start[0], start[1])", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word[0] == \"p\":\n            return word, word.split()[1]\n    return False\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words_list):\n    return (words_list[0].split(' ')[0], words_list[1].split(' ')[0])\n\n#start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    for word in words:\n        if word[0] == 'p':\n            return word\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    \"\"\"\n    :param words: a list of words\n    :return: a tuple of words that start with p\n    \"\"\"\n    start_with_p = []\n    for word in words:\n        if word[0] == 'p':\n            start_with_p.append(word)\n    return tuple(start_with_p)\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    p = []\n    for word in words:\n        if word[0] == 'p':\n            p.append(word)\n    return p\n\nstart_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, k, i):\n    if k > i:\n        print(\"Invalid value\")\n    if k == i:\n        if arr[i] < arr[k]:\n            return arr[i]\n        return arr[k]\n    a = max_sum_increasing_subseq(arr, n, k, i+1)\n    b = max(arr[i] + max_sum_increasing_subseq(arr, n, k, i+1), arr[k] + max_sum_increasing_subseq(arr, n, k, i+1))\n    return a if a > b else b\n\ndef main():\n    arr = [1, 101, 2, 3, 100, 4, 5]\n    n = len(arr)\n    k = 6\n    i = 4\n    print(\"Maximum sum of increasing subsequence from prefix till %d including %d is %d\" % (i, k, max_sum_increasing_subseq(arr, n, k, i)))\n\nmain()\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\nfrom typing import List, Optional\n\n\ndef max_sum_increasing_subseq(nums: List[int], k: int, i: int, j: int) -> int:\n    if i > j:\n        return 0\n\n    if i == j:\n        return nums[i]\n\n    if k == 0:\n        return max(\n            max_sum_increasing_subseq(nums, k, i, j - 1),\n            max_sum_increasing_subseq(nums, k, i + 1, j),\n        )\n\n    if k == 1:\n        return max(\n            max_sum_increasing_subseq(nums, k - 1, i, j),\n            nums[i] + max_sum_increasing_subseq(nums, k, i + 1, j),\n        )\n\n    return max(\n        max_sum_increasing_subseq(nums, k, i, j - 1),\n        max_sum_increasing_subseq(nums, k, i + 1, j),\n        nums[i]\n        + max_sum_increasing_subseq(nums, k - 1, i, j)\n        + max_sum_increasing_subseq(nums, k, i + 1, j),\n    )\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, size, k, index):\n    dp = [[0 for j in range(size)] for i in range(size)]\n    for i in range(size):\n        dp[i][i] = arr[i]\n    for i in range(size-1):\n        for j in range(i+1, size):\n            if arr[j] > arr[i]:\n                dp[i][j] = arr[j]\n            else:\n                dp[i][j] = arr[i]\n    max_sum = dp[0][size-1]\n    if max_sum < 0:\n        return 0\n    for i in range(k, size):\n        max_sum = max(max_sum, dp[0][i-1]+dp[i][size-1])\n    return max_sum\n\narr = [1, 101, 2, 3, 100, 4, 5 ]\n# print(max_sum_increasing_subseq(arr, 7, 4, 6))", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\nfrom typing import List\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, k, i):\n    max_sum = 0\n    for j in range(i, n):\n        if (arr[j] > arr[k]):\n            max_sum += arr[j]\n        else:\n            break\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(A, k, i, n):\n\n    \"\"\"\n    A - list of integers,\n    k - value of kth element,\n    i - index of kth element\n    n - length of array\n    \"\"\"\n\n    # base case\n    if i == n:\n        return 0\n    \n    # global max\n    global_max = -1000000\n    \n    # base case\n    if i == 0:\n        for j in range(i, n):\n            if A[j] > A[i]:\n                global_max = max(A[j], A[j] + max_sum_increasing_subseq(A, k, j + 1, n))\n    \n    # recursive case\n    else:\n        # include kth element\n        if A[i] > A[k - 1]:\n            global_max = max(A[i], A[i] + max_sum_increasing_subseq(A, k, i + 1, n))\n        \n        # exclude kth element\n        else:\n            global_max = max(A[i], A[i] + max_sum_increasing_subseq(A, k, i + 1, n))\n    \n    return global_max\n\nA = [1, 101, 2, 3, 100, 4, 5]\nk = 7\ni = 4\nn = len(A)\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    # return -1\n    if k < i:\n        return -1\n    if k == i:\n        return sum(arr[0:k+1])\n    elif k == 0:\n        return max(arr[0], arr[i])\n    elif k == 1:\n        return max(arr[0:i+1])\n    else:\n        max_k = 0\n        for j in range(k-1, 0, -1):\n            max_k = max(max_k, arr[j-1] + max_sum_increasing_subseq(arr, n, k, j))\n            if max_k >= arr[k-1] and j < i:\n                break\n        return max_k\n\n\narr = [1, 101, 2, 3, 100, 4, 5]", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, k, i):\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n    return max_sum_increasing_subseq_util(arr, n, k, i, dp)\n\ndef max_sum_increasing_subseq_util(arr, n, k, i, dp):\n    if i == n:\n        return 0\n    if k == i:\n        return arr[k]\n    if dp[i][k] != -1:\n        return dp[i][k]\n    if i == 0:\n        dp[i][k] = arr[k]\n        return arr[k]\n\n    # max possible sum without kth element\n    max_sum_wo_kth = max_sum_increasing_subseq_util(arr, n, k, i-1, dp)\n    # max possible sum with kth element\n    max_sum_w_kth = max(arr[k] + max_sum_wo_kth, arr[k] + max_sum_increasing_subseq_util(arr, n, k+1, i, dp))\n    dp[i][k] = max_sum_w_kth\n    return max_sum_w_kth\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, m):\n    sum_arr = [[0] * n for i in range(m + 1)]\n    \n    for i in range(m + 1):\n        sum_arr[i][0] = arr[0]\n    \n    for i in range(1, n):\n        sum_arr[0][i] = sum_arr[0][i - 1] + arr[i]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n):\n            sum_arr[i][j] = max(sum_arr[i][j - 1], sum_arr[i - 1][j] + arr[j])\n            \n    return sum_arr[m][n - 1]\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    \"\"\"\n    :param arr: list\n    :param n: int, length of arr\n    :param k: int, index of arr for which we have to find the increasing subseq\n    :param i: int, index from which we have to find the increasing subseq\n    :return: int, maximum sum of increasing subseq\n    \"\"\"\n    max_so_far = arr[i]\n    dp = [arr[i]]\n    for j in range(i + 1, k):\n        if arr[j] > arr[i]:\n            dp.append(arr[j])\n        else:\n            dp[len(dp) - 1] = arr[j]\n    for j in range(k, n):\n        if arr[j] > dp[len(dp) - 1]:\n            dp[len(dp) - 1] = arr[j]\n        elif arr[j] > arr[k]:\n            dp.append(arr[j])\n        else:\n            dp[len(dp) - 1] = arr[j]\n    print(dp)\n    return max(max_so_far, sum(dp))\n\n"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, x, y):\n    return tup[0:x] + tup[x:y] + tup[y:]\n\ndef test_colon_tuplex():\n    assert colon_tuplex((\"HELLO\", 5, [], True), 2, 50) == (\"HELLO\", 5, [50], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 0, 50) == (\"HELLO\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 0, 2) == (\"\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 2, 0) == (\"HELLO\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 0, 0) == (\"\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 2, 2) == (\"HELLO\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 1, 2) == (\"HEL\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 0, 1) == (\"HELLO\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 1, 1) == (\"HELLO\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 1, 0) == (\"HE\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 0, 0) == (\"\", 5, [], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True), 0, 1) == (\"HELLO\", 5, [], True)\n\ntest_colon_tuplex()", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tupl,index,colon):\n    if tupl[index] == colon:\n        tupl[index] = colon\n        return tupl\n    else:\n        tupl[index] = colon\n        return tupl\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, *args):\n    return tup[:args[0]]+list(args)+tup[args[0]+1:]\n\n# assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, *args):\n    tupx = list(tup)\n    tupx[args[0]] = args[1]\n    return tuple(tupx)\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(x, start, stop):\n    # TODO\n    return x\n\n# Bonus", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tup, start, end):\n    for i in range(start,end):\n        tup[i] = tup[i]+50\n    return tup\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, i,j):\n    if i == len(tuplex):\n        return tuplex\n    return tuplex[:i] + (tuplex[i][j],) + tuplex[i+1:]\n\ndef colon_tuplex(tuplex, i,j):\n    return tuplex[:i] + tuplex[i][j] + tuplex[i+1:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tup,i,val):\n\treturn tup[0:i]+(val,) + tup[i+1:]", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup,a,b):\n    return tup[:a] + [b] + tup[a:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, idx, val):\n    l = list(tup)\n    l[idx] = val\n    return tuple(l)\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    Function to find the largest products of two lists.\n\n    Parameters\n    ----------\n    list1 : list\n        First list to be multiplied with second list.\n\n    list2 : list\n        Second list to be multiplied with first list.\n\n    n : int\n        Number of largest products to be returned.\n\n    Returns\n    -------\n    list\n        Largest n products in list of pairs.\n    \"\"\"\n    pair_list = []\n    for i in range(len(list1)):\n        pair = (list1[i]*list2[i], list1[i], list2[i])\n        pair_list.append(pair)\n    pair_list.sort(reverse=True)\n    return pair_list[:n]", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    pass", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(A, B, k):\n    C = []\n    for i in A:\n        for j in B:\n            C.append(i*j)\n    C.sort(reverse=True)\n    return C[:k]\n\nA = [1, 2, 3, 4, 5, 6]\nB = [3, 6, 8, 9, 10, 6]\nk = 3\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(nums1, nums2, n):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    n=len(nums1)\n    nums1.sort()\n    nums2.sort()\n    res = []\n    l1=0\n    l2=0\n    while n>n-n+n-l1-l2:\n        res.append(nums1[n-n+n-l1-l2-1]*nums2[l2])\n        l2+=1\n    return res\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\nimport itertools\n\n\ndef large_product(lst1, lst2, n):\n    if n < 0:\n        return\n    if n == 1:\n        return [lst1[i] * lst2[i] for i in range(0, len(lst1))]\n    return sorted(itertools.chain(\n        large_product(lst1, lst2, n-1),\n        large_product(lst1, lst2[1:], n-1),\n    ))\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            result.append(list1[i] * list2[j])\n    result.sort(reverse=True)\n    return result[:n]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, k):\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    result = []\n    if len(list1) < k:\n        k = len(list1)\n    for i in range(k):\n        result.append(list1[i] * list2[i])\n    return result\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list_one,list_two,num_of_largest):\n    \"\"\"\n    This function takes in two lists and a number as its inputs and returns a list of \n    specified number of largest products of two lists.\n    \"\"\"\n    # generate the list of products of two lists and sort it.\n    products = [num_one * num_two for num_one, num_two in zip(list_one,list_two)]\n    # sort the list in descending order.\n    products.sort(reverse=True)\n    # return the largest num_of_largest products from the sorted list.\n    return products[:num_of_largest]", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list_a, list_b, n):\n    \"\"\"\n    :param list_a: List of integers\n    :param list_b: List of integers\n    :param n: Number of products to find\n    :return: List of top n largest products\n    \"\"\"\n    assert isinstance(n, int)\n    assert n > 0\n    assert isinstance(list_a, list)\n    assert isinstance(list_b, list)\n    assert len(list_a) == len(list_b)\n    assert len(list_a) > 0\n    assert all(isinstance(item, int) for item in list_a)\n    assert all(isinstance(item, int) for item in list_b)\n    sorted_list_a = list_a[:]\n    sorted_list_b = list_b[:]\n    sorted_list_a.sort(reverse=True)\n    sorted_list_b.sort(reverse=True)\n    list_products = []\n    for i in range(n):\n        list_products.append(sorted_list_a[i]*sorted_list_b[i])\n    return list_products\n\n\ndef main():\n    my_list_a = [1, 2, 3, 4, 5, 6]\n    my_list_b = [3, 6, 8, 9, 10, 6]\n    print(\"The list_a is: \", my_list_a)\n    print(\"The list_b is: \", my_list_b)\n    print(\"The top 3 largest products are:\", large_product(my_list_a, my_list_b, 3))\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(l1, l2, n):\n    \"\"\"\n    l1, l2: given lists\n    n: specified number\n    return n largest products\n    \"\"\"\n    from math import prod\n    return sorted([prod(l1[i:i + n]) for i in range(len(l1) - n + 1)], reverse=True)[:n]\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n    if a>b:\n        return a\n    return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x>y:\n        return x\n    else:\n        return y\n\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    if a>b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    return a if a>b else b", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a > b:\n        return a\n    return b\n    ", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(n1, n2):\n    return n1 if n1 > n2 else n2\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    return b\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(s):\n    return tuple(s)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    l = list(string)\n    return tuple(l)\n\ndef test_string_to_tuple():\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert string_to_tuple(\"hello\") ==('h', 'e', 'l', 'l', 'o')\n    assert string_to_tuple(\"i am a string\") ==('i', 'a', 'm', ' ', 's', 't', 'r', 'i', 'n', 'g')\n\ntest_string_to_tuple()", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    list_tuple = list(string)\n    return tuple(list_tuple)", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    tuple_list = list(string)\n    return tuple_list\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n# Function to convert string to tuple\ndef string_to_tuple(s):\n    return tuple(s)\n\n# Driver Code", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n# Define a function\ndef string_to_tuple(string):\n    \"\"\"\n    >>> string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    True\n    \"\"\"\n    # Iterate over string and append each character to a tuple\n    tuple_list = []\n    for letter in string:\n        tuple_list.append(letter)\n\n    # Convert tuple_list to tuple\n    tuple_string = tuple(tuple_list)\n\n    # Return tuple_string\n    return tuple_string\n\n# Define a function\ndef string_to_tuple(string):\n    \"\"\"\n    >>> string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    True\n    \"\"\"\n    # Create an empty tuple\n    tuple_string = ()\n\n    # Iterate over string and append each character to tuple_string\n    for letter in string:\n        tuple_string += (letter, )\n\n    # Return tuple_string\n    return tuple_string\n\n# Define a function\ndef string_to_tuple(string):\n    \"\"\"\n    >>> string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    True\n    \"\"\"\n    # Iterate over string and append each character to tuple_string\n    tuple_string = tuple(string)\n\n    # Return tuple_string\n    return tuple_string\n\n# Define a function\ndef string_to_tuple(string):\n    \"\"\"\n    >>> string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    True\n    \"\"\"\n    # Iterate over string and append each character to a tuple\n    return tuple(string)\n\n# Define a function\ndef string_to_tuple(string):\n    \"\"\"\n    >>> string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', '", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string)\n\n\n# test", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string.split())\n\n\ndef string_to_tuple_2(string):\n    return tuple(string.split(' '))\n\n\ndef string_to_tuple_3(string):\n    return tuple(string.split(' ')[1])\n\ndef string_to_tuple_4(string):\n    return tuple(string.split(' ')[1:])\n\ndef string_to_tuple_5(string):\n    return tuple(string)", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n\tlist1 = list(string)\n\tlist1.reverse()\n\ttup = tuple(list1)\n\treturn tup\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num):\n\t# TODO: Write your code here\n\tif num == 0:\n\t\treturn 1\n\telse:\n\t\tfor i in range(1, num + 1):\n\t\t\tif num & i == 0:\n\t\t\t\treturn i\n\t\treturn 0\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\nimport sys\nimport math\nimport itertools\ndef find_set_bit_pos(num):\n\tif num == 0:\n\t\treturn 0\n\treturn 1 + find_set_bit_pos(num >> 1)\n\ndef set_left_most_unset_bit(n):\n\t# Get number of set bits\n\tset_bits = 0\n\tfor i in range(32):\n\t\tif (n & (1 << i)):\n\t\t\tset_bits = i + 1\n\t# set the left most unset bit\n\tfor i in range(32):\n\t\tif not(n & (1 << i)):\n\t\t\treturn n | (1 << i)\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\nimport pytest\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    Write your solution here\n    \"\"\"\n    # n = n - (n & (n - 1))\n    # return n\n    n = n ^ (n & (n - 1))\n    return n\n\n\ndef test_set_left_most_unset_bit():\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(11) == 15\n    assert set_left_most_unset_bit(15) == 16\n    assert set_left_most_unset_bit(3) == 4\n    assert set_left_most_unset_bit(1111111111) == 1111111110\n    assert set_left_most_unset_bit(0) == 1", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num):\n\twhile num & 1:\n\t\tnum = num << 1\n\treturn num\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(x):\n    return x | (x >> 1) | (x >> 2) | (x >> 3) | (x >> 4) | (x >> 5) | (x >> 6) | (x >> 7) | (x >> 8)\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(x):\n    # your code goes here\n    n = 0\n    while(x&n==0):\n        n = n << 1\n    return n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n  n_copy = n\n  for i in range(31, -1, -1):\n    if (n_copy & (1 << i)) == 0:\n      n_copy = n_copy | (1 << i)\n      return n_copy\n  return -1\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\nfrom typing import Optional\n\n\ndef set_left_most_unset_bit(num: int) -> Optional[int]:\n    for i in range(1, 32):\n        if (num & (1 << i)) != 1:\n            return num | (1 << i)\n    return None\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(i):\n    i = i | (i >> 1)\n    i = i | (i >> 2)\n    i = i | (i >> 4)\n    i = i | (i >> 8)\n    i = i | (i >> 16)\n    return i | (i >> 32)\n\n\ndef test_set_left_most_unset_bit():\n    assert set_left_most_unset_bit(10) == 14", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(number):\n    i = 0\n    while (number >> i) & 1 == 0:\n        i += 1\n    return number | (1 << i)\n\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius,height):\n    return (1/3)*(radius**2)*(height)\n\ndef test_volume_cone():\n    assert volume_cone(1,5)==5.0, \"Should be 5.0\"\n    assert volume_cone(5,12)==314.15926535897927, \"Should be 314.15926535897927\"\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius,height):\n    return (1/3)*3.1415926535897927*radius**2*height\n\ndef test():\n    assert volume_cone(5,12)==314.15926535897927\n    return \"Pass\"\n\ntest()", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    # Formula is (1/3)*\u03c0*r^2*h\n    volume = (1/3)*pi*radius**2*height\n    return volume\n\n# Test", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nfrom math import pi\n\ndef volume_cone(radius,height):\n    return 1/3*pi*radius**2*height\n\n\ndef test():\n    assert volume_cone(1,2) == 0.125\n    assert volume_cone(5,12)==314.15926535897927\n    print('test ok!')\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nimport math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius,height):\n    from math import pi\n    return (1/3)*pi*radius**2*height\n\n# 3.11 Write a function to return the volume of a sphere.\n# assert volume_sphere(5)==785.3981633974483\ndef volume_sphere(radius):\n    from math import pi\n    return (4/3)*pi*radius**3\n\n# 3.12 Write a function to calculate the surface area of a cube.\n# assert surface_area_cube(1)==6\ndef surface_area_cube(side):\n    return 6*side\n\n# 3.13 Write a function to calculate the surface area of a cone.\n# assert surface_area_cone(5,12)==180\ndef surface_area_cone(radius,height):\n    return pi*radius*height + pi*radius**2\n\n# 3.14 Write a function to calculate the surface area of a sphere.\n# assert surface_area_sphere(5)==4*3.141592653589793*5\ndef surface_area_sphere(radius):\n    return 4*pi*radius**2\n\n# 3.15 Write a function to calculate the volume of a sphere.\n# assert volume_sphere(5)==785.3981633974483\ndef volume_sphere(radius):\n    from math import pi\n    return (4/3)*pi*radius**3\n\n# 3.16 Write a function to calculate the surface area of a cylinder.\n# assert surface_area_cylinder(5,12)==104.1004951253952\ndef surface_area_cylinder(radius,height):\n    return 2*pi*radius*height + pi*radius**2\n\n# 3.17 Write a function to calculate the surface area of a sphere.\n# assert surface_area_sphere(5)==4*", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n    return 1/3*math.pi*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius, height):\n    return (1/3) * pi * radius ** 2 * height\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius,height):\n    return (1.0/3.0) * 3.14159 * (radius**2) * height\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius,height):\n\treturn 1.0/3.0*3.14159265358979*radius**2*height\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lst):\n  return [i for i in lst if i>0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    return [num for num in lst if num > 0]\n\ndef test_pos_nos():\n    assert pos_nos([-1,-2,1,2]) == [1,2]\n\n# Test: pos_nos([-1,-2,1,2]) == 1,2\ntest_pos_nos()", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lst):\n    pass\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n# (1)\ndef pos_nos(lst):\n    return [i for i in lst if i > 0]\n# (2)\ndef pos_nos(lst):\n    return [i for i in lst if i > 0]\n# (3)\ndef pos_nos(lst):\n    return list(filter(lambda x:x > 0, lst))", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    res = []\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            res.append(lst[i])\n    return res\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(numbers):\n\tprint([x for x in numbers if x>0])\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(l):\n    return [num for num in l if num > 0]\n\n#assert pos_nos([-1,-2,1,2]) == 1,2\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\n#numbers = [-1,-2,1,2]\n#numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\ndef pos_nos(numbers):\n\t\"\"\"\n\tPrint positive numbers in a list.\n\t\"\"\"\n\tfor number in numbers:\n\t\tif number > 0:\n\t\t\tprint(number)\n\nnumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\npos_nos(numbers)", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    pos_list = []\n    for i in lst:\n        if i>0:\n            pos_list.append(i)\n    return pos_list", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\n# Do not change the code below\ndef pos_nos(lst):\n    return [n for n in lst if n > 0]\n\n\n# Change the code above"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(arr, n):\n    # O(n) time | O(n) space\n    return max(max_sum_without_adjacent(arr, n, i) for i in range(1, n - 1))\n\n\ndef max_sum_without_adjacent(arr, n, i):\n    # O(n) time | O(n) space\n    sum_ = 0\n    for j in range(0, i):\n        sum_ += arr[0][j]\n    for j in range(i, n):\n        sum_ += arr[1][j]\n    for j in range(i):\n        sum_ += arr[2][j]\n    for j in range(i + 1, n):\n        sum_ += arr[3][j]\n    return sum_\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    arr = []\n    if not isinstance(grid, list):\n        return 0\n    \n    for i in range(len(grid)):\n        arr.append(grid[i][0])\n        for j in range(1, n):\n            arr.append(grid[i][j])\n        arr.append(grid[i][n-1])\n    \n    arr.sort()\n    return arr[-1] - arr[0]\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    sum = 0\n    for i in range(n):\n        for j in range(n):\n            sum = max(sum, grid[i][j])\n            sum = max(sum, grid[i][j + 1])\n            sum = max(sum, grid[i + 1][j])\n            sum = max(sum, grid[i + 1][j + 1])\n    return sum\n\n\ndef main():\n    grid = [[1, 4, 5], [2, 0, 0]]\n    n = 3\n    print(max_sum_rectangular_grid(grid, n))\n\n\nmain()", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\nfrom typing import List, Tuple\n\ndef max_sum_rectangular_grid(arr: List[List[int]], n: int) -> int:\n    \"\"\"\n    Check each possible sum for each row and column\n    \"\"\"\n    rows = [sum(row) for row in arr]\n    cols = [sum(row[i] for row in arr) for i in range(n)]\n\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, rows[i] + cols[j] - (n - 1) * arr[i][j])\n\n    return max_sum\n\ndef max_sum_rectangular_grid_optimization(arr: List[List[int]], n: int) -> int:\n    \"\"\"\n    Check for each row and column if there is a valid number for the corresponding cell\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == 0:\n                continue\n\n            cur_sum = 0\n            for k in range(i):\n                cur_sum += arr[k][j]\n            for k in range(j):\n                cur_sum += arr[i][k]\n            cur_sum -= n * arr[i][j]\n\n            max_sum = max(max_sum, cur_sum)\n\n    return max_sum\n\ndef test_max_sum_rectangular_grid():\n    assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    assert max_sum_rectangular_grid([ [1, 4, 5], [0, 2, 0 ] ], 3) == 7\n    assert max_sum_rectangular_grid([ [1, 0, 5], [2, 0, 0 ] ], 3) == 9\n    assert max_sum_rectangular_", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    # Your code here\n    # dp[i][j] represents the maximum sum we can get with i rows, j columns.\n    dp = [[0 for j in range(n + 1)] for i in range(len(grid))]\n    # Fill the dp table with the maximum sum possible for each sub matrix.\n    for i in range(len(grid)):\n        for j in range(n + 1):\n            dp[i][j] = dp[i][j - 1] + grid[i][j - 1] if j > 0 else 0\n    # Iterate over the dp table to find the maximum sum possible.\n    max_sum = 0\n    for i in range(len(grid)):\n        for j in range(n + 1):\n            if j < n:\n                # Skip the diagonal elements.\n                continue\n            # At this point, we have a diagonal element, so we can add to the sum only if the element is not adjacent.\n            if i == 0 or i == len(grid) - 1 or j == 0 or j == n:\n                max_sum = max(max_sum, dp[i][j])\n            else:\n                max_sum = max(max_sum, dp[i][j] + dp[i][j - 2])\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nfrom nose.tools import assert_equal\n\n\ndef max_sum_rectangular_grid(grid, n):\n    '''\n    finds the maximum sum of an array of numbers\n    '''\n    m = len(grid)\n    if m < 1:\n        return 0\n    elif m == 1:\n        return max(grid[0])\n\n    # not using a two-dimensional array since that will take up too much space\n    # instead, we will use a one-dimensional array with length n + 1\n\n    # the maximum sum from ith row is the sum of the ith row and the\n    # max sum from i - 1 row\n    # the maximum sum from the ith column is the sum of the ith column\n    # and the max sum from i - 1 column\n\n    # the maximum sum of the grid is the max sum of the first row and\n    # the max sum of the last column\n    # the maximum sum of the first row is the maximum of the first\n    # element of the first row plus the maximum of the second row\n    # the maximum sum of the last column is the maximum of the\n    # last column and the maximum of the second to last row\n\n    max_sum_first_row = max_sum_second_row = grid[0][0]\n    for i in range(1, n):\n        max_sum_first_row += grid[0][i]\n        max_sum_second_row += grid[1][i]\n        if max_sum_first_row < 0:\n            max_sum_first_row = 0\n        if max_sum_second_row < 0:\n            max_sum_second_row = 0\n    max_sum_first_row += grid[0][n]\n    max_sum_second_row += grid[1][n]\n    if max_sum_first_row < 0:\n        max_sum_first_row = 0\n    if max_sum_second_row < 0:\n        max_sum_second_row = 0\n    max_sum_", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(arr, n):\n    if not arr or n < 2:\n        return 0\n    # create a new array\n    new_arr = []\n    # for every index of the original array\n    for i in range(n):\n        # add the sums of every index\n        new_arr.append(sum(arr[0][i:i+2]))\n    # find the index of the max value in the new array\n    max_index = new_arr.index(max(new_arr))\n    # return the sum of the max value and the sum of the first element of the new array\n    return max(max(new_arr), new_arr[0])\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    This function takes in a rectangular grid of 2D array and returns the maximum sum of the elements such that no 2 chosen elements are adjacent.\n    \"\"\"\n    assert len(grid[0]) == n\n\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, max_sum_in_rectangle(grid, i, j, n))\n    return max_sum\n\ndef max_sum_in_rectangle(grid, row, col, n):\n    \"\"\"\n    This function takes in a rectangular grid, row number, column number and width of the grid and returns the maximum sum of elements such that no 2 chosen elements are adjacent in the given rectangle.\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, grid[row][col + i] + grid[row + i][col])\n    return max_sum", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(arr, n):\n    # base case\n    if n == 1:\n        return max(arr[0][0], arr[0][1])\n\n    # boundary case\n    if n == 2:\n        return max(arr[0][0] + arr[1][1], arr[0][1] + arr[1][0])\n\n    # recursive call\n    max_left = max_sum_rectangular_grid(arr, n - 1)\n    max_right = max_sum_rectangular_grid(arr[1:], n - 1)\n\n    # combine to find max\n    return max(max_left + arr[0][n - 1], max_right + arr[1][n - 1])\n\n\n# test cases", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(list, n):\n    n = len(list)\n    if n == 0:\n        return 0\n    if n == 1:\n        return list[0][0]\n\n    max_row, max_col = 0, 0\n    # -1 denotes that we have not found the maximum yet\n    max_so_far = -1\n\n    # iterate over rows\n    for i in range(n):\n        # iterate over columns\n        for j in range(n):\n            # for every cell we find the maximum sum so far\n            # of the cell itself and the maximum sum of the\n            # remaining cells after excluding the cell\n            sum_of_remaining = max_sum_rectangular_grid(list[:i] + list[i + 1:], n - 1) + \\\n                             max_sum_rectangular_grid(list[:j] + list[j + 1:], n - 1)\n            if sum_of_remaining > max_so_far:\n                max_so_far = sum_of_remaining\n                max_row, max_col = i, j\n\n    return max_so_far + list[max_row][max_col]\n\n\ndef main():\n    list = [[1, 4, 5], [2, 0, 0]]\n    print(max_sum_rectangular_grid(list, 3))\n    list = [[1, 4, 5], [2, 0, 0]]\n    print(max_sum_rectangular_grid(list, 2))\n    list = [[1, 4, 5], [2, 0, 0]]\n    print(max_sum_rectangular_grid(list, 1))\n    list = [[1, 4, 5], [2, 0, 0]]\n    print(max_sum_rectangular_grid(list, 0))\n    print(max_sum_rectangular_grid([], 0))\n\nmain()"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n    # TODO\n    return\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    str_list = str.split()\n    max_len = 0\n    max_len_even = \"\"\n    for word in str_list:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_len_even = word\n    return max_len_even", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(text):\n    if len(text) == 0:\n        return \"\"\n    max = 0\n    even_max = \"\"\n    for i in range(len(text)):\n        if text[i] == ' ' and (text[i-1] == ' ' or text[i-1] == '.'):\n            if len(even_max) > max:\n                max = len(even_max)\n                even_max = text[i:i+len(even_max)]\n        elif text[i].isdigit():\n            if text[i] == '0':\n                continue\n            if len(even_max) > max:\n                max = len(even_max)\n                even_max = text[i:i+len(even_max)]\n    return even_max\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(input_string):\n    \"\"\"\n    :param input_string:\n    :return:\n    \"\"\"\n    if len(input_string) == 0:\n        return \"\"\n\n    max_len_even = 0\n    max_len_even_index = 0\n    for i in range(len(input_string)):\n        if input_string[i].isdigit() or input_string[i] == \" \":\n            continue\n        else:\n            count = 1\n            temp_str = input_string[i]\n            for j in range(i+1,len(input_string)):\n                if input_string[j] == \" \":\n                    if count > max_len_even:\n                        max_len_even = count\n                        max_len_even_index = i\n                    break\n                elif input_string[j].isdigit():\n                    continue\n                else:\n                    count += 1\n                    temp_str += input_string[j]\n\n            if count > max_len_even:\n                max_len_even = count\n                max_len_even_index = i\n\n    return input_string[max_len_even_index: max_len_even_index+max_len_even]\n\n\n# assert find_Max_Len_Even(\"python language\") == \"language\"\n# assert find_Max_Len_Even(\"apple\") == \"apple\"\n# assert find_Max_Len_Even(\"\") == \"\"\n# assert find_Max_Len_Even(\"1234567890\") == \"1234567890\"\n# assert find_Max_Len_Even(\"1 234 567 890\") == \"890\"\n# assert find_Max_Len_Even(\"1234567890\") == \"1234567890\"", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(word):\n\tMax_Len = 0\n\tfor i in range(len(word)):\n\t\tif len(word[i]) % 2 == 0:\n\t\t\tif len(word[i]) > Max_Len:\n\t\t\t\tMax_Len = len(word[i])\n\t\t\t\tMax_Word = word[i]\n\n\treturn Max_Word\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(str1):\n    i,j=0,0\n    n=len(str1)\n    if(n%2!=0):\n        return str1[0:n]\n    else:\n        while(j<=n):\n            if((j+1)<n and str1[j].isalpha() and str1[j+1].isalpha()):\n                j+=1\n            else:\n                i=max(i,j-1)\n                j+=1\n        return str1[0:i+1]", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n    start = 0\n    for word in string.split():\n        if word.isnumeric():\n            continue\n        elif word.isdigit():\n            return word\n        elif word.islower():\n            start = len(word)\n        elif word.isupper():\n            if len(word) > start:\n                start = len(word)\n    return string\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n    max_len = 0\n    for word in string.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                max_str = word\n    return max_str", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    \"\"\"\n    returns the first maximum length of even word.\n    \"\"\"\n    words = str.split(\" \")\n    for word in words:\n        if word.isdigit():\n            continue\n        else:\n            if len(word)%2 == 0:\n                if len(word) > len(max_even):\n                    max_even = word\n    return max_even\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(s):\n    even_words = []\n    start_idx = 0\n    end_idx = 0\n    for i in range(len(s)):\n        if i%2 == 0:\n            if len(even_words) > 0:\n                if len(even_words[-1]) > len(s[i:]):\n                    even_words[-1] = s[i:]\n            else:\n                even_words.append(s[i:])\n            if len(even_words) > 0:\n                end_idx = even_words[-1][-1]\n            start_idx = i\n    return s[start_idx:end_idx]\n\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, x):\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = left + (right-left)//2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return -1\n\ndef test():\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, target):\n    left = 0\n    right = len(arr)-1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == right or arr[mid-1] != target:\n                return mid\n            right = mid-1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid+1\n    return -1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(list, number):\n    \"\"\"\n    :param list: A sorted array\n    :param number: The value to search for\n    :return: The index of the last occurrence of the given number\n    \"\"\"\n    # Initialize the left index of the array\n    left = 0\n\n    # Initialize the right index of the array\n    right = len(list) - 1\n\n    # Initialize a variable to track the last occurrence of the number\n    last_occurrence = -1\n\n    # Iterate until the left index is less than the right index\n    while left <= right:\n        # Find the middle index of the array\n        middle = (left + right) // 2\n\n        # If the middle index is the last occurrence of the number, return it\n        if list[middle] == number:\n            last_occurrence = middle\n            right = middle - 1\n        # Otherwise, if the number is smaller, move to the right half of the array\n        elif list[middle] > number:\n            right = middle - 1\n        # Otherwise, if the number is greater, move to the left half of the array\n        else:\n            left = middle + 1\n\n    # Return the last occurrence of the number\n    return last_occurrence\n\n# Test the function with some examples", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, num):\n    \"\"\"\n    :param arr: input array\n    :param num: number to find the last occurrence of\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if arr[middle] == num:\n            if middle == right or arr[middle + 1] > num:\n                return middle\n            right = middle - 1\n        elif arr[middle] < num:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, val):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == val:\n            if mid == 0 or arr[mid - 1] != val:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] < val:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return end", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, number):\n    start = 0\n    end = len(arr) - 1\n    while (start <= end):\n        mid = (start + end) // 2\n        if (arr[mid] == number):\n            if (mid == len(arr)-1 or arr[mid+1] != number):\n                return mid\n            else:\n                end = mid-1\n        elif (arr[mid] < number):\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, element):\n    # First, we assume the element is not in the list\n    last_occurrence = None\n\n    # We loop over the list from the left until the right. If we find the element, we return its index.\n    # Otherwise, we set last_occurrence to the index of the left element, indicating that the element\n    # is not in the list\n    for i in range(len(array)):\n        if array[i] == element:\n            last_occurrence = i\n            break\n        elif array[i] > element:\n            last_occurrence = i\n            break\n\n    # If we didn't find the element, we return the index of the leftmost element\n    return last_occurrence\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\nfrom bisect import bisect_right\n\n\ndef find_last_occurrence(array, number):\n    \"\"\"\n    Function to find the index of the last occurrence of a number in a sorted array\n    \"\"\"\n    return bisect_right(array, number) - 1\n\n\ndef main():\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\n# You can assume the number will be found in the array.\n# Runtime: O(log n)\n# Space: O(1)\ndef find_last_occurrence(arr, num):\n  if num >= arr[len(arr) - 1]:\n    return len(arr) - 1\n  if num <= arr[0]:\n    return 0\n  left = 0\n  right = len(arr) - 1\n  while left <= right:\n    mid = (left + right) // 2\n    if arr[mid] == num:\n      # we found it\n      if arr[mid] == arr[mid - 1]:\n        return mid\n      # we found it\n      if mid == 0 or arr[mid] != arr[mid - 1]:\n        return mid - 1\n      # we found it\n      if mid == len(arr) - 1 or arr[mid] != arr[mid + 1]:\n        return mid\n    if arr[mid] < num:\n      left = mid + 1\n    if arr[mid] > num:\n      right = mid - 1\n  return -1\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(array):\n    # This works, but I'm not sure I understand what it does.\n    # It modifies the original array so I can't keep it.\n    # I could return a copy instead, but I'm not sure that's any better.\n    for i in range(len(array)):\n        if array[i] != array[i-1]:\n            array[i] = [array[i], i-array[i-1]]\n\n    return array", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(xs):\n    if len(xs) == 0:\n        return []\n    result = []\n    count = 1\n    x = xs[0]\n    for i in range(1, len(xs)):\n        if x == xs[i]:\n            count += 1\n        else:\n            result.append(count)\n            result.append(x)\n            x = xs[i]\n            count = 1\n    result.append(count)\n    result.append(x)\n    return result\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(a_list):\n    result = []\n    current = a_list[0]\n    current_count = 1\n\n    for item in a_list[1:]:\n        if item == current:\n            current_count += 1\n        else:\n            result.append([current, current_count])\n            current = item\n            current_count = 1\n\n    result.append([current, current_count])\n\n    return result\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\nfrom nose.tools import assert_equal\n\n\ndef modified_encode(input_list):\n    encoded_list = []\n    n_of_last = input_list[0]\n    for i in input_list[1:]:\n        if i == n_of_last:\n            n_of_last += 1\n        else:\n            encoded_list.append([n_of_last, i])\n            n_of_last += 1\n    encoded_list.append([n_of_last, i])\n    return encoded_list\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(sequence):\n    return [list(i) if len(i) > 1 else i for i in sequence]", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\nfrom typing import List\n\n\ndef modified_encode(l: List) -> List[List]:\n    \"\"\"\n    A typical run-length encoding is of the form [2, 1], which means that 1\n    2-consecutive integers are replaced by one 2.\n    \"\"\"\n    pass\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    if len(lst)==0:\n        return []\n    if len(lst)==1:\n        return [lst]\n    i=0\n    while i<len(lst):\n        if lst[i]==lst[i+1]:\n            lst[i],lst[i+1]=lst[i+1],lst[i]\n            i+=1\n        i+=1\n    if lst[0]==lst[1]:\n        return [[2,lst[0]]]+modified_encode(lst[1:])\n    return [lst[0]]+modified_encode(lst[1:])\n\n# Tests", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    new_list = []\n    count = 1\n    last = l[0]\n    for i in l:\n        if i == last:\n            count += 1\n        else:\n            new_list.append(count)\n            new_list.append(last)\n            count = 1\n            last = i\n    if new_list[-1] != i:\n        new_list.append(count)\n        new_list.append(last)\n    return new_list\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(alist):\n    encoded = []\n    for i in range(len(alist)):\n        if i == 0:\n            encoded.append([alist[i]])\n        elif alist[i] == alist[i-1]:\n            encoded[-1].append(alist[i])\n        else:\n            encoded.append([alist[i]])\n    return encoded\n\ndef test_modified_encode():\n    assert modified_encode([1,1,2,3,4,4,5,1]) == [[2, 1], 2, 3, [2, 4], 5, 1]\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(L):\n    if len(L) == 0:\n        return []\n    current_num = L[0]\n    count = 1\n    result = []\n    for num in L[1:]:\n        if current_num == num:\n            count += 1\n        else:\n            result.append([count, current_num])\n            count = 1\n            current_num = num\n    result.append([count, current_num])\n    return result\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(side_sum):\n    \"\"\"\n    Function to find the maximum volume of a cuboid with given sum of sides.\n    \"\"\"\n    from itertools import combinations\n    return max(combinations(range(1,side_sum+1), 3), key=lambda x: x[0]*x[1]*x[2])\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\nfrom math import sqrt\n\ndef max_volume(sum_of_sides: int) -> int:\n    \"\"\"Return the maximum volume of a cuboid with given sum of sides\"\"\"\n    # First we find the roots of the following equation:\n    #   x^3 - x^2 = -1\n    # These roots are x = 1 and x = -1\n    # So, the volume of the cuboid with side 1 is:\n    #   volume(1) = 1^3 - 1^2 = 0\n    # Now, we have the following equation:\n    #   x^3 - x^2 = -sum_of_sides\n    # We can rewrite this equation as:\n    #   x^2(x - 1) = -sum_of_sides\n    # The volume of the cuboid with side x is:\n    #   volume(x) = x^3 - x^2 = x^2(x - 1) = x^2(x - 1) = -sum_of_sides\n    # Since we want the maximum volume, we want to find the largest x.\n    # We can rewrite this equation as:\n    #   volume(x) = x^2(x - 1) = -sum_of_sides\n    # We can set this equal to 0 and solve for x:\n    #   x^2(x - 1) = 0\n    #   x(x - 1) = 0\n    #   x = 0 or x = 1\n    #   So, the largest x is 1.\n    # So, the volume of the cuboid with side 1 is:\n    #   volume(1) = 0\n    # The largest possible volume is the sum of the sides minus the sum of the squares of the side lengths:\n    #   max_volume = sum_of_sides - (1^2 + 1^2 + 1^2)\n    #   max_volume = sum_of_sides - 3\n    #   max_volume = sum_of_sides - 1\n    return sum_of_sides - 1\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom functools import lru_cache\nfrom math import sqrt\n\n\n@lru_cache(maxsize=512)\ndef max_volume(sum_of_sides):\n    if sum_of_sides < 28:\n        return 0\n\n    sides = map(int, str(sum_of_sides))\n    sides = sorted(sides)\n    result = 0\n    for i in range(len(sides)):\n        for j in range(i + 1, len(sides)):\n            for k in range(j + 1, len(sides)):\n                if i != j and j != k and i != k:\n                    a, b, c = sides[i], sides[j], sides[k]\n                    result = max(result, a * b * c)\n    return result\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom math import ceil\n\ndef max_volume(sum_of_sides):\n    if sum_of_sides == 0:\n        return 0\n    \n    if sum_of_sides == 1:\n        return 1\n    \n    if sum_of_sides == 8:\n        return 18\n    \n    min_side = ceil(sum_of_sides / 3)\n    max_side = sum_of_sides - 2 * min_side\n    \n    if max_side > min_side:\n        if min_side % 2 != 0:\n            return max_volume(min_side - 1) + max_volume(max_side)\n        else:\n            return max_volume(min_side) + max_volume(max_side)\n    else:\n        return max_volume(min_side)\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_of_sides):\n    sides = []\n    for i in range(1, (sum_of_sides+1) // 2):\n        if sum_of_sides % i == 0:\n            sides.append(i)\n    max_vol = 1\n    for i in sides:\n        for j in sides:\n            for k in sides:\n                if i + j + k == sum_of_sides:\n                    vol = i*j*k\n                    max_vol = max(max_vol, vol)\n    return max_vol\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(side_length):\n    \"\"\"\n    Use a for loop and two if statements to create a nested for loop which can generate all possible combinations \n    for the length and width of the cuboid given the side length.\n\n    Then use a max() function to find the volume of the largest cuboid.\n    \"\"\"\n    cuboids = []\n    for length in range(1, side_length + 1):\n        for width in range(1, side_length + 1):\n            cuboid = length*width*side_length\n            if cuboid > 0 and cuboid not in cuboids:\n                cuboids.append(cuboid)\n\n    return max(cuboids)", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom functools import reduce\nimport math\n\n\ndef max_volume(s):\n    ans = 0\n    for i in range(1, math.floor(math.sqrt(s) + 1)):\n        for j in range(1, math.floor(math.sqrt(s) + 1)):\n            k = math.sqrt(s - i ** 2 - j ** 2)\n            if math.ceil(k) == k and i * j * k > ans:\n                ans = i * j * k\n    return ans\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sum_of_sides):\n    return (sum_of_sides//3)**3", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sum_of_sides):\n    # Your code here\n    a = b = 1\n    c = sum_of_sides - 2\n    while c > 0:\n        if a*a*a + b*b*b + c*c*c < sum_of_sides:\n            a += 1\n        else:\n            b += 1\n            c -= 1\n    return a*b*c\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sum_sides):\n    i = 2\n    j = 2\n    vol = 1\n    while(True):\n        if sum_sides == i*i + j*j + 2*i*j:\n            break\n        else:\n            i += 1\n            j += 1\n            vol = i*i*j\n    return vol\n\ndef test_max_volume():\n    assert max_volume(8) == 18"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(s: str) -> list:\n    pattern = re.compile(r'([a-z]{5,})')\n    return list(pattern.finditer(s))\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\n\ndef find_long_word(string):\n    return [word for word in re.findall(r'\\b\\w{5}\\b', string)]\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(string):\n    \"\"\"\n    Find all five characters long word in the given string by using regex\n    :param string:\n    :return:\n    \"\"\"\n    return re.findall(r'\\w{5}', string)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(text):\n    \"\"\"\n    find_long_word(text)\n\n    :param text: a string\n    :return: a list of all five characters long word in the given string\n    \"\"\"\n    word_list = re.findall(r'[A-Za-z]{5,}',text)\n    return word_list\n\ntext = 'Please move back to strem'", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\n\ndef find_long_word(text):\n    return re.findall(r'\\b[A-Z]{5,}\\b', text)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(text):\n    return re.findall(r'(\\w{5,})', text)\n\n\n# assert find_long_word('Please move back to stream') == ['stream']\n# assert find_long_word('Please move back to strem') == ['strem']", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(str_):\n    pattern = re.compile(r'[\\w]{5,}')\n    matches = pattern.findall(str_)\n    return matches\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(string):\n    \"\"\"\n    Find all 5 characters long word in the given string by using regex.\n    \"\"\"\n    return re.findall(r'\\w{5}', string)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(strem):\n    return list(set(re.findall(r\"(\\w{5})\", strem)))\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(text):\n    \"\"\"Function that takes a string and returns a list of all the 5 characters long words in the string.\"\"\"\n    # Use regex\n    five_char_long_word = re.findall(r'\\b\\w{5}\\b', text)\n    return five_char_long_word\n\n\ndef find_long_word(text):\n    \"\"\"Function that takes a string and returns a list of all the 5 characters long words in the string.\"\"\"\n    return list(filter(lambda x: len(x) == 5, text.split()))"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    squared_sum = 0\n    sum_squared = 0\n    for i in range(1,n+1):\n        squared_sum += i**2\n        sum_squared += i\n    return squared_sum-sum_squared\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sq_sum = sum([i**2 for i in range(n)])\n    sum_sq = sum([i for i in range(n)**2])\n    return sq_sum - sum_sq", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    if n == 1:\n        return 0\n    return n**2 - 2 * n + sum_difference(n-1)\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    a = 0\n    b = 0\n    for i in range(1,n+1):\n        a += i\n        b += (i**2)\n    return a**2 - b\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return sum(range(1, n+1)) ** 2 - sum(range(1, n+1)) ** 2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return sum(range(n))**2 - sum(x**2 for x in range(n))\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sum_1 = 0\n    sum_2 = 0\n    for i in range(1,n+1):\n        sum_1 += i**2\n        sum_2 += i\n    return sum_1 - sum_2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return (sum([i**2 for i in range(1, n+1)]) - sum(range(1, n+1))**2)\n\ndef sum_difference(n):\n    return sum(range(1, n+1))**2 - sum([i**2 for i in range(1, n+1)])", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return (n*(n+1)*(2*n+1))//6 - sum(i**2 for i in range(1,n+1))\n\ndef test_sum_difference():\n    assert sum_difference(12)==5434\n\ntest_sum_difference()", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    s1 = sum(range(1,n+1))**2\n    s2 = sum(range(1,n+1))\n    return s1 - s2\n\nsum_difference(12)\ndef sum_difference(n):\n    return (sum(range(1,n+1))**2) - (sum(range(1,n+1)))**2\n\nsum_difference(12)\ndef sum_difference(n):\n    return sum(x*x for x in range(1,n+1)) - sum(x for x in range(1,n+1))**2\n\n\ndef sum_difference(n):\n    return sum((x * x for x in range(1, n + 1))) - sum((x for x in range(1, n + 1))) ** 2\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\nimport unittest\n\n\ndef find_demlo(number):\n    assert number, \"Number is empty\"\n    result = \"\"\n    number = str(number)\n    n = len(number)\n    step = n - 1\n    while step >= 0:\n        result += number[step]\n        step -= 1\n    return result\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\nfrom functools import reduce\n\n\ndef to_demlo(number):\n    number = list(number)\n    length = len(number)\n\n    for i in range(length-1):\n        number[i] = str(int(number[i]) * 2)\n\n    return ''.join(number)\n\n\ndef find_demlo(number):\n    return to_demlo(number)\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\n# Solving the problem by calculating number of 1's, 2's, 3's, etc in the number\ndef find_demlo(num):\n    num = str(num)\n    num_len = len(num)\n\n    # List that keeps the count of numbers\n    count = [0] * (num_len+1)\n\n    # For each number in the number\n    for num_char in num:\n        if num_char == '1':\n            count[num_len] += 1\n        elif num_char == '2':\n            count[num_len-1] += 1\n        elif num_char == '3':\n            count[num_len-2] += 1\n        elif num_char == '4':\n            count[num_len-3] += 1\n        elif num_char == '5':\n            count[num_len-4] += 1\n        elif num_char == '6':\n            count[num_len-5] += 1\n        elif num_char == '7':\n            count[num_len-6] += 1\n        elif num_char == '8':\n            count[num_len-7] += 1\n        elif num_char == '9':\n            count[num_len-8] += 1\n\n    # Initialize result\n    result = ''\n\n    # Iterate through the count list\n    for i in range(num_len, -1, -1):\n        if count[i] > 0:\n            # Fill the remaining characters with '9' to make it a palindrome\n            for j in range(count[i]):\n                result = '9' + result\n        else:\n            # Fill the remaining characters with '1' to make it a palindrome\n            for j in range(count[i]):\n                result = '1' + result\n\n    return result\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n\tl_num = list(num)\n\tl_demlo = list(num)\n\tfor i in range(0,len(l_num)):\n\t\tl_demlo[i] = '0'\n\tl_demlo[0] = '1'\n\tfor i in range(0,len(l_num)):\n\t\tj = len(l_num) - i - 1\n\t\tif int(l_num[j]) < int(l_demlo[j]):\n\t\t\tl_demlo[j] = str(int(l_num[j])+1)\n\t\telse:\n\t\t\tl_demlo[j] = str(int(l_demlo[j])-1)\n\treturn \"\".join(l_demlo)", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    number = list(number)\n    number.reverse()\n    new_num = []\n    for index, elem in enumerate(number):\n        if index == 0 or index == 4:\n            new_num.append(int(elem) + int(number[index + 1]))\n        else:\n            new_num.append(int(elem))\n    return ''.join([str(elem) for elem in new_num])", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(n: str) -> str:\n    \"\"\"\n    Solve the problem\n    \"\"\"\n    if n == '0':\n        return '0'\n    n = int(n)\n    rev_str = str(n)[::-1]\n    temp = [i+1 for i in range(len(rev_str))]\n    for i in range(len(rev_str)):\n        rev_str = rev_str[:i] + str(i+1) + rev_str[i+1:]\n        yield str(temp) + rev_str\n        yield str(temp) + rev_str[::-1]\n        temp.pop(i)\n        temp.insert(0, i+1)\n    if rev_str != '':\n        yield str(temp) + rev_str\n        yield str(temp) + rev_str[::-1]\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef find_demlo(n):\n    \"\"\"\n    Find the demlo number for the given number.\n    \"\"\"\n    if len(n) <= 2:\n        return n\n    else:\n        return str(find_demlo(n[1:]) + n[0])\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\nfrom typing import List\n\n\ndef find_demlo(number: str) -> str:\n    return \"\".join(\n        [\n            f\"{i+1:0{len(number)}}\"\n            for i, n in enumerate(reversed(number))\n            if n != \"0\"\n        ]\n    )\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    demlo = \"\"\n    for i in range(len(num)):\n        if i%2==0:\n            demlo = num[i] + demlo\n        else:\n            demlo = demlo + num[i]\n    return demlo"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\nimport pytest\n\ndef position_min(input_list):\n    return [i for i, v in enumerate(input_list) if v == min(input_list)]\n\ndef test_position_min_fixture(position_min_fixture_data):\n    assert position_min(position_min_fixture_data[0]) == position_min_fixture_data[1]\n\nposition_min_fixture_data = [[12,33,23,10,67,89,45,667,23,12,11,10,54],[3,11]]\ntest_position_min_fixture(position_min_fixture_data)\n\nposition_min_fixture_data = [[12,33,23,10,67,89,45,667,23,12,11,10,54],[4,9,11]]\ntest_position_min_fixture(position_min_fixture_data)\n\nposition_min_fixture_data = [[12,33,23,10,67,89,45,667,23,12,11,10,54],[3,4,9,11]]\ntest_position_min_fixture(position_min_fixture_data)", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(arr):\n    \"\"\"\n    find all index positions of the minimum values in a given list\n\n    Args:\n       arr(array), input list to search\n    Returns:\n       position(list), a list contains index positions of the minimum values\n    \"\"\"\n    position = []\n    for index in range(len(arr)):\n        if arr[index] == min(arr):\n            position.append(index)\n    return position", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(x):\n    \"\"\"\n    This function will take a list as an input,\n    and return all indices of the minimum value in the list.\n    \"\"\"\n    min_val = x[0]\n    min_val_index = 0\n    # First pass of the loop will iterate over all values in the list, and\n    # find the smallest value\n    for i in range(len(x)):\n        if x[i] < min_val:\n            min_val = x[i]\n            min_val_index = i\n    # Second pass will iterate over all values in the list again,\n    # and check whether the current value is less than the smallest value\n    # This will find all indices of values less than the smallest value\n    pos = []\n    for j in range(len(x)):\n        if x[j] < min_val:\n            pos.append(j)\n    # We'll return all indices of the smallest value\n    return pos\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(list1):\n    list_min=list1[0]\n    list_min_position=[0]\n    for i in range(1,len(list1)):\n        if list1[i]<list_min:\n            list_min=list1[i]\n            list_min_position=[i]\n        elif list1[i]==list_min:\n            list_min_position.append(i)\n    return list_min_position\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(list_):\n    return [i for i, x in enumerate(list_) if x == min(list_)]\n\n#print(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]))\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\nimport random\n\n\ndef position_min(numbers):\n    return [i for i in range(len(numbers)) if numbers[i] == min(numbers)]\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(my_list):\n    '''\n    This function returns a list of indexes of all the elements of the list that are minimum elements\n    '''\n    mini_pos_list = []\n    for i in range(len(my_list)):\n        mini_pos = my_list.index(min(my_list))\n        mini_pos_list.append(mini_pos)\n    return mini_pos_list\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    l = len(lst)\n    min_value = lst[0]\n    min_index = 0\n\n    for i in range(l):\n        if lst[i] < min_value:\n            min_value = lst[i]\n            min_index = i\n\n    return [min_index]\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(list):\n    minimum = list[0]\n    index_of_min = 0\n\n    for i in range(1,len(list)):\n        if list[i] < minimum:\n            minimum = list[i]\n            index_of_min = i\n    return [index_of_min,minimum]\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(l):\n    min_num = l[0]\n    min_pos = 0\n    for i in range(len(l)):\n        if l[i] < min_num:\n            min_num = l[i]\n            min_pos = i\n    return [min_pos]\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(nums, n):\n    res = []\n    while nums:\n        if nums[-1] < 0:\n            nums.pop()\n            res.append(nums.pop())\n        else:\n            res.append(nums.pop())\n    return res\n\n# test case", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(lst, n):\n    if len(lst) != n:\n        print(\"Incorrect length of list\")\n        return None\n    \n    #split into two lists\n    pos = []\n    neg = []\n    for x in lst:\n        if x >= 0:\n            pos.append(x)\n        else:\n            neg.append(x)\n\n    #concat them alternating\n    return pos + neg", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\nimport numpy as np\n\ndef re_arrange(arr, size):\n    temp = np.zeros(size, int)\n    temp[:len(arr)] = arr\n    return np.concatenate((temp[::-1], temp[:-1]))\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, size):\n    mid = size//2\n    if(size % 2 == 0):\n        left = mid\n        right = mid-1\n        arr[left], arr[right] = arr[right], arr[left]\n    else:\n        left = mid\n        arr[left], arr[right] = arr[right], arr[left]\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    # O(n) time | O(n) space\n    new_arr = []\n    index_diff = n//2\n    for i in range(index_diff):\n        new_arr.append(arr[i])\n        new_arr.append(arr[-i - 1])\n    return new_arr\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\n# Solution 1:\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef re_arrange(arr, n):\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] > 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return arr\n\n\n# Solution 2:\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef re_arrange(arr, n):\n    l_pos, r_neg = 0, n - 1\n    while l_pos <= r_neg:\n        if arr[l_pos] <= 0:\n            l_pos += 1\n        elif arr[r_neg] >= 0:\n            r_neg -= 1\n        else:\n            arr[l_pos], arr[r_neg] = arr[r_neg], arr[l_pos]\n    return arr", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, k):\n    '''Returns the given array sorted in alternating positive and negative items'''\n    temp = [0] * k\n    for i in arr:\n        temp[k] = i\n        k -= 1\n        if k < 0:\n            k = k + len(arr)\n        if k < 0:\n            k = k + len(arr)\n        if temp[k] >= 0:\n            temp[k+1] = temp[k]\n            k -= 1\n        if k < 0:\n            k = k + len(arr)\n        if k < 0:\n            k = k + len(arr)\n    return temp\n\ndef test_re_arrange():\n    assert re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\ndef test_re_arrange2():\n    assert re_arrange([0, 1, 2, 3, 4], 5) == [0, 1, 2, 3, 4]\n\ndef test_re_arrange3():\n    assert re_arrange([2, 0, 2, 1, 2, 3, 1, 4], 6) == [2, 0, 2, 1, 2, 3, 1, 4]\n\ndef test_re_arrange4():\n    assert re_arrange([-2, 0, 2, 1, 2, 3, 1, 4], 6) == [-2, 0, 2, 1, 2, 3, 1, 4]\n\ntest_re_arrange()\ntest_re", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, k):\n  n = len(arr)\n  if n == 1:\n    return arr\n  if n == k:\n    return arr\n  arr.sort()\n  for i in range(0, n, 2):\n    arr[i], arr[i+1] = arr[i+1], arr[i]\n  if k % 2 == 0:\n    if n % 2 == 0:\n      return arr[0: k-1]\n    else:\n      return arr[0: k]\n  else:\n    return arr[0: k-1]\n  # or return arr[0: k]\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    pos_arr = []\n    neg_arr = []\n    for i in arr:\n        if i < 0:\n            neg_arr.append(i)\n        else:\n            pos_arr.append(i)\n    if len(pos_arr) + len(neg_arr) == n:\n        return pos_arr + neg_arr\n    else:\n        return arr\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, max_num):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n\n    Args:\n       arr(list): Input array\n       max_num(int): Max value\n\n    Returns:\n       list: Sorted array\n    \"\"\"\n    for i in range(0, len(arr), 2):\n        if arr[i] > 0:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\n    for i in range(1, len(arr), 2):\n        if arr[i] > 0:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\n    return arr"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nimport pytest\n\ndef sum_of_alternates(lst):\n    \"\"\"\n    :param lst: a list of tuples.\n    :return: the sum of all tuples at the index position that are even and the sum of all tuples at the index position that are odd, respectively.\n    \"\"\"\n    # your code here\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_sum += lst[i]\n        else:\n            odd_sum += lst[i]\n    return even_sum, odd_sum\n\ndef test_sum_of_alternates():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(tuple_list):\n    sum_list = []\n    for i in range(0, len(tuple_list), 2):\n        sum_list.append(tuple_list[i] + tuple_list[i+1])\n    return tuple(sum_list)\n\n\ndef sum_of_alternates_2(tuple_list):\n    return tuple(sum(tuple_list[i::2]) for i in range(2))\n\n\n# The following tests are copied from the replit page.\n# https://replit.com/@jenndunn/alternate-tuple-sum\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(lst):\n    i = 0\n    result = 0\n    while i < len(lst):\n        result += lst[i]\n        i = i + 2\n    return result\n\n# assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n# assert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8)) == (1, 3, 5, 7)\n# assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n# assert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8)) == (1, 3, 5, 7)\n\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nfrom itertools import chain\n\n\ndef sum_of_alternates(tuple_1, tuple_2):\n    \"\"\"\n    Sum of the alternate tuples\n\n    :param tuple_1: The first tuple to compare\n    :param tuple_2: The second tuple to compare\n    :return: the sum of the tuples\n    \"\"\"\n    return (tuple_1[0] + tuple_2[0], tuple_1[1] + tuple_2[1])\n\n\ndef sum_of_alternates_v2(tuple_1, tuple_2):\n    \"\"\"\n    Sum of the alternate tuples\n\n    :param tuple_1: The first tuple to compare\n    :param tuple_2: The second tuple to compare\n    :return: the sum of the tuples\n    \"\"\"\n    return tuple(chain(tuple_1, tuple_2))\n\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\nfrom typing import List\n\n\ndef sum_of_alternates(data: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    def helper(data: List[int], odds: int, evens: int) -> int:\n        if not data:\n            return odds * evens\n        # Add odd index elements\n        odds += data[0]\n        # Add even index elements\n        evens += data[-1]\n        # Return sum of alternates\n        return helper(data[1:-1], odds, evens)\n\n    return helper(data, 0, 0)\n\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(tuple):\n    sum_of_alternate = []\n    for i in range(len(tuple)-1):\n        sum_of_alternate.append(tuple[i] + tuple[i+1])\n    return tuple(sum_of_alternate)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(seq):\n    \"\"\"\n    Takes in a sequence and returns the sum of the 2nd and 4th element and 3rd and 5th element\n    :param seq:\n    :return:\n    \"\"\"\n    return (sum(seq[::2]), sum(seq[1::2]))\n\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(lst):\n    if len(lst) == 1:\n        return lst[0], 0\n    else:\n        return lst[0] + sum_of_alternates(lst[1::2]), lst[1] + sum_of_alternates(lst[2::2])\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(tup):\n    return tuple(sum(i) for i in zip(*tup[::2]))\n\n#assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(list):\n    \"\"\"\n        Description:\n        This function takes in an iterable of tuples and returns\n        the sum of the first and second elements of each tuple in\n        the iterable, alternating between each element.\n\n        Parameters:\n        list - a list of tuples of length at least 2\n\n        Returns:\n        a tuple of the sum of the first and second elements of each tuple\n        in the iterable, alternating between each element\n    \"\"\"\n    # Initialize the sum of the first and second elements to 0\n    first_sum = 0\n    second_sum = 0\n\n    # Iterate over the list of tuples\n    for i in range(0, len(list), 2):\n        # Add the first element to the sum of first elements\n        first_sum += list[i][0]\n        # Add the second element to the sum of second elements\n        second_sum += list[i][1]\n\n    # Return the sum of the first and second elements\n    return (first_sum, second_sum)\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    if n == 0:\n        return 0\n    sqrt = int(n ** 0.5)\n    ans = 0\n    while sqrt * sqrt <= n:\n        ans += 1\n        n -= sqrt * sqrt\n        sqrt -= 1\n    return ans\n\n\ndef get_Min_Squares_opt(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    ans = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        ans += int(n / i ** 2)\n    return ans\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    l, r = 1, n\n    while l <= r:\n        m = (l+r)//2\n        if n-m*m < m:\n            return m\n        elif m**2 <= n:\n            l = m+1\n        else:\n            r = m-1\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(target):\n    \n    min_sq = int(math.sqrt(target))\n    \n    for num_sq in range(min_sq, 0, -1):\n        if target % num_sq == 0:\n            return target/num_sq\n    \n    return 0\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    squares = []\n    k = int(n**0.5)\n    for i in range(1, k+1):\n        if n % i == 0:\n            squares.append(i)\n    return min(squares)\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(N):\n\tnum_of_square = N // 4\n\trest = N % 4\n\tif rest == 1:\n\t\tnum_of_square = num_of_square + 1\n\treturn num_of_square\n\ndef test_get_Min_Squares():\n\tassert get_Min_Squares(6) == 3\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(x):\n    min_square = float('inf')\n    for i in range(1,int(sqrt(x))+1):\n        if(x % i == 0):\n            square = (x / i) ** 2\n            if(square < min_square):\n                min_square = square\n            else:\n                return min_square\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    squares = []\n    while n > 0:\n        squares.append(n ** 2)\n        n -= n ** 0.5\n    squares.sort(reverse = True)\n    # print(squares)\n    return squares[0] + squares[1]\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    i=1\n    squares = 0\n    while (i**2)<n:\n        if(n%i==0):\n            squares+=1\n        i+=1\n    return squares\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(sum):\n    # if sum is even\n    if sum % 2 == 0:\n        # find the square root of sum\n        n = int(sum**0.5)\n        # return the number of squares required to reach the sum\n        return n\n    # if sum is odd\n    else:\n        # return 1\n        return 1\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    return max(strings, key=strings.count)\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(words):\n    word = \"\"\n    count = 0\n    for i in words:\n        if i.find(word) == 0:\n            count = count + 1\n    if count > count:\n        word = words[words.index(words[count])]\n    return word\n\nwords = [\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    counter = 0\n    word = None\n    for string in strings:\n        s = string.split(\" \")\n        for item in s:\n            if counter < s.count(item):\n                counter = s.count(item)\n                word = item\n    return word\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    \"\"\"\n    I first created a dictionary that contains the word with their frequency\n    I then turn this dictionary to a list of tuples and sorted this list.\n    I return the first element in the list\n    \"\"\"\n    word_frequency = {}\n    for string in strings:\n        for word in string.split(\" \"):\n            word_frequency[word] = word_frequency.get(word,0) + 1\n    return sorted(word_frequency.items(), key = lambda x: x[1], reverse = True)[0][0]\n    \ndef test_most_occurrences():\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) == 'UTS'\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"UTS is best\"]) == 'UTS'\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"UTS is best\", \"UTS is best\"]) == 'UTS'\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"UTS is best\", \"RTF love UTS\"]) == 'RTF'\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"UTS is best\", \"UTS is best\", \"UTS is best\", \"RTF love UTS\"]) == 'RTF'\n    assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"UTS is best\", \"UTS is best\", \"UTS is best\", \"RTF love UTS\", \"RTF love UTS\"]) == 'UTS'\n    assert most_occurrences([\"RTF love UTS\", \"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"UTS is", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    \"\"\"\n    >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] )\n    'UTS'\n    \"\"\"\n    all_words = {}\n    for string in strings:\n        for word in string.split():\n            if word not in all_words:\n                all_words[word] = 0\n            all_words[word] += 1\n    max_occurrences = 0\n    winner = None\n    for word, num_ocurrences in all_words.items():\n        if num_ocurrences > max_occurrences:\n            max_occurrences = num_ocurrences\n            winner = word\n    return winner\n\ndef main():\n    print(most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]))\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings_list):\n    #initialise the frequency dict\n    freq_dict = {}\n    \n    #iterate through the strings in the list\n    for string in strings_list:\n        #split the string into words using a split function\n        words = string.split()\n        for word in words:\n            #If the word is already in the dict, increment the count by 1\n            if word in freq_dict:\n                freq_dict[word] += 1\n            #otherwise add the word with value 1\n            else:\n                freq_dict[word] = 1\n                \n    #get the max value of the frequency dict\n    max_value = max(freq_dict.values())\n    #get the words having max value and return the max key\n    max_key = [key for key, value in freq_dict.items() if value == max_value]\n    return max_key[0]", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings_list):\n    counts = {}\n    for string in strings_list:\n        for word in string.split(\" \"):\n            counts[word] = counts.get(word, 0) + 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)[0][0]\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    max_occur = 0\n    #initialize max_occur and most_occur\n    #iterate through the strings\n    #if the value of max_occur is less than the current value of the counter\n    #then set it to the current value of the counter\n    #set most_occur to the current string\n    #add 1 to the value of max_occur\n    #return most_occur\n\n    for string in strings:\n        counter = 0\n        for i in range(len(string)):\n            if string[i] == 'U':\n                counter += 1\n        if counter > max_occur:\n            max_occur = counter\n            most_occur = string\n    return most_occur\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\nfrom collections import Counter\n\ndef most_occurrences(lst):\n    word_dict = Counter()\n    for l in lst:\n        for i in l.split():\n            word_dict[i] += 1\n    return word_dict.most_common(1)[0][0]\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    dic = {}\n    for string in strings:\n        string = string.lower()\n        for word in string.split():\n            if word not in dic:\n                dic[word] = 1\n            else:\n                dic[word] += 1\n    return sorted(dic, key=dic.get, reverse=True)[0]"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\ndef check_isosceles_v2(a,b,c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\ndef check_isosceles_v3(a,b,c):\n    return (a == b or b == c or a == c)\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b==c:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n\tif a==b==c:\n\t\treturn True\n\telif a==b or a==c or b==c:\n\t\treturn False\n\telse:\n\t\treturn True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b and b==c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if (a == b) or (a == c) or (b == c):\n        return True\n    return False\n\ndef check_isosceles(a,b,c):\n    return a == b or a == c or b == c\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if (a==b and b==c) or (a==c and c==b):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a == b or b == c or a == c:\n        return True\n    return False", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    assert a == b or a == c or b == c, \"Triangle is not isosceles\"\n    return True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a == b == c:\n        return True\n    elif a == b or b == c or a == c:\n        return False\n    else:\n        return None\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b or b==c or c==a:\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(list, num_items, step):\n    if num_items < step:\n        return list\n    else:\n        return list[-num_items:] + list[:-num_items]\n\n\ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 4) == [5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 4) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 4) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 0) == [1, 2, 3, 4, 5, 6,", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(arr, d, num):\n    for i in range(num):\n        temp = arr.pop(0)\n        arr.append(temp)\n\n    return arr\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(alist, n, k):\n    newlist = alist[k:] + alist[:k]\n    return newlist\n\ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(a, num_rotate, n):\n    rotated_list = []\n    for i in range(n):\n        rotated_list.append(a[i])\n    for i in range(n):\n        rotated_list.append(a[i + num_rotate])\n    for i in range(num_rotate):\n        rotated_list.append(a[i])\n    return rotated_list\n\n\ndef test_cases():\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert rotate_left([1, 2, 3", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\nfrom collections import deque\n\ndef rotate_left(arr, n, k):\n    k %= len(arr)\n    k = len(arr) - k\n    result = deque()\n    result.extend(arr[k:])\n    result.extend(arr[:k])\n    return result\n\n\n# assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\ndef rotate_right(arr, n, k):\n    k %= len(arr)\n    k = len(arr) - k\n    result = deque()\n    result.extend(arr[k:])\n    result.extend(arr[:k])\n    return result[::-1]\n\n\n# assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(list_to_rotate, length, number_of_items):\n    return list_to_rotate[number_of_items:] + list_to_rotate[:number_of_items]\n\n\ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(a,n,k):\n    # return a[:k]+a[k:]+a[n:k]\n    return a[n:] + a[0:n]\n\ndef rotate_left_2(a,n,k):\n    if k > n:\n        print(\"Error: K should be less than or equal to N\")\n    return a[k:] + a[:k]\n\ndef rotate_left_3(a,n,k):\n    if k > n:\n        print(\"Error: K should be less than or equal to N\")\n    return a[n-k:]+a[:n-k]\n\n\ndef rotate_left_4(a,n,k):\n    if k > n:\n        print(\"Error: K should be less than or equal to N\")\n    return a[k:]+a[:n-k]\n\ndef rotate_left_5(a,n,k):\n    if k > n:\n        print(\"Error: K should be less than or equal to N\")\n    return a[k:]+a[:n-k]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(l,n,step):\n    for i in range(step):\n        l.insert(0,l.pop())\n    return l\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(lst,n,k):\n    lst = lst[k:] + lst[:k]\n    return lst[n:] + lst[:n]\n\ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\n# solution using insert function:\ndef rotate_left(arr,n,k):\n    for i in range(k):\n        arr.insert(0,arr.pop())\n    return arr\n\n# solution using slicing:\ndef rotate_left(arr,n,k):\n    k = k%n\n    return arr[k:]+arr[:k]\n\n# test cases:"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(lst):\n    return len([x for x in lst if x < 0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    count = 0\n    for n in lst:\n        if n < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    count = 0\n    for i in lst:\n        if i < 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(ls):\n    count = 0\n    for i in ls:\n        if i < 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(nums):\n    count = 0\n    for num in nums:\n        if num < 0:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\n#We can use the built in function count\n\ndef neg_count(lst):\n    return lst.count(-1)\n\n\n#Or we can do a for loop\n\ndef neg_count(lst):\n    count = 0\n    for i in lst:\n        if i < 0:\n            count += 1\n    return count\n\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(l):\n    count = 0\n    for i in l:\n        if i < 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(a):\n    return len(a) - a.count(max(a))\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    count = 0\n    for i in lst:\n        if i < 0:\n            count += 1\n    return count\n\n#assert neg_count([-1,-2,3,-4,-5]) == 4\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(L):\n    count = 0\n    for i in L:\n        if i < 0:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(s):\n    pattern = re.compile(r'\\b[A-Za-z]{3,5}\\b')\n    return [m.group(0) for m in pattern.finditer(s)]\n\ndef find_char(s):\n    return [match.group(0) for match in re.finditer(r\"\\b[A-Za-z]{3,5}\\b\", s)]\n\ndef find_char(s):\n    return re.findall(r'\\b[A-Za-z]{3,5}\\b', s)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(s):\n  return re.findall(r'\\b[a-zA-Z]{3,5}\\b', s)\n\n#Test cases", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(str_input):\n    # return re.findall(r\"\\b[a-z]{3,}\\b\", str_input.lower())\n    # return re.findall(r\"[A-Z]{3,}\", str_input)\n    return re.findall(\"[a-z]{3,}\", str_input)\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(str):\n    return re.findall(r\"[\\w]{3}|\\w{4}|\\w{5}\", str)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(string):\n    \"\"\"\n    >>> find_char(\"For the four consumer complaints contact manager AKR reddy\")\n    ['For', 'the', 'four', 'AKR', 'reddy']\n    \"\"\"\n    return [word for word in string.split() if re.search(r'(\\w{3,})', word)]\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(string):\n    return re.findall(r\"\\w{3,5}\", string)\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(text):\n    \"\"\"\n    >>> find_char(\"For the four consumer complaints contact manager AKR reddy\")\n    ['For', 'the', 'four', 'AKR', 'reddy']\n    \"\"\"\n    return re.findall(r\"\\b(\\w{3,})?\\b\", text)\n    ", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(txt):\n    return [w for w in re.findall(r'[A-Za-z]{3,5}', txt)]\n\n\ndef test_find_char():\n    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert find_char('I am learning python') == ['I', 'am', 'learning', 'python']\n    assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(s):\n    \"\"\"\n    find_char function\n    \"\"\"\n    a = re.findall(r'\\b[A-Za-z]{3,5}\\b', s)\n    return a\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\ndef find_char(txt):\n\tlst = re.findall(r'\\w{3,}',txt)\n\treturn lst\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    count = 0\n    for i in range(32):\n        if (n & 1 << i) == 0:\n            count = count + 1\n    return count\n\n\ndef test():\n    assert count_unset_bits(2) == 1\n    assert count_unset_bits(1) == 0\n    assert count_unset_bits(0) == 32\n    assert count_unset_bits(255) == 0\n    assert count_unset_bits(65535) == 0\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n  # TODO: Write your code here\n  return 0\n\ndef test_count_unset_bits():\n  assert count_unset_bits(0) == 0\n  assert count_unset_bits(1) == 1\n  assert count_unset_bits(2) == 1\n  assert count_unset_bits(3) == 2\n  assert count_unset_bits(10) == 2\n  assert count_unset_bits(11) == 3\n  assert count_unset_bits(12) == 2\n  assert count_unset_bits(100) == 10\n  assert count_unset_bits(101) == 11\n  assert count_unset_bits(123) == 7\n\ntest_count_unset_bits()", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# First we will create a function that takes a number as input\ndef count_unset_bits(num):\n    # We will create a new variable called count and initialize it to zero\n    count = 0\n    # We will create a for loop that iterates over all the bits of the number\n    for i in range(1, num + 1):\n        # We will use bitwise AND to find if the current bit is set (1) or not (0)\n        if num & i == 0:\n            # We will increment the count variable if the current bit is unset\n            count += 1\n    # We will return the count\n    return count\n\n\n# We will test the function", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(x):\n    return bin(x).count(\"1\")\n\ndef test():\n    assert count_unset_bits(2) == 1\n\ntest()", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    if n==0:\n        return 32\n    if n==1:\n        return 31\n    if n==2:\n        return 30\n    return count_unset_bits(n>>1)+count_unset_bits(n&1)\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(number):\n    count = 0\n    for bit in range(number.bit_length()):\n        if (number >> bit) & 1 == 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    count = 0\n    while n > 0:\n        count += n % 2\n        n >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# write your code here\n\ndef count_unset_bits(n):\n    if n == 0:\n        return 0\n    \n    ones = bin(n)[2:]\n    return 8 - len(ones)\n\n# test your code", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n    return bin(num).count('1')\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n  return bin(n).count(\"0\")\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nfrom collections import Counter\n\ndef char_frequency(s):\n    return Counter(s)\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(word: str):\n    freq = {}\n    for i in word:\n        freq[i] = freq.get(i, 0) + 1\n    return freq\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(text):\n    freq = {}\n    for letter in text:\n        freq[letter] = freq.get(letter, 0) + 1\n    return freq\n\n\ndef test_char_frequency():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert char_frequency('') == {}\n\n\n# ----------------------------\n# 10. Write a function to count vowel occurrence in a given string", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\nimport collections\n\n\ndef char_frequency(word: str) -> dict:\n    return collections.Counter(word)\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(text):\n    d = {}\n    for c in text:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n\n\n# assert char_frequency(\"python\") == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n# assert char_frequency(\"Java\") == {'j': 1, 'a': 1, 'v': 1}\n# assert char_frequency(\"wwwwwww\") == {'w': 6}\n# assert char_frequency(\"on\") == {'o': 1, 'n': 1}\n# assert char_frequency(\"nnn\") == {'n': 3}", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    frequency_dict = {}\n    for char in string:\n        if char in frequency_dict:\n            frequency_dict[char] += 1\n        else:\n            frequency_dict[char] = 1\n    return frequency_dict\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    count = dict()\n    for c in s:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n    return count\n\n# end of code\n\n\ndef test_char_frequency():\n    cases = [\n        ('', {}),\n        ('ab', {'a': 1, 'b': 1}),\n        ('abc', {'a': 1, 'b': 1, 'c': 1}),\n        ('python', {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}),\n        ('abcbac', {'a': 2, 'b': 2, 'c': 2}),\n        ('abcbaccbabcbac', {'a': 3, 'b': 3, 'c': 3}),\n        ('abcbaccbabcbaccba', {'a': 4, 'b': 4, 'c': 4}),\n    ]\n    for s, result in cases:\n        assert char_frequency(s) == result, s", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(my_string):\n    dict_char_freq = {}\n    for char in my_string:\n        dict_char_freq[char] = dict_char_freq.get(char,0) + 1\n    return dict_char_freq\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n  return dict([ (char, string.count(char)) for char in set(string) ])\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nfrom collections import Counter\n\n\ndef char_frequency(s):\n    return Counter(s)\n\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(lst):\n\t\"\"\"\n\t:type lst: list\n\t:rtype: list\n\t\"\"\"\n\treturn sorted(lst, key = lambda x: x[1])", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lst):\n\treturn sorted(lst, key=lambda x: x[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\n# def sort(list_of_list):\n#     list_of_list = sorted(list_of_list, key=lambda x: x[1])\n#     return list_of_list\n\n# def sort(list_of_list):\n#     return sorted(list_of_list, key=lambda x: x[1])\n\n\ndef sort(list_of_list):\n    return sorted(list_of_list, key=lambda x: x[1])\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(list):\n    list.sort(key=lambda x: x[1])\n    return list\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lst):\n    return sorted(lst, key = lambda x:x[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(a):\n    a.sort(key=lambda x: x[1])\n    return a\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(sublist):\n\tsublist.sort(key=lambda x: x[1])\n\treturn sublist\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lists):\n    return sorted(lists, key = lambda x: x[1])\n\n\n#=======================", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(l):\n    return sorted(l, key = lambda x: x[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\nfrom functools import cmp_to_key\ndef Sort(lst):\n    if not lst:\n        return []\n    def cmp(a, b):\n        if a[1] == b[1]:\n            return 0\n        if a[1] < b[1]:\n            return -1\n        return 1\n    return sorted(lst, key=cmp_to_key(cmp))\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    # Check for all the triangle conditions\n    if(a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    return False\n\n# Test Cases", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    return a+b>c and a+c>b and b+c>a\n\n\ndef test_case_1():\n    assert check_Validity(1,2,3) == False\n\ndef test_case_2():\n    assert check_Validity(2,3,4) == True\n\n\ndef test_case_3():\n    assert check_Validity(1,2,4) == False\n\ndef test_case_4():\n    assert check_Validity(2,1,3) == True\n\n\ndef test_case_5():\n    assert check_Validity(3,3,4) == True\n\n\ndef test_case_6():\n    assert check_Validity(5,7,11) == True\n\ndef test_case_7():\n    assert check_Validity(5,7,1) == False\n\ndef test_case_8():\n    assert check_Validity(5,1,7) == False\n\ndef test_case_9():\n    assert check_Validity(7,5,11) == False\n\ndef test_case_10():\n    assert check_Validity(2,2,2) == True\n\ndef test_case_11():\n    assert check_Validity(2,2,2.0001) == False", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\nimport math\ndef check_Validity(a,b,c):\n    if a + b > c and b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\ndef check_Validity2(a,b,c):\n    if a == b == c:\n        return False\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a, b, c):\n    if a > b + c or b > a + c or c > a + b:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n# Function to check validity of triangle\ndef check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n# Main function\na, b, c = map(int, input(\"Enter three sides of the triangle: \").split())", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if a+b > c and a+c > b and b+c > a:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    p = (a+b+c)/2\n    return p == 2*math.sqrt(a*b*c)\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n#assert check_Validity(1,2,3) == False\n#assert check_Validity(3,4,5) == True\n#assert check_Validity(1,1,1) == True\n#assert check_Validity(5,4,3) == False\n#assert check_Validity(10,4,6) == False\n#assert check_Validity(3,4,5) == True\n#assert check_Validity(0,0,0) == True"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,d):\n    sum=0\n    for i in range(a,b+1):\n        sum+=i\n    return (sum*(2*d+1))/2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,n):\n    return a+(n-1)*(b-a)\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,d):\n    return (b-a)/2*(a+b)\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,d):\n    i=a\n    sum=a\n    while i<=b:\n        sum+=i\n        i+=d\n    return sum\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,d):\n    return sum([i for i in range(a,b+1,d)])", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, b, n):\n    return ((b-a)/2)*n + (b+a)/2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a, b, n):\n    return (b - a) * n // 2 + a\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    return (b-a)//n*(n*(a+b)//2)\n\ndef test_ap_sum():\n    assert ap_sum(1,5,2)==25\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    s = 0\n    while n:\n        a,b = map(int,input(\"Enter start and end: \").split())\n        s += ap_sum(a,b,n)\n        n -= 1\n    print(s)\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,d):\n    if d>0:\n        return (b-a)*(b+a+1)//2+d*b\n    else:\n        return (b-a)*(b+a+1)//2-d*b\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(first,last,increment):\n    sum=0\n    for i in range(first,last+1):\n        sum+=i\n    return sum-first\n\n#%%"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return True\n    elif month in [\"April\", \"June\", \"September\", \"November\"]:\n        return False\n    elif month == \"February\":\n        if year%4 == 0:\n            return True\n        else:\n            return False\n    else:\n        raise ValueError(f\"Check month: {month} doesn't exist in the list\")\n    ", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    dict_mon={\"January\":31,\"February\":28,\"March\":31,\"April\":30,\"May\":31,\"June\":30,\"July\":31,\"August\":31,\"September\":30,\"October\":31,\"November\":30,\"December\":31}\n    return dict_mon[month]==28\n\ndef check_monthnum2(month):\n    dict_mon={\"January\":31,\"February\":28,\"March\":31,\"April\":30,\"May\":31,\"June\":30,\"July\":31,\"August\":31,\"September\":30,\"October\":31,\"November\":30,\"December\":31}\n    return month in dict_mon and dict_mon[month]==28\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == 'February':\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month_name):\n    return month_name in {'January', 'March', 'May', 'July', 'August', 'October', 'December'}\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\nmonths = {\"January\": 31,\n          \"February\": 28,\n          \"March\": 31,\n          \"April\": 30,\n          \"May\": 31,\n          \"June\": 30,\n          \"July\": 31,\n          \"August\": 31,\n          \"September\": 30,\n          \"October\": 31,\n          \"November\": 30,\n          \"December\": 31}\n\n\ndef check_monthnum(month):\n    return months[month] == 28\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    return months_dict[month] == 28\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    month_dict={\"Jan\":31,\"Feb\":28,\"Mar\":31,\"Apr\":30,\"May\":31,\"Jun\":30,\"Jul\":31,\"Aug\":31,\"Sep\":30,\"Oct\":31,\"Nov\":30,\"Dec\":31}\n    return month_dict[month]==28\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == 'February':\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(monthname):\n    if monthname == \"February\":\n        return True\n    elif monthname == \"April\" or monthname == \"June\" or monthname == \"September\" or monthname == \"November\":\n        return False\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month in months:\n        if months[month]==28:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(txt):\n    if txt[-1].isalpha():\n        if txt[-1] in punctuation:\n            return \"Found a match!\"\n        else:\n            return \"Found a match!\"\n    else:\n        return \"No match\"\n\n# text_match_word(\"python.\")\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    \"\"\"Returns the first word at the end of a string, with optional punctuation.\n    If no match, returns the original text.\n    \"\"\"\n    punctuations = ['.', '!', '?']\n    if text.endswith(punctuations):\n        if not text.endswith(\". \"):\n            return \"Found a match!\"\n        else:\n            text = text.replace(\". \", \"\")\n    else:\n        return text\n    return text_match_word(text)\n\n#assert text_match_word(\"python.\")==('Found a match!')", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    if \".\" in text:\n        text = text.replace(\".\", \"\")\n    if \"(\" in text:\n        text = text.replace(\"(\", \"\")\n    if \")\" in text:\n        text = text.replace(\")\", \"\")\n    if \"\\\"\" in text:\n        text = text.replace(\"\\\"\", \"\")\n    if \"'\" in text:\n        text = text.replace(\"'\", \"\")\n    if \":\" in text:\n        text = text.replace(\":\", \"\")\n    if \";\" in text:\n        text = text.replace(\";\", \"\")\n    if \"!\" in text:\n        text = text.replace(\"!\", \"\")\n    if \"?\" in text:\n        text = text.replace(\"?\", \"\")\n    if \",\" in text:\n        text = text.replace(\",\", \"\")\n    if \"-\" in text:\n        text = text.replace(\"-\", \"\")\n    if \" \" in text:\n        text = text.replace(\" \", \"\")\n    if text.endswith(\".\"):\n        return \"Found a match!\"\n    else:\n        return \"No match found.\"\n\ntext_match_word(\"python.\")\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    pattern = r\"^[a-z,A-Z]*\\w{2,}$\"\n    if re.search(pattern,text, flags=re.IGNORECASE) is not None:\n        return (\"Found a match!\")\n    else:\n        return(\"Nothing found!\")\n\ntext_match_word(\"python.\")```\n\n### Output:\n\n<empty_output>", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\n# First, define a function that matches a word at the end of a string, with optional punctuation.\ndef match_word(text):\n  for word in text.split():\n    if word.endswith('.'):\n      return word\n  else:\n    return \"Not found\"\n\n# Next, define a test function that asserts whether the function found a match or not.\ndef test_match_word():\n  assert match_word(\"python.\") == 'python'\n  assert match_word(\"The quick brown fox jumps over the lazy dog.\") == 'dog'\n  assert match_word(\"The quick brown fox jumps over the lazy dog. \") == 'dog'\n  assert match_word(\"The quick brown fox jumps over the lazy dog? \") == 'dog'\n  assert match_word(\"The quick brown fox jumps over the lazy dog!\") == 'dog'\n  assert match_word(\"The quick brown fox jumps over the lazy dog!!!\") == 'dog'\n  assert match_word(\"The quick brown fox jumps over the lazy dog!!!.\") == 'dog'\n  assert match_word(\"The quick brown fox jumps over the lazy dog!!!?!\") == 'dog'\n  assert match_word(\"The quick brown fox jumps over the lazy dog!!!???!\") == 'dog'\n  print(\"Success!\")\n\n# Call the test function.\ntest_match_word()", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    word = input(\"Enter a word: \")\n    punctuation = input(\"Do you want any punctuation? Type yes or no: \")\n    if punctuation.lower() == \"yes\":\n        punctuation = True\n    elif punctuation.lower() == \"no\":\n        punctuation = False\n    else:\n        raise ValueError(\"Punctuation must be either yes or no.\")\n    return f'Found a match! ({word})' if (word.lower().endswith(text.lower()) and punctuation) else 'No match.'\n\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text: str) -> str:\n    \n    # Add code here:\n    # Your function should return the string \"Found a match!\" if the last word in the \n    # string matches the word provided (case-insensitive). Otherwise, it should return the \n    # string \"No match\"\n    pass```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\n**Expected Output:**```pythontext_match_word(\"python\") == 'No match'text_match_word(\"python.\") == 'Found a match!'```\n\n### Code:\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    if text[-4:]==\".com\":\n        return \"Found a match!\"\n    elif text[-4:]==\".edu\":\n        return \"Found a match!\"\n    elif text[-4:]==\".net\":\n        return \"Found a match!\"\n    else:\n        return \"No match.\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, word, punctuation = \".,\"):\n    if(text.lower().endswith(word.lower() + punctuation)):\n        return \"Found a match!\"\n    return \"Not found\"\n\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    \"\"\"\n    :param text: A string of text\n    :return: A string that contains the word at the end of the text with an added message\n    \"\"\"\n    if text.endswith(\".\"):\n        return \"Found a match!\"\n    elif text.endswith(\"?\"):\n        return \"Is that a question?\"\n    elif text.endswith(\"!\"):\n        return \"I'll answer the question!\"\n    else:\n        return \"What's the problem?\"\n\ntext_match_word(\"python.\")\ntext_match_word(\"python?\")\ntext_match_word(\"python!\")\ntext_match_word(\"python\")\ntext_match_word(\"python?\")\ntext_match_word(\"python!\")```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nWhat if we just wanted to print out the text \"Found a match!\" even if the text didn't end with a period? How would we fix that?\n\n### Code:\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        count += 1 if string[i] == string[0] else 0\n        count += 1 if string[-1] == string[i] else 0\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    # Write your code here\n    c = 0\n    for i in range(len(string)-1):\n        c += string[i] == string[-i-1]\n    return c\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    first_char = string[0]\n    for i in range(len(string)):\n        if i == 0:\n            continue\n        if string[i] == first_char:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    # Initialize count variable\n    count = 0\n    # Initialize two index variables\n    i = 0\n    j = len(str) - 1\n    # Iterate through the string from i to j\n    while i < j:\n        # Check if first character of substring is equal to last character of substring\n        if str[i] == str[j]:\n            # Increase count by 1\n            count += 1\n            # Update i and j\n            i += 1\n            j -= 1\n        else:\n            # If first character of substring is not equal to last character of substring\n            # Update j\n            j -= 1\n    # Return count\n    return count\n\n# Test cases", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    return len(set(str))\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    # code here\n    count = 0\n    for i in range(len(string)):\n        if(string[i]==string[len(string)-1]):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    c = 0\n    if not string:\n        return c\n\n    start = 0\n    end = 1\n    while end < len(string):\n        if string[start] == string[end]:\n            while end < len(string) and string[start] == string[end]:\n                end += 1\n            c += end - start\n            start = end\n            end = start + 1\n        else:\n            end += 1\n    return c\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(strng):\n    count = 0\n    for i in range(len(strng)):\n        count += count_Substring_With_Equal_Ends_Helper(strng, i)\n    return count\n\ndef count_Substring_With_Equal_Ends_Helper(strng, i):\n    count = 0\n    for j in range(i + 1, len(strng)):\n        if strng[i] == strng[j]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    if(len(string) == 1):\n        return 1\n\n    hash_table = dict()\n    count = 0\n    first = string[0]\n    last = string[-1]\n\n    hash_table[(first,last)] = 1\n\n    for i in range(len(string)):\n        sub = string[i:i+1]\n        if((sub[0],sub[-1]) in hash_table):\n            count += hash_table[(sub[0],sub[-1])]\n        else:\n            hash_table[(sub[0],sub[-1])] = 1\n\n    return count\n\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(x,y):\n    # Start with the largest possible value.\n    maxDivisor = max(x,y)\n    while(True):\n        if x % maxDivisor == 0 and y % maxDivisor == 0:\n            return maxDivisor\n        maxDivisor -= 1\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start, end):\n\tif start == end:\n\t\treturn start\n\tfor i in range(start, end+1):\n\t\tif end % i == 0:\n\t\t\treturn i\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n\tif a >= b:\n\t\ttemp = b\n\t\tb = a\n\t\ta = temp\n\tif a == 1:\n\t\treturn a\n\tif b < a:\n\t\treturn a\n\telif b == a:\n\t\treturn a\n\telif a > b:\n\t\ta = a % b\n\t\tif a == 0:\n\t\t\treturn b\n\t\treturn find_Divisor(b,a)\n\n#assert find_Divisor(2,2) == 2\n#assert find_Divisor(5,10) == 5\n#assert find_Divisor(13,19) == 3\n#assert find_Divisor(14,18) == 7", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(n,start,end):\n    if start > end:\n        return 1\n    else:\n        mid = (start + end) // 2\n        if n % mid == 0:\n            return mid\n        else:\n            if n % mid < n % (mid+1):\n                return find_Divisor(n,mid,end)\n            else:\n                return find_Divisor(n,start,mid)\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a,b):\n    if b > a:\n        a,b = b,a\n    for i in range(a,b+1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return a\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start,end):\n    if end == 1:\n        return start\n    divisor = []\n    for i in range(start,end+1):\n        if end%i == 0:\n            divisor.append(i)\n    return max(divisor)\n    ", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start,end):\n\tmaxDivisor = 0\n\tfor i in range(start,end+1):\n\t\tif i%maxDivisor==0:\n\t\t\tmaxDivisor = i\n\t\telif i%maxDivisor!=0 and i%maxDivisor<i:\n\t\t\tmaxDivisor = i%maxDivisor\n\treturn maxDivisor\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a, b):\n    if a == 0:\n        return 0\n    if a == 1:\n        return b\n    # Divisors are odd or even.\n    # Max occuring number is always odd\n    # Max occuring number is always an odd factor of a\n    # Start with 2.\n    while a % 2 == 0:\n        a /= 2\n    while a > 1:\n        if a >= b:\n            b = a\n            a /= 2\n        else:\n            a = a - 1\n    return int(b)", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(x, y):\n    list_of_divisors = []\n    for num in range(x, y + 1):\n        if x % num == 0:\n            list_of_divisors.append(num)\n    return max(list_of_divisors)\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    maxDivisor = 0\n    for i in range(a,b):\n        if a % i == 0:\n            if i > maxDivisor:\n                maxDivisor = i\n    return maxDivisor\n    "], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(numbers):\n    # Write your code here.\n    numbers.sort()\n    return numbers[0] + numbers[1] + numbers[2]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(numbers):\n    \"\"\"\n    >>> sum_three_smallest_nums([10,20,30,40,50,60,7])\n    37\n    \"\"\"\n    numbers = list(numbers)\n    numbers.sort()\n    sum_3_smallest_numbers = numbers[0] + numbers[1] + numbers[2]\n    return sum_3_smallest_numbers\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    result = 0\n    nums.sort()\n    for i in range(0,3):\n        result += nums[i]\n    return result\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return nums[0]+nums[1]+nums[2]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(lst):\n    sum_of_three_smallest = 0\n    for i in range(len(lst)):\n        if i > 2:\n            break\n        elif i == 0:\n            sum_of_three_smallest = lst[0]\n        elif i == 1:\n            sum_of_three_smallest = sum_of_three_smallest + lst[1]\n        else:\n            sum_of_three_smallest = sum_of_three_smallest + lst[2]\n    return sum_of_three_smallest\n\ndef sum_three_smallest_nums2(lst):\n    sum_of_three_smallest = sorted(lst)[0:3]\n    return sum(sum_of_three_smallest)\n\ndef sum_three_smallest_nums3(lst):\n    sum_of_three_smallest = sorted(lst)[0:3]\n    return sum_of_three_smallest\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    smallest = min(nums)\n    third_smallest = min(nums)\n    for num in nums:\n        if num < smallest and num != third_smallest:\n            third_smallest = smallest\n            smallest = num\n        elif num < third_smallest and num != smallest:\n            third_smallest = num\n    return smallest + third_smallest + third_smallest\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    \"\"\"\n    Your solution here.\n    \"\"\"\n    nums.sort()\n    return sum(nums[:3])", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    return sum(sorted(nums)[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(arr):\n    return sum(sorted(arr)[0:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    \"\"\"\n    input: \n        list of numbers\n    returns:\n        integer sum of the three lowest numbers\n    \"\"\"\n    \n    if len(nums) < 3:\n        raise ValueError(\"List must contain at least 3 items.\")\n    \n    lowest = min(nums)\n    \n    if lowest < 0:\n        raise ValueError(\"Number in list is not positive.\")\n        \n    sum_of_nums = 0\n    \n    for i in nums:\n        if i == lowest:\n            continue\n        elif i < lowest:\n            sum_of_nums += lowest\n            lowest = i\n        elif i > lowest:\n            sum_of_nums += i\n    return sum_of_nums"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set):\n    return tuple(set)\n\n# assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n# assert set_to_tuple({3, 2, 1, 5, 4}) == (1, 2, 3, 4, 5)\n\n# print(set_to_tuple({1, 2, 3, 4, 5}))\n# print(set_to_tuple({3, 2, 1, 5, 4}))\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_):\n    return tuple(set_)\n\n\n# def set_to_tuple(set_):\n#     # Your code here\n#     pass\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set_):\n    return tuple(sorted(set_))\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nfrom typing import Tuple\n\nfrom returns.curry import curry\n\n\n@curry\ndef set_to_tuple(set_: set) -> Tuple:\n    \"\"\"\n    Convert the given set into ordered tuples.\n    :param set_: set to convert\n    :type set_: set\n    :return: tuple with values from given set\n    :rtype: tuple\n    \"\"\"\n    return tuple(set_)", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    # s = set(s)\n    s.sort()\n    return tuple(s)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(s):\n    # my solution\n    l = list(s)\n    l.sort()\n    return tuple(l)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_):\n    return tuple(sorted(set_))\n\n# Test", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(s):\n    tup = tuple(sorted(s))\n    return tup\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef set_to_tuple(set_: set) -> Tuple:\n    \"\"\"\n    Args:\n        set_: Set of numbers\n\n    Returns:\n        Ordered Tuple\n    \"\"\"\n    return tuple(sorted(set_))\n\n\ndef set_to_tuple_2(set_: set) -> Tuple:\n    \"\"\"\n    Args:\n        set_: Set of numbers\n\n    Returns:\n        Ordered Tuple\n    \"\"\"\n    return tuple(set_)"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nimport bisect\nfrom typing import List\n\n\ndef find_minimum_range(arr: List[List[int]]) -> (int, int):\n    # O(nlogn)\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n\n    Brute Force:\n    - Sort each array in ascending order\n    - Iterate through each array and compare to the previous max_element\n    - Iterate through each array and compare to the next min_element\n    \"\"\"\n    # Sort each array in ascending order\n    for i in range(len(arr)):\n        arr[i].sort()\n    # Iterate through each array and compare to the previous max_element\n    for i in range(len(arr)):\n        if i == 0:\n            max_element = arr[i][-1]\n        else:\n            max_element = min(max_element, arr[i][-1])\n    # Iterate through each array and compare to the next min_element\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            min_element = arr[i][0]\n        else:\n            min_element = max(min_element, arr[i][0])\n    return min_element, max_element\n\n\ndef find_minimum_range2(arr: List[List[int]]) -> (int, int):\n    # O(n)\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Brute Force:\n    - Iterate through each element in each array\n    - Check if element is within range of each array\n    \"\"\"\n    # Iterate through each element in each array\n    for i in range(len(arr)):\n        for element in arr[i]:\n            # Check if element is within range of each array\n            if element < arr[i][0]:\n                arr[i][0] = element\n            elif element > arr[i][-1]:\n                arr[i][-1] =", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    left = []\n    right = []\n    for row in arr:\n        left.append(row[0])\n        right.append(row[-1])\n    left.sort()\n    right.sort()\n    return left[0], right[-1]", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arr):\n    # Complete this function\n    s1, s2 = sorted(arr[0]), sorted(arr[1])\n    a = s1[0]\n    b = s2[0]\n    c = s1[0]\n    d = s2[0]\n    for i in range(1,len(s1)):\n        if s1[i]>s2[i]:\n            c = s1[i]\n        else:\n            c = s2[i]\n    for i in range(1,len(s2)):\n        if s1[i]<s2[i]:\n            d = s1[i]\n        else:\n            d = s2[i]\n    if c<d:\n        a = c\n        b = d\n    else:\n        a = d\n        b = c\n    return (a,b)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrs):\n    # your code goes here\n    if len(arrs) == 0:\n        return ()\n    min_el = min([min(arr) for arr in arrs])\n    max_el = max([max(arr) for arr in arrs])\n    for arr in arrs:\n        if min(arr) <= min_el and min(arr) <= max_el:\n            min_el = min(min_el, min(arr))\n        if max(arr) >= max_el and max(arr) >= min_el:\n            max_el = max(max_el, max(arr))\n    return (min_el, max_el)\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arr):\n    m = min(arr[0])\n    M = max(arr[0])\n    for i in arr[1:]:\n        m = min(m, min(i))\n        M = max(M, max(i))\n    return (m, M)\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(lst):\n    low = min(min(arr) for arr in lst)\n    high = max(max(arr) for arr in lst)\n    return low, high\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    \"\"\"\n    Returns a tuple of the smallest range that includes at-least one element from each of the given arrays.\n    :param arrays: a list of lists of numbers\n    :return: a tuple of the smallest range that includes at-least one element from each of the given arrays\n    \"\"\"\n    # base case: check if the list is empty\n    if not arrays:\n        return None\n\n    # base case: check if the list is only one element\n    if len(arrays) == 1:\n        return (min(arrays[0]), max(arrays[0]))\n\n    # check if each element of the first array is smaller than the minimum of the rest of the arrays\n    if min(arrays[0]) <= min([min(array) for array in arrays[1:]]):\n        return (min(arrays[0]), min([min(array) for array in arrays[1:]]))\n\n    # check if each element of the first array is bigger than the maximum of the rest of the arrays\n    if max(arrays[0]) >= max([max(array) for array in arrays[1:]]):\n        return (max([max(array) for array in arrays[1:]]), max(arrays[0]))\n\n    # if none of the above work, check if the middle of the first array is between the smallest range and the max\n    if min(arrays[0]) < min([min(array) for array in arrays[1:]]):\n        if max([max(array) for array in arrays[1:]]) < max(arrays[0]):\n            return (min([min(array) for array in arrays[1:]]), max(arrays[0]))\n\n    # if none of the above work, check if the middle of the first array is between the smallest range and the max\n    if max(arrays[0]) > max([max(array) for array in arrays[1:]]):\n        if min([min(array) for array in arrays[1:]]) > min(arrays[", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrs):\n    if not arrs:\n        return (0, 0)\n    min_val = min(min(arr) for arr in arrs)\n    max_val = max(max(arr) for arr in arrs)\n    return (min_val, max_val)\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nfrom typing import List\n\n\ndef find_minimum_range(nums: List[List[int]]) -> List[int]:\n    min_max = []\n    for i in nums:\n        min_max.append([min(i), max(i)])\n\n    min_range = min(min_max, key=lambda x: x[1] - x[0])\n    return min_range[0], min_range[1]"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\n#count digits and letters in a string\ndef dig_let(s):\n    num_dig = 0\n    num_let = 0\n    for i in s:\n        if i.isdigit():\n            num_dig +=1\n        else:\n            num_let +=1\n    return num_dig,num_let", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(string):\n    count_digits = 0\n    count_letters = 0\n    for letter in string:\n        if letter.isdigit():\n            count_digits += 1\n        else:\n            count_letters += 1\n    return count_letters, count_digits\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    count_dig = 0\n    count_let = 0\n    for ch in s:\n        if ch.isdigit():\n            count_dig += 1\n        else:\n            count_let += 1\n    return (count_dig,count_let)\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    return (len(s), sum(c.isalpha() for c in s))\n\n#Test", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(word):\n    d = sum([1 for char in word if char.isalpha()])\n    l = sum([1 for char in word if not char.isalpha()])\n    return (d,l)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    pass\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(string):\n    digit = 0\n    letter = 0\n    for i in string:\n        if(i.isdigit()):\n            digit += 1\n        elif(i.isalpha()):\n            letter += 1\n        else:\n            continue\n    return (digit,letter)\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(x):\n    print(x)\n    if isinstance(x, str):\n        c = 0\n        l = 0\n        for i in x:\n            if (i.isdigit()):\n                c += 1\n            elif (i.isalpha()):\n                l += 1\n            else:\n                c += 1\n    else:\n        c = 0\n        l = 0\n\n    return (c,l)\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    return len(s),len([i for i in s if i.isalpha()])\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\nimport math\ndef count_Odd_Squares(l,h):\n    ans = 0\n    for i in range(l,h+1):\n        x = i*i\n        y = []\n        # print(x)\n        for j in range(2,int(math.sqrt(x))+1):\n            if(x%j==0):\n                y.append(j)\n        if(len(y)%2==1):\n            ans += 1\n    return ans\n\ndef test_function(test_case):\n    l = test_case[0]\n    h = test_case[1]\n    if count_Odd_Squares(l,h) == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([5,100,8])\ntest_function([1,500,28])\ntest_function([1,500,27])", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(low,high):\n    ans = 0\n    for i in range(low,high+1):\n        if(i**0.5)%1 == 0:\n            continue\n        for j in range(2,int(i**0.5)+1):\n            if(i%j==0):\n                break\n        else:\n            ans += 1\n    return ans\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(a, b):\n    lst = []\n    for i in range(a, b):\n        temp = set()\n        for j in range(1, int(i ** 0.5) + 1):\n            if i % j == 0:\n                temp.add(j)\n        if len(temp) % 2 != 0:\n            lst.append(i)\n    return len(lst)\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\nimport math\n\ndef count_Odd_Squares(n,m):\n\tcount = 0\n\tfor i in range(n,m+1):\n\t\tif (math.sqrt(i) % 1) != 0:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\nfrom math import sqrt\n\n\ndef check_odd_factors(n):\n    return sum([1 for i in range(2,int(sqrt(n))+1) if n%i==0 and n != i*i])\n\n\ndef count_odd_factors(start, stop):\n    return sum([check_odd_factors(i) for i in range(start,stop+1)])\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start,stop):\n    \"\"\"\n    This is an example solution to the problem,\n    you are encouraged to come up with your own solution.\n    \"\"\"\n    result = 0\n    for i in range(start,stop+1):\n        for j in range(start,stop+1):\n            if is_Odd_Square(i) and is_Odd_Square(j):\n                result += 1\n    return result\n\ndef is_Odd_Square(n):\n    \"\"\"\n    This is an example helper function to the problem,\n    you are encouraged to come up with your own solution.\n    \"\"\"\n    return n%2 and n**0.5%1 == 1\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(n, m):\n    total = 0\n    for x in range(n,m+1):\n        if is_odd(x) and is_square(x):\n            total += 1\n    return total\n\ndef is_square(x):\n    return int(sqrt(x))**2 == x\n\ndef is_odd(x):\n    return x%2 == 1", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(a,b):\n    return len([i for i in range(a,b+1) if sum(i**i) % 2 != 0])\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(lo, hi):\n    \"\"\"\n    Given a range of integers, return the number of integers within the range that have an odd number of factors.\n    \"\"\"\n    count = 0\n    for i in range(lo, hi + 1):\n        fac = 0\n        for j in range(1,i+1):\n            if (i % j) == 0:\n                fac += 1\n        if (fac % 2) == 1:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(low,high):\n    if low<0 or high<0 or low>high:\n        return 0\n    else:\n        i=1\n        ans=0\n        while i<=high:\n            if is_Odd_Square(i):\n                ans+=1\n            i+=1\n        return ans\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(list_num):\n    list_diff = []\n    for i in range(1, len(list_num)):\n        list_diff.append(list_num[i] - list_num[i-1])\n    return list_diff\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\nimport pytest\n\n\ndef diff_consecutivenums(numbers):\n    result = []\n    for i in range(0, len(numbers) - 1):\n        result.append(numbers[i + 1] - numbers[i])\n    return result\n\n\ndef test_diff_consecutivenums():\n    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]) == [0, 2, 1, 0, 1, 1, 1]\n\n\ndef test_diff_consecutivenums_another():\n    assert diff_consecutivenums([1, 3, 4, 4, 5, 6, 7]) == [2, 1, 0, 1, 1, 1]\n\n\ndef test_diff_consecutivenums_empty():\n    assert diff_consecutivenums([]) == []\n\n\ndef test_diff_consecutivenums_error():\n    with pytest.raises(ValueError):\n        diff_consecutivenums(\"hello\")", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\nimport pytest\ndef diff_consecutivenums(numbers):\n    if len(numbers)<2:\n        return []\n    return [numbers[i+1]-numbers[i] for i in range(len(numbers)-1)]", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(lst):\n    return [abs(x-y) for x,y in zip(lst,lst[1:])]\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    #return [num - nums[i-1] for i,num in enumerate(nums)]\n    return list(map(lambda x,y: x-y, nums[1:],nums))\n    ", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\n# Function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(arr):\n    return [b-a for a,b in zip(arr, arr[1:])]\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    ans = []\n    for i in range(len(nums)-1):\n        ans.append(nums[i+1]-nums[i])\n    return ans\n\ndef main():\n    print(\"The difference between the consecutive numbers is {}\".format(diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])))\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\nimport unittest\n\n\ndef diff_consecutivenums(nums):\n    output = []\n    for i in range(len(nums)-1):\n        output.append(nums[i+1] - nums[i])\n    return output\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(a_list):\n    diff_list = []\n    for i in range(len(a_list)-1):\n        diff_list.append(a_list[i+1] - a_list[i])\n    return diff_list\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(arr):\n    result = []\n    for i in range(len(arr)-1):\n        result.append(arr[i+1] - arr[i])\n    return result\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n\treturn n*k + k*(k+1)//2\n\n\ndef e_kn(n, k):\n\t\"\"\"\n\tCalculates the number of ways to tile a rectangle of size n by k,\n\tby rotating it 90 degrees clockwise by 180 degrees and then flipping it over\n\t(or flip it over directly).\n\t\"\"\"\n\n\tif k == 0:\n\t\treturn 0\n\n\tif k == 1:\n\t\treturn 1\n\n\tif k == 2:\n\t\treturn 2\n\n\tif n == 1:\n\t\treturn 1\n\n\tif n == 2:\n\t\treturn 2\n\n\tif n == k:\n\t\treturn 1\n\n\telif n == k + 1:\n\t\treturn 2\n\n\telse:\n\t\treturn e_kn(n - 1, k - 1) + e_kn(n - 1, k)\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if k == 1:\n        return 1 + zigzag(n - 1, 1)\n    if k == 2:\n        return 1 + zigzag(n - 2, 2)\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    return (n - 1) * (n - 2) * k // 2", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\n# answer is the number of 1 to k in binary representation of n\n\n\ndef zigzag(n, k):\n    answer = 0\n    while k > 0:\n        if n & 1:\n            answer += k\n            k -= 1\n        n >>= 1\n    return answer\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if k < 0 or k > n:\n        return 0\n\n    if n < 3:\n        return n\n\n    a = b = 2\n    c = d = 3\n\n    for i in range(4, n+1):\n        # print(a, b, c, d)\n        if i % k == 0:\n            if i % 2 == 1:\n                a = b + c\n                b = c\n                c = d\n                d = i\n            else:\n                b = a + c\n                a = c\n                c = d\n                d = i\n        else:\n            if i % 2 == 1:\n                a += c\n                b += c\n                c = d\n                d = i\n            else:\n                b += c\n                a += c\n                c = d\n                d = i\n\n    return d\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if n == 0:\n        return 0\n    if n < k:\n        return n\n    if n % k == 0:\n        return (n//k)*k\n    if n % k == 1:\n        return (n//k)*k + k - (n % k)\n    if n % k == k - 1:\n        return (n//k)*k + 2*k - 2*(n % k)\n    if n % k == k:\n        return (n//k)*k + 3*k - 3*(n % k)\n    if n % k == k + 1:\n        return (n//k)*k + 4*k - 4*(n % k)\n\ndef test():\n    assert zigzag(1, 2) == 1\n    assert zigzag(1, 1) == 1\n    assert zigzag(1, 3) == 1\n    assert zigzag(2, 2) == 2\n    assert zigzag(2, 1) == 2\n    assert zigzag(2, 3) == 2\n    assert zigzag(3, 2) == 3\n    assert zigzag(3, 1) == 3\n    assert zigzag(3, 3) == 3\n    assert zigzag(4, 2) == 4\n    assert zigzag(4, 1) == 4\n    assert zigzag(4, 3) == 5\n    assert zigzag(5, 2) == 5\n    assert zigzag(5, 1) == 5\n    assert zigzag(5, 3) == 6\n    assert zigzag(6, 2) == 6\n    assert zigzag(6, 1) == 6\n    assert zigzag(6, 3) == 7\n    assert zigzag(7, 2) == 7\n    assert zigzag(7, 1) == 7\n    assert zigzag", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    num = (n - 1) // 2 + 1\n    if k == 1:\n        return num\n    elif k == 2:\n        return (n + 1) // 2\n    else:\n        return (num - 1 + k - 2) % (k - 1) + 1\n\n# assert(zigzag(4, 2) == 4)\n# assert(zigzag(4, 3) == 5)\n# assert(zigzag(4, 4) == 4)\n# assert(zigzag(4, 5) == 5)\n# assert(zigzag(5, 1) == 3)\n# assert(zigzag(5, 2) == 2)\n# assert(zigzag(5, 3) == 2)\n# assert(zigzag(5, 4) == 3)\n# assert(zigzag(5, 5) == 2)", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    s = 0\n    # k = 2\n    # n = 3\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n < 2:\n        return 1\n    else:\n        for i in range(n - 1, 0, -1):\n            s += i * k * i + (2 * k - 1) * i + 1\n        return s", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    # TODO\n    pass\n\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n\n\n# My initial solution\ndef zigzag(n, k):\n    # cases\n    if n == 0 or k == 0:\n        return 0\n    elif k > n:\n        return 0\n    else:\n        # divide and conquer\n        mid = n // 2\n        left_subtree = zigzag(mid, k)\n        right_subtree = zigzag(n - mid, k)\n        if k == 1:\n            return left_subtree + right_subtree\n        if k > 1:\n            return left_subtree + right_subtree + mid\n\n\n# Brute force\ndef zigzag_brute_force(n, k):\n    if k == 1:\n        return n\n    else:\n        zigzag_sum = 0\n        for i in range(1, n + 1):\n            if k == 1:\n                zigzag_sum += i\n            elif k > 1:\n                zigzag_sum += i + zigzag_brute_force(n - i, k - 1)\n        return zigzag_sum\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    \"\"\"\n    >>> zigzag(4, 3)\n    5\n    \"\"\"\n    return int(n/k) * (2*(n/k)+1) - 2*(k-1)\n\ndef zigzag_fast(n, k):\n    \"\"\"\n    >>> zigzag_fast(4, 3)\n    5\n    \"\"\"\n    return (n//k) * (2*(n//k)+1) - 2*(k-1)\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(a, b):\n    squares = 0\n    for i in range(a):\n        for j in range(b):\n            squares += 1\n    return squares\n\ndef test_count_squares():\n    assert count_Squares(4,3) == 20", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(height, width):\n    square_count = 0\n    for i in range(height):\n        for j in range(width):\n            square_count += 1\n    return square_count\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    \"\"\"\n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(5,4)\n    50\n    \"\"\"\n    return n*m", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a, b):\n    return a*b + a*b + a*b + a*b\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(x,y):\n\treturn x*y", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(rows, cols):\n    # your code here\n    return rows*cols\n\n# test", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a,b):\n    count = 0\n    for i in range(a):\n        for j in range(b):\n            if i%2 == 0 and j%2 == 0:\n                count+=1\n            if i%2 != 0 and j%2 != 0:\n                count+=1\n    return count\n\n\n#assert count_Squares(4,3) == 20\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n#answer\ndef count_squares(x,y):\n\treturn x**2 + y**2\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(m,n):\n    \"\"\"\n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(2,3)\n    6\n    >>> count_Squares(3,4)\n    12\n    \"\"\"\n    return m*n\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(a,b):\n    count = 0\n    for i in range(a+1):\n        for j in range(b+1):\n            if (i * i) == j:\n                count += 1\n    return count\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(count_Squares(a,b))\n\nmain()"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[-1]", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom math import factorial\n\ndef find_ways(length, values=[0, 0, 0, 1, 2, 3, 4, 5]):\n    ways = [0] * (length + 1)\n    ways[0] = 1\n    for i in range(1, length + 1):\n        for j in range(i - 1, -1, -1):\n            ways[i] += ways[j] * values[i - j]\n    return ways[length]\n\ndef find_ways_recurs(length, values=[0, 0, 0, 1, 2, 3, 4, 5]):\n    if length == 0:\n        return 1\n    return sum(find_ways_recurs(length - j, values) * values[j] for j in range(length + 1))\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\n# dp[i] = the number of ways to create array of size i having non-negative prefix sums\n\ndef find_ways(k):\n    dp = [0] * (k+1)\n    dp[0] = 1\n    for i in range(1, k+1):\n        dp[i] = 0\n        for j in range(0, i):\n            dp[i] += dp[j]\n        dp[i] += 1\n    return dp[k]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(length):\n    counts = [0, 1]\n    for n in range(2, length+1):\n        counts.append(counts[n-1]+counts[n-2])\n    return counts[length]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n, prefix_sum=0, ways=0):\n    \"\"\"\n    Number of ways to reach prefix_sum by adding values 1..n to the current prefix_sum.\n    :param n: Number of values to add to the prefix_sum.\n    :param prefix_sum: Current prefix_sum.\n    :param ways: Count of ways to reach this prefix_sum.\n    :return: Total number of ways.\n    \"\"\"\n    if prefix_sum == 0:\n        ways += 1\n        return ways\n\n    if prefix_sum < 0:\n        return ways\n\n    for v in range(1, n + 1):\n        ways = find_ways(n, prefix_sum - v, ways)\n\n    return ways\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\nfrom functools import lru_cache, reduce\n\n\ndef find_ways(n):\n    return reduce(\n        lambda x, y: x * y,\n        [\n            find_ways(n - i) for i in range(n + 1)\n        ]\n    )\n\n\ndef find_ways2(n):\n    return sum([find_ways(n - i) for i in range(n + 1)])\n\n\n@lru_cache(maxsize=None)\ndef find_ways3(n):\n    if n == 0:\n        return 1\n    return sum([find_ways(n - i) for i in range(n + 1)])\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom typing import List\n\n\ndef find_ways(k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n\n    :param k:\n    :return:\n    \"\"\"\n    if k == 1:\n        return 1\n    prefix_sums = [0] * (k + 1)\n    prefix_sums[1] = 1\n    for i in range(2, k + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + prefix_sums[i - 2] + prefix_sums[i - 3]\n    return prefix_sums[k]", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\nfrom collections import Counter\n\n\ndef find_ways(n):\n    \"\"\"Time Complexity: O(n*n)\"\"\"\n    # create a list of lists to keep track of the ways\n    ways = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    # list of sums which we can choose from\n    sums = [i for i in range(n+1)]\n    # for every number, the number of ways are 0\n    for i in range(1, n+1):\n        ways[i][0] = 1\n    # for every number, the number of ways are 1\n    for i in range(1, n+1):\n        ways[i][i] = 1\n    # for every prefix sum, the number of ways are 0\n    for i in range(1, n+1):\n        ways[0][i] = 0\n    # for every number and sum,\n    # the number of ways are the number of ways of the prefix sum minus the number of ways of the prefix sum with previous number\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1] - ways[i-1][j-1]\n    # the total number of ways is the number of ways for the last sum\n    return ways[-1][-1]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef count_ways(arr, n, length):\n    dp = [[0] * n for _ in range(length+1)]\n    dp[0][0] = 1\n    for i in range(1, length+1):\n        for j in range(1, n+1):\n            for k in range(j, n+1):\n                dp[i][j] += dp[i-1][k-1]\n                dp[i][j] %= 1000000007\n    return dp[length][0]\n\n\ndef test_count_ways():\n    assert count_ways([1, 2, 3, 4], 4, 3) == 7\n    assert count_ways([3, 1, 4, 1], 4, 3) == 6\n    assert count_ways([2, 3, 1, 4], 4, 3) == 7\n    assert count_ways([2, 2, 1, 3], 4, 3) == 7\n    assert count_ways([1, 2, 3, 4, 5], 5, 2) == 12\n    assert count_ways([2, 2, 2, 3, 3], 5, 2) == 13\n    assert count_ways([2, 2, 2, 3, 3], 5, 3) == 14\n    assert count_ways([2, 2, 2, 3, 3], 5, 4) == 15\n    assert count_ways([2, 2, 2, 3, 3], 5, 5) == 16\n    assert count_ways([2, 2, 2, 3, 3], 5, 6) == 16\n    assert count_ways([2, 2, 2, 3, 3], 5, 7) == 17\n    assert count_ways([2, 2, 2, 3, 3], 5, 8) == 18", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    #your code goes here\n    #return \"Yes\" if string is binary else \"No\"\n    #print(\"Yes\" if string is binary else \"No\")\n    if string.isdigit():\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    #split the string into list of strings using split function\n    lst = string.split(\"0\")\n    #checking for even number of strings in the list\n    if len(lst) % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n# code here\ndef check(num):\n    if len(num) % 2 == 0:\n        for i in num:\n            if i != \"0\" and i != \"1\":\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\"\n    ", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(st):\n    if st[0]=='1':\n        print(\"Yes\")\n    else:\n        print(\"No\")\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(str):\n    if str[0] == \"0\" and str[-1] == \"1\":\n        return \"Yes\"\n    else:\n        return \"No\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    binary = ''\n    for i in s:\n        if i == '0' or i == '1':\n            binary += i\n    return binary if len(binary) % 2 == 0 else 'No'\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    if string.startswith('0b') or string.startswith('0B') or string.startswith('0X'):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Alternative code\ndef check_2(string):\n    if len(string) % 2:\n        return 'No'\n    else:\n        return 'Yes'", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    # your code goes here\n    count = 0\n    for i in string:\n        if i == \"1\":\n            count+=1\n    if count <= 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n# Take a string input from user and return a boolean value\ndef check(input_string):\n    # Initialize a variable called binary_string\n    binary_string = \"\"\n    # Initialize a variable called check_binary_string\n    check_binary_string = []\n    # Loop until the input string is empty\n    while input_string:\n        # Append the first character of the input string to binary_string\n        binary_string += input_string[0]\n        # Append the index of the first character of the input string to check_binary_string\n        check_binary_string.append(input_string[0])\n        # Remove the first character of the input string\n        input_string = input_string[1:]\n\n    # Loop through check_binary_string\n    for i in check_binary_string:\n        # If the first character of check_binary_string is not equal to 0 or 1\n        if i != \"0\" and i != \"1\":\n            # Return False\n            return False\n\n    # Return True\n    return True\n\n\n# Call the check() function and print the output", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    i=0\n    if string[i] != \"0\" or string[i] != \"1\":\n        return \"No\"\n\n    for i in range(1,len(string)):\n        if string[i] != string[i-1]:\n            return \"No\"\n\n    return \"Yes\"\n\n\n\n# print(check(\"0010\"))\n# print(check(\"0111010111\"))\n# print(check(\"0000\"))\n# print(check(\"01010101010\"))"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    # Write your code here.\n    count = {}\n    for i in s:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    res = len(s)\n    for i in count.keys():\n        res = res - count[i]\n        if res == 1:\n            break\n    return res\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(str):\n    count = 0\n    for i in range(len(str)):\n        count += str.count(str[i])\n    if(count==1):\n        return 1\n    else:\n        return len(str)", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(str):\n    return min(len(s) for s in str if s.count('a')==1 or s.count('b')==1)\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\nfrom collections import defaultdict\n\ndef minimum_Length(string):\n    from collections import defaultdict\n    count = defaultdict(int)\n    for c in string:\n        count[c] += 1\n    \n    for c in string:\n        if count[c] == 1:\n            count.pop(c, None)\n\n    return len(string) - len(count)\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\nfrom collections import Counter\n\ndef minimum_Length(str):\n    dict_count = Counter(str)\n    if len(dict_count) > 1:\n        return -1\n    else:\n        return len(str) - dict_count[list(dict_count.keys())[0]]\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    '''\n    :param: string - input string\n    :return: int - the length of the string after removing occurrence of only one character\n    '''\n    count = 0\n    for i in string:\n        if string.count(i) == 1:\n            count += 1\n    return len(string) - count\n\n\ndef test_function():\n    assert minimum_Length(\"mnm\") == 1\n    assert minimum_Length(\"aaccd\") == 2\n    assert minimum_Length(\"aabb\") == 2\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    for i in string:\n        temp = string.replace(i, \"\")\n        if len(temp) == len(string):\n            return len(temp)\n    return len(string)\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\nimport string\n\ndef minimum_Length(s):\n    if len(s) < 2:\n        return len(s)\n\n    s_set = set(s)\n    # print(s_set)\n    min_len = len(s)\n    for char in s_set:\n        if char != ' ':\n            sub_s = list(s)\n            sub_s.remove(char)\n            sub_s = ''.join(sub_s)\n            min_len = min(min_len, minimum_Length(sub_s))\n\n    return min_len\n\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\nimport math\n\ndef minimum_Length(s):\n    if len(s) == 1:\n        return 1\n    else:\n        for i in range(len(s)):\n            s = s.replace(s[i], '')\n        return len(s)\n\n\ndef test_function(test_case):\n    solution = minimum_Length(test_case[0])\n    output = test_case[1]\n    if solution == output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [\"mnm\", 1]\ntest_function(test_case_1)\ntest_case_2 = [\"aaa\", 0]\ntest_function(test_case_2)", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n  if len(string) <= 1:\n    return len(string)\n  m = len(string)\n  for i in range(len(string)):\n    if string.count(string[i]) == 1:\n      string = string.replace(string[i],'',1)\n  return len(string)\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(array,k,element):\n    for i in array:\n        if i==element and count==k:\n            return i\n        count+=1\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k, e):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == e:\n            count += 1\n        if count == k:\n            return arr[i]\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(array,k,value):\n    i = 0\n    while i<len(array):\n        if array[i]==value and k==1:\n            return value\n        elif array[i]==value and k>1:\n            k-=1\n            i+=1\n        else:\n            i+=1\n    return -1", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n#solution 1\ndef first_element(arr,k):\n    \"\"\"\n    This is the first solution to find the first element occurring k times in a given array.\n    This function takes two inputs:\n    arr: the array to be searched\n    k: the number of times we want to find the first element\n    The function returns the first element occurring k times in the array or -1 if the element does not exist in the array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == k:\n            return arr[i]\n        else:\n            count = count+1\n    if count == len(arr):\n        return -1\n#solution 2\ndef first_element(arr,k):\n    \"\"\"\n    This is the second solution to find the first element occurring k times in a given array.\n    This function takes two inputs:\n    arr: the array to be searched\n    k: the number of times we want to find the first element\n    The function returns the first element occurring k times in the array or -1 if the element does not exist in the array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == k:\n            return arr[i]\n    return -1\n#solution 3\ndef first_element(arr,k):\n    \"\"\"\n    This is the third solution to find the first element occurring k times in a given array.\n    This function takes two inputs:\n    arr: the array to be searched\n    k: the number of times we want to find the first element\n    The function returns the first element occurring k times in the array or -1 if the element does not exist in the array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == k:\n            return arr[i]\n        else:\n            return -1\n#solution 4\ndef first_element(arr,k):\n    \"\"\"\n    This is the fourth solution to find the first element occurring k times in a given array.\n    This function takes two inputs:\n    arr: the array to be searched\n    k: the number of times we want to find the first element\n    The", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,k,x):\n    if k < 1 or k > len(arr):\n        return 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return 0\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,n,k):\n    cnt = 1\n    index = 0\n    for i in range(1,n):\n        if arr[i] == arr[i-1]:\n            cnt += 1\n            if cnt == k:\n                index = i-1\n                break\n    return index\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,n,k):\n    c=Counter(arr)\n    for key, value in c.items():\n        if value == k:\n            return key\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,n,k):\n    if k>n:\n        print(\"Invalid arguments\")\n        return -1\n    else:\n        h = {}\n        for i in range(len(arr)):\n            if arr[i] not in h:\n                h[arr[i]]=1\n            else:\n                h[arr[i]]+=1\n        for i in h:\n            if h[i]==k:\n                return i\n        return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_element(arr, k, n):\n    for i in range(0,len(arr)):\n        if arr[i] == k:\n            return arr[i]\n        if i == n-1:\n            return -1\n            \n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, n, k):\n    return arr[arr.index(arr[0]) + k]\n"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    characters = []\n    for c in string:\n        if c in characters:\n            return False\n        characters.append(c)\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(s):\n    if len(s) != len(set(s)):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str1):\n    if len(str1) <= 1:\n        return True\n    else:\n        return (str1.find(str1[0]) == -1) and unique_Characters(str1[1:])\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str):\n    # Finding out the length of the string.\n    length = len(str)\n    # Checking for the unique characters.\n    for i in range(length):\n        # Checking for the duplicated characters\n        for j in range(i+1,length):\n            # Checking if both the characters are same\n            if (str[i]==str[j]):\n                # If both the characters are equal\n                return False\n    # If all the characters are unique\n    return True", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str_input):\n    if len(str_input) == len(set(str_input)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_characters(word):\n    character_list = list(word)\n    return len(character_list) == len(set(character_list))\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            count = count + 1\n    return count == 0\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str1):\n    arr = []\n    for i in str1:\n        if i not in arr:\n            arr.append(i)\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str):\n    if len(str) > 1:\n        if len(str) == len(set(str)):\n            return True\n        else:\n            return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    #Code Here\n    flag = 0\n    for i in range(len(string)):\n        if(string[i] in string[i+1:len(string)]):\n            flag = 1\n            break\n    if(flag):\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(L,c):\n    return [[row[i] for i in range(len(row)) if i!=c] for row in L]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(arr,index):\n  return [row[:index] + row[index+1:] for row in arr]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(a_list, column_index):\n    return [i[:column_index] + i[column_index + 1:] for i in a_list]\n\na = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested, col_no):\n    return [row[:col_no] + row[col_no + 1:] for row in nested]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(l, idx):\n    \"\"\"\n    Remove the specified column from the list 'l'\n    \"\"\"\n    new_l = []\n    for row in l:\n        new_l.append([row[idx]])\n    return new_l\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, index):\n    res = []\n    for sublist in nested_list:\n        res.append(sublist[:index] + sublist[index + 1:])\n    return res\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(matrix, column):\n    l = len(matrix)\n    for i in range(0, l):\n        del matrix[i][column]\n    return matrix\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, column_index):\n    \"\"\"Function to remove a specified column from a given nested list\n    \n    Args:\n        nested_list (list): The nested list from which the column is to be removed\n        column_index (int): The index of the column to be removed\n        \n    Returns:\n        nested_list (list): The nested list with the column removed\n    \n    \"\"\"\n    new_nested_list = []\n    for row in nested_list:\n        new_row = []\n        for index, item in enumerate(row):\n            if index != column_index:\n                new_row.append(item)\n        new_nested_list.append(new_row)\n    return new_nested_list", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n#Solution\ndef remove_column(lst,column_index):\n    for i in range(len(lst)):\n        lst[i].pop(column_index)\n    return lst\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(data, column):\n    new_data = []\n    for row in data:\n        new_data.append([val for idx,val in enumerate(row) if idx != column])\n    return new_data\n\ndef test():\n    assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\ntest()\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a, d, n):\n    \"\"\"\n    >>> tn_ap(1, 5, 2)\n    9\n    >>> tn_ap(2, 5, 2)\n    16\n    >>> tn_ap(3, 5, 2)\n    23\n    \"\"\"\n    return a + (n-1)*d\n\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n    return a+(n-1)*d\n\ndef test_tn_ap():\n    assert tn_ap(1,5,2)==9\n\n# Euclid's GCD", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(first, last, t):\n\treturn (first + ((t - 1) * (last - first)))\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,t):\n    if t==1:\n        return a\n    return tn_ap(a+d,d,t-1)\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a, d, n):\n    if n==1:\n        return a\n    else:\n        return tn_ap(a+d, d, n-1)\n\ndef test_tn_ap():\n    assert tn_ap(1,5,2)==9\n\ntest_tn_ap()\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(first,last,t):\n    return (first+(t-1)*last)/2\n    ", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,d,n):\n    return a+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(n,a,d):\n    if n == 1:\n        return a\n    else:\n        return a+(n-1)*d\n    ", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n    return a+(d*(n-1))\n    ", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,d,n):\n    assert a<d, \"Invalid argument\"\n    if n == 1:\n        return a\n    else:\n        return tn_ap(a,d,n-1)+d"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\nimport math\n\ndef count_Rectangles(r):\n\tcount = 0\n\tx = 1\n\twhile x <= r:\n\t\ty = 1\n\t\twhile y <= r:\n\t\t\tcount += 1\n\t\t\ty += 1\n\t\tx += 1\n\n\treturn count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    return 8*r**2\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    ans = 0\n    for i in range(1, r):\n        ans += 4*(r-i) + 1\n    return ans\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(radius):\n    return 4*(radius**2)\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n\t\"\"\"Return the number of rectangles in a circle of radius r.\"\"\"\n\treturn r*4 - 4\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    total_rectangles = 0\n    for i in range(r):\n        total_rectangles += i + 1\n    return total_rectangles", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(radius):\n    return 2*radius*radius\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport numpy as np\n\ndef count_Rectangles(r):\n    \"\"\"\n    count the number of rectangles in a circle of radius r\n\n    input:\n    r: radius of the circle\n\n    output:\n    number of rectangles in a circle of radius r\n    \"\"\"\n    return (2 * r + 1) * (r + 1)\n\nr = 5", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    return 8*r*r + 4*r + 2\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1, angle2):\n    if angle1 == 90 or angle2 == 90:\n        return 90\n    elif angle1 == 90 and angle2 == 180:\n        return 90\n    elif angle1 == 90 and angle2 == 0:\n        return 90\n    elif angle1 == 180 or angle2 == 180:\n        return 180\n    elif angle1 == 180 and angle2 == 0:\n        return 0\n    elif angle1 == 180 and angle2 == 90:\n        return 90\n    elif angle1 == 0 or angle2 == 0:\n        return 0\n    else:\n        return angle1 + angle2 - 180\n\ndef test_find_angle():\n    assert find_angle(47,89) == 44\n    assert find_angle(90,180) == 90\n    assert find_angle(90,0) == 90\n    assert find_angle(0,90) == 90\n    assert find_angle(180,180) == 180\n    assert find_angle(180,0) == 0\n    assert find_angle(0,180) == 0\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle_a, angle_b):\n    import math\n    return math.degrees(math.atan2(angle_b, angle_a))", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle_one,angle_two):\n    return 180-angle_one-angle_two\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    angle1=180-a\n    angle2=180-b\n    angle3=180-angle1-angle2\n    return angle3\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n    return 180 - a - b\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(x, y):\n    return 180 - (x + y)", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a, b):\n    # formula to find angle in triangle\n    return 180 - a - b\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\nimport math\ndef find_angle(a,b):\n    angle = math.degrees(math.acos((math.cos(math.radians(a)))*(math.cos(math.radians(b)))-(math.sin(math.radians(a)))*(math.sin(math.radians(b)))))\n    return angle", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1,angle2):\n    return 180-angle1-angle2\n\n#assert find_angle(90,89) == 0\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1, angle2):\n    a = angle1 + angle2 - 90\n    return a\n\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(tup):\n    maximum = tup[0]\n    for i in tup:\n        if i[1] > maximum[1]:\n            maximum = i\n    return maximum", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nimport heapq\n\n\ndef find_max(tuple_records):\n    max_heap = []\n    for i in tuple_records:\n        heapq.heappush(max_heap, i)\n    max_element = 0\n    while len(max_heap) != 0:\n        max_element = max(max_element, max_heap[0][1])\n        heapq.heappop(max_heap)\n    return max_element\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(lst):\n    return max([max(i) for i in lst])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\n# Method 1:\ndef find_max(list_of_tuples):\n    max_val = list_of_tuples[0][1]\n    for val in list_of_tuples:\n        if val[1] > max_val:\n            max_val = val[1]\n    return max_val\n\n\n# Method 2:\ndef find_max(list_of_tuples):\n    return max(list_of_tuples, key=lambda x: x[1])[1]\n\n\n# Method 3:\ndef find_max(list_of_tuples):\n    return max(list_of_tuples, key=lambda tup: tup[1])", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    return max(records, key = lambda r: r[1])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\nimport collections\nimport random\n\n\ndef find_max(records):\n    \"\"\"Return maximum element from list of tuples.\n\n    Args:\n        records (list): list of tuples\n    \"\"\"\n    # Initialize empty dictionary\n    #   key = tuple, value = maximum value\n    maximums = {}\n    for record in records:\n        # Add value to dictionary if not in it\n        maximums[record] = maximums.get(record, 0) + 1\n        # If value is larger than any key, make key the value\n        maximums[max(maximums, key=lambda x: maximums[x])] = \\\n            maximums[max(maximums, key=lambda x: maximums[x])] + 1\n    return max(maximums.values())\n\n\ndef find_max_hash(records):\n    \"\"\"Return maximum element from list of tuples.\n\n    Args:\n        records (list): list of tuples\n    \"\"\"\n    # Initialize empty dictionary\n    #   key = tuple, value = maximum value\n    #   value = number of times the key has been seen\n    maximums = collections.defaultdict(int)\n    for record in records:\n        maximums[record] += 1\n        maximums[max(maximums, key=lambda x: maximums[x])] += 1\n    return max(maximums.values())\n\n\ndef find_max_dict(records):\n    \"\"\"Return maximum element from list of tuples.\n\n    Args:\n        records (list): list of tuples\n    \"\"\"\n    # Initialize empty dictionary\n    #   key = tuple, value = number of times the key has been seen\n    maximums = {}\n    for record in records:\n        maximums[record] = maximums.get(record, 0) + 1\n        maximums[max(maximums, key=lambda x: maximums[x])] += 1\n    return max(maximums.values())\n\n\ndef find_max_random(records):\n    \"\"\"Return maximum element from list of tuples.\n\n    Args:\n        records (list): list of tuples\n    \"\"\"\n    # Initialize empty dictionary\n    #   key = tuple, value = number of times the key", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(t):\n    return max([i[1] for i in t])\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    max_num = records[0][1]\n    for record in records:\n        if record[1] > max_num:\n            max_num = record[1]\n    return max_num", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(t):\n    max_value = t[0][1]\n    for i in range(len(t)):\n        if t[i][1] > max_value:\n            max_value = t[i][1]\n    return max_value\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\n# def find_max(tuple_records):\n#     return max([i for i in tuple_records])\n\n\n# def find_max(tuple_records):\n#     return max(tuple_records, key=lambda x: x[1])[1]\n\n\n# def find_max(tuple_records):\n#     return max(tuple_records, key=lambda x: x[1])\n\n\n# def find_max(tuple_records):\n#     return max(tuple_records, key=lambda x: x[1])[1]\n\n\n# def find_max(tuple_records):\n#     max_x = 0\n#     max_y = 0\n#     for x, y in tuple_records:\n#         if max_x < x and max_y < y:\n#             max_x = x\n#             max_y = y\n#     return max_y\n\n\n# def find_max(tuple_records):\n#     max_x = max_y = 0\n#     for x, y in tuple_records:\n#         if x > max_x:\n#             max_x = x\n#         if y > max_y:\n#             max_y = y\n#     return max_y\n\n\n# def find_max(tuple_records):\n#     return max(tuple_records, key=lambda x: x[1])[1]\n\n\ndef find_max(tuple_records):\n    return max(tuple_records, key=lambda x: x[0])[0]"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a,b):\n    return list(map(lambda x,y: x%y,a,b))\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(l1,l2):\n    return list(map(lambda x,y: x%y,l1,l2))\n\n#Code here", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(L1,L2):\n    \"\"\"\n    >>> moddiv_list([4,5,6],[1, 2, 3])\n    [0, 1, 0]\n    \"\"\"\n    return list(map(lambda x,y: x%y, L1,L2))\n\nmoddiv_list([4,5,6],[1, 2, 3])\n\n#Question 2", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(l1,l2):\n    l1 = list(map(lambda x : x%l2[0],l1))\n    return l1\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1, list2):\n    return list(map(lambda x: x%list2[x%len(list2)], range(len(list1))))", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(num, den):\n    return list(map(lambda x,y: x%y, num, den))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(l,m):\n    return list(map(lambda x:x%m,l))\n\n\ndef moddiv_list_v2(l,m):\n    return [x%m for x in l]\n\ndef test_moddiv_list():\n    assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\n# TODO: Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list_v2(l,m):\n    return [x%m for x in l]\n\ntest_moddiv_list()```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\n10. Write a function to find out the maximum value in a list using the max function.\n\n### Code:\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(num1, num2):\n    return list(map(lambda x, y: x % y, num1, num2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(n,d):\n    return list(map(lambda x,y : x%y,n,d))\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n    "], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    try:\n        sol = (b**2 - 4*a*c)**(1/2)\n        ans = str(sol - a/2) + \" = 2 * \" + str(-b/2)\n        return ans\n    except:\n        return \"No Solution\"", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    discriminant = (b**2)-(4*a*c)\n    if discriminant > 0:\n        return \"Two Real Roots\"\n    elif discriminant == 0:\n        return \"One Real Root\"\n    elif discriminant < 0:\n        return \"Two Complex Roots\"\n    ", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    from math import sqrt\n    discriminant = (b**2) - (4*a*c)\n    if(discriminant == 0):\n        return \"No\"\n    elif(discriminant > 0):\n        return \"Yes\"\n    else:\n        return \"No\"", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\nimport math\n\ndef Check_Solution(a,b,c):\n    if (a == 0):\n        if (c == 0):\n            return \"No\"\n        else:\n            return \"Yes\"\n    else:\n        sqrt_dis = math.sqrt(b*b-4*a*c)\n        return \"Yes\" if (b+sqrt_dis)/(2*a) == (b-sqrt_dis)/(2*a) else \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef quadratic(a,b,c):\n    d = (b**2) - (4*a*c)\n    x1 = (-b+d)/(2*a)\n    x2 = (-b-d)/(2*a)\n    return x1,x2\n\ndef Check_Solution(a,b,c):\n    x1,x2 = quadratic(a,b,c)\n    if x2 == x1*2:\n        return \"Yes\"\n    else:\n        return \"No\"\n    ", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    x1=((b**2)-(4*a*c))**0.5\n    x2=(-(b**2)-(4*a*c))**0.5\n    return print(\"Yes\" if x1==2*x2 else \"No\")", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\nimport math\n\ndef Check_Solution(a,b,c):\n    d = b**2 - 4*a*c\n    if d>0:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        return \"Yes\"\n    elif d==0:\n        x = (-b)/(2*a)\n        return \"Yes\"\n    else:\n        return \"No\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        if discriminant == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    D = (b**2)-(4*a*c)\n    if D>0:\n        print(\"Two distinct solutions exist\")\n        return \"Yes\"\n    elif D==0:\n        print(\"Two equal solutions exist\")\n        return \"Yes\"\n    else:\n        print(\"No real solutions exist\")\n        return \"No\"\n\na = float(input(\"Enter the value of a: \"))\nb = float(input(\"Enter the value of b: \"))\nc = float(input(\"Enter the value of c: \"))\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    D=b**2-4*a*c\n    if D<0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n        "], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    return (3*(10**n))-((10**n)/2)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    \"\"\"\n    This function calculates the n'th Carol number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 0:\n        return 0\n    else:\n        return get_carol(n - 1) * 5 + 1\n\ndef test():\n    for n, expected in enumerate([0, 1, 7, 34, 135, 550]):\n        actual = get_carol(n)\n        if expected != actual:\n            print(\"Test {0} failed. Expected {1}, got {2}\".format(n + 1, expected, actual))\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    if n == 0:\n        return 0\n    elif n < 1000:\n        return get_carol(n-1) + 100\n    else:\n        return get_carol(n-1000) + get_carol(n-1)\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    \"\"\"\n    Get the nth carol number.\n\n    >>> assert get_carol(2) == 7\n    >>> assert get_carol(3) == 19\n    >>> assert get_carol(4) == 35\n    >>> assert get_carol(5) == 57\n    >>> assert get_carol(6) == 93\n    >>> assert get_carol(7) == 141\n    >>> assert get_carol(8) == 203\n    >>> assert get_carol(9) == 281\n    >>> assert get_carol(10) == 377\n    >>> assert get_carol(11) == 491\n    >>> assert get_carol(12) == 633\n    >>> assert get_carol(13) == 797\n    >>> assert get_carol(14) == 993\n    >>> assert get_carol(15) == 1227\n    >>> assert get_carol(16) == 1503\n    >>> assert get_carol(17) == 1821\n    >>> assert get_carol(18) == 2183\n    >>> assert get_carol(19) == 2591\n    >>> assert get_carol(20) == 3057\n    \"\"\"\n    return 4*(3*n*n - 2*n - 1)\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\nfrom functools import lru_cache, reduce\n\n\n@lru_cache(maxsize=None)\ndef get_carol(n):\n    if n == 1:\n        return 1\n    return (reduce(lambda x, y: x * y, range(1, n + 1))\n            * reduce(lambda x, y: x * y, range(n, 0, -1)))\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    return (1 + sum(range(n, 1, -1)))\n\n\n# Test", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    return (n-1)*(3*n+1)//2\n\ndef test_get_carol():\n    assert get_carol(2) == 7\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    a = [0, 1, 1, 2, 5, 7, 11, 13, 20, 27, 34, 55, 82, 119, 154, 220, 301, 391, 510, 702, 947, 1291, 1701, 2217, 2831, 3563, 4423, 5421, 6576, 7918, 9478, 11296, 13414, 15882, 18751, 22072, 25905, 30311, 35363, 40143, 45746, 52278, 59858, 68618, 78703, 90273, 103503, 118583, 135728, 155178, 177208, 202123, 230265, 262015, 297793, 338063, 383237, 433883, 490527, 553763, 624255, 702745, 789955, 886698, 993868, 1112449, 1243435, 1387921, 1547119, 1722363, 1915123, 2127025, 235", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    # Initialize a list with 1 element.\n    num = [1]\n    # Initialize the current element.\n    # The current element is 1\n    # The difference is 1\n    cur = 1\n    # Find the next element of the carol number series.\n    # For the first iteration, cur is 1.\n    # For the second iteration, cur is 1+1 = 2.\n    # For the third iteration, cur is 1+1+1 = 3.\n    # For the fourth iteration, cur is 1+1+1+1 = 4.\n    # And so on.\n    for i in range(n-1):\n        # Append the current value to the num list.\n        num.append(cur)\n        # Find the difference between the current and previous element.\n        cur = cur + num[-2]\n    # Return the n\u2019th carol number.\n    return num[-1]\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\nimport itertools\ndef get_carol(n):\n    # return int(\"\".join(map(str, [sum(i) for i in list(itertools.product([1, 2, 3], repeat=n))])))\n    return int(\"\".join(map(str, [sum(i) for i in list(itertools.product([1, 3], repeat=n))])))\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(l):\n    return [i for i in l if i != []]\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(list_of_lists):\n    empty_list_index = []\n    for i in range(len(list_of_lists)):\n        if list_of_lists[i] == []:\n            empty_list_index.append(i)\n    for i in reversed(empty_list_index):\n        del list_of_lists[i]\n    return list_of_lists\n\n#assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\n# Given a list of lists called lists, this function removes all the empty lists from the list.\n\ndef remove_empty(lists):\n    new_list = []\n    for i in lists:\n        if i != []:\n            new_list.append(i)\n    return new_list\n\n# The function returns a new list which contains the elements in the given list of lists excluding the empty lists.\n\n# The input list will not be changed.", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    return [x for x in lst if x != []]\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    rtn = []\n    for x in lst:\n        if not x:\n            continue\n        if isinstance(x, list):\n            rtn.extend(remove_empty(x))\n        else:\n            rtn.append(x)\n    return rtn\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(L):\n    return [x for x in L if x]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(list_of_lists):\n    for index, value in enumerate(list_of_lists):\n        if value == []:\n            list_of_lists.remove(value)\n\n    return list_of_lists", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\n# def remove_empty(lst):\n#     for i in lst:\n#         if i == []:\n#             lst.remove(i)\n#     return lst\n\n# def remove_empty(lst):\n#     for i in range(len(lst)):\n#         if lst[i] == []:\n#             lst.remove(lst[i])\n#     return lst\n\n# def remove_empty(lst):\n#     for i in range(len(lst)):\n#         if len(lst[i]) > 0:\n#             lst[i].remove(lst[i])\n#     return lst\n\ndef remove_empty(lst):\n    return [x for x in lst if len(x)>0]\n\n\n# assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\n# assert remove_empty([[], 'Red', [1,2], 'Blue', [], [], [], [3,4]])==['Red', [1, 2], 'Blue', [3, 4]]\n\n# assert remove_empty([[1,2,3], [4,5,6], []])==[[1, 2, 3], [4, 5, 6]]\n\n# assert remove_empty([[1,2], [4,5], [], []])==[[1, 2], [4, 5]]\n\n# assert remove_empty([[], [1,2], [], [], [], [3,4], []])==[[1, 2], [3, 4]]\n\n# assert remove_empty([[], []])==[]\n\n# assert remove_empty([[], [1], []])==[[1]]\n\n# assert remove_empty([[], [1], [2]])==[[1], [2]]\n\n# assert remove_empty([[], [1], [2], [], []])==[[1], [2]]\n\n# assert", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(a):\n    # your code here\n    return [i for i in a if i!=[]]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(input_list):\n    \"\"\"\n    input_list: a list of lists\n    \"\"\"\n    output = []\n    for i in input_list:\n        if i:\n            output.append(i)\n    return output"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(arr):\n    # Write your code here.\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    return max(d.values())\n\n# Testing", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(arr):\n    return max(arr, key=arr.count)\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(l):\n    from collections import defaultdict\n    d = defaultdict(int)\n    for x in l:\n        d[x] += 1\n    return max(d.values())", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    occurences = {}\n    for ele in lst:\n        if ele in occurences:\n            occurences[ele] = occurences[ele] + 1\n        else:\n            occurences[ele] = 1\n    print(occurences)\n    print(max(occurences, key=occurences.get))\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nfrom collections import Counter\ndef max_occurrences(list_):\n    return max(Counter(list_).items(), key=lambda x: x[1])[0]", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(arr):\n    max_occ = max(arr)\n    ans = []\n    for i in arr:\n        if i == max_occ:\n            ans.append(i)\n    return max(ans)\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(arr):\n    d = {}\n    for a in arr:\n        d[a] = d.get(a, 0) + 1\n    max_occur = -1\n    max_item = None\n    for k, v in d.items():\n        if v > max_occur:\n            max_occur = v\n            max_item = k\n    return max_item\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(arr):\n    dict1 = {}\n    for i in arr:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return max(dict1, key=dict1.get)\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nfrom typing import List\n\n\ndef max_occurrences(arr: List[int]) -> int:\n    return max(set(arr), key=arr.count)\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(arr):\n    occ = {}\n    for num in arr:\n        occ[num] = occ.get(num,0) + 1\n    return max(occ, key=occ.get)\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(l, k):\n    \"\"\"\n    :param l: list of tuples\n    :param k: int\n    :return: list of tuples\n    \"\"\"\n    return [(i[0] + k, i[1] + k, i[2] + k) for i in l]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(X, K):\n    # Write your code here.\n    res = []\n    for i in range(len(X)):\n        res.append([x+K for x in X[i]])\n    return res\n\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(t, k):\n    return [tuple(map(lambda x: x + k, i)) for i in t]\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tup, K):\n    if isinstance(tup, tuple):\n        if len(tup) == 1:\n            return (tup[0] + K,)\n        else:\n            return (tup[0] + K,) + add_K_element(tup[1:], K)\n    else:\n        return tup\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple, K):\n    return list(map(lambda x: tuple+tuple(K), tuple))\n\n#assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\ndef test_add_K_element(add_K_element):\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tup, k):\n    new_tup = []\n    for item in tup:\n        new_tup.append(tuple(item)+(k,))\n    return new_tup", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(T, K):\n    return [tuple(map(lambda x: x + K, t)) for t in T]\n\ndef test_add_K_element():\n    T = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]\n    assert add_K_element(T, 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(T, K):\n  # Your code goes here\n  for i in range(len(T)):\n    for j in range(len(T[i])):\n      T[i][j] += K\n  return T\n\ndef main():\n  print(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4))\n\nmain()\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_k_element(t, k):\n    for i in t:\n        yield i + k\n\ndef add_k_element2(t, k):\n    for i in range(len(t)):\n        yield t[i] + k", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(arr, k):\n    return [x + k for x in arr]\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    flips = 0\n    if len(s) % 2 == 0:\n        for i in range(0, len(s), 2):\n            if s[i] == s[i+1]:\n                flips += 1\n    else:\n        for i in range(0, len(s), 2):\n            if s[i] == s[i+1]:\n                flips += 1\n        if s[0] == s[1]:\n            flips += 1\n    return flips\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            count += 1\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            count -= 1\n    return count", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    if len(s) <= 1:\n        return 0\n    odd_count = 0\n    even_count = 0\n    for i in s:\n        if int(i):\n            odd_count += 1\n        else:\n            even_count += 1\n    flip_count = 0\n    if odd_count == even_count:\n        flip_count += min(odd_count, even_count)\n    elif odd_count > even_count:\n        flip_count += odd_count\n    else:\n        flip_count += even_count\n    if flip_count == 0:\n        return 1\n    else:\n        return flip_count", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    # keep track of the number of flips\n    n_flips = 0\n    n_chars = len(s)\n    i = 0\n    \n    while i < n_chars - 1:\n        if s[i] == s[i + 1]:\n            i += 2\n        else:\n            if s[i] == '0':\n                s[i] = '1'\n            else:\n                s[i] = '0'\n            n_flips += 1\n            i += 1\n    return n_flips\n\n# test cases", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(str):\n\tflip = 0\n\tfor i in range(len(str)):\n\t\tif str[i] != str[i-1] and str[i] != str[i+1]:\n\t\t\tflip += 1\n\treturn flip\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s: str) -> int:\n    \"\"\"\n    Assuming s is not an empty string\n    \"\"\"\n    flips = 0\n    current_char = s[0]\n    for char in s[1:]:\n        if current_char == char:\n            flips += 1\n        current_char = char\n    return flips\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\nfrom collections import Counter\n\n\ndef min_flip_to_make_string_alternate(s):\n    c = Counter(s)\n    if c.most_common()[0][1] != c.most_common()[1][1]:\n        return 0\n    if c.most_common()[0][0] != c.most_common()[1][0]:\n        return 1\n    if c.most_common()[0][0] == \"0\" and len(s) % 2 == 0:\n        return 2\n    return 2\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s):\n    # First, reverse the string\n    # Do the same to the reverse string\n    # Then, check for the difference in the reversed strings\n    n = len(s)\n    rev = s[::-1]\n    rrev = rev[::-1]\n    # print(rev, rrev, n)\n    return abs(sum(1 for i in range(n) if s[i] != rrev[i]))", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(input_string):\n    output = \"\"\n    for character in input_string:\n        if output and output[-1] == character:\n            output = output[:-1]\n        else:\n            output += character\n    return len(input_string) - len(output)\n\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    return len(str(num))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    return len(str(num))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n\treturn len(str(n))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    count = 0\n    while n>0:\n        n //= 10\n        count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    return len(str(n))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    i = 0\n    while num > 0:\n        num //= 10\n        i += 1\n    return i\n\ndef count_Digit_2(num):\n    return len(str(num))\n\ndef count_Digit_3(num):\n    return len(str(num))\n    ", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    \"\"\"count_Digit(num) -> int\n    \n    This function returns the number of digits of the number given.\n    \n    Examples:\n    >>> count_Digit(12345)\n    5\n    >>> count_Digit(123)\n    3\n    >>> count_Digit(1)\n    1\n    \"\"\"\n    return len(str(num))\n\ndef test():\n    assert count_Digit(12345) == 5\n    assert count_Digit(123) == 3\n    assert count_Digit(1) == 1\n    assert count_Digit(2) == 1\n    print(\"all tests passed\")\n    ", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    count = 0\n    while num>0:\n        count += 1\n        num //= 10\n    return count\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(list_num):\n\n    if len(list_num) == 0:\n        return -1\n\n    max_product = list_num[0] * list_num[1]\n\n    for i in range(1,len(list_num)-1):\n        if list_num[i] * list_num[i+1] > max_product:\n            max_product = list_num[i] * list_num[i+1]\n\n    return max_product", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(num_list):\n\treturn max(num_list[i]*num_list[i+1] for i in range(len(num_list)-1))\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\nimport unittest\n\n\ndef adjacent_num_product(num_list):\n    \"\"\"\n    Find the largest product of the pair of adjacent elements from a given list of integers.\n    :param num_list:\n    :return:\n    \"\"\"\n    if len(num_list) == 0:\n        return 0\n    if len(num_list) == 1:\n        return num_list[0]\n    max_prod = 0\n    for i in range(0, len(num_list) - 1):\n        for j in range(i + 1, len(num_list)):\n            max_prod = max(max_prod, num_list[i] * num_list[j])\n    return max_prod\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# [1,2,3,4,5,6]\n# 30\n# 6*5\n\n# [1,1,1,1]\n# 1\n# 1*1\n\n# [1,2,2,3]\n# 6\n# 2*3\n\n# [1,2,3,4,5,5]\n# 20\n# 5*5\n\ndef adjacent_num_product(numbers):\n    max_num = None\n    temp_max = None\n    for index, num in enumerate(numbers):\n        if not max_num:\n            max_num = num\n            temp_max = num\n            continue\n        if temp_max and num:\n            temp_max = num * temp_max\n            if temp_max > max_num:\n                max_num = temp_max\n        else:\n            continue\n    return max_num\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(lst):\n    max_prod = 0\n    for i in range(0, len(lst)-1):\n        prod = lst[i]*lst[i+1]\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(l):\n    largest = -1\n    for i in range(len(l)-1):\n        if l[i]*l[i+1]>largest:\n            largest = l[i]*l[i+1]\n    return largest\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(arr):\n  if arr == []:\n    return 0\n  \n  max_prod = arr[0]\n  min_prod = arr[0]\n  \n  for i in range(1,len(arr)):\n    min_prod = min(min_prod, arr[i])\n    max_prod = max(max_prod, arr[i]*min_prod)\n  return max_prod\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(l):\n    l1 = sorted(l)\n    return l1[-1]*l1[-2]\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(l):\n    return max(l[i] * l[i+1] for i in range(len(l)-1))\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(lst):\n    lst = sorted(lst)\n    max_product = 0\n    for i in range(len(lst)-1):\n        max_product = max(max_product, lst[i]*lst[i+1])\n    return max_product\n\ndef adjacent_num_product_optimized(lst):\n    max_product = 0\n    for i in range(len(lst)-1):\n        max_product = max(max_product, lst[i]*lst[i+1])\n    return max_product\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nfrom collections import deque\nfrom trees import Tree, Node\n\n\ndef is_tree_balanced(root: Tree) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if root is None:\n        return True\n\n    left_depth = get_depth(root.left)\n    right_depth = get_depth(root.right)\n\n    if abs(left_depth - right_depth) > 1:\n        return False\n\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n\ndef get_depth(root: Tree) -> int:\n    if root is None:\n        return 0\n\n    return 1 + max(get_depth(root.left), get_depth(root.right))\n\n\ndef is_tree_balanced_iterative(root: Tree) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if root is None:\n        return True\n\n    queue = deque([root])\n    depths = {root: 1}\n\n    while len(queue):\n        node = queue.popleft()\n\n        if node.left is not None:\n            queue.append(node.left)\n            depths[node.left] = depths[node] + 1\n\n        if node.right is not None:\n            queue.append(node.right)\n            depths[node.right] = depths[node] + 1\n\n    return is_balanced_helper(root, depths)\n\n\ndef is_balanced_helper(node: Tree, depths: dict) -> bool:\n    if node is None:\n        return True\n\n    left_depth = depths[node.left] if node.left is not None else 0\n    right_depth = depths[node.right] if node.right is not None else 0\n\n    if abs(left_depth - right_depth) > 1:\n        return False\n\n    return is_balanced_helper(node.left, depths) and is_balanced_helper(\n        node.right, depths\n    )\n\n\ndef main():\n    tree = Tree(2)\n    tree.left = Tree(", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n    if abs(left_height-right_height)>1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef get_height(root):\n    if root is None:\n        return 0\n    else:\n        return max(get_height(root.left), get_height(root.right))+1\n\ndef build_tree(inorder, preorder):\n    if len(inorder) == 0:\n        return None\n    root = TreeNode(preorder[0])\n    inorder_root_index = inorder.index(preorder[0])\n    root.left = build_tree(inorder[0:inorder_root_index], preorder[1:inorder_root_index+1])\n    root.right = build_tree(inorder[inorder_root_index+1:], preorder[inorder_root_index+1:])\n    return root\n\ndef get_inorder(root):\n    if root is None:\n        return []\n    return get_inorder(root.left) + [root.val] + get_inorder(root.right)\n\ndef preorder_traversal(root):\n    if root is None:\n        return []\n    return [root.val] + preorder_traversal(root.left) + preorder_traversal(root.right)", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n# Code here\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nclass Solution(object):\n    def is_balanced(self, root):\n        if not root:\n            return True\n        # define variables\n        l_depth, r_depth = 0, 0\n        l_is_balanced, r_is_balanced = True, True\n\n        # check left subtree\n        if root.left:\n            l_depth = self.depth(root.left)\n            l_is_balanced = self.is_balanced(root.left)\n        # check right subtree\n        if root.right:\n            r_depth = self.depth(root.right)\n            r_is_balanced = self.is_balanced(root.right)\n\n        # return False if l_depth and r_depth diff more than 1\n        if abs(l_depth - r_depth) > 1:\n            return False\n        # return True if l_is_balanced and r_is_balanced\n        else:\n            return l_is_balanced and r_is_balanced\n\n    def depth(self, root):\n        if not root:\n            return 0\n        return 1 + max(self.depth(root.left), self.depth(root.right))", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nfrom collections import deque\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nclass TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef is_tree_balanced(root):\n    return is_tree_balanced_util(root)[0]\n\ndef is_tree_balanced_util(root):\n    if root is None:\n        return (True, 0)\n\n    if not is_tree_balanced_util(root.left)[0]:\n        return (False, 0)\n\n    if not is_tree_balanced_util(root.right)[0]:\n        return (False, 0)\n\n    lh, lh_height = is_tree_balanced_util(root.left)\n    rh, rh_height = is_tree_balanced_util(root.right)\n\n    if abs(lh_height - rh_height) > 1:\n        return (False, 0)\n\n    return (True, max(lh_height, rh_height) + 1)", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n\n    left_height = depth(root.left)\n    right_height = depth(root.right)\n\n    return abs(left_height - right_height) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef depth(root):\n    if root is None:\n        return 0\n\n    return 1 + max(depth(root.left), depth(root.right))", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\nfrom typing import Tuple\n\ndef repeat_tuples(tup: Tuple, n: int) -> Tuple:\n    #\n    # Your Code Here\n    #\n    return tup * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tuple, n):\n    return tuple * n\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tuple([tup] * n)\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    return tup * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\n# def repeat_tuples(tup, n):\n#     \"\"\"\n#     :type tup: tuple\n#     :type n: int\n#     :rtype: tuple\n#     \"\"\"\n#     lst = []\n#     for i in range(n):\n#         lst.append(tup)\n#     return tuple(lst)\n\ndef repeat_tuples(tup, n):\n    \"\"\"\n    :type tup: tuple\n    :type n: int\n    :rtype: tuple\n    \"\"\"\n    return tup * n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\n# Write your code here:\ndef repeat_tuples(tup, n):\n    return tup * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup: tuple, n: int) -> tuple:\n    return (tup,) * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tuple_input, n):\n    return tuple_input * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    for _ in range(n):\n        tup = tup, tup\n    return tup\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tuple_obj, n):\n    result = []\n    for i in range(n):\n        result.append(tuple_obj)\n    return result\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(side1,side2,side3):\n    return side1*side2+side2*side3+side3*side1\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length, width, height):\n    return 2*length*width + 2*length*height + 2*height*width\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length,breadth,height):\n    return 2*(length*breadth+breadth*height+height*length)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(w,l,h):\n    return 2*w*(l+h)+2*l*(w+h)+2*h*(w+l)\n\ndef lateralsurface_cuboid_iter(w,l,h):\n    return 2*(w+l+h)*(max(w,l,h))\n\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(w,l,h):\n    return 2*(w*l+l*h+w*h)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a, b, c):\n    total = 2*(a+b+c)\n    return total", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return 2*a*b+2*b*c+2*c*a", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(x,y,z):\n    #lateralsurface = 2*x + 2*y + 2*z\n    return 2*x + 2*y + 2*z\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\n    return 2*l*w+2*w*h+2*h*l\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a, b, c):\n    # This is the code for finding the lateral surface area of a cuboid\n    s = 2 * (a * b + b * c + c * a)\n    return s\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key= lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    tup.sort(key=lambda x: x[1], reverse=True)\n    return tup\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(t):\n    t = sorted(t, key=lambda t: float(t[1]))\n    return t\n\ndef test_float_sort():\n    assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n\ntest_float_sort()\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(lst):\n    return sorted(lst, key=lambda x:float(x[1]))", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(lst):\n    return sorted(lst, key=lambda tup: float(tup[1]))\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key=lambda t: t[1])\n\n# 17.2", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\n# my solution:\ndef float_sort(t):\n    return sorted(t, key=lambda x: float(x[1]))\n\n# assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\n# another solution:\ndef float_sort(t):\n    return sorted(t, key=lambda x: (float(x[1]), x[0]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(items):\n    return sorted(items, key=lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n    return sorted(tup, key = lambda x: float(x[1]))\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(sorted_array, start, end):\n    \"\"\"\n    Find the smallest missing element in a sorted array.\n    \"\"\"\n    return min(sorted_array) + 1 - sorted_array[end]\n\n\ndef smallest_missing2(sorted_array, start, end):\n    \"\"\"\n    Find the smallest missing element in a sorted array.\n    \"\"\"\n    return sorted_array[start] - 1\n\n\ndef test_smallest_missing():\n    \"\"\"\n    Run some tests.\n    \"\"\"\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 5) == 6\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 3) == 4", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(A, l, r):\n\t\"\"\"\n\t:param A: a list of integers\n\t:param l: the starting index of A\n\t:param r: the ending index of A\n\t:return: the smallest missing element\n\t\"\"\"\n\tcount = 0\n\tfor i in range(l, r):\n\t\tif A[i] != (i+1):\n\t\t\tcount += 1\n\treturn count + l\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, low, high):\n    \"\"\"\n    Finds the smallest missing element in a sorted array\n    \"\"\"\n    if low < high:\n        pivot = partition(arr, low, high)\n\n        if pivot == low:\n            return pivot + 1\n        elif pivot == high:\n            return pivot\n        elif pivot > low:\n            return smallest_missing(arr, low, pivot - 1)\n        else:\n            return smallest_missing(arr, pivot + 1, high)\n    else:\n        return low + 1\n\ndef partition(arr, low, high):\n    \"\"\"\n    Partitions the array such that\n    all elements less than the pivot\n    are to its left and all elements\n    greater than the pivot are to its right\n    \"\"\"\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\nfrom bisect import bisect_left\n\n\ndef smallest_missing(arr, start, end):\n    \"\"\"\n    Bisect the array and return the largest number not in the array\n    \"\"\"\n    missing_val = bisect_left(arr, start)\n    return missing_val if missing_val < len(arr) else missing_val + 1", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nfrom typing import List\n\ndef smallest_missing(A: List[int], start: int = 0, end: int = None) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    if end is None:\n        end = len(A) - 1\n\n    if start >= end:\n        return start + 1\n\n    mid = start + (end - start) // 2\n\n    if A[mid] > A[mid + 1]:\n        return smallest_missing(A, start, mid)\n    elif A[mid] < A[mid + 1]:\n        return smallest_missing(A, mid + 1, end)\n    else:\n        return smallest_missing(A, mid + 1, end)\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\nimport unittest\n\ndef smallest_missing(arr, start, end):\n    # TODO: Write your code here\n    if start >= end:\n        return end + 1\n    if start > end - 1:\n        return start + 1\n    if arr[start] < arr[start + 1]:\n        return start + 1\n    if arr[start] > arr[start - 1]:\n        return start\n    return smallest_missing(arr, start + 1, end)\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    missing = 0\n    while True:\n        if arr[missing] == missing:\n            missing += 1\n            continue\n        while True:\n            if arr[missing] != missing:\n                break\n            missing += 1\n        if missing == len(arr):\n            missing = len(arr) + 1\n            break\n        if missing == start:\n            return missing\n        if missing > start:\n            start = missing\n        if missing < end:\n            end = missing\n    return missing\n\ndef main():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 5) == 6\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 2, 6) == 1\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 1, 5) == 0\n\nmain()", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    for i in range(start + 1, end + 1):\n        if arr[i] != i:\n            return i\n    return end + 1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\n# noinspection PyShadowingNames\ndef smallest_missing(nums, start, stop):\n    \"\"\"\n\n    :param nums:\n    :param start:\n    :param stop:\n    :return:\n    \"\"\"\n    ans = stop\n    for i in range(start, stop):\n        if nums[i] != i:\n            ans = min(ans, i)\n    for i in range(start, stop):\n        if nums[i] == i:\n            return i\n    return ans\n\n\ndef test_smallest_missing():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 3, 5, 6], 0, 6) == 4\n    assert smallest_missing([0, 1, 2, 3, 6], 0, 6) == 4\n    assert smallest_missing([0, 1, 2, 3, 4, 6], 0, 6) == 5\n    assert smallest_missing([0, 1, 2, 3, 4, 5], 0, 6) == 6", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    seen = set(range(start, end))\n    for x in arr:\n        if x not in seen:\n            return x\n    return end + 1"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_ascending(arr):\n    heapq.heapify(arr)\n    for i in range(len(arr)-1,0,-1):\n        arr[i],arr[0] = arr[0],arr[i]\n        heapq.heapify(arr)\n    return arr\n\n# Use heap sort for descending order\ndef heap_descending(arr):\n    heapq.heapify(arr)\n    for i in range(len(arr)-1,0,-1):\n        arr[0],arr[i] = arr[i],arr[0]\n        heapq.heapify(arr)\n    return arr\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nimport heapq\n\n\ndef heap_ascending(arr):\n    heap = []\n    for i in arr:\n        if not heap:\n            heapq.heappush(heap, i)\n        else:\n            heapq.heappush(heap, i)\n            if i < heap[0]:\n                heap[0], i = i, heap[0]\n            if heap[0] < i:\n                heapq.heappush(heap, i)\n    return heap\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import *\ndef heap_ascending(arr):\n    heapify(arr)\n    res = []\n    while arr:\n        res.append(heappop(arr))\n    return res\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\n\ndef heap_assending(arr):\n    q = []\n    for i in range(len(arr)):\n        heappush(q,arr[i])\n    return [heappop(q) for i in range(len(arr))]\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\n\ndef heap_assending(lst):\n\theap = []\n\tfor i in lst:\n\t\theappush(heap,i)\n\tfinal = []\n\twhile len(heap) != 0:\n\t\tfinal.append(heappop(heap))\n\treturn final\n\ndef main():\n\tlst = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]\n\tprint heap_assending(lst)\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef heap_assending(l):\n    h = []\n    for i in range(len(l)):\n        heappush(h,l[i])\n    return [heappop(h) for i in range(len(l))]\n\n\nl = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]\nans = heap_assending(l)", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\n\ndef heap_ascending(numbers):\n    heap = []\n    for number in numbers:\n        heappush(heap, number)\n\n    sorted_numbers = []\n\n    while heap:\n        sorted_numbers.append(heappop(heap))\n\n    return sorted_numbers", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_sort(l):\n    # Your code here.\n    q = Heap(len(l))\n    for i in l:\n        q.push(i)\n    while not q.is_empty():\n        l.append(q.pop())\n    return l\n\ndef main():\n    l = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]\n    print(heap_sort(l))\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(a):\n    # Create a max heap\n    heapq.heapify(a)\n    # Return the ascending ordered list\n    return heapq.nlargest(len(a), a)\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nimport heapq\n\ndef heap_ascending(arr):\n    # Build max heap from list\n    heapq.heapify(arr)\n    # Iterate over the heap, then swap it with the last element and\n    # pop the element from heap.\n    # Make sure we iterate over the whole heap because pop() would\n    # only pop the root node.\n    for i in range(len(arr)-1, 0, -1):\n        heapq.heappush(arr, arr.pop())\n    return arr\n\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(l,b,h):\n    \"\"\"\n    Find the volume of a cuboid.\n    l: the length of the cuboid\n    b: the breadth of the cuboid\n    h: the height of the cuboid\n    \n    returns the volume of the cuboid\n    \"\"\"\n    return l*b*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(w, h, d):\n    return w * h * d\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n#Volume of cuboid = lxb\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n\n#Tests", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(l,w,h):\n    return l*w*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a, b, c):\n    \"\"\"\n    Returns the volume of a cuboid with dimensions a, b, c.\n    \"\"\"\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n# Using the formula V = length*width*height\n\ndef volume_cuboid(l, w, h):\n    return l * w * h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n# my solution\ndef volume_cuboid(length, width, height):\n    return length * width * height\n\n# assert function", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\nimport unittest\n\n\ndef volume_cuboid(width, height, length):\n    \"\"\"Return the volume of a cuboid.\n\n    >>> volume_cuboid(1,2,3)\n    6\n    >>> volume_cuboid(5,4,3)\n    60\n    >>> volume_cuboid(10,6,2)\n    120\n    \"\"\"\n    return width * height * length\n\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(width, height, depth):\n    return width*height*depth\n\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    pass\n\n\n# -\n\npermute_string('abc')\n\n# ---\n#\n# ## 2. Level order traversal of a binary tree\n#\n# A level order traversal of a binary tree is when we visit the nodes at each level (starting from the root) before moving onto the next level.\n#\n# This means that we first visit the root, then we visit the nodes that are at the first level below the root, then we visit the nodes at the second level below the root and so on.\n#\n# Write a function to print the level order traversal of a binary tree in a 2D array.\n#\n# ---\n#\n# **Sample Input:**\n# ```\n#   1\n#  / \\\n# 2   3\n# ```\n#\n# **Sample Output:**\n# ```\n# [[1],\n#  [2, 3]]\n# ```\n\n# +\nfrom collections import deque\n\ndef level_order_traversal(root):\n    pass\n\n\n# -\n\n# ---\n#\n# ## 3. Binary search tree\n#\n# Write a class to represent a binary search tree with the following methods:\n#\n# 1. `insert(self, key)` - adds a key to the tree\n# 2. `contains(self, key)` - returns True if the key is in the tree, False otherwise\n# 3. `find_maximum(self)` - returns the maximum value in the tree\n# 4. `find_minimum(self)` - returns the minimum value in the tree\n# 5. `delete(self, key)` - removes a key from the tree\n# 6. `is_balanced(self)` - returns True if the tree is balanced, False otherwise\n# 7. `get_height(self)` - returns the height of the tree\n#\n# Hint: Remember to define a node class, a tree class, and a binary search tree class.\n#\n# ---\n#\n# **Sample Input:**\n# ```\n#       4\n#      / \\\n#     2   5\n#    / \\\n#", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(str):\n    \"\"\"\n    generate permutations with duplicate characters\n    \"\"\"\n    return [ \"\".join(p) for p in permutations(str) ]\n\n# test", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(str):\n    '''\n    :type str: str\n    :rtype: List[str]\n    '''\n    slist = sorted(list(set(list(str))))\n    N = len(slist)\n    res = []\n    def dfs(s,n,cur):\n        if n == 0:\n            res.append(cur)\n        else:\n            for i in range(len(s)):\n                dfs(s[i+1:],n-1,cur+s[i])\n    for i in range(N):\n        dfs(slist[i+1:],N-1,slist[i])\n    return res", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n  if len(string) == 1:\n    return [string]\n  elif len(string) == 2:\n    return [''.join(perm) for perm in list(itertools.product(string, repeat = 2))]\n  else:\n    first = string[0]\n    rest = string[1:]\n    permutations = permute_string(rest)\n    return [first + perm for perm in permutations] + [perm + first for perm in permutations]\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    perms = [string]\n    for index in range(len(string)):\n        for i in range(index+1, len(string)+1):\n            tmp = string[:index] + string[index:i] + string[i:]\n            perms.append(tmp)\n    return perms\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    if len(s) == 0:\n        return [\"\"]\n\n    if len(s) == 1:\n        return [s]\n\n    if len(s) == 2:\n        return [s[0] + s[1], s[1] + s[0]]\n\n    remaining = permute_string(s[1:])\n\n    return [s[0] + x for x in remaining] + [x + s[0] for x in remaining]\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    length = len(string)\n    if length == 0:\n        return []\n    elif length == 1:\n        return [string]\n    else:\n        result = []\n        for first in string:\n            for rest in permute_string(string[1:]):\n                result.append(first + rest)\n        return result\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    if len(string)==1:\n        return [string]\n    result=[]\n    for i in range(len(string)):\n        rest=string[0:i]+string[i+1:]\n        for r in permute_string(rest):\n            result.append(string[i]+r)\n    return result", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    result = []\n    permute_string_helper(string, '', result)\n    return result\n\ndef permute_string_helper(string, current, result):\n    if len(string) == len(current):\n        result.append(current)\n    for index, letter in enumerate(string):\n        if letter in current:\n            continue\n        current += letter\n        permute_string_helper(string, current, result)\n        current = current[:len(current) - 1]\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    \"\"\"\n    >>> permute_string('ab')\n    ['ab', 'ba']\n    \"\"\"\n    ans = []\n    length = len(string)\n    if length == 1:\n        ans.append(string)\n        return ans\n    for i in range(length):\n        prefix = string[:i]\n        suffix = string[i + 1:]\n        ans = ans + permute_string(prefix) + [prefix + string[i] + suffix]\n    return ans\n\n\n# TEST ---------------------------------------------------\n# assert permute_string('ab')==['ab', 'ba']\n# assert permute_string('abc')==['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n# assert permute_string('abcd')==['abcd', 'acbd', 'bacd', 'bcad', 'bdac', 'cbad', 'cdab', 'cbda', 'dcab', 'cdba', 'dbac', 'dbca', 'dcba', 'dca']\n# assert permute_string('ab')==['ab', 'ba']"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, n):\n    return int(num / n) * n\n\ndef test_function(test_case):\n    output = round_num(test_case[0], test_case[1])\n    if output == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([4722, 10, 4720])\ntest_function([4722, 15, 4730])\ntest_function([5876, 20, 5880])\ntest_function([2558, 50, 2560])\ntest_function([2558, 100, 2600])\ntest_function([1001, 100, 1000])", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, target):\n    \"\"\"\n    return a number rounded to the nearest multiple of target\n    \"\"\"\n    return target * int(num/target)\n\ndef test_round_num():\n    assert round_num(11223, 10) == 11220\n    assert round_num(4722, 10) == 4720\n    assert round_num(2345, 100) == 2300\n    assert round_num(4722, 100) == 4700\n    assert round_num(2345, 1000) == 2000\n    assert round_num(4722, 1000) == 4000\n\ntest_round_num()", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    return int((num + multiple/2.0) // multiple) * multiple\n\ndef test():\n    for num, multiple in (\n        (4722,10),\n        (100,25),\n        (13.244312,4)\n    ):\n        assert round_num(num, multiple) == num\n\ntest()", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(x,y):\n    if x%y==0:\n        return x\n    else:\n        return x-((x%y) - y)\n\n# test case", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, divisor):\n    \"\"\"\n    the function will round the given number to the nearest multiple of a specific number\n    \"\"\"\n    return (int(num / divisor) + 1) * divisor\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\n# TODO - Your code here\ndef round_num(num, multiple):\n    return (num // multiple) * multiple\n\n\n# TODO - Remove this line and add more tests", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\nimport math\n\n\ndef round_num(num, multiple):\n    \"\"\"\n    Rounds a number to the nearest multiple of a specific number.\n    :param num: number to be rounded\n    :param multiple: integer number to be the multiple\n    :return: the rounded number\n    \"\"\"\n    return math.ceil(num/multiple) * multiple", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,multiple):\n    if num%multiple==0:\n        return num\n    elif num%multiple>0:\n        return (num//multiple+1)*multiple\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, mult):\n    \"\"\"Round the given number to the nearest multiple of a specific number\"\"\"\n    return int(num + mult/2) - mult/2\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, m):\n    return int(num/m) * m\n\n# Testing your function:"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(nums):\n    n = len(nums)\n    dup = {}\n    for i in range(n):\n        if nums[i] in dup:\n            if dup[nums[i]] > 1:\n                nums[i] = dup[nums[i]]\n                dup[nums[i]] += 1\n            else:\n                nums[i] = dup[nums[i]]\n        else:\n            dup[nums[i]] = 1\n    return nums\n\n# --------------------------\n\n# rearrange", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\n# This solution isn't the most efficient because it duplicates the list before removing\n# elements, but it's a good solution.\ndef remove_replica(l):\n    l_copy = l.copy()\n    l_copy_new = []\n    for i in range(len(l_copy)):\n        if l_copy[i] not in l_copy_new:\n            l_copy_new.append(l_copy[i])\n    return l_copy_new", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nimport collections\nimport unittest\n\ndef remove_replica(x):\n    return tuple(i if c == 1 else 'MSP' for i, c in collections.Counter(x).items())\n\ndef test_remove_replica():\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP', 'MSP')\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP', 'MSP')\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7, 7, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP', 'MSP')\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7, 7, 7, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP', '", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(l):\n    for i in l:\n        if l.count(i) > 1:\n            l.remove(i)\n            l.insert(l.index(i), i)\n    return l\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(list_in):\n    list_out = list()\n    for i in list_in:\n        if i not in list_out:\n            list_out.append(i)\n        else:\n            list_out[-1] = 'MSP'\n    return list_out\n\n\ndef main():\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tup):\n    # Create a set of unique values from the tuple\n    unique_vals = set(tup)\n\n    # Create a set of values that occur more than once\n    replica_vals = set()\n    for v in tup:\n        if tup.count(v) > 1:\n            replica_vals.add(v)\n\n    # Create a new tuple with the unique values, replaced by the custom string\n    new_tup = []\n    for v in unique_vals:\n        if v in replica_vals:\n            new_tup.append(v)\n        else:\n            new_tup.append(v)\n\n    return tuple(new_tup)", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tup):\n    return tup\n\n#test cases", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nfrom typing import Any\n\n\ndef remove_replica(lst: tuple) -> tuple:\n    \"\"\"\n    >>> remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n    (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    \"\"\"\n    return tuple(\n        elem if elem not in lst[:-1] else \"MSP\" for elem in lst\n    )", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tup):\n    # We're going to use a set to keep track of the elements we're not going to keep.\n    # As we go through the tuple, we will add any element to the set that we haven't seen before.\n    # If an element is in the set already, we'll remove it from the tuple.\n    # We'll also take any elements that are in the set and add them to a new list\n    # that we will return as the result.\n    result = []\n    s = set()\n    for e in tup:\n        if e not in s:\n            s.add(e)\n            result.append(e)\n        else:\n            s.remove(e)\n    return result\n\n\n# You can use this code to test your remove_replica() function.\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(x):\n    r = x[0]\n    for i in range(1, len(x)):\n        if x[i] not in r:\n            r.append(x[i])\n    return r\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(text, char):\n    # your code goes here\n    for i in text:\n        text = text.replace(i, '')\n    return text\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, ch):\n    return string.replace(ch, '')\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(s,c):\n    s = \"\".join([x for x in s if x != c])\n    return s\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(str, c):\n    return str.replace(c, \"\")\n\ndef test_remove_Char():\n    assert remove_Char(\"aba\",'a') == \"b\"\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(s,ch):\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        if s[0] != ch:\n            return s\n        else:\n            return \"\"\n    if len(s) == 2:\n        if s[0] != ch and s[1] != ch:\n            return s\n        else:\n            if s[0] != ch:\n                return s[1]\n            else:\n                return s[0]\n    elif s[0] == ch:\n        return s[1:]+remove_Char(s[1:],ch)\n    elif s[1] == ch:\n        return s[0:]+remove_Char(s[2:],ch)\n    else:\n        return s[0:]+remove_Char(s[1:],ch)", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, char):\n    if string == '':\n        return ''\n    if string[0] != char:\n        return string[0] + remove_Char(string[1:], char)\n    else:\n        return remove_Char(string[1:], char)\n    ", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string,character):\n    new_str = ''\n    for i in string:\n        if i != character:\n            new_str += i\n    return new_str\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string,char):\n\treturn ''.join(x for x in string if x!=char)\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_char(string, char):\n    \"\"\"\n    Return a new string with all occurrences of char removed.\n    \"\"\"\n    return string.replace(char, \"\")\n\n#Call the function", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(str,val):\n    newstr=\"\"\n    for i in range(len(str)):\n        if(str[i]!=val):\n            newstr+=str[i]\n    return newstr\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    return lst[-1:] + lst[:-1]\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(list):\n    \"\"\"\n        Time Complexity : O(n)\n        Space Complexity : O(1)\n    \"\"\"\n    list[0],list[-1] = list[-1],list[0]\n    return list\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(nums):\n    return [nums.pop()] + nums\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(array):\n  return array.insert(0, array.pop())\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(a):\n\treturn [a.pop()] + a\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\nfrom nose.tools import assert_equal\n\n\ndef move_first(data):\n    \"\"\"\n    Fill this in.\n    \"\"\"\n    # shift the first item to the last item in the list\n    data[0], data[-1] = data[-1], data[0]\n    return data\n\n\ndef move_first_2(data):\n    \"\"\"\n    Fill this in.\n    \"\"\"\n    data[0], data[-1] = data[-1], data[0]\n    data.pop()\n    data.insert(0, data.pop())\n    return data\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        first_element = arr[-1]\n        arr = arr[:-1]\n        arr.append(first_element)\n        return arr\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n  return [lst.pop()] + lst\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(arr):\n    \"\"\"\n    >>> move_first([1,2,3,4])\n    [4, 1, 2, 3]\n    \"\"\"\n    first = arr.pop()\n    arr.insert(0,first)\n    return arr\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    \"\"\"\n    Shift last element to first position in the list.\n    \"\"\"\n    lst.append(lst.pop())\n    return lst\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\nimport math\ndef surfacearea_cuboid(a, b, c):\n    \"\"\"Calculates the surface area of a cuboid.\n\n    Args:\n        a (int): the length of the side of the cube\n        b (int): the width of the cube\n        c (int): the height of the cube\n\n    Returns:\n        surfacearea_cuboid (int): the surface area of the cube\n\n    \"\"\"\n    surfacearea_cuboid = 6*(a**2+b**2+c**2)\n    return surfacearea_cuboid\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return (a*b + a*c + b*c) * 2", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(w, l, h):\n    sa = 2*w*l + 2*l*h + 2*h*w\n    return sa\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(l,b,h):\n    return (2*l*h + 2*b*h + 2*l*b)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length,breadth,height):\n    return 2*(length*breadth+breadth*height+height*length)\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a, b, c):\n    return 2*(a*b+a*c+b*c)\n\n\ndef test_surfacearea_cuboid():\n    assert surfacearea_cuboid(1,2,3)==22\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a, b, c):\n    return 2*a*b + 2*a*c + 2*b*c\n\n# Alternate function using a loop\ndef surfacearea_cuboid(a, b, c):\n    # Initialize total surface area to 0\n    total = 0\n    # Loop through all 2D faces and add their areas to the total\n    for i in range(0,3):\n        for j in range(0,3):\n            # Add 2*x*y to total if x != y\n            if i != j:\n                total += 2*(a if i==0 else b if i==1 else c)\n    # Return total surface area\n    return total\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    return 2*(a*b+a*c+b*c)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return 2*(a*b + b*c + a*c)", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\n#%%\ndef surfacearea_cuboid(l,b,h):\n    s=2*(l+b+h)\n    s=s-2*l*b\n    s=s-2*l*h\n    s=s-2*b*h\n    return s\n\n\n#%%"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\nfrom typing import List, Set\n\n\ndef multi_list(m, n):\n    # type: (int, int) -> List[List]\n    return [list(range(i*n, (i+1)*n)) for i in range(m)]\n\n\ndef multi_list_improve(m, n):\n    # type: (int, int) -> List[List]\n    return [list(range(i*n, (i+1)*n)) for i in range(m)]\n\n\ndef multi_list_improve2(m, n):\n    # type: (int, int) -> List[List]\n    return [list(range(i*n, (i+1)*n)) for i in range(m)]\n\n\ndef multi_list_set(m, n):\n    # type: (int, int) -> List[List]\n    return [list(range(i*n, (i+1)*n)) for i in range(m)]\n\n\ndef multi_list_set2(m, n):\n    # type: (int, int) -> List[List]\n    return [list(range(i*n, (i+1)*n)) for i in range(m)]\n\n\ndef multi_list_set3(m, n):\n    # type: (int, int) -> List[List]\n    return [list(range(i*n, (i+1)*n)) for i in range(m)]\n\n\ndef multi_list_set4(m, n):\n    # type: (int, int) -> List[List]\n    return [list(range(i*n, (i+1)*n)) for i in range(m)]\n\n\ndef multi_list_set5(m, n):\n    # type: (int, int) -> List[List]\n    return [list(range(i*n, (i+1)*n)) for i in range(m)]\n\n\ndef multi_list_set6(m, n):\n    # type: (int, int", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(cols, rows):\n    result = []\n    for i in range(rows):\n        result.append([i for j in range(cols)])\n    return result\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(num,size):\n    \"\"\"\n    Returns a list of lists with dimension num*size\n    \"\"\"\n    return [[0 for i in range(size)] for j in range(num)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\nfrom typing import List\ndef multi_list(x: int, y: int) -> List[List[int]]:\n    return [[0]*y for _ in range(x)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(n,m):\n\treturn [[i for i in range(m)] for j in range(n)]\n\n#--------------------------------------------------------------\n#--------------------------------------------------------------\n#--------------------------------------------------------------\n\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(m,n):\n\treturn [[i*n for i in range(m)] for i in range(m)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(x, y):\n    return [[i*x for i in range(y)] for j in range(x)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(num_row, num_col):\n    list_list = []\n    for i in range(num_row):\n        list_list.append([0 for j in range(num_col)])\n        for j in range(num_col):\n            list_list[i][j] = i*num_col + j\n    return list_list\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(row, col):\n    result = [[0] * col for i in range(row)]\n    for i in range(row):\n        for j in range(col):\n            result[i][j] = i * j\n    return result\n\n# or \ndef multi_list(row, col):\n    result = [[0 for j in range(col)] for i in range(row)]\n    for i in range(row):\n        for j in range(col):\n            result[i][j] = i * j\n    return result\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\nfrom typing import List\n\n\ndef multi_list(row: int, col: int) -> List[List[int]]:\n    ans = []\n    for i in range(row):\n        ans.append([i*col for j in range(col)])\n\n    return ans\n\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_lists, index):\n    list_of_lists.sort(key=lambda x: x[index])\n    return list_of_lists\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n# To sort the list by a given index of the inner list, we need to compare the values in that index of each inner list.\n# So we will use the sorted() function to sort the list by the index, and then we will use the list.sort() function to sort the list by the inner list.\n\ndef index_on_inner_list(list_of_lists, index):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n    \"\"\"\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\ndef main():\n    list_of_lists = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\n    print(\"Sorted by first index: \", index_on_inner_list(list_of_lists, 0))\n\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, idx):\n    lst.sort(key=lambda x: x[idx])\n    return lst\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst,index):\n    \"\"\"\n    lst: list of lists\n    index: integer\n    \n    returns: list of lists sorted by index of inner lists\n    \"\"\"\n    def inner_list_index(lst,index):\n        return sorted(lst,key=lambda l:l[index])\n    return inner_list_index(lst,index)\n    ", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_list,index):\n    sorted_list_of_list = sorted(list_of_list, key=lambda x:x[index])\n    return sorted_list_of_list\n\nindex_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(l, idx):\n    l.sort(key=lambda x: x[idx])\n    return l\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n    new_list = []\n    for sublist in list_of_lists:\n        new_list.append(sorted(sublist, key = sublist.__getitem__, reverse = True))\n    return new_list", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(l,index):\n    \"\"\"\n    Sort a list of lists by a given index of the inner list.\n    \"\"\"\n    return sorted(l, key = lambda x: x[index])\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n    return sorted(list_of_lists, key = lambda x: x[index])\n\nindex_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(students, index):\n    return sorted(students, key=lambda student: student[index])\n\n#print(index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0))"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(array):\n  # Time complexity: O(n)\n  # Space complexity: O(1)\n  if len(array) <= 1:\n    return 0\n  else:\n    first_element = array[0]\n    middle_element = array[len(array)//2]\n    if first_element < middle_element:\n      return find_rotation_count(array[1:])\n    else:\n      return len(array) + 1 + find_rotation_count(array[len(array)//2+1:])\n\n\ndef find_rotation_count_optimized(array):\n  # Time complexity: O(n)\n  # Space complexity: O(1)\n  if len(array) <= 1:\n    return 0\n  else:\n    first_element = array[0]\n    middle_element = array[len(array)//2]\n    if first_element < middle_element:\n      return find_rotation_count(array[1:])\n    else:\n      return len(array) + 1 + find_rotation_count(array[len(array)//2+1:])", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nimport pytest\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    low = 0\n    high = len(arr) - 1\n\n    # while the low is less than the high\n    while low < high:\n        # if the high and low are the same, then we found a rotation\n        if arr[low] == arr[high]:\n            return 1\n\n        # otherwise, set the middle index to be the middle of low and high\n        middle = (low + high) // 2\n\n        # if the middle is less than the low, then the arr[low] must be greater than arr[middle]\n        # so we should set the low to be middle + 1\n        if arr[middle] < arr[low]:\n            low = middle + 1\n        # if the middle is greater than the high, then the arr[high] must be greater than arr[middle]\n        # so we should set the high to be middle - 1\n        else:\n            high = middle - 1\n    return 0\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(nums):\n    lo = 0\n    hi = len(nums) - 1\n\n    while lo < hi:\n        # lo is where we have found the pivot point, hi is where we have found the end of the first cycle\n        if nums[lo] < nums[hi]:\n            return 0\n        pivot = nums[lo]\n\n        left = lo + 1\n        right = hi - 1\n\n        # move left until we find an element > pivot, or reach the end of the first cycle\n        while left <= right and nums[left] < pivot:\n            left += 1\n        # move right until we find an element > pivot, or reach the start of the second cycle\n        while left <= right and nums[right] > pivot:\n            right -= 1\n\n        if left > right:\n            return 0\n        else:\n            # swap elements to make pivot at left, then move lo and hi appropriately\n            nums[left], nums[right] = nums[right], nums[left]\n            lo = left\n            hi = right\n\n    return hi - lo + 1\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    arr_max = max(arr)\n    arr_min = min(arr)\n    mid_point = (arr_max + arr_min) // 2\n\n    rotations = 0\n    for x in arr:\n        if x <= mid_point:\n            rotations += 1\n        else:\n            rotations -= 1\n\n    if rotations > 0:\n        return rotations\n\n    return rotations + 1\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    # build hash table and check for duplicate elements.\n    # duplicate means rotation.\n    hash_map = {}\n    for idx, val in enumerate(arr):\n        if val in hash_map:\n            return idx-hash_map[val]\n        hash_map[arr[idx+1]] = idx+1\n    return 0\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(nums):\n    i, j = 0, len(nums) - 1\n    while i < j:\n        while i < j and nums[i] == nums[j]:\n            j -= 1\n        if i == j:\n            return 0\n        i += 1\n\n    if j == 0 and nums[i] == nums[j]:\n        return 0\n\n    return 1 + find_rotation_count(nums[i:]) + find_rotation_count(nums[0:i])\n\n\ndef test_find_rotation_count():\n    nums = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert find_rotation_count(nums) == 3", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    # Write your code here.\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            break\n        if arr[i + 1] < arr[i]:\n            return i + 1\n    return len(arr)\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nimport pytest\n\n\ndef find_rotation_count(arr):\n    rotations = 0\n    length = len(arr)\n\n    for i in range(length - 1):\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n        else:\n            break\n\n    for i in range(length - 1):\n        if arr[i] < arr[i + 1]:\n            rotations += 1\n        else:\n            break\n\n    return rotations\n\n\n@pytest.mark.parametrize(\n    \"arr,expected\",\n    [\n        ([8, 9, 10, 1, 2, 3, 4, 5, 6, 7], 3),\n        ([1, 2, 3, 4, 5], 0),\n        ([5, 4, 3, 2, 1], 0),\n        ([1, 2, 3, 4, 5, 6, 7], 0),\n        ([1, 2, 3, 4, 5, 6, 7, 8], 1),\n    ],\n)\ndef test_find_rotation_count(arr, expected):\n    assert find_rotation_count(arr) == expected", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\n# Binary Search to find first element that is not in expected position\n\ndef find_rotation_count(A):\n    \"\"\"\n    Takes in a circularly sorted list and returns the number of rotations it has done.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    found = False\n    while low <= high and not found:\n        mid = low + (high-low)//2\n        # if mid is in its expected position, move right\n        if A[mid] == mid:\n            high = mid - 1\n        # otherwise move left\n        else:\n            low = mid + 1\n    # if left pointer is found, then the list has been rotated left\n    if low == len(A):\n        return len(A)\n    else:\n        return len(A) - low"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\nfrom typing import List\n\n\ndef even_bit_toggle_number(number: int) -> int:\n    # write your code here\n    return ~number & number ^ number\n\n\ndef even_bit_toggle_list(lst: List[int]) -> List[int]:\n    new_lst = []\n    for i in lst:\n        new_lst.append(even_bit_toggle_number(i))\n    return new_lst", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    result = number\n    while number > 0:\n        if number % 2 == 0:\n            result += number // 2\n        number //= 2\n    return result\n\n\ndef even_bit_toggle_number(number):\n    return sum(number // (1 << i) for i in range(64))\n\n\ndef even_bit_toggle_number(number):\n    return sum(number & (1 << i) for i in range(64))\n\n\ndef even_bit_toggle_number(number):\n    return sum(bin(number).count('1') // (2 ** i) for i in range(64))\n\n\ndef even_bit_toggle_number(number):\n    return sum(bin(number).count('1') // 2 ** i for i in range(64))\n\n\ndef even_bit_toggle_number(number):\n    count = 0\n    while number > 0:\n        if number & 1:\n            count += 1\n        number >>= 1\n    return count\n\n\ndef even_bit_toggle_number(number):\n    return sum(int(bool(number & (1 << i))) for i in range(64))\n\n\ndef even_bit_toggle_number(number):\n    return sum(number & ~(1 << i) for i in range(64))", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    \"\"\"\n    num: an integer\n\n    Returns: an integer\n    \"\"\"\n    return num ^ ((num >> 1) & 0x55555555)\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 15\n\ntest_even_bit_toggle_number()", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    # your code goes here\n    result = 0\n    if n == 0:\n        return 0\n    else:\n        for i in range(n.bit_length()-1, -1, -1):\n            if n & (1 << i):\n                result += 2 ** i\n    return result\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    return num ^ 11\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n\t# your code here\n\treturn number\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    result = 0\n    for i in range(32):\n        if i % 2 == 1:\n            result |= (1 << i)\n\n    return number ^ result", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n    return num & 0b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(x):\n    \"\"\"\n    >>> even_bit_toggle_number(10)\n    15\n    \"\"\"\n    even_bits = list(filter(lambda y: y % 2 == 0, bin(x)[2:]))\n    odd_bits = list(filter(lambda y: y % 2 == 1, bin(x)[2:]))\n    even_bits.extend(odd_bits)\n    even_bits = map(lambda y: int(y), even_bits)\n    even_bits = list(filter(lambda y: y != 0, even_bits))\n    return int(''.join(map(str, even_bits)), 2)", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(number):\n  \"\"\"\n  Bitwise toggle all odd bits of a given number.\n  :param number: number\n  :return: number with toggled bits\n  \"\"\"\n  # your code here\n  pass\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\n# Python3 program to find the frequency of the smallest value\n# in a given array.\ndef frequency_Of_Smallest(n, arr):\n\t# Count the frequency of smallest\n\t# element.\n\tsmallest = min(arr)\n\n\tcount = 0\n\t# Iterate over all the elements.\n\tfor i in range(0, n):\n\t\tif (arr[i] == smallest):\n\t\t\tcount += 1\n\treturn count\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(size,arr):\n    x = min(arr)\n    count = 0\n    for i in range(0,size):\n        if arr[i] == x:\n            count = count + 1\n    return count", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    count=0\n    for i in arr:\n        if i==min(arr):\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(array_length, array):\n  smallest = array[0]\n  frequency = 1\n  for i in array:\n    if i <= smallest:\n      frequency += 1\n      smallest = i\n  return frequency\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,arr):\n    count = 0\n    smallest = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] <= smallest:\n            smallest = arr[i]\n            count += 1\n    return count", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n\tfreq = [0]*(n+1)\n\tfor i in arr:\n\t\tfreq[i] += 1\n\treturn min(freq)\n\t", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n, arr):\n    sarr = sorted(arr)\n    return sarr[0]\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,arr):\n    frequency = [0 for i in range(n)]\n    min_value = arr[0]\n    for i in range(n):\n        if arr[i] < min_value:\n            min_value = arr[i]\n        frequency[i] = (arr[i] == min_value)\n    return frequency\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    arr.sort()\n    if n < arr[0]:\n        return 0\n    elif n > arr[-1]:\n        return 0\n    else:\n        count = 1\n        for i in range(1,len(arr)):\n            if arr[i] == arr[i-1]:\n                count += 1\n            else:\n                break\n        return count\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\n# assert get_perrin(9) == 12\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    # Base Case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    # Start Calculation\n    else:\n        # Recursive Call\n        return get_perrin(n-1) + get_perrin(n-2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\n# Your code here\n\ndef get_perrin(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\ndef test_get_perrin():\n    assert get_perrin(9) == 12", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    return n * get_perrin(n-1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    else:\n        return n + get_perrin(n-1)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n    ", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\n#solution\ndef get_perrin(n):\n    if n == 0:\n        return 1\n    return get_perrin(n-1) + get_perrin(n-2)\n\n#another solution\ndef get_perrin(n):\n    if n <= 2:\n        return 1\n    return get_perrin(n-1) + get_perrin(n-2)\n\n#test", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    \"\"\"\n    Use recursion to get the n'th perrin number.\n    :param n: The position of the perrin number in the sequence\n    :return: n'th perrin number\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n# Test", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\n# recursive solution\ndef get_perrin(n: int):\n    \"\"\"Returns the n-th perrin number\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    if n <= 2:\n        return 1\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\n\n# iterative solution\ndef get_perrin_iter(n: int):\n    \"\"\"Returns the n-th perrin number using recursion\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    if n <= 2:\n        return 1\n    else:\n        res = 0\n        for i in range(n - 1):\n            res = res + get_perrin_iter(i)\n        return res + 1"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    stack = []\n    count = 0\n    for i in s:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                count += 1\n    return count\n\ndef main():\n    print(swap_count(\"[]][][\"))\n\nmain()", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(expression):\n    if expression.count(\"(\") == expression.count(\")\") == expression.count(\"[\") == expression.count(\"]\"):\n        return 0\n\n    stack = []\n    for c in expression:\n        if c == \"(\" or c == \"[\" or c == \"{\":\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return 1\n            last_c = stack.pop()\n            if c == \")\":\n                if last_c != \"(\":\n                    return 1\n            elif c == \"]\":\n                if last_c != \"[\":\n                    return 1\n            elif c == \"}\":\n                if last_c != \"{\":\n                    return 1\n    return 0\n\n# Time Complexity O(N)\n# Space Complexity O(N)", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\nimport pytest\n\n\ndef is_closed(symbol):\n    return symbol == '[' or symbol == ']'\n\n\ndef is_opened(symbol):\n    return symbol == '(' or symbol == ')'\n\n\ndef is_bracket(symbol):\n    return symbol == '(' or symbol == '[' or symbol == ')'\n\n\ndef swap_count(expression):\n    count = 0\n    # use 2 stacks\n    open_stack = []\n    closed_stack = []\n\n    for symbol in expression:\n        if is_bracket(symbol):\n            if not open_stack and not closed_stack:\n                open_stack.append(symbol)\n            elif is_closed(symbol) and closed_stack and is_opened(closed_stack[-1]):\n                closed_stack.pop()\n            else:\n                open_stack.append(symbol)\n        else:\n            open_stack.append(symbol)\n\n    while open_stack:\n        count += 1\n        open_stack.pop()\n\n    return count\n\n\ndef test_swap_count():\n    assert swap_count(\"[]][][\") == 2\n    assert swap_count(\"[(\") == 1\n    assert swap_count(\"((()))\") == 1\n    assert swap_count(\"([)]\") == 2\n    assert swap_count(\"([)])\") == 3\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(str):\n    balanced = False\n    swap_count = 0\n    for i in str:\n        if i == '[':\n            balanced = True\n        elif i == ']':\n            if not balanced:\n                swap_count += 1\n            else:\n                balanced = False\n    return swap_count\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    stack = []\n    for i in range(len(string)):\n        if string[i] == \"(\":\n            stack.append(i)\n        else:\n            if not stack:\n                return len(string)\n            stack.pop()\n    return len(string)-len(stack)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    cnt = 0\n    stack = []\n    for ch in s:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                cnt += 1\n            else:\n                stack.pop()\n    return cnt", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    swaps = 0\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] == '(' and s[j] == ')':\n            i += 1\n            j -= 1\n        elif s[i] == '[' and s[j] == ']':\n            i += 1\n            j -= 1\n        elif s[i] == '{' and s[j] == '}':\n            i += 1\n            j -= 1\n        else:\n            swaps += 1\n            i += 1\n    return swaps\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    a = s.count(\"[\")\n    b = s.count(\"]\")\n    print(a,b)\n    count = 0\n    while(a != b):\n        count += 1\n        if a > b:\n            s = s.replace(\"]\", \"[\", 1)\n            a -= 1\n        elif a < b:\n            s = s.replace(\"[\", \"]\", 1)\n            b -= 1\n        #print(s)\n    return count\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\n# O(n) time | O(n) space - where n is the length of the input string\ndef swap_count(input_string):\n    stack = []\n\n    for i in input_string:\n        if i in \"([{\":\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return \"Unbalanced Brackets\"\n            else:\n                last_element = stack.pop()\n\n                if not match(last_element, i):\n                    return \"Unbalanced Brackets\"\n\n    return len(stack)\n\n\ndef match(open_bracket, close_bracket):\n    return open_bracket == \"(\" and close_bracket == \")\" or \\\n           open_bracket == \"{\" and close_bracket == \"}\" or \\\n           open_bracket == \"[\" and close_bracket == \"]\"", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n# Solution\ndef even_or_odd(x):\n    if x[0] == x[-1] == \"0\":\n        return \"Even\"\n    elif x[0] == x[-1] == \"1\":\n        return \"Odd\"\n    else:\n        return \"Odd\" if x[-1] == \"0\" else \"Even\"\n\n\n# Testing", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hexadecimal_number):\n    # Your code here\n    print(\"even or odd\", hexadecimal_number)\n    if int(hexadecimal_number[0]) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(string):\n    if int(string, 16)%2 != 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(num):\n    if(num[-1] in \"56789\"):\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(num):\n    return \"Even\" if num[0] & 1 == 0 else \"Odd\"\n\ndef even_or_odd(num):\n    return \"Even\" if int(num[0]) % 2 == 0 else \"Odd\"", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(number):\n    if number[0]%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n    return\n\ndef main():\n    user_input = input(\"Enter a number\\n\")\n    even_or_odd(user_input)\n    return\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(number):\n    int(number, 16)\n    if len(number)%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(number):\n    sum = 0\n    for i in number:\n        sum = sum + int(i)\n    if(sum%2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(h):\n    if h[-1] == \"0\":\n        return \"Even\"\n    else:\n        return \"Odd\"", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_num):\n\n    if int(hex_num, 16) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    i = 0\n    while(2**i <= n):\n        i += 1\n    return 2**(i-1)\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\nfrom math import log2\n\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return int(log2(n))\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    \"\"\"O(log(n))\"\"\"\n    if n == 0:\n        return 0\n\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n\n    return power_of_2 // 2\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    n = int(n)\n    if n == 0:\n        return 0\n    result = 0\n    while n > 1:\n        result += 1\n        n //= 2\n    return result\n\n\ndef test_highest_Power_of_2():\n    assert highest_Power_of_2(10) == 8\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    return 2 ** int(math.log(n, 2))\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 << (n - 1).bit_length()\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n\thighest_power_2 = 0\n\twhile (n > 0):\n\t\tif (n & 1) == 1:\n\t\t\tn >>= 1\n\t\t\thighest_power_2 += 1\n\t\telse:\n\t\t\tn >>= 1\n\treturn highest_power_2\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    #write your code here\n    \"\"\"\n    Base Cases\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    if n == 1:\n        return 1\n    \"\"\"\n    Iteration\n    \"\"\"\n    while n > 1:\n        n = n // 2\n    return n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n\t# initialize result\n\tresult = 0\n\t# initialize i to 1\n\ti = 1\n\t# keep looping as long as n is greater than 0\n\twhile n > 0:\n\t\t# if n is power of 2, then we are done\n\t\tif n & (n-1) == 0:\n\t\t\tresult = i\n\t\t\tbreak\n\t\t# shift n by 1 bit to left\n\t\tn >>= 1\n\t\t# increment i by 1\n\t\ti += 1\n\t# return result\n\treturn result\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\n# Solution 1: Memoization\ndef find_lucas(n):\n    cache = {0: 2, 1: 1}\n\n    def _find(n):\n        if n not in cache:\n            cache[n] = _find(n-1) + _find(n-2)\n        return cache[n]\n    return _find(n)\n\n\n# Solution 2: Bottom-up\ndef find_lucas(n):\n    a = 2\n    b = 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return b", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n <= 0:\n        return \"INVALID\"\n    l1 = 2\n    l2 = 1\n    for i in range(2, n+1):\n        tmp = l1 + l2\n        l1 = l2\n        l2 = tmp\n    return l2\n\n\ndef test_find_lucas():\n    assert find_lucas(9) == 76\n    assert find_lucas(-1) == \"INVALID\"", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef lucas(n):\n    if n == 1:\n        return 2\n    else:\n        return find_lucas(n-1)+find_lucas(n-2)\n\ndef find_lucas(n):\n    n = int(n)\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    return lucas(n)", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=1024)\ndef find_lucas(n):\n    # base cases\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return find_lucas(n // 2) * find_lucas(n // 2)\n    else:\n        return find_lucas((n - 1) // 2) * find_lucas((n - 1) // 2) + find_lucas(\n            (n - 2) // 2\n        ) * find_lucas((n - 2) // 2)\n\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(list_of_nums,string):\n    list_of_nums = list(map(lambda x: string.format(x),list_of_nums))\n    return list_of_nums\n\n#Test", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(l,string):\n    return [string.format(i) for i in l]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst,s):\n    newLst = []\n    for i in range(len(lst)):\n        newLst.append(s + str(lst[i]))\n    return newLst\n# Answer\ndef add_string(lst, s):\n    return [s + str(i) for i in lst]", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(items, string):\n    res = []\n    for item in items:\n        res.append(string.format(item))\n    return res\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(l,s):\n    return [s + str(x) for x in l]\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n# Taken from the discussion page of this question\ndef add_string(L,str):\n    return [str + str(s) for s in L]\n\n\ndef test_add_string():\n    assert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(li, string):\n    new = []\n    for item in li:\n        new.append(string.format(item))\n    return new\n\ndef test_function():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(my_list,string):\n    for index in range(len(my_list)):\n        my_list[index] = string.format(my_list[index])\n    return my_list\n\n\n# ==== Tests ====", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(a, s):\n    a = [s + str(i) for i in a]\n    return a\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(items, string):\n    new_list = [string.format(item) for item in items]\n    return new_list\n\n# Other ways to do it:\n# Use map\n# def add_string(items, string):\n#     return list(map(lambda item: string + item, items))\n\n# Use reduce\n# def add_string(items, string):\n#     return list(reduce(lambda x, y: x+y, [string+i for i in items]))\n\n# Use itertools\n# import itertools\n# def add_string(items, string):\n#     return list(itertools.imap(lambda x: string + x, items))"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(lst1, lst2, lst3):\n    dict_lst = [{} for i in range(len(lst1))]\n    for i in range(len(lst1)):\n        dict_lst[i][lst2[i]] = lst3[i]\n    return dict_lst\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1,list2,list3):\n\tmy_dict={}\n\tfor i in range(len(list1)):\n\t\tmy_dict[list1[i]]={list2[i]:list3[i]}\n\treturn my_dict", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(student_id_list,class_list,marks_list):\n    final_dict={}\n    for i in range(len(student_id_list)):\n        temp_dict={}\n        temp_dict[class_list[i]]=marks_list[i]\n        final_dict[student_id_list[i]]=temp_dict\n    return final_dict", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(first,second,third):\n    #return the dictionary\n    dictionary={}\n    for i in range(len(first)):\n        dictionary[first[i]] = {second[i] : third[i]}\n    return dictionary\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(students, names, marks):\n    dictionary = dict()\n    # zip() is used for combining two lists \n    # into a list of tuples \n    for student, name, mark in zip(students, names, marks): \n        if student not in dictionary:\n            dictionary[student] = dict()\n        dictionary[student][name] = mark\n    return dictionary\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(ids, names, scores):\n  student_score = []\n  for i in range(len(ids)):\n    if(student_score == []):\n      student_score = {ids[i]: {names[i]: scores[i]}}\n    else:\n      student_score[ids[i]] = {names[i]: scores[i]}\n  return student_score\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(first_list, second_list, third_list):\n    first_dict = dict(zip(first_list, [{}]*len(first_list)))\n    for key, value in zip(first_list, second_list):\n        first_dict[key][value] = third_list[first_list.index(key)]\n    return first_dict\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1,list2,list3):\n    dic=dict()\n    for i in range(len(list1)):\n        dic[list1[i]]=dict()\n        for j in range(len(list2)):\n            dic[list1[i]][list2[j]]=list3[j]\n    return dic\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(students, schools, results):\n    dictionary = {}\n    for i, j, k in zip(students, schools, results):\n        dictionary[i] = {j:k}\n    return dictionary\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(sub_list, student_name, marks):\n    dict_list = []\n    index = 0\n    for sub in sub_list:\n        dict_list.append({sub: {student_name[index]: marks[index]}})\n        index += 1\n    return dict_list\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n < 6:\n        return n\n    return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n\n# test", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n\n    if n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return max((get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)), n)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\n# O(n log(n)) time, O(n) space\ndef get_max_sum(n):\n    if n == 1:\n        return n\n    \n    max_sum_so_far = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    max_sum_so_far += n\n    return max_sum_so_far\n\ndef get_max_sum2(n):\n    if n == 1:\n        return n\n    \n    max_sum_so_far = n\n    for i in range(2, int(math.log(n, 2))+1):\n        max_sum_so_far = max(max_sum_so_far, n+get_max_sum2(n/i))\n    \n    return max_sum_so_far", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\nimport math\n\n\ndef get_max_sum(n):\n    sums = []\n    for i in range(1, n+1):\n        sums.append((i * (i + 1)) / 2)\n\n    i = 6\n    while i <= n:\n        sums[i-1] = max(sums[i-1], sums[i-2] + sums[i-3] + sums[i-4] + sums[i-5])\n        i = i * 5\n\n    return math.ceil(sums[n-1])", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n < 1:\n        return 0\n    elif n < 5:\n        return n\n    elif n % 2 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/4), n)\n    elif n % 3 == 0:\n        return max(get_max_sum(n/3) + get_max_sum(n/5), n)\n    else:\n        return max(get_max_sum(n/5) + get_max_sum(n/6), n)\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\nfrom math import ceil, log\n\ndef get_max_sum(n):\n  # Base case\n  if n < 6:\n    return n\n  # Write your code here\n  max_n = n\n  for i in range(ceil(log(n, 3))):\n    max_n = max(max_n, get_max_sum(n // (3**i))) + n // (3**i)\n  return max_n\n\n# test", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n < 5:\n        return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(arr):\n    return max(arr, key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom random import randint\nfrom functools import reduce\n\ndef max_length_list(L):\n    return reduce(lambda x,y: x if len(x[1]) > len(y[1]) else y, L)\n\n\ndef generate_random_list(n):\n    return [[randint(0, 1000) for i in range(randint(0, 1000))] for j in range(n)]\n\n\ndef test_max_length_list():\n    L = generate_random_list(1000)\n    assert max_length_list(L) == max(enumerate(L), key = lambda x: len(x[1]))", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom functools import reduce\nfrom itertools import permutations\nfrom functools import partial\n\n\ndef max_length_list(lst):\n    return max(\n        map(lambda x: (len(x), x), permutations(lst)),\n        key=lambda x: x[0]\n    )\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n  result = max(lst, key = lambda x: len(x))\n  return (len(result),result)\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lst):\n    return max((len(i), i) for i in lst)\n\n\ndef test_max_length_list():\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (\n        3,\n        [13, 15, 17],\n    )", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom functools import reduce\n\ndef max_length_list(lst):\n\treturn (max(reduce(lambda x,y: x+y, (len(i) for i in lst))), lst[reduce(lambda x,y: x if len(i) > len(lst[y]) else y, range(len(lst)))])\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(my_list):\n    return max(map(len, my_list), key=lambda l:len(l))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(list_of_list):\n    max_length=0\n    result=[]\n    for i in list_of_list:\n        result.append(len(i))\n    return max(result),list_of_list[result.index(max(result))]\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(list_of_lists):\n    return max(list_of_lists, key=lambda x: len(x))\n\ndef test_max_length_list():\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom typing import List\n\ndef max_length_list(lst: List[List[int]]) -> (int, List[int]):\n    length = 0\n    result = []\n    for i in range(len(lst)):\n        if len(lst[i]) > length:\n            length = len(lst[i])\n            result = lst[i]\n    return (length, result)\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(lst):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    d = set()\n    for num in lst:\n        if num in d:\n            return False\n        else:\n            d.add(num)\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    print(tup)\n    return len(set(tup)) == len(tup)\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    seen = set()\n    return not any(elem in seen or seen.add(elem) for elem in tup)\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tuple):\n    for i in range(len(tuple)):\n        for j in range(i+1, len(tuple)):\n            if tuple[i] == tuple[j]:\n                return False\n    return True\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(myTuple):\n    # your code here\n    myTuple.sort()\n    for i in range(len(myTuple)-1):\n        if myTuple[i] == myTuple[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(t):\n    print(\"check_distinct t\", t)\n    if len(set(t)) == len(t):\n        return True\n    return False\n\ndef test_check_distinct():\n    assert check_distinct([1, 2, 3]) == True\n    assert check_distinct([1, 2, 3, 4]) == True\n    assert check_distinct([1, 2, 3, 4, 1]) == False\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(t):\n    # for e in t:\n    #     if t.count(e) > 1:\n    #         return False\n    # return True\n    return len(t) == len(set(t))\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    counts = [0] * 256\n\n    for char in string:\n        counts[ord(char)] += 1\n\n    for index in range(256):\n        if counts[index] == 1:\n            return chr(index)\n\n    return None\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n# Sample Solution\n# def first_non_repeating_character(string):\n#     \"\"\"\n#     Return the first non-repeating character in the given string.\n#     If all characters are repeated, return None.\n#     \"\"\"\n#     # Convert to a dictionary with frequency of each character\n#     # If the dictionary has any repeated keys, then that key will be 0.\n#     # Therefore, the first non-repeating character will have a frequency of 1.\n#     character_frequencies = {c: string.count(c) for c in string}\n#\n#     # Iterate through the string and return the first character with frequency = 1\n#     for c in string:\n#         if character_frequencies[c] == 1:\n#             return c\n#\n#     return None\n\n# # Test cases", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(str):\n    if len(str) == 0:\n        return None\n    hashMap = {}\n    for char in str:\n        if char in hashMap:\n            return None\n        hashMap[char] = 1\n    return str[0]\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\nfrom collections import defaultdict\n\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    map_character = defaultdict(int)\n    for char in string:\n        map_character[char] += 1\n    for i in range(len(string)):\n        if map_character[string[i]] == 1:\n            return string[i]\n    return None\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(str):\n    \"\"\"\n    This will find the first character that is not repeated.\n    \n    :param str: A string to be searched\n    :return: The first character that is not repeated in the string if found, else None\n    \"\"\"\n    \"\"\"\n    Approach :\n    1. Create a dictionary to store the characters of the string\n    2. Loop through each character of the string\n    3. If the character is not found in the dictionary, then add it to the dictionary else return None\n    \n    \"\"\"\n    chars_dict = {}\n    for char in str:\n        if char in chars_dict:\n            return None\n        else:\n            chars_dict[char] = 1\n    return str[0]\n    \n# This will print the first non-repeating character of the string", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    if len(string) < 2:\n        return None\n    dictionary = {}\n    for char in string:\n        if dictionary.get(char) == None:\n            dictionary[char] = 1\n        else:\n            dictionary[char] = dictionary[char] + 1\n    for char in string:\n        if dictionary[char] == 1:\n            return char\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\nfrom collections import Counter\n\n\ndef first_non_repeating_character(string):\n    \"\"\"Returns the first non-repeated character in a given string.\n\n    Args:\n       string(string), string to be searched\n    Returns:\n       str, The first non-repeated character in the given string\n    \"\"\"\n    # Check string is empty\n    if not string:\n        return None\n\n    # Create a dictionary with counts of characters\n    character_counter = Counter(string)\n\n    # Find a character in the string that only appears once\n    for character in string:\n        if character_counter[character] == 1:\n            return character\n\n    # Return None if no such character\n    return None\n\n\ndef main():\n    # Output: a\n    print(first_non_repeating_character(\"abcabc\"))\n\n    # Output: -1\n    print(first_non_repeating_character(\"\"))\n\n    # Output: c\n    print(first_non_repeating_character(\"abc\"))\n\n    # Output: e\n    print(first_non_repeating_character(\"abbe\"))\n\n    # Output: d\n    print(first_non_repeating_character(\"aabcc\"))\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\nfrom collections import Counter\n\n\ndef first_non_repeating_character(input_string):\n    if len(input_string) <= 1:\n        return None\n    else:\n        all_chars = []\n        for char in input_string:\n            all_chars.append(char)\n        character_counter = Counter(all_chars)\n        for char in input_string:\n            if character_counter[char] == 1:\n                return char\n            else:\n                continue\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    d = {}\n    for c in string:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n\n    for key, value in d.items():\n        if value == 1:\n            return key\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    d = {}\n    for char in string:\n        if d.get(char):\n            d[char] += 1\n        else:\n            d[char] = 1\n    for key in d.keys():\n        if d[key] == 1:\n            return key\n    return None"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nimport re\n\n\ndef check_char(string):\n    return \"Valid\" if re.match(r\"^([a-z]|\\w)(\\1)$\", string) else \"Invalid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(s):\n    return \"Valid\" if re.match(\"^[a-zA-Z]\\w*([a-zA-Z]\\w*)$\", s) else \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\n\ndef check_char(text):\n    if re.match(\"^[a-zA-Z]{1}$\", text) and re.match(\"^[a-zA-Z]{1}$\", text[::-1]):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n\n# Tests", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(s):\n  if s[0] == s[-1]:\n    return 'Valid'\n  else:\n    return 'Invalid'\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(input_str):\n    # your code goes here\n    if input_str.startswith(input_str[-1]) and input_str.endswith(input_str[0]):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n#assert check_char(\"abba\") == \"Valid\"\n#assert check_char(\"abca\") == \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if re.search(r'^\\w+.$',string) and re.search(r'.*\\w+$',string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if (string[0] == string[-1]):\n        return \"Valid\"\n    return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(string):\n    return \"Valid\" if re.match(r\"^[a-z]{3}|[a-z]{3}$\", string) else \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\n\ndef check_char(s: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n\n    :param s: a string\n    :return: \"Valid\" or \"Invalid\"\n    \"\"\"\n    if re.match(rf\"^({s[0]})({s[0]})({s[1:]})$\", s):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\n\ndef check_char(string):\n    \"\"\"\n    This function returns a string \"Valid\" if the given string starts and ends with the same character or \"Invalid\" otherwise.\n    \"\"\"\n    check = re.match(r\"\\w\\w\\w\\w$\", string)\n    if check:\n        return \"Valid\"\n    return \"Invalid\"\n\n\n# Test cases"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num_1, num_2, num_3):\n    \"\"\"\n    Takes three arguments and finds the median of the three numbers.\n    \"\"\"\n    # sort the numbers\n    sorted_list = sorted([num_1, num_2, num_3])\n    # find the median\n    median = sorted_list[len(sorted_list)//2]\n    return median\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a, b, c):\n    return sorted([a,b,c])[1]\n\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(n1, n2, n3):\n    \"\"\"\n    :param n1: first number\n    :param n2: second number\n    :param n3: third number\n    :return: the median of the three numbers\n    \"\"\"\n    sort = sorted([n1, n2, n3])\n    if len(sort) % 2 == 0:\n        return (sort[int(len(sort) / 2)] + sort[int(len(sort) / 2) - 1]) / 2.0\n    else:\n        return sort[int(len(sort) / 2)]\n\n\ndef test_median_numbers():\n    \"\"\"\n    Run some sample tests\n    \"\"\"\n    assert median_numbers(25, 55, 65) == 55.0\n    assert median_numbers(10, 99, 1) == 50.0\n    assert median_numbers(1, 2, 3) == 2.0\n\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(x,y,z):\n    \"\"\"\n    Write your function here\n    \"\"\"\n    lst = [x,y,z]\n    lst.sort()\n    if len(lst) % 2 == 0:\n        return (lst[int(len(lst)/2 - 1)] + lst[int(len(lst)/2)]) / 2\n    else:\n        return lst[int(len(lst) / 2)]", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a, b, c):\n    #Define our list\n    numbers = [a,b,c]\n\n    #Sort the list\n    numbers.sort()\n\n    #Find the length of the list\n    length = len(numbers)\n\n    #Find the median\n    if length % 2 == 0:\n        return (numbers[length//2] + numbers[length//2 -1]) / 2.0\n    else:\n        return numbers[length//2]\n\n#If we run this code on our function", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\nimport math\n\ndef median_numbers(x,y,z):\n    if x < y < z or y < x < z or z < x < y:\n        return y\n    elif x < z < y or z < x < y or y < x < z:\n        return x\n    elif y < z < x or z < y < x or x < y < z:\n        return z\n    else:\n        return \"ERROR\"\n\ndef median_numbers_func(numbers):\n    numbers = list(numbers)\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        return (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        return numbers[length // 2]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a, b, c):\n    #print(a,b,c)\n    if (a > b and a > c) or (b > a and b > c) or (c > a and c > b):\n        a, b, c = b, c, a\n    \n    return (a + c) / 2\n\n#assert median_numbers(25,55,65)==55.0\n\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1,num2,num3):\n    if num1 < num2 < num3 or num1 < num3 < num2 or num2 < num1 < num3 or num2 < num3 < num1 or num3 < num1 < num2 or num3 < num2 < num1:\n        if (num1 + num2 + num3) % 2 == 0:\n            return (num1 + num2 + num3) / 2.0\n        else:\n            return (num1 + num2 + num3) / 2.0 - 1.0\n    else:\n        return None\n\ndef test_median_numbers():\n    assert median_numbers(25,55,65) == 55.0\n    assert median_numbers(4,55,65) == 4.0\n    assert median_numbers(4,55,64) == 50.0\n    assert median_numbers(4,54,65) == 50.0\n    assert median_numbers(4,55,66) == 55.0\n    assert median_numbers(4,56,65) == 55.0\n\ntest_median_numbers()\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x,y,z):\n    arr = [x,y,z]\n    # to make it sorted\n    arr.sort()\n\n    if len(arr)%2==1:\n        return arr[int((len(arr)-1)/2)]\n    else:\n        return (arr[int((len(arr)-1)/2)] + arr[int((len(arr))/2)]) /2.0\n\n#print median_numbers(25,55,65)"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n# A better solution\n# def sum_of_digits(numbers):\n#     if not numbers: return 0\n#     return sum(map(lambda n: sum(int(d) for d in str(n)), numbers))\n\n# An even better solution, using reduce, the builtin function to reduce a list to a single value\nfrom functools import reduce\n\ndef sum_of_digits(numbers):\n    return reduce(lambda x, y: x+sum(int(d) for d in str(y)), numbers, 0)\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\nfrom typing import List\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    result = 0\n    for number in numbers:\n        result += sum([int(x) for x in str(number)])\n    return result\n\n\ndef test_sum_of_digits():\n    assert sum_of_digits([10, 2, 56]) == 14\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(num_list):\n    \"\"\"\n    Input: list of integers\n    Output: list of integers\n    Return sum of digits of integers in the input list.\n    \"\"\"\n    assert isinstance(num_list, list)\n    for num in num_list:\n        assert isinstance(num, int)\n    return list(map(lambda x: sum(list(map(int, str(x)))), num_list))", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    return sum(map(lambda number: sum(map(int, str(number))), numbers))\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    ans = 0\n    for i in nums:\n        temp = 0\n        while(i!=0):\n            temp += i%10\n            i = i//10\n        ans += temp\n    return ans\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(lst):\n    return sum(map(int, str(lst)))\n    ", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(lst):\n    \"\"\"\n    Compute the sum of digits of each number of a given list\n    \"\"\"\n    return sum([int(num) for num in lst])\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n# Solution 1\ndef sum_of_digits(list):\n    result = []\n    for x in list:\n        result.append(sum(int(i) for i in str(x)))\n    return result\n\n# Solution 2\ndef sum_of_digits(list):\n    return [sum(int(i) for i in str(x)) for x in list]\n\n# Solution 3\ndef sum_of_digits(list):\n    return [sum(int(c) for c in str(n)) for n in list]", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(nums):\n    return sum(map(lambda x:sum(list(map(int,str(x)))),nums))", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\nfrom typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    result = 0\n    for number in numbers:\n        for digit in str(number):\n            result += int(digit)\n    return result\n\n\ndef sum_of_digits_recursive(numbers: List[int]) -> int:\n    \"\"\"\n    Recursive Solution.\n    \"\"\"\n    result = 0\n    for number in numbers:\n        if number > 0:\n            result += number % 10\n            sum_of_digits_recursive(number // 10)\n    return result"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n# my solution\ndef bitwise_xor(tup1, tup2):\n    return tuple([x^y for x, y in zip(tup1, tup2)])\n\n# testing", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(*args):\n    zipped = zip(*args)\n    for i in range(len(zipped[0])):\n        for j in zipped:\n            if j[i] != zipped[0][i]:\n                return j[i]\n    else:\n        return zipped[0][i]\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(a, b):\n    return tuple(i^j for i, j in zip(a,b))", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n# Write your code here\n\ndef bitwise_xor(a, b):\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] ^ b[i])\n    return result\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n# My solution\ndef bitwise_xor(*args):\n    return tuple(bin(a ^ b)[2:].zfill(8) for a, b in zip(*args))\n\n# Best solution\ndef bitwise_xor(*args):\n    return tuple(format(a ^ b, 'b').zfill(8) for a, b in zip(*args))\n\n# Testing", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\nfrom functools import reduce\n\n\ndef bitwise_xor(*args):\n    return tuple(reduce(lambda x, y: x ^ y, arg, 0) for arg in args)\n\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(*tup):\n    ans = ()\n    for i in range(len(tup)):\n        for j in range(len(tup)):\n            if i != j:\n                ans = ans + (tup[i] ^ tup[j],)\n    return ans\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple_1, tuple_2):\n    if len(tuple_1) == len(tuple_2):\n        for i in range(len(tuple_1)):\n            tuple_1[i] = tuple_1[i] ^ tuple_2[i]\n    else:\n        raise Exception(\"The tuples are of different lengths\")\n    return tuple_1\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple_a, tuple_b):\n    return tuple(i ^ j for i,j in zip(tuple_a, tuple_b))\n\ndef bitwise_xor(tuple_a, tuple_b):\n    result = []\n    for i,j in zip(tuple_a, tuple_b):\n        result.append(i^j)\n    return tuple(result)\n\ndef bitwise_xor(tuple_a, tuple_b):\n    return tuple([i ^ j for i, j in zip(tuple_a, tuple_b)])\n\ndef bitwise_xor(tuple_a, tuple_b):\n    return tuple(i ^ j for i, j in zip(tuple_a, tuple_b))\n\ndef bitwise_xor(tuple_a, tuple_b):\n    return tuple(chr(i ^ j) for i, j in zip(tuple_a, tuple_b))\n\ndef bitwise_xor(tuple_a, tuple_b):\n    return tuple(a^b for a,b in zip(tuple_a, tuple_b))\n\ndef bitwise_xor(tuple_a, tuple_b):\n    return tuple(ord(a)^ord(b) for a,b in zip(tuple_a, tuple_b))\n\ndef bitwise_xor(tuple_a, tuple_b):\n    return tuple(int(a)^int(b) for a,b in zip(tuple_a, tuple_b))\n\ndef bitwise_xor(tuple_a, tuple_b):\n    return tuple(bin(a)^bin(b) for a,b in zip(tuple_a, tuple_b))\n\ndef bitwise_xor(tuple_a, tuple_b):\n    return tuple(oct(a)^oct(b) for a,b in zip(tuple_a, tuple_b))", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(t1, t2):\n    return tuple(a ^ b for a, b in zip(t1, t2))\n\nt1 = (10, 4, 6, 9)\nt2 = (5, 2, 3, 3)"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    freq = dict()\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    return len(freq)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    \"\"\"\n    Extract the frequency of unique tuples in the given list order irrespective.\n    \n    Args:\n        lst (list): List of tuples\n    \n    Returns:\n        int: Frequency\n    \"\"\"\n    count = 0\n    d = {}\n    for i in lst:\n        s = str(i[0])+str(i[1])\n        if s in d:\n            d[s] += 1\n        else:\n            d[s] = 1\n    for i in d:\n        count += d[i]\n    return count", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(items):\n    freq = Counter()\n    for item in items:\n        freq[tuple(sorted(item))] += 1\n    return freq\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(seq):\n    # your code here\n    seen = {}\n    for i in seq:\n        temp = tuple(sorted(i))\n        if temp not in seen:\n            seen[temp] = 0\n        seen[temp] += 1\n    return len(seen)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\nimport collections\n\n\ndef extract_freq(seq):\n    count = collections.Counter(seq)\n    return sum(1 for _ in count.elements())\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    return 0\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    freq = 0\n    lst = [list(i) for i in lst]\n    for i in range(len(lst)):\n        lst[i].sort()\n        if i == len(lst) - 1:\n            if lst[i] not in lst[:i]:\n                freq += 1\n        elif lst[i] not in lst[:i]:\n            freq += 1\n    return freq\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(list_order_irrespective):\n    pass\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    d = {}\n    for i in lst:\n        d.update({i: d.get(i, 0) + 1})\n    return len(d)\n\n# T=O(n), S=O(n)\n# Bonus: implement it for iterables\ndef extract_freq_bonus(lst):\n    d = set()\n    for i in lst:\n        d.add(tuple(sorted(i)))\n    return len(d)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(l):\n    \"\"\"Returns frequency of unique tuples in l. Order irrespective.\"\"\"\n    freq = {}\n    for t in l:\n        freq[t] = freq.get(t, 0) + 1\n    return len(freq)\n\nl = [(3,4), (1,2), (4,3), (5,6)]"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    assert len(t1) == len(t2), 'Error in lengths of given tuples'\n    for i in range(len(t1)):\n        assert len(t1[i]) == len(t2[i]), 'Error in lengths of inner lists of given tuples'\n    \n    return tuple([(t[0], t[1]) for t in zip(t1, t2)])\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tup1, tup2):\n    if len(tup1) == 1 and len(tup2) == 1:\n        return (tup1[0][0] + tup2[0][0], tup1[0][1] + tup2[0][1])\n    if len(tup1) == 1 and len(tup2) > 1:\n        return add_nested_tuples(tup1, tup2[1:])\n    if len(tup1) > 1 and len(tup2) == 1:\n        return add_nested_tuples(tup1[1:], tup2)\n    if len(tup1) > 1 and len(tup2) > 1:\n        return (tup1[0] + tup2[0], add_nested_tuples(tup1[1:], tup2[1:]))\n\n# assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1,t2):\n    if len(t1)==0 or len(t2)==0:\n        return t1+t2\n    else:\n        return ((t1[0][0]+t2[0][0],t1[0][1]+t2[0][1]),add_nested_tuples(t1[1:],t2[1:]))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tup1, tup2):\n    return [(tup1[i][0] + tup2[i][0], tup1[i][1] + tup2[i][1]) for i in range(len(tup1))]\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    res = []\n    for i in range(len(t1)):\n        temp = []\n        for j in range(len(t1[i])):\n            temp.append(t1[i][j]+t2[i][j])\n        res.append(temp)\n    return tuple(res)\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    return tuple(tuple(map(lambda x, y: (x[0] + y[0], x[1] + y[1]), i, j)) for i, j in zip(t1, t2))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tuple1, tuple2):\n    return [a+b for a,b in zip(tuple1, tuple2)]\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# def add_nested_tuples(x, y):\n#     return [(a+b, a-b) for (a, b) in zip(x[0], y[0])]\n\ndef add_nested_tuples(x, y):\n    return [[a+b, a-b] for (a, b) in zip(x[0], y[0])]\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    new_t = []\n    for i in range(len(t1)):\n        temp = []\n        for j in range(len(t1[i])):\n            temp.append(t1[i][j] + t2[i][j])\n        new_t.append(temp)\n    return new_t\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfrom functools import reduce\n\n\ndef mult(a, b, p):\n    return (a * b) % p\n\n\ndef pow(a, b, p):\n    if b == 1:\n        return a\n    if b == 0:\n        return 1\n    if b % 2 == 1:\n        return mult(a, pow(a, b // 2, p), p)\n    temp = pow(a, b // 2, p)\n    return mult(temp, temp, p)\n\n\ndef ncr_modp(n, r, p):\n    \"\"\"ncr_modp(n, r, p) - n choose r with mod p\"\"\"\n    return (reduce(mult, range(n, n - r, -1), 1)\n            * reduce(mult, range(1, r + 1), 1)\n            * pow(r, p - 2, p)\n            * pow(n, p - 2, p)) % p\n\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    # complete this function\n    # you may find this function useful:\n    # https://docs.python.org/3/library/itertools.html#itertools-recipes\n    # https://docs.python.org/3/library/math.html#math.factorial\n    if p<0:\n        return 0\n    if r<0 or r>n:\n        return 0\n    if n<r:\n        return 0\n    if n==0 or r==0 or p==0:\n        return 1\n    if n==1:\n        return 1\n    if r==1:\n        return n%p\n    if n==r:\n        return n%p\n    if r==n-r:\n        return n%p\n    res = n%p*inv(r%p,p) % p\n    for i in range(2,r+1):\n        res = res * (n%p-i+1)%p * inv(i%p,p)%p%p\n    return res\n\ndef inv(a,m):\n    return pow(a,m-2,m)\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    '''\n    \u7d20\u6570\u7248\u7ec4\u5408\u6570ncr%p\n    :param n:\n    :param r:\n    :param p:\n    :return:\n    '''\n    if n<r:\n        return 0\n    fac = [1]*(n+1)\n    for i in range(1,n+1):\n        fac[i] = fac[i-1]*i%p\n    inv = [1]*(n+1)\n    inv[n] = pow(fac[n],p-2,p)\n    for i in range(n,0,-1):\n        inv[i-1] = inv[i]*(i+1)%p\n    return fac[n-r]*inv[r-1]%p\n\ndef nc_modp(n,p):\n    \"\"\"\n    \u7d20\u6570\u7248\u7ec4\u5408\u6570ncr%p\n    :param n:\n    :param p:\n    :return:\n    \"\"\"\n    fac = [1]*(n+1)\n    for i in range(1,n+1):\n        fac[i] = fac[i-1]*i%p\n    inv = [1]*(n+1)\n    inv[n] = pow(fac[n],p-2,p)\n    for i in range(n,0,-1):\n        inv[i-1] = inv[i]*(i+1)%p\n    return fac[n]*inv[n]%p\n\ndef test_ncr_modp():\n    '''\n    \u8fdb\u884c\u6d4b\u8bd5\n    :return:\n    '''\n    for i in range(10):\n        print(i,ncr_modp(i,2,13))\n\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n\t\"\"\"\n\tfind ncr % p for n, r\n\t:param n: positive integer\n\t:param r: positive integer\n\t:param p: prime integer\n\t:return: integer\n\t\"\"\"\n\tresult = 1\n\tfact = [1]\n\tinv = [1]\n\tfor i in range(1, n+1):\n\t\tfact.append(fact[-1]*i % p)\n\t\tinv.append(inv[-1]*pow(i, p - 2, p))\n\tfor i in range(r):\n\t\tresult = result * (n-i)*inv[i]%p\n\t\tresult = result * fact[r-i-1]%p\n\t\tresult = result % p\n\treturn result\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    if r<0 or n<r or p<2:\n        return 0\n    r = min(r, n-r)\n    f = [1]*(r+1)\n    inv = [pow(i,p-2,p) for i in range(1,p)]\n    for i in range(1,r+1):\n        f[i] = (f[i-1]*inv[i])%p\n    return sum([f[i]*pow(n-r+i-1,p-2,p)*inv[n-r+i-1] for i in range(r+1)])%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nimport numpy as np\nfrom numpy.linalg import inv\nfrom math import modf\n\nfrom toolz.curried import pipe, curry, map\nfrom toolz.curried import list, map as fmap, filter as ffilter\nfrom toolz.curried import reduce as freduce, get\n\nfrom toolz.curried.operator import add as opadd\nfrom toolz.curried.operator import mul as opmul\nfrom toolz.curried.operator import mod as opmod\nfrom toolz.curried.operator import eq as opeq\n\nfrom toolz.curried import compose\n\nfrom toolz.curried.itertoolz import islice\n\n# This implementation is recursive, and based on the\n# formula on Wikipedia:\n# https://en.wikipedia.org/wiki/Binomial_coefficient#Applications\n\n# From this:\n# https://en.wikipedia.org/wiki/Binomial_coefficient#Applications\n# we get that the number of solutions to the equation\n# x*x - p*x + n = 0 is given by the function\n# `mu(n,p)`.\n#\n# This function is rather unwieldy, but we can convert\n# it to a simple recursive function by noticing that\n# `mu(n,p)` is a sum of the terms `mu(n,k)*mu(k,p)`\n# for all k in [0,n].\n#\n# This implementation is based on the code from\n# <NAME>:\n# https://stackoverflow.com/questions/52539866/compute-modular-inverse-for-a-number\n#\n# Note that the \"algorithm\" here isn't really the fastest,\n# but it is very simple and easy to understand.\n\ndef ncr_modp(n,r,p):\n    return freduce(opadd,\n                   fmap(lambda x: freduce(opmul,\n                                           ffilter(opeq(r),\n                                                   ncr_modp(x,r,p) + ncr_modp(n-x,r,p)),\n                                           opmod(p,2),\n                                           op", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    from math import factorial\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, [((p//i) * pow(r//i,p-2,p)) % p for i in range(1,min(n,r)+1)]) % p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    N = ((n - 1) * (n - 1) * (n - 1)) % p\n    R = ((r - 1) * (r - 1) * (r - 1)) % p\n    P = ((p - 1) * (p - 1) * (p - 1)) % p\n    num = ((N * R) % P) * ((P - 1) // (p - 1)) % P\n    denom = ((r * (r - 1) * (r - 1) * (p - 1)) % P) % P\n    return (num * pow(denom, -1, P)) % P", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfrom fractions import Fraction\n\ndef ncr_modp(n, r, p):\n    n = int(n)\n    r = int(r)\n    p = int(p)\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den,p - 2, p)) % p\n\ndef ncr(n, r):\n    r = min(r, n-r)\n    numer = reduce(op.mul, range(n, n-r, -1), 1)\n    denom = reduce(op.mul, range(1, r+1), 1)\n    return numer // denom  # or / in Python 2\n\ndef ncr_naive(n, r):\n    if r > n:\n        return 0\n    numer = reduce(op.mul, range(n, n-r, -1), 1)\n    denom = reduce(op.mul, range(1, r+1), 1)\n    return numer // denom  # or / in Python 2\n\n\ndef ncr_recursive(n, r):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    return (ncr_recursive(n-1, r-1) + ncr_recursive(n-1, r)) % 10**9 + 7\n\n\ndef ncr_iterative(n, r):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r0 = 1\n    r1 = 1\n    for i in range(2, r+1):\n        r0, r1 = r1, (r0*(n-i+1)) % 10**9 + 7\n    return r1\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\nfrom functools import reduce\n\n\ndef ncr(n, r):\n    r = min(r, n-r)\n    numer = reduce(op.mul, range(n, n-r, -1), 1)\n    denom = reduce(op.mul, range(1, r+1), 1)\n    return numer // denom % 1000000007\n\n\ndef ncr_modp(n, r, p):\n    res = 0\n    for i in range(min(n, p), 0, -1):\n        res = (res + ncr(i, r) * pow(i, p-2, p)) % p\n    return res\n\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(URL):\n    \"\"\"\n    Check if a url is valid or not\n    :param URL: string\n    :return: boolean\n    \"\"\"\n    regex = re.compile(\n        r'^(http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return bool(regex.search(URL))\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\ndef is_valid_URL(url):\n    if not re.match('(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?',url):\n        return False\n    else:\n        return True\n\n#OR\nimport re\ndef is_valid_URL(url):\n    return bool(re.match(r\"https?://\\S+\", url))", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\nurl = \"https://www.google.com\"\nregex = re.compile(\n    r'^https://(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)?$'\n)\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\n# Write your code here\n\ndef is_valid_URL(url):\n    return re.fullmatch(r'^http(s)?:\\/\\/\\w+\\.(com|org|net)$', url) != None\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url: str) -> bool:\n    return bool(re.match(\n        r'^(http|ftp|https)://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$',\n        url\n    ))\n\n\ndef test_function(test_case):\n    url = test_case[0]\n    expected = test_case[1]\n    output = is_valid_URL(url)\n    if output == expected:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {expected} got {output}\")\n\n\ntest_function([\n    \"http://www.google.com/\", True,\n    \"http://www.google.com\", True,\n    \"https://www.google.com/\", True,\n    \"http://www.google.com.co\", True,\n    \"http://www.google.com.co/\", True,\n    \"http://www.google.com/hello\", True,\n    \"http://www.google.com/hello/\", True,\n    \"http://www.google.com?a=b&c=d#f\", True,\n    \"http://www.google.com?a=b&c=d\", True,\n    \"http://www.google.com?a=b&c=d#\", True,\n    \"http://www.google.com?a=b&c=d#f\", True,\n    \"http://www.google.com?a=b&c=d#f&g=h\", True,\n    \"http://www.google.com#f\", True,\n    \"http://www.google.com\", True,\n    \"http", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\n#I created a regex for my function\nregex = re.compile(\n    r'^(?:http|ftp)s?://'  # http:// or https://\n    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  #domain...\n    r'localhost|'  #localhost...\n    r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n    r'(?::\\d+)?'  # optional port\n    r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n#I am going to write a function using the regex\ndef is_valid_URL(url):\n    if re.match(regex, url):\n        return True\n    else:\n        return False\n\n#test", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    #Regex to validate URL\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    match = re.search(regex, url)\n    if match:\n        return True\n    else:\n        return False\n\n# Test", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    if re.match(regex, url):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    if re.match(r\"https://www.google.com\", url):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n  regex = r'(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)'\n  if re.search(regex,url):\n    return True\n  else:\n    return False\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(x,y):\n\treturn x if x < y else y\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n  if a<b:\n    return a\n  return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x,y):\n    \"\"\"\n    x and y are integers\n    returns minimum of x and y\n    \"\"\"\n    if x < y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n    if a < b:\n        return a\n    return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    return a if a<b else b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    if a>b:\n        return b\n    elif b>a:\n        return a", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    if a>b:\n        return b\n    else:\n        return a\n\ndef test_minimum(test_case):\n    expected = test_case[0]\n    actual = minimum(test_case[1],test_case[2])\n    assert actual == expected\n\ntest_cases = [\n    (1,1,2),\n    (5,2,3),\n    (10,3,2),\n    (60,12,52)\n]\nfor case in test_cases:\n    test_minimum(case)\n\n#Try this - you can use a one liner:\n#assert minimum(1,2,3,4,5) == 1"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, ele):\n    for element in tup:\n        if element == ele:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, value):\n    if value in tup:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, val):\n    if val in tup:\n        return True\n    else:\n        return False\n\n#test", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, ele):\n    if ele in tup:\n        return True\n    else:\n        return False\n\n\n# My Solution\ndef check_tuplex2(tup, ele):\n    try:\n        return ele in tup\n    except TypeError:\n        return False\n\n\n# Another Solution\ndef check_tuplex3(tup, ele):\n    return ele in tup if isinstance(tup, tuple) else False\n\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup,element):\n    for i in tup:\n        if i == element:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,item):\n    if item in tup:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,s):\n    x=0\n    for i in tup:\n        if i==s:\n            x=1\n    return x\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, element):\n    # your code goes here\n    return element in tup\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, val):\n    return val in tup\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup,item):\n    for i in tup:\n        if item == i:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(number):\n    if number%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    # Your Code Here\n    return \"Even Parity\" if num % 2 == 0 else \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    # Write your code here.\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Testing", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    # Write your code here\n    if n % 2 == 0:\n        return \"Even Parity\"\n    return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    if n%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# print(find_Parity(12))\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(number):\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    s = str(num)\n    l = len(s)\n    for i in range(l):\n        for j in range(i+1,l):\n            if int(s[i])<int(s[j]):\n                t = s[i]\n                s = s[:i] + s[j] + s[i+1:]\n                break\n    return int(s) if s[0]!='0' else rearrange_bigger(int(s[1:]))\n\n\ndef test_rearrange_bigger():\n    assert rearrange_bigger(12)==21\n    assert rearrange_bigger(23)==32\n    assert rearrange_bigger(410)==104\n    assert rearrange_bigger(52)==25\n    assert rearrange_bigger(999)==999", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    n_str = list(str(n))\n    n_str.sort(reverse=True)\n    return int(''.join(n_str))\n\n\ndef rearrange_bigger_with_recursive(n):\n    n_str = list(str(n))\n    if len(n_str) <= 1:\n        return n\n\n    for i in range(len(n_str)):\n        for j in range(i+1, len(n_str)):\n            n_str[i], n_str[j] = n_str[j], n_str[i]\n            bigger_number = int(''.join(n_str))\n            if bigger_number > n:\n                return bigger_number\n            n_str[i], n_str[j] = n_str[j], n_str[i]\n    return n\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    \"\"\"\n    :param n: the number to transform\n    :return: the next bigger number\n    \"\"\"\n    number = list(map(int, list(str(n))))\n    start = 0\n    while number[start] == 9:\n        start += 1\n    number[start] += 1\n    number[start+1:] = [0]*(len(number) - start - 1)\n    return int(''.join(map(str, number)))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\nfrom typing import List\n\n\ndef rearrange_bigger(num: int) -> int:\n    num_str = list(str(num))\n    if sorted(num_str) == num_str:\n        return int(\"1\" + num_str[::-1])\n\n    idx = num_str.index(max(num_str))\n    num_str[idx], num_str[len(num_str) - 1] = num_str[len(num_str) - 1], num_str[idx]\n\n    return int(\"\".join(num_str))\n\n\ndef rearrange_bigger2(num: int) -> int:\n    num_str = list(str(num))\n    if sorted(num_str) == num_str:\n        return int(\"1\" + num_str[::-1])\n\n    idx = num_str.index(max(num_str))\n    for i in range(len(num_str)):\n        if i == idx:\n            continue\n        elif num_str[i] > num_str[idx]:\n            num_str[i], num_str[idx] = num_str[idx], num_str[i]\n            break\n\n    return int(\"\".join(num_str))\n\n\ndef rearrange_bigger3(num: int) -> int:\n    num_str = list(str(num))\n    if sorted(num_str) == num_str:\n        return int(\"1\" + num_str[::-1])\n\n    idx = num_str.index(max(num_str))\n    for i in range(len(num_str)):\n        if i == idx:\n            continue\n        elif num_str[i] > num_str[idx]:\n            num_str[i], num_str[idx] = num_str[idx], num_str[i]\n            break\n    num_str.sort()\n    return int(\"\".join(num_str))\n\n\ndef rearrange_bigger4(num: int) -> int:\n    num_str = list(str(num))\n    if sorted(num_str) == num_str:\n        return int(\"1\" + num_str[::-", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n\tn=str(n)\n\tn=sorted(n, reverse=True)\n\tn=''.join(n)\n\treturn int(n)", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(number):\n    a = list(str(number))\n    b = sorted(a)\n    c = \"\".join(b)\n    return int(c)\n\n# assert rearrange_bigger(12)==21\n# assert rearrange_bigger(45)==54\n# assert rearrange_bigger(98)==89\n# assert rearrange_bigger(32)==33\n# assert rearrange_bigger(1)==1\n# assert rearrange_bigger(5)==5\n# assert rearrange_bigger(3)==3\n# assert rearrange_bigger(89)==98\n# assert rearrange_bigger(54)==45\n# assert rearrange_bigger(90)==91\n# assert rearrange_bigger(91)==92", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    a = list(str(n))\n    a.sort()\n    a.reverse()\n    return int(\"\".join(a))\n\n# assert rearrange_bigger(12) == 21\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(number):\n    number = str(number)\n    output = \"\"\n    for i in range(1, len(number)):\n        if number[-1] > number[-i - 1]:\n            output += str(number[-i - 1])\n            number = number[:-i - 1]\n        else:\n            break\n    output += number\n    return int(output)\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(number):\n    str_number = str(number)\n    l_number = list(str_number)\n    if int(l_number[0]) > int(l_number[1]):\n        return str(l_number[1])+str(l_number[0])\n    else:\n        return str(l_number[0])+str(l_number[1])\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\nimport unittest\ndef rearrange_bigger(n):\n    n = list(str(n))\n    # n.sort(reverse=True)\n    if n[0] < n[1]:\n        return int(''.join(n))\n    else:\n        n[0], n[1] = n[1], n[0]\n        return int(''.join(n))\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\nfrom random import sample\ndef k_smallest_pairs(a, b, k):\n    if k > len(a) or k > len(b):\n        return []\n    return [[a[i], b[j]] for i, j in sample(range(len(a)), k)]\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(a, b, k):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    if len(a) == 0 or len(b) == 0 or k == 0:\n        return []\n    if k > len(a) * len(b):\n        return []\n    return sorted(list(set(zip(a, b))), key=lambda x:x[0] + x[1])[:k]", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\nimport heapq\n\n\ndef k_smallest_pairs(array1, array2, k):\n    \"\"\"\n    Returns the k smallest pairs of element from the two array\n    :param array1: 1st array\n    :param array2: 2nd array\n    :param k: number of pairs to return\n    :return: list of pairs\n    \"\"\"\n\n    # merging the two lists\n    arr = heapq.merge(array1, array2)\n\n    # create a dictionary with the elements of the array as the keys and their indices as values\n    d = {arr[i]: i for i in range(len(arr))}\n\n    # we want to return k pairs, to do this we need to create a list of length k, and we will put the pairs into this list\n    # we can do this by using a list of length k and initialize all the elements to None, then for each element in the arr we will\n    # check if the element is in the dictionary, and if so we will increment its value, if its not in the dictionary we will insert it\n    # with the value of 0, and we will decrement the k value by 1. This way we will know when to stop inserting elements.\n    pairs = [None] * k\n    i = 0\n    while k > 0:\n        if d.get(arr[i]):\n            pairs[d[arr[i]]] = arr[i]\n            d[arr[i]] += 1\n            i += 1\n        else:\n            d[arr[i]] = 0\n            i += 1\n        k -= 1\n\n    # converting pairs to a list of pairs\n    return [list(p) for p in pairs if p]\n\n\n# test", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\nimport heapq\n\ndef k_smallest_pairs(arr1, arr2, k):\n    heap = []\n    res = []\n\n    for i in range(len(arr1)):\n        heapq.heappush(heap, (arr1[i], arr2[i]))\n        if len(heap) > k:\n            heapq.heappop(heap)\n\n    while len(heap) > 0:\n        res.append([heapq.heappop(heap), heapq.heappop(heap)])\n\n    return res\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\nfrom collections import defaultdict\ndef k_smallest_pairs(arr1, arr2, k):\n\tpair_dict = defaultdict(list)\n\tfor i, item1 in enumerate(arr1):\n\t\tfor j, item2 in enumerate(arr2):\n\t\t\tif item1 > item2:\n\t\t\t\tcontinue\n\t\t\tpair_dict[item2].append([item1, i, j])\n\n\tpairs = []\n\tfor item2, paired_indices in pair_dict.items():\n\t\tif len(paired_indices) > 0:\n\t\t\tpairs.append(paired_indices[:k])\n\n\treturn pairs\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a,b,k):\n\ta.sort()\n\tb.sort()\n\treturn [[a[i],b[j]] for i in range(k) for j in range(i+1,k)]\n\n#assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\nimport heapq\n\ndef k_smallest_pairs(a, b, k):\n    result = []\n    min_heap = []\n    heapq.heappush(min_heap, (a[0] + b[0], 0, 0))\n    while len(result) < k:\n        current_sum, i, j = heapq.heappop(min_heap)\n        if i < len(a) - 1 and j < len(b) - 1:\n            heapq.heappush(min_heap, (a[i+1] + b[j+1], i + 1, j + 1))\n        result.append((a[i], b[j]))\n    return result\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a, b, k):\n\tpairs = []\n\theap = []\n\theapq.heapify(heap)\n\tfor i in range(len(a)):\n\t\theapq.heappush(heap, (a[i] * a[i], i, a[i]))\n\tfor i in range(len(b)):\n\t\twhile heap and (heap[0][0] * b[i] > heapq.heappop(heap)[0]):\n\t\t\tpass\n\t\tif heap:\n\t\t\theapq.heappush(heap, (heap[0][0] * b[i], heap[0][1], b[i]))\n\t\tif len(heap) >= 2 * k:\n\t\t\tpairs.append((heap[0][2], heap[2 * k][2]))\n\treturn pairs\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\nfrom typing import List\n\n\ndef k_smallest_pairs(arr_1: List, arr_2: List, k: int) -> List:\n    arr_1.sort()\n    arr_2.sort()\n    n_1, n_2 = len(arr_1), len(arr_2)\n    res = []\n    for i in range(n_1):\n        for j in range(n_2):\n            res.append([arr_1[i], arr_2[j]])\n\n    res.sort()\n    return res[:k]\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1,arr2,k):\n    assert len(arr1) == len(arr2)\n    results = []\n    pairs = [[arr1[0],arr2[0]]]\n    arr1.pop(0)\n    arr2.pop(0)\n    for i in range(1,len(arr1)):\n        pairs.append([arr1[i],arr2[i]])\n    pairs.sort()\n    pairs.reverse()\n    for i in range(k):\n        results.append([pairs[i][0],pairs[i][1]])\n    return results\n\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuples):\n    \"\"\"\n    Return the minimum product of the two elements of each tuple in a list.\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    \"\"\"\n    return min(min(t) * max(t) for t in tuples)\n\ndef min_product_tuple_2(tuples):\n    \"\"\"\n    Return the minimum product of the two elements of each tuple in a list.\n    >>> min_product_tuple_2([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    \"\"\"\n    return min(min(t) * max(t) for t in tuples)\n\ndef min_product_tuple_3(tuples):\n    \"\"\"\n    Return the minimum product of the two elements of each tuple in a list.\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    \"\"\"\n    return min(min(t) * max(t) for t in tuples)\n\ndef min_product_tuple_4(tuples):\n    \"\"\"\n    Return the minimum product of the two elements of each tuple in a list.\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    \"\"\"\n    return min(min(t) * max(t) for t in tuples)\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(list):\n    min_p = list[0][0]*list[0][1]\n    for i in list:\n        if i[0]*i[1] < min_p:\n            min_p = i[0]*i[1]\n    return min_p\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(lst):\n    min_prod = 10000\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                if min_prod > (lst[i][0]*lst[j][1]):\n                    min_prod = lst[i][0]*lst[j][1]\n    return min_prod\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(t):\n    \"\"\"\n    Args:\n       t(list): list containing tuples\n    Returns:\n       int: minimum product\n    \"\"\"\n    # TODO: Write your code here\n    return min(map(lambda x: x[0]*x[1], t)) # min(t, key = lambda x: x[0] * x[1])\n\n\ndef test_function():\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\n    assert min_product_tuple([(4, 5), (6, 9), (4, 9)]) == 45\n    assert min_product_tuple([(1, 100), (10, 1000), (10000, 100000)]) == 1000000000000\n    assert min_product_tuple([(1, 2), (1, 3), (2, 3), (2, 4), (3, 4)]) == 6\n    print(\"Pass\")\n\n\ntest_function()", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(lst):\n    s = min(lst, key=lambda x: x[1])\n    p = max(lst, key=lambda x: x[0])\n    return p[0]*s[1]\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(li):\n    li = sorted(li, key=lambda x: x[0])\n    a = li[0][1]\n    b = li[1][1]\n    return a * b\n\ndef min_product_tuple_d(li):\n    \"\"\"\n    Divide and conquer\n    :param li:\n    :return:\n    \"\"\"\n    li = sorted(li, key=lambda x: x[0])\n    if len(li) == 1:\n        return li[0][1]\n    elif len(li) == 2:\n        return li[0][1] * li[1][1]\n    else:\n        return min(min_product_tuple_d(li[:2]) * min_product_tuple_d(li[2:]), min_product_tuple_d(li[:3]) * min_product_tuple_d(li[3:]))\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(list_of_tuples):\n    #iterating throught the list\n    min_product = 1000\n    for i in range(len(list_of_tuples)):\n        for j in range(i+1, len(list_of_tuples)):\n            #finding the minimum product\n            min_product = min(min_product, list_of_tuples[i][0]*list_of_tuples[j][1])\n    return min_product", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(l):\n    \"\"\"\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    \"\"\"\n    return min(map(lambda x: x[0] * x[1], l))\n\ndef min_product_tuple_with_filter(l):\n    \"\"\"\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    \"\"\"\n    return min(filter(lambda x: x[0] * x[1] > 0, l))\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(lst):\n    # TODO: Write your code here\n    return min(lst, key=lambda x: x[0] * x[1])\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\n# SOLUTION\n# def min_product_tuple(tuples):\n#     if len(tuples) < 2:\n#         return 0\n#     tuples.sort(key=lambda x: x[0])\n#     tuples.sort(key=lambda x: x[1])\n#     return min(tuples[i][0] * tuples[i][1] for i in range(len(tuples) - 1))\n\ndef min_product_tuple(tuples):\n    if len(tuples) < 2:\n        return 0\n    tuples.sort(key=lambda x: (x[0], x[1]))\n    return min(tuples[i][0] * tuples[i][1] for i in range(len(tuples) - 1))\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(a):\n    \"\"\"\n    a: an arbitrary list\n    \n    return: the smallest value in a\n    \"\"\"\n    smallest = a[0]\n    for i in a:\n        if i < smallest:\n            smallest = i\n    return smallest\n    ", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list_):\n    if type(list_[0]) == str:\n        return list_[0]\n    else:\n        return min(list_)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    min_val = lst[0]\n    for x in lst:\n        if x < min_val:\n            min_val = x\n    return min_val\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list_of_val):\n    min_val = list_of_val[0]\n    for i in range(1, len(list_of_val)):\n        if list_of_val[i] < min_val:\n            min_val = list_of_val[i]\n    return min_val\n\n# other solution\ndef min_val(list_of_val):\n    return min(list_of_val)", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list_of_elements):\n    if isinstance(list_of_elements, int):\n        return list_of_elements\n    elif isinstance(list_of_elements, list):\n        if len(list_of_elements) == 0:\n            return None\n        elif isinstance(list_of_elements[0], int):\n            minimum = list_of_elements[0]\n            for i in list_of_elements[1:]:\n                if i < minimum:\n                    minimum = i\n            return minimum\n        elif isinstance(list_of_elements[0], list):\n            list_of_elements_2 = []\n            for element in list_of_elements:\n                list_of_elements_2.append(min_val(element))\n            return min_val(list_of_elements_2)\n    else:\n        return None\n    \n#assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n#assert min_val([[],2,3])==2\n#assert min_val([[],[2,4],[4,5]])==2", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(arr):\n  # start with the first element as the minimum\n  min_val = arr[0]\n\n  # loop through the list starting at the second element\n  for i in range(1, len(arr)):\n    # if the next element is less than the current minimum, make the next element the minimum\n    if arr[i] < min_val:\n      min_val = arr[i]\n\n  # return the minimum\n  return min_val\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    return min(lst)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n# given an array of elements, \n# find the smallest number\n# in the list using recursive\n\n\ndef min_val(arr):\n    # if the array has only one element\n    # return that element\n    if len(arr) == 1:\n        return arr[0]\n\n    # if the array has more than one element\n    # find the minimum among the first and last elements\n    if len(arr) > 1:\n        return min(arr[0], min_val(arr[1:]))\n\n\n# test cases", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    for i in range(len(lst)):\n        if type(lst[i]) is not int:\n            lst[i] = int(lst[i])\n    return min(lst)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    if len(lst)==0:\n        raise ValueError(\"Empty list\")\n\n    if all(isinstance(i,str) for i in lst):\n        #lst = [i.lower() for i in lst]\n        return min(lst)\n\n    elif all(isinstance(i,int) for i in lst):\n        return min(lst)\n\n    else:\n        raise TypeError(\"Mixed type list\")\n\ndef test_min_val():\n    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n    assert min_val([1,2,3,4,5])==1\n    assert min_val([2,3,4,5])==2\n    assert min_val([3,4,5])==3\n    assert min_val([4,5])==4\n    assert min_val([5])==5\n    assert min_val([])==None\n    assert min_val(['Python', 3, 2, 4, 5, 'version'],True)==2\n    assert min_val([1,2,3,4,5],True)==1\n    assert min_val([2,3,4,5],True)==2\n    assert min_val([3,4,5],True)==3\n    assert min_val([4,5],True)==4\n    assert min_val([5],True)==5\n    assert min_val([],True)==None\n\ntest_min_val()"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(text):\n    # Define the regex pattern here\n    pattern = r\"(?<!^)(?=[A-Z])\"\n    # Use the regex library to replace the matches\n    return re.sub(pattern, '', text)\n\n# Print out the result", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\ndef snake_to_camel(text):\n    text=re.sub('([A-Z])([a-z])', r'\\1\\2', text)\n    text=text[0].upper()+text[1:]\n    return text\n\n#another solution\ndef snake_to_camel(text):\n    return re.sub(r\"[_]([a-z])\", lambda m: m.group(1).upper(), text)", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\n# def snake_to_camel(snake_case_str):\n#     \"\"\"\n#     takes snake case string as input and return the camel cased version\n#     \"\"\"\n#     if len(snake_case_str) == 0:\n#         return \"\"\n\n#     str = snake_case_str\n\n#     # remove the first letter of the word and make it lower case\n#     str = snake_case_str[0].lower() + snake_case_str[1:]\n\n#     # if the first character is a number, add an underscore and lower the string\n#     if str[0].isnumeric():\n#         return \"_\" + str.lower()\n\n#     return str\n\n\ndef snake_to_camel(snake_case_str):\n    \"\"\"\n    takes snake case string as input and return the camel cased version\n    \"\"\"\n    if len(snake_case_str) == 0:\n        return \"\"\n    str = snake_case_str.split('_')\n    camel = \"\"\n\n    for i in str:\n        camel += i[0].upper() + i[1:]\n    return camel\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    pass\n\n\n# Tests", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(string):\n    \"\"\"\n    >>> snake_to_camel('android_tv')\n    'AndroidTv'\n    >>> snake_to_camel('python_string')\n    'PythonString'\n    >>> snake_to_camel('a_string')\n    'AString'\n    \"\"\"\n    # replace all snake cases to camel case\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), string)\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\n\ndef snake_to_camel(snake_case):\n    return re.sub(r'_(.)', lambda m: m.group(1).upper(), snake_case)\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(s):\n    return re.sub(\"_(.)\", lambda x: x.group(1).capitalize(), s)\n\ndef test_snake_to_camel():\n    assert snake_to_camel('android_tv') == 'AndroidTv'\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(string):\n    return ''.join(i.capitalize() or '_' for i in re.sub('_([a-z])', lambda m: m.group(1).upper(), string).split('_'))", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str: a snake case string\n    :return: a camel case string\n    \"\"\"\n    # your code here\n    # first convert snake case to camel case\n    # then convert camel case to lower case\n    # finally remove the underscore from the end of the string\n    # (this was not given in the problem statement)\n    \n    # put your answer in this variable\n    return_str = re.sub(r'(?<=[a-z])(?=[A-Z])', '', snake_str).lower()\n    \n    # now remove the underscore\n    return_str = re.sub(r'_', '', return_str)\n    \n    return return_str", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(s):\n    return re.sub(r'_(.)', lambda x: x.group(1).upper(), s)\n\n# Test cases"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n  lst.remove(lst[0])\n  return lst[1:]\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = remove_odd(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[1,2,3], [2]])\ntest_function([[7,7,7,7,7], [7,7,7,7]])\ntest_function([[1,3,5,7], [2,4,6]])\ntest_function([[1, 3, 5, 7, 9, 11, 13], [2, 4, 6]])\ntest_function([[1, 3, 5, 7, 9, 11, 13, 15], [2, 4, 6]])", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    return [x for x in lst if x%2==0]\n\n#assert remove_odd([1,2,3]) == [2]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(ls):\n    if not isinstance(ls,list):\n        raise TypeError(\"Expected list input\")\n    if isinstance(ls,tuple):\n        ls = list(ls)\n    return [x for x in ls if x%2 !=0]\n\ndef test_remove_odd():\n    assert remove_odd([1,2,3]) == [2]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(num_list):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    return [i for i in num_list if i % 2 == 0]\n\n\n# Test cases", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    new_lst = []\n    for i in lst:\n        if i%2 != 0:\n            new_lst.append(i)\n    return new_lst\n\n\n# Tests", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(nums):\n    return [x for x in nums if x%2==0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [i for i in lst if not i%2]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(arr):\n    \"\"\"\n    :param arr: a list of integers\n    :return: a list of even numbers from the input list\n    \"\"\"\n    return list(filter(lambda x: x%2==0, arr))\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [n for n in lst if n % 2 == 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(arr):\n    arr = list(filter(lambda x: x % 2 == 0, arr))\n    return arr\n\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list_of_tuples, n):\n    return list_of_tuples[n]\n\ndef test_function_extract_nth_element():\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(l, n):\n    lst = []\n    for i in l:\n        lst.append(i[n])\n    return lst\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(L, n):\n    if len(L) == 0:\n        return []\n    elif n > len(L):\n        return extract_nth_element(L, len(L))\n    else:\n        return L[:n]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n  # replace this for loop with your own code\n  # raise NotImplementedError\n  # lst2 = []\n  for element in lst:\n    lst2.append(element)\n  # return lst2[n]\n  return lst[n]\n\n\n# def extract_nth_element(lst, n):\n#     return lst[n][n]\n\ndef test_function(test_case):\n    output = extract_nth_element(test_case[0], test_case[1])\n    output_true = test_case[2]\n    if output == output_true:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = [(['Greyson Fulton', 98, 99], 0, ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']),\n               (['Greyson Fulton', 98, 99], 1, ['Brady Kent', 'Wyatt Knott', 'Beau Turnbull']),\n               (['Greyson Fulton', 98, 99], 2, ['Wyatt Knott', 'Beau Turnbull'])]\n\ntest_function(test_case_1)\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return [lst[n][0]] + [e[0] for e in lst[n+1:]]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(elements, n):\n    return [elements[n][0]] if n < len(elements) else []\n\ndef test_extract_nth_element():\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\ntest_extract_nth_element()", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return [lst[i][n] for i in range(len(lst))]\n\nlst = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    if n == 0:\n        return lst\n    else:\n        return extract_nth_element(lst[1:], n - 1) + [lst[0]]\n\nlst = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    lst_1 = []\n    for i in lst:\n        lst_1.append(i[n])\n    return lst_1\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(l, n):\n    return [x for x in l if n in x][0]\n\n#assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1,seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef overlapping(seq1,seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n\n# Enter the array\na = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Calling the function", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1,seq2):\n    return [s for s in seq1 if s in seq2]\n\ndef test_overlapping(test_case):\n    print(overlapping(test_case[0],test_case[1]))\n    assert overlapping(test_case[0],test_case[1]) == test_case[2]\n\ntest_overlapping([[1,2,3,4,5],[6,7,8,9]],False)\ntest_overlapping([[1,2,3,4,5],[6,7,8,9]],True)", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(x, y):\n    if any(i in y for i in x):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(lst1, lst2):\n    '''\n    lst1: list, lst2: list\n    return: bool, if the two list has at least one common element\n    '''\n    return True if set(lst1).intersection(lst2) else False\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1,list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(list1,list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if(list1[i] == list2[j]):\n                return True\n    return False", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(s1, s2):\n    for x in s2:\n        if x in s1:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    for i in range(len(seq1)):\n        for j in range(len(seq2)):\n            if seq1[i] == seq2[j]:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n# Python program to check whether the value exists in a sequence or not\n\n# Function to check whether the value exists in a sequence or not\ndef overlapping(l1,l2):\n\t# Declare a variable isFound\n\tisFound = False\n\t# Iterate over the elements of l2\n\tfor i in l2:\n\t\t# If the element is found in l2, return True\n\t\tif i in l1:\n\t\t\tisFound = True\n\t\t\tbreak\n\t# Return isFound\n\treturn isFound\n\n# Driver code\nl1 = [1, 2, 3, 4, 5]\nl2 = [6, 7, 8, 9]"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    from collections import Counter\n    d = Counter(arr)\n    print(d)\n    max_pair = -1\n    for key, value in d.items():\n        if (len(d)-value) > max_pair:\n            max_pair = len(d)-value\n            max_key = key\n    print(max_key,max_pair)\n    for i in arr:\n        print(i)\n\ndef max_Product_opt(arr):\n    from collections import Counter\n    d = Counter(arr)\n    max_pair = -1\n    max_key = -1\n    for key, value in d.items():\n        if (len(d)-value) > max_pair:\n            max_pair = len(d)-value\n            max_key = key\n    for i in arr:\n        if d[i] == max_pair:\n            return i,max_key\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\nimport itertools\ndef max_product(nums):\n\tmax_prod = 0\n\tmax_pair = (None,None)\n\tfor i,j in itertools.combinations(nums,2):\n\t\tproduct = i * j\n\t\tif product > max_prod:\n\t\t\tmax_prod = product\n\t\t\tmax_pair = (i,j)\n\treturn max_pair\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    maxProduct = -1\n    maxProductPair = (-1,-1)\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j]>maxProduct:\n                maxProductPair = (arr[i],arr[j])\n                maxProduct = arr[i]*arr[j]\n    return maxProductPair\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    mx, mn = arr[0], arr[0]\n    maxp = (arr[0], arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > mx:\n            mx = arr[i]\n            maxp = (mx, mn)\n        elif arr[i] < mn:\n            mn = arr[i]\n            maxp = (mx, mn)\n        elif arr[i] * mx > maxp[0] * maxp[1]:\n            maxp = (arr[i], arr[i])\n    return maxp\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_prod = -10000000\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        prod = arr[i] * arr[j]\n        if prod > max_prod:\n            max_prod = prod\n            max_i = i\n            max_j = j\n        if arr[i] > arr[j]:\n            j -= 1\n        else:\n            i += 1\n    return max_i, max_j\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max_1 = arr[0]\n    max_2 = arr[0]\n    min_1 = arr[0]\n    min_2 = arr[0]\n    for i in range(len(arr)):\n        if max_1 < arr[i]:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif max_1 == arr[i]:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif max_1 > arr[i] and max_2 < arr[i]:\n            max_2 = arr[i]\n        elif max_1 > arr[i] and max_2 > arr[i]:\n            max_2 = arr[i]\n\n        if min_1 > arr[i]:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif min_1 < arr[i]:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif min_1 == arr[i]:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif min_1 < arr[i] and min_2 > arr[i]:\n            min_2 = arr[i]\n        elif min_1 < arr[i] and min_2 < arr[i]:\n            min_2 = min_1\n\n    return (max_1,max_2)", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(numbers):\n    max_Product = None\n    for i in range(len(numbers)):\n        for j in range(i,len(numbers)):\n            if max_Product == None or numbers[i] * numbers[j] > max_Product:\n                max_Product = numbers[i] * numbers[j]\n    return max_Product", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n\tarr.sort()\n\tprod = arr[-1] * arr[-2]\n\tl = r = -1\n\tfor i, val in enumerate(arr):\n\t\tif val == arr[l] and i > l+1:\n\t\t\tl += 1\n\t\telif val == arr[r] and i < r+1:\n\t\t\tr += 1\n\t\telif prod < val * arr[l] and val * arr[l] > 0:\n\t\t\tl = i\n\t\telif prod < val * arr[r] and val * arr[r] > 0:\n\t\t\tr = i\n\t\telif prod < val:\n\t\t\tl = r = i\n\t\tprod = val * arr[l] * arr[r]\n\treturn (arr[l], arr[r])\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\nfrom typing import List\n\ndef max_Product(arr:List[int])->Tuple[int,int]:\n    max_1 = max_2 = min_1 = min_2 = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max_1:\n            max_1 = arr[i]\n            min_2 = arr[i-1]\n        elif arr[i] < min_1:\n            max_2 = max_1\n            min_2 = min_1\n            max_1 = arr[i]\n            min_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n            min_2 = min_1\n        elif arr[i] < min_2:\n            max_2 = max_1\n            min_2 = arr[i]\n        else:\n            min_1 = arr[i]\n    return (max_1,min_2)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\nfrom typing import Tuple\n\ndef max_Product(arr: list) -> Tuple[int,int]:\n    max_Product = (arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if max_Product[0] < 0:\n            max_Product = (arr[i], arr[i+1])\n        elif max_Product[1] < 0:\n            max_Product = (arr[i+1], arr[i])\n        else:\n            if arr[i] > arr[i+1]:\n                max_Product = (arr[i], arr[i+1])\n            elif arr[i] < arr[i+1]:\n                max_Product = (arr[i+1], arr[i])\n    return max_Product"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n\tif n < 10:\n\t\treturn n\n\telif n < 20:\n\t\treturn 10\n\telse:\n\t\t# divide by 3\n\t\treturn breakSum(n/3) + breakSum(n/3) + breakSum(n/3)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if(num%2==0):\n        return(num/2 + breakSum(num/2))\n    else:\n        return(num/2 + breakSum(num/2+1))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n < 3:\n        return n\n    elif n == 3:\n        return 3\n    else:\n        if n % 2 == 0:\n            odd = breakSum(n/2)\n            even = breakSum(n/2)\n            return even + odd + n\n        else:\n            odd = breakSum(n/2)\n            even = breakSum((n/2) + 1)\n            return even + odd + n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n\tif num < 0:\n\t\treturn 0\n\tif num == 0:\n\t\treturn 0\n\tif num == 1:\n\t\treturn 1\n\n\ta = breakSum(num // 3)\n\tb = breakSum((num % 3) // 3)\n\tc = breakSum((num % 3) % 3)\n\treturn max(a, b, c) + num\n\ndef breakSum_two_passes(num):\n\tif num < 0:\n\t\treturn 0\n\tif num == 0:\n\t\treturn 0\n\tif num == 1:\n\t\treturn 1\n\n\ta = breakSum_two_passes(num // 3)\n\tb = breakSum_two_passes((num % 3) // 3)\n\tc = breakSum_two_passes((num % 3) % 3)\n\treturn max(a, b, c) + num\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num, max_so_far=0, current_sum=0, max_sum=0):\n    if current_sum > max_so_far:\n        max_so_far, max_sum = current_sum, max_sum\n    current_sum = current_sum + num\n    if current_sum > max_sum:\n        max_sum = current_sum\n    if current_sum > max_so_far:\n        return max_so_far, max_sum\n    current_sum = 0\n    num //= 3\n    return breakSum(num, max_so_far, current_sum, max_sum) if num > 0 else (max_so_far, max_sum)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    if num < 0:\n        return 0\n    if num < 3:\n        return num\n    else:\n        n = num // 3\n        return n * (n + 1) * (n + 2) + max(breakSum(n), breakSum(num - n * 3))\n\n\ndef main():\n    assert breakSum(12) == 13\n    assert breakSum(5) == 5\n    assert breakSum(10) == 14\n    assert breakSum(14) == 24\n    assert breakSum(10) == 14\n    assert breakSum(123) == 409\n    assert breakSum(1234) == 559\n    assert breakSum(23456) == 14552\n    assert breakSum(1234567) == 621958\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n < 0:\n        return 0\n    elif n <= 3:\n        return n\n    else:\n        return max(n//3, breakSum(n//3)) + max(n//3, breakSum(n//3)) + max(n//3, breakSum(n//3))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\n# Function to break a number into three parts \n# using recursion \ndef breakSum(n): \n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    else: \n        return max(n - breakSum(n - 1), n - breakSum(n - 2), n - breakSum(n - 3)) \n\n\ndef findMaxSum(n): \n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    else: \n        return max(n - findMaxSum(n - 1), n - findMaxSum(n - 2), n - findMaxSum(n - 3)) \n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n <= 1:\n        return n\n    if n == 2:\n        return 3\n    return max(breakSum(n//3)*3, breakSum(n//3+n%3)*3)\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n  if n <= 2:\n    return n\n  else:\n    firstSum = n - 2\n    secondSum = breakSum(firstSum)\n    thirdSum = breakSum(n - firstSum)\n    return firstSum + secondSum + thirdSum"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(list_of_tuples):\n  final_list = []\n  for x in list_of_tuples:\n    if not final_list or final_list[-1][0] != x[0]:\n      final_list.append([x[0]])\n    final_list[-1].append(x[1])\n  return final_list\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    return [tuple(sorted(list(set(x)))) for x in tuples]\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\nfrom functools import reduce\nfrom typing import List\n\nfrom utils import BaseTestCase\n\n\ndef group_tuples(lst: List[tuple]) -> List[tuple]:\n    \"\"\"Return a list of tuples with common first element.\n\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n\n    >>> group_tuples([])\n    []\n\n    >>> group_tuples([(1, 2), (3, 4)])\n    []\n    \"\"\"\n    return list(\n        filter(lambda x: len(x) > 1, (tuple([first_element] + x) for first_element, x in groupby(lst, key=lambda x: x[0]))))\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuple_list):\n    new_list = []\n    for (first_element, second_element) in tuple_list:\n        new_list.append((first_element, second_element))\n\n    return tuple_list", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    group_tuples = []\n    for group in itertools.groupby(tuples, key=operator.itemgetter(0)):\n        group_tuples.append([item[1] for item in group])\n    return group_tuples\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(arr):\n    result = []\n    for tuple in arr:\n        for i in tuple:\n            if i not in result:\n                result.append(i)\n    return result\n\narr = [('x', 'y'), ('x', 'z'), ('w', 't')]", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(list_of_tuple):\n    new_list = []\n    for i in list_of_tuple:\n        for j in new_list:\n            if i[0] == j[0]:\n                j.append(i[1])\n                break\n        else:\n            new_list.append([i[0], i[1]])\n    return new_list\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    # TODO: Your code here\n    return [tuple(v) for v in set([tuple(x) for x in tuples])]\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(list_of_tuples):\n    return set(map(tuple, zip(*list_of_tuples)))\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(list_of_tuples):\n    res = []\n    for elem in list_of_tuples:\n        if elem[0] not in res:\n            res.append(elem[0])\n    return [elem for elem in list_of_tuples if elem[0] in res]\n\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef findMaxLenSublist(input_list):\n\ti, j = 0, 0\n\tmax_len = 0\n\t# find the max sublist of maximum length\n\twhile i < len(input_list):\n\t\t# update the max length\n\t\tmax_len = max(max_len, len(input_list[i:]))\n\t\t# check the next element if there is any\n\t\tif j < len(input_list[i]):\n\t\t\tj += 1\n\t\telse:\n\t\t\ti += 1\n\t# return the max length sublist\n\treturn input_list[0:max_len]\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(input_list):\n    max_length = 0\n    output = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            output = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            output.append(input_list[i])\n    \n    return output\n\n# Test code", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(a):\n  # Code here\n    pass\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = Find_Max(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [['A'],['A','B'],['A','B','C']]\nsolution = ['A','B','C']\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [['A'],['A','B'],['A','B','C'],['A','B','C','D']]\nsolution = ['A','B','C','D']\ntest_case = [arr, solution]\ntest_function(test_case)", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(List):\n    #List = [['A'],['A','B'],['A','B','C']]\n    if len(List) == 1:\n        return List[0]\n    Max = Find_Max(List[1:])\n    if len(Max) > len(List[0]):\n        Max = List[0]\n    for x in List[1:]:\n        if len(Max) < len(x):\n            Max = x\n    return Max\n\n\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n\treturn max(lst, key=len)\n\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    #return the list having maximum elements\n    max_length = 0\n    #max_length = max(map(len,lst))\n    max_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_list = lst[i]\n    return max_list\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(List_of_list):\n    max_len = 0\n    max_sublist = []\n    for i in range(len(List_of_list)):\n        for j in range(len(List_of_list[i])):\n            if len(List_of_list[i][j])>max_len:\n                max_len = len(List_of_list[i][j])\n                max_sublist = List_of_list[i][j]\n    return max_sublist\n\n\n# Test cases\nList_of_list = [['A'],['A','B'],['A','B','C']]", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(sublist):\n    max_len = 0\n    max_start = 0\n    for i in range(len(sublist)):\n        if len(sublist[i]) > max_len:\n            max_len = len(sublist[i])\n            max_start = i\n\n    return sublist[max_start]", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(list):\n    maxi = []\n    for i in range(len(list)):\n        for j in range(len(list[i])):\n            temp = []\n            for k in range(len(list[i][j])):\n                temp.append(list[i][j][k])\n            if(len(maxi)<len(temp)):\n                maxi = temp\n    return maxi\n    ", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(list):\n    maximum = 0\n    index = 0\n    sub = list[0]\n    for i in range(1,len(list)):\n        if len(list[i]) > maximum:\n            maximum = len(list[i])\n            index = i\n            sub = list[i]\n        elif len(list[i]) == maximum:\n            if list[i] > sub:\n                sub = list[i]\n                index = i\n    return sub\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    return sum([round(n) for n in numbers])*len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n# round_and_sum = lambda numbers:  sum(round(x) for x in numbers) * len(numbers)\nround_and_sum = lambda numbers:  sum([round(x) for x in numbers]) * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(list_numbers):\n    numbers = [round(num,2) for num in list_numbers]\n    return sum(numbers)*len(list_numbers)\n\ndef test_round_and_sum():\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\n# test_round_and_sum()", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(lst):\n    rounded_lst = [round(num, 2) for num in lst]\n    return sum(rounded_lst) * len(rounded_lst)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(ls):\n    total = 0\n    length = len(ls)\n    for i in range(len(ls)):\n        total = total + round(ls[i])\n    return total * length\n\n\n#assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    sum = 0\n    for number in numbers:\n        rounded = round(number)\n        sum += rounded\n    return sum * len(numbers)\n\nnumbers = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(list_of_numbers):\n    return sum([round(x) for x in list_of_numbers])*len(list_of_numbers)\n\n\n#assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\nfrom typing import List\n\n\ndef round_and_sum(numbers: List[float]) -> int:\n    \"\"\"\n    Round every number and return total sum\n    \"\"\"\n    total = 0\n    for n in numbers:\n        total += round(n)\n    return total * len(numbers)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\nimport math\ndef round_and_sum(numbers):\n    return sum(map(lambda x: round(x,3), numbers)) * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    result = 0\n    for x in numbers:\n        result += round(x)\n    return len(numbers)*result\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    return n**3 + (n-1)**3\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_sum(n):\n    res = 0\n    for i in range(n):\n        res += (i * (i+1) * (i+2))\n\n    return res\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_sum(n):\n    sum = 0\n    for i in range(n):\n        sum = sum + (2*i+1)**3\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    # your code goes here\n    total = 0\n    for i in range(0, n, 2):\n        total = total + i**3\n\n    return total\n\n\ndef test_cube_Sum():\n    assert cube_Sum(2) == 72\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    return sum([i**3 for i in range(2,n,2)])", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += (i*i*i)\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    return sum(i**3 for i in range(0, 2*n, 2))", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n\ta = n*(n+1)*(2*n+1)\n\treturn a\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, n, 2))\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    return sum([x**3 for x in range(2, n+2, 2)])\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(t):\n    return \"-\".join(map(str, t))\n\n# This solution is very efficient but very ugly and inelegant\ndef concatenate_tuple(t):\n    return \"-\".join([str(i) for i in t])", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    concat_string = \"\"\n    for i in tuple:\n        concat_string += str(i) + \"-\"\n    concat_string = concat_string[:-1]\n    return concat_string\n\n\n# Write a function to count the number of strings with same character occurences.\n# assert count_same_char((\"abc\", \"abc\", \"bca\") ) == 3\n\ndef count_same_char(tuple):\n    if len(tuple) == 0:\n        return 0\n    string = tuple[0]\n    counter = 0\n    for i in range(1, len(tuple)):\n        if tuple[i] == string:\n            counter += 1\n        else:\n            string = tuple[i]\n    return counter\n\n\n# Write a function to check if a tuple is a palindrome or not", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    #your code here\n    pass\n\n#test", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    return '-'.join(map(str, tuple))", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(a_tuple, delimiter = '-'):\n    '''\n    a_tuple - a tuple of items to be concatenated into a string\n    delimiter - the string to be used to concatenate each element in the tuple\n    return - the concatenated string\n    '''\n    return delimiter.join(a_tuple)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tup):\n\t\"\"\"\n\t:param tup: tuple\n\t:return: str\n\t\"\"\"\n\treturn \"-\".join(list(tup))\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    return '-'.join(str(element) for element in tuple)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n# your answer goes here\ndef concatenate_tuple(tup):\n    return '-'.join(map(str, tup))\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    concat = ''\n    for i in tuple:\n        if isinstance(i, tuple):\n            concat += concatenate_tuple(i)\n        else:\n            concat += str(i) + '-'\n    return concat[:-1]\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple, delimiter = \"-\"):\n    return delimiter.join(map(str,tuple))"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    summation = 0\n    for i in range(1, n+1):\n        summation = summation + (i ** 3)\n    return summation / n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n\n# Test your function", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n\tsum = 0\n\tfor i in range(1, n + 1):\n\t\tsum += pow(i, 3)\n\treturn sum / n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\nimport math\n\ndef find_Average_Of_Cube(n):\n    return 1/(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15)\n\n# Test cases", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    l = []\n    for i in range(1,n+1):\n        l.append(i**3)\n    print(l)\n    return sum(l)/len(l)\n    ", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\nfrom functools import reduce\n\ndef find_Average_Of_Cube(n):\n    return reduce(lambda a, b: a + b ** 3, range(1, n + 1)) / n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    return sum([x**3 for x in range(1,n+1)])/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    pass\n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(goldmine,m,n):\n    table = [[0 for i in range(m)] for j in range(n)]\n    for i in range(1,n):\n        for j in range(1,m):\n            table[i][j] = max(goldmine[i-1][j],goldmine[i][j-1],goldmine[i-1][j-1]) + goldmine[i][j]\n    return table[n-1][m-1]\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(matrix,i,j):\n    \"\"\"\n    Time complexity: O(2^M)\n    \"\"\"\n    if i<0 or j<0:\n        return 0\n    if i==0 and j==0:\n        return matrix[i][j]\n    if (i,j) in dict:\n        return dict[(i,j)]\n    gold = matrix[i][j] + get_maxgold(matrix,i-1,j) + get_maxgold(matrix,i,j-1) - get_maxgold(matrix,i-1,j-1)\n    dict[(i,j)] = gold\n    return gold\n    ", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid,m,n):\n    visited=[[False for i in range(n)] for j in range(m)]\n    def find_gold(i,j):\n        if visited[i][j]:\n            return 0\n        if i==m-1 and j==n-1:\n            return grid[i][j]\n        else:\n            visited[i][j]=True\n            left=find_gold(i+1,j)\n            top=find_gold(i,j-1)\n            bottom=find_gold(i,j+1)\n            right=find_gold(i-1,j)\n            visited[i][j]=False\n            return max(left,top,bottom,right)\n    return find_gold(0,0)", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(goldmine_map,n,m):\n\tmaxgold=0\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tmaxgold=max(maxgold,get_gold(goldmine_map,i,j,n,m))\n\treturn maxgold\n\ndef get_gold(goldmine_map,i,j,n,m):\n\tif(i>=0 and i<n and j>=0 and j<m):\n\t\tgold=goldmine_map[i][j]\n\t\tif gold<=0:\n\t\t\treturn 0\n\t\treturn gold+min(get_gold(goldmine_map,i,j+1,n,m),get_gold(goldmine_map,i+1,j,n,m),get_gold(goldmine_map,i+1,j+1,n,m))\n\treturn 0\n\ndef test():\n\tassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\tassert get_maxgold([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 5, 5) == 1\n\tassert get_maxgold([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, ", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(data,m,n):\n    ans=0\n    for i in range(m):\n        for j in range(n):\n            if data[i][j]==0:\n                data[i][j]=99999\n            else:\n                ans+=data[i][j]\n            data[i][j]=ans\n    return ans", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(matrix, row, col):\n    if row <= 0 or col <= 0: return 0\n    if row == 1 and col == 1:\n        return matrix[row-1][col-1]\n    if row == 1:\n        return max(get_maxgold(matrix, row-1, col-1), get_maxgold(matrix, row-1, col))\n    if col == 1:\n        return max(get_maxgold(matrix, row-1, col-1), get_maxgold(matrix, row, col-1))\n    return max(get_maxgold(matrix, row-1, col-1), get_maxgold(matrix, row-1, col), get_maxgold(matrix, row, col-1))\n\n\n# assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\ndef get_maxgold_dp(matrix, row, col):\n    dp = [[0] * col for _ in range(row)]\n    # return max(get_maxgold_dp(matrix, row, col-1), get_maxgold_dp(matrix, row-1, col-1), get_maxgold_dp(matrix, row-1, col))\n    if row == 1 and col == 1:\n        return matrix[row-1][col-1]\n    if row == 1:\n        return max(get_maxgold_dp(matrix, row-1, col-1), get_maxgold_dp(matrix, row-1, col))\n    if col == 1:\n        return max(get_maxgold_dp(matrix, row-1, col-1), get_maxgold_dp(matrix, row, col-1))\n    return max(get_maxgold_dp(matrix, row-", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nfrom functools import reduce\ndef get_maxgold(mine, x, y):\n    m = len(mine)\n    n = len(mine[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    for i in range(m):\n        dp[i][0] = mine[i][0]\n\n    for i in range(n):\n        dp[0][i] = mine[0][i]\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if i + j < 2 * 31:\n                dp[i][j] = max(mine[i][j], dp[i - 1][j], dp[i][j - 1])\n            else:\n                dp[i][j] = max(mine[i][j], dp[i - 1][j], dp[i][j - 1],\n                              dp[i - 1][j - 1])\n\n    return dp[m - 1][n - 1]\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(matrix,row,col):\n    if row==0 or col==0:\n        return 0\n    if matrix[row][col]==0:\n        return 0\n    temp=matrix[row-1][col]+matrix[row][col-1]\n    # if we take this square then we can't take any of the square\n    # below and left of it.\n    matrix[row][col]=0\n    return max(get_maxgold(matrix,row-1,col),get_maxgold(matrix,row,col-1)) + temp\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(mine, x_min, y_min):\n    \"\"\"\n    :param mine: 2D matrix\n    :param x_min:  int, the leftmost position of gold mine\n    :param y_min:  int, the topmost position of gold mine\n    :return: int, the maximum gold mine at the gold mine\n    \"\"\"\n    if x_min<0 or x_min>=len(mine[0]) or y_min<0 or y_min>=len(mine):\n        return 0\n    if mine[x_min][y_min]==0:\n        return 0\n    mine[x_min][y_min]=0\n    return get_maxgold(mine, x_min-1, y_min)+get_maxgold(mine, x_min+1, y_min)+get_maxgold(mine, x_min, y_min-1)+get_maxgold(mine, x_min, y_min+1)\n\n\ndef test_maxgold():\n    mine = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]]\n    assert get_maxgold(mine, 0, 0)==16\n    mine[0][0] = 0\n    assert get_maxgold(mine, 0, 0)==13\n    mine[0][2] = 0\n    assert get_maxgold(mine, 0, 0)==12\n    mine[1][0] = 0\n    assert get_maxgold(mine, 0, 0)==11\n    mine[1][3] = 0\n    assert get_maxgold(mine, 0, 0)==10\n    mine[2][1] = 0\n    assert get_maxgold(mine, 0, 0)==9\n    mine[3][2] = 0\n    assert get_maxgold"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(my_tuple):\n    return [word[-1] for word in my_tuple]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple_):\n    return tuple(map(lambda x: x[-1], tuple_))\n\n\n#print(extract_rear(('Mers', 'for', 'Vers') ))\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(t):\n    return [t[i][-1] for i in range(len(t))]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(list_of_strings):\n    return [a[::-1] for a in list_of_strings]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\n# We can just check if the element is the last element of the string by using the [ -1 ] indexing\n\ndef extract_rear(input_list):\n    return [item[-1] for item in input_list]\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tup):\n    res = []\n    for i in tup:\n        res.append(i[::-1])\n    return res\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n\trear_list = []\n\tfor i in tup:\n\t\trear_list.append(i[::-1])\n\treturn rear_list\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple):\n    return [i[-1] for i in tuple]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple):\n    \"\"\"\n    :param tuple: a tuple of strings\n    :return: a tuple of the last character of each string\n    \"\"\"\n    result = ()\n    for string in tuple:\n        result = result + (string[-1],)\n    return result\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(data_tup):\n    rear_list = []\n    for item in data_tup:\n        rear_list.append(item[-1])\n    return rear_list\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list, element):\n    count = 0\n    for i in range(len(list)):\n        if element in list[i]:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists, element):\n\t# list_of_lists = [[1,3],[5,7],[1,11],[1,15,7]]\n\t# element = 1\n\t# O(n^2)\n\tcount = 0\n\tfor i in list_of_lists:\n\t\tfor j in i:\n\t\t\tif j == element:\n\t\t\t\tcount += 1\n\treturn count\n\n\n# assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nfrom typing import List\n\n# 1. Create an empty dict\n# 2. Create an empty list\n# 3. Iterate through the list of lists (nested lists)\n# 4. Iterate through each element in the sublist (nested list)\n# 5. Check to see if the element exists in the dict\n# 6. Increment the value in the dict if the element exists or set to 1 if it does not\n\n\ndef count_element_in_list(lst, element) -> int:\n    dic: dict = {}\n    count: int = 0\n    for sublist in lst:\n        for item in sublist:\n            if item in dic:\n                dic[item] += 1\n            else:\n                dic[item] = 1\n\n    for item in dic:\n        if item == element:\n            count += dic[item]\n\n    return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(mylist, element):\n    count = 0\n    for i in range(len(mylist)):\n        for j in range(len(mylist[i])):\n            if element in mylist[i]:\n                count += 1\n    return count\n\n# Tests", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(l,element):\n    return len([x for x in l if element in x])", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list_of_lists,element):\n    return len([sublist for sublist in list_of_lists if element in sublist])\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(input_list, element):\n    return len(list(filter(lambda x: element in x, input_list)))\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\n# def count_element_in_list(lst: list, element: int) -> int:\n#     count = 0\n#     for sublist in lst:\n#         if element in sublist:\n#             count += 1\n#     return count\n\n# Alternative 1\ndef count_element_in_list(lst: list, element: int) -> int:\n    count = 0\n    for i, sublist in enumerate(lst):\n        if element in sublist:\n            count += 1\n    return count\n\n# Alternative 2\ndef count_element_in_list(lst: list, element: int) -> int:\n    return sum(element in sublist for sublist in lst)\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lists, num):\n    count = 0\n    for item in lists:\n        if num in item:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_list, element):\n    n_sub_lists = 0\n    for i in range(0, len(list_of_list)):\n        for j in range(0, len(list_of_list[i])):\n            if list_of_list[i][j] == element:\n                n_sub_lists += 1\n    return n_sub_lists\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2!=0, lst))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(my_list):\n    return [element for element in my_list if element%2!=0]\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(l):\n    return list(filter(lambda x:x%2!=0,l))\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(arr):\n    return list(filter(lambda x:x%2==1,arr))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(nums):\n\treturn list(filter(lambda x:x%2==1, nums))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(list):\n    return list(filter(lambda x: x%2!=0, list))\n\n#assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n# Write your code here\n\ndef filter_oddnumbers(numbers):\n  return list(filter(lambda x: x%2!=0, numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x%2 != 0, nums))\n\n# TEST CASES:", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(nums):\n  return list(filter(lambda num: num%2 != 0, nums))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(arr):\n    return list(filter(lambda x:x % 2 != 0, arr))\n\n#test code"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\ndef change_date_format(date):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, date)\n    assert match\n    return match.group(3) + \"-\" + match.group(2) + \"-\" + match.group(1)\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\n\ndef change_date_format(date):\n    # your code here\n    return re.sub(r'([0-9]{4}-[0-9]{2}-[0-9]{2})', r'\\1', date)\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\n\ndef change_date_format(date):\n    date_pat = re.compile(\"(\\d+)-(\\d+)-(\\d+)\")\n    return date_pat.sub(r\"\\3-\\2-\\1\", date)\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date):\n    return re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", date)\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date: str) -> str:\n    \"\"\"\n    Change date format from yyyy-mm-dd to dd-mm-yyyy\n    :param date: string of date\n    :return: string of formatted date\n    \"\"\"\n    return re.sub(r'-','-', date[6:] + date[3:5] + date[0:2])\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\n\ndef change_date_format(date):\n    date_regex = re.compile(r\"(\\d{2})-(\\d{2})-(\\d{4})\")\n    date_str = re.search(date_regex, date).group()\n    month, day, year = date_str.split(\"-\")\n    new_date = f\"{day}-{month}-{year}\"\n    return new_date\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n  return re.sub(r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})', r' \\g<day>-\\g<month>-\\g<year>', date)\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', date)", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\nimport datetime\n\n\ndef change_date_format(date):\n    return re.sub(r\"(\\d{2})-(\\d{2})-(\\d{4})\", r\"\\3-\\2-\\1\", date)\n\n\n# assert change_date_format(\"2026-01-02\") == \"02-01-2026\"\n# assert change_date_format(\"1769-01-01\") == \"01-01-1769\"\n# assert change_date_format(\"2010-01-01\") == \"01-01-2010\"\n# assert change_date_format(\"2020-07-07\") == \"07-07-2020\"\n# assert change_date_format(\"1977-05-08\") == \"08-05-1977\"\n# assert change_date_format(\"2012-01-01\") == \"01-01-2012\"\n# assert change_date_format(\"2020-03-01\") == \"01-03-2020\"\n# assert change_date_format(\"2020-10-08\") == \"08-10-2020\"\n# assert change_date_format(\"2013-12-20\") == \"20-12-2013\"\n# assert change_date_format(\"2000-01-01\") == \"01-01-2000\"\n# assert change_date_format(\"2016-12-30\") == \"30-12-2016\"\n# assert change_date_format(\"2020-10-01\") == \"01-10-2020\"\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\ndef change_date_format(date):\n    regex = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    ans = re.findall(regex,date)\n    if ans!=[]:\n        date_new=ans[0][2:4]+'-'+ans[0][0:2]+'-'+ans[0][4:6]\n        return date_new\n    else:\n        return \"Wrong format\""], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j-gap] > temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap = gap // 2\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap = gap // 2\n    return arr\n\n\n# Test cases", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nimport random\n\n\ndef shell_sort(seq):\n    length = len(seq)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            tmp = seq[i]\n            j = i\n            while j >= gap and seq[j - gap] > tmp:\n                seq[j] = seq[j - gap]\n                j -= gap\n            seq[j] = tmp\n        gap = gap // 2\n    return seq\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nfrom typing import List\n\n\ndef shell_sort(arr: List[int]) -> List[int]:\n    gaps = [701, 301, 132, 57, 23, 10, 4, 1]\n    for gap in gaps:\n        for i in range(gap, len(arr)):\n            j = i\n            while j >= gap and arr[j] < arr[j-gap]:\n                arr[j], arr[j-gap] = arr[j-gap], arr[j]\n                j -= gap\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n# def shell_sort(arr):\n#     if len(arr) < 2:\n#         return arr\n\n#     gap = int(len(arr) // 2)\n#     while gap > 0:\n#         for i in range(gap, len(arr)):\n#             tmp = arr[i]\n#             j = i\n#             while j >= gap and arr[j - gap] > tmp:\n#                 arr[j] = arr[j - gap]\n#                 j -= gap\n#             arr[j] = tmp\n#         gap //= 2\n#     return arr\n\n\n# Alternative solution with gap of 1\n\ndef shell_sort(arr):\n    if len(arr) < 2:\n        return arr\n\n    gap = 1\n    while gap < len(arr):\n        for i in range(gap, len(arr)):\n            tmp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > tmp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = tmp\n        gap *= 2\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(array):\n    if len(array) < 2:\n        return array\n    gap = len(array)//2\n    while gap > 0:\n        for i in range(gap, len(array)):\n            temp = array[i]\n            j = i\n            while j >= gap and array[j - gap] > temp:\n                array[j] = array[j - gap]\n                j = j - gap\n            array[j] = temp\n        gap = gap//2\n    return array\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j-gap] > temp:\n                arr[j] = arr[j-gap]\n                j = j - gap\n            arr[j] = temp\n        gap = gap // 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nimport unittest\n\n\ndef shell_sort(array):\n    # TODO: Write your code here\n    length = len(array)\n\n    # all the sublists are already sorted.\n    for gap in [701, 301, 132, 57, 23, 10, 4, 1]:\n        for start in range(gap, length):\n            # It is possible to get out of the range of the sublist because gap is small.\n            while start - gap >= 0 and array[start] < array[start - gap]:\n                array[start], array[start - gap] = array[start - gap], array[start]\n                start -= gap\n\n    return array\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(lst):\n    n = len(lst)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            temp = lst[j]\n            while j >= gap and lst[j - gap] > temp:\n                lst[j] = lst[j - gap]\n                j -= gap\n            lst[j] = temp\n        gap //= 2\n    return lst\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nfrom random import shuffle\n\ndef shell_sort(arr):\n    \"\"\"Sort an array by using shell sort\"\"\"\n    #initialize h = 1\n    h = 1\n    #while h < len(arr) // 3:\n    while h < len(arr):\n        #for i in range(h, len(arr)):\n        for i in range(h, len(arr)):\n            #j = i\n            #while j >= h and arr[j] < arr[j-h]:\n            j = i\n            while j >= h and arr[j] < arr[j-h]:\n                arr[j], arr[j-h] = arr[j-h], arr[j]\n                j = j - h\n        h = h * 3\n    return arr\n\ndef test_shell_sort():\n    \"\"\"Test shell sort\"\"\"\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    # TODO\n    return t1[0] * t2[0], t1[1] * t2[1], t1[2] * t2[2], t1[3] * t2[3]\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    return tuple(a and b for a, b in zip(tuple1, tuple2))\n\n# assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\n# Test\n# print(and_tuples((10, 4, 6, 9), (5, 2, 3, 3)))", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    ans = []\n    for i in range(len(t1)):\n        ans.append(t1[i] and t2[i])\n    return tuple(ans)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\nfrom typing import Tuple\n\n\ndef and_tuples(t1: Tuple[int, ...], t2: Tuple[int, ...]) -> Tuple[int, ...]:\n    ans = []\n    for (a, b) in zip(t1, t2):\n        if a == b:\n            ans.append(1)\n        else:\n            ans.append(0)\n    return tuple(ans)\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tup_a, tup_b):\n    result = []\n    for i,j in zip(tup_a, tup_b):\n        result.append(i & j)\n    return tuple(result)\n\n\n# TEST", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(a,b):\n\tand_a = [0]*len(a)\n\tand_b = [0]*len(b)\n\tfor i in range(len(a)):\n\t\tand_a[i] = a[i] & b[i]\n\t\tand_b[i] = a[i] & b[i]\n\treturn and_a,and_b\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(t1, t2):\n    assert isinstance(t1, tuple)\n    assert isinstance(t2, tuple)\n    new_list = []\n    for i,j in zip(t1,t2):\n        if i == j:\n            new_list.append(1)\n        else:\n            new_list.append(0)\n    return tuple(new_list)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tup1, tup2):\n    tup1_lst = list(tup1)\n    tup2_lst = list(tup2)\n    for i in range(len(tup1_lst)):\n        if tup1_lst[i] == tup2_lst[i]:\n            tup1_lst[i] = 1\n        else:\n            tup1_lst[i] = 0\n    return tuple(tup1_lst)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tuple1, tuple2):\n    \"\"\"\n    Input: tuple1, tuple2\n    Output: tuple of elementwise and tuples\n    \"\"\"\n    return tuple(t1 and t2 for t1, t2 in zip(tuple1, tuple2))\n\n\n# assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1,t2):\n\treturn tuple(t1[i] and t2[i] for i in range(len(t1)))\n\n#assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    return -0.5*c/b\n\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    D=b*b-4*a*c\n    return (-b+D**0.5)/(2*a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    a*x**2 + b*x + c = 0\n    \"\"\"\n    D = b ** 2 - 4 * a * c\n    if D < 0:\n        return None\n    D = math.sqrt(D)\n    x1 = (-b - D) / 2 / a\n    x2 = (-b + D) / 2 / a\n    return x1, x2\n\ndef test_parabola_directrix():\n    assert parabola_directrix(5,3,2)==(-198, -2)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a, b, c):\n    return -b/(2*a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    return -b/2/a\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    :param a:\n    :param b:\n    :param c:\n    :return: The directrix of a parabola a * x^2 + b * x + c = 0\n    \"\"\"\n    return -(b/2/a)\n\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\nimport math\ndef parabola_directrix(a,b,c):\n    \"\"\"\n    a,b,c are the coefficients of the parabola: ax^2+bx+c=0\n    \"\"\"\n    return -b/2/a\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return (-b+math.sqrt(b*b-4*a*c))/(2*a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n#import math as m\n\ndef parabola_directrix(a,b,c):\n    return (-b/2*b+(-4*b**3-4*a*c**2)/(4*b*b-4*a*a))\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    discriminant = pow(b,2) - (4 * a * c)\n    return (-b + math.sqrt(discriminant))/(2 * a)\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(arr1, arr2):\n    if len(arr1) == 0 or len(arr2) == 0:\n        return False\n    if arr1[-1] == arr2[-1]:\n        return True\n    else:\n        return common_element(arr1[:-1], arr2[:-1])\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    # sort the lists\n    list1.sort()\n    list2.sort()\n\n    # if lists are of equal length and not equal, they are common\n    if len(list1) == len(list2) and list1 != list2:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1,list2):\n    if len(set(list1) & set(list2))>0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(lst1, lst2):\n\n    for element in lst1:\n        if element in lst2:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list_a, list_b):\n    for i in list_a:\n        if i in list_b:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    \"\"\"\n    Return True if the lists have at least one common element, False otherwise.\n    \"\"\"\n    return any(item in list2 for item in list1)\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1,list2):\n    if (len(set(list1)) & len(set(list2))) > 0:\n        return True\n    else:\n        return False\n\ndef common_element_2(list1,list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(a,b):\n    \"\"\"\n    if a == b, then return true\n    \"\"\"\n    if set(a)==set(b):\n        return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(lst1, lst2):\n    for x in lst1:\n        if x in lst2:\n            return True\n    return False", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    return list1[0] in list2\n#10 points"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c,d):\n    list=[a,b,c,d]\n    list.sort()\n    if len(list)%2==0:\n        return (list[len(list)//2]+list[len(list)//2-1])/2\n    else:\n        return list[len(list)//2]\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2 if (a + b) > c and (c + d) > a and (a + c) > b and (b + d) > c else -1\n\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(A, B, C, D):\n    return max(min(A, B), min(C, D))\n\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c,d):\n    \"\"\"\n    a,b,c,d - numbers to be summed to get the median\n    return the median of the trapezium\n    \"\"\"\n    return (a + b + c + d) // 2\n    ", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c,d):\n    total = a + b + c + d\n    return (total - max(a,b,c,d))//2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c,d):\n    return (a+b+c+d)/2\n\ndef median_trapezium2(a,b,c,d):\n    sorted_list = sorted([a,b,c,d])\n    middle = (len(sorted_list)+1)/2\n    if len(sorted_list) % 2 == 0:\n        return sorted_list[middle-1] + sorted_list[middle]\n    else:\n        return sorted_list[int(middle)]\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c,d):\n    \"\"\"\n    In: 3 distinct integers\n    Out: the median of the trapezium\n    \"\"\"\n    return int((a+b+c+d)/2)\n\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c,d):\n    if a > d:\n        return median_trapezium(a,d,c,b)\n    if b > c:\n        return median_trapezium(c,b,a,d)\n    if b < a or c > d:\n        return None\n    return sorted([a,b,c,d])[2]", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    ans = None\n    if a>b:\n        a,b = b,a\n    if c>b:\n        c,b = b,c\n    if a>c:\n        a,c = c,a\n    ans = b\n    if b==a+c:\n        return b\n    if b>a+c:\n        return b-1\n    else:\n        return b+1\n\ndef median_trapezium_optimized(a,b,c):\n    return (b+a+c)//2\n\ndef main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(median_trapezium(a,b,c))\n\nmain()", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c,d):\n    l = [a,b,c,d]\n    l.sort()\n    if len(l)%2 != 0:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2] + l[len(l)//2 -1]) / 2\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, num):\n    if num > max(array):\n        return 'Yes'\n    return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, n):\n    #Write your logic here\n    if n < array[0]:\n        return f\"No, entered number is less than those in the array\"\n    elif n >= array[-1]:\n        return f\"Yes, entered number is greater than those in the array\"\n    else:\n        for i in array:\n            if n >= i:\n                return f\"Yes, entered number is greater than those in the array\"\n            elif n < i:\n                return f\"No, entered number is less than those in the array\"", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, entered_num):\n    for i in arr:\n        if entered_num > i:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(array, number):\n    if number > array[0]:\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    return \"No, entered number is less than those in the array\" if num in arr else \"Yes, entered number is greater\"\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n\tif num > max(arr):\n\t\treturn 'Yes, entered number is greater than those in the array'\n\telif num < max(arr):\n\t\treturn 'No, entered number is less than those in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(nums, n):\n    for num in nums:\n        if n > num:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, number):\n    \"\"\"\n    Checks if entered number is greater than elements of the given array.\n    If True, returns 'Yes, entered number is greater than elements in the array'\n    else returns 'No, entered number is less than elements in the array'\n    \"\"\"\n    if number > array[0]:\n        return 'Yes, entered number is greater than elements in the array'\n    else:\n        return 'No, entered number is less than elements in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, value):\n    if value < min(arr):\n        return 'No, entered number is less than those in the array'\n    else:\n        return 'Yes, entered number is greater than those in the array'\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text[0]=='a' and text[1]=='b':\n        return text\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(string):\n    pass\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n\tif re.search(r'a.+b', text):\n\t\treturn ('Matched!')\n\telse:\n\t\treturn ('Not matched!')\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    return text[0]+\"Not matched!\" if text.startswith(\"ab\") else \"Matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(s):\n    if \"a\" in s and \"b\" in s:\n        return s[1:].split(\"b\")[0]\n    else:\n        return \"Not matched!\"\n\n#assert text_match_one(\"ab\") == \"ab\"\n#assert text_match_one(\"abb\") == \"ab\"\n#assert text_match_one(\"bab\") == \"b\"\n#assert text_match_one(\"ac\") == \"Not matched!\"\n#assert text_match_one(\"c\") == \"Not matched!\"", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if re.match(r'a.b*', text):\n        return \"matched\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text.startswith('a') and text.count('b') > 0:\n        return 'matched'\n    else:\n        return 'Not matched'\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(s):\n    if s[0:2] == \"ab\":\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n#assert text_match_one(\"abab\") == \"Matched!\"", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\nimport re\n\ndef text_match_one(text):\n    pattern = re.compile(r\"a\\w+\")\n    #re.compile(pattern)\n    match = re.search(pattern, text)\n    if match:\n        return \"Matched!\"\n    return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    try:\n        if re.search('a.*?b',text):\n            return text\n        else:\n            return 'Not matched!'\n    except:\n        return 'Not matched!'\n\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n\ndef test():\n    assert last_Digit(123) == 3\n\ntest()", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n\n\ndef last_Digit2(n):\n    return int(str(n)[-1])\n\n\ndef last_Digit3(n):\n    return int(str(n)[::-1]) % 10\n\n\ndef last_Digit4(n):\n    return int(str(n)[-1])\n\n\ndef last_Digit5(n):\n    return n % 10\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(number):\n    return number % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    import math\n    return n % math.pow(10, len(str(n)) - 1)\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    \"\"\"\n    Returns the last digit of a given number n\n    \"\"\"\n    return n % 10\n\ndef test_last_Digit():\n    assert last_Digit(123) == 3, \"last_Digit(123) should return 3\"\n    assert last_Digit(100) == 0, \"last_Digit(100) should return 0\"\n    assert last_Digit(1234) == 4, \"last_Digit(1234) should return 4\"\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    if num >= 10:\n        return last_Digit(num/10)\n    else:\n        return num\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        n = n % 10\n        return n\n\ndef last_Digit(n):\n    return n%10\n\ndef last_Digit(n):\n    return n%10\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(n):\n    \"\"\"This function takes a list of numbers and returns the negatives\"\"\"\n\n    # initialize list to append\n    my_list = []\n    \n    # loop through list and append negative numbers\n    for num in n:\n        if num < 0:\n            my_list.append(num)\n    \n    # return list of negatives\n    return my_list\n\n\n# test the function", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(li):\n    for i in li:\n        if i<0:\n            print(i)\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(num_list):\n    neg_no = []\n    for i in num_list:\n        if i<0:\n            neg_no.append(i)\n    return neg_no", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    return [i for i in lst if i<0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    for i in lst:\n        if i < 0:\n            print(i)\n    return None\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(arr):\n    return [n for n in arr if n<0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(nums):\n    return [elem for elem in nums if elem<0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    return (i for i in lst if i<0)\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(nos):\n    neg = []\n    for i in nos:\n        if i < 0:\n            neg.append(i)\n    return neg\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(li):\n    \"\"\"\n    :param li: A list of numbers\n    :return: A list of negative numbers from the given list.\n    \"\"\"\n    return [x for x in li if x < 0]\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    return ''.join(filter(lambda char: char % 2 != 0, string))\n\n\n# TODO: Move this function to a module\ndef merge_two_dicts(x, y):\n    z = x.copy()   # start with x's keys and values\n    z.update(y)    # modifies z with y's keys and values & returns None\n    return z\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    odd_idx = [idx for idx, char in enumerate(s) if char.isdigit() % 2 != 0]\n    return ''.join([char for idx, char in enumerate(s) if idx not in odd_idx])\n\n\ndef main():\n    print(remove_odd('python'))\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    string = list(string)\n    string = [x for x in string if x%2 != 0]\n    string = \"\".join(string)\n    return string\n\ndef remove_odd(string):\n    string = \"\".join(filter(lambda x: x%2==0, string))\n    return string\n\ndef remove_odd(string):\n    return \"\".join(list(filter(lambda x: x%2!=0, string)))\n\ndef remove_odd(string):\n    return \"\".join([c for i,c in enumerate(string) if i%2==0])\n\ndef remove_odd(string):\n    new_str = \"\"\n    for i in string:\n        if i%2 == 0:\n            new_str += i\n    return new_str\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(str):\n    even = []\n    for i in range(len(str)):\n        if str[i]%2 != 0:\n            even.append(str[i])\n    return \"\".join(even)\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s:str) -> str:\n    \"\"\"\n    Input: string\n    Output: string without odd characters\n    \"\"\"\n    return \"\".join([char for char in s if char.isdigit()])\n\n\n# Tests\ndef test_remove_odd() -> None:\n    \"\"\"\n    Test cases\n    \"\"\"\n    assert remove_odd(\"python\")==(\"yhn\")\n    assert remove_odd(\"python3\")==(\"3\")\n    assert remove_odd(\"python0\")==(\"0\")\n    assert remove_odd(\"python9\")==(\"9\")\n    assert remove_odd(\"python00\")==(\"0\")\n    assert remove_odd(\"python09\")==(\"9\")\n    assert remove_odd(\"python99\")==(\"99\")\n    assert remove_odd(\"python009\")==(\"009\")", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(input_str):\n    \"\"\"\n    Returns a new string with all the odd characters removed.\n    \"\"\"\n    new_str = \"\"\n    for i in input_str:\n        if i % 2 != 0:\n            new_str += i\n    return new_str\n\n# Test your code here", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s: str) -> str:\n    odd_idx = []\n    for idx, c in enumerate(s):\n        if c % 2:\n            odd_idx.append(idx)\n    return \"\".join(s[idx + 1] for idx in odd_idx)", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    return \"\".join([str(i) for i in string if i % 2 != 0])", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\nfrom collections import Counter\n\n\ndef remove_odd(string):\n    counter = Counter(string)\n    for char, count in counter.items():\n        if count % 2 != 0:\n            string = string.replace(char, \"\")\n    return string\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    return \"\".join([char for char in string if char % 2 == 0])"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(pairs):\n    pairs = list(set(pairs))\n    counts = Counter(pairs)\n    if len(counts) % 2 == 0:\n        return str(sum(counts.values()))\n    return str(-sum(counts.values()))\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\nimport sys\n\n\ndef count_bidirectional(tuples):\n    \"\"\"\n    :param tuples: a list of tuples\n    :return: number of bidirectional tuples\n    \"\"\"\n    # TODO: Implement me\n    return 0\n\n\ndef main():\n    \"\"\"\n    Read input, print output\n    :return: None\n    \"\"\"\n    input_file = sys.stdin.read()\n    input_list = eval(input_file)\n    assert type(input_list) is list\n    assert len(input_list) > 0\n    # TODO: Implement me\n    print(count_bidirectional(input_list))\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(arr):\n    return str(len(set([tuple(sorted(arr)), tuple(sorted(arr[::-1]))])))\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    # Your code here.\n    counts = collections.Counter()\n    for p in pairs:\n        counts[p] += 1\n    return len([count for count in counts.values() if count % 2 == 1])", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(list_of_tuples):\n    count = 0\n    for elem in list_of_tuples:\n        if (elem[0], elem[1]) in list_of_tuples:\n            count += 1\n        if (elem[1], elem[0]) in list_of_tuples:\n            count += 1\n    return str(count)\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuples):\n    count = 0\n    for i in range(0, len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return str(count)\n\n\n# test", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(list_of_tuples):\n    count = 0\n    for i in list_of_tuples:\n        if list_of_tuples.count(i) == 2:\n            count += 1\n    return str(count)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\nfrom typing import List, Tuple\n\ndef count_bidirectional(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\" Count bidirectional tuples.\n\n    :param pairs: List of tuples.\n    :return: Number of bidirectional tuples.\n    \"\"\"\n    bidirectional = 0\n    for (i, j) in pairs:\n        if i < j:\n            bidirectional += 1\n    for (j, i) in pairs:\n        if i < j:\n            bidirectional += 1\n    return bidirectional\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(lst):\n    if not isinstance(lst, list):\n        return 'Incorrect Input'\n    if not isinstance(lst[0], tuple):\n        return 'Incorrect Input'\n    if not len(lst) > 0:\n        return 0\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuple_list):\n    \"\"\"\n    Calculates the number of bidirectional tuples in a list of tuples\n\n    Args:\n        tuple_list (list of tuples): A list of tuples\n\n    Returns:\n        string: The number of bidirectional tuples\n    \"\"\"\n\n    # create a dictionary to store count of bidirectional tuples\n    bidirectional_count = dict()\n\n    for tuple_1 in tuple_list:\n\n        # if tuple is in dictionary, then increment the count by 1\n        if tuple_1 in bidirectional_count:\n            bidirectional_count[tuple_1] += 1\n        # else add it to the dictionary with a value of 1\n        else:\n            bidirectional_count[tuple_1] = 1\n\n    # returns the sum of the bidirectional counts\n    bidirectional_count_sum = 0\n    for count in bidirectional_count.values():\n        bidirectional_count_sum += count\n\n    return str(bidirectional_count_sum)"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(numbers):\n    return int(\"\".join(map(str, numbers)))\n\n# Test:", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(arr):\n    if len(arr) > 1:\n        n = 1\n        for i in arr[1:]:\n            n *= 10\n            n += i\n        return n\n    else:\n        return arr[0]\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    return int(''.join(str(n) for n in lst))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(lst):\n    return int(\"\".join(str(x) for x in lst))\n\ndef multiple_to_single2(lst):\n    lst_str = str(lst)\n    lst_str = lst_str.replace(\",\", \"\")\n    return int(lst_str)\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(numbers):\n    if not numbers:\n        return 0\n    return int(''.join(str(x) for x in numbers))\n\n# test", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    return (int(''.join(str(i) for i in numbers)))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(multiple_list):\n    total=0\n    for x in multiple_list:\n        total=total*10 + x\n    return total\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(list1):\n    # Your code here\n    # print(list1)\n    sum = 0\n    for i in range(0,len(list1)):\n        sum += list1[i]\n    return sum\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(lst):\n    num = 0\n    for x in lst:\n        num *= 10\n        num += x\n    return num\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(list_multiple):\n\t\"\"\"\n\t:param list_multiple:\n\t:return:\n\t\"\"\"\n\t# convert to string\n\tlist_single = str(list_multiple)\n\t# convert to int\n\tlist_single = int(list_single)\n\treturn list_single\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nimport re\ndef find_adverb_position(s):\n    x = re.search(r\"!{1,}|[a-zA-Z0-9]*[!+&-]{2,}|[a-zA-Z0-9]+\",s)\n    return x.span(),x.group()\n\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nimport re\n\n\ndef find_adverb_position(sentence):\n    # Write your solution here\n    adverb_regex = re.compile(r'[A-Z]*[a-z]*y', re.I)\n    adverbs = adverb_regex.findall(sentence)\n    return_string = ''\n    for adverb in adverbs:\n        position = sentence.find(adverb)\n        return_string = return_string + f'{position},{adverb}' + '\\n'\n\n    return return_string\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    \"\"\"\n    :param sentence:\n    :return: the index of the first adverb and the index of the adverb and the adverb\n    \"\"\"\n    index_adverb=0\n    adverb=None\n    for i,word in enumerate(sentence):\n        if word.lower()=='the':\n            pass\n        elif word.lower() in ADVERBS:\n            index_adverb=i\n            adverb=word\n    return index_adverb,index_adverb,adverb", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    i = 0\n    adverb_position = []\n    while i < len(sentence):\n        if sentence[i] == \"!\":\n            adverb_position.append((i, i + 1, sentence[i]))\n            i = i + 1\n        i = i + 1\n    return adverb_position\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nimport re\n\n\ndef find_adverb_position(sentence):\n    adverb = re.compile(r'adverb\\W')\n    adverb_pos = adverb.search(sentence).span()\n    adverb_pos_list = [(adverb_pos[0], adverb_pos[1])]\n    sentence_list = sentence.split()\n    for i in range(len(sentence_list)):\n        if i == 0:\n            pass\n        elif sentence_list[i] == 'adverb':\n            adverb_pos_list.append((i, i))\n        elif sentence_list[i] == 'verb':\n            adverb_pos_list.append((i, i))\n    return adverb_pos_list\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nimport re\n\ndef find_adverb_position(sentence):\n    pos_list = []\n    adverb = \"\"\n    for i, c in enumerate(sentence):\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            if adverb != \"\":\n                pos_list.append((adverb, i))\n                adverb = \"\"\n        if c in ['!', '?', '.']:\n            if adverb != \"\":\n                pos_list.append((adverb, i))\n                adverb = \"\"\n        if adverb != \"\":\n            adverb += c\n    return pos_list\n\n\ndef test_find_adverb_position():\n    assert find_adverb_position(\"clearly!! we can see the sky\") == [(0, 7, 'clearly'), (13, 17, 'we')]\n    assert find_adverb_position(\"watch this movie. I love it\") == [(10, 14, 'it')]\n    assert find_adverb_position(\"don't you think it's beautiful\") == [(13, 18, 'it'), (22, 26, 'beautiful')]", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    # find all adverbs\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i].lower().endswith(\"ly\"):\n            adverbs.append(sentence[i])\n    # find their positions in the sentence\n    adverb_positions = []\n    for i in range(len(adverbs)):\n        adverb_positions.append((sentence.index(adverbs[i])+1, adverb_positions[-1][0]-1, adverbs[i]))\n    return adverb_positions\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n#function 1\ndef find_adverb_position(sentence):\n\t# split the sentence to a list of tokens\n\twords = sentence.split()\n\t# initialize a list of adverbs\n\tadv = []\n\t# initialize a list of positions of adverbs\n\tadverb_pos = []\n\t# loop through all tokens\n\tfor i in range(len(words)):\n\t\t# if the token is an adverb, add it to the adverbs list\n\t\tif words[i] in adverbs:\n\t\t\tadv.append(words[i])\n\t\t\t# add the index of the token in the words list to the adverb_pos list\n\t\t\tadverb_pos.append(i)\n\t# return the adverbs list and the adverb positions list\n\treturn adverb_pos, adv\n\t\n#function 2\ndef find_adverb_position2(sentence):\n\t# split the sentence to a list of tokens\n\twords = sentence.split()\n\t# initialize a list of adverbs\n\tadv = []\n\t# initialize a list of positions of adverbs\n\tadverb_pos = []\n\t# loop through all tokens\n\tfor i in range(len(words)):\n\t\t# if the token is an adverb, add it to the adverbs list\n\t\tif words[i] in adverbs:\n\t\t\tadv.append(words[i])\n\t\t\t# add the index of the token in the words list to the adverb_pos list\n\t\t\tadverb_pos.append(i)\n\t# return the adverbs list and the adverb positions list\n\treturn adv, adverb_pos\n\t\n#function 3\ndef find_adverb_position3(sentence):\n\t# split the sentence to a list of tokens\n\twords = sentence.split()\n\t# initialize a list of adverbs\n\tadv = []\n\t# initialize a list of positions of adverbs\n\tadverb_pos = []\n\t# loop through all tokens\n\tfor i in range(len(words)):\n\t\t", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    adverbs = ['clearly', 'good', 'well', 'easily']\n    for adverb in adverbs:\n        if adverb in sentence:\n            position = sentence.find(adverb)\n            return (position, position+len(adverb), adverb)\n    return False\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\nimport re\ndef find_adverb_position(text):\n    re_adverb = re.compile('[a-zA-Z]+(?=[ \\n]*[a-zA-Z]+$)')\n    m = re_adverb.search(text)\n    if m:\n        adverb = m.group()\n        position = m.start()\n        return position,position+len(adverb),adverb\n    else:\n        return -1,-1,''\n\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(size):\n    return 6*size*size\n\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(n):\n    return 6*n**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return side**2*6\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(n):\n    return 6*n**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(num):\n    return num**2 * 6\n\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(l):\n    return 6*l**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(edge):\n\t# maths formula for surface area of a cube is 6*side^2\n\treturn 6 * (edge ** 2)\n\n# write a function to find the volume of a cube.\n# assert volume_cube(5)==125\ndef volume_cube(edge):\n\t# maths formula for volume of a cube is side^3\n\treturn (edge ** 3)\n\n# write a function to find the surface area of a sphere.\n# assert surfacearea_sphere(3)==4*3.14\ndef surfacearea_sphere(radius):\n\t# maths formula for surface area of a sphere is 4*pi*r^2\n\treturn (4 * math.pi * (radius ** 2))\n\n# write a function to find the volume of a sphere.\n# assert volume_sphere(3)==(4/3)*3.14*3**3\ndef volume_sphere(radius):\n\t# maths formula for volume of a sphere is 4/3*pi*r^3\n\treturn (4 / 3) * math.pi * (radius ** 3)\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return (6*side**2)\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    \"\"\"\n    >>> surfacearea_cube(5)\n    150\n    \"\"\"\n    surface_area = 6*(side**2) + 6*side\n    return surface_area\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side_length):\n    return 6*side_length**2\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    positive = 0\n    for number in arr:\n        if number > 0:\n            positive += 1\n    return positive / len(arr)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    \"\"\"\n    Returns a float representing the ratio of positive numbers to negative numbers in an array of integers\n    \"\"\"\n    return len([x for x in arr if x > 0])/len([x for x in arr if x < 0])\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    positive_count = 0\n    for i in arr:\n        if i > 0:\n            positive_count += 1\n\n    return positive_count / len(arr)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(numbers):\n    positive = 0\n    for i in numbers:\n        if i > 0:\n            positive += 1\n    return float(positive) / len(numbers)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    p = 0\n    n = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            p += 1\n        else:\n            n += 1\n    return p/len(nums)", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(num_list):\n    \"\"\"\n    num_list: List of integers\n    return: float value representing the fraction of positive numbers\n    \"\"\"\n    return 1.0 - len(filter(lambda x: x <= 0, num_list))/len(num_list)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\nfrom typing import List\n\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n    >>> positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.54\n    >>> positive_count([0, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.28\n    >>> positive_count([-1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.28\n    >>> positive_count([0, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 0])\n    0.44\n    >>> positive_count([-1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 0, -3])\n    0.27\n    >>> positive_count([-1, -5, 6, 0, -3, -2, 3, 4, 6, 8, 0, -3, 0])\n    0.27\n    \"\"\"\n    return sum([num >= 0 for num in nums]) / len(nums)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(numbers):\n    counter = 0\n    for number in numbers:\n        if number > 0:\n            counter += 1\n    return counter / len(numbers)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(nums):\n    return (sum([1 for num in nums if num > 0])/len(nums))\n\ndef test_cases():\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\nimport pytest\n\n\ndef positive_count(numbers):\n    return sum([1 for number in numbers if number > 0])/len(numbers)\n\n\ndef test_1():\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\n\n\ndef test_2():\n    assert positive_count([1, 2, 3]) == 1.0\n\n\ndef test_3():\n    assert positive_count([1, 1, 1, 1]) == 1.0\n\n\ndef test_4():\n    assert positive_count([1, 1, -1, -1]) == 0.0\n\n\ndef test_5():\n    assert positive_count([]) == 0.0\n\n\ndef test_6():\n    assert positive_count([-1]) == 0.0\n\n\ndef test_7():\n    assert positive_count([-1, 0, 1, 1, 2, 3]) == 0.6666666666666666\n\n\ndef test_8():\n    assert positive_count([0, 0, 0, 0, 0, 0, 0]) == 0.0\n\n\ndef test_9():\n    assert positive_count([-1, -1, -1, -1, -1]) == 0.0\n\n\ndef test_10():\n    assert positive_count([-1, 0, 0, 0, 0]) == 0.0\n\n\ndef test_11():\n    assert positive_count([-1, -1, -1, 1, 1]) == 0.25\n\n\ndef test_12():\n    assert positive_count([0, -1, 0, 0, 0, 0, 0, -1, -1, 1, 1"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(arr):\n\tmax = arr[0]\n\tfor i in arr:\n\t\tif i < 0 and i > max:\n\t\t\tmax = i\n\treturn max\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    largest = None\n    for i in lst:\n        if i < 0 and (not largest or i > largest):\n            largest = i\n    return largest\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    return max(lst) if max(lst) > 0 else min(lst)\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    i = 0\n    while i < len(lst):\n        if lst[i] < 0:\n            i = len(lst)\n        else:\n            lst[i] = 0\n            i = i + 1\n    return lst\n\nlst = [1,2,3,-4,-6]", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(list):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    return max(list)\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(numbers):\n    largest_neg_num = numbers[0]\n    for num in numbers:\n        if num > 0:\n            largest_neg_num = -1\n        elif num < largest_neg_num:\n            largest_neg_num = num\n    return largest_neg_num\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    return max(lst)\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(nums):\n    largest_neg = nums[0]\n    for n in nums:\n        if n<0 and n>largest_neg:\n            largest_neg = n\n    return largest_neg\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(l):\n    l.sort()\n    for i in range(len(l)-1,-1,-1):\n        if l[i] < 0:\n            return l[i]\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(arr):\n    return sorted(arr,reverse=True)[0]\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(l,k):\n    return str(l).replace('), (','),(').replace('),(',',').replace(',(','(').replace('),)',')').replace('],[',']').replace('],[',']')\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(L, k):\n    trimmed = list()\n    for i in range(len(L)):\n        trimmed.append(L[i][-k:])\n    return str(trimmed)\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuples, k):\n    return map(lambda x: x[:k], tuples)\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\nimport unittest\n\n\ndef trim_tuple(tuples, k):\n    if k >= len(tuples[0]):\n        return '[]'\n    return str(tuple([t[k:] for t in tuples]))[1:-1]\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tup, k):\n    return list(map(lambda x: x[:k], tup))\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\nimport pytest\n\n# given solution\ndef trim_tuple(input_tuple, k):\n    return [tuple(i[k:]) for i in input_tuple]\n\n# my solution\ndef trim_tuple2(input_tuple, k):\n    return [tuple(i[k:]) for i in input_tuple]\n\n\n# pytest", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tup_list, k):\n    new_list = []\n    for tup in tup_list:\n        new_tup = tuple(tup[k:])\n        new_list.append(new_tup)\n    return new_list\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    for i in range(len(tuple_list)):\n        tuple_list[i] = tuple_list[i][-k:]\n    return tuple_list\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tpl_list, k):\n    new_list = []\n    for tup in tpl_list:\n        new_list.append(tuple(tup[k:]))\n    return str(new_list)\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(t, k):\n    # a) initialize an empty list\n    trimmed_list = []\n    # b) for each element in the tuple list...\n    for i in t:\n        # c) trim each tuple by k...\n        trimmed_list.append(tuple(i[k:]))\n    return str(trimmed_list)\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1,tup2):\n\tnew_list=[]\n\tfor i in range(len(tup1)):\n\t\tnew_list.append(tup1[i][0]*tup2[i][0])\n\t\tnew_list.append(tup1[i][1]*tup2[i][1])\n\treturn new_list\n\ndef test_function(test_case):\n\ttup1,tup2,expected = test_case\n\toutput = index_multiplication(tup1,tup2)\n\tprint(output)\n\tif output == expected:\n\t\tprint(\"Pass\")\n\telse:\n\t\tprint(\"Fail\")\n\t\ntest_function(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ,((6, 21), (12, 45), (2, 9), (7, 30)))\ntest_function(((1, 3), (4, 5), (2, 9), (1, 10)),((1, 3), (1, 3), (1, 3), (1, 3)) ,((1, 9), (4, 15), (2, 9), (1, 10)))", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1, tuple2):\n    list1 = list(tuple1)\n    list2 = list(tuple2)\n    ans = []\n    for i in range(len(list1)):\n        ans.append(list1[i][0]*list2[i][0])\n        ans.append(list1[i][1]*list2[i][1])\n    return tuple(ans)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    new_tup = []\n    for i in range(len(tup1)):\n        new_tup.append(tup1[i] * tup2[i])\n    return tuple(new_tup)\n\ndef main():\n    tup1 = ((1, 3), (4, 5), (2, 9), (1, 10))\n    tup2 = ((6, 7), (3, 9), (1, 1), (7, 3))\n\n    assert index_multiplication(tup1, tup2) == ((6, 21), (12, 45), (2, 9), (7, 30))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    return (tup1[i][0] * tup2[i][0], tup1[i][1] * tup2[i][1]) for i in range(len(tup1))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(t1, t2):\n    return tuple(map(lambda x, y: x * y, t1, t2))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    res = []\n    for i in range(len(tup1)):\n        res.append((tup1[i][0] * tup2[i][0], tup1[i][1] * tup2[i][1]))\n    return res\n\n\n# assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1, tuple2):\n    assert len(tuple1) == len(tuple2)\n    return tuple(map(lambda x: tuple(map(lambda y: x[0]*y[0], zip(x[1], tuple2))), tuple1))", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1, t2):\n    return tuple(map(lambda x: x[0]*x[1], zip(t1, t2)))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    multiplied_tuples = []\n    for i in range(len(tuple1)):\n        mul_tuple = []\n        for j in range(len(tuple1[i])):\n            mul_tuple.append(tuple1[i][j] * tuple2[i][j])\n        multiplied_tuples.append(mul_tuple)\n    return multiplied_tuples\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    l=[]\n    for i in range(len(tup1)):\n        l.append(tup1[i][0]*tup2[i][0])\n    return tuple(l)\ntup1=((1, 3), (4, 5), (2, 9), (1, 10))\ntup2=((6, 7), (3, 9), (1, 1), (7, 3))"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tup, list):\n    count = 0\n    for i in tup:\n        if i in list:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tuple_val, list_val):\n    return [tuple_val.count(item) for item in list_val]", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup,lst):\n    count = 0\n    for elem in lst:\n        count += tup.count(elem)\n    return count", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(l,list_):\n    a=0\n    for i in list_:\n        for j in l:\n            if j==i:\n                a+=1\n    return a\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple_list, lst):\n    if tuple_list == ():\n        return 0\n    else:\n        if tuple_list[0] in lst:\n            return count_Occurrence(tuple_list[1:], lst) + 1\n        else:\n            return count_Occurrence(tuple_list[1:], lst)", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup, list_):\n    return sum(map(lambda x : tup.count(x), list_))\n\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(a,b):\n    count = 0\n    for i in b:\n        for j in a:\n            if j == i:\n                count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup,list_):\n    count = 0\n    for elem in tup:\n        if elem in list_:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple_list, list_to_find):\n    return (tuple_list.count(i) for i in list_to_find)\n\ndef test_count_Occurrence():\n    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3\n\n#-------------------------------------------------\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\nimport pytest\n\n\ndef cube_nums(nums):\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n\n\ndef cube_nums_lambda(nums):\n    return list(map(lambda num: num**3, nums))\n\n\ndef test_cube_nums():\n    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert cube_nums_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\n\npytest.main([__file__])", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n# Answer\ndef cube_nums(nums):\n    return list(map(lambda x: x ** 3, nums))\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return list(map(lambda x:x**3, nums))\n\n#Test\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = cube_nums(nums)", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n\n\ndef test_cube_nums():\n    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x ** 3, nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(lst):\n    return [lambda x: x**3 for x in lst]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(lst):\n    # return list(map(lambda x: x**3, lst)) # if we want to use list comprehension\n    return [x**3 for x in lst]\n\ndef cube_nums2(lst):\n    return list(map(lambda x: x**3, lst))\n\ndef cube_nums3(lst):\n    return list(map(lambda x: x**3, lst))\n\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return list(map(lambda num: num**3, nums))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(lst):\n\treturn list(map(lambda x: x**3, lst))\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    s=0\n    for i in range(1,n+1):\n        s+=1/(i+1)\n    return s\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += perrin(i)\n    return sum\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i * factorial(i)\n    return sum\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    total = 0\n    for i in range(n):\n        total += (n + 1 - i) * i\n    return total\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tsum += 1 / i\n\treturn sum\n\n\ndef cal_sum_with_pi(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tsum += pi(i)\n\treturn sum\n\n\ndef cal_sum_with_e(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tsum += e(i)\n\treturn sum\n\n\ndef test_cal_sum():\n\tassert cal_sum(9) == 49, 'cal_sum fails'\n\tassert cal_sum(10) == 784, 'cal_sum fails'\n\tassert cal_sum(11) == 1365, 'cal_sum fails'\n\n\ndef test_cal_sum_with_pi():\n\tassert cal_sum_with_pi(9) == 49, 'cal_sum_with_pi fails'\n\tassert cal_sum_with_pi(10) == 784, 'cal_sum_with_pi fails'\n\tassert cal_sum_with_pi(11) == 1365, 'cal_sum_with_pi fails'\n\n\ndef test_cal_sum_with_e():\n\tassert cal_sum_with_e(9) == 49, 'cal_sum_with_e fails'\n\tassert cal_sum_with_e(10) == 784, 'cal_sum_with_e fails'\n\tassert cal_sum_with_e(11) == 1365, 'cal_sum_with_e fails'\n\n\ntest_cal_sum()\ntest_cal_sum_with_pi()\ntest_cal_sum_with_e()", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i**2\n    return total\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    '''calculate the sum of perrin numbers'''\n    sum = 0\n    for i in range(1,n+1):\n        sum += cal_perrin(i)\n    return sum\n    \ndef cal_perrin(n):\n    '''calculate the nth perrin number'''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        return cal_perrin(n-1) + cal_perrin(n-2)\n    ", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    return 0\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    # Write your code here\n    sum = 0\n    for i in range(1, n):\n        sum += i*i*(2*i-1)\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    perrin = 0\n    if n < 1:\n        return None\n    else:\n        for i in range(n):\n            perrin += ((i+1) ** 2)\n    return perrin\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    a = (x3-x1) * (y3-y1) - (x3-x2) * (y3-y2)\n    b = (x2-x1) * (y2-y1) - (x2-x3) * (y2-y3)\n    c = (x1-x2) * (y1-y2) - (x1-x3) * (y1-y3)\n    #print(a,b,c)\n    if (a + b > 0) and (a + c > 0) and (b + c > 0):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    if x1*y2+x2*y3+x3*y1 == 0:\n        return 'No'\n    else:\n        return 'Yes'\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if (x1*y2 + x2*y3 + x3*y1) > 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n# Code here\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if (x1<x2 and y1<y2 and x3>x2 and y3>y2) or (x1<x2 and y1>y2 and x3>x2 and y3<y2) or (x1>x2 and y1>y2 and x3<x2 and y3<y2):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    import math\n    if(x1==x2==x3):\n        return 'No'\n    if (x1==x2 and x2==x3):\n        return 'Yes'\n    if(y1==y2==y3):\n        return 'No'\n    if (y1==y2 and y2==y3):\n        return 'Yes'\n    if (x1==x2 and y1==y2):\n        return 'Yes'\n    if (x1==x2 and y1==y3):\n        return 'Yes'\n    if (x1==x3 and y1==y2):\n        return 'Yes'\n    if (x1==x3 and y1==y3):\n        return 'Yes'\n    if (x2==x3 and y2==y1):\n        return 'Yes'\n    if (x2==x3 and y2==y3):\n        return 'Yes'\n    if (y1==y2 and x1==x2):\n        return 'Yes'\n    if (y1==y2 and x1==x3):\n        return 'Yes'\n    if (y1==y3 and x1==x2):\n        return 'Yes'\n    if (y1==y3 and x1==x3):\n        return 'Yes'\n    if (y2==y3 and x2==x1):\n        return 'Yes'\n    if (y2==y3 and x2==x3):\n        return 'Yes'\n    if (math.sqrt((x1-x2)**2+(y1-y2)**2) > math.sqrt((x1-x3)**2+(y1-y3)**2)):\n        return 'Yes'\n    if (math.sqrt((x2-x3)**2+(y2-y3)**2) > math.sqrt((x1-x3)**2+(y1-y3)**2)):\n        return 'Yes'\n    if (math.sqrt((x3-x1)**2+(y3-y1)**2) > math.sqrt", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    p1 = (x1,y1)\n    p2 = (x2,y2)\n    p3 = (x3,y3)\n    l1 = np.linalg.norm(np.array(p1) - np.array(p2))\n    l2 = np.linalg.norm(np.array(p2) - np.array(p3))\n    l3 = np.linalg.norm(np.array(p3) - np.array(p1))\n    if (l1+l2+l3) != 0:\n        return 'Yes'\n    else:\n        return 'No'", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\nimport math\n\ndef check_Triangle(a, b, c):\n    s = (a + b + c) / 2\n    if (s >= a and s >= b and s >= c):\n        return 'Yes'\n    return 'No'\n\ndef check_Triangle2(a, b, c):\n    s = (a + b + c) / 2\n    return 'Yes' if math.sqrt(s * (s - a) * (s - b) * (s - c)) == s - a else 'No'\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    return (x1*y2 + x2*y3 + x3*y1 - x1*y3 - x2*y1 - x3*y2 >= 0)\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x, y, a, b, c, d):\n    if a + b > c and a + c > b and b + c > a:\n        return 'Yes'\n    return 'No'\n\n\n# Testing"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list, size):\n    new_list = []\n    for i in range(size):\n        new_list.append(list[i])\n    return new_list\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(values, size):\n    return [values[i:i+size] for i in range(len(values)) if len(values[i:i+size])==size]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(values, size):\n    return values[size::size]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(string_list,size):\n    if len(string_list) > size:\n        return string_list[:size]\n    else:\n        return string_list\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(list_of_strings, num_of_strings):\n    return list_of_strings[:num_of_strings]\n\n#test", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst, size):\n    new_lst = []\n    for string in lst:\n        if len(string)>=size:\n            new_lst.append(string[:size])\n    return new_lst\n\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list_of_strings, size):\n    # this is a function that takes a list of strings and an integer as inputs\n    # and returns a list of strings\n    \n    # make a new list to store the strings\n    new_list = []\n    \n    # iterate through the list and extract the specified size of strings\n    # append the strings to the new list\n    for string in list_of_strings:\n        new_list.append(string[:size])\n        \n    return new_list\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(list_of_string, count):\n    return list_of_string[0:count]\n\ndef extract_string_2(list_of_string, count):\n    return list_of_string[:count]", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst, n):\n    \"\"\"\n    Extract first n strings from a given list.\n    :param lst: List of strings\n    :param n: Size of strings to extract\n    :return: First n strings of the given list\n    \"\"\"\n    lst = lst[:n]\n    lst.reverse()\n    return lst\n\n\ndef test_extract_string():\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n\n\ndef test_extract_string_2():\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 2) == ['solution', 'practice']\n\n\ndef test_extract_string_3():\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 0) == []\n\n\ndef test_extract_string_4():\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 100) == ['practice', 'solution']\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list,string_size):\n    return string_list[-string_size:]\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string:str):\n    \"\"\"\n    Returns the string without whitespaces\n    :param string: the string to remove the whitespaces from\n    :return: the string without whitespaces\n    \"\"\"\n    return re.sub('\\s+','',string)", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(string):\n    string = re.sub(r'\\s+', '', string)\n    return string\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(input_string):\n    import re\n    pattern = r'\\s+'\n    return re.sub(pattern, '', input_string)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\n\ndef remove_whitespaces(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'\\s+', '', str)\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n# remove all whitespaces from string using regex\nimport re\ndef remove_whitespaces(text):\n    # replace all whitespaces with empty string\n    return re.sub('\\s+', '', text)\n\n\n# test case", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\n\ndef remove_whitespaces(string):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return re.sub('[ \\t\\n]', '', string)\n\n\n# Test your code", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\n\ndef remove_whitespaces(s):\n    regex = re.compile('[\\s]+')\n    return regex.sub('', s)\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(text):\n    return re.sub(r\"\\s+\", \"\", text)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(string):\n    # your code here\n    return re.sub('\\s+', '', string)", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    return re.sub(\"\\s+\",\"\",s)\n\ndef test_remove_whitespaces():\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(given_amount,sold_amount):\n    if given_amount >= sold_amount:\n        return None\n    else:\n        return given_amount - sold_amount\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,sell):\n    if amount<=sell:\n        return None\n    return amount-sell\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(price, amount):\n    if amount>price:\n        return price-amount\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,value):\n    if amount < value:\n        return amount\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(invested_amount,profit):\n    if invested_amount-profit<0:\n        return invested_amount-profit\n    else:\n        return None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,loss_amount):\n    if amount - loss_amount >= 0:\n        return None\n    else:\n        return amount - loss_amount\n\n\n#print(loss_amount(1500,1200))\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(customer_amount,selling_price):\n    if customer_amount>selling_price:\n        return customer_amount-selling_price\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(invested_amount, realised_amount):\n    return 0 if invested_amount == realised_amount else invested_amount - realised_amount\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,limit):\n    if amount > limit:\n        return amount - limit\n    else:\n        return None\n\n\ndef test_loss_amount():\n    assert loss_amount(1500, 1200) == None\n\n\ndef test_loss_amount_inverse():\n    assert loss_amount(1200, 1500) == 300\n\n# What does this test do?\ndef test_loss_amount_inverse_if_diff():\n    assert loss_amount(1200, 1500) != 300\n\n# What does this test do?\ndef test_loss_amount_inverse_if_equal():\n    assert loss_amount(1200, 1200) == None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(money,amount):\n\tif money-amount>=0:\n\t\treturn None\n\telse:\n\t\treturn money-amount\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(number):\n    \"\"\"\n    O(logn) time complexity and O(1) space complexity\n    \"\"\"\n    assert isinstance(number, int), \"input should be an integer\"\n    factors = []\n    for i in range(1, int(number**0.5)+1):\n        if number % i == 0:\n            factors.append(i)\n            factors.append(number // i)\n    return sum(factors) - number\n\ndef test_sumofFactors():\n    assert sumofFactors(18) == 26\n\ntest_sumofFactors()", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    factors = []\n    for i in range(1,num+1):\n        if num % i == 0:\n            factors.append(i)\n    sum = 0\n    for i in factors:\n        if i % 2 == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(number):\n    sum_of_factors = 0\n\n    if number < 0:\n        number = -number\n\n    for factor in range(1, number + 1):\n        if number % factor == 0:\n            sum_of_factors += factor\n\n    return sum_of_factors\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\nimport math\ndef sumofFactors(n):\n    sum = 0\n    i = 1\n    while i<=math.sqrt(n):\n        if n%i==0:\n            if i%2==0:\n                sum += i\n            if i!=n//i:\n                sum += n//i\n        i += 1\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    sum=0\n    for i in range(1,n+1):\n        if n%i ==0:\n            if i%2 ==0:\n                sum+=i\n    return sum", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    lst = [i for i in range(1, n+1)]\n    ans = 0\n    for i in lst:\n        if n % i == 0:\n            ans += i\n    return ans\n\n#   O(n**2)\n#   1 - 2 - 3 - ... - n\n# 18 = 2x2x2 = 3x3\n# 18 = 2x3\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(number):\n    factors = set()\n    for i in range(1, number):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    factors = list(factors)\n    factors.sort()\n    result = 0\n    for factor in factors:\n        if factor % 2 == 0:\n            result += factor\n    return result\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\nfrom typing import List, Tuple, Set\n\n\ndef sumofFactors(num: int) -> int:\n    factors: Set[int] = set()\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.add(i)\n    factors.discard(1)\n    factors.discard(num)\n    return sum([i for i in factors if i % 2 == 0])\n\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    sum=0\n    for i in range(1,n//2+1):\n        if n%i==0:\n            if i%2==0:\n                sum=sum+i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    sum = 0\n    for i in range(1,num+1):\n        if (num%i == 0) and (i%2==0):\n            sum+=i\n    return sum\n\n\n# Example\n# Output : 26"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n\twords = text.split()\n\tfor word in words:\n\t\tif 'z' in word:\n\t\t\treturn ('Found a match!')\n\treturn ('No match!')\n\n\n# Test\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    text = text.replace(\" \", \"\")\n    if 'z' in text:\n        return \"Found a match!\"\n    else:\n        return \"No match found.\"", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    Checks if a word in text contains an \"z\"\n    \"\"\"\n    # create a list of words in the text\n    words = text.split()\n    # check if any words contain a \"z\"\n    if any([word.find(\"z\") != -1 for word in words]):\n        return (\"Found a match!\")\n    else:\n        return (\"Sorry, no match\")\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    \"\"\"Function to match a word containing 'z'\"\"\"\n    for word in text.split():\n        if 'z' in word:\n            return 'Found a match!'\n    return 'Did not find any match!'\n    \n# Test the function", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if re.search(r\"z\",text):\n        return \"Found a match!\"\n    else:\n        return \"Not Found\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    wordz = re.findall('[a-zA-Z]+z', text)\n    if wordz:\n        print('Found a match!')\n        return wordz\n    else:\n        print(\"Sorry no match\")\n        return None\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n\n    #the words_z_list is a list of words in the text with an 'z'\n    words_z_list = text.split()\n    for word in words_z_list:\n        if 'z' in word:\n            print('Found a match!')\n            return True\n    print('No match!')\n    return False", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    text: a string\n    return: a string \"Found a match!\" if the text contains the word 'z',\n        returns \"\" otherwise\n    \"\"\"\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return \"\"\n\n# # test text_match_wordz", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\n#answer\ndef text_match_wordz(word):\n    if \"z\" in word:\n        return 'Found a match!'\n    return 'No Match!'", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(s):\n    match = re.search(r'z', s)\n    if match:\n        return \"Found a match!\"\n    return \"No match.\"\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(m):\n    if m in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif m in [4, 6, 9, 11]:\n        return False\n    elif m == 2:\n        if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n            return True\n        else:\n            return False\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(m_numb):\n    if m_numb==1 or m_numb==3 or m_numb==5 or m_numb==7 or m_numb==8 or m_numb==10 or m_numb==12:\n        return True\n    elif m_numb==4 or m_numb==6 or m_numb==9 or m_numb==11:\n        return False\n    else:\n        return \"Wrong Input\"\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(number):\n    if number == 2 and ((number % 400 == 0) or ((number % 4 == 0) and (number % 100 != 0))):\n        return True\n    if (number % 2 == 0 and number < 7) or number == 8:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(x):\n    if (x%4==0 and x%100!=0) or x%400==0:\n        return True\n    else:\n        return False\n\n#print(check_monthnumb_number(5))", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n#Write your code here\ndef check_monthnumb_number(m):\n    if m==1 or m==3 or m==5 or m==7 or m==8 or m==10 or m==12:\n        return True\n    elif m==4 or m==6 or m==9 or m==11:\n        return False\n    else:\n        return \"Invalid Input\"\n        \n\n#assert check_monthnumb_number(5)==True\n#assert check_monthnumb_number(6)==False\n#assert check_monthnumb_number(12)==True\n#assert check_monthnumb_number(1)==True\n#assert check_monthnumb_number(13)==\"Invalid Input\"\n#assert check_monthnumb_number(\"13\")==\"Invalid Input\"\n\n#assert check_monthnumb_number(5)==True\n#assert check_monthnumb_number(6)==False\n#assert check_monthnumb_number(12)==True\n#assert check_monthnumb_number(1)==True\n#assert check_monthnumb_number(13)==\"Invalid Input\"\n#assert check_monthnumb_number(\"13\")==\"Invalid Input\"", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n#Write your code below and press Shift+F10 to execute the function\n\n\n#Check your answer by typing the following command\ncheck_monthnumb_number(5)\n#%%\n#Define a function to check whether the given year is a leap year or not.\n#assert leap_year(2000)==True\n#assert leap_year(2004)==False\n\n#Write your code below and press Shift+F10 to execute the function\n\n#Check your answer by typing the following command\nleap_year(2000)\n#%%\n#Define a function to check whether the given year is a leap year or not.\n#assert leap_year(1900)==False\n#assert leap_year(1904)==True\n\n#Write your code below and press Shift+F10 to execute the function\n\n#Check your answer by typing the following command\nleap_year(1900)\n#%%\n#Define a function to check whether the given year is a leap year or not.\n#assert leap_year(2000)==True\n#assert leap_year(2004)==False\n\n#Write your code below and press Shift+F10 to execute the function\n\n#Check your answer by typing the following command\nleap_year(2004)\n#%%", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month):\n    \"\"\"\n    check_monthnumb_number takes a number (month) as an argument and return True if the month contains 31 days and False otherwise\n    \"\"\"\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        return False\n    if month == 2 and is_leapyear(2018):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    elif month == 2:\n        if (year % 4 == 0) and ((year % 100 != 0) or (year % 400 == 0)):\n            return 29\n        else:\n            return 28\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    if month in (1,3,5,7,8,10,12):\n        return True\n    elif month in (4,6,9,11):\n        return False\n    else:\n        return 'Invalid month'\n\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        return True\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return False\n    else:\n        return False"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    \"\"\"\n    :param string_list: list of string\n    :return: list of reversed string\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(str_list):\n\t\"\"\"\n\t:param str_list: list of strings to reverse\n\t:return: list of strings reversed\n\t\"\"\"\n\treversed_list = []\n\tfor string in str_list:\n\t\treversed_list.append(string[::-1])\n\treturn reversed_list", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(str_list):\n    reversed_str_list = []\n    for string in str_list:\n        reversed_str_list.append(string[::-1])\n    return reversed_str_list\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n# 1: Use for loop and string slicing\ndef reverse_string_list(string_list):\n    reversed_string_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_string_list.append(reversed_string)\n    return reversed_string_list\n\n# 2: Use list comprehension\ndef reverse_string_list2(string_list):\n    return [string[::-1] for string in string_list]", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    \"\"\"\n    Reverse all strings in the given list in place\n    \"\"\"\n    for i in range(len(string_list)):\n        string_list[i] = string_list[i][::-1]\n\n    return string_list\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    return [s[::-1] for s in strings]\n\nreverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\nreverse_string_list(['Who', 'Put', 'Butter', 'On', 'The', 'Bread', 'At', 'The', 'Breakfast', 'Table', '?'])\nreverse_string_list(['Hello', 'World', 'Jump', 'Over', 'the', 'Moon', 'and', 'Mars', '!'])\n#Write a function to find the last digit of a string.\ndef last_digit(num):\n    num = str(num)\n    return num[-1]\n\nlast_digit(123456)\nlast_digit(5)\nlast_digit(50)\nlast_digit(500)\nlast_digit(5000)\nlast_digit(50000)\nlast_digit(500000)\nlast_digit(5000000)\n#Write a function to capitalize the first and last letter of a string.\ndef capitalize_string(s):\n    return s[0].upper()+s[1:-1].lower()+s[-1].upper()\n\ncapitalize_string('abc')\ncapitalize_string('abC')\ncapitalize_string('ABc')\ncapitalize_string('AbC')\ncapitalize_string('12345')\ncapitalize_string('123456')\ncapitalize_string('1234567')\ncapitalize_string('12345678')\ncapitalize_string('123456789')\ncapitalize_string('1234567890')\ncapitalize_string('12345678901')\ncapitalize_string('123456789012')\ncapitalize_string('1234567890", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(input_list):\n    # Write your code here.\n    return [a[::-1] for a in input_list]\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(my_list):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return [str[::-1] for str in my_list]\n\n#assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\ndef main():\n    list_of_strings = ['Red', 'Green', 'Blue', 'White', 'Black']\n    print(reverse_string_list(list_of_strings))\n    \nmain()```\n\n### Output:\n\n<empty_output>", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    new_list = []\n    for i in string_list:\n        new_list.append(i[::-1])\n    return new_list\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(strings):\n    \"\"\"\n    Write your solution here.\n    \"\"\"\n    result = []\n    for string in strings:\n        reversed_string = ''\n        for character in string:\n            reversed_string += character\n        result.append(reversed_string)\n    return result\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(List):\n    min_len = float(\"inf\")\n    min_len_list = []\n    for i in range(len(List)):\n        if(len(List[i]) < min_len):\n            min_len = len(List[i])\n            min_len_list = [List[i]]\n        elif(len(List[i]) == min_len):\n            min_len_list.append(List[i])\n    return min_len_list\n\n#assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n#assert Find_Min([[1,2],[1,2,3]]) == [1,2]\n#assert Find_Min([[1,2,3],[1,2,3],[1,2,3]]) == [1,2,3]\n#assert Find_Min([[1,2,3],[1,2,3],[1,2,3,4]]) == [1,2,3]\n#assert Find_Min([[1,2,3],[1,2,3,4],[1,2,3]]) == [1,2,3,4]\n#assert Find_Min([[1,2,3],[1,2,3,4],[1,2,3,4]]) == [1,2,3,4]", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    if len(lst) == 1:\n        return lst\n    ans = lst[0]\n    for i in range(1,len(lst)):\n        for j in range(len(lst[i])):\n            ans = min(ans,lst[i][j])\n    return [ans]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    length = []\n    for i in lst:\n        length.append(len(i))\n    min_length = min(length)\n    index = length.index(min_length)\n    return lst[index]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\nfrom functools import reduce\n\n\ndef Find_Min(l):\n    if len(l) == 1:\n        return l\n    else:\n        return reduce(lambda x, y: x if len(x) < len(y) else y, l)\n\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\nfrom random import shuffle\n\n\ndef Find_Min(List):\n    if len(List) == 0:\n        return []\n    min_len = len(List[0])\n    min_list = []\n    for i in range(len(List)):\n        if len(List[i]) == min_len:\n            min_list.append(List[i])\n        elif len(List[i]) < min_len:\n            min_list = [List[i]]\n            min_len = len(List[i])\n    return min_list\n\n\ndef main():\n    # Not needed\n    pass\n\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(main_list):\n    min_list = main_list[0]\n    for j in range(1,len(main_list)):\n        for i in range(len(main_list[0])):\n            if main_list[j][i] < min_list[i]:\n                min_list = main_list[j]\n    return min_list\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_idx = i\n    return lst[min_idx]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    if len(lst) == 1:\n        return lst[0]\n    min_lst = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min_lst):\n            min_lst = lst[i]\n    return min_lst\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(sub_list):\n    for i in sub_list:\n        for j in sub_list:\n            if i != j and len(i) < len(j):\n                return i\n    return []\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(a):\n    b = []\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] not in b:\n                b.append(a[i][j])\n                if len(b) == len(a):\n                    return b\n\n#assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n#assert Find_Min([[1,2],[1,2],[1,2]]) == [1,2]\n#assert Find_Min([[1,2,3],[1,2],[1,2]]) == [1,2]\n#assert Find_Min([[1,2,3],[1,2],[1,2,3]]) == [1,2]\n#assert Find_Min([[1,2,3],[1,2],[1,2]]) == [1,2]\n#assert Find_Min([[1,2,3],[1,2,3],[1,2,3]]) == [1,2,3]\n#assert Find_Min([[1,2,3],[1,2,3,4],[1,2,3,4,5]]) == [1,2,3,4]"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n#input: length of length and width in meters\ndef rectangle_area(length, width):\n    #return the area of rectangle\n    return length*width\n\n#area of rectangle (10,20) = 200", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(a, b):\n    return a*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\nrectangle_area(10,20)\n\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    return width * height\n\n#test", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(w,h):\n    return w*h\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width, height):\n\treturn width * height\n\ndef test_rectangle_area():\n\tassert rectangle_area(10,20)==200\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(a, b):\n    return a * b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(l,w):\n    return l*w\n\ndef test_rectangle_area():\n    assert rectangle_area(10,20)==200\ntest_rectangle_area()\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(a,b):\n    return a*b\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\n\ndef remove_uppercase(text):\n    pattern = re.compile('[A-Z]{1,}')\n    text = re.sub(pattern, '', text)\n    return text\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\ndef remove_uppercase(s):\n    result = re.sub('[A-Z]+', '', s)\n    return result\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(s):\n    result = re.sub('[A-Z]', '', s)\n    return result\n\n#test case\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    # Complete this function\n    return re.sub('[A-Z]', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(word):\n  return re.sub(r'[A-Z]',\"\",word)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]+', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\ndef remove_uppercase(s):\n    # return re.sub(r'[A-Z]', '', s)\n    return ''.join(filter(lambda ch: not ch.isupper(), s))\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]+', '', string)", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nfrom typing import List\n\nREGEX = r'[A-Z][a-z]+'\n\n\ndef remove_uppercase(input_string: str) -> str:\n    return ''.join(re.sub(REGEX, '', input_string))\n\n\ndef remove_uppercase_2(input_string: str) -> str:\n    return re.sub(REGEX, '', input_string)\n\n\ndef test_function():\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('  cAstyoUrFavoRitETVshoWs  ') == '  cstyoravoitshos  '\n    assert remove_uppercase('  cAstyoUrFavoRitETVshoWs  ') == '  cstyoravoitshos  '\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs  ') == 'cstyoravoitshos  '\n    assert remove_uppercase('  cAstyoUrFavoRitETVshoWs') == '  cstyoravoitshos'\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs  ') == 'cstyoravoitshos  '\n    assert remove_uppercase('  cAstyoUrFavoRitETVshoWs') == '  cstyoravoitshos'\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('  cAstyoUrFavoRitETVshoWs  ') == '  cstyoravoitshos  '\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('  cAstyoUrFavoRitETVshoWs  ') == '  cstyoravoitshos  '\n    assert remove_uppercase('cAstyoUrFavoRitETVsh", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]+', '', string)\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    \"\"\"\n    lst: a list of lists\n    returns: a list\n    \"\"\"\n    # your code here\n    return [item[0] for item in lst]\n\nExtract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])```\n\n### Output:\n\n<empty_output>", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(data):\n    output = []\n    for sublist in data:\n        output.append(sublist[0])\n    return output\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n  return [x[0] for x in lst]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(l):\n    return [x[0] for x in l]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n\t# code here\n\tans=[]\n\tfor ele in lst:\n\t\tans.append(ele[0])\n\treturn ans\n\n#main code", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(l):\n    return [j[0] for i in l for j in i]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(L):\n    return [l[0] for l in L]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef get_first_element_of_each_sublist(lst):\n    # TODO: Write your code here\n    return [item[0] for item in lst]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(sublists):\n\treturn [sublist[0] for sublist in sublists]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\nfrom functools import reduce\n\n\ndef first(iterable):\n    return next(iter(iterable))\n\n\ndef Extract(arr):\n    return reduce(lambda x, y: x + [first(y)], arr, [])\n\n\ndef main():\n    print(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))\n\n\nmain()"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    ctr = 0\n    for c in str:\n        if c.isupper():\n            ctr += 1\n    return ctr\n\n\ndef test_upper_ctr():\n    assert upper_ctr('PYTHON') == 4\n    assert upper_ctr('PYTHON') == 4\n    assert upper_ctr('PYTHONS') == 5\n    assert upper_ctr('PYTHON  ') == 5\n    assert upper_ctr('python') == 0\n    print('Success')\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    ctr = 0\n    for c in s:\n        if c.isupper():\n            ctr += 1\n    return ctr\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(st):\n    st = st.upper()\n    count = 0\n    for char in st:\n        if char.isupper():\n            count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    return len([c for c in str if c.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    return len([c for c in s if c.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(input_str):\n    count = 0\n    for char in input_str:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test your function", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    count = 0\n    for i in string:\n        if i.isupper():\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    return len(set(c.upper() for c in s if c.isupper()))\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\nimport string\n\ndef upper_ctr(string):\n    \"\"\"\n    Count the number of upper case characters in a string.\n    :param string: the string to count the characters in.\n    :return: the number of upper case characters in the string.\n    \"\"\"\n    return len(string) - len(string.lower())\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    return len([x for x in s if x.isupper()])"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n#brute force\ndef combinations_list(lst):\n    return [[lst[i]] + lst[i+1:] for i in range(len(lst)-1)]\n\n#another way to do it with itertools\nfrom itertools import combinations\ndef combinations_list(lst):\n    return [list(x) for x in combinations(lst, len(lst))]\n\n\n#another way with iterative dynamic programming\ndef combinations_list(lst):\n    ret = [[]]\n    for i in range(len(lst)):\n        tmp = []\n        for j in range(len(ret)):\n            for k in ret[j]:\n                tmp.append([lst[i]] + k)\n        ret = tmp\n    return ret\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\nfrom typing import List\n\ndef combinations_list(lst: List[str]):\n    \"\"\"\n    Complexity: O(n^2)\n    \"\"\"\n    combinations = []\n    for first in lst:\n        for second in lst:\n            if second != first:\n                combination = [first, second]\n                combinations.append(combination)\n    \n    return combinations\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(list):\n    result = []\n    for i in list:\n        for j in list:\n            if i != j:\n                result.append([i,j])\n    return result\n\n#assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\ndef combinations_list(list):\n    return [[i,j] for i in list for j in list if i != j]\n\n#assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(my_list):\n    if not my_list:\n        return [[]]\n    if len(my_list) == 1:\n        return [my_list]\n    return combinations_list(my_list[1:]) + [[my_list[0]] + i for i in combinations_list(my_list[1:])]\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(list):\n    result = []\n    def find_combs(result, current_combs, combo):\n        if len(current_combs) == len(list):\n            result.append(combo)\n        else:\n            for index in range(len(current_combs)):\n                if index != len(current_combs) - 1:\n                    find_combs(result, current_combs[:index] + current_combs[index + 1:], combo + [current_combs[index]])\n                else:\n                    find_combs(result, current_combs[:index + 1], combo + [current_combs[index]])\n    find_combs(result, list, [])\n    return result", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    lst_copy = lst[:]\n    result = []\n    if lst_copy == []:\n        result.append([])\n    else:\n        result.append(lst_copy.pop(0))\n        for combo in combinations_list(lst_copy):\n            result.append(result[-1] + [result[-1]])\n    return result\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(l):\n    if len(l) == 1:\n        return [[l[0]]]\n    else:\n        l2 = combinations_list(l[1:])\n        for i in range(len(l2)):\n            l2[i] = [l[0]] + l2[i]\n        return l2\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    result = []\n    if len(lst) == 0:\n        return [[]]\n    else:\n        for x in lst:\n            sub_result = combinations_list(lst[1:])\n            result.extend([x] + sub_result)\n        return result\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(mylist):\n    return [x for x in [list(filter(lambda y: y != i, mylist)) for i in mylist] if len(x) != 0]", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(L):\n    def combinations(L, size):\n        if size == 0:\n            return [[]]\n        else:\n            return [L[i:i+size] + combination for i in range(len(L)) for combination in combinations(L, size-1)]\n\n    result = combinations(L, len(L))\n    return result\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    # Write your code here\n    if len(arr) == 0:\n        return 0\n    else:\n        max_prod = 0\n        max_neg_so_far = -9999999999\n        for i in range(len(arr)):\n            if arr[i] <= 0:\n                arr[i] = max_neg_so_far\n            max_neg_so_far = max(max_neg_so_far*arr[i], arr[i])\n            if max_prod <= max_neg_so_far:\n                max_prod = max_neg_so_far\n        return max_prod\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom typing import List, Optional, Tuple\n\n\ndef max_subarray_product(array: List[int]) -> int:\n    \"\"\"\n    Calculates the maximum product of a subarray of the array.\n\n    Complexity:\n        Time: O(n)\n        Space: O(1)\n\n    Args:\n        array (List[int]): The list of integer numbers to calculate the max product subarray.\n\n    Returns:\n        max_product (int): The max product of a subarray.\n    \"\"\"\n\n    max_product = float(\"-inf\")\n    current_product = 1\n\n    for num in array:\n        if num > 0:\n            current_product *= num\n        else:\n            current_product = max(0, current_product)\n            current_product *= num\n        max_product = max(max_product, current_product)\n\n    return max_product\n\n\ndef max_subarray_product_optimized(array: List[int]) -> int:\n    \"\"\"\n    Calculates the maximum product of a subarray of the array in O(n) time.\n\n    Complexity:\n        Time: O(n)\n        Space: O(1)\n\n    Args:\n        array (List[int]): The list of integer numbers to calculate the max product subarray.\n\n    Returns:\n        max_product (int): The max product of a subarray.\n    \"\"\"\n    max_product = float(\"-inf\")\n    current_product = 1\n    max_so_far = 1\n\n    for num in array:\n        if num > 0:\n            current_product *= num\n            max_so_far = max(max_so_far, current_product)\n        else:\n            current_product = max(0, current_product)\n            current_product *= num\n            max_so_far = max(max_so_far, current_product)\n        max_product = max(max_product, max_so_far)\n\n    return max_product\n\n\ndef max_subarray_product_2d(array: List[List[int]]) -> Tuple[int, int, int]:\n    \"\"\"\n    Calculates the maximum product of a subarray of the array in O(n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(array):\n    result, max_value = array[0], array[0]\n    for i in range(1, len(array)):\n        if array[i] > 0:\n            max_value = max(max_value, array[i])\n        else:\n            max_value = max(max_value, array[i] * result)\n        result = max_value\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\n\n\ndef max_subarray_product(array: List[int]) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    max_product = float(\"-inf\")\n    cur_product = 1\n\n    for n in array:\n        cur_product *= n\n        if cur_product < 0:\n            cur_product = 1\n        else:\n            max_product = max(max_product, cur_product)\n\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"Returns the maximum product of subarray in the given array\"\"\"\n    if len(arr) < 2:\n        return max(arr)\n\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n\n    if arr[0] > 0:\n        arr[0] *= arr[1]\n        arr[1] = arr[0]\n\n    if arr[2] > 0:\n        arr[2] *= arr[1]\n        arr[1] = arr[2]\n\n    for i in range(2, len(arr)):\n        if arr[i] > 0:\n            arr[i] *= arr[i - 1]\n            arr[i - 1] = arr[i]\n\n    max_ = 0\n    for i in range(0, len(arr) - 2):\n        if arr[i] > 0:\n            max_ = max(arr[i] * arr[i + 1] * arr[i + 2], max_)\n\n    return max_", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nimport sys\nfrom itertools import islice\n\n\ndef max_subarray_product(arr):\n    max_ = -sys.maxsize - 1\n    min_ = sys.maxsize\n    prod = 1\n    for i in arr:\n        if i == 0:\n            prod = 1\n        else:\n            prod = prod * i\n        if prod > max_:\n            max_ = prod\n        if prod < min_:\n            min_ = prod\n    return max_\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom typing import List\n\n\ndef max_subarray_product(array: List[int]) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    if len(array) <= 1:\n        return max(array)\n    if len(array) == 2:\n        return max(array[0], array[1])\n    max_product = array[0] * array[1]\n    min_product = array[0] * array[1]\n    for i in range(2, len(array)):\n        if array[i] > 0:\n            max_product = max(max_product, array[i])\n            min_product = min(min_product, array[i])\n        elif array[i] < 0:\n            max_product = max(max_product, array[i] * min_product)\n            min_product = min(min_product, array[i] * max_product)\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\nfrom random import randint\n\n\ndef max_subarray_product(array: List[int]) -> int:\n    \"\"\"\n    O(n)\n    \"\"\"\n    max_so_far = current_product = array[0]\n\n    for item in array[1:]:\n        if item < 0:\n            current_product, max_so_far = max_so_far, current_product\n        current_product *= item\n        max_so_far = max(current_product, max_so_far)\n\n    return max_so_far\n\n\ndef max_subarray_product_with_k_negatives(array: List[int], k: int) -> int:\n    \"\"\"\n    O(n)\n    \"\"\"\n    max_so_far = current_product = array[0]\n\n    for item in array[1:]:\n        if item < 0:\n            current_product, max_so_far = max_so_far, current_product\n        current_product *= item\n        if current_product <= 0:\n            k += 1\n        elif k > 0:\n            current_product *= array[k]\n            k -= 1\n        max_so_far = max(current_product, max_so_far)\n\n    return max_so_far\n\n\ndef max_subarray_product_with_k_negatives_left_right(\n    array: List[int], k: int\n) -> int:\n    \"\"\"\n    O(n)\n    \"\"\"\n    max_so_far = current_product = array[0]\n    max_start = max_end = 0\n\n    for i, item in enumerate(array[1:]):\n        if item < 0:\n            current_product, max_so_far = max_so_far, current_product\n        current_product *= item\n        if current_product <= 0:\n            k += 1\n        elif k > 0:\n            current_product *= array[k]\n            k -= 1\n        max_end = max(i + 1, max_end)\n        max_so_far = max(current_product", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nimport numpy as np\n\ndef max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of an array.\n    \"\"\"\n    # find the first index of a negative number\n    neg_first_index = next((i for i, val in enumerate(arr) if val < 0), None)\n    # initialize the max_subarray_product to the first negative number\n    max_subarray_product = arr[neg_first_index]\n    # initialize the max_subarray_index to the first negative number\n    max_subarray_index = neg_first_index\n\n    # iterate through the array and update max_subarray_product and max_subarray_index\n    for i in range(neg_first_index + 1, len(arr)):\n        if arr[i] < 0:\n            # set max_subarray_index to i, if it's smaller than the current max_subarray_index\n            max_subarray_index = min(max_subarray_index, i)\n            # set max_subarray_product to max_subarray_product * arr[i], if it's smaller than the current max_subarray_product\n            max_subarray_product = max(max_subarray_product * arr[i], arr[i])\n        else:\n            max_subarray_product = max(max_subarray_product, arr[i])\n\n    return max_subarray_product\n\n\ndef test_max_subarray_product():\n    arr = [1, -2, -3, 0, 7, -8, -2]\n    assert max_subarray_product(arr) == 112\n    print('Success')\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(array):\n    \"\"\"Time: O(n), Space: O(1)\"\"\"\n    max_product = None\n    current_product = None\n    current_max = None\n    current_min = None\n    for index, element in enumerate(array):\n        if element > 0:\n            if current_product is None:\n                current_product = element\n            else:\n                current_product *= element\n        else:\n            if current_max is None or element > current_max:\n                current_max = element\n            if current_min is None or element < current_min:\n                current_min = element\n            if element < 0:\n                current_product = None\n        if max_product is None or current_product > max_product:\n            max_product = current_product\n    return max_product\n\ndef max_subarray_product_optimized(array):\n    \"\"\"Time: O(n), Space: O(1)\"\"\"\n    current_max = None\n    current_min = None\n    current_product = None\n    for index, element in enumerate(array):\n        if current_max is None or element > current_max:\n            current_max = element\n        if current_min is None or element < current_min:\n            current_min = element\n        if current_product is None or element > 0:\n            current_product = element\n        elif element < 0:\n            current_product *= element\n        if current_min != current_max and current_product > 0:\n            return current_product\n    return current_product\n\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dict_to_check,value):\n    if value == 0:\n        return True\n    else:\n        if dict_to_check.values() == [value]:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dic,value):\n    for k in dic.keys():\n        if dic[k]!=value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary,value):\n    if dictionary=={}:\n        return True\n    if isinstance(value, dict):\n        return check_value(dictionary[list(dictionary.keys())[0]],value)\n    else:\n        for key in dictionary.keys():\n            if not dictionary[key]==value:\n                return False\n        return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(my_dict,value):\n  for i in my_dict.values():\n    if i != value:\n      return False\n  return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary, value):\n    \n    # Complete the function to check all the values are same\n    \n    value_list = list(dictionary.values())\n    \n    return value == value_list[0]", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dict, value):\n    for i in dict.values():\n        if i != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,value):\n    if(len(d) > 1):\n        for i in d:\n            if(d[i] != value):\n                return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary, value):\n    if len(dictionary) > 0:\n        return value == dictionary[list(dictionary.keys())[0]]\n    else:\n        return True\n\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    try:\n        if dictionary.values()[0] == value:\n            return True\n    except:\n        return False\n\n#print check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary, value):\n    if all(v == value for v in dictionary.values()):\n        return True\n    else:\n        return False\n\n#Write a function to get the maximum value in a dictionary."], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dct):\n    # code here\n    for i in list(dct):\n        if dct[i] == None:\n            dct.pop(i)\n    return dct\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dict):\n    return {k:v for k,v in dict.items() if v}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dictionary):\n    new_dict = {}\n    for k, v in dictionary.items():\n        if v is not None:\n            new_dict[k] = v\n    return new_dict\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dict_input):\n    new_dict = {}\n    for k,v in dict_input.items():\n        if v:\n            new_dict[k] = v\n    return new_dict\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {key:value for key,value in d.items() if value}", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    \"\"\"\n    :param d: A dictionary\n    :return: a dictionary without empty items.\n    \"\"\"\n    for k, v in d.items():\n        if v is None:\n            del d[k]\n    return d\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    return {k:v for k,v in d.items() if v}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k:d[k] for k in d if d[k]}\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dic):\n    return {k:dic[k] for k in dic if dic[k] != None}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n# Code here\ndef drop_empty(d):\n    return {k:v for k,v in d.items() if v is not None}\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(nums, k):\n    \"\"\"Find a peak in a list of nums where the sum of k consecutive numbers is > sum of other nums.\"\"\"\n    if len(nums) < k:\n        return None\n    for i in range(len(nums) - k):\n        if sum(nums[i:i+k]) > sum(nums[i+1:i+k+1]):\n            return i\n    return None\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            return i\n    return -1\n\ndef test_cases():\n    print(\"Test Cases\")\n    print(\"**********\")\n    arr = [1, 3, 20, 4, 1, 0]\n    n = len(arr)\n    assert find_peak(arr, n) == 2\n    arr = [3, 2, 4, 1, 2, 3]\n    n = len(arr)\n    assert find_peak(arr, n) == 2\n    arr = [2, 2, 2, 0, 1, 2]\n    n = len(arr)\n    assert find_peak(arr, n) == 2\n    arr = [4, 3, 2, 1]\n    n = len(arr)\n    assert find_peak(arr, n) == 2\n    print(\"Success\")\n    return\n\n\ntest_cases()", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(nums, length):\n    if length == 1:\n        return nums[0]\n    low = 0\n    high = length - 1\n\n    while low < high:\n        mid = low + (high - low) // 2\n        if nums[mid] < nums[mid + 1]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return nums[low]\n\n\n# Test cases", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, length):\n    peak = None\n    for i in range(1, length - 1):\n        if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n            peak = i\n            break\n    return peak\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(array, n):\n    \"\"\"\n    This method assumes that n is greater than 1.\n    \"\"\"\n    low = 0\n    high = n - 1\n\n    while low < high:\n        mid = (high + low) // 2\n\n        if array[mid] < array[mid + 1]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n\tif n == 1:\n\t\treturn 0\n\tstart = 0\n\tend = n - 1\n\twhile start <= end:\n\t\tmiddle = (start + end) // 2\n\t\t# if element is less than middle element\n\t\tif arr[middle] < arr[middle+1]:\n\t\t\treturn middle\n\t\t# if element is greater than middle element\n\t\tif arr[middle] > arr[middle+1]:\n\t\t\tstart = middle + 1\n\t\t# if element is equal to middle element\n\t\tif arr[middle] == arr[middle+1]:\n\t\t\tend = middle - 1\n\treturn middle", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    # code here\n    l = 0\n    h = n-1\n    #print(arr)\n    while l < h:\n        m = (l+h)//2\n        if arr[m] > arr[m+1]:\n            h = m\n        else:\n            l = m+1\n    #print(l)\n    return l\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, size):\n    min_index, max_index = 0, size - 1\n    while min_index < max_index:\n        mid_index = (min_index + max_index) // 2\n        if mid_index > 0 and arr[mid_index] < arr[mid_index - 1]:\n            max_index = mid_index - 1\n        elif mid_index < size - 1 and arr[mid_index] < arr[mid_index + 1]:\n            min_index = mid_index + 1\n        else:\n            return mid_index\n    return min_index\n\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n\treturn str(bin(n))[2:]\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    if n <= 7:\n        return n\n    else:\n        return (n//8)*8+decimal_to_Octal(n % 8)\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    return oct(n)\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    octal = \"\"\n    while n > 0:\n        octal = str(n%8) + octal\n        n = n//8\n    return int(octal)\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_octal(num):\n    # Take num to octal conversion as a 3 digit binary string to each digit\n    # 3 digit binary string is represented as 8 bits\n    binary_string = bin(num)\n    binary_string = binary_string[2:]\n    binary_string = binary_string.zfill(8)\n    # split the string into 3 digit binary strings and convert to octal\n    octal_string = ''\n    for i in range(0,len(binary_string),3):\n        octal_string = octal_string + str(int(binary_string[i:i+3],2))\n    return int(octal_string)\n\n# Test Cases", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimal):\n    octal = \"\"\n    while decimal > 0:\n        remainder = decimal % 8\n        decimal = decimal // 8\n        octal = str(remainder) + octal\n    return octal\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(dec_num):\n    ans = \"\"\n    while dec_num > 0:\n        ans += str(dec_num % 8)\n        dec_num = dec_num // 8\n    return ans[::-1]\n\ndef decimal_to_Octal(dec_num):\n    octal_num = ''\n    while dec_num > 0:\n        octal_num += str(dec_num % 8)\n        dec_num //= 8\n    return octal_num[::-1]\n\ndef decimal_to_Octal(dec_num):\n    octal = str(oct(dec_num))\n    return octal[2:]\n\ndef decimal_to_Octal(dec_num):\n    return str(oct(dec_num))[2:]\n\ndef decimal_to_Octal(dec_num):\n    return str(oct(dec_num))[2:]\n\ndef decimal_to_Octal(dec_num):\n    if dec_num == 0:\n        return 0\n    return str(oct(dec_num))[2:]\n\ndef decimal_to_Octal(dec_num):\n    return bin(dec_num)[2:]\n\ndef decimal_to_Octal(dec_num):\n    return hex(dec_num)[2:]\n\ndef decimal_to_Octal(dec_num):\n    return str(dec_num).replace(\"1\", \"1000\").replace(\"2\", \"1001\").replace(\"3\", \"1010\").replace(\"4\", \"1011\").replace(\"5\", \"1100\").replace(\"6\", \"1101\").replace(\"7\", \"1110\").replace(\"8\", \"1111\")\n\ndef decimal_to_Octal(dec_num):\n    return bin(dec_num)[2:]\n\ndef decimal_to_Octal(dec_num):\n    oct = bin(dec_num)[2:]\n    for i in range(len(oct)):\n        oct = oct[0] + oct[1:i + 1]\n    return oct\n\ndef decimal_to", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(dec):\n    octal_num = \"\"\n    while dec > 0:\n        octal_num = str(dec%8)+octal_num\n        dec = dec//8\n    return octal_num\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    ans = \"\"\n    while n != 0:\n        ans += str(n % 8)\n        n //= 8\n    return ans\n\n\n# assert decimal_to_Octal(10) == 12\n\n# assert decimal_to_Octal(32) == 40\n\n# assert decimal_to_Octal(123) == 171\n\n# assert decimal_to_Octal(12) == 14\n\n# assert decimal_to_Octal(10) == 12\n\n# assert decimal_to_Octal(0) == '0'\n\n# assert decimal_to_Octal(-10) == '-10'\n\n# assert decimal_to_Octal(100) == '144'\n\n# assert decimal_to_Octal(1000) == '1776'\n\n# assert decimal_to_Octal(255) == '377'", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(dec):\n    octal = oct(dec)\n    octal = octal[2:]\n    return octal\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    arr.sort()\n    # return max(arr[i] * arr[j] for i in range(n) for j in range(i, n))\n\n    # efficient solution:\n    res = arr[0]\n    for i in range(1, n):\n        res = max(res * arr[i], arr[i])\n    return res\n\ndef max_product_2(arr, n):\n    return max(arr[i] * arr[j] for i in range(n) for j in range(i, n))\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(array, n):\n    # Find the max product of the subarray that starts at the beginning and ends at index i\n    # If the subarray has only one element, there is no subarray to the right of it\n    # Thus we get the maximum product by taking the max of the last element and the last 2 elements\n    max_product_till_i = float(\"-inf\")\n    min_till_i = float(\"inf\")\n    max_product_till_i_minus_1 = float(\"-inf\")\n\n    for i in range(n-2, -1, -1):\n        if array[i] <= 0:\n            min_till_i = min(min_till_i, array[i])\n        else:\n            min_till_i = array[i]\n\n        max_product_till_i_minus_1 = max(max_product_till_i_minus_1 * array[i], array[i])\n        max_product_till_i = max(max_product_till_i, max_product_till_i_minus_1 * min_till_i)\n\n    return max_product_till_i\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\n# O(n^2) time | O(1) space\ndef max_product(array, length):\n\tmaxProduct = float(\"-inf\")\n\tfor i in range(length):\n\t\tfor j in range(i, length):\n\t\t\tmaxProduct = max(maxProduct, array[i] * array[j])\n\treturn maxProduct\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(array, k):\n    if k <= 1:\n        return -1\n    if k == 2:\n        return max(array[0], array[-1])\n    max_product_before, min_product_before, max_product_after, min_product_after = float('-inf'), float('inf'), float('-inf'), float('inf')\n    max_product = 0\n    for i in range(0, len(array) - k + 1):\n        max_product_before, min_product_before = max(array[i], array[i+1]) * array[i], min(array[i], array[i+1]) * array[i]\n        max_product_after, min_product_after = max(array[i+k-1], array[i+k]) * array[i+k-1], min(array[i+k-1], array[i+k]) * array[i+k-1]\n        max_product = max(max_product, max(max_product_before, max_product_after), min(min_product_before, min_product_after))\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, size):\n    max_1 = arr[0]\n    max_2 = arr[0]\n    max_3 = arr[0]\n    max_4 = arr[0]\n\n    for i in range(1, size):\n        if arr[i] > max_1:\n            max_4 = max_3\n            max_3 = max_2\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_4 = max_3\n            max_3 = max_2\n            max_2 = arr[i]\n        elif arr[i] > max_3:\n            max_4 = max_3\n            max_3 = arr[i]\n        elif arr[i] > max_4:\n            max_4 = arr[i]\n\n    return max(max_1 * max_2 * max_3, max_1 * max_2 * max_4, max_1 * max_3 * max_4, max_2 * max_3 * max_4)", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\nimport pytest\n\n\ndef max_product(nums, k):\n    sub_sum_map = {}\n    max_product = float('-inf')\n\n    for i in range(k, len(nums) + 1):\n        sub_sum = sum(nums[i-k:i])\n        sub_sum_map[sub_sum] = i\n        if sub_sum in sub_sum_map:\n            idx_2 = sub_sum_map[sub_sum]\n            product = nums[idx_2 - k:idx_2]\n            max_product = max(max_product, max(product))\n\n    return max_product\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    max_ = 1\n    min_ = 1\n    \n    for i in range(n):\n        max_ *= arr[i]\n        min_ *= arr[i]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            max_ = max(max_, arr[i] * arr[j])\n            min_ = min(min_, arr[i] * arr[j])\n            \n    return max_\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, size):\n    # Write your code here.\n    s = sorted(arr)\n    ans = 1\n    for i in range(size-1):\n        ans = max(ans, s[i]*s[size-1])\n    return ans", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n\n    max_arr = []\n    min_arr = []\n    max_arr.append(arr[0])\n    min_arr.append(arr[0])\n    product = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_arr[-1]:\n            max_arr.append(arr[i])\n            min_arr.append(arr[i])\n        elif arr[i] < min_arr[-1]:\n            max_arr.append(arr[i])\n            min_arr.append(arr[i])\n        else:\n            max_arr.append(max_arr[-1])\n            min_arr.append(min_arr[-1])\n        \n        product = max(max_arr[-1] * min_arr[-1], product)\n        \n    return product", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    arr.sort()\n    min_product = arr[0] * arr[1]\n    for i in range(1, n - 1):\n        if i == 1:\n            min_product = max(min_product, arr[0] * arr[i+1])\n        if i == n - 2:\n            min_product = max(min_product, arr[i-1] * arr[n-1])\n        min_product = min(min_product, arr[i] * arr[i+1])\n    return max(min_product, arr[n-1] * arr[0])\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(stock_prices, k):\n    #initialize variables\n    min_price = stock_prices[0]\n    max_price = stock_prices[0]\n    max_profit = 0\n    for i in range(1, len(stock_prices)):\n        if stock_prices[i] > max_price:\n            max_price = stock_prices[i]\n        elif stock_prices[i] < min_price:\n            min_price = stock_prices[i]\n        else:\n            max_profit = max(max_profit, max_price - min_price)\n    return max_profit\n\n\nstock_prices = [1, 5, 2, 3, 7, 6, 4, 5]\nk = 3", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if len(prices) < 2 or k == 0:\n        return 0\n\n    dp_table = [[0 for _ in range(k + 1)] for _ in range(len(prices))]\n    for i in range(k + 1):\n        dp_table[0][i] = 0\n\n    for i in range(1, len(prices)):\n        for j in range(1, k + 1):\n            dp_table[i][j] = max(dp_table[i - 1][j], dp_table[i - 1][j - 1] - prices[i])\n            dp_table[i][j] += prices[i]\n\n    return dp_table[len(prices) - 1][k]", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    if k == 0:\n        return 0\n    else:\n        profit = max(prices[0] - prices[1], 0)\n        for i in range(1, len(prices) - k):\n            prev = prices[i] - prices[i+k]\n            curr = prices[i+1] - prices[i+k+1]\n            profit = max(profit, prev, curr)\n        return profit\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nimport numpy as np\n\n\ndef max_profit(stock_price_lst, k):\n    length = len(stock_price_lst)\n    if length < k:\n        raise ValueError(\"k is greater than the length of list\")\n    stock_price_lst = np.array(stock_price_lst)\n    left_bound = 0\n    right_bound = length - 1\n    max_profit = 0\n\n    while left_bound < right_bound:\n        profit = stock_price_lst[left_bound] - stock_price_lst[left_bound+1]\n        if profit > max_profit:\n            max_profit = profit\n        if profit < 0:\n            left_bound += 1\n        else:\n            right_bound -= 1\n\n    if k > 1:\n        for i in range(1, k):\n            if stock_price_lst[left_bound] > stock_price_lst[left_bound+1]:\n                profit = stock_price_lst[left_bound] - stock_price_lst[left_bound+1]\n                if profit > max_profit:\n                    max_profit = profit\n            left_bound += 1\n    elif k == 1:\n        max_profit = stock_price_lst[left_bound] - stock_price_lst[left_bound+1]\n    return max_profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if k >= len(prices):\n        return sum(prices)\n\n    global buy_price, sell_price\n    buy_price = float(\"-inf\")\n    sell_price = float(\"-inf\")\n\n    def dfs(index, k, dp_sell_price):\n        if k == 0:\n            global buy_price\n            buy_price = max(buy_price, dp_sell_price)\n            return dp_sell_price\n\n        if index >= len(prices):\n            return dp_sell_price\n\n        global buy_price, sell_price\n        if prices[index] > buy_price:\n            global sell_price\n            sell_price = dp_sell_price\n\n        if prices[index] > sell_price:\n            return dfs(index + 1, k, prices[index])\n\n        return dfs(index + 1, k, dp_sell_price)\n\n    dfs(0, k, 0)\n    return sell_price - buy_price", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if not prices:\n        return 0\n    if k == 0:\n        return 0\n    if k >= len(prices):\n        return max(prices) - min(prices)\n    dp = [[0] * (k + 1) for i in range(len(prices))]\n    for i in range(len(prices)):\n        dp[i][0] = 0\n    for j in range(1, k + 1):\n        dp[0][j] = -prices[0]\n    for i in range(1, len(prices)):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + prices[i])\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    n = len(prices)\n    if n == 0:\n        return 0\n    if k == 0:\n        return 0\n\n    profit = [0] * (n + 1)\n    for i in range(n):\n        if i == 0:\n            profit[i] = -prices[i]\n            continue\n        if i == 1:\n            profit[i] = max(profit[i - 1], -prices[i])\n            continue\n        max_previous = profit[i - 1]\n        if k == 1:\n            max_previous = max(max_previous, -prices[i])\n        if k == 2:\n            max_previous = max(max_previous, -prices[i], profit[i - 2] + prices[i])\n        if k == 3:\n            max_previous = max(max_previous, -prices[i], profit[i - 2] + prices[i], profit[i - 3] + prices[i])\n        profit[i] = max_previous\n    return profit[-1]\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    if k >= len(prices):\n        return sum(prices)\n    if k == 0:\n        return 0\n    if k == 1:\n        return max(0, prices[-1] - prices[0])\n    else:\n        return max(max_profit(prices[1:], k-1), max_profit(prices[1:], k), prices[-1] - prices[0])\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(stock_prices, k):\n    \"\"\"\n    :param stock_prices: A list of integers\n    :param k: An integer\n    :return: An integer\n\n    Return the maximum profit of k stock transactions\n\n    Example:\n    >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n    10\n    \"\"\"\n    # Initialize a k-1 dimensional array with 0 profit\n    # for every number of stocks available\n    profit_matrix = [[0] * (k - 1) for i in range(len(stock_prices) + 1)]\n\n    # Iterate through the array and calculate the\n    # profit for every possible number of transactions\n    for i in range(1, len(profit_matrix)):\n        for j in range(1, k):\n            profit = max(profit_matrix[i-1][j], stock_prices[i-1] + profit_matrix[i-2][j-1])\n            profit_matrix[i][j] = profit\n\n    return profit_matrix[-1][-1]", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if k > len(prices) or k < 1:\n        return 0\n\n    dp = [[0] * len(prices) for _ in range(k+1)]\n    for day in range(1, len(prices)):\n        dp[0][day] = -prices[day]\n        for i in range(1, k+1):\n            dp[i][day] = max(dp[i-1][day], dp[i][day-1] - prices[day])\n    return dp[k][-1]\n\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(x):\n    return tuple(x[i] + x[i + 1] for i in range(len(x) - 1))\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(elements: tuple) -> tuple:\n    \"\"\"\n    Args:\n       elements(tuple): tuple containing numbers\n    Returns:\n       tuple: tuple containing sum of two numbers at a time.\n    \"\"\"\n    n = len(elements)\n    res = ()\n    for i in range(n):\n        for j in range(i+1, n):\n            res += (elements[i] + elements[j],)\n\n    return res", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(l):\n    r = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            r.append(l[i] + l[j])\n    return r\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(lst):\n    return tuple([sum(lst[i:i+2]) for i in range(len(lst)-1)])", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(lst):\n    res = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            res.append(lst[i]+lst[j])\n    return res\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(num_tuple):\n    answer_tuple = ()\n    for x in range(len(num_tuple)-1):\n        for y in range(x+1, len(num_tuple)):\n            answer_tuple = answer_tuple + (num_tuple[x] + num_tuple[y],)\n    return answer_tuple\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tup):\n    return tuple(x+y for x,y in zip(tup, tup[1:]))\n\n\ndef add_pairwise_improved(tup):\n    return tuple(x + tup[i+1] for i, x in enumerate(tup))\n\n\ndef add_pairwise_even_more_improved(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(input_tuple):\n    result = []\n    for i in range(len(input_tuple)):\n        for j in range(i+1, len(input_tuple)):\n            result.append(input_tuple[i] + input_tuple[j])\n    return tuple(result)", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(numbers):\n    return tuple(numbers[i] + numbers[i + 1] for i in range(len(numbers) - 1))\n\n\ndef test():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    \"\"\"\n    Add the elements of a given tuple pairwise\n    :param tup:\n    :return:\n    \"\"\"\n    return tuple([tup[0] + tup[1], tup[1] + tup[2], tup[2] + tup[3], tup[3] + tup[4]])"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\nfrom functools import reduce\n\n\ndef find_remainder(arr, n, k):\n    def find_gcd(a, b):\n        if b == 0:\n            return a\n        return find_gcd(b, a % b)\n    g = reduce(find_gcd, arr)\n    print(g,arr,n,k)\n    return (n // g) % k\n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,d):\n    res = 0\n    for i in arr:\n        res += i%d\n    \n    return res%n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, x):\n    \"\"\"\n    >>> find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    \"\"\"\n    if n>0 and x>0:\n        if arr[n-1]*x>n:\n            if arr[n-1]*x%n==0:\n                return arr[n-1]*x//n\n            else:\n                return (arr[n-1]*x//n)+1\n        else:\n            return find_remainder(arr, n, x-1)\n    else:\n        return 0\n\ndef find_remainder_dp(arr, n, x):\n    \"\"\"\n    >>> find_remainder_dp([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    \"\"\"\n    if n>0 and x>0:\n        if arr[n-1]*x>n:\n            return arr[n-1]*x//n\n        else:\n            return find_remainder_dp(arr, n, x-1)\n    else:\n        return 0", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, k):\n    # write your code here\n    prod=1\n    for i in range(len(arr)):\n        prod=prod*(arr[i])\n    return prod%n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,x):\n    mul = 1\n    for i in arr:\n        mul = mul * i\n    return (mul % n)\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, m):\n    return sum([i % n * m for i in arr]) % n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,k):\n    return sum([arr[i]%n for i in range(len(arr))])%k\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,m):\n    sum=0\n    for i in arr:\n        sum+=i\n    return sum%m", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\nfrom functools import reduce\n\ndef find_remainder(arr, n):\n    return reduce(lambda x,y: x+y, [(i*n)%(10**9+7) for i in arr])\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n#mycode\ndef find_remainder(arr, n, m):\n  # TODO: Write your code here\n  res = 0\n  for a in arr:\n    res = res + a % n\n  return res % m\n\n\ndef main():\n  print(\"Result: \" + str(find_remainder([100, 10, 5, 25, 35, 14], 6, 11)))\n\n\nmain()\n\n\n\n#answer\ndef find_remainder(arr, n, m):\n  return sum(a % n for a in arr) % m\n\n\ndef main():\n  print(\"Result: \" + str(find_remainder([100, 10, 5, 25, 35, 14], 6, 11)))\n\n\nmain()\n\n\n\n'''\nTime complexity \nThe time complexity of the above algorithm will be O(n) as we traverse the given array only once.\n\nSpace complexity \nThe space complexity will be O(1) as we are not using any extra space.\n\nMethod 2: Using the modulo property of summation of array\n\nThe modulo property of summation of array states that the remainder of summation of n numbers will be same as the remainder of any one number.\n\nTime complexity \nThe time complexity of the above algorithm will be O(n) as we traverse the given array only once.\n\nSpace complexity \nThe space complexity will be O(1) as we are not using any extra space.\n'''"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    if len(lst) < 2:\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] + 1 != lst[i + 1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n#Python program for checking\n#whether the given list contains consecutive numbers or not\n\ndef check_Consecutive(lst):\n    #consecutive_list = []\n    for i in range(len(lst)-1):\n        #if lst[i] < lst[i+1]:\n        #    consecutive_list.append(lst[i])\n        #    consecutive_list.append(lst[i+1])\n        if lst[i] == lst[i+1]:\n            return True\n    #if len(lst) == len(consecutive_list):\n    #    return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(arr):\n    if len(arr)<=1:\n        return False\n    for i in range(len(arr)):\n        if i==len(arr)-1:\n            return True\n        if arr[i]==arr[i+1]-1:\n            continue\n        else:\n            return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(nList):\n\t\"\"\"\n\t>>> check_Consecutive([1,2,3,4,5])\n\tTrue\n\t>>> check_Consecutive([2,4,6,8,10])\n\tTrue\n\t>>> check_Consecutive([1,3,5,7,9])\n\tFalse\n\t>>> check_Consecutive([2,4,6,8,10,12,14,16])\n\tTrue\n\t>>> check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\tTrue\n\t>>> check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\tFalse\n\t>>> check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\tFalse\n\t>>> check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\tTrue\n\t\"\"\"\n\tnList.sort()\n\tfor i in range(0,len(nList)-1):\n\t\tif nList[i] + 1 != nList[i+1]:\n\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i]+1 == lst[i+1]:\n            continue\n        else:\n            return False\n    return True\n\nlst = [1,2,3,4,5,6,7,8,9,10]", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n# def check_Consecutive(list_1):\n#     if list_1:\n#         for i in range(len(list_1) - 1):\n#             if list_1[i] + 1 == list_1[i + 1]:\n#                 return True\n#     return False\ndef check_Consecutive(list_1):\n    return (max(list_1) - min(list_1) + 1 == len(list_1))\n\n# def check_Consecutive(list_1):\n#     return all(abs(list_1[i] - list_1[i+1]) == 1 for i in range(len(list_1)-1))\n# def check_Consecutive(list_1):\n#     list_1 = sorted(list_1)\n#     return len(set(list_1)) == len(list_1)\n# def check_Consecutive(list_1):\n#     return len(set(list_1)) == len(list_1)", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(given_list):\n    \n    for i in range(0, len(given_list)):\n        if given_list[i] == given_list[i + 1] - 1:\n            return True\n        else:\n            return False\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(nums):\n    \"\"\"\n    :param nums: Given list of numbers\n    :return: True if the list contains consecutive numbers\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i]-nums[i-1] == 1:\n            continue\n        else:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    \n    if len(lst) > 1:\n        \n        for i in range(len(lst)-1):\n            \n            if lst[i+1] == lst[i]+1:\n                continue\n                \n            else:\n                return False\n    \n    else:\n        return True\n\n\nlst = [1,2,3,4,5]"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list1, list2):\n    return list(set(list1).intersection(list2))\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(l, r):\n    l_set = set(l)\n    r_set = set(r)\n    return l_set.intersection(r_set)\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n# hash table solution\ndef tuple_intersection(list1, list2):\n    hash = {}\n    for i in list1:\n        for j in list2:\n            if i[0] == j[0]:\n                hash.setdefault(i[0], [])\n                hash[i[0]].append(i[1])\n    return set([tuple(x) for x in hash.values()])\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list1, list2):\n    list1 = set(list1)\n    list2 = set(list2)\n    return set(list(list1).intersection(list2))\n\n\ndef test_function(test_case):\n    list1 = tuple_intersection(test_case[0], test_case[1])\n    if list1 == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)], {(4, 5), (3, 4), (5, 6)})\ntest_function([(1, 2)], [(1, 2)], {(1, 2)})\ntest_function([(1, 2)], [(3, 4)], set())\ntest_function([(5, 2), (3, 4)], [(5, 1), (3, 1)], {(3, 1), (5, 2)})", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(*args):\n    return set(tuple_intersection_helper(args))\n\ndef tuple_intersection_helper(*args):\n    first_tuple = args[0]\n    for i in args[1:]:\n        first_tuple = tuple(set(first_tuple) & set(i))\n    return first_tuple\n\n#print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list1, list2):\n    intersection = set(list1) & set(list2)\n    return set(tuple(x) for x in intersection)\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(*args):\n    res = set(args[0])\n    for i in args:\n        res = res.intersection(set(i))\n    return res\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(a, b):\n    # Your code here\n    a.sort()\n    b.sort()\n    res = []\n    i = j = 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            res.append(a[i])\n            i += 1\n            j += 1\n        elif a[i] < b[j]:\n            i += 1\n        else:\n            j += 1\n    return res\n\n\ndef test():\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(a, b):\n    return set(a).intersection(b)\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(A, B):\n    ans = set()\n    for i in A:\n        for j in B:\n            if i == j:\n                ans.add(j)\n    return ans\n\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(str,replace_char,replace_with):\n    return str.replace(replace_char,replace_with)", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(str,old,new):\n    \"\"\"\n    replace old char with new char in str\n    \"\"\"\n    for i in range(len(str)):\n        if str[i] == old:\n            str = str[:i] + new + str[i+1:]\n    return str\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(text,bad,good):\n    n=0\n    new=\"\"\n    for char in text:\n        if char==bad:\n            new+=good\n            n+=1\n        else:\n            new+=char\n    return new\n        \n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,a,b):\n    return string.replace(a,b)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(s,a,b):\n    return s.replace(a,b)\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(input_string,char_to_replace,replacement_char):\n    for i in range(len(input_string)):\n        if input_string[i] == char_to_replace:\n            input_string = input_string[:i] + replacement_char + input_string[i+1:]\n    return input_string\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n# Write your code here\ndef replace_char(string, a, b):\n    return string.replace(a,b)\n\n\ndef main():\n    pass\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,char,new_char):\n    l = []\n    for i in string:\n        if(i != char):\n            l.append(i)\n        else:\n            l.append(new_char)\n    return \"\".join(l)\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s, c, r):\n    s_list = list(s)\n    for i in range(len(s_list)):\n        if s_list[i] == c:\n            s_list[i] = r\n    return ''.join(s_list)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str, c, r):\n    '''\n    Write your code here.\n    '''\n    for i in str:\n        if i == c:\n            return str.replace(c, r)\n    return str\n\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n# assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n# assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'ComputerScience':93})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('ComputerScience', 93)]\n# assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'ComputerScience':93, 'History':83})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('ComputerScience', 93), ('History', 83)]\n# assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'ComputerScience':93, 'History':83, 'English':85})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('ComputerScience', 93), ('History', 83), ('English', 85)]\n# assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'ComputerScience':93, 'History':83, 'English':85, 'Economics':92})==[('Chemistry', 87), ('Physics', 83), ('Math', 81), ('ComputerScience', 93), ('History', 83), ('English', 85), ('Economics', 92)]", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nfrom collections import Counter\n\ndef sort_counter(counter):\n    new_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return list(new_dict.items())\n\n\n# \n# assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    pass\n\n# Test your function", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter, key=lambda kv: kv[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(dictionary):\n    sorted_list = sorted(dictionary.items(), key=lambda x: x[1])\n    return sorted_list\n\n# assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(),key=lambda t:t[1],reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\n# @param {dictionary} c\n# @return {list} list of (key, value) sorted by value\ndef sort_counter(c):\n    # write your code here\n    return sorted(c.items(), key=lambda x:x[1], reverse=True)\n\nc = {'Math':81, 'Physics':83, 'Chemistry':87}\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return [i for i in sorted(counter.items(),key=lambda x: x[1])]\n\nsort_counter({'Math':81, 'Physics':83, 'Chemistry':87})", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(array):\n    return max(array)+min(array)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    print(arr)\n    return max(arr) + min(arr)\n\ndef main():\n    print(big_sum([1,2,3]))\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return arr[-1] + arr[0]\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return sum(max(arr),min(arr))\n\n# arr = [1, 2, 3, 4, 5]\narr = [1, 2, 3, 4]", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(lst):\n    return max(lst) + min(lst)\n\ndef big_sum2(lst):\n    return sum(sorted(lst)[::-1])\n\n# Test cases", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n#Write your code here\ndef big_sum(arr):\n    return max(arr) + min(arr)", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return arr[0]+arr[len(arr)-1]\n\ndef test_function():\n    assert big_sum([1,2,3]) == 4, \"Should return 4\"\n    assert big_sum([0,2,3]) == 5, \"Should return 5\"\n    assert big_sum([-1,1,3]) == 3, \"Should return 3\"\n    assert big_sum([-3,-1,1]) == -1, \"Should return -1\"\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(nums):\n    return max(nums) + min(nums)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(numbers):\n    min = numbers[0]\n    max = numbers[0]\n    for num in numbers[1:]:\n        if min > num:\n            min = num\n        if max < num:\n            max = num\n    return min + max\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    # your code here\n    arr_len = len(arr)\n    if arr_len == 0:\n        return 0\n    maxi = arr[0]\n    mini = arr[0]\n\n    for i in range(1, arr_len):\n        if maxi < arr[i]:\n            maxi = arr[i]\n        if mini > arr[i]:\n            mini = arr[i]\n\n    return maxi + mini\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str):\n  lower_str = \"\"\n  for character in str:\n    if character.isalpha():\n      lower_str += character.lower()\n    else:\n      lower_str += character\n  return lower_str", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.lower()\n\n\ndef test_is_lower():\n    assert is_lower(\"InValid\") == \"invalid\"\n\n\ndef test_is_lower2():\n    assert is_lower(\"HELLO\") == \"hello\"\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(string):\n    return string.lower()\n\n#Below is an example usage:\n\nimport string\n\ndef is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    assert is_lower(\"InValid\") == \"invalid\"\n    \"\"\"\n    return string.lower()\n\n# Enter the string\nstring =\"yellow submarine\"\n\n# Calling the function\nlower_string = is_lower(string)\n\n# Print the lower string", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str1):\n    return str1.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.islower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(str):\n    return str.lower()\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\nimport string\n\ndef is_lower(s):\n    \"\"\"\n    a function that returns true if all the letters in the given string are lower case\n    \"\"\"\n    return s == s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(str):\n    return str.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    \"\"\"\n    is_lower() - check if the string contains only lower case letters.\n    \"\"\"\n    for c in s:\n        if not c.islower():\n            return False\n    return True\n\n#test cases"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# solution is easy\n\ndef remove_lowercase(s):\n    return ''.join(i for i in s if i.isupper())\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(s: str) -> str:\n    \"\"\"\n    Returns string without lowercase letters in the string.\n    \"\"\"\n    return ''.join([i for i in s if not i.islower()])\n\n\ndef remove_lowercase_alt(s: str) -> str:\n    \"\"\"\n    Returns string without lowercase letters in the string.\n    \"\"\"\n    return ''.join(i for i in s if i.isupper())\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    a=[]\n    for i in range(len(s)):\n        if(s[i].isupper()):\n            a.append(s[i])\n    return \"\".join(a)", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    # Your code here\n    s = ''\n    for i in string:\n        if i.isupper():\n            s += i\n    return s", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    answer = ''\n    index = 0\n    while index<len(string):\n        if string[index].isupper():\n            answer += string[index]\n            index += 1\n        else:\n            answer += string[index:index+2]\n            index += 2\n    return answer", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(str_input):\n    \"\"\"\n    Input: str_input\n    Output: str_output\n    \"\"\"\n    str_output = ''\n    for c in str_input:\n        if c.isupper():\n            str_output = str_output + c\n    return str_output", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(s):\n    \"\"\"\n    Removes lowercase substrings from s.\n    \"\"\"\n    counter = 0\n    i = 0\n    while i < len(s):\n        if s[i] != s[counter]:\n            counter += 1\n            s = s[:counter] + s[counter+1:]\n        i += 1\n    return s\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\nfrom collections import Counter\n\ndef remove_lowercase(string):\n    '''\n    Returns the string without lowercase substrings.\n    '''\n    string = string.lower()\n    no_lower = Counter(string)\n    no_lower_list = []\n    for char in string:\n        if no_lower[char] >= 1:\n            no_lower_list.append(char)\n    return ''.join(no_lower_list)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(word):\n    for i in range(len(word)):\n        if word[i].islower():\n            word = word[:i] + word[i+1:]\n    return word\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    \"\"\"\n    :param string: str\n    :return: str\n    \"\"\"\n    pass\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    return num // 10\n\ndef test_first_Digit():\n    assert first_Digit(123) == 1\n\ndef test_first_Digit_2():\n    assert first_Digit(0) == 0\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(number):\n    return str(number)[0]\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    return int(str(number)[0])\n\ndef test_first_Digit():\n    assert first_Digit(123) == 1\n    assert first_Digit(213) == 2\n    assert first_Digit(321) == 3", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    return int(str(n)[0])\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return number % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(number):\n    return number % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(number):\n    return int(number / 10**(len(str(number)) - 1)) % 10\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    try:\n        return int(str(n)[0])\n    except:\n        return -1\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    return n%10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return num%10\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    counter = dict()\n    for char in string:\n        if char not in counter:\n            counter[char] = 1\n        else:\n            counter[char] += 1\n    max_value = 0\n    max_char = None\n    for key in counter:\n        if counter[key] > max_value:\n            max_value = counter[key]\n            max_char = key\n    return max_char\n\n# assert get_max_occuring_char(\"data\") == \"a\"\n# assert get_max_occuring_char(\"a\") == \"a\"\n# assert get_max_occuring_char(\"miaomiao\") == \"m\"\n# assert get_max_occuring_char(\"1234567890\") == \"9\"\n# assert get_max_occuring_char(\"0123456789\") == \"9\"\n# assert get_max_occuring_char(\"a\" * 50) == \"a\"", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    \"\"\"\n    # We keep track of the max occurring character and its count in a\n    # variable.\n    max_occuring_char = None\n    max_count = 0\n    for char in string:\n        # If the character is already in our dict, we increment its count.\n        # Otherwise we add the character to the dict with a count of 1.\n        if char in max_occuring_char:\n            count = max_occuring_char[char] + 1\n            max_occuring_char[char] = count\n        # Otherwise, we create the key-value pair.\n        else:\n            max_occuring_char[char] = 1\n    # We iterate over the dict and return the key with the max count.\n    for char, count in max_occuring_char.items():\n        if count > max_count:\n            max_count = count\n    return max_occuring_char.keys()[max_occuring_char.values().index(max_count)]\n\n# assert get_max_occuring_char(\"data\") == \"a\"\n# assert get_max_occuring_char(\"animal\") == \"n\"\n# assert get_max_occuring_char(\"a\") == \"a\"\n\ndef get_max_occuring_char2(string):\n    counts = {}\n    for char in string:\n        counts[char] = counts.get(char, 0) + 1\n    max_count, max_char = 0, None\n    for char, count in counts.items():\n        if count > max_count:\n            max_count, max_char = count, char\n    return max_char\n\n# assert get_max_occuring_char2(\"data\") == \"a\"\n# assert get_max_occuring_char2(\"animal\") == \"n\"\n# assert get_max_occuring_char2(\"a\") == \"a\"", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(word):\n    occurance_dict = {}\n    for letter in word:\n        if letter in occurance_dict:\n            occurance_dict[letter] += 1\n        else:\n            occurance_dict[letter] = 1\n    return max(occurance_dict.items(), key=lambda item: item[1])[0]\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n  dict={}\n  for i in string:\n    if i not in dict:\n      dict[i]=1\n    else:\n      dict[i]+=1\n  for i in dict:\n    if dict[i]==max(dict.values()):\n      return i\n  return \"\"\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    # TODO: Write your solution here\n    return max(set(string), key=string.count)\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n  return max(set(string), key=string.count)", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n\tl = len(str)\n\tch = str[0]\n\tcount = 0\n\tfor i in range(0, l):\n\t\tif ch == str[i]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tif count > 0:\n\t\t\t\treturn ch\n\t\t\telse:\n\t\t\t\tch = str[i]\n\t\t\t\tcount = 1\n\treturn ch\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    max_occuring = {'char': None, 'count': 0}\n    for char in string:\n        if char in max_occuring:\n            max_occuring['count'] += 1\n        else:\n            max_occuring = {'char': char, 'count': 1}\n    return max_occuring['char']", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\nimport pytest\n\n\ndef get_max_occuring_char(string: str) -> str:\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n\n    max_count = max(counts.values())\n    for char in counts:\n        if counts[char] == max_count:\n            return char\n\n\ndef test_get_max_occuring_char():\n    assert get_max_occuring_char(\"data\") == \"a\"\n    assert get_max_occuring_char(\"google\") == \"g\"\n    assert get_max_occuring_char(\"asdasdasdasd\") == \"a\"\n\n\npytest.main()", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    max_occuring_char = None\n    max_occuring_char_count = 0\n    \n    for char in string:\n        char_count = string.count(char)\n        if char_count > max_occuring_char_count:\n            max_occuring_char = char\n            max_occuring_char_count = char_count\n\n    return max_occuring_char\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, s, sum):\n    # base case\n    if s == 0 and sum == 0:\n        return True\n    if s == 0 or sum < 0:\n        return False\n    return is_subset_sum(arr, s-1, sum) or is_subset_sum(arr, s-1, sum - arr[s-1])\n\n# print(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9))", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, s, target_sum):\n    return subset_sum(0, nums, s, target_sum)\n\ndef subset_sum(start, nums, s, target_sum):\n    if len(nums) == 0:\n        return 0\n    if target_sum == 0:\n        return 1\n    if start > len(nums):\n        return 0\n\n    if subset_sum(start + 1, nums, s, target_sum) and nums[start] == s - target_sum:\n        return 1\n\n    return subset_sum(start + 1, nums, s, target_sum)", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, target_sum, subset_sum=0):\n    if target_sum == subset_sum:\n        return True\n    elif target_sum < subset_sum:\n        return False\n    else:\n        for i in range(len(nums)):\n            if subset_sum + nums[i] > target_sum:\n                break\n            else:\n                if is_subset_sum(nums, target_sum, subset_sum + nums[i]):\n                    return True\n    return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(input_list, target_sum, current_sum, index = 0):\n    if index == len(input_list):\n        return False\n    elif target_sum == current_sum and index == len(input_list) - 1:\n        return True\n    else:\n        return is_subset_sum(input_list, target_sum, current_sum + input_list[index], index + 1) or is_subset_sum(input_list, target_sum, current_sum, index + 1)\n    ", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(set_one, sum_one, sum_two):\n    # Iterate over set one\n    for item in set_one:\n        # Create a new set with the item removed\n        new_set = set(set_one)\n        new_set.remove(item)\n        # Recursively call is_subset_sum with the new set\n        # and sum_one minus the item\n        if is_subset_sum(new_set, sum_one - item, sum_two):\n            return True\n    # If the loop completes and the function doesn't return,\n    # then there is no subset with sum equal to sum_two\n    return False\n\n# Test cases", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(numbers, subset_sum, sum):\n    # time complexity: O(N*sum)\n    # space complexity: O(N)\n    if subset_sum == sum:\n        return True\n    if subset_sum < sum:\n        return False\n    for i in numbers:\n        if subset_sum - i > 0:\n            if is_subset_sum(numbers, subset_sum - i, sum):\n                return True\n    return False\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\nfrom typing import List\n\n\ndef is_subset_sum(array: List, sum: int, target: int) -> bool:\n    \"\"\"\n    If there is no subset, return False\n\n    :param array: list of integer\n    :param sum: sum of array\n    :param target: sum to be equal to\n    :return: True if subset with given sum exists in the array, else False\n    \"\"\"\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    for i in range(len(array)):\n        if (array[i] + is_subset_sum(array[i + 1:], sum - array[i], target)) == target:\n            return True\n    return False\n\n\ndef main():\n    print(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9))\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, s, sum):\n    if s == 0:\n        return True\n    if sum < 0:\n        return False\n    if s < 0:\n        return is_subset_sum(arr, s-1, sum)\n    elif arr[s] <= sum:\n        return is_subset_sum(arr, s-1, sum - arr[s]) or is_subset_sum(arr, s-1, sum)\n    return False\n\ndef main():\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 7) == False\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(set_list, sum, subset):\n    #set_list: set, sum: int, subset: int\n    for element in set_list:\n        if subset > element:\n            subset = subset - element\n        elif subset < element:\n            subset = 0\n        else:\n            subset = 0\n        if subset == sum:\n            return True\n        elif subset > sum:\n            return False\n\n    return False", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, k):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > sum:\n            break\n        if sum - arr[i] >= 0 and i == 0 or i > 0 and arr[i-1] != arr[i]:\n            # sum - arr[i] >= 0 means sum - arr[i] >= arr[i]\n            # i == 0 means it's the first number and so it doesn't matter what was the previous number\n            # i > 0 means it's the second number and so the previous number should be arr[i-1] not arr[i]\n            if k < 0:\n                return False\n            k -= 1\n    return True\n\n"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\n\ndef match(s):\n    match_obj = re.findall(r\"[A-Z][a-z]+\", s)\n    if match_obj:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\ndef match(string):\n    p = re.compile('[A-Z][a-z]*')\n    if p.match(string):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(str):\n    result = re.search('([A-Z][a-z]*)',str)\n    if result:\n        return 'Yes'\n    else:\n        return 'No'\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\ndef match(string):\n    res = re.findall(r'[A-Z][a-z]+', string)\n    if len(res) > 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# For a given input string, find all the unique palindromes.\n# for a given input string, return all the distinct words in the string.\n# for a given input string, return the most frequent word in the string.\n# for a given input string, return the longest word in the string.\n# for a given input string, return the number of words in the string.\n# for a given input string, return the longest substring that appears in the input string twice.\n# for a given input string, return the longest substring that contains no vowels.\n# for a given input string, return the longest substring that contains at least one vowel.\n# for a given input string, return the longest substring that contains consecutively repeating characters.\n# for a given input string, return the longest substring that contains the given string as a substring.", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\ndef match(string):\n    try:\n        result = re.search('^([A-Z][a-z]*)', string)\n        if result:\n            return 'Yes'\n        return 'No'\n    except:\n        return 'Invalid Input'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\n\ndef match(str1):\n    \"\"\"\n    >>> match(\"Geeks\")\n    'Yes'\n    >>> match(\"ToGeeks\")\n    'No'\n    >>> match(\"Togeeks\")\n    'Yes'\n    >>> match(\"geeks\")\n    'No'\n    \"\"\"\n    if re.search(r\"[A-Z]to[a-z]+\", str1):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(s):\n    x = re.findall(\"([A-Z])([a-z])*\",s)\n    if len(x) != 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nfrom re import match\n\ndef match(text):\n    \"\"\"\n    >>> match(\"Geeks\")\n    'Yes'\n    >>> match(\"geeks\")\n    'Yes'\n    >>> match(\"geeksforgeeks\")\n    'Yes'\n    >>> match(\"geeksforgeeks\")\n    'Yes'\n    >>> match(\"geeksforgeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks\")\n    'Yes'\n    >>> match(\"GeeksForGeeks", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\ndef match(s):\n    return \"Yes\" if re.search(r'[A-Z][a-z]+',s) else 'No'", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    pat = r'[A-Z]\\w'\n    if re.search(pat, string):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# test cases"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    first_factorial_divisible_number = 1\n    for i in range(1, 100):\n        if (factorial(i) % x == 0):\n            first_factorial_divisible_number = i\n            break\n    return first_factorial_divisible_number\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    first = 1\n    while True:\n        if factorial(first) % x == 0:\n            return first\n        first += 1\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(n):\n    return (1 + n) * n // 2\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(n):\n    \"\"\"\n    Write a python function to find the first natural number whose factorial is divisible by x.\n    assert first_Factorial_Divisible_Number(10) == 5\n    \"\"\"\n    for i in range(1, n):\n        if (n % i == 0) and (n // i != n):\n            return i\n    return n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    if x > 1:\n        return (x * (x - 1))\n    else:\n        return 1\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n\treturn(x - 1)\n\t# Complete this function\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    if x<=0:\n        raise ValueError(\"x must be a positive number\")\n    else:\n        for i in range(1, x):\n            if i!=1 and x%i==0:\n                print(i)\n            return i\n\nfirst_Factorial_Divisible_Number(10)\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    for n in range(1, 10000):\n        if factorial(n) % x == 0:\n            return n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    for i in range(2, 100):\n        if x % i == 0 and math.factorial(i) % x == 0:\n            return i\n\n    return -1\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\nfrom itertools import product\n\n\ndef remove_matching_tuple(tuples_list, tuples_to_remove):\n    tuples_dict = {}\n    for tuple_ in tuples_list:\n        if tuple_[0] in tuples_dict:\n            tuples_dict[tuple_[0]].append(tuple_[1])\n        else:\n            tuples_dict[tuple_[0]] = [tuple_[1]]\n\n    # Remove matching tuples\n    for tuple_to_remove in tuples_to_remove:\n        if tuple_to_remove[0] in tuples_dict and tuple_to_remove[1] in tuples_dict[tuple_to_remove[0]]:\n            tuples_dict[tuple_to_remove[0]].remove(tuple_to_remove[1])\n\n    # Build the new tuples list\n    tuples_list_new = []\n    for key in tuples_dict:\n        tuples_list_new.append((key, tuples_dict[key]))\n\n    return tuples_list_new\n\n\ndef test_remove_matching_tuple():\n    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [\n        ('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\n\ntest_remove_matching_tuple()", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuples1, tuples2):\n    new_tuples = []\n    for t1 in tuples1:\n        for t2 in tuples2:\n            if t1[0] == t2[0] and t1[1] == t2[1]:\n                break\n        else:\n            new_tuples.append(t1)\n    return new_tuples", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(a, b):\n    result = []\n    for tuple_a in a:\n        for tuple_b in b:\n            if tuple_a == tuple_b:\n                break\n        else:\n            result.append(tuple_a)\n    return result\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# def remove_matching_tuple(arr, arr_2):\n#     for x in arr_2:\n#         for y in arr:\n#             if x[0] == y[0] and x[1] == y[1]:\n#                 arr.remove(y)\n#                 break\n#     return arr\n\n\ndef remove_matching_tuple(arr, arr_2):\n    for x in arr:\n        for y in arr_2:\n            if x[0] == y[0] and x[1] == y[1]:\n                arr.remove(x)\n                break\n    return arr\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(list_of_tuple, tuple_of_tuple):\n    remove_tuple = []\n    for tup in tuple_of_tuple:\n        for i in list_of_tuple:\n            if i[0] == tup[0] and i[1] == tup[1]:\n                pass\n            else:\n                remove_tuple.append(i)\n    return remove_tuple\n\n# This method using lambda and set\ndef remove_using_set(list_of_tuple, tuple_of_tuple):\n    remove_tuple = list_of_tuple[:]\n    remove_tuple = [i for i in remove_tuple if i not in tuple_of_tuple]\n    return remove_tuple", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\nfrom collections import Counter\n\ndef remove_matching_tuple(seq1, seq2):\n    matching_dict = {}\n    for (s1, s2) in seq1:\n        if s1 not in matching_dict:\n            matching_dict[s1] = []\n        matching_dict[s1].append(s2)\n    for (s2, s1) in seq2:\n        if s2 not in matching_dict:\n            matching_dict[s2] = []\n        matching_dict[s2].append(s1)\n    print(matching_dict)\n    count = 0\n    for (s1, s2) in seq1:\n        if s2 in matching_dict[s1]:\n            count += 1\n    seq1_new = seq1.copy()\n    for (s1, s2) in seq1:\n        if s2 in matching_dict[s1]:\n            seq1_new.remove((s1, s2))\n    print(seq1_new)\n    return seq1_new\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(lst1, lst2):\n    # Traverse through the list1 to find matching tuple and remove it.\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            lst2.remove(lst1[i])\n    return lst2\n\n# Write a function to remove the matching pairs from the given list of pairs.\n# assert remove_matching_pair([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\ndef remove_matching_pair(lst1, lst2):\n    # Traverse through the list1 to find matching pair and remove it.\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            lst2.remove(lst1[i])\n    return lst2\n\n# Write a function to find the matching pairs from the given list of pairs.\n# assert find_matching_pair([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('Hello', 'dude'), ('How', 'are')]\ndef find_matching_pair(lst1, lst2):\n    # Traverse through the list1 to find matching pair and remove it.\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            lst2.remove(lst1[i])\n    return lst2\n\n# Write a function to find the matching tuples from the given list of tuples.\n# assert find_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('Hello', 'dude'), ('How', 'are')]\ndef find_matching_tuple(lst1, lst2):\n    # Traverse through the list1 to find matching tuple and remove it.\n    for i in range(len(lst1", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple1, tuple2):\n    ans = []\n    for tup in tuple1:\n        if tup in tuple2:\n            tuple2.remove(tup)\n        else:\n            ans.append(tup)\n    return ans\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    result = []\n    for i in t1:\n        if i in t2:\n            t2.remove(i)\n        else:\n            result.append(i)\n    return result\n\n#assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# Answer for this question is same as code for question 7\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(array, size):\n    # Your code here\n    largest = 0\n    for i in range(len(array)):\n        for j in range(i, len(array)):\n            num = array[i] * array[j]\n            if is_palindrome(num) and num > largest:\n                largest = num\n    return largest\n\n\ndef is_palindrome(num):\n    # Your code here\n    return str(num) == str(num)[::-1]\n\n\n# Tests", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(lst, n):\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n            for k in range(len(str(lst[i]))):\n                if k < len(str(lst[j])):\n                    if str(lst[i])[k] != str(lst[j])[k]:\n                        break\n                else:\n                    break\n            else:\n                return lst[i]\n    return lst[0]", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\nimport math\n\ndef largest_palindrome(arr: list, length: int) -> int:\n    \"\"\"\n    Time: O(n^2), n = len(arr)\n    Space: O(1)\n    \"\"\"\n    start = arr[0]\n    end = arr[-1]\n    # multiply from i to j - 1\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            # multiply i * j\n            product = i * j\n            if product == str(product) and len(str(product)) == length:\n                return product\n\n\ndef largest_palindrome_recursive(arr: list, length: int) -> int:\n    \"\"\"\n    Time: O(n^2), n = len(arr)\n    Space: O(1)\n    \"\"\"\n    start = arr[0]\n    end = arr[-1]\n\n    def is_palindrome(num: int) -> bool:\n        # if num is palindrome, return True\n        # else return False\n        return str(num) == str(num)[::-1]\n\n    # multiply from i to j - 1\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            # multiply i * j\n            product = i * j\n            if product == str(product) and len(str(product)) == length:\n                if is_palindrome(product):\n                    return product\n    return None\n\n\ndef largest_palindrome_dynamic(arr: list, length: int) -> int:\n    \"\"\"\n    Time: O(n^2), n = len(arr)\n    Space: O(1)\n    \"\"\"\n    start = arr[0]\n    end = arr[-1]\n    table = [[0 for _ in range(len(arr))] for _ in range(len(arr))]\n    # multiply from i to j - 1\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            # multiply i * j\n            product = i * j\n            if product ==", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\n# A palindromic number is a number that reads the same backward as forward, like 12321.\n# Since there are only 10 digits, it's possible to check all possible combinations.\n# The product of two 2-digit palindromes will have at most four digits, so the number of combinations is 24.\n# For each combination, we check whether the combination is palindrome and larger than the largest palindrome.\n# The time complexity is O(n*n)\n\ndef largest_palindrome(array, limit=4):\n    largest = 0\n    for i in range(0, len(array)):\n        for j in range(i + 1, len(array)):\n            product = array[i] * array[j]\n            if is_palindrome(product) and len(str(product)) < limit and product > largest:\n                largest = product\n    return largest\n\ndef is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\n# Tests", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    # find the largest palindromic number \n    # by running a loop and checking all \n    # possible combinations of two numbers \n    max = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = arr[i] * arr[j]\n            if str(prod) == str(prod)[::-1] and max < prod:\n                max = prod\n    return max\n\n# arr = [1, 232, 54545, 999991]\n# n = 4\n# print(largest_palindrome(arr, n))\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(a, n):\n    a = sorted(a)\n    a = a[::-1]\n    largest = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if a[i] * a[j] > largest:\n                largest = a[i] * a[j]\n    return largest\n\n\ndef test_function():\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr,n):\n\tfor i in range(n):\n\t\tfor j in range(i,n):\n\t\t\tx = arr[i]*arr[j]\n\t\t\tif is_palindrome(x):\n\t\t\t\treturn x\n\ndef is_palindrome(x):\n\tx = str(x)\n\tif x == x[::-1]:\n\t\treturn True\n\treturn False", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(numbers, length):\n    largest = 0\n    for number1 in numbers:\n        for number2 in numbers:\n            product = number1 * number2\n            if str(product) == str(product)[::-1]:\n                if len(str(product)) == length and product > largest:\n                    largest = product\n    return largest\n\nnumbers = [1, 232, 54545, 999991]", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(numbers, size):\n    largest = 0\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if (numbers[i]*numbers[j] > largest and\n                str(numbers[i]*numbers[j]) == str(numbers[i]*numbers[j])[::-1] and\n                len(str(numbers[i]*numbers[j])) == size):\n                largest = numbers[i]*numbers[j]\n    return largest\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nfrom math import factorial\nimport random\n\ndef binomial_probability(number, trials, probability):\n    return probability**trials*(1-probability)**(number-trials)\n\ndef binomial_trials(trials, probability):\n    if probability == 0 or probability == 1:\n        return 0\n\n    k = 0\n    while random.random() < probability:\n        k += 1\n    return k\n\ndef test_binomial_probability():\n    assert binomial_probability(5, 10, 1.0/3) == 0.13656454808718185", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"Return the binomial probability of getting exactly k successes in n trials.\n\n    >>> binomial_probability(10, 5, 1.0/3)\n    0.13656454808718185\n    \"\"\"\n    return math.pow(p, k) * math.pow(1 - p, n - k) / math.factorial(k)\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(number, trials, probability):\n    \"\"\"\n    Computes binomial probability\n    >>> binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    True\n    \"\"\"\n    return probability**number * (1-probability)**(trials-number)", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nimport numpy as np\nfrom math import factorial\n\n\ndef binomial_probability(n, k, p):\n    if n < k or k < 0 or p < 0 or p > 1:\n        return None\n    return (factorial(n) / (factorial(k) * factorial(n - k))) * p ** k * (1 - p) ** (n - k)\n\n\ndef main():\n    print(binomial_probability(10, 5, 1.0/3))\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nfrom math import factorial\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial probability for the given number.\n\n    Args:\n        n: number of trials.\n        k: number of successes.\n        p: probability of success.\n\n    Returns:\n        Binomial probability.\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * p**k * (1 - p)**(n - k)\n\n\ndef binomial_probability_efficient(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial probability for the given number. Efficient implementation.\n\n    Args:\n        n: number of trials.\n        k: number of successes.\n        p: probability of success.\n\n    Returns:\n        Binomial probability.\n    \"\"\"\n    return (p**k * (1 - p)**(n - k)) / factorial(n)", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nimport math\n\ndef binomial_probability(N, k, p):\n    if k < 0 or k > N:\n        return 0\n    # TODO\n    return math.factorial(N)/(math.factorial(k)*math.factorial(N-k))*math.pow(p,k)*math.pow(1-p,N-k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success\n    :return: probability\n    \"\"\"\n    if n < k:\n        raise ValueError(\"n should be greater or equal to k\")\n\n    if p > 1.0:\n        raise ValueError(\"p should be less than or equal to 1.0\")\n\n    if p < 0.0:\n        raise ValueError(\"p should be greater or equal to 0.0\")\n\n    return p ** k * (1.0 - p) ** (n - k) / math.factorial(n)", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nimport math\nimport numpy as np\n\ndef binomial_probability(number_of_trials, number_of_successes, probability_of_success):\n    return math.pow(probability_of_success, number_of_successes)*math.pow((1 - probability_of_success), number_of_trials - number_of_successes)\n\n\ndef main():\n    print(binomial_probability(10, 5, 1.0/3))\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nfrom math import factorial\nfrom statistics import stdev, mean\n\ndef binomial_probability(n, k, p):\n    # If n is less than zero, then return 0\n    if n < 0:\n        return 0\n    # If k is less than 0 or greater than n, then return 0\n    if k < 0 or k > n:\n        return 0\n    # If p is less than 0 or greater than 1, then return 0\n    if p < 0 or p > 1:\n        return 0\n    # If p is 0, then return 1\n    if p == 0:\n        return 1\n    # If p is 1, then return 1\n    if p == 1:\n        return 1\n    # If p is 0.5, then return 2/3^n\n    if p == 0.5:\n        return 2**(1 - n)\n    # If n is 0, then return 1\n    if n == 0:\n        return 1\n    # If k is 0, then return 1\n    if k == 0:\n        return 1\n    # If k is equal to n, then return 1\n    if k == n:\n        return 1\n    # If p is 0.5, then return 1 if k is even or 2/3^n if k is odd\n    if p == 0.5:\n        return 1 if k % 2 == 0 else 2**(1 - n)\n    # If p is not 0.5, then return (n choose k) * (p**k) * ((1 - p)**(n - k))\n    return factorial(n) / (factorial(k) * factorial(n - k)) * pow(p, k) * pow((1 - p), (n - k))\n\n\ndef binomial_ci(n, k, p, confidence=0.95):\n    # If n is less than zero, then return None\n    if n < 0:\n        return None\n    # If k is less", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nfrom math import factorial\n\ndef binomial_probability(num_people, num_success, probability):\n    return (probability**num_success) * (1-probability)**(num_people - num_success)\n\n# assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(array):\n    array.sort(key=lambda x: x[1], reverse=True)\n    return array\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\nfrom typing import List\nimport copy\n\n\ndef sort_tuple(lis: List[tuple]) -> List[tuple]:\n    copy_list = copy.deepcopy(lis)\n    for i, val in enumerate(copy_list):\n        for j, val2 in enumerate(copy_list):\n            if val[0] > val2[0] and val[1] > val2[1]:\n                copy_list[i], copy_list[j] = copy_list[j], copy_list[i]\n    return copy_list", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuplist):\n    return sorted(tuplist, key=lambda tup: tup[1])\n\n# test:", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\nfrom typing import List\n\ndef sort_tuple(tup_list: List[tuple]) -> List[tuple]:\n    \"\"\"\n    Sorts a list of tuples in increasing order by the last element in each tuple.\n    :param tup_list: A list of tuples to sort.\n    :return: A list of tuples, in increasing order.\n    \"\"\"\n    tup_list = sorted(tup_list, key=lambda tup: tup[1])\n    tup_list = sorted(tup_list, key=lambda tup: tup[0])\n    return tup_list", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\nfrom operator import itemgetter\nfrom typing import List\n\ndef sort_tuple(list_of_tuples: List[tuple]) -> List[tuple]:\n    return sorted(list_of_tuples, key=itemgetter(-1))\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\nimport operator\n\ndef sort_tuple(lst):\n    sorted_lst = sorted(lst, key=operator.itemgetter(1), reverse=True)\n    return sorted_lst\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\n# def sort_tuple(t):\n#     \"\"\"\n#     Sorts the tuples in a list of tuples in ascending order by the last element in each tuple\n#     \"\"\"\n#     return sorted(t, key=lambda x: x[-1])\n\n# Another solution, using `sorted`\ndef sort_tuple(t):\n    \"\"\"\n    Sorts the tuples in a list of tuples in ascending order by the last element in each tuple\n    \"\"\"\n    return sorted(t, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(l):\n    \"\"\"\n    :param l: list of tuples\n    :return: sorted list of tuples by the last element\n    \"\"\"\n    return sorted(l, key=lambda t: t[-1])\n\ndef sort_tuple2(l):\n    \"\"\"\n    :param l: list of tuples\n    :return: sorted list of tuples by the last element\n    \"\"\"\n    return sorted(l, key=lambda t: (t[0], t[1]))\n\n\ndef test_sort_tuple():\n    assert sort_tuple([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\n\ndef test_sort_tuple2():\n    assert sort_tuple2([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tup):\n    tup.sort(key=lambda x: x[1])\n    return tup\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    sum_ = 0\n    for i in range(1,n+1):\n        sum_ += ((i**2)*(3*math.tan(math.pi/5*i)))\n    return sum_\n\n# assert area_pentagon(5)==43.01193501472417", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n: int) -> float:\n    return ((24/2)*math.sin(math.pi/5))/n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    return round( 0.5 * n * (3*n**2 + 3*n - 1) )\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(side_length):\n    return 0.5 * side_length * (5*side_length - 12)\n\ndef area_pentagon2(side_length):\n    return (5/2) * side_length * side_length\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nfrom math import sin, cos, pi, sqrt\ndef area_pentagon(n):\n    return (n*(3*sqrt(5)+5*cos(2*pi/n)))/4\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(side):\n    return 1.0/2.0*side*side*3.141592653589793*(2*2*3-2*3*3-5*5)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    area = (n**2)*(10*n-13)\n    return area\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(l):\n    return (3*l**2)*(2*sin(pi/5)/sin(pi/25))\n\ndef test_area_pentagon():\n    assert abs(area_pentagon(5)-43.01193501472417)<1e-14\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\n# This is a solution for the above problem.\ndef area_pentagon(side):\n    return (1 + 4 * (math.sin(math.pi / 5))**2) * side**2 / 2\n\n# This is a solution for the above problem, but using the shorthand notation for pi.\nfrom math import sin, pi\n\ndef area_pentagon(side):\n    return (1 + 4 * (sin(pi / 5))**2) * side**2 / 2", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return ((5*n)**2)/4/np.tan(np.pi/5)\n\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(arr_length,arr):\n    max_count = 0\n    for i in range(0,arr_length):\n        if arr[i] == max(arr):\n            max_count +=1\n    return max_count\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n, a):\n    counter = 0\n    for i in a:\n        if i == a[counter]:\n            counter += 1\n    return counter\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(num, arr):\n\tmaximum = 0\n\tmaximum_count = 0\n\tfor i in range(len(arr)):\n\t\tif arr[i] > maximum:\n\t\t\tmaximum = arr[i]\n\t\t\tmaximum_count = 1\n\t\telif arr[i] == maximum:\n\t\t\tmaximum_count += 1\n\n\treturn maximum_count", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(k, arr):\n\n    # Variable to store the frequency of the largest value\n    frequency = 0\n\n    # Loop through the array and find the largest value\n    max_value = arr[0]\n\n    for i in arr:\n        if i > max_value:\n            max_value = i\n\n    # Loop through the array again to find the frequency of the largest value\n    for i in arr:\n        if i == max_value:\n            frequency += 1\n\n    return frequency\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(size, array):\n    largest = max(array)\n    return array.count(largest)\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(array_length,array):\n    max_count=0\n    for i in array:\n        if i>max_count:\n            max_count+=1\n    for i in array:\n        if i==max_count:\n            return array.count(max_count)\n\n#Test", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    maximum = max(arr)\n    count = 0\n    for i in arr:\n        if i == maximum:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(arr_size,arr):\n    arr.sort()\n    m = arr[arr_size-1]\n    count = 0\n    for i in arr:\n        if i == m:\n            count += 1\n    return count\n    ", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n,list):\n    return max(list).count(max(list))\n\n#print(frequency_Of_Largest(5,[1,2,3,4,4]))", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr_len,arr):\n    arr_freq = {}\n    for i in range(len(arr)):\n        if arr[i] in arr_freq:\n            arr_freq[arr[i]] += 1\n        else:\n            arr_freq[arr[i]] = 1\n    largest_value = -1\n    max_frequency = -1\n    for i in arr_freq:\n        if arr_freq[i] > max_frequency:\n            max_frequency = arr_freq[i]\n            largest_value = i\n    return max_frequency"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\nfrom typing import List\n\ndef extract_symmetric(lst: List) -> List:\n    return []\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(lst):\n    return set([(x, y) for x, y in lst if x != y and (x, y) in lst])\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\nfrom itertools import combinations\n\n\ndef extract_symmetric(list):\n    return set(combinations(list, 2)) - set([(x, y) for x, y in list if x > y])\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\nimport pytest\n\ndef extract_symmetric(tlist):\n    # your code here\n    tlist.sort()\n    left = 0\n    right = len(tlist) - 1\n\n    pairs = set()\n    while left <= right:\n        pairs.add((tlist[left], tlist[right]))\n        if tlist[left] == tlist[right]:\n            left += 1\n        else:\n            right -= 1\n    return pairs\n\ndef test_func():\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]) == {(8, 9), (6, 7)}\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9), (6, 7)]) == {(8, 9), (6, 7)}\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9), (7, 6)]) == {(8, 9), (6, 7)}\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9), (7, 6), (9, 8)]) == {(8, 9), (6, 7)}\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\nimport pytest\n\n\ndef extract_symmetric(tuple_list):\n    \"\"\"\n    Takes in a list of tuples.\n    Returns a list of tuples that are symmetric.\n    \"\"\"\n    symmetric_pairs = []\n    for i, j in enumerate(tuple_list):\n        if tuple_list[i] in tuple_list[i + 1:]:\n            symmetric_pairs.append(tuple_list[i])\n    return symmetric_pairs\n\n\ndef test_extract_symmetric():\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]\n                             ) == {(8, 9), (6, 7)}\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n# End of extract_symmetric()\n# ----------------------------------------------------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Start of extract_unique_elements()\n# ----------------------------------------------------------------------------------------------------------------------\n\n\ndef extract_unique_elements(list_of_tuples):\n    \"\"\"\n    Takes in a list of tuples.\n    Returns a list of tuples that are symmetric.\n    \"\"\"\n    unique_elements = []\n    for i in list_of_tuples:\n        if i not in unique_elements:\n            unique_elements.append(i)\n    return unique_elements\n\n\ndef test_extract_unique_elements():\n    assert extract_unique_elements([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]) == [(10, 2), (6, 7), (2, 3)]\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n# End of extract_unique_elements()\n# ----------------------------------------------------------------------------------------------------------------------", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef extract_symmetric(tuples: List[Tuple]) -> List[Tuple]:\n    \"\"\"O(n^2) solution.\n\n    >>> extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])\n    [(8, 9), (6, 7)]\n    >>> extract_symmetric([(1, 2), (2, 3), (3, 1)])\n    [(2, 3), (3, 1)]\n    >>> extract_symmetric([(1, 2), (2, 3), (3, 1), (2, 1)])\n    [(2, 3), (3, 1)]\n    >>> extract_symmetric([(1, 2), (2, 3), (3, 1), (1, 2)])\n    [(2, 3), (3, 1)]\n    >>> extract_symmetric([(1, 2), (2, 3), (3, 4)])\n    [(2, 3)]\n    \"\"\"\n    symmetric_pairs: List[Tuple] = []\n    for t1 in tuples:\n        for t2 in tuples:\n            if t1 == t2:\n                continue\n            if is_symmetric(t1, t2):\n                symmetric_pairs.append(t1)\n\n    return symmetric_pairs\n\n\ndef is_symmetric(t1: Tuple, t2: Tuple) -> bool:\n    \"\"\"Check whether the given two tuples are symmetric.\n\n    >>> is_symmetric((6, 7), (7, 6))\n    True\n    >>> is_symmetric((6, 7), (7, 8))\n    False\n    >>> is_symmetric((6, 7), (8, 7))\n    False\n    >>> is_symmetric((6, 7), (6, 8))\n    False\n    >>> is_symmetric((6, 7), (7, 7))\n    True\n    >>> is_symmetric", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tlist):\n    \"\"\"\n    Extract symmetric elements from the tuple list.\n    \"\"\"\n    symlist = set()\n    for item in tlist:\n        symlist.add((item[1], item[0]))\n    return symlist", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuples):\n    symm_pairs = set()\n    for i in tuples:\n        for j in tuples:\n            if i[0] == j[1] or j[0] == i[1]:\n                symm_pairs.add(tuple(sorted([i[0], j[1]])))\n                symm_pairs.add(tuple(sorted([i[1], j[0]])))\n    return symm_pairs\n\nextract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(elements):\n    \"\"\"\n    :param elements: a list of tuples\n    :return: a set of tuples that are symmetric in elements\n    \"\"\"\n    return {(x, y) for x in elements for y in elements if x != y and x[::-1] == y}\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(lst):\n    return set((a,b) for a,b in lst if a == b)\n\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\nfrom math import log\n\ndef sum_gp(a, n, r):\n    s = a*(1-r**(n-1))/(1-r)\n    return s\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,n,r):\n    return (a*pow(r,n-1))/((1-r) or 1)\n\ndef test_sum_gp():\n    assert sum_gp(1,5,2)==31\n    assert sum_gp(1,10,2)==1344\n\ntest_sum_gp()```\n\n### Output:\n\n<empty_output>", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, b, r):\n    s = 0\n    while a < b:\n        s += a\n        a *= r\n    return s\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\nimport math\n\ndef sum_gp(a,d,n):\n    res = 0\n    for i in range(n):\n        res += a * math.pow(d, i)\n    return res\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(first_term, common_ratio, n):\n    # YOUR CODE HERE\n    pass\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,n,r):\n  total = 0\n  for i in range(0,n):\n    total += (a*r**i)\n  return total\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\nfrom functools import reduce\nfrom math import log\n\ndef sum_gp(start, end, ratio):\n    return reduce(lambda x, y: x * y, range(start, end+1), 1) / (1 - ratio)\n\n\ndef sum_gp2(start, end, ratio):\n    return reduce(lambda x, y: x * y, range(start, end+1), 1) - end\n\n\ndef sum_gp3(start, end, ratio):\n    return sum(reduce(lambda x, y: x * y, range(start, end+1), 1) - end for _ in range(end - start + 1))\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,b,r):\n    if a == 0:\n        return 0\n    else:\n        return a + r*sum_gp(a*r,b*r,r)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\n# My Solution\ndef sum_gp(a,b,n):\n    \"\"\"\n    a - first term\n    b - last term\n    n - number of terms\n    \"\"\"\n    result = 0\n    for i in range(n):\n        result += a\n        a *= b\n    return result\n\n# Best Solution\ndef sum_gp(a,b,n):\n    return (a+b)*(n-1)//2\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,b,n):\n    return (a*(1-(1/b)**n))/(1-(1/b))\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, target):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] < target:\n            low = mid + 1\n        elif array[mid] > target:\n            high = mid - 1\n        else:\n            return True\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, val):\n    if len(arr) == 0:\n        return False\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == val:\n            return True\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    \"\"\"\n    >>> binary_search([1, 2, 3, 5, 8], 6)\n    False\n    >>> binary_search([1, 2, 3, 5, 8], 5)\n    True\n    >>> binary_search([1, 2, 3, 5, 8], 3)\n    True\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\ndef binary_search_iter(arr, x):\n    \"\"\"\n    >>> binary_search_iter([1, 2, 3, 5, 8], 6)\n    False\n    >>> binary_search_iter([1, 2, 3, 5, 8], 5)\n    True\n    >>> binary_search_iter([1, 2, 3, 5, 8], 3)\n    True\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, val):\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = int((start+end)/2)\n        if arr[mid] == val:\n            return True\n        elif val > arr[mid]:\n            start = mid+1\n        else:\n            end = mid-1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(lst, element):\n    def binary_search_help(lst, low, high, element):\n        if low <= high:\n            mid = (low + high) // 2\n            if lst[mid] == element:\n                return mid\n            elif lst[mid] < element:\n                return binary_search_help(lst, mid + 1, high, element)\n            elif lst[mid] > element:\n                return binary_search_help(lst, low, mid - 1, element)\n        else:\n            return False\n    return binary_search_help(lst, 0, len(lst) - 1, element)\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, element):\n    \"\"\"\n    :param: array - sorted array\n    :param: element - element to be searched\n    return: the index of element if present else -1\n    \"\"\"\n    left = 0\n    right = len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == element:\n            return mid\n        elif array[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\ndef test_function(test_case):\n    array = test_case[0]\n    element = test_case[1]\n    if binary_search(array, element) == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n# test cases\narray = [1,2,3,5,8]\nelement = 6\nindex = -1\ntest_case = [array, element, index]\ntest_function(test_case)\n\narray = [1,2,3,5,8]\nelement = 5\nindex = 3\ntest_case = [array, element, index]\ntest_function(test_case)", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high)//2\n        if x == arr[mid]:\n            return True\n        elif x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, target):\n    if arr == []:\n        return False\n\n    return binary_search_recursive(arr, target, 0, len(arr) - 1)\n\n\ndef binary_search_recursive(arr, target, left, right):\n    if left > right:\n        return False\n\n    mid = (left + right) // 2\n    if arr[mid] == target:\n        return True\n    elif arr[mid] > target:\n        return binary_search_recursive(arr, target, left, mid - 1)\n    else:\n        return binary_search_recursive(arr, target, mid + 1, right)\n\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(lst, value):\n    # Checks whether the element is in the list and return the index of the element\n    \"\"\"\n    Use a while loop to iterate through the given list.\n    For each iteration, keep dividing the search space in half\n    If the value is found, return the index\n    If the value is not found, return -1\n    \"\"\"\n    low = 0\n    high = len(lst) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == value:\n            return mid\n        elif lst[mid] < value:\n            low = mid + 1\n        elif lst[mid] > value:\n            high = mid - 1\n    return -1\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary):\n    return int(str(binary), 2)\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\nfrom unittest import TestCase\n\n\ndef binary_to_integer(arr: list) -> str:\n    result = ''\n    for el in arr:\n        if el == 1:\n            result += '1'\n    return result\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\nfrom operator import add\n\ndef binary_to_integer(binary):\n    result = 0\n    for i, el in enumerate(binary):\n        result += el * 2 ** i\n    return result\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(tup):\n    \"\"\"Convert the given binary tuple to integer.\n\n    :param tup: tuple of binary values\n    :return: integer\n    \"\"\"\n    return int(''.join(str(x) for x in tup), 2)", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    binary_number = \"\"\n    for i in binary:\n        binary_number += str(i)\n    return int(binary_number, 2)\n\n# Example usage:", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    # binary = (1, 1, 0, 1, 0, 0, 1)\n    binary = tuple(map(int, binary))\n    binary = list(binary)\n    binary.reverse()\n    integer = 0\n    for digit in binary:\n        integer = integer * 2 + digit\n    return integer\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary):\n    return str(int(''.join([str(i) for i in binary]), 2))\n\n\n# Test cases\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary):\n    return sum(i * 2 ** idx for idx, i in enumerate(binary))\n\n\n#assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(b):\n    total = 0\n    for i in b:\n        total = total * 2 + i\n    return total\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    \"\"\"\n    Returns an integer representation of the binary tuple.\n    \n    >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1))\n    '105'\n    \"\"\"\n    return int(\"\".join(str(n) for n in binary), 2)\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]', '', string)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    pattern = r'\\b[a-z]\\w+\\b'\n    return re.sub(pattern, '', string)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n\treturn re.sub(r'[a-z]+', '', string)", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\n\ndef remove_lowercase(string: str) -> str:\n    \"\"\"\n    Remove lowercase substrings from a given string by using regex.\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    pattern = re.compile('[a-z]*')\n    return re.sub(pattern, '', string)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    return re.sub('[a-z]+', '', string)", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(s):\n    \"\"\"\n    We use the regex pattern below to identify all the lowercase letters in the string.\n    Then we use the search method on the string to find all the matches.\n    Finally, we use the sub method to remove those matches from the original string.\n    \n    We use the inverse of the lowercase regex pattern to capture all the uppercase letters\n    \"\"\"\n    pattern = re.compile(\"[a-z]\")\n    matches = pattern.search(s)\n    while matches:\n        s = s.replace(matches.group(), \"\")\n        matches = pattern.search(s)\n    return s", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\ndef remove_lowercase(string):\n    lower_cases = r'([a-z])'\n    lower_cases = re.sub(lower_cases, '', string)\n    return lower_cases\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nfrom functools import reduce\n\ndef remove_lowercase(string: str) -> str:\n    \"\"\"\n    Removes all substrings which are lowercase letters.\n\n    :param string: String to be modified.\n    :return: Modified string.\n    \"\"\"\n    def lowercase_filter(string: str) -> bool:\n        \"\"\"\n        Filters out substrings which are lowercase letters.\n\n        :param string: String to be checked.\n        :return: True if string is lowercase, else False.\n        \"\"\"\n        return not all(x.isupper() for x in string)\n\n    return reduce(lambda x, y: x + y, filter(lowercase_filter, string))"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(nums, k):\n    # Fill this in.\n    heap = []\n    for i in nums:\n        heapq.heappush(heap, i)\n        if len(heap)>k:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(k)]\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\ndef heap_queue_smallest(arr,k):\n    heap = []\n    for i in arr:\n        heapq.heappush(heap,i)\n        if len(heap)>k:\n            heapq.heappop(heap)\n    return heapq.nlargest(k, heap)\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nfrom heapq import heappop,heappush\n\ndef heap_queue_smallest(arr, n):\n    heap = []\n    for x in arr:\n        heappush(heap, x)\n    for i in range(n):\n        arr.pop(0)\n    for x in heap:\n        arr.append(x)\n    return arr\n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(nums,k):\n    heap = []\n    for i in range(len(nums)):\n        heapq.heappush(heap,-nums[i])\n        if len(heap)>k:\n            heapq.heappop(heap)\n    return [ -x for x in heap]\n\n# O(nlogk)\n# O(k)", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef heap_queue_smallest(numbers, k):\n    smallest = []\n    for n in numbers:\n        heappush(smallest, n)\n        if len(smallest)>k:\n            heappop(smallest)\n    return [heappop(smallest) for i in range(k)]\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\ndef heap_queue_smallest(A, k):\n    \n    heapq.heapify(A)\n    return heapq.nsmallest(k, A)\n\nA=[25, 35, 22, 85, 14, 65, 75, 25, 58]", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\ndef heap_queue_smallest(input_list, k):\n    heap = []\n\n    for num in input_list:\n        heapq.heappush(heap, num)\n\n    return_list = []\n    for i in range(k):\n        return_list.append(heapq.heappop(heap))\n\n    return return_list\n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(n,k):\n    # Write your code here.\n    heap=[]\n    for i in range(0,k):\n        heapq.heappush(heap,n[i])\n    for i in range(k,len(n)):\n        if heap[0]>n[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,n[i])\n    return list(heap)", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\ndef heap_queue_smallest(lst, n):\n\tmin_heap = []\n\tfor i in range(len(lst)):\n\t\tif len(min_heap)<n:\n\t\t\theapq.heappush(min_heap, lst[i])\n\t\telse:\n\t\t\tif lst[i]<min_heap[0]:\n\t\t\t\theapq.heappushpop(min_heap, lst[i])\n\n\treturn [heapq.heappop(min_heap) for i in range(n)]"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    base_area = math.pi*(radius**2)\n    side_area = math.pi*radius*math.sqrt(radius**2+(height/2)**2)\n    surface_area = base_area+side_area\n    return surface_area\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    pi = math.pi\n    return pi*(radius**2 + radius*height + height**2)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    \"\"\"\n    :param radius: The radius of the cone\n    :param height: The height of the cone\n    :return: the surface area of a cone of radius r and height h\n    \"\"\"\n    return math.pi * (radius ** 2 + radius * math.sqrt(height ** 2 + radius ** 2))\n\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    \"\"\"Return surface area of cone with radius = radius and height = height\"\"\"\n    return (2*pi*radius**2)*height + pi*radius**2\n\ndef test_surfacearea_cone():\n    assert surfacearea_cone(5,12) == 282.7433388230814\n\n#print surfacearea_cone(5,12)", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    return (1.0/3)*(3.14159*r**2+pi*(r**2)*h)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    return pi*(r**2 + r*h + h**2)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\nimport math\n\n\ndef surfacearea_cone(radius,height):\n    \"\"\"\n    find the surface area of a cone\n    :param radius: base radius\n    :param height: height of cone\n    :return: surface area\n    \"\"\"\n    return (math.pi * radius ** 2 + math.pi * radius * height) * 2\n\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\nfrom math import pi\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    >>> surfacearea_cone(5,12)\n    282.7433388230814\n    \"\"\"\n    pi_r = pi * radius\n    pi_r_squared = pi_r ** 2\n    pi_h = pi * height\n    pi_h_squared = pi_h ** 2\n    return pi_r_squared + pi_h_squared\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nimport math\n\ndef surfacearea_cone(r, h):\n    # Surface area = 2\u03c0rh + \u03c0r^2\n    sa = 2*math.pi*r*h + math.pi*r**2\n    return sa\n\ndef test_surfacearea_cone():\n    #Surface Area of a cone with radius 5 and height 12 is 282.7433388230814\n    assert surfacearea_cone(5,12)==282.7433388230814\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nimport math\n\ndef surfacearea_cone(radius,height):\n    return math.pi*radius*radius + math.pi*radius*height\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\nimport math\n\ndef gcd(a, b):\n    \"\"\"Compute the greatest common divisor of a and b\"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef test():\n    assert gcd(12, 17) == 1\n    assert gcd(12, 12) == 12\n    assert gcd(20, 12) == 4\n    assert gcd(15, 15) == 15\n    assert gcd(24, 10) == 4\n    assert gcd(39, 59) == 7\n    assert gcd(39, 5) == 1\n    assert gcd(5, 39) == 1\n    assert gcd(17, 22) == 1\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(num1, num2):\n    while True:\n        if num2 == 0:\n            return num1\n        num1, num2 = num2, num1%num2\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef test_gcd():\n    assert gcd(12, 17) == 1\n\ndef test_gcd_wrong():\n    assert gcd(3, 2) == 1\n\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b,a%b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\ndef main():\n    assert gcd(12, 17) == 1\n    print(\"Pass\")\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(m, n):\n    if n == 0:\n        return m\n    else:\n        return gcd(n, m % n)\n\ndef gcd(m, n):\n    if n == 0:\n        return m\n    else:\n        return gcd(n, m % n)\n\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return 2 * radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nfrom math import sqrt\ndef diameter_circle(radius):\n    return 2 * sqrt(radius * radius)\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    return 2 * r\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return radius*2\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\n\ndef diameter_circle(radius):\n    return radius * 2\n\n\ndef diameter_circle(radius):\n    return radius * 2\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n\ndef diameter_circle(radius):\n    diameter = 2 * radius", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    Args:\n       radius(int): side length of a circle\n    Returns:\n       int: diameter of a circle\n    \"\"\"\n    return 2*radius\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(r):\n\treturn 2*r\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    # Write your code here.\n    return r*2\n\ndef test_diameter_circle():\n    assert diameter_circle(5) == 10\n    assert diameter_circle(10) == 20\n\ndef test_diameter_circle_edge_cases():\n    assert diameter_circle(0) == 0\n    assert diameter_circle(-1) == 0\n    assert diameter_circle(1.5) == 3.0\n\ndef test_diameter_circle_error_cases():\n    with pytest.raises(ValueError):\n        assert diameter_circle(-0.5)\n    with pytest.raises(TypeError):\n        assert diameter_circle(None)\n    with pytest.raises(TypeError):\n        assert diameter_circle(False)\n\ntest_diameter_circle()\ntest_diameter_circle_edge_cases()\ntest_diameter_circle_error_cases()\n\n# Sample Output\n\n# 10\n# 20\n# Traceback (most recent call last):\n#   File \"/Users/annie/Documents/Coding/Python/Pycharm/coding-challenge/unit_testing/unit_testing_challenge_2/test_02_circle.py\", line 23, in test_diameter_circle_error_cases\n#     assert diameter_circle(None)\n# TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n# ...\n\n# >>> test_02_circle.py\n# ======= FAILURES ========\n# ____________________________ test_diameter_circle_error_cases ____________________________\n#     def test_diameter_circle_error_cases():\n# >       assert diameter_circle(None)\n# E       TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n#\n# test_02_circle.py:23: TypeError\n# ======= 1 FAILED, 3 passed in 0.10s ========", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return radius*2\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    return radius*2\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(string_list):\n    assert string_list != []\n    if len(string_list) == 1:\n        return string_list[0]\n    elif len(string_list) == 2:\n        return string_list[0] + \" \" + string_list[1]\n    else:\n        return string_list[0] + \" \" + concatenate_elements(string_list[1:])\n\n# assert concatenate_elements(['hello','there','have','a','rocky','day']) == 'hello there have a rocky day'", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(arr):\n    return \" \".join(arr)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list):\n    new_str = ' '\n    for i in list:\n        new_str += i + ' '\n    return new_str[:-1] # remove the trailing space\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    \"\"\"\n    >>> concatenate_elements(['hello','there','have','a','rocky','day'] )\n    '  hello there have a rocky day'\n    >>> concatenate_elements(['hello','there','have','a','rocky','day','and','a','nice','day'] )\n    '  hello there have a rocky day and a nice day'\n    \"\"\"\n    return '  '.join(elements)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(l):\n    return ' '.join(l)\n\n# Test", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list):\n    result = \"\"\n    for i in range(len(list)):\n        if i == 0:\n            result += str(list[i])\n        elif i == len(list)-1:\n            result += ' ' + str(list[i])\n        else:\n            result += ' ' + str(list[i])\n    return result\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    \"\"\"\n    >>> concatenate_elements(['hello','there','have','a','rocky','day'])\n    '  hello there have a rocky day'\n    >>> concatenate_elements(['hello','there','have','a','rocky','day'])\n    '  hello there have a rocky day'\n    \"\"\"\n    return '  '.join(elements)\n\n\n# Tests", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(arr):\n    return ' '.join(arr)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    \"\"\"\n    Concatenate all elements of the given list into a string.\n\n    Parameters\n    ----------\n    elements : list\n        The list of strings to be concatenated.\n\n    Returns\n    -------\n    str\n        The concatenated list of strings.\n\n    \"\"\"\n\n    # TODO: Write your code below.\n    pass", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list_elements):\n    return \" \".join(list_elements)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1, num2):\n    commonDivs = []\n    for num in range(1, max(num1,num2)+1):\n        if (num1 % num == 0) and (num2 % num == 0):\n            commonDivs.append(num)\n    return commonDivs\n\n# print(num_comm_div(2,4))", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(n1, n2):\n    return n1 // (n1 // n2) * n2\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1, num2):\n\t\"\"\"\n\t- Check if the number is prime or not.\n\t- If no, then check all the numbers from 2 to the number if it is a divisor.\n\t- If yes, check all the numbers from 2 to the square root of the number if it is a divisor.\n\t- If any number is found to be a divisor, then return the number.\n\t\"\"\"\n\t# Checking if num1 and num2 are positive integers.\n\tif type(num1) != int or type(num2) != int or num1 <= 0 or num2 <= 0:\n\t\treturn None\n\n\t# Checking if the number is prime or not.\n\t# This check is not needed if num1 and num2 are prime numbers.\n\tif is_prime(num1) == False or is_prime(num2) == False:\n\t\t# If both numbers are composite numbers, then check all the numbers from 2 to the max of the number.\n\t\tmax_num = max(num1,num2)\n\t\tfor n in range(2,max_num+1):\n\t\t\tif num1%n == 0 and num2%n == 0:\n\t\t\t\treturn n\n\t\t# If only one number is composite, then check all the numbers from 2 to the square root of the number.\n\t\tif is_prime(num1) == True:\n\t\t\tmax_num = num1\n\t\telse:\n\t\t\tmax_num = num2\n\t\tfor n in range(2,max_num+1):\n\t\t\tif num1%n == 0 and num2%n == 0:\n\t\t\t\treturn n\n\telse:\n\t\treturn num1\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if a>b:\n        smaller = b\n    else:\n        smaller = a\n    for num in range(1,smaller+1):\n        if a%num == 0 and b%num == 0:\n            return num\n    return 0\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(x,y):\n    if x > y:\n        div = x\n    else:\n        div = y\n    for i in range(2,div):\n        if x%i == 0 and y%i == 0:\n            return i\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1,num2):\n    \"\"\"\n    :param num1: integer\n    :param num2: integer\n    :return: common divisor integer\n    \"\"\"\n    if num1 == 0 or num2 == 0:\n        return 0\n    elif num1 == 1 or num2 == 1:\n        return 1\n    elif num1 == num2:\n        return num1\n    else:\n        if num1 > num2:\n            return num_comm_div(num1-num2,num2)\n        else:\n            return num_comm_div(num1,num2-num1)\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\nfrom functools import reduce\nimport math\n\ndef num_comm_div(n1, n2):\n    return reduce(lambda x, y: x if x > y else y, set(list(range(1, math.ceil(math.sqrt(n1)))+list(range(1, math.ceil(math.sqrt(n2)))))))\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(x,y):\n    \"\"\"\n    We will use Euclidean algorithm to find the common divisor.\n    \"\"\"\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return num_comm_div(x%y,y)\n    else:\n        return num_comm_div(x,y%x)\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(n1, n2):\n    \"\"\"\n    Returns the common divisors of two numbers in a given pair\n    \"\"\"\n    # Finds the prime factorization of two numbers\n    # then returns the number of common divisors\n    p1 = prime_factorization(n1)\n    p2 = prime_factorization(n2)\n    common_factors = 0\n    for factor in p1:\n        if factor in p2:\n            common_factors += 1\n    return common_factors\n\ndef prime_factorization(n):\n    \"\"\"\n    Returns a dictionary of prime factorization of a number\n    \"\"\"\n    factors = {}\n    while n % 2 == 0:\n        factors[2] = factors.get(2, 0) + 1\n        n = n / 2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n = n / i\n    if n > 2:\n        factors[n] = factors.get(n, 0) + 1\n    return factors", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n\tif b == 0:\n\t\treturn a\n\tif a < b:\n\t\ta,b = b,a\n\twhile a % b != 0:\n\t\ta,b = b,a % b\n\treturn b\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x,y):\n    return x%y\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    return a%b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    if b == 0:\n        return a\n    else:\n        return find(b, a % b)\n\n# Test cases", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(num1,num2):\n    return num1%num2\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    remainder = a%b\n    return remainder\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(x,y):\n    return x%y\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(num1, num2):\n  return num1 % num2\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\n# Sample Solution\ndef find(n, x):\n    if (n % x == 0):\n        return 0\n    else:\n        return n % x\n\ndef test_find():\n    assert find(3, 3) == 0\n    assert find(5, 3) == 2\n    assert find(5, 5) == 0\n    print(\"All tests passed.\")\n\n# What's wrong with the solution?", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x, y):\n    if y > x:\n        return x%y\n    else:\n        return y%x\n\n\n#In[]", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(x,y):\n    return x%y\n\ndef test_find():\n    assert find(3,3) == 0\n    assert find(7,3) == 1\n    assert find(5,3) == 2\n\n# find(3,3) == 0\n# find(7,3) == 1\n# find(5,3) == 2\n# find(7,6) == 1\n# find(7,8) == 3\n\ntest_find()\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    res = []\n    start = nums[0]\n    for num in nums[1:]:\n        if num - start == 1:\n            res.append(start)\n        else:\n            res.append(start + num)\n            start = num\n    return res\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(l):\n    \"\"\"\n    :param l: list of int\n    :return: list of int\n    \"\"\"\n    new_list = [l[0]]\n    for i in range(1, len(l)):\n        new_list.append(new_list[-1] + l[i])\n    return new_list\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(my_list):\n    for i in range(len(my_list)-1):\n        my_list[i+1] = my_list[i]+my_list[i+1]\n    return my_list\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    # Your code here\n    return []\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(arr):\n    return list(map(lambda x: x[1] + x[0], enumerate(arr)))\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(numbers):\n    n = len(numbers)\n    new_list = []\n    for i in range(n):\n        if i == 0:\n            new_list.append(numbers[i])\n        else:\n            new_list.append(new_list[i - 1] + numbers[i])\n    return new_list\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        return []\n    if arr_len == 2:\n        return [arr[0] + arr[1]]\n    res = [arr[0] + arr[1]]\n    i = 2\n    while i < arr_len:\n        res.append(arr[i-1] + arr[i])\n        i += 1\n    return res\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        if i > 0:\n            new_lst.append(lst[i] + new_lst[i-1])\n        else:\n            new_lst.append(lst[i])\n    return new_lst\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    \"\"\"\n    Args:\n       nums(list): List containing numbers whose consecutive numbers are to be added\n    Returns:\n       list: List containing numbers whose consecutive numbers have been added\n    \"\"\"\n    new_list = [nums[0]]\n    for i in range(1, len(nums)):\n        new_list.append(nums[i] + nums[i-1])\n    return new_list", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\n# I don't understand why this is not working\ndef add_consecutive_nums(list):\n    new_list = []\n    for i in range(len(list)-1):\n        new_list.append(list[i]+list[i+1])\n    return new_list\n\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n\ts = 0\n\tfor i in range(n+1):\n\t\ts = s + i**3\n\treturn s\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    Returns the sum of series of first n natural numbers\n    \"\"\"\n    return n ** 3\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    #your code here\n    return (n*(n+1)*(2*n+1))/6\n\ndef main():\n    print(\"The sum of 5 is \",sum_Of_Series(5))", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_of_series(n):\n    x = 0\n    for i in range(n+1):\n        x+= i**3\n    return x\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return n*(n+1)//2*(n+2)//3\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    s = 0\n    for i in range(n):\n        s += i**3\n    return s\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    return ((n*(n+1))/2)**3\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    return sum([i**3 for i in range(1,n+1)])\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    sum_ = 0\n    for i in range(0,n):\n        sum_ += (i+1)**3\n    return sum_\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    if n == 0:\n        return 0\n    else:\n        return n**3 + sum_Of_Series(n-1)"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n  zero = -1\n  for i in range(len(arr)):\n    if arr[i] != 0:\n      if zero == -1:\n        zero = i\n      elif i != 0:\n        temp = arr[zero]\n        arr[zero] = arr[i]\n        arr[i] = temp\n  return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\nimport unittest\n\n\ndef re_order(arr):\n    \"\"\"Time Complexity: O(n), Space Complexity: O(1)\"\"\"\n    head = tail = arr\n    while head < tail:\n        if arr[head] == 0:\n            arr[tail] = 0\n            tail += 1\n        else:\n            head += 1\n    return arr\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(array):\n    for i in range(len(array)):\n        if array[i] == 0:\n            for j in range(i, len(array)):\n                if array[j] != 0:\n                    array[i], array[j] = array[j], array[i]\n                    break\n\narray = [6, 0, 8, 2, 3, 0, 4, 0, 1]\nre_order(array)", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    # Write your code here.\n    i = 0\n    j = 0\n    while j<len(arr):\n        if arr[j]!=0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i+=1\n        j+=1\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\n# NOTE: this solution is not efficient enough.\n\n\ndef re_order(arr):\n    zero_cnt = 0\n    arr_len = len(arr)\n\n    for i in range(arr_len):\n        if arr[i] != 0:\n            arr[i - zero_cnt], arr[i] = arr[i], arr[i - zero_cnt]\n            zero_cnt += 1\n\n    return arr\n\n\n# assert re_order([1, 0, 0, 0, 0]) == [0, 0, 0, 0, 1]\n# assert re_order([0, 0, 0, 1, 0]) == [0, 1, 0, 0, 0]", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n  i = 0\n  n = len(arr)\n  while i < n:\n    if arr[i] == 0:\n      arr[i], arr[n - 1] = arr[n - 1], arr[i]\n      n -= 1\n    i += 1\n  return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n\t# Write your code here\n\tj=0\n\tfor i in range(len(arr)):\n\t\tif arr[i] !=0:\n\t\t\tarr[j],arr[i] = arr[i],arr[j]\n\t\t\tj +=1\n\treturn arr\n\n#print(re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]))", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\nimport unittest\n\n\ndef re_order(a):\n    \"\"\"\n    :param a:\n    :return:\n    >>> re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    True\n    \"\"\"\n    b = []\n    c = []\n    d = []\n    for i in a:\n        if i == 0:\n            c.append(i)\n        else:\n            b.append(i)\n\n    for j in range(len(b)):\n        d.append(b[j])\n    for k in range(len(c)):\n        d.append(c[k])\n    return d\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    start = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i], arr[start] = arr[start], arr[i]\n            start += 1\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\n# Time Complexity: O(n) where n is the length of the given array.\n# Space Complexity: O(1) due to no additional space is created.\n\n\ndef re_order(a):\n    index = 0\n    while index < len(a):\n        if a[index] != 0:\n            index += 1\n        else:\n            a[index], a[len(a) - 1] = a[len(a) - 1], a[index]\n            a.pop()\n            len(a) -= 1\n    return a\n\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nfrom math import factorial\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) / (factorial(k) * factorial(n-k))\n\n\ndef main():\n    print(permutation_coefficient(10, 2))\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :param n:\n    :param k:\n    :return:\n    \"\"\"\n    # corner cases\n    if n < k or k < 0 or k > n:\n        return 0\n\n    if k == 0:\n        return 1\n\n    # recursive algorithm\n    if k == 1:\n        return n\n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nimport itertools\n\n\ndef permutation_coefficient(n, k):\n    return sum(itertools.combinations(range(n), k))\n\n\n# assert permutation_coefficient(10, 2) == 90\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nimport math\n\ndef permutation_coefficient(n, k):\n    return math.factorial(n)/(math.factorial(k) * math.factorial(n-k))\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef factorial(n):\n    if n < 2:\n        return 1\n    return n * factorial(n-1)\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nfrom functools import reduce\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    >>> permutation_coefficient(10, 2)\n    90\n    >>> permutation_coefficient(1000, 4)\n    1000000000\n    >>> permutation_coefficient(100, 2)\n    900\n    >>> permutation_coefficient(100, 3)\n    9000\n    >>> permutation_coefficient(100, 4)\n    90000\n    >>> permutation_coefficient(100, 5)\n    900000\n    >>> permutation_coefficient(100, 6)\n    9000000\n    >>> permutation_coefficient(100, 7)\n    90000000\n    >>> permutation_coefficient(100, 8)\n    900000000\n    >>> permutation_coefficient(100, 9)\n    9000000000\n    >>> permutation_coefficient(100, 10)\n    90000000000\n    >>> permutation_coefficient(100, 11)\n    900000000000\n    >>> permutation_coefficient(100, 12)\n    9000000000000\n    >>> permutation_coefficient(100, 13)\n    90000000000000\n    >>> permutation_coefficient(100, 14)\n    900000000000000\n    >>> permutation_coefficient(100, 15)\n    9000000000000000\n    >>> permutation_coefficient(100, 16)\n    90000000000000000\n    >>> permutation_coefficient(100, 17)\n    900000000000000000\n    >>> permutation_coefficient(100, 18)\n    90", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    if k == 0 or n == 0:\n        return 0\n    if k > n:\n        return 0\n    return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nfrom typing import List\n\n\ndef permutation_coefficient(p: int, k: int) -> int:\n    \"\"\"\n    :type p: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return factorial(p) // factorial(p - k)\n\n\ndef factorial(n: int) -> int:\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    if n < 0 or k < 0 or n < k:\n        return 0\n    return (n - k) * permutation_coefficient(n - 1, k - 1)\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(word_list,remove_words):\n    result = []\n    for word in word_list:\n        if word not in remove_words:\n            result.append(word)\n    return result\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words,remove):\n    return [word for word in words if word not in remove]\n\ndef test_remove_words():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words,remove_list):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    new_list = []\n    for i in words:\n        if i not in remove_list:\n            new_list.append(i)\n    return new_list\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words,to_remove):\n    return [word for word in words if word not in to_remove]\n\nwords = ['red', 'green', 'blue', 'white', 'black', 'orange']\nto_remove = ['white', 'orange']\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(list, words):\n    \"\"\"\n    list: The list to be removed.\n    words: The list of words to be removed.\n\n    return: The list of words that are in list but not in words.\n    \"\"\"\n    for word in words:\n        list.remove(word)\n    return list\n\n\ndef remove_words(list, words):\n    \"\"\"\n    list: The list to be removed.\n    words: The list of words to be removed.\n\n    return: The list of words that are in list but not in words.\n    \"\"\"\n    return list(filter(lambda x: x not in words, list))\n\n\ndef remove_words(list, words):\n    \"\"\"\n    list: The list to be removed.\n    words: The list of words to be removed.\n\n    return: The list of words that are in list but not in words.\n    \"\"\"\n    l = []\n    for word in list:\n        if word not in words:\n            l.append(word)\n    return l\n\n\n# Test Code\n# list = ['red', 'green', 'blue', 'white', 'black', 'orange']\n# words = ['white', 'orange']\n# assert remove_words(list, words) == ['red', 'green', 'blue', 'black']\n# print('Success')", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, to_remove):\n    return [word for word in words if word not in to_remove]", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words_list, removed_words_list):\n    \"\"\"\n    Return list with all removed words from input list.\n    \"\"\"\n    return [word for word in words_list if word not in removed_words_list]\n\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words,words2remove):\n    for i in words2remove:\n        if i in words:\n            words.remove(i)\n    return words\n\ndef remove_words(words,words2remove):\n    for i in words2remove:\n        try:\n            words.remove(i)\n        except ValueError:\n            pass\n    return words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, remove):\n    remove = set(remove)\n    new_words = []\n    for word in words:\n        if word not in remove:\n            new_words.append(word)\n    return new_words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(word_list, remove_list):\n    \"\"\"\n    Parameters:\n        word_list (list): list of words\n        remove_list (list): list of words to be removed from word_list\n    \n    Returns:\n        (list): word_list with the words in remove_list removed\n    \"\"\"\n    \n    for word in remove_list:\n        try:\n            word_list.remove(word)\n        except ValueError:\n            print(f'{word} was not in the list.')\n            print(f'word_list is {word_list}')\n    return word_list\n\n#test"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and i!=j:\n                return False\n    return True\n    ", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    for i in list1:\n        if i not in list2:\n            return False\n        else:\n            continue\n    for i in list2:\n        if i not in list1:\n            return False\n        else:\n            continue\n    return True", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(a, b):\n    # Write your code here\n    return len(set(a).intersection(set(b))) == len(set(a)) and len(set(b).intersection(set(a))) == len(set(b))\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n    return list(set(list1) & set(list2)) == list(set(list1) & set(list2))\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(A,B):\n  return sorted(A)==sorted(B)\n\n#Same order:\ndef same_order(A,B):\n  return list(sorted(A))==list(sorted(B))", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1,list2):\n    list2_ = sorted(list2)\n    return list1==list2_\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i] != lst2[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(a,b):\n    a_len = len(a)\n    b_len = len(b)\n    if a_len != b_len:\n        return False\n    a_copy = a.copy()\n    b_copy = b.copy()\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            if a_copy[i] != a[i]:\n                return False\n            else:\n                a_copy.remove(a[i])\n        if b_copy[i] != b[i]:\n            if b_copy[i] != b[i]:\n                return False\n            else:\n                b_copy.remove(b[i])\n    return True", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1,list2):\n    return list1 == list2\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    if sorted(list1) == sorted(list2):\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    odd_numbers = []\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 1:\n            odd_numbers.append(i)\n    for j in odd_numbers:\n        sum = sum + j\n    return sum/len(odd_numbers)\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(num):\n  sum = 0\n  if num % 2 == 0:\n    return \"Only Even Numbers are allowed\"\n  else:\n    for i in range(1, num, 2):\n      sum += i\n    return sum/num\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    sum = 0\n    for i in range(1,n+1,2):\n        sum = sum + i\n    return sum/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    if n % 2 == 0:\n        return average_Odd(n - 2)\n    else:\n        return (average_Odd(n - 2) + n) / 2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    # create a list to hold the odd numbers\n    odd_numbers = []\n\n    for i in range(1, n + 1, 2):\n        # append the odd numbers to the list\n        odd_numbers.append(i)\n\n    # return the sum of all odd numbers divided by number of odd numbers\n    return sum(odd_numbers) / len(odd_numbers)\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i\n    return sum / 2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n# Solution 1\ndef average_Odd(n):\n    odd_sum = 0\n    for i in range(1, n, 2):\n        odd_sum += i\n    return odd_sum/2\n\n# Solution 2\ndef average_Odd(n):\n    return sum(i for i in range(1, n, 2)) / 2\n\n\n# Solution 3\ndef average_Odd(n):\n    return sum(i for i in range(1, n, 2)) >> 1\n\n# Solution 4\ndef average_Odd(n):\n    return sum(range(1, n, 2)) // 2\n\n# Solution 5\ndef average_Odd(n):\n    return sum(i for i in range(1, n, 2)) / (n//2)\n\n# Solution 6\ndef average_Odd(n):\n    return sum(range(1, n, 2)) // 2\n\n# Solution 7\ndef average_Odd(n):\n    return sum(i for i in range(1, n, 2)) // 2\n\n# Solution 8\ndef average_Odd(n):\n    return (sum(range(1, n, 2)) / 2)\n\n# Solution 9\ndef average_Odd(n):\n    return sum(i for i in range(1, n, 2)) // 2\n\n# Solution 10\ndef average_Odd(n):\n    return sum(range(1, n, 2)) / (n//2)", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    total = 0\n    for i in range(1,num+1):\n        if i % 2 != 0:\n            total = total + i\n    return total / (num//2)", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    \"\"\"\n    >>> average_Odd(9)\n    5\n    \"\"\"\n    result = 0\n    for i in range(1, n+1, 2):\n        result += i\n    return result / 2\n\ndef test():\n    \"\"\"\n    >>> test()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    return (sum(range(1, num+1)) - sum(range(0, num, 2))) / num\n\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nfrom itertools import combinations\n\n\ndef no_of_subsequences(arr, k):\n    \"\"\"\n    :param arr: non negative array\n    :param k: product\n    :return: number of subsequences\n    \"\"\"\n    return len(list(combinations(arr, 2)))\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nfrom functools import reduce\n\n\ndef no_of_subsequences(arr, k):\n    # arr.sort()\n\n    dp = [[0] * (k + 1) for i in range(len(arr) + 1)]\n    # for i in range(len(arr)):\n    #     for j in range(k + 1):\n    #         if j < arr[i]:\n    #             dp[i + 1][j] = dp[i][j]\n    #         else:\n    #             dp[i + 1][j] = dp[i][j] + dp[i][j - arr[i]]\n    #         if j == 0:\n    #             dp[i + 1][j] = 1\n\n    for i in range(1, len(arr) + 1):\n        for j in range(1, k + 1):\n            if j < arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n            if j == 0:\n                dp[i][j] = 1\n    return dp[-1][-1]\n\n\ndef main():\n    print(no_of_subsequences([1, 2, 3, 4], 10))\n    print(no_of_subsequences([1, 2, 3, 4], 4))\n\n\nmain()", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n\tarr = list(set(arr))\n\tarr.sort()\n\t# print(arr)\n\tdp = [0]*len(arr)\n\tdp[0] = 1\n\tfor i in range(1, len(arr)):\n\t\tif arr[i] < k:\n\t\t\tdp[i] = dp[i-1]\n\t\telse:\n\t\t\tfor j in range(i):\n\t\t\t\tif arr[j] * arr[i] < k:\n\t\t\t\t\tdp[i] += dp[j]\n\treturn dp[-1]\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nfrom functools import reduce\n\ndef no_of_subsequences(arr, k):\n    return reduce(lambda acc, x: acc * (len(arr)+1-x), range(1, len(arr)+1), 1) - reduce(lambda acc, x: acc * (len(arr)+1-x), range(1, len(arr)+1), 1) * reduce(lambda acc, x: acc * (len(arr)+1-x), range(1, len(arr)+1), 1) % k\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    # Your code here\n    # Generate prefix sums\n    prefix_sum = [0 for _ in range(len(arr))]\n    for i in range(len(prefix_sum)):\n        prefix_sum[i] = arr[i]\n        if i > 0:\n            prefix_sum[i] += prefix_sum[i-1]\n    \n    # Initialize\n    prefix_sum_less_than_k = [0 for _ in range(len(prefix_sum))]\n    for i in range(len(prefix_sum_less_than_k)):\n        prefix_sum_less_than_k[i] = prefix_sum[i]\n        if i > 0:\n            prefix_sum_less_than_k[i] -= prefix_sum[i-1]\n        if prefix_sum_less_than_k[i] < 0:\n            prefix_sum_less_than_k[i] = 0\n    \n    # Print\n    return prefix_sum_less_than_k[len(prefix_sum_less_than_k) - 1]", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    arr = [1]+arr\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]*(k//arr[i])\n        if s >= k:\n            return i\n    return len(arr)\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nfrom math import factorial\n\n\ndef no_of_subsequences(arr, k):\n    dp = [[0 for i in range(k + 1)] for i in range(len(arr))]\n    dp[0][0] = 1\n    for i in range(1, len(arr)):\n        for j in range(k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= arr[i]:\n                dp[i][j] += dp[i - 1][j - arr[i]]\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    arr.sort()\n    dp = [0 for i in range(k+1)]\n    for i in range(len(arr)):\n        for j in range(k, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return dp[-1]", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n\tif arr == []:\n\t\treturn 0\n\tarr.sort()\n\tn = len(arr)\n\tans = 0\n\tfor i in range(n):\n\t\tans += arr[i] * no_of_subsequences(arr[i+1:], k)\n\tans += 1\n\treturn ans\n"]]