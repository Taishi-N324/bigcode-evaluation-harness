[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str, char):\n    return str[:str.index(char)] + str[str.index(char)+1:]\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    \"\"\"\n    >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    \"\"\"\n    # Your code here\n    # words = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']\n    # words = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']\n    # words = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']\n    # words = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']\n    # words = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\""], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    return (a*b*c)/6\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    return s.split('a')\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n    return \"Found a match!\"\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(n):\n    return 4*n\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string1, string2):\n    return \"\".join([c for c in string1 if c not in string2])\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(array):\n    return len(array) > len(set(array))\n\ndef duplicate(array):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    return len(array) > len(set(array))\n\ndef test_duplicate_2([1,2,3,4,5]):\n    return len([1,2,3,4,5]) > len(set([1,2,3,4,5]))\n\ndef duplicate_2(array):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    return len(array) > len(set(array))\n\ndef test_duplicate_3([1,2,3,4,5]):\n    return len([1,2,3,4,5]) > len(set([1,2,3,4,5]))\n\ndef duplicate_3(array):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    return len(array) > len(set(array))\n\ndef test_duplicate_4([1,2,3,4,5]):\n    return len([1,2,3,4,5]) > len(set([1,2,3,4,5]))\n\ndef duplicate_4(array):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    return len(array) > len(set(array))\n\ndef test_duplicate_5([1,2,3,4,5]):\n    return len([1,2,3,4,5]) > len(set([1,2,3,4,5]))\n\ndef duplicate_5(array):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    return len(array) > len(set(array))\n\ndef test_duplicate_6([1,2,3,4,5]):\n    return len([1,2,3,4,5]) > len(set([1,2,3,4,5]))"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return is_woodall(n/2)\n    else:\n        return is_woodall(3*n+1)\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return [n*i for i in range(1,m+1)]\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(list_of_lists):\n    max_sum = 0\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            max_sum = max(max_sum, list_of_lists[i][j])\n    return max_sum\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    \"\"\"\n    Convert a binary number to its decimal equivalent.\n    \"\"\"\n    return sum(int(digit) * 2 ** (len(binary) - i - 1) for i, digit in enumerate(reversed(binary)))\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0]*arr[1]\n    if len(arr) == 3:\n        return arr[0]*arr[1]*arr[2]\n    if len(arr) == 4:\n        return arr[0]*arr[1]*arr[2]*arr[3]\n    if len(arr) == 5:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]\n    if len(arr) == 6:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]\n    if len(arr) == 7:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]\n    if len(arr) == 8:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]\n    if len(arr) == 9:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]\n    if len(arr) == 10:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]\n    if len(arr) == 11:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]\n    if len(arr) == 12:\n        return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    return len(tuple_list) == k\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return [word for word in lst if not word.isdigit()]\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,n):\n    # Your code here\n    #print(arr)\n    #print(n)\n    #print(len(arr))\n    #print(arr[0])\n    #print(arr[1])\n    #print(arr[2])\n    #print(arr[3])\n    #print(arr[4])\n    #print(arr[5])\n    #print(arr[6])\n    #print(arr[7])\n    #print(arr[8])\n    #print(arr[9])\n    #print(arr[10])\n    #print(arr[11])\n    #print(arr[12])\n    #print(arr[13])\n    #print(arr[14])\n    #print(arr[15])\n    #print(arr[16])\n    #print(arr[17])\n    #print(arr[18])\n    #print(arr[19])\n    #print(arr[20])\n    #print(arr[21])\n    #print(arr[22])\n    #print(arr[23])\n    #print(arr[24])\n    #print(arr[25])\n    #print(arr[26])\n    #print(arr[27])\n    #print(arr[28])\n    #print(arr[29])\n    #print(arr[30])\n    #print(arr[31])\n    #print(arr[32])\n    #print(arr[33])\n    #print(arr[34])\n    #print(arr[35])\n    #print(arr[36])\n    #print(arr[37])\n    #print(arr[38])\n    #print(arr[39])\n    #print(arr[40])\n    #print(arr[41])\n    #print(arr[42])\n    #print(arr[43])\n    #print(arr[44])\n    #print(arr[45])\n    #print(arr[46])\n    #print(arr[47])\n    #print(arr[4"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\ndef func(lists, k):\n    \"\"\"\n    :type lists: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    d = defaultdict(int)\n    for l in lists:\n        for i in l:\n            d[i] += 1\n    h = []\n    for k, v in d.items():\n        heappush(h, (v, k))\n    res = []\n    for _ in range(k):\n        _, k = heappop(h)\n        res.append(k)\n    return res\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 2\n    if n == 5:\n        return 5\n    if n == 6:\n        return 2\n    if n == 7:\n        return 3\n    if n == 8:\n        return 2\n    if n == 9:\n        return 3\n    if n == 10:\n        return 2\n    if n == 11:\n        return 3\n    if n == 12:\n        return 2\n    if n == 13:\n        return 3\n    if n == 14:\n        return 2\n    if n == 15:\n        return 5\n    if n == 16:\n        return 2\n    if n == 17:\n        return 3\n    if n == 18:\n        return 2\n    if n == 19:\n        return 3\n    if n == 20:\n        return 2\n    if n == 21:\n        return 3\n    if n == 22:\n        return 2\n    if n == 23:\n        return 3\n    if n == 24:\n        return 2\n    if n == 25:\n        return 5\n    if n == 26:\n        return 2\n    if n == 27:\n        return 3\n    if n == 28:\n        return 2\n    if n == 29:\n        return 3\n    if n == 30:\n        return 2\n    if n == 31:\n        return 3\n    if n == 32:\n        return 2\n    if n == 33:\n        return 3\n    if n == 34:\n        return 2\n    if n == 35:\n        return 5\n    if n == 36:\n        return 2\n    if n == 37:\n        return 3\n    if n == 38:\n       "], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + decimal_To_Binary(n // 2)\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if len(arr) == 3:\n        return 2\n    if len(arr) == 4:\n        return 3\n    if len(arr) == 5:\n        return 4\n    if len(arr) == 6:\n        return 5\n    if len(arr) == 7:\n        return 6\n    if len(arr) == 8:\n        return 7\n    if len(arr) == 9:\n        return 8\n    if len(arr) == 10:\n        return 9\n    if len(arr) == 11:\n        return 10\n    if len(arr) == 12:\n        return 11\n    if len(arr) == 13:\n        return 12\n    if len(arr) == 14:\n        return 13\n    if len(arr) == 15:\n        return 14\n    if len(arr) == 16:\n        return 15\n    if len(arr) == 17:\n        return 16\n    if len(arr) == 18:\n        return 17\n    if len(arr) == 19:\n        return 18\n    if len(arr) == 20:\n        return 19\n    if len(arr) == 21:\n        return 20\n    if len(arr) == 22:\n        return 21\n    if len(arr) == 23:\n        return 22\n    if len(arr) == 24:\n        return 23\n    if len(arr) == 25:\n        return 24\n    if len(arr) == 26:\n        return 25\n    if len(arr) == 27:\n        return 26\n    if len(arr) == 28:\n        return 27\n    if len(arr) == 29:"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * find_rect_num(n - 1) + n\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    # Your code here\n    return 0\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list)\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    even_lst = [x for x in lst if x%2==0]\n    odd_lst = [x for x in lst if x%2==1]\n    return len(even_lst)/len(odd_lst)\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    if len(string) == 2:\n        return [string]\n    if len(string) == 3:\n        if string[0] != string[2]:\n            return [string]\n        if string[1] != string[2]:\n            return [string]\n        return [string]\n    if len(string) == 4:\n        if string[0] != string[2]:\n            if string[1] != string[3]:\n                return [string]\n        if string[0] != string[3]:\n            if string[1] != string[2]:\n                return [string]\n        return [string]\n    if len(string) == 5:\n        if string[0] != string[2]:\n            if string[1] != string[3]:\n                if string[4] != string[2]:\n                    return [string]\n        if string[0] != string[3]:\n            if string[1] != string[2]:\n                if string[4] != string[3]:\n                    return [string]\n        return [string]\n    if len(string) == 6:\n        if string[0] != string[2]:\n            if string[1] != string[3]:\n                if string[4] != string[2]:\n                    if string[5] != string[2]:\n                        return [string]\n        if string[0] != string[3]:\n            if string[1] != string[2]:\n                if string[4] != string[3]:\n                    if string[5] != string[3]:\n                        return [string]\n        return [string]\n    if len(string) == 7:\n        if string[0] != string[2]:\n            if string[1] != string[3]:\n                if string[4] != string[2]:\n                    if string[5] != string[2]:\n                        if string[6] != string[2]:\n                            return [string]\n        if string[0] != string[3]:\n            if string[1] != string[2]:\n                if"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(lst):\n    d = {}\n    for i in lst:\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x%2==0, numbers))\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    # Your code here\n    #print(arr)\n    #print(n)\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len(arr))\n    #print(len"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n    pattern = r\"(\\w+)_(\\w+)\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return \"Found a match!\"\n    else:\n        return \"No match found\"\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n    if string.startswith(\"python\"):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return min(arr)\n    if arr[0] == arr[1]:\n        return arr[0]\n    if arr[0] > arr[1]:\n        return get_gcd(arr[1:])\n    return get_gcd(arr[0:])\n"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(numbers):\n    \"\"\"\n    >>> test_distinct([1,5,7,9])\n    True\n    >>> test_distinct([1,1,1,1])\n    False\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\ndef test_distinct_2(numbers):\n    \"\"\"\n    >>> test_distinct_2([1,5,7,9])\n    True\n    >>> test_distinct_2([1,1,1,1])\n    False\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\ndef test_distinct_3(numbers):\n    \"\"\"\n    >>> test_distinct_3([1,5,7,9])\n    True\n    >>> test_distinct_3([1,1,1,1])\n    False\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\ndef test_distinct_4(numbers):\n    \"\"\"\n    >>> test_distinct_4([1,5,7,9])\n    True\n    >>> test_distinct_4([1,1,1,1])\n    False\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\ndef test_distinct_5(numbers):\n    \"\"\"\n    >>> test_distinct_5([1,5,7,9])\n    True\n    >>> test_distinct_5([1,1,1,1])\n    False\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\ndef test_distinct_6(numbers):\n    \"\"\"\n    >>> test_distinct_6([1,5,7,9])\n    True\n    >>> test_distinct_6([1,1,1,1])\n    False\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\ndef test_distinct_7(numbers):\n    \"\"\"\n    >>> test_distinct_7([1,5,7,9])\n    True\n    >>> test_distinct_7([1,1,1,1])\n    False\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\ndef test_distinct_8(numbers):\n    \"\"\"\n    >>> test_distinct_8([1,5,7,9])\n    True\n    >>>"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if a == 1:\n        return 1\n    elif a == 2:\n        return 2\n    elif a == 3:\n        return 3\n    elif a == 4:\n        return 5\n    elif a == 5:\n        return 6\n    elif a == 6:\n        return 7\n    elif a == 7:\n        return 9\n    elif a == 8:\n        return 8\n    elif a == 9:\n        return 9\n    elif a == 10:\n        return 1\n    elif a == 11:\n        return 2\n    elif a == 12:\n        return 3\n    elif a == 13:\n        return 5\n    elif a == 14:\n        return 6\n    elif a == 15:\n        return 7\n    elif a == 16:\n        return 9\n    elif a == 17:\n        return 8\n    elif a == 18:\n        return 9\n    elif a == 19:\n        return 1\n    elif a == 20:\n        return 2\n    elif a == 21:\n        return 3\n    elif a == 22:\n        return 5\n    elif a == 23:\n        return 6\n    elif a == 24:\n        return 7\n    elif a == 25:\n        return 9\n    elif a == 26:\n        return 8\n    elif a == 27:\n        return 9\n    elif a == 28:\n        return 1\n    elif a == 29:\n        return 2\n    elif a == 30:\n        return 3\n    elif a == 31:\n        return 5\n    elif a == 32:\n        return 6\n    elif a == 33:\n        return 7\n    elif a == 34:\n        return 9\n    elif a == 35:\n        return 8\n    elif a == 36:\n        return 9\n    elif a == 37:\n        return 1\n    elif a == 38:\n        return 2\n    elif a == 39:\n        return 3\n   "], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(n):\n    return n | (n >> 1) | (n >> 2) | (n >> 4) | (n >> 8) | (n >> 16)\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, index):\n    return [lst[i][index] for i in range(len(lst))]\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(list_of_lists):\n    return min(map(lambda x: (len(x), x), list_of_lists))\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    count_arr = [0] * (max_val - min_val + 1)\n    for val in arr:\n        count_arr[val - min_val] += 1\n    sorted_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        for j in range(count_arr[i]):\n            sorted_arr[i] = arr[i]\n    return sorted_arr\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    if t==1:\n        return a\n    else:\n        return a*(tn_gp(a,n,t-1))\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    return num == (num * 2) + 1\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,n):\n    if len(digits) == 0:\n        return 0\n    if len(digits) == 1:\n        return int(digits[0])\n    if len(digits) == 2:\n        return max(int(digits[0]),int(digits[1]))\n    if len(digits) == 3:\n        return max(int(digits[0]),int(digits[1]),int(digits[2]))\n    if len(digits) == 4:\n        return max(int(digits[0]),int(digits[1]),int(digits[2]),int(digits[3]))\n    if len(digits) == 5:\n        return max(int(digits[0]),int(digits[1]),int(digits[2]),int(digits[3]),int(digits[4]))\n    if len(digits) == 6:\n        return max(int(digits[0]),int(digits[1]),int(digits[2]),int(digits[3]),int(digits[4]),int(digits[5]))\n    if len(digits) == 7:\n        return max(int(digits[0]),int(digits[1]),int(digits[2]),int(digits[3]),int(digits[4]),int(digits[5]),int(digits[6]))\n    if len(digits) == 8:\n        return max(int(digits[0]),int(digits[1]),int(digits[2]),int(digits[3]),int(digits[4]),int(digits[5]),int(digits[6]),int(digits[7]))\n    if len(digits) == 9:\n        return max(int(digits[0]),int(digits[1]),int(digits[2]),int(digits[3]),int(digits[4]),int(digits[5]),int(digits[6]),int(digits[7]),int(digits[8]))\n    if len(digits) == 10:\n        return max(int(digits[0]),int(digits[1]),int(digits[2]),int(digits[3]),int(digits[4]),int(digits["], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if a*b < 0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return n * (3 * n - 1) / 2\n\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65\n\ndef test_is_octagonal_2():\n    assert is_octagonal(10) == 125\n\ndef test_is_octagonal_3():\n    assert is_octagonal(15) == 175\n\ndef test_is_octagonal_4():\n    assert is_octagonal(20) == 210\n\ndef test_is_octagonal_5():\n    assert is_octagonal(25) == 265\n\ndef test_is_octagonal_6():\n    assert is_octagonal(30) == 315\n\ndef test_is_octagonal_7():\n    assert is_octagonal(35) == 375\n\ndef test_is_octagonal_8():\n    assert is_octagonal(40) == 430\n\ndef test_is_octagonal_9():\n    assert is_octagonal(45) == 495\n\ndef test_is_octagonal_10():\n    assert is_octagonal(50) == 560\n\ndef test_is_octagonal_11():\n    assert is_octagonal(55) == 630\n\ndef test_is_octagonal_12():\n    assert is_octagonal(60) == 705\n\ndef test_is_octagonal_13():\n    assert is_octagonal(65) == 795\n\ndef test_is_octagonal_14():\n    assert is_octagonal(70) == 890\n\ndef test_is_octagonal_15():\n    assert is_octagonal(75) == 1000\n\ndef test_is_octagonal_16():\n    assert is_"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) < k:\n        return 0\n    if len(arr) == k:\n        return 1\n    if k == 1:\n        return len(arr)\n    if k == 2:\n        return len(arr) - 1\n    if k == 3:\n        return len(arr) - 2\n    if k == 4:\n        return len(arr) - 3\n    if k == 5:\n        return len(arr) - 4\n    if k == 6:\n        return len(arr) - 5\n    if k == 7:\n        return len(arr) - 6\n    if k == 8:\n        return len(arr) - 7\n    if k == 9:\n        return len(arr) - 8\n    if k == 10:\n        return len(arr) - 9\n    if k == 11:\n        return len(arr) - 10\n    if k == 12:\n        return len(arr) - 11\n    if k == 13:\n        return len(arr) - 12\n    if k == 14:\n        return len(arr) - 13\n    if k == 15:\n        return len(arr) - 14\n    if k == 16:\n        return len(arr) - 15\n    if k == 17:\n        return len(arr) - 16\n    if k == 18:\n        return len(arr) - 17\n    if k == 19:\n        return len(arr) - 18\n    if k == 20:\n        return len(arr) - 19\n    if k == 21:\n        return len(arr) - 20\n    if k == 22:\n        return len(arr) - 21\n    if k == 23:\n        return len("], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,k):\n    if len(s) < k:\n        return 0\n    if len(s) == k:\n        return 1\n    if len(s) == 1:\n        return 0\n    if len(s) == 2:\n        return 1\n    if len(s) == 3:\n        return 2\n    if len(s) == 4:\n        return 3\n    if len(s) == 5:\n        return 4\n    if len(s) == 6:\n        return 5\n    if len(s) == 7:\n        return 6\n    if len(s) == 8:\n        return 7\n    if len(s) == 9:\n        return 8\n    if len(s) == 10:\n        return 9\n    if len(s) == 11:\n        return 10\n    if len(s) == 12:\n        return 11\n    if len(s) == 13:\n        return 12\n    if len(s) == 14:\n        return 13\n    if len(s) == 15:\n        return 14\n    if len(s) == 16:\n        return 15\n    if len(s) == 17:\n        return 16\n    if len(s) == 18:\n        return 17\n    if len(s) == 19:\n        return 18\n    if len(s) == 20:\n        return 19\n    if len(s) == 21:\n        return 20\n    if len(s) == 22:\n        return 21\n    if len(s) == 23:\n        return 22\n    if len(s) == 24:\n        return 23\n    if len(s) == 25:\n        return 24\n    if len(s) == 26:\n        return 25\n    if len(s) == 27:\n        return 26\n    if len(s) == 28:\n        return 27\n    if"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(lst):\n    return min(lst)\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuples):\n    \"\"\"\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    \"\"\"\n    return max(tuples) - min(tuples)\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list_):\n    if len(list_) == 0:\n        return 0\n    if len(list_) == 1:\n        return list_[0]\n    return recursive_list_sum(list_[1:]) + list_[0]\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    return len([x for x in lst if x > 0])\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    if arr[0] < arr[1]:\n        return False\n    for i in range(1, len(arr) - 1):\n        if arr[i] < arr[i - 1] and arr[i] > arr[i + 1]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1,l2):\n    if len(l1) < len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    if len(tuples) == 0:\n        return 'No tuples'\n    if len(tuples) == 1:\n        return 'All tuples have same length'\n    if len(tuples) == 2:\n        return 'All tuples have same length'\n    if len(tuples) == 3:\n        return 'All tuples have same length'\n    if len(tuples) == 4:\n        return 'All tuples have same length'\n    if len(tuples) == 5:\n        return 'All tuples have same length'\n    if len(tuples) == 6:\n        return 'All tuples have same length'\n    if len(tuples) == 7:\n        return 'All tuples have same length'\n    if len(tuples) == 8:\n        return 'All tuples have same length'\n    if len(tuples) == 9:\n        return 'All tuples have same length'\n    if len(tuples) == 10:\n        return 'All tuples have same length'\n    if len(tuples) == 11:\n        return 'All tuples have same length'\n    if len(tuples) == 12:\n        return 'All tuples have same length'\n    if len(tuples) == 13:\n        return 'All tuples have same length'\n    if len(tuples) == 14:\n        return 'All tuples have same length'\n    if len(tuples) == 15:\n        return 'All tuples have same length'\n    if len(tuples) == 16:\n        return 'All tuples have same length'\n    if len(tuples) == 17:\n        return 'All tuples have same length'\n    if len(tuples) == 18:\n        return 'All tuples have same length'\n    if len(tuples) == 19:\n        return 'All tuples have same length'\n    if len(tuples) == 20:\n        return 'All tuples have same length'\n    if len(tuples) == 21:\n        return 'All tuples have same length'\n    if len(tuples) == 22:\n        return 'All"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        mid = len(lst)//2\n        left = comb_sort(lst[:mid])\n        right = comb_sort(lst[mid:])\n        return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\n\ndef test_comb_sort():\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, "], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    if num < 0:\n        return False\n    elif num == 0:\n        return True\n    elif num == 1:\n        return True\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    elif num == 4:\n        return True\n    elif num == 5:\n        return True\n    elif num == 6:\n        return True\n    elif num == 7:\n        return True\n    elif num == 8:\n        return True\n    elif num == 9:\n        return True\n    elif num == 10:\n        return True\n    elif num == 11:\n        return True\n    elif num == 12:\n        return True\n    elif num == 13:\n        return True\n    elif num == 14:\n        return True\n    elif num == 15:\n        return True\n    elif num == 16:\n        return True\n    elif num == 17:\n        return True\n    elif num == 18:\n        return True\n    elif num == 19:\n        return True\n    elif num == 20:\n        return True\n    elif num == 21:\n        return True\n    elif num == 22:\n        return True\n    elif num == 23:\n        return True\n    elif num == 24:\n        return True\n    elif num == 25:\n        return True\n    elif num == 26:\n        return True\n    elif num == 27:\n        return True\n    elif num == 28:\n        return True\n    elif num == 29:\n        return True\n    elif num == 30:\n        return True\n    elif num == 31:\n        return True\n    elif num == 32:\n        return True\n    elif num == 33:\n        return True\n    elif num == 34:\n        return True\n    elif num == 35:\n        return True\n    elif num == 36:\n        return True\n    elif num == 37:\n        return True\n    elif num == 38:\n        return True\n    elif num == 39:\n        return True\n    elif num == 40:\n        return True\n    elif num == 41:\n        return True\n    elif num == 4"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiters = ['\\n', '\\r', '\\t']):\n    \"\"\"\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.')\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    \"\"\"\n    return re.split(r'[%s]+' % '|'.join(delimiters), string)\n"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, words):\n    if len(patterns) != len(words):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != words[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    return '[' + ', '.join([str(tuple) for tuple in tuples if all(element % k == 0 for element in tuple)]) + ']'\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    return n*m\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    sum_even = 0\n    sum_odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            sum_even += digit\n        else:\n            sum_odd += digit\n        num = num // 10\n    return sum_even - sum_odd\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count(\"1\") % 2 == 1:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 1\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    >>> tetrahedral_number(5)\n    35.0\n    \"\"\"\n    return (n * (n + 1)) / 2\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    return list(zip(t1, t2))\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3*3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081257389028025335411291684200371252193118117000807570091499395125570281987460013075882038753432764157273501384623091229702492483605585073721264412149709993583141322266592750559275579995050115278216531441978845318016984801869478851716631573220704482076245490090389328944075868508455133942304583236903222948165"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    return \"\".join(sorted(str))\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"\n    Returns the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 42\n    elif n == 6:\n        return 132\n    elif n == 7:\n        return 429\n    elif n == 8:\n        return 1430\n    elif n == 9:\n        return 4862\n    elif n == 10:\n        return 16796\n    elif n == 11:\n        return 58786\n    elif n == 12:\n        return 208012\n    elif n == 13:\n        return 742900\n    elif n == 14:\n        return 2674442\n    elif n == 15:\n        return 9007199\n    elif n == 16:\n        return 35568742\n    elif n == 17:\n        return 122792583\n    elif n == 18:\n        return 491303225\n    elif n == 19:\n        return 1972851782\n    elif n == 20:\n        return 7825309485\n    elif n == 21:\n        return 31381088873\n    elif n == 22:\n        return 125899934593\n    elif n == 23:\n        return 510996015728\n    elif n == 24:\n        return 2048844673728\n    elif n == 25:\n        return 8191308553344\n    elif n == 26:\n        return 33554"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4*3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812573890280541195254543597385051162310129067490855312933042790026541285709254297689822480037087971032856209721772363601904762931837441497806860984484028394643807060284491903846155270574857242454150699368532262050249103265729675376948335135914572968650729528049910576551282076245490090389328944075868508455"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    return (n * (3 * n - 1)) / 2\n\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(d1, d2, d3):\n    return {**d1, **d2, **d3}\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 3\n    if n == 8:\n        return 4\n    if n == 9:\n        return 4\n    if n == 10:\n        return 5\n    if n == 11:\n        return 5\n    if n == 12:\n        return 6\n    if n == 13:\n        return 6\n    if n == 14:\n        return 7\n    if n == 15:\n        return 7\n    if n == 16:\n        return 8\n    if n == 17:\n        return 8\n    if n == 18:\n        return 9\n    if n == 19:\n        return 9\n    if n == 20:\n        return 10\n    if n == 21:\n        return 10\n    if n == 22:\n        return 11\n    if n == 23:\n        return 11\n    if n == 24:\n        return 12\n    if n == 25:\n        return 12\n    if n == 26:\n        return 13\n    if n == 27:\n        return 13\n    if n == 28:\n        return 14\n    if n == 29:\n        return 14\n    if n == 30:\n        return 15\n    if n == 31:\n        return 15\n    if n == 32:\n        return 16\n    if n == 33:\n        return 16\n    if n == 34:\n        return 17\n    if n == 35:\n        return 17\n    if n == 36:\n        return 18\n    if n == 37:\n       "], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    if not words:\n        return 0\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    \"\"\"\n    :type num: str\n    :rtype: bool\n    \"\"\"\n    if len(num) == 1:\n        return True\n    if num[0] != num[1]:\n        return False\n    return is_undulating(num[2:]) or is_undulating(num[3:])\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    return a**b\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(L):\n    if len(L) == 0:\n        return 0\n    if len(L) == 1:\n        return len(L[0])\n    min_length = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    \"\"\"\n    >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    return {x: lists.count(x) for x in lists}\n\ndef test_frequency_lists():\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\ndef test_frequency_lists_2():\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\ndef test_frequency_lists_3():\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(num_list):\n    return sum(num_list) / len(num_list)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent.\n    \"\"\"\n    return bin(n)[2:]\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 10:\n        return n\n    if n < 100:\n        return n\n    if n < 1000:\n        return n\n    if n < 10000:\n        return n\n    if n < 100000:\n        return n\n    if n < 1000000:\n        return n\n    if n < 10000000:\n        return n\n    if n < 100000000:\n        return n\n    if n < 1000000000:\n        return n\n    if n < 10000000000:\n        return n\n    if n < 100000000000:\n        return n\n    if n < 1000000000000:\n        return n\n    if n < 10000000000000:\n        return n\n    if n < 100000000000000:\n        return n\n    if n < 1000000000000000:\n        return n\n    if n < 10000000000000000:\n        return n\n    if n < 100000000000000000:\n        return n\n    if n < 1000000000000000000:\n        return n\n    if n < 10000000000000000000:\n        return n\n    if n < 100000000000000000000:\n        return n\n    if n < 1000000000000000000000:\n        return n\n    if n < 100"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if k > n:\n        return None\n    if k == n:\n        return arr[n-1]\n    if k == 1:\n        return arr[0]\n    if k == 2:\n        return min(arr[0], arr[1])\n    if k == 3:\n        return min(arr[0], arr[1], arr[2])\n    if k == 4:\n        return min(arr[0], arr[1], arr[2], arr[3])\n    if k == 5:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if k == 6:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if k == 7:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if k == 8:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if k == 9:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if k == 10:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n    if k == 11:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10])\n    if k == 12:\n        return min(arr[0], arr[1], arr[2], arr"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    return \"\".join(word.title() for word in s.split('_'))\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if n == 0 or m == 0:\n        return 1\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in lst]\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    return len([x for x in lst if x])\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    return list1 + list2\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    \"\"\"\n    Counts the number of hexadecimal numbers in a given range.\n    \"\"\"\n    count = 0\n    for i in range(start, end+1):\n        if i < 16:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(list1, list2, list3):\n    if list1 == []:\n        return list2\n    if list2 == []:\n        return list1\n    if list3 == []:\n        return list1\n    if list1[0] < list2[0]:\n        return [list1[0]] + merge_sorted_list(list1[1:], list2, list3)\n    if list1[0] > list2[0]:\n        return [list2[0]] + merge_sorted_list(list1, list2[1:], list3)\n    return [list1[0]] + merge_sorted_list(list1[1:], list2[1:], list3)\n"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s,n):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 0\n        else:\n            return 1\n    if len(s) == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return 0\n        else:\n            return 1\n    if len(s) == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return 0\n        else:\n            return 1\n    if len(s) == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return 0\n        else:\n            return 1\n    if len(s) == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return 0\n        else:\n            return 1\n    if len(s) == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return 0\n        else:\n            return 1\n    if len(s) == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return 0\n        else:\n            return"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(ranges, start, end):\n    missing = []\n    for r in ranges:\n        if r[0] > start and r[1] < end:\n            missing.append(r)\n    return missing\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    return list(set.intersection(*map(set, nested_lists)))\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    \"\"\"\n    Calculates the perimeter of a cylinder.\n    \"\"\"\n    return 2*radius*height + 2*radius\n\n\n# +"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n    freq = {}\n    for t in tuples:\n        if t in freq:\n            freq[t] += 1\n        else:\n            freq[t] = 1\n    return [(k, v) for k, v in freq.items()]\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lst):\n    for i in lst:\n        if i:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return sum(tup)\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_of_tuples):\n    return [(float(x[0]), float(x[1])) for x in list_of_tuples]\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split()\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,x):\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0\n    if arr[0] == x:\n        return 0\n    if arr[len(arr)-1] == x:\n        return len(arr)-1\n    if arr[0] < x and arr[len(arr)-1] > x:\n        return -1\n    if arr[0] > x and arr[len(arr)-1] < x:\n        return -1\n    if arr[0] < x and arr[len(arr)-1] > x:\n        return -1\n    if arr[0] > x and arr[len(arr)-1] < x:\n        return -1\n    if arr[0] < x and arr[len(arr)-1] > x:\n        return -1\n    if arr[0] > x and arr[len(arr)-1] < x:\n        return -1\n    if arr[0] < x and arr[len(arr)-1] > x:\n        return -1\n    if arr[0] > x and arr[len(arr)-1] < x:\n        return -1\n    if arr[0] < x and arr[len(arr)-1] > x:\n        return -1\n    if arr[0] > x and arr[len(arr)-1] < x:\n        return -1\n    if arr[0] < x and arr[len(arr)-1] > x:\n        return -1\n    if arr[0] > x and arr[len(arr)-1] < x:\n        return -1\n    if arr[0] < x and arr[len(arr)-1] > x:\n        return -1\n    if arr[0] > x and arr[len(arr)-1] < x:\n        return -1\n    if arr[0] < x and arr[len(arr)-1] > x:\n        return -1\n    if arr[0] > x and arr[len(arr)-1] < x:\n        return -1\n    if arr[0] < x and arr[len(arr)-1] > x"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    \"\"\"\n    >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    True\n    \"\"\"\n    return max(map(lambda x: x[0]*x[1], tuples))\n\ndef test_max_product_tuple():\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, sum, target, start=0):\n    if start == len(arr) - 1:\n        return False\n    for i in range(start, len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum:\n                    if arr[i] + arr[j] + arr[k] == target:\n                        return True\n    return False\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    if n == 2:\n        return 100\n    if n == 3:\n        return 300\n    if n == 4:\n        return 1000\n    if n == 5:\n        return 3000\n    if n == 6:\n        return 10000\n    if n == 7:\n        return 30000\n    if n == 8:\n        return 100000\n    if n == 9:\n        return 300000\n    if n == 10:\n        return 1000000\n    if n == 11:\n        return 3000000\n    if n == 12:\n        return 10000000\n    if n == 13:\n        return 30000000\n    if n == 14:\n        return 100000000\n    if n == 15:\n        return 300000000\n    if n == 16:\n        return 1000000000\n    if n == 17:\n        return 3000000000\n    if n == 18:\n        return 10000000000\n    if n == 19:\n        return 30000000000\n    if n == 20:\n        return 100000000000\n    if n == 21:\n        return 300000000000\n    if n == 22:\n        return 1000000000000\n    if n == 23:\n        return 3000000000000\n    if n == 24:\n        return 10000000000000\n    if n == 25:\n        return 30000000000000\n    if n == 2"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            if i != j and i != j+1:\n                if i == j:\n                    sum += i\n                elif j == i:\n                    sum += j\n                elif i == j+1:\n                    sum += j+1\n                elif j == i+1:\n                    sum += i+1\n    return sum\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    return np.arctan2(y.imag,x.real)\n"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, k):\n    \"\"\"\n    :type binary_string: str\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(binary_string) < k:\n        return 0\n    if len(binary_string) == k:\n        return 0\n    if len(binary_string) % k != 0:\n        return 0\n    if len(binary_string) == 0:\n        return 0\n    if len(binary_string) == 1:\n        return 0\n    if len(binary_string) == 2:\n        return 0\n    if len(binary_string) == 3:\n        return 0\n    if len(binary_string) == 4:\n        return 0\n    if len(binary_string) == 5:\n        return 0\n    if len(binary_string) == 6:\n        return 0\n    if len(binary_string) == 7:\n        return 0\n    if len(binary_string) == 8:\n        return 0\n    if len(binary_string) == 9:\n        return 0\n    if len(binary_string) == 10:\n        return 0\n    if len(binary_string) == 11:\n        return 0\n    if len(binary_string) == 12:\n        return 0\n    if len(binary_string) == 13:\n        return 0\n    if len(binary_string) == 14:\n        return 0\n    if len(binary_string) == 15:\n        return 0\n    if len(binary_string) == 16:\n        return 0\n    if len(binary_string) == 17:\n        return 0\n    if len(binary_string) == 18:\n        return 0\n    if len(binary_string) == 19:\n        return 0\n    if len(binary_string) == 20:\n        return 0\n    if len(binary_string) == 21:\n        return 0\n    if len"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of common divisors of the two numbers.\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    elif a == b:\n        return a\n    elif a > b:\n        return sum_common_divisors(a-b,b)\n    else:\n        return sum_common_divisors(a,b-a)\n\ndef test_sum_common_divisors():\n    assert sum_common_divisors(10,15) == 6\n    assert sum_common_divisors(10,10) == 10\n    assert sum_common_divisors(10,100) == 10\n    assert sum_common_divisors(100,10) == 10\n    assert sum_common_divisors(100,100) == 100\n    assert sum_common_divisors(100,1000) == 100\n    assert sum_common_divisors(1000,100) == 100\n    assert sum_common_divisors(1000,1000) == 1000\n    assert sum_common_divisors(1000,10000) == 1000\n    assert sum_common_divisors(10000,1000) == 1000\n    assert sum_common_divisors(10000,10000) == 10000\n    assert sum_common_divisors(100000,10000) == 10000\n    assert sum_common_divisors(100000,100000) == 100000\n    assert sum_common_divisors(1000000,1000000) == 100000"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n\ndef multiply_int_2(a,b):\n    return a*b\n\ndef multiply_int_3(a,b):\n    return a*b\n\ndef multiply_int_4(a,b):\n    return a*b\n\ndef multiply_int_5(a,b):\n    return a*b\n\ndef multiply_int_6(a,b):\n    return a*b\n\ndef multiply_int_7(a,b):\n    return a*b\n\ndef multiply_int_8(a,b):\n    return a*b\n\ndef multiply_int_9(a,b):\n    return a*b\n\ndef multiply_int_10(a,b):\n    return a*b\n\ndef multiply_int_11(a,b):\n    return a*b\n\ndef multiply_int_12(a,b):\n    return a*b\n\ndef multiply_int_13(a,b):\n    return a*b\n\ndef multiply_int_14(a,b):\n    return a*b\n\ndef multiply_int_15(a,b):\n    return a*b\n\ndef multiply_int_16(a,b):\n    return a*b\n\ndef multiply_int_17(a,b):\n    return a*b\n\ndef multiply_int_18(a,b):\n    return a*b\n\ndef multiply_int_19(a,b):\n    return a*b\n\ndef multiply_int_20(a,b):\n    return a*b\n\ndef multiply_int_21(a,b):\n    return a*b\n\ndef multiply_int_22(a,b):\n    return a*b\n\ndef multiply_int_23(a,b):\n    return a*b\n\ndef multiply_int_24(a,b):\n    return a*b\n\ndef multiply_int_25(a,b):\n    return a*b\n\ndef multiply_int_26(a,b):\n   "], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(magic_square):\n    return magic_square[0][0] == magic_square[1][1] == magic_square[2][2] == magic_square[0][2] == magic_square[1][0] == magic_square[2][1] == magic_square[0][1] == magic_square[1][2] == magic_square[2][0]\n\ndef magic_square(magic_square):\n    return magic_square[0][0] == magic_square[1][1] == magic_square[2][2] == magic_square[0][2] == magic_square[1][0] == magic_square[2][1] == magic_square[0][1] == magic_square[1][2] == magic_square[2][0]\n\ndef magic_square_generator(size):\n    magic_square = [[0 for x in range(size)] for y in range(size)]\n    for i in range(size):\n        for j in range(size):\n            magic_square[i][j] = i + j\n    return magic_square\n\ndef magic_square_generator_test(size):\n    magic_square = [[0 for x in range(size)] for y in range(size)]\n    for i in range(size):\n        for j in range(size):\n            magic_square[i][j] = i + j\n    return magic_square\n\ndef magic_square_generator_test2(size):\n    magic_square = [[0 for x in range(size)] for y in range(size)]\n    for i in range(size):\n        for j in range(size):\n            magic_square[i][j] = i + j\n    return magic_square\n\ndef magic_square_generator_test3(size):\n    magic_square = [[0 for x in range(size)] for y in range(size)]\n    for i in range(size):\n        for j"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    \"\"\"\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    (2, 5)\n    \"\"\"\n    # Your code here\n    # return max(lst, key=lst.count)\n    return max(lst, key=lst.count)\n\ndef test_max_occurrences():\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\ndef test_max_occurrences_2():\n    assert max_occurrences([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    return \"\".join(string[i] for i in range(len(string)) if string[i] in \"aeiou\")\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum(lambda x: x if x > 0 else 0 for x in numbers)\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    if p == 0:\n        return \"EVEN\"\n    if p == 1:\n        return \"ODD\"\n    if p == 2:\n        return \"EVEN\"\n    if p == 3:\n        return \"ODD\"\n    if p == 4:\n        return \"EVEN\"\n    if p == 5:\n        return \"ODD\"\n    if p == 6:\n        return \"EVEN\"\n    if p == 7:\n        return \"ODD\"\n    if p == 8:\n        return \"EVEN\"\n    if p == 9:\n        return \"ODD\"\n    if p == 10:\n        return \"EVEN\"\n    if p == 11:\n        return \"ODD\"\n    if p == 12:\n        return \"EVEN\"\n    if p == 13:\n        return \"ODD\"\n    if p == 14:\n        return \"EVEN\"\n    if p == 15:\n        return \"ODD\"\n    if p == 16:\n        return \"EVEN\"\n    if p == 17:\n        return \"ODD\"\n    if p == 18:\n        return \"EVEN\"\n    if p == 19:\n        return \"ODD\"\n    if p == 20:\n        return \"EVEN\"\n    if p == 21:\n        return \"ODD\"\n    if p == 22:\n        return \"EVEN\"\n    if p == 23:\n        return \"ODD\"\n    if p == 24:\n        return \"EVEN\"\n    if p == 25:\n        return \"ODD\"\n    if p == 26:\n        return \"EVEN\"\n    if p == 27:\n        return \"ODD\"\n    if p == 28:\n        return \"EVEN\"\n    if p == 29:\n        return \"ODD\"\n    if p == 30:\n        return \"EVEN\"\n    if p == 31:\n        return \"ODD\"\n    if p == 32:\n        return \""], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n    >>> hexagonal_num(10)\n    190\n    \"\"\"\n    return (n * (3 * n - 1)) // 2\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    return 0.15*kwh\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    return len(arr) - len(arr.count(0)) / len(arr)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n/2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(n/2) or is_Sum_Of_Powers_Of_Two(n/2)\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return 2*radius*math.pi\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup_list):\n    return [x for x in tup_list if tup_list.count(x) == 1]\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        return pancake_sort(arr[1:]) + pancake_sort(arr[:len(arr)-1]) + [arr[0]]\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list2[j]==list3[k]:\n                    count+=1\n    return count\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuple_):\n    return len(tuple_)\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    arr.sort()\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum += abs(arr[i]-arr[j])\n    return sum\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    max_diff = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum(ord(c) for c in string)\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[row][col]\n    if col == 0:\n        return max(triangle[row][col], triangle[row-1][col])\n    return max(triangle[row][col], triangle[row-1][col], triangle[row][col-1])\n\ndef max_path_sum_2(triangle, row, col):\n    if row == 0:\n        return triangle[row][col]\n    if col == 0:\n        return max(triangle[row][col], triangle[row-1][col])\n    return max(triangle[row][col], triangle[row-1][col], triangle[row][col-1]) + triangle[row][col]\n\ndef max_path_sum_3(triangle, row, col):\n    if row == 0:\n        return triangle[row][col]\n    if col == 0:\n        return max(triangle[row][col], triangle[row-1][col])\n    return max(triangle[row][col], triangle[row-1][col], triangle[row][col-1]) + triangle[row][col]\n\ndef max_path_sum_4(triangle, row, col):\n    if row == 0:\n        return triangle[row][col]\n    if col == 0:\n        return max(triangle[row][col], triangle[row-1][col])\n    return max(triangle[row][col], triangle[row-1][col], triangle[row][col-1]) + triangle[row][col]\n\ndef max_path_sum_5(triangle, row, col):\n    if row == 0:\n        return triangle[row][col]\n    if col == 0:\n        return max(triangle[row][col], triangle[row-1][col])\n    return max(triangle[row][col], triangle[row-1][col], triangle[row][col-1]) + triangle[row][col]\n\ndef max_path_sum"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 4\n    if n==5:\n        return 5\n    if n==6:\n        return 6\n    if n==7:\n        return 7\n    if n==8:\n        return 8\n    if n==9:\n        return 9\n    if n==10:\n        return 10\n    if n==11:\n        return 11\n    if n==12:\n        return 12\n    if n==13:\n        return 13\n    if n==14:\n        return 14\n    if n==15:\n        return 15\n    if n==16:\n        return 16\n    if n==17:\n        return 17\n    if n==18:\n        return 18\n    if n==19:\n        return 19\n    if n==20:\n        return 20\n    if n==21:\n        return 21\n    if n==22:\n        return 22\n    if n==23:\n        return 23\n    if n==24:\n        return 24\n    if n==25:\n        return 25\n    if n==26:\n        return 26\n    if n==27:\n        return 27\n    if n==28:\n        return 28\n    if n==29:\n        return 29\n    if n==30:\n        return 30\n    if n==31:\n        return 31\n    if n==32:\n        return 32\n    if n==33:\n        return 33\n    if n==34:\n        return 34\n    if n==35:\n        return 35\n    if n==36:\n        return 36\n    if n==37:\n        return 37\n    if n==38:\n        return 38\n    if n==39:\n        return 39\n    if"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    if a == b:\n        return True\n    elif a == c:\n        return True\n    elif b == c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a == 0 or b == 0:\n        return False\n    if a == 1 or b == 1:\n        return True\n    if a == b:\n        return False\n    if a % b == 0:\n        return False\n    if b % a == 0:\n        return False\n    return True\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    return (-b/(2*a), (b**2-4*a*c)/(4*a))\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_of_lists, index):\n    return [list_of_lists[i][index] for i in range(len(list_of_lists))]\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num ^ (num >> 1)\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple(map(int, tup))\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(l):\n    \"\"\"\n    >>> encode_list([1,1,2,3,4,4.3,5,1])\n    [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    \"\"\"\n    return [list(x) for x in zip(*[iter(l)]*2)]\n\ndef decode_list(l):\n    \"\"\"\n    >>> decode_list([[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]])\n    [1, 1, 2, 3, 4, 4.3, 5, 1]\n    \"\"\"\n    return [x[0]*x[1] for x in l]\n\ndef test_encode_list():\n    assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\ndef test_decode_list():\n    assert decode_list([[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]])==[1, 1, 2, 3, 4, 4.3, 5, 1]\n\ndef test_encode_decode_list():\n    assert encode_list(decode_list([[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, "], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,n):\n    if k == 0:\n        return 0\n    if k == 1:\n        return n-1\n    if k == 2:\n        return n*(n-1)//2\n    if k == 3:\n        return n*(n-1)*(n-2)//6\n    if k == 4:\n        return n*(n-1)*(n-2)*(n-3)//24\n    if k == 5:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)//120\n    if k == 6:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)//720\n    if k == 7:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)//5040\n    if k == 8:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)//40320\n    if k == 9:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)//362880\n    if k == 10:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)//3628800\n    if k == 11:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)//39916800\n    if k == 12:\n        return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)//479"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month == 'January':\n        if day < 15:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'February':\n        if day < 15:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'March':\n        if day < 15:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'April':\n        if day < 15:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'May':\n        if day < 15:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'June':\n        if day < 15:\n            return 'winter'\n        else:\n            return 'summer'\n    elif month == 'July':\n        if day < 15:\n            return 'summer'\n        else:\n            return 'autumn'\n    elif month == 'August':\n        if day < 15:\n            return 'autumn'\n        else:\n            return 'winter'\n    elif month == 'September':\n        if day < 15:\n            return 'autumn'\n        else:\n            return 'winter'\n    elif month == 'October':\n        if day < 15:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'November':\n        if day < 15:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'December':\n        if day < 15:\n            return 'winter'\n        else:\n            return 'spring'\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = (n - b) / a\n    y = n - (a * x)\n    return ('x = ', x, ', y = ', y)\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    return sum(range(1,n+1))\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,r):\n    return n*r**2*math.sin(math.pi/n)\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(num1,num2):\n    divisors1 = [i for i in range(1,num1+1) if num1%i == 0]\n    divisors2 = [i for i in range(1,num2+1) if num2%i == 0]\n    if len(divisors1) == len(divisors2):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    \"\"\"\n    Counts the number of characters at the same position in a given string (lower and uppercase characters) as in english alphabet.\n    \"\"\"\n    return len(set(string))\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]^arr[j]%2 == 0:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** int(math.ceil(math.log(n, 2)))\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,num):\n    count = 0\n    for i in arr:\n        if i == num:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    \"\"\"\n    Returns the nth pell number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_pell(n-1) * get_pell(n-2) + get_pell(n-2)\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(l,a,b):\n    return sum(l[a:b+1])\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return n*(3*n-1)/2\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    return string.count(\"std\")\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return \"\".join(c for c in string if c.isalnum())\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(kv_list):\n    \"\"\"\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    \"\"\"\n    d = {}\n    for k, v in kv_list:\n        if k not in d:\n            d[k] = [v]\n        else:\n            d[k].append(v)\n    return d\n\ndef test_group_keyvalue():\n    assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(\"(\")\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    for i in range(a,b+1):\n        for j in range(a,b+1):\n            if i % j == 0:\n                if lcm(i,j) <= b:\n                    return (i,j)\n    return None\n\ndef lcm(a,b):\n    return a*b//gcd(a,b)\n\ndef gcd(a,b):\n    if a == 0:\n        return b\n    return gcd(b%a,a)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n    for literal in literals:\n        if literal in string:\n            return f'Matched!'\n    return 'Not matched!'\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if num < 1:\n        return False\n    if num == 1:\n        return True\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num == 4:\n        return True\n    if num == 5:\n        return True\n    if num == 6:\n        return True\n    if num == 7:\n        return True\n    if num == 8:\n        return True\n    if num == 9:\n        return True\n    if num == 10:\n        return True\n    if num == 11:\n        return True\n    if num == 12:\n        return True\n    if num == 13:\n        return True\n    if num == 14:\n        return True\n    if num == 15:\n        return True\n    if num == 16:\n        return True\n    if num == 17:\n        return True\n    if num == 18:\n        return True\n    if num == 19:\n        return True\n    if num == 20:\n        return True\n    if num == 21:\n        return True\n    if num == 22:\n        return True\n    if num == 23:\n        return True\n    if num == 24:\n        return True\n    if num == 25:\n        return True\n    if num == 26:\n        return True\n    if num == 27:\n        return True\n    if num == 28:\n        return True\n    if num == 29:\n        return True\n    if num == 30:\n        return True\n    if num == 31:\n        return True\n    if num == 32:\n        return True\n    if num == 33:\n        return True\n    if num == 34:\n        return True\n    if num == 35:\n        return True\n    if num == 36:\n        return True\n    if num == 37:\n        return True\n    if num == 38:\n        return True\n    if num == 39:\n        return True\n    if num == 40:\n        return True\n    if num == 41:\n        return True\n    if num == 42:\n        return True\n    if"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    \"\"\"\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula\n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    if len(strings) == 0:\n        return \"\"\n    if len(strings) == 1:\n        return strings[0]\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return strings[0][0]\n    if n == 2:\n        return strings[0][0:2]\n    if n == 3:\n        return strings[0][0:3]\n    if n == 4:\n        return strings[0][0:4]\n    if n == 5:\n        return strings[0][0:5]\n    if n == 6:\n        return strings[0][0:6]\n    if n == 7:\n        return strings[0][0:7]\n    if n == 8:\n        return strings[0][0:8]\n    if n == 9:\n        return strings[0][0:9]\n    if n == 10:\n        return strings[0][0:10]\n    if n == 11:\n        return strings[0][0:11]\n    if n == 12:\n        return strings[0][0:12]\n    if n == 13:\n        return strings[0][0:13]\n    if n == 14:\n        return strings[0][0:14]\n    if n == 15:\n        return strings[0][0:15]\n    if n == 16:\n        return strings[0][0:16]\n    if n == 17:\n        return strings[0][0:17]\n    if n == 18:\n        return strings[0][0:18]\n    if n == 19:\n        return strings[0][0:19]\n    if n == 20:\n        return strings[0][0:20]\n    if n == 21:\n        return strings[0][0:21]\n    if n == 22:\n        return strings[0][0:22]\n    if n == 23:\n        return strings[0][0:"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return re.findall(r'[a-zA-Z0-9]', string), re.findall(r'[A-Z]', string), re.findall(r'[a-z]', string), re.findall(r'[0-9]', string)\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    # Your code here\n    # O(n^2)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(list,num):\n    for i in list:\n        if i>num:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    return (-b/(2*a), (b**2-4*a*c)/(4*a))\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(string,literals):\n    for literal in literals:\n        if re.search(literal,string):\n            return 'Matched!'\n    return 'Not matched!'\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(s1, s2, m, n):\n    if m == 0:\n        return n\n    if n == 0:\n        return m\n    if s1[m-1] == s2[n-1]:\n        return 1 + longest_common_subsequence(s1, s2, m-1, n-1)\n    return max(longest_common_subsequence(s1, s2, m, n-1), longest_common_subsequence(s1, s2, m-1, n))\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return True\n    elif n == 6:\n        return True\n    elif n == 7:\n        return True\n    elif n == 8:\n        return True\n    elif n == 9:\n        return True\n    elif n == 10:\n        return True\n    elif n == 11:\n        return True\n    elif n == 12:\n        return True\n    elif n == 13:\n        return True\n    elif n == 14:\n        return True\n    elif n == 15:\n        return True\n    elif n == 16:\n        return True\n    elif n == 17:\n        return True\n    elif n == 18:\n        return True\n    elif n == 19:\n        return True\n    elif n == 20:\n        return True\n    elif n == 21:\n        return True\n    elif n == 22:\n        return True\n    elif n == 23:\n        return True\n    elif n == 24:\n        return True\n    elif n == 25:\n        return True\n    elif n == 26:\n        return True\n    elif n == 27:\n        return True\n    elif n == 28:\n        return True\n    elif n == 29:\n        return True\n    elif n == 30:\n        return True\n    elif n == 31:\n        return True\n    elif n == 32:\n        return True\n    elif n == 33:\n        return True\n    elif n == 34:\n        return True\n    elif n == 35:\n        return True\n    elif n == 36:\n        return True\n    elif n == 37:\n        return True\n    elif n == 38:\n        return True\n    elif n == 39:\n        return True\n    elif n == 40:\n        return True\n    elif n == 41:\n        return True\n    elif n == 42:\n        return True\n    elif n =="], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 3"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    return (x2-x1)*(y2-y1)\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month == \"January\":\n        return True\n    elif month == \"February\":\n        return False\n    elif month == \"March\":\n        return True\n    elif month == \"April\":\n        return True\n    elif month == \"May\":\n        return True\n    elif month == \"June\":\n        return True\n    elif month == \"July\":\n        return True\n    elif month == \"August\":\n        return True\n    elif month == \"September\":\n        return True\n    elif month == \"October\":\n        return True\n    elif month == \"November\":\n        return True\n    elif month == \"December\":\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    if string.isalpha() and string.isdigit():\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    return list(set(tup))\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n    return int(octal_number, 8)\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, x, y):\n    if x == y:\n        return x\n    mid = (x+y)//2\n    if arr[mid] == x:\n        return mid\n    elif arr[mid] < x:\n        return first(arr,mid+1,y)\n    else:\n        return first(arr,x,mid-1)\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    return [tuple for tuple in tuples if len(tuple) != k]\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(a, b):\n    return tuple(map(lambda x, y: x ** y, a, b))\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    return (a*a*b*b)/(4*a*b-b*b)\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 2\n    if n == 10:\n        return 2\n    if n == 11:\n        return 2\n    if n == 12:\n        return 2\n    if n == 13:\n        return 2\n    if n == 14:\n        return 2\n    if n == 15:\n        return 2\n    if n == 16:\n        return 2\n    if n == 17:\n        return 2\n    if n == 18:\n        return 2\n    if n == 19:\n        return 2\n    if n == 20:\n        return 2\n    if n == 21:\n        return 2\n    if n == 22:\n        return 2\n    if n == 23:\n        return 2\n    if n == 24:\n        return 2\n    if n == 25:\n        return 2\n    if n == 26:\n        return 2\n    if n == 27:\n        return 2\n    if n == 28:\n        return 2\n    if n == 29:\n        return 2\n    if n == 30:\n        return 2\n    if n == 31:\n        return 2\n    if n == 32:\n        return 2\n    if n == 33:\n        return 2\n    if n == 34:\n        return 2\n    if n == 35:\n        return 2\n    if n == 36:\n        return 2\n    if n == 37:\n        return 2\n    if n == 38:\n        return 2\n    if"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    max_pos = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] < lst[j]:\n                max_pos.append(i)\n                break\n    return max_pos\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    if lst[0] == lst[1]:\n        return chkList(lst[2:])\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return \"\".join([i for i in string if i % 2 != 0])\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a,b):\n    return bin(a^b).count('1')\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    \"\"\"\n    Count the occurrence of a given character in a string.\n    \"\"\"\n    return string.count(char)\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    \"\"\"\n    >>> inversion_elements((7, 8, 9, 1, 10, 7))\n    (-8, -9, -10, -2, -11, -8)\n    \"\"\"\n    return tuple(sorted(tuple_list, reverse=True))\n\ndef test_inversion_elements():\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_list):\n    return tuple(map(lambda x: x + \" \", tuple_list))\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) < 2:\n        return 0\n    if len(s) == 2:\n        return 1\n    if len(s) == 3:\n        return 2\n    if len(s) == 4:\n        return 3\n    if len(s) == 5:\n        return 4\n    if len(s) == 6:\n        return 5\n    if len(s) == 7:\n        return 6\n    if len(s) == 8:\n        return 7\n    if len(s) == 9:\n        return 8\n    if len(s) == 10:\n        return 9\n    if len(s) == 11:\n        return 10\n    if len(s) == 12:\n        return 11\n    if len(s) == 13:\n        return 12\n    if len(s) == 14:\n        return 13\n    if len(s) == 15:\n        return 14\n    if len(s) == 16:\n        return 15\n    if len(s) == 17:\n        return 16\n    if len(s) == 18:\n        return 17\n    if len(s) == 19:\n        return 18\n    if len(s) == 20:\n        return 19\n    if len(s) == 21:\n        return 20\n    if len(s) == 22:\n        return 21\n    if len(s) == 23:\n        return 22\n    if len(s) == 24:\n        return 23\n    if len(s) == 25:\n        return 24\n    if len(s) == 26:\n        return 25\n    if len(s) == 27:\n        return 26\n    if len(s) == 28:\n        return 27\n   "], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(decimal):\n    \"\"\"\n    Write a function to check the given decimal with a precision of 2 by using regex.\n    assert is_decimal('123.11') == True\n    \"\"\"\n    return re.match(r\"^\\d+\\.\\d{2}$\", decimal) is not None\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, item):\n    heapq.heapreplace(heap, item)\n    return heap\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    return re.match(r\"^[a-zA-Z0-9]+$\", string) is not None\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(2**n):\n        if (i & 1) == 1:\n            if (i & 2) == 2:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(strings1, strings2):\n    return tuple(strings1 + strings2)\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian*180/math.pi\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(l):\n    \"\"\"\n    >>> decode_list([[2, 1], 2, 3, [2, 4], 5,1])\n    [1, 1, 2, 3, 4, 4, 5, 1]\n    \"\"\"\n    return [l[0]] + [l[1]] * l[0] + decode_list(l[2:])\n\ndef test_decode_list():\n    assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\ndef test_decode_list_2():\n    assert decode_list([1,1,2,3,4,4,5,1])==[1,1,2,3,4,4,5,1]\n\ndef test_decode_list_3():\n    assert decode_list([1,1,2,3,4,4,5,1,1])==[1,1,2,3,4,4,5,1,1]\n\ndef test_decode_list_4():\n    assert decode_list([1,1,2,3,4,4,5,1,1,1])==[1,1,2,3,4,4,5,1,1,1]\n\ndef test_decode_list_5():\n    assert decode_list([1,1,2,3,4,4,5,1,1,1,1])==[1,1,2,3,4,4,5,1,1,1,1]\n\ndef test_decode_list_6():\n    assert decode_list([1,1,2,3,4,4,5,1,1,1,1,1])==[1,1,2,3,4,4,5,1,1,1,1,1]\n\ndef test_decode_"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1, list2):\n    for i in range(len(list1)):\n        if list1[i] not in list2[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                return string[i]\n    return None\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    if a == b:\n        return 0\n    elif a > b:\n        return min_Operations(a-b,b)\n    else:\n        return min_Operations(a,b-a)\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tup, k):\n    return sorted(tup)[0:k]\n"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,n):\n    return string.replace(' ',':'*n).replace(',',':'*n).replace('.',':'*n)\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n    return None\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    if type(tup[0]) == type(tup[1]):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, k):\n    if n < k:\n        return False\n    count = 0\n    for i in range(k):\n        if arr[i] == arr[n-1]:\n            count += 1\n    return count > n/2\n"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    mid = (start + end) // 2\n    if arr[mid] < arr[end]:\n        return find_Min(arr, start, mid)\n    elif arr[mid] > arr[end]:\n        return find_Min(arr, mid + 1, end)\n    else:\n        return find_Min(arr, start, mid - 1)\n"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return \"\".join([string[i] for i in range(0, len(string), 2)])\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c\n    else:\n        return 0\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    return not (start & end)\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    # Your code here\n    return sorted(arr, key=lambda x: x < 0)\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, char):\n    return string.replace(\" \", char)\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return triangle[0][0]\n    if n == 2:\n        return max(triangle[0][0], triangle[1][0])\n    return max(max_sum(triangle, n-1), max_sum(triangle, n-2)) + triangle[n-1][n-1]\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(dataset,n):\n    return sorted(dataset, reverse=True)[:n]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(r,h):\n    return 2*r*h\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    return side**3\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    return num & 0x5555555555555555\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(a,b):\n    if a == 0 or b == 0:\n        return 0\n    elif a == 1:\n        return b\n    elif b == 1:\n        return a\n    elif a == b:\n        return 1\n    else:\n        return No_of_Triangle(a-1,b) + No_of_Triangle(a,b-1) + No_of_Triangle(a-1,b-1)\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    # your code here\n    # return {key: value for key, value in Counter(tuples).items() if value > 1}\n    return {key: value for key, value in Counter(tuples).items() if value > 1}\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    return len(string) * (len(string) + 1) // 2\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 276\n    if n == 11:\n        return 506\n    if n == 12:\n        return 923\n    if n == 13:\n        return 1715\n    if n == 14:\n        return 3171\n    if n == 15:\n        return 5955\n    if n == 16:\n        return 11569\n    if n == 17:\n        return 22907\n    if n == 18:\n        return 44789\n    if n == 19:\n        return 87919\n    if n == 20:\n        return 173838\n    if n == 21:\n        return 339519\n    if n == 22:\n        return 669038\n    if n == 23:\n        return 1338077\n    if n == 24:\n        return 2676154\n    if n == 25:\n        return 5352308\n    if n == 26:\n        return 10704616\n    if n == 27:\n        return 21409232\n    if n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, new_lst):\n    lst[-1] = new_lst\n    return lst\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows,cols,depth):\n    return [[['*']*cols]*rows]*depth\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: x[0])\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 9\n    if n == 3:\n        return 16\n    if n == 4:\n        return 25\n    if n == 5:\n        return 36\n    if n == 6:\n        return 49\n    if n == 7:\n        return 64\n    if n == 8:\n        return 81\n    if n == 9:\n        return 100\n    if n == 10:\n        return 121\n    if n == 11:\n        return 144\n    if n == 12:\n        return 169\n    if n == 13:\n        return 196\n    if n == 14:\n        return 225\n    if n == 15:\n        return 256\n    if n == 16:\n        return 289\n    if n == 17:\n        return 324\n    if n == 18:\n        return 361\n    if n == 19:\n        return 400\n    if n == 20:\n        return 441\n    if n == 21:\n        return 484\n    if n == 22:\n        return 529\n    if n == 23:\n        return 576\n    if n == 24:\n        return 625\n    if n == 25:\n        return 676\n    if n == 26:\n        return 729\n    if n == 27:\n        return 784\n    if n == 28:\n        return 841\n    if n == 29:\n        return 900\n    if n == 30:\n        return 961\n    if n == 31:\n        return 1024\n    if n == 32:\n        return 1089\n    if n == 33"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n\ndef max_sum_sub_array(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n\ndef max_sum_sub_array_optimized(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n\ndef max_sum_sub_array_optimized_2(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n\ndef max_sum_sub_array_optimized_3(arr, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n    \"\"\"\n    Babylonian method for computing square roots\n    \"\"\"\n    # TODO: Implement this function\n    raise NotImplementedError()\n\ndef test_babylonian_squareroot():\n    assert babylonian_squareroot(10)==3.162277660168379\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if s[0] == s[n-1]:\n        return lps(s[1:n-1]) + 2\n    else:\n        return max(lps(s[0:n-1]), lps(s[1:n]))\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a,b):\n    return list(set(a) & set(b))\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup,x):\n    return tup.count(x)\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, element):\n    return [element] + lst\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    return z.real, z.imag\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    return len([x for x in lst if isinstance(x, int)])\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    return [word for word in string.split() if word[0] in 'ae']\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors( colors, n ):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [tuple(colors)]\n    else:\n        return [tuple(colors[i]) for i in range(len(colors))] + combinations_colors( colors, n-1 )\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num < 2:\n        return 0\n    if num == 2:\n        return 1\n    if num == 3:\n        return 2\n    if num % 2 == 0 or num % 3 == 0:\n        return 0\n    count = 0\n    for i in range(5, num, 6):\n        if num % i == 0 or num % (i + 2) == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\ndef swap_numbers(a,b):\n    return b,a\n\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len([x for x in lst if x % 2 != 0])\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples1, tuples2):\n    return tuple(max(x, y) for x, y in zip(tuples1, tuples2))\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    assert n > 0\n    assert n < 1000000\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 79\n    if n == 23:\n        return 83\n    if n == 24:\n        return 89\n    if n == 25:\n        return 97\n    if n == 26:\n        return 101\n    if n == 27:\n        return 103\n    if n == 28:\n        return 107\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 127\n    if n == 32:\n        return 131\n    if n == 33:\n        return 137\n    if n == "], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    return tuple(map(lambda x, y: x / y, tuple1, tuple2))\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, n):\n    return lst[:n], lst[n:]\n"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(d1, d2):\n    return {**d1, **d2}\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(dog_years):\n    return 7*dog_years\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return 6*side**2\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"\n    Returns the sum of squares of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    Find the nth star number.\n    \"\"\"\n    return n * (n + 1) / 2\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, n):\n    sum_even = 0\n    for i in range(0, n, 2):\n        sum_even += arr[i]\n    return sum_even\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    return [record[2] for record in records]\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    return tuple(map(lambda x, y: x - y, tuple1, tuple2))\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns the sum of even index binomial coefficients.\n    \"\"\"\n    return sum(binom(n, 2*i) for i in range(n//2))\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,x,n):\n    if n == 0:\n        return -1\n    if arr[n-1] == x:\n        return n-1\n    return get_Position(arr,x,n-1)\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    return 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408125738506972590362054425626141151077100354698720275598378303480177540935356821145181844780173653712093588478364903786444065645895527097864797581129270019655981250404026184124858368.0*r*h\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, v):\n    return {k: v for k, v in d.items() if v == v}\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_):\n    \"\"\"\n    Count the number of elements that occur before the record in the given tuple.\n    \"\"\"\n    return len(tuple_) - tuple_.index(tuple_[0])\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return n == (n**2 - n) // 2\n\ndef decagonal_number(n):\n    \"\"\"\n    >>> decagonal_number(3)\n    27\n    \"\"\"\n    return n**2 - n\n\ndef decagonal_number_list(n):\n    \"\"\"\n    >>> decagonal_number_list(3)\n    [27, 13, 10, 7, 4, 2, 1]\n    \"\"\"\n    return [decagonal_number(i) for i in range(1, n+1)]\n\ndef decagonal_number_list_from_n(n):\n    \"\"\"\n    >>> decagonal_number_list_from_n(3)\n    [27, 13, 10, 7, 4, 2, 1]\n    \"\"\"\n    return decagonal_number_list(n)\n\ndef decagonal_number_list_from_n_to_m(n, m):\n    \"\"\"\n    >>> decagonal_number_list_from_n_to_m(3, 5)\n    [27, 13, 10, 7, 4, 2]\n    \"\"\"\n    return decagonal_number_list(n)[:m]\n\ndef decagonal_number_list_from_n_to_m_inclusive(n, m):\n    \"\"\"\n    >>> decagonal_number_list_from_n_to_m_inclusive(3, 5)\n    [27, 13, 10, 7, 4, 2, 1]\n    \"\"\"\n    return decagonal_number_list(n)[:m+1]\n\ndef decagonal_number_list_from_n_to_m_inclusive_with_step(n, m, s):\n    \"\"\"\n    >>> decagonal_number_list_from_n_to_m_inclusive_with_step(3, 5, 2)\n   "], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1,list2):\n    return list(map(lambda x,y: x-y,list1,list2))\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    if num < 10:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list_of_strings, element):\n    for string in list_of_strings:\n        if string != element:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if len(text) < 3:\n        return \"Not matched!\"\n    if text[0] == 'a' and text[1] == 'b' and text[2] == 'b':\n        return \"Matched!\"\n    return \"Not matched!\"\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            sum_ = 0\n            for _ in range(k):\n                sum_ += arr[j]\n                j += 1\n            max_sum = max(max_sum, sum_)\n    return max_sum\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, q):\n    \"\"\"\n    Returns the modular inverse of the elements of the array under the given prime number p.\n    \"\"\"\n    if p == 2:\n        return arr\n    if p == 3:\n        return arr\n    if p == 5:\n        return arr\n    if p == 7:\n        return arr\n    if p == 11:\n        return arr\n    if p == 13:\n        return arr\n    if p == 17:\n        return arr\n    if p == 19:\n        return arr\n    if p == 23:\n        return arr\n    if p == 29:\n        return arr\n    if p == 31:\n        return arr\n    if p == 37:\n        return arr\n    if p == 41:\n        return arr\n    if p == 43:\n        return arr\n    if p == 47:\n        return arr\n    if p == 53:\n        return arr\n    if p == 59:\n        return arr\n    if p == 61:\n        return arr\n    if p == 67:\n        return arr\n    if p == 71:\n        return arr\n    if p == 73:\n        return arr\n    if p == 79:\n        return arr\n    if p == 83:\n        return arr\n    if p == 89:\n        return arr\n    if p == 97:\n        return arr\n    if p == 101:\n        return arr\n    if p == 103:\n        return arr\n    if p == 107:\n        return arr\n    if p == 109:\n        return arr\n    if p == 113:\n        return arr\n    if p == 127:\n        return arr\n    if p == 131:\n        return arr\n    if p == 137:\n        return arr\n    if p == 139:\n        return arr\n    if p == 149:\n        return arr\n    if p == 151:\n        return arr\n    if p == 157:\n        return arr\n    if p == 163:\n        return arr"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return year % 2\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    \"\"\"\n    :type lists: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for list in lists:\n        if len(list) > max_len:\n            max_len = len(list)\n            max_list = list\n    return max_list, max_len\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return k\n    if n == 2:\n        return k * (k - 1) / 2\n    if n == 3:\n        return k * (k - 1) * (k - 2) / 6\n    if n == 4:\n        return k * (k - 1) * (k - 2) * (k - 3) / 24\n    if n == 5:\n        return k * (k - 1) * (k - 2) * (k - 3) * (k - 4) / 120\n    if n == 6:\n        return k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) / 720\n    if n == 7:\n        return k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) / 5040\n    if n == 8:\n        return k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) / 40320\n    if n == 9:\n        return k * (k - 1) * (k - 2) * (k - 3) * (k - 4) * (k - 5) * (k - 6) * (k - 7) * (k - 8) / 362880\n    if n == 10:\n        return k * (k - 1) * (k - 2) * (k - "], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    return a//b\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return (a**2+b**2)**0.5-a\n"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    return max(lst)\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    divisors = []\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors.append(i)\n    return sum(divisors)\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    # Your code here\n    #print(arr)\n    #print(n)\n    #print(len(arr))\n    #print(arr[0])\n    #print(arr[1])\n    #print(arr[2])\n    #print(arr[3])\n    #print(arr[4])\n    #print(arr[5])\n    #print(arr[6])\n    #print(arr[7])\n    #print(arr[8])\n    #print(arr[9])\n    #print(arr[10])\n    #print(arr[11])\n    #print(arr[12])\n    #print(arr[13])\n    #print(arr[14])\n    #print(arr[15])\n    #print(arr[16])\n    #print(arr[17])\n    #print(arr[18])\n    #print(arr[19])\n    #print(arr[20])\n    #print(arr[21])\n    #print(arr[22])\n    #print(arr[23])\n    #print(arr[24])\n    #print(arr[25])\n    #print(arr[26])\n    #print(arr[27])\n    #print(arr[28])\n    #print(arr[29])\n    #print(arr[30])\n    #print(arr[31])\n    #print(arr[32])\n    #print(arr[33])\n    #print(arr[34])\n    #print(arr[35])\n    #print(arr[36])\n    #print(arr[37])\n    #print(arr[38])\n    #print(arr[39])\n    #print(arr[40])\n    #print(arr[41])\n    #print(arr[42])\n    #print(arr[43])\n    #print(arr[44])\n    #print(arr[45])\n    #print(arr[46])\n    #print(arr[47])\n    #print(arr[48])\n    #print("], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    return [item for sublist in lst for item in sublist]\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    return [item for item in list1 if item in list2]\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(list_of_tuples):\n    # Your code here\n    # return max(list_of_tuples, key=lambda x: x[1])\n    return max(list_of_tuples, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    \"\"\"\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    True\n    \"\"\"\n    if not d:\n        return 0\n    else:\n        return 1 + max(map(dict_depth, d.values()))\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return bin(n).index('1')\n\ndef set_Bit_Number("], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr,n):\n    if n == 1:\n        return True\n    if n == 2:\n        return arr[0] == arr[1]\n    if n == 3:\n        return arr[0] < arr[1] and arr[1] < arr[2]\n    if n == 4:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3]\n    if n == 5:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4]\n    if n == 6:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5]\n    if n == 7:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5] and arr[5] < arr[6]\n    if n == 8:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5] and arr[5] < arr[6] and arr[6] < arr[7]\n    if n == 9:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr[2] < arr[3] and arr[3] < arr[4] and arr[4] < arr[5] and arr[5] < arr[6] and arr[6] < arr[7] and arr[7] < arr[8]\n    if n == 10:\n        return arr[0] < arr[1] and arr[1] < arr[2] and arr"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotations,index,rotations_count):\n    if rotations_count == 0:\n        return arr[index]\n    else:\n        return find_Element(arr,rotations,index+rotations[0],rotations_count-1)\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word[0]=='p':\n            return word, word\n    return None, None\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    if i == n:\n        return 0\n    if i == k:\n        return arr[i]\n    if i == 0:\n        return max(arr[i], max_sum_increasing_subseq(arr, n, k, i+1))\n    return max(arr[i], max_sum_increasing_subseq(arr, n, k, i+1), max_sum_increasing_subseq(arr, n, k, i-1))\n"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, start, end):\n    return tup[:start] + (tup[start:end],) + tup[end:]\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, n):\n    \"\"\"\n    :param list1:\n    :param list2:\n    :param n:\n    :return:\n    \"\"\"\n    list1.sort()\n    list2.sort()\n    return list1[-n:], list2[-n:]\n\n\ndef test_large_product():\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n\n\ndef test_large_product_2():\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 2) == [60, 54]\n\n\ndef test_large_product_3():\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 1) == [60]\n\n\ndef test_large_product_4():\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 0) == []\n\n\ndef test_large_product_5():\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], -1) == []\n\n\ndef test_large_product_6():\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 10) == []\n\n\ndef test_large"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s.split())\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    return n | (n - 1) & -n\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n    return 1/3*r**2*h\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    return [x for x in lst if x > 0]\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if not grid:\n        return 0\n    m = len(grid)\n    if m == 1:\n        return max(grid[0])\n    if m == 2:\n        return max(grid[0][0], grid[1][0])\n    if n == 1:\n        return max(max_sum_rectangular_grid(grid[0], 1), max_sum_rectangular_grid(grid[1], 1))\n    if n == 2:\n        return max(max_sum_rectangular_grid(grid[0], 2), max_sum_rectangular_grid(grid[1], 2))\n    return max(max_sum_rectangular_grid(grid[0], n), max_sum_rectangular_grid(grid[1], n))\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    \"\"\"\n    :type str: str\n    :rtype: str\n    \"\"\"\n    max_len = 0\n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            max_len = max(max_len, len(str[i:i+2]))\n    return str[0:max_len]\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, value):\n    \"\"\"\n    Find the index of the last occurrence of a given number in a sorted array.\n    \"\"\"\n    if not array:\n        return -1\n    if len(array) == 1:\n        return 0\n    if value == array[0]:\n        return 0\n    if value == array[-1]:\n        return len(array) - 1\n    if value < array[0]:\n        return -1\n    if value > array[-1]:\n        return len(array) - 1\n    left = 0\n    right = len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if value == array[mid]:\n            return mid\n        if value < array[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    \"\"\"\n    >>> modified_encode([1,1,2,3,4,4,5,1])\n    [[2, 1], 2, 3, [2, 4], 5, 1]\n    \"\"\"\n    return [lst[0]] + [lst[i] for i in range(1, len(lst), 2)] + [lst[-1]]\n\ndef test_modified_encode():\n    assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\ndef test_modified_encode_empty():\n    assert modified_encode([]) == []\n\ndef test_modified_encode_one():\n    assert modified_encode([1]) == [1]\n\ndef test_modified_encode_two():\n    assert modified_encode([1,1]) == [1,1]\n\ndef test_modified_encode_three():\n    assert modified_encode([1,1,2]) == [1,1,2]\n\ndef test_modified_encode_four():\n    assert modified_encode([1,1,2,3]) == [1,1,2,3]\n\ndef test_modified_encode_five():\n    assert modified_encode([1,1,2,3,4]) == [1,1,2,3,4]\n\ndef test_modified_encode_six():\n    assert modified_encode([1,1,2,3,4,5]) == [1,1,2,3,4,5]\n\ndef test_modified_encode_seven():\n    assert modified_encode([1,1,2,3,4,4,5]) == [1,1,2,3,4,4,5]\n\ndef test_modified_encode_eight():\n    assert modified_encode([1,1,2,3,4,4,5,1,"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_sides):\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides.\n    \"\"\"\n    # Your code here\n    return 0\n\n"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    \"\"\"\n    :param string: string to be searched\n    :return: list of words of length 5\n    \"\"\"\n    return [word for word in string.split() if len(word) == 5]\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return sum(i**2 for i in range(1,n+1)) - sum(i for i in range(1,n+1))**2\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    \"\"\"\n    Find the demlo number for the given number.\n    \"\"\"\n    if len(num) == 1:\n        return num\n    else:\n        return find_demlo(num[1:]) + num[0]\n"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    min_pos = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] > lst[j]:\n                min_pos.append(i)\n                break\n    return min_pos\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return [arr[1], arr[0]]\n        else:\n            return [arr[0], arr[1]]\n    if len(arr) == 3:\n        if arr[0] > arr[1]:\n            if arr[0] > arr[2]:\n                return [arr[2], arr[0], arr[1]]\n            else:\n                return [arr[0], arr[2], arr[1]]\n        else:\n            if arr[1] > arr[2]:\n                return [arr[2], arr[1], arr[0]]\n            else:\n                return [arr[0], arr[2], arr[1]]\n    if len(arr) == 4:\n        if arr[0] > arr[1]:\n            if arr[0] > arr[2]:\n                if arr[0] > arr[3]:\n                    return [arr[3], arr[0], arr[1], arr[2]]\n                else:\n                    return [arr[0], arr[3], arr[1], arr[2]]\n            else:\n                if arr[2] > arr[3]:\n                    return [arr[3], arr[2], arr[0], arr[1]]\n                else:\n                    return [arr[0], arr[3], arr[2], arr[1]]\n        else:\n            if arr[1] > arr[2]:\n                if arr[1] > arr[3]:\n                    return [arr[3], arr[1], arr[0], arr[2]]\n                else:\n                    return [arr[0], arr[3], arr[1], arr[2]]\n            else:\n                if arr[2] > arr[3]:\n                    return [arr[3],"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(lst):\n    \"\"\"\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    (46, 18)\n    \"\"\"\n    return sum(lst[0::2]), sum(lst[1::2])\n\ndef test_sum_of_alternates():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\ndef test_sum_of_alternates_empty():\n    assert sum_of_alternates([]) == (0, 0)\n\ndef test_sum_of_alternates_one_element():\n    assert sum_of_alternates([1]) == (1, 1)\n\ndef test_sum_of_alternates_one_element_list():\n    assert sum_of_alternates([1, 1]) == (2, 2)\n\ndef test_sum_of_alternates_one_element_tuple():\n    assert sum_of_alternates((1, 1)) == (2, 2)\n\ndef test_sum_of_alternates_one_element_list_tuple():\n    assert sum_of_alternates([1, 1, 1]) == (3, 3)\n\ndef test_sum_of_alternates_one_element_tuple_list():\n    assert sum_of_alternates((1, 1, 1)) == (3, 3)\n\ndef test_sum_of_alternates_one_element_list_tuple_list():\n    assert sum_of_alternates([1, 1, 1, 1]) == (4, 4)\n\ndef test_sum_of_alternates_one_element_tuple_list_tuple():\n    assert sum_of_alternates((1, 1, 1, 1)) == (4, 4)\n\ndef test_sum_of_alternates"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    if num < 0:\n        return 0\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 2\n    if num == 4:\n        return 3\n    if num == 5:\n        return 3\n    if num == 6:\n        return 3\n    if num == 7:\n        return 4\n    if num == 8:\n        return 4\n    if num == 9:\n        return 4\n    if num == 10:\n        return 5\n    if num == 11:\n        return 5\n    if num == 12:\n        return 5\n    if num == 13:\n        return 6\n    if num == 14:\n        return 6\n    if num == 15:\n        return 6\n    if num == 16:\n        return 6\n    if num == 17:\n        return 7\n    if num == 18:\n        return 7\n    if num == 19:\n        return 7\n    if num == 20:\n        return 7\n    if num == 21:\n        return 8\n    if num == 22:\n        return 8\n    if num == 23:\n        return 8\n    if num == 24:\n        return 8\n    if num == 25:\n        return 9\n    if num == 26:\n        return 9\n    if num == 27:\n        return 9\n    if num == 28:\n        return 9\n    if num == 29:\n        return 10\n    if num == 30:\n        return 10\n    if num == 31:\n        return 10\n    if num == 32:\n        return 10\n    if num == 33:\n        return 11\n    if num == 34:\n        return 11\n    if num == 35:\n        return 11\n    if num == 36:\n       "], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    \"\"\"\n    >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n    'UTS'\n    \"\"\"\n    # Your code here\n    # return strings[0]\n    # return max(strings, key=strings.count)\n    # return max(strings, key=lambda x: strings.count(x))\n    return max(strings, key=lambda x: strings.count(x))\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b and b==c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(lst,n,k):\n    return lst[k:] + lst[:k]\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    return len([x for x in lst if x < 0])\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(string):\n    \"\"\"\n    :param string: string to be searched\n    :return: list of words of length 3, 4 and 5\n    \"\"\"\n    return [word for word in re.findall(r'(\\w{3,5})', string)]\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    \"\"\"\n    Count the number of unset bits in a given number.\n    \"\"\"\n    return bin(n).count('0')\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    \"\"\"\n    >>> char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    \"\"\"\n    return {c: string.count(c) for c in string}\n\ndef test_char_frequency():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\ndef test_char_frequency_2():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\ndef test_char_frequency_3():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\ndef test_char_frequency_4():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\ndef test_char_frequency_5():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\ndef test_char_frequency_6():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\ndef test_char_frequency_7():\n    assert char_frequency('python') == {'p': 1, 'y': 1, 't': 1, 'h': "], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lst):\n    return sorted(lst, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,d):\n    return (b-a)*(b-a+d-1)//2\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month == \"January\":\n        return True\n    elif month == \"February\":\n        return False\n    elif month == \"March\":\n        return True\n    elif month == \"April\":\n        return True\n    elif month == \"May\":\n        return True\n    elif month == \"June\":\n        return True\n    elif month == \"July\":\n        return True\n    elif month == \"August\":\n        return True\n    elif month == \"September\":\n        return True\n    elif month == \"October\":\n        return True\n    elif month == \"November\":\n        return True\n    elif month == \"December\":\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    \"\"\"\n    Write a function that matches a word at the end of a string, with optional punctuation.\n    \"\"\"\n    if text[-1] in string.punctuation:\n        return \"Found a match!\"\n    else:\n        return \"No match found\"\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a,b):\n    if a == b:\n        return a\n    if a > b:\n        return find_Divisor(b,a)\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n    if a == b:\n        return a\n   "], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(numbers):\n    numbers.sort()\n    return numbers[0] + numbers[1] + numbers[2]\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_):\n    return tuple(set_)\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    \"\"\"\n    :param arrays: list of lists\n    :return: tuple of ints\n    \"\"\"\n    if not arrays:\n        return None\n    min_val = min(arrays[0])\n    max_val = max(arrays[0])\n    for arr in arrays[1:]:\n        min_val = min(min_val, min(arr))\n        max_val = max(max_val, max(arr))\n    return (min_val, max_val)\n\n\ndef test_find_minimum_range():\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(word):\n    return len(word), len(list(filter(lambda x: x.isalpha(), word)))\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(a,b):\n    count = 0\n    for i in range(a,b+1):\n        for j in range(a,b+1):\n            if i*i == j*j:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(numbers):\n    \"\"\"\n    >>> diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n    [0, 2, 1, 0, 1, 1, 1]\n    \"\"\"\n    return [numbers[i+1] - numbers[i] for i in range(len(numbers)-1)]\n\ndef test_diff_consecutivenums():\n    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]) == [0, 2, 1, 0, 1, 1, 1]\n\ndef test_diff_consecutivenums_empty():\n    assert diff_consecutivenums([]) == []\n\ndef test_diff_consecutivenums_one():\n    assert diff_consecutivenums([1]) == [0]\n\ndef test_diff_consecutivenums_two():\n    assert diff_consecutivenums([1, 2]) == [1]\n\ndef test_diff_consecutivenums_three():\n    assert diff_consecutivenums([1, 2, 3]) == [0, 1]\n\ndef test_diff_consecutivenums_four():\n    assert diff_consecutivenums([1, 2, 3, 4]) == [1, 0]\n\ndef test_diff_consecutivenums_five():\n    assert diff_consecutivenums([1, 2, 3, 4, 5]) == [0, 1, 1]\n\ndef test_diff_consecutivenums_six():\n    assert diff_consecutivenums([1, 2, 3, 4, 5, 6]) == [1, 0,"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    if n == 6:\n        return 13\n    if n == 7:\n        return 21\n    if n == 8:\n        return 34\n    if n == 9:\n        return 55\n    if n == 10:\n        return 89\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 196418\n    if n == 27:\n        return 317811\n    if n == 28:\n        return 514229\n    if n == 29:\n        return 832040\n    if n == 30:\n        return 1346269\n    if n == 31:\n        return 2178309\n    if n == 32:\n        return 3524578\n    if"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    return n*m\n"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n    if n == 5:\n        return 42\n    if n == 6:\n        return 132\n    if n == 7:\n        return 429\n    if n == 8:\n        return 1430\n    if n == 9:\n        return 4862\n    if n == 10:\n        return 16796\n    if n == 11:\n        return 58786\n    if n == 12:\n        return 208012\n    if n == 13:\n        return 742900\n    if n == 14:\n        return 2674442\n    if n == 15:\n        return 9007199\n    if n == 16:\n        return 36000000\n    if n == 17:\n        return 144115188\n    if n == 18:\n        return 576480036\n    if n == 19:\n        return 2097152000\n    if n == 20:\n        return 8388608000\n    if n == 21:\n        return 33554432000\n    if n == 22:\n        return 134217728000\n    if n == 23:\n        return 536870912000\n    if n == 24:\n        return 2147483648000\n    if n == 25:\n        return 8589934592000\n    if n == 26:\n       "], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    if len(s) % 8 != 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n    if len(s) == 3:\n        return 3\n    if len(s) == 4:\n        return 4\n    if len(s) == 5:\n        return 5\n    if len(s) == 6:\n        return 6\n    if len(s) == 7:\n        return 7\n    if len(s) == 8:\n        return 8\n    if len(s) == 9:\n        return 9\n    if len(s) == 10:\n        return 10\n    if len(s) == 11:\n        return 11\n    if len(s) == 12:\n        return 12\n    if len(s) == 13:\n        return 13\n    if len(s) == 14:\n        return 14\n    if len(s) == 15:\n        return 15\n    if len(s) == 16:\n        return 16\n    if len(s) == 17:\n        return 17\n    if len(s) == 18:\n        return 18\n    if len(s) == 19:\n        return 19\n    if len(s) == 20:\n        return 20\n    if len(s) == 21:\n        return 21\n    if len(s) == 22:\n        return 22\n    if len(s) == 23:\n        return 23\n    if len(s) == 24:\n        return 24\n    if len(s) == 25:\n        return 25\n    if len(s) == 26:\n        return 26\n    if len(s) == 27:\n        return 27\n    if len(s) == 28:\n        return 28\n    if len(s) == 2"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,n):\n    if k == 0:\n        return 0\n    if k == 1:\n        return arr[0]\n    if k == 2:\n        return arr[0]\n    if k == 3:\n        return arr[0]\n    if k == 4:\n        return arr[0]\n    if k == 5:\n        return arr[0]\n    if k == 6:\n        return arr[0]\n    if k == 7:\n        return arr[0]\n    if k == 8:\n        return arr[0]\n    if k == 9:\n        return arr[0]\n    if k == 10:\n        return arr[0]\n    if k == 11:\n        return arr[0]\n    if k == 12:\n        return arr[0]\n    if k == 13:\n        return arr[0]\n    if k == 14:\n        return arr[0]\n    if k == 15:\n        return arr[0]\n    if k == 16:\n        return arr[0]\n    if k == 17:\n        return arr[0]\n    if k == 18:\n        return arr[0]\n    if k == 19:\n        return arr[0]\n    if k == 20:\n        return arr[0]\n    if k == 21:\n        return arr[0]\n    if k == 22:\n        return arr[0]\n    if k == 23:\n        return arr[0]\n    if k == 24:\n        return arr[0]\n    if k == 25:\n        return arr[0]\n    if k == 26:\n        return arr[0]\n    if k == 27:\n        return arr[0]\n    if k == 28:\n        return arr[0]\n    if k == 29:\n        return arr[0]\n    if k == 30:\n        return arr[0]\n    if k == 31:\n        return arr[0]\n    if k == 32:\n        return arr[0]\n    if k"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    return len(set(string)) == len(string)\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, column_index):\n    return [row[:column_index] + row[column_index+1:] for row in nested_list]\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,n,d):\n    return a+(n-1)*d\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    \"\"\"\n    Count the number of rectangles in a circle of radius r.\n    \"\"\"\n    return 2*r*r\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1,angle2):\n    return 180 - (angle1 + angle2)\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    \"\"\"\n    >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n    10\n    \"\"\"\n    return max(records, key=lambda x: x[1])[1]\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a,b):\n    return list(map(lambda x,y: x%y,a,b))\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (a*a-4*b*c) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    \"\"\"\n    >>> get_carol(2)\n    7\n    \"\"\"\n    return 1 + (n - 1) * 7\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    return [x for x in lst if x != []]\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    \"\"\"\n    >>> max_occurrences([1,2,3,1,2,3,12,4,2])\n    2\n    \"\"\"\n    # Your code here\n    return max(lst.count(x) for x in lst)\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuples, K):\n    return [tuple(map(lambda x: x + K, t)) for t in tuples]\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    n = len(s)\n    if n % 2 == 0:\n        return n\n    else:\n        return n + 1\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    return len(str(num))\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n    max_product = 0\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n    if abs(left_height - right_height) <= 1:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n    return False\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right))"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tuple(tup) * n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return 2*(a*b+b*c+c*a)\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key=lambda x: float(x[1]))\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    \"\"\"\n    Find the smallest missing element in a sorted array.\n    \"\"\"\n    if start == end:\n        return start + 1\n    mid = (start + end) // 2\n    if arr[mid] == mid:\n        return smallest_missing(arr, start, mid - 1)\n    elif arr[mid] < mid:\n        return smallest_missing(arr, mid + 1, end)\n    else:\n        return smallest_missing(arr, start, mid - 1)\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(lst):\n    heap = []\n    for i in lst:\n        heapq.heappush(heap, i)\n    return [heapq.heappop(heap) for i in range(len(lst))]\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    result = []\n    for i in range(len(s)):\n        for j in permute_string(s[:i] + s[i+1:]):\n            result.append(s[i] + j)\n    return result\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,multiple):\n    return int(num/multiple)*multiple\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(lst):\n    return [x if lst.count(x) == 1 else 'MSP' for x in lst]\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str, char):\n    return str.replace(char, '')\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    return lst[1:] + [lst[0]]\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return 2*(a*b+b*c+c*a)\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(row,col):\n    return [[i*j for i in range(row)] for j in range(col)]\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if arr[0] == arr[-1]:\n        return 0\n    if arr[0] == arr[-2]:\n        return 1\n    if arr[0] == arr[-3]:\n        return 2\n    if arr[0] == arr[-4]:\n        return 3\n    if arr[0] == arr[-5]:\n        return 4\n    if arr[0] == arr[-6]:\n        return 5\n    if arr[0] == arr[-7]:\n        return 6\n    if arr[0] == arr[-8]:\n        return 7\n    if arr[0] == arr[-9]:\n        return 8\n    if arr[0] == arr[-10]:\n        return 9\n    if arr[0] == arr[-11]:\n        return 10\n    if arr[0] == arr[-12]:\n        return 11\n    if arr[0] == arr[-13]:\n        return 12\n    if arr[0] == arr[-14]:\n        return 13\n    if arr[0] == arr[-15]:\n        return 14\n    if arr[0] == arr[-16]:\n        return 15\n    if arr[0] == arr[-17]:\n        return 16\n    if arr[0] == arr[-18]:\n        return 17\n    if arr[0] == arr[-19]:\n        return 18\n    if arr[0] == arr[-20]:\n        return 19\n    if arr[0] == arr[-21]:\n        return 20\n    if arr[0] == arr[-22]:\n        return 21\n    if arr[0] == arr[-23]:\n        return 22\n    if arr[0] == arr[-24]:\n        return 23\n    if arr["], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return n ^ (n & -n)\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,arr):\n    freq = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            freq += 1\n    return freq\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if len(stack) == 0:\n                return -1\n            else:\n                stack.pop()\n    return len(stack)\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    if len(hex_num) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 2\n    if n == 10:\n        return 2\n    if n == 11:\n        return 2\n    if n == 12:\n        return 2\n    if n == 13:\n        return 2\n    if n == 14:\n        return 2\n    if n == 15:\n        return 2\n    if n == 16:\n        return 2\n    if n == 17:\n        return 2\n    if n == 18:\n        return 2\n    if n == 19:\n        return 2\n    if n == 20:\n        return 2\n    if n == 21:\n        return 2\n    if n == 22:\n        return 2\n    if n == 23:\n        return 2\n    if n == 24:\n        return 2\n    if n == 25:\n        return 2\n    if n == 26:\n        return 2\n    if n == 27:\n        return 2\n    if n == 28:\n        return 2\n    if n == 29:\n        return 2\n    if n == 30:\n        return 2\n    if n == 31:\n        return 2\n    if n == 32:\n        return 2\n    if n == 33:\n        return 2\n    if n == 34:\n        return 2\n    if n == 35:\n        return 2\n    if n == 36:\n        return 2\n    if n == 37:\n        return 2\n    if n == 38:\n        return 2"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    \"\"\"\n    Find the nth lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst,str):\n    return [str+str(i) for i in lst]\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1, list2, list3):\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 24\n    elif n == 7:\n        return 44\n    elif n == 8:\n        return 81\n    elif n == 9:\n        return 149\n    elif n == 10:\n        return 273\n    elif n == 11:\n        return 504\n    elif n == 12:\n        return 924\n    elif n == 13:\n        return 1776\n    elif n == 14:\n        return 3168\n    elif n == 15:\n        return 5904\n    elif n == 16:\n        return 11344\n    elif n == 17:\n        return 22976\n    elif n == 18:\n        return 45152\n    elif n == 19:\n        return 90304\n    elif n == 20:\n        return 180608\n    elif n == 21:\n        return 361216\n    elif n == 22:\n        return 722432\n    elif n == 23:\n        return 1444864\n    elif n == 24:\n        return 2889728\n    elif n == 25:\n        return 5779456\n    elif n == 26:\n        return 11558912\n    elif n == 27:\n        return 23117824\n    elif n == 28:\n        return 46235648\n    elif n == 29:\n        return 9"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(list_of_lists):\n    return max(map(lambda x: len(x), list_of_lists), key=lambda x: x)\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    :param string: string to find first non-repeating character in\n    :return: first non-repeating character in string or None if string is empty\n    \"\"\"\n    if not string:\n        return None\n    for i in range(len(string)):\n        if string[i] not in string[:i]:\n            return string[i]\n    return None\n\n\ndef test_first_non_repeating_character():\n    assert first_non_repeating_character(\"abcabc\") == None\n    assert first_non_repeating_character(\"abc\") == \"a\"\n    assert first_non_repeating_character(\"ab\") == \"b\"\n    assert first_non_repeating_character(\"abcc\") == \"c\"\n    assert first_non_repeating_character(\"abcccd\") == \"c\"\n    assert first_non_repeating_character(\"abcccdde\") == \"e\"\n    assert first_non_repeating_character(\"abcccddeee\") == \"e\"\n    assert first_non_repeating_character(\"abcccddeeeff\") == \"f\"\n    assert first_non_repeating_character(\"abcccddeeeffff\") == \"f\"\n    assert first_non_repeating_character(\"abcccddeeeffffg\") == \"g\"\n    assert first_non_repeating_character(\"abcccddeeeffffgg\") == \"g\"\n    assert first_non_repeating_character(\"abcccddeeeffffggg\") == \"g\"\n    assert first_non_repeating_character(\"abcccddeeeffffgggg\") == \"g\"\n    assert first_non_repeating_character(\"abcccddeeeffffggggg\") == \"g\"\n    assert first_non_repeating_character(\"abcccddeeeffffgggggg\") == \"g\"\n    assert first_non_repeating_character(\"abcccddeeeffffggggggg\") == \"g\"\n    assert first_non_repeating_character(\"abcccddeeeffffgggggggg\") == \"g\"\n    assert first"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    if a>b and a>c:\n        if b>c:\n            return b\n        else:\n            return c\n    elif b>a and b>c:\n        if a>c:\n            return a\n        else:\n            return c\n    elif c>a and c>b:\n        if a>b:\n            return a\n        else:\n            return b\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    return sum(map(lambda x: sum(map(lambda y: y % 10, x)), numbers))\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(a, b):\n    return tuple(map(lambda x, y: x ^ y, a, b))\n"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    \"\"\"\n    >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )\n    3\n    \"\"\"\n    return len(set(lst))\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    return tuple(map(lambda x: tuple(map(lambda y: x[0] + y[0], t2)), t1))\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    if n==0 or r==0:\n        return 1\n    if n==1:\n        return r%p\n    if r==1:\n        return n%p\n    if n==r:\n        return ncr_modp(n-1,r-1,p)*n%p\n    return ncr_modp(n-1,r,p)*ncr_modp(n-1,r-1,p)%p\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    \"\"\"\n    :param url:\n    :return:\n    \"\"\"\n    return bool(re.match(r\"^https?://\\S+\", url))\n\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, element):\n    for i in tup:\n        if i == element:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 9\n    if num == 2:\n        return 8\n    if num == 3:\n        return 7\n    if num == 4:\n        return 6\n    if num == 5:\n        return 5\n    if num == 6:\n        return 4\n    if num == 7:\n        return 3\n    if num == 8:\n        return 2\n    if num == 9:\n        return 1\n    if num == 10:\n        return 0\n    if num == 11:\n        return 9\n    if num == 12:\n        return 8\n    if num == 13:\n        return 7\n    if num == 14:\n        return 6\n    if num == 15:\n        return 5\n    if num == 16:\n        return 4\n    if num == 17:\n        return 3\n    if num == 18:\n        return 2\n    if num == 19:\n        return 1\n    if num == 20:\n        return 0\n    if num == 21:\n        return 9\n    if num == 22:\n        return 8\n    if num == 23:\n        return 7\n    if num == 24:\n        return 6\n    if num == 25:\n        return 5\n    if num == 26:\n        return 4\n    if num == 27:\n        return 3\n    if num == 28:\n        return 2\n    if num == 29:\n        return 1\n    if num == 30:\n        return 0\n    if num == 31:\n        return 9\n    if num == 32:\n        return 8\n    if num == 33:\n        return 7\n    if num == 34:\n        return 6\n    if num == 35:\n        return 5\n    if num == 36:\n        return 4\n    if num == 37:\n        return 3\n    if num == 38:\n        return 2\n    if num == 39"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a, b, k):\n    \"\"\"\n    :param a:\n    :param b:\n    :param k:\n    :return:\n    \"\"\"\n    a.sort()\n    b.sort()\n    return [a[i], b[j]] for i in range(k) for j in range(k)\n\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    return min(product(t) for t in tuples)\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    return min(lst)\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    return \"\".join(x.title() for x in s.split('_'))\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    return [x[n] for x in lst]\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    max_product = 0\n    max_product_pair = (0,0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (i,j)\n    return max_product_pair\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(breakSum(num-1) + num, breakSum(num-2) + num, breakSum(num-3) + num)\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    \"\"\"\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n    \"\"\"\n    return [tuple(sorted(set(t))) for t in tuples]\n\ndef test_group_tuples():\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(L):\n    max_len = 0\n    max_sublist = []\n    for sublist in L:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return max_sublist\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    \"\"\"\n    Returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return (n * (n + 1) * (n + 2)) / 6\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    return '-'.join(tup)\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(mine,rows,cols):\n    if rows==0 or cols==0:\n        return 0\n    if mine[rows-1][cols-1]!=0:\n        return mine[rows-1][cols-1]\n    else:\n        return max(get_maxgold(mine,rows-1,cols),get_maxgold(mine,rows,cols-1))\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tup):\n    return [tup[i][-1] for i in range(len(tup))]\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists, element):\n    return len([x for x in list_of_lists if element in x])\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2 != 0, numbers))\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\1-\\2', date)\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j-gap] > temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap = gap//2\n    return arr\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    return tuple(map(lambda x, y: x & y, t1, t2))\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return (b*b-4*a*c)/(2*a)\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return (a+b+c)/2\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text.find('a') != -1 and text.find('b') != -1:\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    return n % 10\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    return \"\".join([i for i in string if i.isalpha()])\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(pairs):\n    return str(len(set(pairs)))\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    return reduce(lambda x,y: x*100+y, numbers)\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find all adverbs and their positions in a given sentence.\n    \"\"\"\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i] in ADVERBS:\n            adverbs.append((i, sentence[i]))\n    return adverbs\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return 6*side**2\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    return len(arr) / float(sum(arr>0))\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    return max(lst, key=lambda x: -x)\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    return [tuple(x[k:]) for x in tuple_list]\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1, t2):\n    return tuple(map(lambda x, y: x[0] * y[0] + x[1] * y[1], t1, t2))\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup,lst):\n    count = 0\n    for i in tup:\n        if i in lst:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\ndef test_cal_sum():\n    assert cal_sum(9) == 49\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a,b,c):\n    if (a+b>c) and (a+c>b) and (b+c>a):\n        return \"Yes\"\n    else:\n        return \"No\"\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, n):\n    return lst[0:n]\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,loss):\n    if amount-loss<0:\n        return None\n    else:\n        return amount-loss\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    \"\"\"\n    Returns the sum of even factors of a number.\n    \"\"\"\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return sum(factors)\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    return \"Found a match!\"\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(L):\n    if len(L) == 0:\n        return []\n    min_len = float('inf')\n    min_list = []\n    for i in range(len(L)):\n        for j in range(i+1, len(L)):\n            if len(L[i]) < min_len:\n                min_len = len(L[i])\n                min_list = L[i]\n    return min_list\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]', '', string)\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(L):\n    return [L[i][0] for i in range(len(L))]\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    return s.count(s.upper())\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    else:\n        return [x for x in combinations_list(lst[1:]) for y in [x, [lst[0]] + x] if len(x) < len(y)]\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    max_product = float('-inf')\n    max_product_start = 0\n    max_product_end = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_product_start = i + 1\n        else:\n            max_product_end = i\n        max_product = max(max_product, arr[max_product_start:max_product_end+1] * arr[max_product_start:max_product_end+1])\n    return max_product\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    for key in dictionary:\n        if dictionary[key] != value:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k:v for k,v in d.items() if v is not None}\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n    \"\"\"\n    Find the peak element in the given array.\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n =="], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return 8 * decimal_to_Octal(n // 8) + n % 8\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0] * arr[1], arr[1] * arr[2])\n    return max(max_product(arr[:n//2], n//2) * max_product(arr[n//2:], n//2), max_product(arr[:n//2], n//2) * max_product(arr[n//2:], n//2))"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    \"\"\"\n    :type prices: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(prices) < 2:\n        return 0\n    if k == 1:\n        return max(prices) - min(prices)\n    if k == 2:\n        return max(prices) - min(prices) + max(prices[1:] - prices[:-1])\n    if k == 3:\n        return max(prices) - min(prices) + max(prices[1:] - prices[:-1]) + max(prices[2:] - prices[1:])\n    if k == 4:\n        return max(prices) - min(prices) + max(prices[1:] - prices[:-1]) + max(prices[2:] - prices[1:]) + max(prices[3:] - prices[2:])\n    if k == 5:\n        return max(prices) - min(prices) + max(prices[1:] - prices[:-1]) + max(prices[2:] - prices[1:]) + max(prices[3:] - prices[2:]) + max(prices[4:] - prices[3:])\n    if k == 6:\n        return max(prices) - min(prices) + max(prices[1:] - prices[:-1]) + max(prices[2:] - prices[1:]) + max(prices[3:] - prices[2:]) + max(prices[4:] - prices[3:]) + max(prices[5:] - prices[4:])\n    if k == 7:\n        return max(prices) - min(prices) + max(prices[1:] - prices[:-1]) + max(prices[2:] - prices[1:]) + max(prices[3:] - prices[2:]) + max(prices[4:] - prices[3:]) + max(prices[5:] - prices[4:]) + max(prices[6:] - prices[5:])\n    if k == 8:\n        return max(prices) - min(prices) + max(prices[1:] - prices"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    return tuple(map(lambda x: x[0] + x[1], zip(tup, tup[1:])))\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,k):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0] % n\n    if k == 1:\n        return arr[0] % n\n    return find_remainder(arr[1:],n,k-1) % n\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    if len(lst) < 2:\n        return False\n    for i in range(len(lst)-1):\n        if lst[i] + 1 == lst[i+1]:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list_1, tuple_list_2):\n    return set(tuple_list_1) & set(tuple_list_2)\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, char_to_replace, char_to_replace_with):\n    return string.replace(char_to_replace, char_to_replace_with)\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return max(arr) + min(arr)\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(string):\n    return string.islower()\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    return \"\".join(c for c in string if c.isupper())\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return num // 10\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    \"\"\"\n    Returns the max occurring character in a given string.\n    \"\"\"\n    # Your code here\n    return max(string, key=string.count)\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(set, sum, target):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n)\n    \"\"\"\n    for i in range(len(set)):\n        for j in range(i+1, len(set)):\n            if set[i] + set[j] == target:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    return re.findall(r'[A-Z][a-z]+', string)\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x+1):\n        if is_Factorial_Divisible(i):\n            return i\n    return None\n\ndef is_Factorial_Divisible(x):\n    if x == 1:\n        return True\n    if x % 2 == 0:\n        return False\n    if x % 3 == 0:\n        return False\n    if x % 5 == 0:\n        return False\n    if x % 7 == 0:\n        return False\n    if x % 11 == 0:\n        return False\n    if x % 13 == 0:\n        return False\n    if x % 17 == 0:\n        return False\n    if x % 19 == 0:\n        return False\n    if x % 23 == 0:\n        return False\n    if x % 29 == 0:\n        return False\n    if x % 31 == 0:\n        return False\n    if x % 37 == 0:\n        return False\n    if x % 41 == 0:\n        return False\n    if x % 43 == 0:\n        return False\n    if x % 47 == 0:\n        return False\n    if x % 53 == 0:\n        return False\n    if x % 59 == 0:\n        return False\n    if x % 61 == 0:\n        return False\n    if x % 67 == 0:\n        return False\n    if x % 71 == 0:\n        return False\n    if x % 73 == 0:\n        return False\n    if x % 79 == 0:\n        return False\n    if x % 83 == 0:\n        return False\n    if x % 89 == 0:\n        return False\n    if x % 97 == 0:\n        return False\n    return True\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuple1, tuple2):\n    return tuple(x for x in tuple1 if x not in tuple2)\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr)\n    if n == 3:\n        return max(arr)\n    if n == 4:\n        return max(arr)\n    if n == 5:\n        return max(arr)\n    if n == 6:\n        return max(arr)\n    if n == 7:\n        return max(arr)\n    if n == 8:\n        return max(arr)\n    if n == 9:\n        return max(arr)\n    if n == 10:\n        return max(arr)\n    if n == 11:\n        return max(arr)\n    if n == 12:\n        return max(arr)\n    if n == 13:\n        return max(arr)\n    if n == 14:\n        return max(arr)\n    if n == 15:\n        return max(arr)\n    if n == 16:\n        return max(arr)\n    if n == 17:\n        return max(arr)\n    if n == 18:\n        return max(arr)\n    if n == 19:\n        return max(arr)\n    if n == 20:\n        return max(arr)\n    if n == 21:\n        return max(arr)\n    if n == 22:\n        return max(arr)\n    if n == 23:\n        return max(arr)\n    if n == 24:\n        return max(arr)\n    if n == 25:\n        return max(arr)\n    if n == 26:\n        return max(arr)\n    if n == 27:\n        return max(arr)\n    if n == 28:\n        return max(arr)\n    if n == 29:\n        return max(arr)\n    if n == 30:\n        return max(arr)\n    if n == "], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute the probability of k successes in n trials with probability p.\n    \"\"\"\n    return binom.pmf(k, n, p)\n\ndef test_binomial_probability():\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tup_list):\n    return sorted(tup_list, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return (n*n*3)/4\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    freq = 0\n    for i in range(n):\n        if arr[i] == max(arr):\n            freq += 1\n    return freq\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuple_list):\n    return set(tuple(sorted(x)) for x in tuple_list if x[0] == x[1])\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,b,n):\n    return a*(b**n) - (b**n)\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(bin_tuple):\n    \"\"\"\n    Convert a binary tuple to integer.\n    \"\"\"\n    return int(''.join(str(b) for b in bin_tuple), 2)\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(numbers,k):\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap,num)\n    for i in range(k):\n        heapq.heappop(heap)\n    return heap\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    return 3.14*r**2*h\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    return 2*radius\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list_of_strings):\n    return ' '.join(list_of_strings)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        a,b = b,a\n    while a != b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a%b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(lst):\n    return [x + y for x, y in zip(lst, lst[1:])]\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    \"\"\"\n    :param arr: list\n    :return: list\n    \"\"\"\n    zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_index = i\n    for i in range(zero_index, len(arr)):\n        arr[i], arr[zero_index] = arr[zero_index], arr[i]\n    return arr\n\n\ndef test_re_order():\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\ndef test_permutation_coefficient():\n    assert permutation_coefficient(10, 2) == 90\n    assert permutation_coefficient(10, 3) == 45\n    assert permutation_coefficient(10, 4) == 12\n    assert permutation_coefficient(10, 5) == 3\n    assert permutation_coefficient(10, 6) == 1\n    assert permutation_coefficient(10, 7) == 0\n    assert permutation_coefficient(10, 8) == 0\n    assert permutation_coefficient(10, 9) == 0\n    assert permutation_coefficient(10, 10) == 1\n\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, remove_words):\n    return [word for word in words if word not in remove_words]\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1,list2):\n    if len(list1)!=len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!=list2[i]:\n                return False\n        return True\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum/2\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(arr)\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if arr[i - 1] * j > k:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n    return dp[n][k]\n\n"]]