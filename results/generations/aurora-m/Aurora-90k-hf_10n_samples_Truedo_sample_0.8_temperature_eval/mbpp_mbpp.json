[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,character):\n    # Your code goes here\n    return string.replace(character,'')\n\n# # remove_Occ(string,character) returns a string\n# assert type(remove_Occ(\"hello\",\"l\")) == str\n\n# # remove_Occ(string,character) returns string with no space\n# assert remove_Occ(\" hello\", \" \") == \"hello\"\n\n# # remove_Occ(string,character) returns string with no special character\n# assert remove_Occ(\"!#%^$&*\", \"!\") == \"#%^$&*\"\n\n# # remove_Occ(string,character) returns string with only alphabets\n# assert remove_Occ(\"hello\", \"123\") == \"hello\"\n\n# # remove_Occ(string,character) returns string with only alphabets\n# assert remove_Occ(\"hello123\", \"123\") == \"hello\"\n\n# # remove_Occ(string,character) returns string with only alphabets\n# assert remove_Occ(\"123hello\", \"123\") == \"hello\"\n\n# # remove_Occ(string,character) returns string with only alphabets\n# assert remove_Occ(\"123hello123\", \"123\") == \"hello123\"\n\n# # remove_Occ(string,character) returns string with only alphabets\n# assert remove_Occ(\"123123hello123\", \"123\") == \"123hello123\"", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string,ch):\n    n = string.count(ch)\n    return string[:len(string)-n]+string[len(string)-n+1:]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, character):\n    return string.replace(string[0],\"\").replace(string[-1],\"\").replace(character, \"\")\n\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string,char):\n    s=string[1:-1]\n    return s", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str,ch):\n    return str[1:-1]\n    ", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(input_str, char):\n    #Write your code here\n    return input_str[1:-1]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, char):\n    # your code here\n    return string[1:-1]\n\n#Test Case", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str, ch):\n    count = 0\n    str_new = \"\"\n    for i in str:\n        if i == ch:\n            count += 1\n        elif count > 0:\n            count -= 1\n        else:\n            str_new += i\n    return str_new\n\n# Test", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, ch):\n    string_new = \"\"\n    length = len(string)\n    for i in range(length):\n        if string[i] != ch:\n            string_new += string[i]\n    return string_new", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str, c):\n    count = str.count(c)\n    if count==1:\n        return str.replace(c, \"\")\n    elif count==0:\n        return str\n    else:\n        return str.replace(c, \"\", count-1)\n\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(m):\n    return sorted(m, key=lambda x: sum(x))\n\ndef sort_matrix_recursive(m):\n    if len(m) == 1:\n        return m\n    middle = len(m)//2\n    left = sort_matrix_recursive(m[:middle])\n    right = sort_matrix_recursive(m[middle:])\n    return sorted(left + right, key=lambda x: sum(x))\n\ndef sort_matrix_iterative(m):\n    if len(m) == 1:\n        return m\n    left = [None for _ in range(len(m[0]))]\n    right = [None for _ in range(len(m[0]))]\n    for i in range(len(m[0])):\n        left[i] = m[:len(m)//2][:]\n        right[i] = m[len(m)//2:][:]\n    left = sort_matrix_recursive(left)\n    right = sort_matrix_recursive(right)\n    for i in range(len(m[0])):\n        m[i] = left[i] + right[i]\n    return m\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(m):\n    n = len(m)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(m[i]) < sum(m[j]):\n                m[i], m[j] = m[j], m[i]\n    return m\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    result = []\n    for col in range(len(matrix[0])):\n        numbers = []\n        for row in range(len(matrix)):\n            numbers.append(matrix[row][col])\n        numbers.sort()\n        result.append(numbers)\n    return result\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    m, n = len(matrix), len(matrix[0])\n    for i in range(m):\n        for j in range(i+1, m):\n            if sum(matrix[i]) < sum(matrix[j]):\n                matrix[i], matrix[j] = matrix[j], matrix[i]\n    return matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(m):\n    m.sort(key=lambda x: sum(x))\n    return m\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    matrix.sort(key=sum)\n    return matrix\n\n\ndef test_sort_matrix():\n    assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert sort_matrix([[1, 1, 2], [1, 3, 4], [5, 6, 8]]) == [[5, 6, 8], [1, 1, 2], [1, 3, 4]]\n    assert sort_matrix([[5, 6, 8], [1, 1, 2], [1, 3, 4]]) == [[1, 1, 2], [1, 3, 4], [5, 6, 8]]\n\n\ndef main():\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\nimport pytest\nfrom collections import Counter\n\ndef sort_matrix(matrix):\n    \"\"\"\n    :param matrix: A list of lists that is a matrix\n    :return: The sorted matrix\n    \"\"\"\n    return sorted(matrix, key=lambda x: sum(x), reverse=True)\n\n@pytest.mark.parametrize(\"matrix,expected\", [([[-1, 2], [-5, 1]], [[-5, 1], [-1, 2]])])\ndef test_sorting(matrix, expected):\n    assert sort_matrix(matrix) == expected\n\n\n@pytest.mark.parametrize(\"matrix,expected\", [([[1, 2, 3], [2, 4, 5], [1, 1, 1]], [[1, 2, 3], [1, 1, 1], [2, 4, 5]])])\ndef test_sorting_equal(matrix, expected):\n    assert sort_matrix(matrix) == expected\n\n\n@pytest.mark.parametrize(\"matrix,expected\", [([[1, 2, 3], [2, 4, 5], [1, 1, 1]], [[1, 2, 3], [2, 4, 5], [1, 1, 1]])])\ndef test_sorting_equal_2(matrix, expected):\n    assert sort_matrix(matrix) == expected", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n# Solution\n\ndef sort_matrix(matrix):\n    \"\"\"\n    :param matrix: input matrix\n    :return: sorted matrix\n    \"\"\"\n    result = []\n    for row in matrix:\n        result.append(sum(row))\n    result.sort()\n    sorted_matrix = []\n    for number in result:\n        for row in matrix:\n            if number in row:\n                sorted_matrix.append(row)\n    return sorted_matrix\n\n\n# Test\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    row_sums.sort()\n    idx = 0\n    for row in matrix:\n        for j in range(len(row)):\n            if row_sums[idx] == row[j]:\n                row[j] = row_sums[idx]\n                idx += 1\n    return matrix\n\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])-1):\n            # Find the smallest number in the sublist\n            index = j\n            for k in range(j+1,len(matrix[i])):\n                if matrix[i][k] < matrix[i][index]:\n                    index = k\n\n            # Swap the smallest element with the first element\n            matrix[i][index], matrix[i][j] = matrix[i][j], matrix[i][index]\n    \n    return matrix\n\n# Test"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\n#answer\ndef count_common(a):\n    d={}\n    for i in a:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return sorted(d.items(), key=lambda kv:(kv[1], kv[0]),reverse=True)", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    most_common = []\n    for word in counts:\n        if counts[word] > 2:\n            most_common.append((word, counts[word]))\n    return sorted(most_common, key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\nfrom collections import Counter\n\ndef count_common(words):\n    count = Counter(words)\n    return list(count.items())\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    d={}\n    for word in words:\n        if word not in d:\n            d[word]=0\n        d[word]+=1\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    word_counts = {}\n    for word in words:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    return sorted(word_counts.items(), key=lambda word: word[1], reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n  common_words = {}\n  for word in words:\n    if word in common_words:\n      common_words[word] += 1\n    else:\n      common_words[word] = 1\n  return sorted(common_words.items(), key = lambda x:x[1], reverse = True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    word_counter = {}\n    for word in words:\n        word_counter[word] = word_counter.get(word, 0) + 1\n    return sorted(word_counter.items(), key=lambda item: item[1], reverse=True)", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    dict = {}\n    for word in words:\n        if word not in dict:\n            dict[word] = 0\n        dict[word] += 1\n    return dict.items()\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    word_count = {}\n    for word in words:\n        word = word.lower()\n        if word in word_count:\n            word_count[word] = word_count[word] + 1\n        else:\n            word_count[word] = 1\n    word_count = sorted(word_count.items(), key=lambda x:x[1], reverse=True)\n    return word_count\n\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    return [(word,words.count(word)) for word in words if words.count(word) > 1]\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_volume(b,h,l):\n    \"\"\"\n    function to find the volume of a triangular prism.\n    input: b=base of triangle, h=height, l=length of the triangle\n    return: volume of the triangular prism\n    \"\"\"\n    return 0.5*b*h*l\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(width, height, depth):\n    return (width * height * depth) / 2\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(b,h,l):\n    vol = b*h*l\n    return vol\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(l,w,h):\n    return l*w*h\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(height, width, depth):\n    vol = (height*width*depth)/2\n    return vol\n\n# Test Cases", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,c):\n    return a*b*c/2\n\n\n# +\n# Write a python function to find the surface area of a sphere.\n# Using math.pi \nimport math\ndef find_area(r):\n    return math.pi*(r**2)\n\n# Using the formula : 4/3 * pi * r^3\ndef find_area1(r):\n    return (4/3)*(math.pi)*(r**3)\n\n# Using the formula : 4/3 * pi * r^2 * h\ndef find_area2(r,h):\n    return (4/3)*(math.pi)*(r**2)*(h)\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(length,breadth,height):\n    V = length * breadth * height\n    return V\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(length,width,height):\n    return length*width*height\n\n\ndef test_find_Volume():\n    assert find_Volume(10,8,6) == 240\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\nimport math\ndef find_Volume(a,b,c):\n    s = (a+b+c)/2\n    area = (a*b*c)/6\n    volume = area*s\n    return volume\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,c):\n    s = (a+b+c)/2\n    vol = (a*b*c)/6\n    return vol\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    return [x.lower() for x in string.split(' ') if x != '']\n\ndef test_split_lowerstring():\n    assert split_lowerstring(\"AbCd\")==['bC','d']\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    lowerstr = list(s.lower())\n    split_idx = []\n    for i in range(len(lowerstr)):\n        if i == 0 or lowerstr[i] != lowerstr[i-1]:\n            split_idx.append(i)\n    return lowerstr[split_idx[0]:split_idx[-1]+1]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(str):\n    #return re.split('[a-z]+',str,flags=re.IGNORECASE)\n    lowerlist=[]\n    if str=='':\n        return lowerlist\n    for i in range(0,len(str)):\n        if str[i].islower():\n            lowerlist.append(str[0:i+1])\n            str=str[i+1:]\n    lowerlist.append(str)\n    return lowerlist\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    return [x for x in string if x.islower()]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    return [string[i:j] for i,j in enumerate(string) if string[i].islower()]\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n  return [i.lower() for i in s.split() if i.islower()]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(a):\n    b = []\n    i = 0\n    while i < len(a):\n        if a[i].islower():\n            b.append(a[i:i+1])\n            i+=1\n        else:\n            i+=1\n    return b\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n\tif string is None:\n\t\treturn string\n\treturn [s.lower() for s in string.split('')]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    '''\n    This function takes a string input and splits it at the indices of the lowercase letters in the string. \n    '''\n    i = 0\n    j = 0\n    lower_string = []\n    for char in s:\n        if char.islower():\n            lower_string.append(char)\n        else:\n            lower_string.append(char)\n            i = j\n            j = i + 1\n    lower_string.append(char)\n    return lower_string\n\n#assert split_lowerstring(\"AbCd\")==['bC','d']\n\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    result = []\n    last_char = ''\n    for char in string:\n        if char.islower():\n            result.append(char)\n            last_char = char\n        else:\n            if last_char != '':\n                result.append(last_char)\n            result.append(char)\n            last_char = ''\n    return result\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Args:\n        text(string): a string with lowercase letters\n\n    Returns:\n        result(string): return a string if a match is found, otherwise return an empty string\n    \"\"\"\n    if re.search('[a-z]+_\\w',text):\n        return 'Found a match!'\n    else:\n        return ''\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    if \"_\" in text:\n        return \"Found a match!\"\n    return \"Not a match!\"\n\n#print(text_lowercase_underscore(\"aab_cbbbc\"))", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+', re.I)\n    if re.findall(pattern, text):\n        return \"Found a match!\"\n    return \"No match found!\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    result = re.findall(r'[a-z]+_[a-z]+', text.lower())\n    if len(result) == 0:\n        return 'No matches'\n    else:\n        return 'Found a match!'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    underscore_index = text.find(\"_\")\n    last_index = len(text) - 1\n    if underscore_index == -1:\n        return \"Not found.\"\n    else:\n        for i in range(underscore_index + 1, last_index):\n            if text[i].islower():\n                return \"Found a match!\"\n            elif text[i].isupper():\n                return \"Not found.\"\n            elif text[i] == \"_\":\n                return \"Not found.\"\n            elif text[i].isdigit():\n                return \"Not found.\"\n    return \"Not found.\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    result = [m.group() for m in re.finditer(r'(?<=[a-z])(?=[a-z])|(?<=_)(?=_)|(?<=_)[a-z](?=[a-z])|(?<=_)[a-z](?=[a-z])', text)]\n    if len(result) > 0:\n        return \"Found a match!\"\n    return \"Didn't find anything!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    underscore = 0\n    for c in text:\n        if c == \"_\":\n            underscore += 1\n        elif c.islower():\n            underscore += 1\n    return ('Found a match!' if underscore > 1 else 'No match!')\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(s):\n    match = re.findall('_[a-z]{2,}_[a-z]{2,}', s)\n    if match:\n        return 'Found a match!'\n    return 'Did not find a match!'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    letter = re.findall(r'[a-z]+',text)\n    if letter:\n        letter = ''.join(letter)\n        pattern = r'([a-z]+)_([a-z]+)'\n        match = re.findall(pattern,text)\n        if match:\n            return('Found a match!')\n        else:\n            return('No match!')\n    else:\n        return('No match!')", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(string):\n    result = ''\n    for i in string:\n        if i.islower():\n            result += '_' + i\n    return result\n\n\ntext_lowercase_underscore(\"aab_cbbbc\")\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(a):\n    perimeter = 4*a\n    return perimeter\n\n#print(square_perimeter(10))\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(a):\n    return a*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(length):\n    return length*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(length):\n    return length*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(size):\n    return 4*size\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(n):\n    return n * 4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(length):\n    return 2 * length * length\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\n#answer\ndef square_perimeter(num):\n    return 4*num\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n  return side * 4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(size):\n    return size*4\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(input1, input2):\n    for i in input2:\n        input1 = input1.replace(i, \"\")\n    return input1\n\n\n# +\n#Testing\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    str3 = []\n    for x in str1:\n        if x not in str2:\n            str3.append(x)\n    return \"\".join(str3)", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(s1, s2):\n    new_s = ''\n    for letter in s1:\n        if letter not in s2:\n            new_s += letter\n    return new_s\n\ndef remove_dirty_chars2(s1, s2):\n    new_s = ''\n    for letter in s1:\n        if letter not in s2:\n            new_s += letter\n    return new_s\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    s1 = list(s1)\n    s2 = list(s2)\n    s1 = list(filter(lambda x: x not in s2, s1))\n    return ''.join(s1)\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    result = \"\"\n    for i in s1:\n        if i not in s2:\n            result += i\n    return result", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string_one, string_two):\n    new_str = \"\"\n    for char in string_one:\n        if char not in string_two:\n            new_str += char\n    return new_str\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(word1, word2):\n    return \"\".join([char1 for char1 in word1 if char1 not in word2])", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    # write your code here\n    a = s1.lower()\n    b = s2.lower()\n    for i in range(len(a)):\n        if a[i] in b:\n            a = a[:i] + a[i+1:]\n    return a\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string1, string2):\n    string1 = string1.lower()\n    string2 = string2.lower()\n\n    new_string1 = \"\"\n    for c in string1:\n        if c not in string2:\n            new_string1 += c\n\n    return new_string1\n\n\ndef remove_dirty_chars(string1, string2):\n    return \"\".join(ch for ch in string1 if ch not in string2)\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(dirty, clean):\n    for char in dirty:\n        if char in clean:\n            dirty = dirty.replace(char,'')\n    return dirty\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(test_arr):\n    return test_arr.count(test_arr[0]) > 1\n\ndef test_duplicate1(test_arr):\n    return not set(test_arr).issubset(set(test_arr[0]))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(lst):\n    return len(lst) != len(set(lst))\n\ndef test():\n    assert test_duplicate([1,2,3,4,5]) == False\n    assert test_duplicate([1,2,3,4,5,6]) == False\n    assert test_duplicate([1,2,3,4,5,6,7,8]) == False\n    assert test_duplicate([1,2,3,4,5,6,7,8,9]) == False\n    assert test_duplicate([1,2,3,4,5,6,7,8,9,10]) == True\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if len(arr) < 2:\n        return False\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate([1,2,3,4,5]):\n    return True if len(set(num for num in [1,2,3,4,5])) == 5 else False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(nums):\n    for i in range(0, len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]==nums[j]:\n                return True\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    #loop thru the array and if any value is repeated\n    for i in arr:\n        if arr.count(i) > 1:\n            return True\n    return False\n\ntest_duplicate(([1,2,3,4,5]))", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(test_input):\n    return len(set(test_input))!=len(test_input)\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n  dict = {}\n  for i in arr:\n    if i in dict:\n      return True\n    else:\n      dict[i] = True\n  return False", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef duplicate(arr):\n    counter = 0\n    for i in arr:\n        if arr.count(i)>1:\n            return True\n    return False\n\n#print(duplicate([1,2,3,4,5]))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if len(arr) < 1:\n        return False\n    duplicate_arr = [i for i, num in enumerate(arr) if arr.count(num) > 1]\n    if len(duplicate_arr) > 0:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number):\n    if number == 11:\n        return True\n    elif number % 10 == 3:\n        return True\n    elif number % 10 == 8:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    if n == 0:\n        return False\n    if n < 10:\n        return True\n    if len(str(n)) != 3:\n        return False\n    if len(set(str(n))) > 2:\n        return False\n    return True\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(number):\n    number = str(number)\n    if (number[0] == number[1] or number[2] == number[3] or number[4] == number[5] or number[6] == number[7] or number[8] == number[9] or number[0] == number[3] or number[0] == number[6] or number[0] == number[9] or number[1] == number[4] or number[1] == number[7] or number[1] == number[9] or number[2] == number[5] or number[2] == number[8] or number[3] == number[6] or number[3] == number[9] or number[4] == number[7] or number[5] == number[8] or number[6] == number[9]) and (int(number[0]) * 10 + int(number[1])) == int(number[2]) and (int(number[2]) * 10 + int(number[3])) == int(number[4]) and (int(number[4]) * 10 + int(number[5])) == int(number[6]) and (int(number[6]) * 10 + int(number[7])) == int(number[8]) and (int(number[8]) * 10 + int(number[9])) == int(number[0]):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    str_num = str(num)\n    if len(str_num) == 1:\n        if int(str_num[0]) >= 1 and int(str_num[0]) <= 9:\n            return True\n        else:\n            return False\n    elif len(str_num) == 2:\n        if int(str_num[0]) >= 1 and int(str_num[0]) <= 9:\n            if int(str_num[1]) >= 1 and int(str_num[1]) <= 9:\n                return True\n            else:\n                return False\n        else:\n            return False\n    elif len(str_num) == 3:\n        if int(str_num[0]) >= 1 and int(str_num[0]) <= 9:\n            if int(str_num[1]) >= 1 and int(str_num[1]) <= 9:\n                if int(str_num[2]) >= 1 and int(str_num[2]) <= 9:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    elif len(str_num) == 4:\n        if int(str_num[0]) >= 1 and int(str_num[0]) <= 9:\n            if int(str_num[1]) >= 1 and int(str_num[1]) <= 9:\n                if int(str_num[2]) >= 1 and int(str_num[2]) <= 9:\n                    if int(str_num[3]) >= 1 and int(str_num[3]) <= 9:\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    elif len(str_num) == 5:\n        if int(str_num[0]) >= 1 and int(str_num[0]) <= 9:\n            if int(str_num[1]) >= 1 and int(str_num[1]) <= 9:\n                if int(str_num[2]) >= 1 and int(str", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodball(num):\n    if num%10 == 3:\n        return True\n    return False\n\n# Test", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(num):\n    for i in range(10):\n        if num % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(num):\n    temp = str(num)\n    return temp == temp[::-1]\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    if num < 10:\n        return False\n    return num % 5 == 0 or num % 7 == 0\n\ndef is_woodall2(num):\n    if num < 10 or num > 99:\n        return False\n    if num % 5 == 0:\n        return True\n    elif num % 7 == 0:\n        return True\n    else:\n        return False\n\ndef is_woodall3(num):\n    if num < 10 or num > 99:\n        return False\n    if (num % 5 == 0) or (num % 7 == 0):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n# Time Complexity: O(1)\n# Space Complexity: O(1)\ndef is_woodall(num):\n    # Woodall is a number with no repeating digits\n    return num == int(str(num) * 2)\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(num):\n    digits = [int(d) for d in str(num)]\n    if digits.count(1) == 0:\n        return False\n    if digits.count(1) >= 2:\n        return True\n    if digits.count(2) >= 2:\n        return True\n    if digits.count(3) >= 2:\n        return True\n    if digits.count(4) >= 2:\n        return True\n    if digits.count(5) >= 2:\n        return True\n    if digits.count(6) >= 2:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    ans = []\n    for i in range(1,m+1):\n        ans.append(n*i)\n    return ans\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    \"\"\"\n    >>> multiples_of_num(1, 10)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> multiples_of_num(4, 3)\n    [3, 6, 9, 12]\n    \"\"\"\n    for i in range(m):\n        yield n * i\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return [n*i for i in range(1,m+1)]\n\nmultiples_of_num(4,3)\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\nimport unittest\nfrom pyramid import multiples_of_num\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    \"\"\"Return list of m numbers multiples of n\"\"\"\n    return [n*i for i in range(m)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    return [i*n for i in range(1,m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\nimport math\n\n\ndef multiples_of_num(n, m):\n    if (n % m != 0):\n        raise ValueError(\"n must be a multiple of m\")\n    n = float(n)\n    m = float(m)\n    return [math.floor(x * m) for x in range(int(n / m) + 1) if x * m <= n]\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    multiples = []\n    for i in range(m):\n        multiples.append(n*i)\n    return multiples\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n    assert type(n) == int, \"n must be an integer\"\n    assert type(m) == int, \"m must be an integer\"\n    assert n>0 and m>0, \"n and m must be positive integers\"\n    return [n*i for i in range(m)]\n\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n    list = []\n    for i in range(1,m+1):\n        list.append(n*i)\n    return list\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(array):\n    \"\"\"\n    Finds the first duplicate element in an array\n\n    Parameters\n    ----------\n    array: an array of integers\n\n    Returns\n    -------\n    The first duplicate element in the array\n    \"\"\"\n    array.sort()\n    for i in range(0, len(array) - 1):\n        if array[i] == array[i + 1]:\n            return array[i]\n    return None\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j] and i != j:\n                return arr[i]\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(array):\n    array.sort()\n    duplicate_found = False\n    duplicate_count = 0\n    for i in range(len(array) - 1):\n        if array[i] == array[i+1]:\n            duplicate_count += 1\n            if duplicate_found is False:\n                duplicate_found = True\n        else:\n            duplicate_found = False\n\n    return array[duplicate_count]", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return num\n        seen[num] = 1\n\ndef find_first_duplicate2(arr):\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return num\n        else:\n            seen[num] = 1\n\ndef find_first_duplicate3(arr):\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return num\n        seen[num] = seen.get(num, 0) + 1\n    return None\n\n\ndef test_find_first_duplicate():\n    assert find_first_duplicate([1, 2, 3, 4, 4, 5]) == 4\n    assert find_first_duplicate([1, 2, 3, 4, 4, 5]) == 4\n    assert find_first_duplicate([1, 2, 3, 4]) == None\n    assert find_first_duplicate([1, 1]) == 1", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(nums):\n    for i in range(len(nums)):\n        if nums.count(nums[i]) > 1:\n            return nums[i]\n\n\ndef test_function(test_case):\n    solution = find_first_duplicate\n    output = solution(test_case[0])\n    if output == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = ([1, 2, 3, 4, 4, 5])\ntest_function(arr)", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    arr = sorted(arr)\n    n = len(arr)\n    i = 0\n    while i<n-1:\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        i += 1\n    return -1\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    for i in arr:\n        if arr.count(i) > 1:\n            return i\n    return \"No duplicate in array!\"\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(myList):\n    for i in range(len(myList)-1):\n        if myList[i] == myList[i+1]:\n            return myList[i]", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(nums):\n    \"\"\"\n    Given an array of integers, find the first duplicate number in the array.\n    :param nums: List of integers\n    :return: first duplicate element in the array\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == nums[nums[i]]:\n            return nums[i]\n    return -1\n\n# Test cases", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    #your code goes here\n    temp_dict = {}\n    for i in arr:\n        if i in temp_dict:\n            return i\n        else:\n            temp_dict[i] = True\n    return -1\n\ndef find_first_duplicate_2(arr):\n    #your code goes here\n    for i in arr:\n        if arr.count(i) > 1:\n            return i\n    return -1\n\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lst):\n    maximum = 0\n    for i in range(len(lst)):\n        maximum += max(lst[i])\n    return maximum\n\ndef test():\n    lst = [[1,2,3],[4,5,6],[10,11,12],[7,8,9]]\n    assert maximum_Sum(lst) == 33\n\ntest()", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_sum(list_of_list):\n    max_sum = 0\n    for i in range(len(list_of_list)):\n        for j in range(len(list_of_list[i])):\n            if j == 0:\n                max_sum += list_of_list[i][j]\n            else:\n                max_sum = max(list_of_list[i][j], max_sum + list_of_list[i][j])\n    return max_sum", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_sum(list_of_lists):\n    sum_of_elements = 0\n    for i in list_of_lists:\n        for j in i:\n            sum_of_elements += j\n    return sum_of_elements\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\nfrom typing import List\n\n\ndef maximum_Sum(lists: List[List[int]]) -> int:\n    pass\n\n\ndef test_case_1():\n    print(maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_sum(list_of_list):\n    sum_of_list = 0\n    for sub_list in list_of_list:\n        sum_of_list += max(sub_list)\n    return sum_of_list\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(numbers):\n    maximum_sum = 0\n    for array in numbers:\n        if maximum_sum < sum(array):\n            maximum_sum = sum(array)\n    return maximum_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(arr):\n    max_sum = -float(\"inf\")\n    for i in arr:\n        max_sum = max(max_sum, max(i))\n    return max_sum", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(lst):\n    if lst is None:\n        return\n    for i in lst:\n        s = 0\n        for j in i:\n            s += j\n        if s > max:\n            max = s\n    return max\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(input_list):\n  largest_sum = 0\n  for i in input_list:\n    current_sum = 0\n    for j in i:\n      current_sum += j\n    if current_sum > largest_sum:\n      largest_sum = current_sum\n  return largest_sum\n\ndef test_maximum_Sum():\n  assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\ndef main():\n  test_maximum_Sum()\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            max_sum = max(max_sum,arr[i][j])\n    return max_sum\n\ndef maximum_sum(arr):\n    return max(sum(row) for row in arr)\n\ndef maximum_sum(arr):\n    return reduce(max, map(sum, arr))\n\ndef maximum_sum(arr):\n    return reduce(max, map(sum, arr), 0)\n\n#print(maximum_sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]))"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(number):\n    decimal = 0\n    for digit in str(number):\n        decimal = decimal * 2 + int(digit)\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(num):\n    return sum(pow(2, i) for i in range(len(num)))\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(n):\n    res = 0\n    while n > 0:\n        res += n % 10\n        n //= 10\n    return res\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(num):\n    # num = int(input())\n    temp_num = num\n    res = 0\n    while temp_num > 0:\n        res += temp_num % 10\n        temp_num //= 10\n    return res\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    return sum(map(int, str(binary)[::-1]))", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(num):\n    temp_num = num\n    dec_num = 0\n    while temp_num > 0:\n        dec_num += temp_num % 10 * 2 ** (len(str(num)) - 1 - temp_num.bit_length())\n        temp_num //= 10\n    return dec_num\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(number):\n    decimal = 0\n    for i in reversed(number):\n        decimal += i * 2**i\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n  if len(binary) == 0:\n    return 0\n  else:\n    return binary_to_decimal(binary[1:]) + int(binary[0]) * 2**len(binary)\n\n# assert binary_to_decimal(100) == 4\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(num: int):\n    #type: (int)->int\n    result = 0\n    for i in range(len(bin(num))-2, -1, -1):\n        result += int(bin(num)[i+1])*2**i\n    return result\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_num):\n    \"\"\"\n    :param binary_num: A binary number.\n    :return: the decimal equivalent of the input binary number.\n    \"\"\"\n    binary_num = str(binary_num)\n    decimal_num = 0\n    #loop through the binary number and sum the individual digits\n    for digit in binary_num:\n        decimal_num = decimal_num * 2 + int(digit)\n    return decimal_num\n\n\n# print(binary_to_decimal(100))"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    # Your code here\n    return reduce(lambda x,y: x*y, [x for x in arr if arr.count(x) == 1], 1)\n\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    #code here\n    arr = sorted(arr)\n    p = 1\n    for i in range(0,n):\n        if arr[i] != arr[i-1]:\n            p *= arr[i]\n    return p\n    \narr = [1,1,2,3]", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    p = 1\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                p*=arr[i]\n    return p\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    # Write your code here\n    if arr == None:\n        return\n    if len(arr) == 0:\n        return 1\n    if len(arr) == 1:\n        return arr[0]\n    count = 1\n    product = 1\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            count+=1\n            product *= arr[i]\n    if n != count:\n        return -1\n    return product\n\n\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,k):\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for key, val in count.items():\n        if val > k:\n            k = val\n    for key, val in count.items():\n        if val == k:\n            return key * k\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\nfrom typing import List\n\ndef find_Product(arr: List[int],n:int) -> int:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n\n    Args:\n        arr (List[int]): List of numbers.\n        n (int): Number of numbers.\n\n    Returns:\n        int: Product of numbers.\n    \"\"\"\n    arr.sort()\n    ans = 1\n    for i in range(1,n):\n        if arr[i]==arr[i-1]:\n            continue\n        else:\n            ans *= arr[i]\n    return ans\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, k):\n    prod = 1\n    for i in arr:\n        prod *= i\n        prod %= k\n    return prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,n):\n    count = 1\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if (arr[i]==arr[j]):\n                count = count*arr[i]\n    return count", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(array, size):\n    if len(array) == size:\n        prod = 1\n        for i in range(0, size):\n            if array.count(array[i]) > 1:\n                continue\n            else:\n                prod *= array[i]\n        return prod\n    return None\n\n# Test cases", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,size):\n    arr_final = []\n    for i in range(size):\n        if arr[i] not in arr_final:\n            arr_final.append(arr[i])\n    res = 1\n    for i in range(len(arr_final)):\n        res = res * arr_final[i]\n    return res\n"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(element_list, k):\n    return len(set([x for y in element_list for x in y])) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(list_of_tuples, k):\n    \"\"\"\n    list_of_tuples: a tuple of tuples\n    k: an integer\n    returns: True if all tuples in list_of_tuples have k elements\n    \"\"\"\n    for tuple in list_of_tuples:\n        if len(tuple) != k:\n            return False\n    return True\n\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    #assert len(tuple_list) == k\n    count = 0\n    for i in range(k):\n        for j in range(len(tuple_list)):\n            if len(tuple_list[j]) > i:\n                count += 1\n    if count == k:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tlist, k):\n    return tlist.count(k) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(lst, k):\n  # add your code here\n  # first we need to remove all the duplicates\n  tmp = list(dict.fromkeys(lst))\n  # now we need to check if the length of the list is same as the k\n  return len(tmp) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tup_list, k):\n    # tup_list = [(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )]\n    # k = 4\n    # print(tup_list)\n    # print(k)\n    # tup_list.sort()\n    # print(tup_list)\n\n    if len(tup_list) != k:\n        return False\n\n    tup_list.sort()\n    # print(tup_list)\n\n    for i in range(len(tup_list)):\n        if tup_list[i] != (k - i):\n            return False\n\n    return True\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuples, k):\n    return len(set(map(lambda x: x[0], tuples))) == k\n\n\ndef main():\n    print(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4))\n    print(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 5))\n    print(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 2))\n\n\nmain()", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tlist, k):\n    count = 0\n    for tup in tlist:\n        if len(tup) == k:\n            count += 1\n    return count == len(tlist)\n\ndef check_k_elements_2(tlist, k):\n    return len([t for t in tlist if len(t) == k]) == len(tlist)\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuples, k):\n    seen = set()\n    for tup in tuples:\n        tup_set = set(tup)\n        if len(tup_set) == k and len(seen) < k:\n            seen |= tup_set\n    return len(seen) == k\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuples, k):\n    def count_elements(tuples, k):\n        elements = set()\n        for tuple in tuples:\n            for element in tuple:\n                if element not in elements:\n                    elements.add(element)\n                    if len(elements) == k:\n                        return True\n        return False\n    return count_elements(tuples, k)\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(lst):\n    return [i for i in lst if not i.isdigit()]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(lst):\n    return [word for word in lst if not word.isdigit()]\n\n# Keep this function call here ", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(s):\n    return [re.sub(r'[0-9]','',t) for t in s]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(numbers):\n    new_list = []\n    for n in numbers:\n        n = list(n)\n        n.remove(str(n))\n        new_list.append(''.join(n))\n    return new_list\n\n\n# -\n\n# # Question 8\n#\n# #### Write a Python function to multiply all the numbers in a list.\n#\n# #### Example:\n#\n#     multiply_all([1, 2, 3, -4]) \u279e -24\n#     multiply_all([-2, 3, -4, 5]) \u279e 120\n#     multiply_all([1, -5, 2, 0]) \u279e -0\n#     multiply_all([]) \u279e 0\n\n# +", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(strings):\n    return [s for s in strings if not s.isdigit()]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove_digits(list_of_strings):\n    return [word.translate(str.maketrans('', '', digits)) for word in list_of_strings]\n\n\ndef test_remove_digits():\n    assert remove_digits([\"24\", \"23\", \"32\"]) == [\"2\", \"3\", \"3\"]\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(strings):\n    return [x for x in strings if not any(char.isdigit() for char in x)]", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove_digits(l):\n  return [word.translate(None, digits) for word in l]\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return [i for i in lst if not i.isdigit()]\n\n# TEST", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\nimport pytest\n\n\ndef remove(list_of_strings):\n    # remove the digit from each string\n    list_of_strings = [word.replace('0', '') for word in list_of_strings]\n    # remove the string if it is empty\n    list_of_strings = [word for word in list_of_strings if len(word) != 0]\n    return list_of_strings\n\n# test cases\n@pytest.mark.parametrize(\"list_of_strings, expected\", [\n    ([], []),\n    (['word', 'word'], ['word', 'word']),\n    (['1word', '3word', 'word'], ['word', 'word']),\n    (['word1', 'word3', 'word'], ['word1', 'word3']),\n    (['word0', 'word3', 'word'], ['word', 'word3']),\n    (['word0', 'word30', 'word'], ['word', 'word30']),\n    (['word0', 'word30', 'word0'], ['word', 'word30']),\n    (['word00', 'word30', 'word0'], ['word', 'word30']),\n    (['0word', '0word', '0word'], ['word', 'word', 'word']),\n    (['word00', '0word0', 'word0'], ['word', 'word00', 'word0']),\n    (['word00', '0word00', 'word0'], ['word', 'word00', 'word0']),\n    (['word00', '0word00', 'word00'], ['word', 'word00', 'word00']),\n    (['0word0', '0word00', 'word0'], ['word0', 'word00', 'word0']),\n    (['word00', '0word00', '0word'], ['word00', 'word00', 'word']),\n])\ndef test(list_of_strings, expected):\n    actual = remove(list_of_strings)\n    assert actual == expected"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,r):\n    if n < 0 or n < r or r < 0:\n        return 0\n    a = 1\n    for i in range(0,r):\n        a = a*(n-i) / (r-i)\n    return int(a)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    return int(factorial(n)/(factorial(k)*factorial(n-k)))\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef test_binomial_Coeff():\n    assert binomial_Coeff(5,2) == 10\n    assert binomial_Coeff(10,3) == 120\n    assert binomial_Coeff(15,2) == 30\n    assert binomial_Coeff(15,5) == 15\n    assert binomial_Coeff(2,1) == 2\n    assert binomial_Coeff(2,0) == 1\n\ntest_binomial_Coeff()", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,r):\n    \"\"\"\n    The binomial Coefficient is the number of ways a group of r elements can be chosen from a group of n elements.\n    \"\"\"\n    return factorial(n)/factorial(n-r)*factorial(r)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,r):\n    return int(factorial(n)/(factorial(r)*factorial(n-r)))\n\ndef main():\n    print(binomial_Coeff(5,2))\n\n\n# Using the special variable\n# __name__", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\n#Recursive\ndef binomial_Coeff(n,k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == k:\n        return 1\n    return (binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1))\n\n#Iterative\ndef binomial_Coeff(n,k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(2,n+1):\n        if k <= i:\n            return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)\n    return None\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    if k > n-k:\n        k = n-k\n\n    count = 0\n    for i in range(0, k+1):\n        count = count + (math.factorial(n)/(math.factorial(i)*math.factorial(k-i)))\n    return count\n\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\nimport sys\n\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    :param n:\n    :param k:\n    :return:\n    \"\"\"\n    if (k > n - k):\n        return binomial_Coeff(n, n - k)\n\n    if (k < 0):\n        return 0\n\n    if (k == 0 or k == n):\n        return 1\n\n    ans = binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n    return ans\n\n\ndef binomial_Coeff2(n, k):\n    \"\"\"\n    :param n:\n    :param k:\n    :return:\n    \"\"\"\n    if (n < k):\n        return 0\n    return binomial_Coeff2(n - 1, k) + binomial_Coeff2(n - 1, k - 1)\n\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,r):\n\t# Write your code here\n    if r == 0:\n        return 1\n    if r == n:\n        return 1\n    if r > n:\n        return 0\n    count = 0\n    for i in range(n-r+1):\n        count += 1\n    return count\n\ndef binomial_Coeff_recursive(n,r):\n    if r == 0:\n        return 1\n    if r == n:\n        return 1\n    if r > n:\n        return 0\n    return binomial_Coeff(n-1, r) + binomial_Coeff(n-1, r-1)\n\ndef binomial_Coeff_dynamic_programming(n,r):\n    dp = [[0 for x in range(n+1)] for y in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1,n+1):\n        dp[i][i] = 1\n    for r in range(1,n+1):\n        for c in range(r+1):\n            if c == 0 or c == r:\n                dp[r][c] = 1\n            else:\n                dp[r][c] = dp[r-1][c-1] + dp[r-1][c]\n    return dp[n][r]\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n, r = list(map(int, input().split()))\n        print(binomial_Coeff(n,r))\n        print(binomial_Coeff_recursive(n,r))\n        print(binomial_Coeff_dynamic_programming(n,r))\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    return reduce(mul, range(n,n-k+1,-1),1)\n\n\ndef main():\n    t = int(raw_input())\n    while t:\n        n,k = map(int,raw_input().split())\n        print binomial_Coeff(n,k)\n        t -= 1\n\n\nmain()"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(input_arr,num):\n\tcount=0\n\tfor i in input_arr:\n\t\tif i==num:\n\t\t\tcount+=1\n\tif count%2==0:\n\t\treturn -1\n\telse:\n\t\treturn num\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\nfrom collections import Counter\n\ndef get_Odd_Occurrence(list_to_check,el):\n  dic = Counter(list_to_check)\n  if el in dic:\n    if dic[el] % 2 != 0:\n      return el\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, n):\n    # Write your code here\n    count = {}\n    for i in range(n):\n        count[arr[i]] = count.get(arr[i], 0) + 1\n    odd_num = []\n    for i in range(n):\n        if count[i] & 1 == 1:\n            odd_num.append(i)\n    return odd_num\n\ndef test_func():\n    assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == [1]\n    assert get_Odd_Occurrence([1,2,3,1,2,3,1],5) == [1]\n    assert get_Odd_Occurrence([1,2,3,1,2,3,1],3) == []\n    assert get_Odd_Occurrence([1,2,3,1,2,3,1],2) == []\n\ntest_func()\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\nfrom collections import Counter\ndef get_Odd_Occurrence(arr, n):\n    counter = Counter(arr)\n    for i in counter:\n        if counter[i]%2:\n            return i\n\nget_Odd_Occurrence([1,2,3,1,2,3,1],7)", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr,num):\n    count = 0\n    for item in arr:\n        if item == num:\n            count += 1\n    if count % 2 != 0:\n        return num\n    else:\n        return None\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, x):\n    return arr.count(x) % 2\n\n\n# Tests", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,n):\n    dic = {}\n    for ele in arr:\n        if ele in dic:\n            dic[ele] += 1\n        else:\n            dic[ele] = 1\n    for k,v in dic.items():\n        if v % 2 != 0:\n            return k\n    return None", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(input_list, value):\n    # your code here\n    return input_list.count(value)%2\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(A, x):\n    \"\"\"\n    :param A:\n    :param x:\n    :return:\n    \"\"\"\n    cnt = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            cnt += 1\n    if cnt % 2 == 0:\n        return -1\n    return x\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(A, x):\n    \"\"\"\n    Input : array\n    Output : integer\n\n    \"\"\"\n    if(len(A) == 0):\n        return 0\n\n    dict = {}\n    for i in A:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n\n    for i in dict:\n        if(dict[i] % 2 != 0 and i == x):\n            return i\n\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    if not s:\n        return 0\n    result = 0\n    l = len(s)\n    for i in range(l):\n        for j in range(i, l):\n            if s[i] == s[j] and i != j:\n                result += 1\n    return result\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    if len(str) < 2:\n        return 0\n    result = 0\n    for i in range(len(str)):\n        if i < len(str) - 1 and str[i] == str[i+1]:\n            result += count_Substring_With_Equal_Ends(str[i+1:])\n    return result + 1\n\ndef count_Substring_With_Equal_Ends_2(str):\n    if len(str) < 2:\n        return 0\n    result = 0\n    for i in range(len(str)):\n        if i < len(str) - 1 and str[i] == str[i+1]:\n            result += count_Substring_With_Equal_Ends_2(str[i+1:]) + 1\n    return result\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\n# +\n# First solution\n\ndef count_Substring_With_Equal_Ends(string):\n    n = len(string)\n    count = 0\n    for i in range(n):\n        if string[i] == string[-1]:\n            count += 1\n        if string[i] == string[n - 1 - i]:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    if len(str) < 2:\n        return 0\n    count = 0\n    for i in range(len(str)):\n        if i >= len(str) - 1:\n            continue\n        count += 1\n        if str[i] == str[len(str) - 1]:\n            count += count_Substring_With_Equal_Ends(str[i + 1:])\n    return count\n\n\ndef test():\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n\tif not s:\n\t\treturn 0\n\ts_len = len(s)\n\tcnt = 0\n\tfor i in range(s_len):\n\t\tleft, right = 0, i\n\t\twhile left < i and right < s_len:\n\t\t\tif s[left] != s[right]:\n\t\t\t\tbreak\n\t\t\tcnt += 1\n\t\t\tleft += 1\n\t\t\tright += 1\n\t\tif left == i:\n\t\t\tcnt += 1\n\treturn cnt", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(word):\n    res = 0\n    word = list(word)\n    word_len = len(word)\n    for i in range(word_len):\n        for j in range(word_len):\n            if word[i] == word[j]:\n                word.pop(i)\n                word.pop(j)\n                res += 1\n                break\n    return res\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    if s is None:\n        return 0\n    n = len(s)\n    cnt = 0\n    # O(n^2)\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j] and s[i] == s[n-1] and s[j] == s[n-2]:\n                cnt += 1\n    return cnt\n\ndef test_count_Substring_With_Equal_Ends():\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\n    assert count_Substring_With_Equal_Ends(\"abbc\") == 3\n    assert count_Substring_With_Equal_Ends(\"abbbcb\") == 2\n    assert count_Substring_With_Equal_Ends(\"abbbcba\") == 0\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    result = 0\n    count = {}\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            key = string[i:j+1]\n            if key[0] == key[-1]:\n                if key not in count:\n                    count[key] = 1\n                else:\n                    count[key] += 1\n    for value in count.values():\n        result += value\n    return result\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    temp_dict = {}\n    count = 0\n    for i in string:\n        temp_dict[i] = temp_dict.get(i,0) + 1\n    for i in string:\n        if temp_dict[i] > 0 and i == string[-1]:\n            count += 1\n        else:\n            temp_dict[i] -= 1\n    return count\n\n# assert count_Substring_With_Equal_Ends(\"abc\") == 3\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\nfrom collections import Counter\n\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    n = len(string)\n    if n <= 1:\n        return 0\n\n    word_count = Counter(string)\n    for char in word_count:\n        count += word_count[char] * (word_count[char] - 1)\n    return count\n\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef topK(lists, k):\n    if not lists:\n        return None\n    # create a heap with size as k\n    heap = [(-heapq.heappushpop(lists, 0), 0)]\n    # for each element in the list\n    for l in lists:\n        # compare current element and top element\n        if l > heap[0][0]:\n            # if current element is greater than the top\n            # remove top element and add current element\n            heapq.heappushpop(heap, (-l, 0))\n        else:\n            # if current element is equal to top or less than\n            # then increment count of top element\n            heap[0] = (-heap[0][0], heap[0][1] + 1)\n            if heap[0][1] > k:\n                # if count of top element becomes greater than k\n                # remove top element and add current element\n                heapq.heappushpop(heap, (-l, 0))\n    return [x[0] for x in heap]", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom collections import Counter\nfrom heapq import heappush,heappop\nfrom typing import List\n\ndef top_k(lists: List[List[int]], k: int) -> List[int]:\n    freq = Counter(sum(lists,[]))\n    h = []\n    for i in freq:\n        heappush(h,(-freq[i],i))\n    result = []\n    for i in range(k):\n        result.append(heappop(h)[1])\n    return result\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom heapq import heappush, heappop\nfrom collections import Counter\n\ndef topK(lists, k):\n    res = []\n    for l in lists:\n        cnt = Counter(l)\n        heap = [(cnt[i],i) for i in cnt if i not in res]\n        while heap and len(res)<k:\n            heappush(heap,(cnt[heappop(heap)[1]],heappop(heap)[1]))\n        res.extend([i for i, _ in heap])\n    return res[:k]\n\ndef topK2(lists, k):\n    res = []\n    for l in lists:\n        res.extend(l[:k])\n    return res[:k]\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef func(lists, k):\n    import heapq\n    # write your code here\n    heap = [0]\n    # first list\n    heapq.heapify(heap)\n    for i in lists[0]:\n        if i in heap:\n            heapq.heappushpop(heap, i)\n        else:\n            heapq.heappush(heap, i)\n    # second list\n    heapq.heapify(heap)\n    for i in lists[1]:\n        if i in heap:\n            heapq.heappushpop(heap, i)\n        else:\n            heapq.heappush(heap, i)\n    # third list\n    heapq.heapify(heap)\n    for i in lists[2]:\n        if i in heap:\n            heapq.heappushpop(heap, i)\n        else:\n            heapq.heappush(heap, i)\n    # forth list\n    heapq.heapify(heap)\n    for i in lists[3]:\n        if i in heap:\n            heapq.heappushpop(heap, i)\n        else:\n            heapq.heappush(heap, i)\n    # fifth list\n    heapq.heapify(heap)\n    for i in lists[4]:\n        if i in heap:\n            heapq.heappushpop(heap, i)\n        else:\n            heapq.heappush(heap, i)\n    return heapq.nlargest(k, heap)\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n\ndef topk(arr, k):\n    # write your code here\n    arr = [item for sublist in arr for item in sublist]\n    min_heap = [(arr[i], i) for i in range(len(arr))]\n    heapq.heapify(min_heap)\n    freq = defaultdict(int)\n    for i in range(k):\n        freq[heappop(min_heap)[0]] += 1\n    return [k for k in freq if freq[k]>0]\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import *\n\ndef topk(lst,k):\n    \"\"\"\n    :param lst: an array of sorted and distinct integers\n    :param k: an integer\n    :return: an array of the top k integers that occur most frequently in the input list\n    \"\"\"\n    count={}\n    max=0\n    for i in range(len(lst)):\n        if lst[i] not in count:\n            count[lst[i]]=1\n        else:\n            count[lst[i]]+=1\n        if count[lst[i]]>max:\n            max=count[lst[i]]\n    result=[]\n    for i in count:\n        if count[i]==max:\n            result.append(i)\n    return result[:k]\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef heap_top_k(lists, k):\n    min_heap = [(0, 0, 0)]\n    max_heap = []\n    for x in lists:\n        for i in x:\n            if len(max_heap) < k:\n                heapq.heappush(max_heap, (i, 1, 1))\n            else:\n                if i < max_heap[0][0]:\n                    max_heap[0] = (i, 1, 1)\n                    heapq.heapify(max_heap)\n                elif i == max_heap[0][0]:\n                    max_heap[0] = (i, max_heap[0][1]+1, max_heap[0][2]+1)\n                    heapq.heapify(max_heap)\n\n    results = []\n    while max_heap:\n        results.append(max_heap[0][0])\n        heapq.heappop(max_heap)\n        for i in range(len(max_heap)):\n            heapq.heappush(max_heap, (max_heap[i][0], max_heap[i][1], max_heap[i][2]-1))\n            if max_heap[i][2] == 0:\n                heapq.heapify(max_heap)\n\n    return results\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import *\ndef top_k_frequent(nums, k):\n    frequency = {}\n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    heap = []\n    for key, value in frequency.items():\n        heappush(heap, (-value, key))\n    res = []\n    for i in range(k):\n        res.append(heappop(heap)[1])\n    return res\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\n# https://leetcode.com/problems/top-k-frequent-elements/discuss/14623/Simple-Python-code-beats-82-\nfrom collections import Counter\nfrom heapq import *\n\ndef func(nums, k):\n    if not nums: return []\n    counts = Counter(nums)\n    heap = []\n    for c, freq in counts.items():\n        heappush(heap, (freq, c))\n        if len(heap) > k:\n            heappop(heap)\n    return [c for _, c in heap]\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom heapq import *\n\ndef top_k_frequency(lst,k):\n    #write your code here\n    if not lst:\n        return []\n    count = {}\n    heap = []\n    for l in lst:\n        for item in l:\n            if item in count:\n                count[item] += 1\n            else:\n                count[item] = 1\n    for item in count.keys():\n        heappush(heap,(-count[item],item))\n    return [heappop(heap)[1] for i in range(k)]"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    Recursive solution that finds the largest prime factor\n    of the input number.\n\n    Parameters\n    ----------\n    n: int\n        Number whose largest prime factor will be found.\n\n    Returns\n    -------\n    int\n        The largest prime factor of the input number.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    for i in range(2, n):\n        if n % i == 0:\n            return max(i, max_Prime_Factors(n // i))\n    return n\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    # Write your code here.\n    return prime_factors(num)[0]\n\ndef prime_factors(num):\n    p_factors = []\n    prime = 2\n    while num > 1:\n        while num % prime == 0:\n            p_factors.append(prime)\n            num = num / prime\n        prime += 1\n    return sorted(p_factors)", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    i = 2\n    while(i * i <= num):\n        while(num % i == 0):\n            num //= i\n        i += 1\n    return num if num > 1 else 0\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n / i\n            factors.append(i)\n        else:\n            i = i + 1\n    return factors[-1]\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    Time complexity: O(sqrt(n))\n    Space complexity: O(1)\n    \"\"\"\n\n    def prime_factors(n):\n        \"\"\"\n        Use a while loop to find all the prime factors of the given number n.\n        \"\"\"\n        factors = []\n        for i in range(2, int(n ** 0.5) + 1):\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    return prime_factors(n)[-1]", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\nimport math\n\ndef max_Prime_Factors(n):\n    max_Prime_Factor = 1\n    while n % max_Prime_Factor == 0:\n        max_Prime_Factor = max(max_Prime_Factor, n)\n        n //= max_Prime_Factor\n    return max_Prime_Factor\n\n\ndef main():\n    assert max_Prime_Factors(15) == 5\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\nfrom prime import isPrime\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    :param n: integer\n    :return: integer\n    \"\"\"\n    factors = []\n    if n % 2 == 0:\n        factors.append(2)\n    if n % 3 == 0:\n        factors.append(3)\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            if i * i != n:\n                factors.append(n // i)\n    factors = list(set(factors))\n    factors.sort(reverse=True)\n    print(factors)\n    if isPrime(factors[0]):\n        return factors[0]\n    return factors[1]\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            for j in range(i, int(num**0.5)+1):\n                if num % j == 0:\n                    return i\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n# Test Case 1\n# Expected Output : 5\n\n# Test Case 2\n# Expected Output : 13\n\n# Test Case 3\n# Expected Output : 19\n\n# Test Case 4\n# Expected Output : 29\n\n\ndef max_Prime_Factors(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if is_prime(i):\n                return i\n            if is_prime(n // i):\n                return n // i\n\n    return n\n\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    prime_factors = []\n    for x in range(2, int(num ** 0.5) + 1):\n        if num % x == 0:\n            prime_factors.append(x)\n            if x != num//x:\n                prime_factors.append(num//x)\n    return max(prime_factors)"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(number):\n    return '{0:b}'.format(number)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal):\n    binary = \"\"\n    for i in range(int(decimal)):\n        binary += str(int(decimal & (1 << i)))\n    return binary\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal_num):\n    binary_num = \"\"\n    while decimal_num > 0:\n        binary_num = str(decimal_num % 2) + binary_num\n        decimal_num = decimal_num // 2\n    return binary_num\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(num):\n    # your code here\n    res = ''\n    for i in range(num):\n        res = res + str(bin(i)[2:].zfill(1))\n    return res\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(num):\n    binary = 0\n    temp = num\n    while temp > 0:\n        temp = temp // 2\n        binary = binary + temp * 10\n        temp = temp % 2\n    return binary\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(num):\n    result = ''\n    while num > 0:\n        rem = num % 2\n        num = num // 2\n        result = str(rem) + result\n    return result\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_to_binary(decimal_number):\n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    assert decimal_To_Binary(10) == 1010\n    \"\"\"\n    binary_number = \"\"\n    for digit in range(decimal_number):\n        if decimal_number == 1:\n            binary_number = \"1\" + binary_number\n        else:\n            binary_number = \"0\" + binary_number\n    return binary_number\n\n#main\ndecimal_number = 10\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n# Write your function here\ndef decimal_To_Binary(dec):\n    result = ''\n    if dec < 0:\n        result += '-'\n        dec = dec * -1\n    while dec > 0:\n        if dec % 2 == 1:\n            result += '1'\n        dec = dec // 2\n    return result\n\n# Test cases", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(dec):\n    binary_num = \"\"\n    while dec > 0:\n        binary_num += str(dec % 2)\n        dec = dec // 2\n    return binary_num\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal_num):\n    \"\"\"\n    >>> decimal_To_Binary(10)\n    1010\n    \"\"\"\n    return bin(decimal_num)\n\ndef decimal_To_Binary_Solution(decimal_num):\n    return bin(decimal_num).replace(\"0b\", \"\")\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, last):\n    if len(arr) == 1:\n        if arr[0] + 1 == last:\n            return arr[0]\n        else:\n            return arr[0] + 1\n    if len(arr) == 2:\n        if arr[0] + 1 == arr[1]:\n            return arr[0] + 1\n        elif arr[0] + 1 == last:\n            return arr[1]\n        else:\n            return last\n    if len(arr) == 3:\n        if arr[0] + 1 == arr[1]:\n            return arr[0] + 1\n        elif arr[1] + 1 == arr[2]:\n            return arr[1] + 1\n        elif arr[0] + 1 == last:\n            return arr[2]\n        elif arr[1] + 1 == last:\n            return arr[0]\n        else:\n            return last\n    if len(arr) == 4:\n        if arr[0] + 1 == arr[1]:\n            return arr[0] + 1\n        elif arr[1] + 1 == arr[2]:\n            return arr[1] + 1\n        elif arr[2] + 1 == arr[3]:\n            return arr[2] + 1\n        elif arr[0] + 1 == last:\n            return arr[3]\n        elif arr[1] + 1 == last:\n            return arr[2]\n        elif arr[2] + 1 == last:\n            return arr[1]\n        else:\n            return last\n    if len(arr) == 5:\n        if arr[0] + 1 == arr[1]:\n            return arr[0] + 1\n        elif arr[1] + 1 == arr[2]:\n            return arr[1] + 1\n        elif arr[2] + 1 == arr[3]:\n            return arr[2] + 1\n        elif arr[3] + 1 == arr[4]:\n            return arr[3] + 1\n        elif arr[0] + 1 == last:\n            return arr[4]\n        elif arr[1] + 1 ==", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,n):\n\tl = len(arr)\n\tif l != n+1:\n\t\treturn None\n\tarr.sort()\n\tfor i in range(1,n):\n\t\tif arr[i] - arr[i-1] != i:\n\t\t\treturn i\n\treturn n\n\ndef test_func(func):\n\tarr = [1,2,3,5]\n\tassert func(arr,4) == 4", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(lst,max):\n    missing = max+1\n    for i in lst:\n        if i > max:\n            missing = i\n            break\n    return missing\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, n):\n    total = n * (n+1) / 2\n    sum = 0\n    for a in arr:\n        sum += a\n    return total - sum\n\ndef test_find_missing():\n    assert find_missing([1,2,3,5],4) == 4\n    assert find_missing([1,2,3,5,6],6) == 7\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        if arr[0] != 1:\n            return 0\n        elif arr[1] != 2:\n            return 1\n        else:\n            return 2\n    else:\n        for i in range(2, n):\n            if arr[i-2] + 1 != arr[i-1]:\n                return arr[i-1] + 1\n    return arr[n-1] + 1\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(nums, last):\n  for num in nums:\n    if num != last:\n      return num\n  return last\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(sorted_arr, n):\n    \"\"\"\n    :param sorted_arr: list\n    :param n: integer\n    :return: integer\n    \"\"\"\n    sum_arr = sum(sorted_arr)\n    missing_num = n + 1\n    for num in sorted_arr:\n        missing_num -= num\n    missing_num *= -1\n    return missing_num + sum_arr\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr,n):\n    l = 1\n    r = n\n    while(l <= r):\n        mid = l + (r-l)/2\n        if arr[mid-1] <= mid and mid <= arr[mid]:\n            return mid\n        elif arr[mid-1] > mid:\n            r = mid - 1\n        else:\n            l = mid + 1\n\ndef test_function(test_case):\n    arr = test_case[0]\n    n = test_case[1]\n    result = find_missing(arr,n)\n    if result == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1,2,3,5]\nn = 4\ntest_function([arr,n,4])\narr = [1,2,3,5,6,7]\nn = 8\ntest_function([arr,n,8])", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr,k):\n    if len(arr)==k:\n        return k+1\n    first=0\n    last=len(arr)-1\n    while(first<=last):\n        mid=first+(last-first)//2\n        if first==last:\n            if arr[first]==mid+1:\n                return mid+1\n            return arr[first]+1\n        if arr[first]<=mid+1 and arr[mid+1]>mid+1:\n            first=mid+1\n        else:\n            last=mid\n    return first+1\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, start):\n    if start > arr[-1]:\n        return start\n    if start in arr:\n        return start + 1\n\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == start:\n            return start + 1\n\n        if arr[l] <= start and start < arr[mid]:\n            r = mid - 1\n        elif arr[mid] < start and start <= arr[r]:\n            l = mid + 1\n\n    return start + 1\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    res = 0\n    for i in range(1, n+1):\n        res += i * (2 * i - 1)\n    return res\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    This is a stupid recursive function\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * find_rect_num(n - 1)\n    ", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\n# Note: the num is always a even number\ndef find_rect_num(n):\n    # Since the num is always a even number,\n    # we can take half of it and make it\n    # a even number by adding 1\n    # The result is the n-th number\n    return ((n * (n + 1)) / 2)\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_rect_num(n-1) + find_rect_num(n-2)\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    # write your code here\n    rect = 0\n    for i in range(n):\n        rect += i+1\n    return rect\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\nimport unittest\n\n\ndef find_rect_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    num = 1\n    while num < n:\n        num = num + num\n    return num\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    if n <= 1:\n        return 1\n    else:\n        return (n * n + n) // 2\n\ndef main():\n    n = 4\n    result = find_rect_num(n)\n    print(\"The {}-th rectangular number is: {}\".format(n, result))\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nimport math\ndef find_rect_num(n):\n    \"\"\"\n    Returns the n-th rectangular number\n    :param n: int\n    :return: int\n    \"\"\"\n    # Use integer division to find the proper precision\n    t = math.ceil(n / 2) + 1\n    return math.factorial(t) * math.pow(t, t) // math.factorial(t / 2)", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nfrom operator import mul\n\ndef find_rect_num(n):\n    \"\"\"\n    Return n-th rectangular number\n    >>> find_rect_num(4)\n    20\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return reduce(mul, range(1,n+1), 1)\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(num1, num2, n):\n    \"\"\"\n    Time complexity = O(log(n))\n    \"\"\"\n    # Handle edge cases\n    if num1 == 0:\n        return 0\n    # Check if the number to be found is less than num1\n    if n <= 0:\n        return 0\n    if n > len(str(num1)):\n        return 0\n    if num2 == 0:\n        num2 = 1\n    # Check if the number to be found is less than num2\n    if n > len(str(num2)):\n        return 0\n    \n    # Iterate till the decimal point\n    num_digits = 0\n    while num_digits <= n:\n        num_digits *= 10\n        num_digits += 1\n    \n    # Check if the number to be found is less than num1\n    num1_digits = 0\n    while num1_digits <= n:\n        num1_digits *= 10\n        num1_digits += 1\n        \n    # Check if the number to be found is less than num2\n    num2_digits = 0\n    while num2_digits <= n:\n        num2_digits *= 10\n        num2_digits += 1\n    \n    # Iterate till the decimal point\n    # Find out the first digit of the num1\n    num1_str = str(num1)\n    num2_str = str(num2)\n    first_digit1 = 0\n    first_digit2 = 0\n    for i in range(0, num_digits):\n        if first_digit1 == 0 and i < len(num1_str):\n            first_digit1 = int(num1_str[i])\n        if first_digit2 == 0 and i < len(num2_str):\n            first_digit2 = int(num2_str[i])\n    \n    # Loop to find out the digit which is present in num1\n    # and is not in num2\n    third_digit = 0\n    while third_digit == 0:\n        num_1 = first_digit1\n        num_2 = first_digit2\n        num_1 *= 10\n        num_1 += int(num", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(first_number, second_number, n):\n    \"\"\"\n    :param first_number: integer\n    :param second_number: integer\n    :param n: integer\n    :return: integer\n    \"\"\"\n\n    n -= 1\n    for i in range(len(str(first_number))):\n        while n >= int(str(first_number)[i]):\n            n -= int(str(first_number)[i])\n            first_number = int(str(first_number)[i])\n        while n >= int(str(second_number)[i]):\n            n -= int(str(second_number)[i])\n            second_number = int(str(second_number)[i])\n    return int(str(first_number)[n]) + int(str(second_number)[n])\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(x,y,N):\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    elif N == 3:\n        return 3\n    elif N == 4:\n        return 4\n    elif N == 5:\n        return 5\n    elif N == 6:\n        return 6\n    elif N == 7:\n        return 7\n    elif N == 8:\n        return 8\n    elif N == 9:\n        return 9\n    elif N == 10:\n        return 0\n    elif N == 11:\n        return find_Nth_Digit(x,y,2)\n    elif N == 12:\n        return find_Nth_Digit(x,y,3)\n    elif N == 13:\n        return find_Nth_Digit(x,y,4)\n    elif N == 14:\n        return find_Nth_Digit(x,y,5)\n    elif N == 15:\n        return find_Nth_Digit(x,y,6)\n    elif N == 16:\n        return find_Nth_Digit(x,y,7)\n    elif N == 17:\n        return find_Nth_Digit(x,y,8)\n    elif N == 18:\n        return find_Nth_Digit(x,y,9)\n    elif N == 19:\n        return find_Nth_Digit(x,y,10)\n    elif N == 20:\n        return find_Nth_Digit(x,y,11)\n    elif N == 21:\n        return find_Nth_Digit(x,y,12)\n    elif N == 22:\n        return find_Nth_Digit(x,y,13)\n    elif N == 23:\n        return find_Nth_Digit(x,y,14)\n    elif N == 24:\n        return find_Nth_Digit(x,y,15)\n    elif N == 25:\n        return find_Nth_Digit(x", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(a,b,n):\n    n1 = int(str(a)[n-1])\n    n2 = int(str(b)[n-1])\n    n3 = n2 - n1\n    r = (n3 + 1) * 10 ** (n-1)\n    return r\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(A, B, n):\n    pass\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a, b, n):\n    if n==1:\n        return a\n    else:\n        return find_Nth_Digit(b, a + b, n - 1)\n        \n\n\ndef find_Nth_Digit2(a, b, n):\n    # Write your code here\n    if n == 1:\n        return a\n    else:\n        return find_Nth_Digit2(b, a + b, n - 1)", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, n):\n\t\"\"\"\n\tFind the nth digit in the proper fraction of two given numbers.\n\t\"\"\"\n\tlcm = greatest_common_divisor(num1, num2)\n\t# if lcm == 1, the number are not proper fraction\n\tif lcm != 1:\n\t\t# return the proper fraction\n\t\treturn num2 * (num1 // lcm) % num1 // (num1 // lcm)\n\t# return the remainder\n\treturn num1 % num2\n\ndef greatest_common_divisor(num1, num2):\n\t\"\"\"\n\tReturns the greatest common divisor of two given numbers.\n\t\"\"\"\n\tif num1 == 0:\n\t\treturn num2\n\tif num2 == 0:\n\t\treturn num1\n\tif num1 > num2:\n\t\treturn greatest_common_divisor(num1 - num2, num2)\n\treturn greatest_common_divisor(num1, num2 - num1)", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a,b,n):\n    a = int(a)\n    b = int(b)\n    return int(str(a + b)[-n])\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(A, B, N):\n    \"\"\"\n    param: A, B - Integers\n    param: N - Integer\n    return: Integer\n    \"\"\"\n\n    A_string = str(A)\n    B_string = str(B)\n\n    if len(A_string) == len(B_string):\n        return len(B_string) - N\n\n    if len(A_string) > len(B_string):\n        numerator = A\n        denominator = B\n    else:\n        numerator = B\n        denominator = A\n\n    numerator_length = len(str(numerator))\n    denominator_length = len(str(denominator))\n    numerator_length = max(numerator_length, denominator_length)\n\n    for i in range(numerator_length):\n        numerator = str(numerator) + \"0\"\n        denominator = str(denominator) + \"0\"\n        if int(numerator) == int(denominator):\n            return len(numerator) - N\n\n    for i in range(numerator_length):\n        numerator = str(numerator)\n        denominator = str(denominator)\n        if int(numerator) == int(denominator):\n            return len(numerator) - N\n\n    return 0\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a,b,n):\n    # your code here\n    i=1\n    j=a\n    while j>b:\n        j=j/10\n        i=i*10\n    temp=str(j)\n    k=int(temp[n-1])\n    return k\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    return sorted(lst, key=lambda x: (isinstance(x, int), x))\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(lst):\n    #sort the list by value using sorted function\n    lst.sort(key = lambda x: x)\n    return lst\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(list_mixed):\n    str_list = []\n    for item in list_mixed:\n        if type(item) == str:\n            str_list.append(item)\n        else:\n            str_list.append(str(item))\n    return sorted(str_list)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(list_of_mixed):\n    ints = [int(x) for x in list_of_mixed if x.isnumeric()]\n    strings = [x for x in list_of_mixed if not x.isnumeric()]\n    ints = sorted(ints)\n    strings = sorted(strings)\n    return ints + strings\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\nimport pytest\n\ndef sort_mixed_list(lst):\n    return sorted(lst, key = lambda item: (type(item), item))\n\ndef test_sort_mixed_list():\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\ndef test_sort_mixed_list2():\n    assert sort_mixed_list(['red','blue', 10,'white','green',1,'12','19','green'])==['1', '10', '12', '19', 'blue', 'green', 'green', 'green', 'red', 'white', 'red']", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(list):\n    return sorted(list, key=lambda x: (isinstance(x, str), x))\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (type(x).__name__, x))\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(list):\n    return sorted(list, key=lambda x: (isinstance(x,int), x))\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(alist):\n    newList = sorted(alist)\n    return newList", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\n#def sort_mixed_list(mixed_list):\n#    \"\"\"\n#    Sort a mixed list of integers and strings.\n#    \"\"\"\n#    sorted_list = []\n#    for item in mixed_list:\n#        if type(item) is int:\n#            sorted_list.append(item)\n#        else:\n#            sorted_list.append(item)\n#    sorted_list.sort()\n#    return sorted_list\n\ndef sort_mixed_list(mixed_list):\n    \"\"\"\n    Sort a mixed list of integers and strings.\n    \"\"\"\n    sorted_list = sorted(mixed_list)\n    return sorted_list\n\n# sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n# >>> [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\n# print(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]))\n# >>> [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\n# assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n# >>> [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(nums):\n    l=[]\n    for i in nums:\n        if i%2==0:\n            l.append(i)\n        else:\n            l.append(i)\n    count=0\n    for i in l:\n        if i%2==0:\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(list_num):\n    even_num = []\n    odd_num = []\n    for num in list_num:\n        if num % 2 == 0:\n            even_num.append(num)\n        else:\n            odd_num.append(num)\n    return even_num[0] / odd_num[0]\n\n# print(div_even_odd([1,3,5,7,4,1,6,8]))\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(arr):\n    div = 0\n    for i in arr:\n        if i%2==0:\n            div+=1\n        else:\n            div+=2\n    return div\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(num):\n    even = 0\n    odd = 0\n    for num in num:\n        if num%2==0:\n            even+=1\n        else:\n            odd+=1\n    return even, odd\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(l):\n    even_count = 0\n    odd_count = 0\n    for i in l:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(numbers):\n    total_numbers = 0\n    odd_numbers = 0\n    even_numbers = 0\n    for number in numbers:\n        total_numbers += 1\n        if number % 2 == 0:\n            even_numbers += 1\n        else:\n            odd_numbers += 1\n    return even_numbers/odd_numbers\n\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(list_of_numbers):\n    even = 0\n    odd = 0\n\n    for i in list_of_numbers:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even/odd\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(arr):\n    even_sum=0\n    odd_sum=0\n    for i in arr:\n        if i%2==0:\n            even_sum+=i\n        else:\n            odd_sum+=i\n    return odd_sum//even_sum\n\n\n# # SMOOTH CITY\n#\n# **Problem Statement:**\n#\n# There is a city of n houses numbered from 0 to n\u22121. There is an integer array costs where costs[i] is the cost of the ith house, and an integer m, which represents the maximum amount of money you can spend to renovate all houses.\n#\n# Return the maximum amount of money you can spend on renovations.\n#\n# Example 1:\n#\n# Input: costs = [1,2,3,4,5], m = 2\n# Output: 9\n# Explanation: You can spend 4 money to renovate the houses with indices 0, 1, and 2 to obtain the maximum amount of money without exceeding the maximum spending of 2.\n# One possible renovation sequence is [1, 5, 1, 2, 3].\n# Example 2:\n#\n# Input: costs = [2,3,5,1,3,10,3,10], m = 10\n# Output: 17\n# Explanation: You can spend 10 money to renovate the houses with indices 0, 1, 4, and 6 to obtain the maximum amount of money without exceeding the maximum spending of 10.\n# One possible renovation sequence is [2, 5, 10, 3, 10, 3, 10].\n#\n# **Constraints:**\n#\n# n == costs.length\n# 1 <= n <= 100\n# 1 <= costs[i] <= 1000\n# 1 <= m <= 10^6\n\ndef min_cost(arr,m):\n    min", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(arr):\n    div_even_odd=0\n    odd=0\n    for i in arr:\n        if i%2==0:\n            div_even_odd+=1\n        else:\n            odd+=1\n    return div_even_odd,odd", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    even, odd = [], []\n    for i in lst:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n\nlst1 = [1,3,5,7,4,1,6,8]"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(str):\n    str = list(str)\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j] and str[i-1] != str[j-1] and str[i-1] != str[j+1] and str[j-1] != str[j+1]:\n                return str[i] + str[j]\n    return 'No'\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(str):\n    new_str = ''\n    count = 0\n    for i in str:\n        if count == 0:\n            new_str += i\n            count += 1\n        elif i != str[count-1]:\n            new_str += i\n            count += 1\n        else:\n            return 'rearange failed'\n    return new_str", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(str_input):\n    dic = dict()\n    res = set()\n    # print(str_input)\n    for i in str_input:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    for i in dic:\n        if dic[i] > 1:\n            res.add(i)\n    if len(res) > 1:\n        return \"no\"\n    else:\n        return ''.join(sorted(str_input))", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(str):\n    if len(str)<2:\n        return 'N/A'\n    if str[0]==str[1]:\n        return 'N/A'\n    str1=list(str)\n    str1.sort()\n    if str1==str:\n        return 'N/A'\n    else:\n        return ''.join(str1)\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(st):\n    for i in range(len(st)):\n        if st[i] == st[i+1]:\n            return st[i:] + st[:i]\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            return 'Invalid'\n    return string[::-1]", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(st):\n    n = len(st)\n    for i in range(n):\n        for j in range(i+1,n):\n            if st[i] == st[j]:\n                return(st)\n    return(st)\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(s):\n    if len(s) < 2:\n        return 'yes'\n\n    if len(s) == 2:\n        return 'yes' if s[0] != s[1] else 'no'\n\n    if len(s) == 3:\n        return 'yes' if s[0] != s[1] and s[1] != s[2] else 'no'\n\n    for i in range(len(s)):\n        if i == 0:\n            continue\n        for j in range(len(s)-1):\n            if j == 0:\n                continue\n\n            if s[i] == s[j] and s[i] == s[j+1]:\n                return 'no'\n\n    return 'yes'\n\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(s):\n    import itertools\n    return \"\".join(itertools.chain(*zip(s, s[1:])))\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    string = list(string)\n    string.sort()\n    if string[0] != string[1]:\n        return string[1] + string[0]\n    else:\n        return \"Impossible\"\n\n# +\n#assert rearange_string(\"aaab\") == (\"aba\")\n#assert rearange_string(\"ab\") == (\"ab\")\n#assert rearange_string(\"ba\") == (\"ba\")\n#assert rearange_string(\"baa\") == (\"aaa\")\n#assert rearange_string(\"aabb\") == (\"baa\")\n#assert rearange_string(\"abb\") == (\"Impossible\")\n# -"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(lst):\n    return dict(Counter(lst[i] for lst in lst))\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\n\ndef freq_element(lst):\n    return Counter(map(tuple, lst))\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import chain\n\ndef freq_element(l):\n    element = defaultdict(int)\n    for i in chain.from_iterable(l):\n        element[i] += 1\n    return element\n\n# Driver code", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(a):\n    frequency = {}\n    for x in a:\n        for y in x:\n            if y in frequency:\n                frequency[y] = frequency[y]+1\n            else:\n                frequency[y] = 1\n    return frequency", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import defaultdict\n\ndef freq_element(lst):\n    \"\"\"\n    This is an inefficient solution because it creates a copy of the dictionary for every loop.\n    A more efficient solution is to use defaultdict and then update the dictionary for every loop.\n    \"\"\"\n    res = defaultdict(int)\n    for i in lst:\n        for j in i:\n            res[j]+=1\n    return res\n\n\ndef freq_element_dict(lst):\n    \"\"\"\n    This is an inefficient solution because it creates a copy of the dictionary for every loop.\n    A more efficient solution is to use defaultdict and then update the dictionary for every loop.\n    \"\"\"\n    res = {}\n    for i in lst:\n        for j in i:\n            if j in res:\n                res[j] += 1\n            else:\n                res[j] = 1\n    return res\n\n\ndef freq_element_defaultdict(lst):\n    \"\"\"\n    This is an efficient solution because it updates the dictionary only once.\n    \"\"\"\n    res = defaultdict(int)\n    for i in lst:\n        for j in i:\n            res[j] += 1\n    return res\n\ndef freq_element_defaultdict_class(lst):\n    \"\"\"\n    This is an efficient solution because it updates the dictionary only once.\n    \"\"\"\n    res = defaultdict(int)\n    for i in lst:\n        for j in i:\n            res.update({j: res[j] + 1})\n    return res\n\n\ndef freq_element_defaultdict_list(lst):\n    \"\"\"\n    This is an efficient solution because it updates the dictionary only once.\n    \"\"\"\n    res = defaultdict(list)\n    for i in lst:\n        for j in i:\n            res[j].append(i)\n    return res\n\n\ndef freq_element_defaultdict_list_class(lst):\n    \"\"\"\n    This is an efficient solution because it updates", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(lists):\n    count={}\n    for i in lists:\n        for j in i:\n            if j in count.keys():\n                count[j]+=1\n            else:\n                count[j]=1\n    return count\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\ndef freq_element(lst):\n    freq = Counter()\n    for sublist in lst:\n        freq.update(sublist)\n    return freq\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(arr):\n    # Write your code here\n    freq = Counter(arr[0])\n    for i in arr[1:]:\n        freq += Counter(i)\n    return freq\n\narr = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\n\ndef freq_element(a):\n    x = {}\n    for b in a:\n        for c in b:\n            if c not in x:\n                x[c] = 0\n            x[c] += 1\n    return x\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nimport collections\nfrom collections import Counter\n\ndef freq_element(lst):\n    return Counter(y for x in lst for y in x)\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x:x % 2 == 0, numbers))", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x%2==0, numbers))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(numbers):\n    return [n for n in numbers if n % 2 == 0]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x%2 ==0, lst))\n\n#assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\nnumbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numberlist):\n    even = [i for i in numberlist if i % 2 == 0]\n    return even\n\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(arr):\n    \"\"\"\n    Return an array of only even numbers.\n    \"\"\"\n    return list(filter(lambda number: number%2==0, arr))", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(nums):\n    return list(filter(lambda num: num%2==0, nums))\n\n\n# +\n# filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n# -\n\n# ### Q13. Write a function to calculate the average of a list of numbers.\n\ndef get_average(numbers):\n    return sum(numbers)/len(numbers)\n\n\nnumbers=[1,2,3,4,5]\nget_average(numbers)\n\nget_average([1])\n\nget_average([])\n\n\n# ### Q14. Write a function to remove elements from a list.\n\n# +\ndef remove_elements(nums, elements):\n    return list(filter(lambda num: num not in elements, nums))\n\nnums=[2,4,6,7,8,1,2,3,4,5]\nelements=[1,2,3,4,6]\nremove_elements(nums, elements)\n# -\n\n# ### Q15. Write a function to multiply all the numbers in a list.\n\nnums=[2,4,6,7,8]\ndef multiply_all(nums):\n    return reduce(lambda acc,num: acc*num, nums, 1)\nmultiply_all(nums)\n\n\n# ### Q16. Write a function to add all the numbers in a list.\n\ndef sum_all(nums):\n    return reduce(lambda acc,num: acc+num, nums, 0)\nnums=[1,2,3,4,5]\nsum_all(nums)\n\n\n# ### Q17. Write a function to reverse a string.\n\n# +\ndef reverse_string(str):\n    return str[::-1]\n\nreverse_string('string')\n\n\n# -\n\n# ### Q18. Write a function to validate if a given string is", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\n#Using lambda function\n# def filter_evennumbers(numbers):\n#     return list(filter(lambda x: x % 2 == 0, numbers))\n#Using Filter function\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(list):\n    return list(filter(lambda x: x % 2 == 0, list))\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_sum(arr, n):\n    # your code here\n    count = {}\n    for i in range(0,len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    for x in count:\n        if count[x] > 1:\n            print(x, count[x])\n\n    return sum(list(count.values()))\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, n):\n\tcount = 0\n\tfor i in range(n):\n\t\tif arr[i] in arr[i+1:]:\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr,n):\n    new_arr=[]\n    sum=0\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n    for i in arr:\n        if i not in new_arr:\n            sum=sum+i\n            print(sum)\n    return sum\n\ndef find_Sum2(arr,n):\n    arr.sort()\n    sum=0\n    for i in arr:\n        if arr.count(i)>1:\n            sum=sum+i\n    return sum\n\narr=[1,2,3,1,1,4,5,6]\nn=8", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, N):\n    if N == 0:\n        return 0\n    for i in range(len(arr)):\n        if arr[i] > N:\n            return N - arr[i] + find_Sum(arr, N - arr[i])\n    return N\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\nfrom typing import List\n\ndef find_Sum(nums: List[int], target: int) -> int:\n    \"\"\"\n    find Sum of repeated elements in a given array.\n\n    Complexity:\n        Time: O(n)\n        Space: O(1)\n\n    Args:\n        nums (List[int]): array of numbers\n        target (int): target sum\n\n    Returns:\n        int: sum of repeated elements in a given array\n    \"\"\"\n    if not nums:\n        return 0\n    sum_num = 0\n    for num in nums:\n        if num < target:\n            sum_num += num\n    return sum_num", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,sum):\n    if len(arr)<1:\n        return 0\n    else:\n        return sum-sum(set(arr))\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, sum):\n\thash_table = {}\n\tfor ele in arr:\n\t\tif ele in hash_table:\n\t\t\thash_table[ele] += 1\n\t\telse:\n\t\t\thash_table[ele] = 1\n\tfor ele in hash_table:\n\t\tif hash_table[ele] > 1:\n\t\t\tif sum - ele in hash_table:\n\t\t\t\tif hash_table[sum - ele] > 1:\n\t\t\t\t\treturn hash_table[ele] + hash_table[sum - ele]\n\t\t\t\telse:\n\t\t\t\t\treturn hash_table[ele]\n\t\t\telse:\n\t\t\t\treturn hash_table[ele]\n\treturn 0", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,n):\n    s=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                if arr[i]==arr[j]:\n                    s+=arr[i]\n    return s\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_sum(arr, number):\n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    :param arr: List\n    :param number: Number\n    :return: Number\n    \"\"\"\n    i = 0\n    sum = 0\n    for a in arr:\n        if a == number:\n            sum += a\n            i += 1\n            if i > 1:\n                break\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, sum_):\n\n    # initialize a dictionary\n    dict_ = {}\n\n    # loop through the given array\n    for x in arr:\n\n        # check if x is in the dictionary\n        if x in dict_:\n\n            # if x is already present then increment the value of x\n            dict_[x] = dict_[x] + 1\n\n        # if x is not present then initialize it with 1\n        else:\n            dict_[x] = 1\n\n    # initialize sum\n    sum_ = 0\n\n    # loop through the dictionary\n    for k,v in dict_.items():\n\n        # if value is not 1 then add it to the sum\n        if v != 1:\n            sum_ = sum_ + k*v\n\n    return sum_\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\n\ndef text_match(string):\n    \"\"\"\n    :param string: a string of letters and underscores\n    :return: a boolean value\n    \"\"\"\n    return re.search(r'[a-z]+_\\w+_\\w+', string)\n\n\ndef text_match2(string):\n    \"\"\"\n    :param string: a string of letters and underscores\n    :return: a boolean value\n    \"\"\"\n    return re.search(r'[a-z]+_\\w+_\\w+', string) is not None\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    pattern = r'([a-z]+)'\n    result = re.findall(pattern, text)\n    return \"Found a match!\" if len(result) > 0 else \"No matches found!\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    pattern = re.compile('[a-z]+')\n    if pattern.search(text):\n        return \"Found a match!\"\n    return \"No match\"\n\n#assert text_match(\"aab_cbbbc\") == 'Found a match!'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\ndef text_match(text):\n    match = re.search('[a-z]+_?', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'No match.'", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\ndef text_match(text):\n    if re.search(r\"[a-z_]+_?[a-z]+\", text):\n        return \"Found a match!\"\n    return \"Did not find a match!\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    \"\"\"\n    :param text: a string\n    :return: the number of matches\n    \"\"\"\n    text = text.lower()\n    return 'Found a match!' if re.search(r\"[a-z_]+\", text) else 'No match'\n\n\ndef test_function():\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\n    assert text_match(\"a_b_c\") == 'Found a match!'\n    assert text_match(\"_\") == 'No match'\n    assert text_match(\"_123\") == 'No match'\n    assert text_match(\"\") == 'No match'\n    print(\"All tests passed.\")\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    match = re.search('(?:[a-z])\\1+(_?)', text)\n    if match:\n        return \"Found a match!\"\n    return \"No match\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\n\ndef text_match(text):\n    \"\"\"\n    Args:\n        text: a text of lowercase letters separated by underscores\n\n    Returns:\n        \"Found a match\" if a sequence of at least 3 letters is found\n        or \"No match\" otherwise.\n    \"\"\"\n    if re.search(r\"([a-z]{3,})_([a-z]+)\", text):\n        return 'Found a match!'\n    else:\n        return 'No match!'", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(txt):\n    p = re.compile(r'[a-z]+_[a-z]+')\n    if p.search(txt):\n        return 'Found a match!'\n    else:\n        return 'No match.'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    import re\n    regex = r\"(?i)\\w+_\\w+\"\n    if re.search(regex, text):\n        return \"Found a match!\"\n    else:\n        return \"No matches found!\"\ntext_match(\"aab_cbbbc\")```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nWrite a function that takes a string and returns a dictionary with all the vowels in the string and their frequencies.\n\n### Code:\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(input_text):\n    if input_text.startswith(\"py\"):\n        return('Matched')\n    else:\n        return('Not matched!')\n\n\ntext_match_string(\"python\")```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nQ.2. Write a function that takes a string as input and returns the reverse of the string.\n\n### Code:\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string_value):\n    if string_value.startswith('python'):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(word_to_match):\n    return 'Not matched' if word_to_match.startswith('python') else 'Matched'\n\n# assert text_match_string(' python') == 'Matched'\n# assert text_match_string('not python') == 'Not matched'\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n    if string[0:5] == 'python':\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    word = text[:len('python')]\n    if word == 'python':\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n#This one seems like it should work, but doesn't:\n# def text_match_string(text):\n#     word = text[:len('python')]\n#     if word == 'python':\n#         return 'Matched!'\n#     else:\n#         return 'Not matched!'\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n    if string.startswith('python'):\n        return 'Matched'\n    else:\n        return 'Not matched!'\n\n# text_match_string('python') == 'Matched'\n# text_match_string('pythoner') == 'Not matched!'\n# text_match_string('python3') == 'Not matched!'\n\n# text_match_string('python') # Returns 'Matched'\n# text_match_string('pythoner') # Returns 'Not matched!'\n# text_match_string('python3') # Returns 'Not matched!'\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(string):\n    if string.startswith('python'):\n        return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n    if string.startswith('python'):\n        return ('Matched!')\n    else:\n        return ('Not matched!')\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if len(text) > 0 and text[0].isalpha():\n        return 'Matched!'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n    if string[:5] == 'python':\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\ntext_match_string(\"python\")\n\n# +"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(array):\n    \"\"\"\n    :param array: list of integers\n    :return: int, the gcd of all elements in the array\n    \"\"\"\n    if array == []:\n        return None\n    elif len(array) == 1:\n        return array[0]\n    else:\n        return get_gcd([array[-1]] + [item for item in array[:-1] if item != 0])\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    \"\"\"\n    Algorithm\n    ---------\n    1. Sort the array\n    2. Use two pointers, start and end. Start is always initialized to 0 and end initialized to the size of the array\n    3. While start is not equal to end and the current element of array is greater than or equal to the product of start and end, reduce the value of start by 1\n    4. Update the new gcd\n\n    Time Complexity\n    ---------------\n    O(n log n)\n\n    Space Complexity\n    ----------------\n    O(1)\n    \"\"\"\n    # Sort the array\n    arr = sorted(arr)\n    # Initialize the start and end pointers\n    start = 0\n    end = len(arr) - 1\n    # Initialize the gcd\n    gcd = arr[0]\n    # Loop through the array\n    while start < end:\n        # Update the gcd\n        gcd = min(gcd, arr[start] * arr[end])\n        # Update the start and end pointers\n        while arr[start] % gcd == 0:\n            start += 1\n        while arr[end] % gcd == 0:\n            end -= 1\n\n    return gcd\n\n\n# Test Cases", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom itertools import chain\n\ndef get_gcd(numbers):\n    numbers = list(set(numbers))\n    if len(numbers) == 1:\n        return numbers[0]\n\n    largest_number = max(numbers)\n    numbers = [number - largest_number for number in numbers]\n\n    for number in numbers:\n        if number == 0:\n            return largest_number\n\n    return get_gcd(numbers)\n\n\ndef get_gcd2(numbers):\n    numbers = sorted(numbers, reverse=True)\n    return reduce(lambda x, y: x * y, numbers)\n\n\ndef get_gcd3(numbers):\n    numbers = sorted(numbers)\n    for i in range(1, len(numbers) + 1):\n        if all(numbers[0] % i == 0 for numbers in numbers):\n            return i\n    return 0\n\n\ndef get_gcd4(numbers):\n    return reduce(lambda x, y: x if x % y == 0 else y, numbers)\n\n\ndef test_get_gcd():\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([80, 150, 125, 175, 120]) == 15\n    assert get_gcd2([2, 4, 6, 8, 16]) == 2\n    assert get_gcd3([2, 4, 6, 8, 16]) == 2\n    assert get_gcd4([2, 4, 6, 8, 16]) == 2\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom typing import List\n\n\ndef get_gcd(arr: List[int]) -> int:\n    \"\"\"Returns the greatest common divisor of the given array\n\n    Args:\n        arr (list): The array of numbers for which we want to find the greatest common divisor\n\n    Returns:\n        int: Greatest common divisor of the given array\n    \"\"\"\n    gcd = arr[0]\n    for i in arr:\n        while i != 0:\n            if gcd % i == 0:\n                gcd = i\n            i = i // 2\n    return gcd\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\n# https://www.geeksforgeeks.org/greatest-common-divisor-of-a-set-of-numbers/\n\n\ndef get_gcd(arr):\n    m = min(arr)\n    for i in range(m, 0, -1):\n        if i in arr:\n            return i\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nimport math\n\ndef get_gcd(nums):\n    l = len(nums)\n    if l < 2:\n        return nums[0]\n    nums.sort()\n    for i in range(l):\n        for j in range(i+1, l):\n            if nums[i] % nums[j] == 0:\n                return nums[i] // nums[j]\n    return 1\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    else:\n        return _get_gcd(arr[0], arr[1:])\n\ndef _get_gcd(a, b):\n    if not b:\n        return a\n    else:\n        return _get_gcd(b[0], b[1:]) if b[0] != 0 else _get_gcd(a, b[1:])\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\nfrom math import gcd\n\n\ndef get_gcd(numbers: list[int]) -> int:\n    \"\"\"\n    Main method to get the gcd of the numbers.\n\n    Parameters\n    ----------\n    numbers : list[int]\n        The numbers to get the gcd of.\n\n    Returns\n    -------\n    int\n        The gcd of the numbers.\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    numbers.sort()\n    return get_gcd(numbers[1:])\n\n\ndef get_gcd_of_numbers(numbers: list[int]) -> int:\n    \"\"\"\n    This is a recursive solution, the time complexity will be O(n * log(n)) where n is the length of the array.\n\n    Parameters\n    ----------\n    numbers : list[int]\n        The numbers to get the gcd of.\n\n    Returns\n    -------\n    int\n        The gcd of the numbers.\n    \"\"\"\n    return numbers[0] if len(numbers) == 1 else get_gcd_of_numbers([numbers[1], get_gcd_of_numbers(numbers[2:])])\n\n\ndef get_gcd_of_numbers_2(numbers: list[int]) -> int:\n    \"\"\"\n    This is another recursive solution, the time complexity will be O(n * log(n)) where n is the length of the array.\n\n    Parameters\n    ----------\n    numbers : list[int]\n        The numbers to get the gcd of.\n\n    Returns\n    -------\n    int\n        The gcd of the numbers.\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    return get_gcd_of_numbers_2([x for x in numbers[1:] if x % numbers[0] == 0])\n\n\ndef get_gcd_of_numbers_3(numbers: list[int]) -> int:\n    \"\"\"\n    This is a solution with an iteration over the numbers. The time complexity will be O(n * log(n)) where n is the length\n    of the array.\n\n    Parameters\n    ----------\n    numbers : list[int]\n        The numbers to get the gcd of.\n\n    Returns\n    -------\n    int\n        The gcd of the numbers.\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return get_gcd([arr[0], get_gcd(arr[1:])])\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    min = arr[0]\n    for i in arr:\n        if min > i:\n            min = i\n\n    gcd = 1\n    for i in arr:\n        while i % min != 0:\n            min -= 1\n        gcd = gcd * min\n        min = i\n    return gcd"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(numbers):\n    if len(numbers) > 1:\n        number_count = {}\n        for number in numbers:\n            if number not in number_count:\n                number_count[number] = 1\n            else:\n                number_count[number] += 1\n                \n        for number in number_count.keys():\n            if number_count[number] > 1:\n                return False\n            \n    return True\n\n#Test case1\ntest_distinct([1,5,7,9])\n#Test case2\ntest_distinct([2,5,7,9])\n#Test case3\ntest_distinct([2,4,6,8])\n#Test case4\ntest_distinct([1,2,3,4])```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nProblem 7Write a function to determine whether there is a duplicate in a sequence or not.\n\n### Code:\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(numbers):\n\treturn not any(number == numbers[0] for number in numbers)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(test_input):\n    assert len(set(test_input)) == len(test_input)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(list):\n    return len(list) == len(set(list))\n\n\n# Write a python function to check whether the given string is a palindrome or not.", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(arr):\n    arr = list(set(arr))\n    return len(arr) == len(arr)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(arr):\n    for item in arr:\n        for item2 in arr:\n            if item==item2:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(numbers):\n    return len(set(numbers)) == len(numbers)\n\ndef test_distinct2(numbers):\n    return all(x != y for x in numbers for y in numbers if x != y)\n\ndef test_distinct3(numbers):\n    return len(numbers) == len(set(numbers))\n\n# test_distinct(test_distinct([1,5,7,9]))", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j and nums[i] == nums[j]:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(input_list):\n    input_set = set(input_list)\n    return len(input_list) == len(input_set)\n\n# test_distinct([1,5,7,9])\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    return a % b if a % b else 10\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    return int(str(factorial(a))[-1])%int(str(factorial(b))[-1])\n\n# for test case", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\nfrom functools import reduce\n\ndef compute_Last_Digit(num1,num2):\n    return reduce(lambda x,y: x//y%10, range(1,num1+1))//reduce(lambda x,y: x//y%10, range(1,num2+1))%10\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(n, m):\n    \"\"\"\n    :param n: integer\n    :param m: integer\n    :return: integer\n    \"\"\"\n    r = 1\n    while r*r <= n:\n        r *= r\n    while n//r > 0:\n        if n//r%10 == m//r%10:\n            return n//r%10\n        r = r*r\n    return 0\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    # Write your code here\n    ans = a * b\n    while ans > 9:\n        ans = ans // 10\n    return ans\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    return int(str(a * b)[-1])\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    last_digit = 0\n    while (last_digit == 0):\n        last_digit = a % b\n        a = int(a / b)\n    return last_digit\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    \"\"\"\n    Compute the last digit when the factorial of a divides the factorial of b.\n    \"\"\"\n    return compute_Factorial_of_a_Divides_Factorial_of_b(a,b)%10\n\ndef compute_Factorial_of_a_Divides_Factorial_of_b(a,b):\n    \"\"\"\n    Compute the last digit when the factorial of a divides the factorial of b.\n    \"\"\"\n    if a<b:\n        return 0\n    if a==b:\n        return 1\n    else:\n        return (compute_Factorial_of_a_Divides_Factorial_of_b(a,b-1)*a)%10\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a, b):\n    if a == 0:\n        return 0\n    return compute_Last_Digit(a-1,b)*compute_Last_Digit(a,b-1)%1000000007\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\n# my solution\ndef compute_Last_Digit(a,b):\n    \"\"\"\n    a,b are integers\n    return the last digit when factorial of a divides factorial of b\n    \"\"\"\n    x = a\n    for i in range(1,b+1):\n        x *= i\n    return x%10\n\n# my solution 2\ndef compute_Last_Digit(a,b):\n    \"\"\"\n    a,b are integers\n    return the last digit when factorial of a divides factorial of b\n    \"\"\"\n    return str(factorial(a)//factorial(b))[::-1][0]\n\n# # other solution\n# def compute_Last_Digit(a,b):\n#     \"\"\"\n#     a,b are integers\n#     return the last digit when factorial of a divides factorial of b\n#     \"\"\"\n#     return factorial(b)%factorial(a)\n#\n#\n# def factorial(num):\n#     \"\"\"\n#     compute the factorial of a positive integer\n#     \"\"\"\n#     fact = 1\n#     for i in range(1,num+1):\n#         fact *= i\n#     return fact\n\n# other solution 2\ndef compute_Last_Digit(a,b):\n    \"\"\"\n    a,b are integers\n    return the last digit when factorial of a divides factorial of b\n    \"\"\"\n    return int(str(factorial(a)//factorial(b))[-1])\n\ndef factorial(num):\n    \"\"\"\n    compute the factorial of a positive integer\n    \"\"\"\n    fact = 1\n    for i in range(1,num+1):\n        fact *= i\n    return fact\n\n# print(compute_Last_Digit(2,4))\n# print(compute_Last_Digit(2,5))\n# print(compute_Last_Digit(5,10))"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    return number | number + 1\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    if n % 2 == 0:\n        return n+1\n    else:\n        return n-1\n\ndef test():\n    assert odd_bit_set_number(10) == 15, \"10 should be 15\"\n    assert odd_bit_set_number(11) == 15, \"11 should be 15\"\n    assert odd_bit_set_number(12) == 11, \"12 should be 11\"\n\ntest()", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    \"\"\"\n    set all odd bits of a given number\n    \"\"\"\n    num = num | (num + 1)\n    num = num & num + 1\n    num = num - 1\n    return num\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    pass\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# Write your code here\ndef odd_bit_set_number(n):\n    temp = n & 1\n    result = 0\n    while temp != 0:\n        result += temp\n        temp >>= 1\n    return result | n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    return number | number + 1\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n#SOLUTION:\ndef odd_bit_set_number(number):\n    return number|1\n\n#TEST CASES:", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    return n | (n >> 1) | (n >> 2) | (n >> 3) | (n >> 4) | (n >> 5) | (n >> 6) | (n >> 7) | (n >> 8) | (n >> 9) | (n >> 10)\n\ndef test_odd_bit_set_number():\n    assert odd_bit_set_number(10) == 15\n\ndef test_odd_bit_set_number_case2():\n    assert odd_bit_set_number(24) == 45\n\ndef test_odd_bit_set_number_case3():\n    assert odd_bit_set_number(40) == 63", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n  return num | (num - 1)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    result = 0\n    for i in range(1,num):\n        if i & 1:\n            result |= i\n    return result\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l,k):\n    if(k<0):\n        raise Exception(\"The specified index is incorrect\")\n    else:\n        k=int(k)\n        if(k%2==0):\n            return [l[i][k//2] for i in range(len(l))]\n        else:\n            return [l[i][k//2+1] for i in range(len(l))]\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(matrix, element_num):\n    return [row[element_num] for row in matrix]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list_of_list, index):\n    if index == 0:\n        return [item[0] for item in list_of_list]\n    else:\n        return [item[index] for item in list_of_list]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nfrom typing import List\n\ndef specified_element(arr: List[List[int]], element: int) -> List[int]:\n    return [[arr[i][element] for i in range(len(arr))] for element in range(len(arr[0]))]\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(a, i):\n    \"\"\"\n    a = list of lists\n    i = 0 or 1 or 2 or 3\n    \"\"\"\n    if i == 0:\n        return [a[j][0] for j in range(len(a))]\n    elif i == 1:\n        return [a[j][1] for j in range(len(a))]\n    elif i == 2:\n        return [a[j][2] for j in range(len(a))]\n    elif i == 3:\n        return [a[j][3] for j in range(len(a))]\n    else:\n        raise ValueError(f'i must be in {range(4)}')\n\n\na = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nimport unittest\nfrom typing import List\n\n\ndef specified_element(my_list: List[List[int]], position: int = 0) -> List[int]:\n    return [element[position] for element in my_list]\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(L,i):\n    ret = []\n    for j in range(len(L)):\n        ret.append(L[j][i])\n    return ret\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(my_list,element_index=0):\n    new_list=[]\n    for i in my_list:\n        new_list.append(i[element_index])\n    return new_list\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(data,n):\n    \"\"\"\n    :type data: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not data or not n:\n        return []\n    if len(data) == 1:\n        return data[0]\n    return [data[i][n] for i in range(len(data))]\n\n\ndef test_specified_element():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2, 5, 1]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_2d, specified_index):\n    specified_element_list = []\n    for element in list_2d:\n        specified_element_list.append(element[specified_index])\n    return specified_element_list"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\nfrom typing import List\n\n\ndef min_length_list(lst: List[List[int]]) -> (int, List[int]):\n    \"\"\"Finds the list with min length from the list of lists and returns that list\"\"\"\n\n    return min(lst, key=lambda lst: len(lst))\n\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(list):\n    min_length = 2147483647\n    min_list = []\n    for i in list:\n        if len(i) <= min_length:\n            if len(i) == min_length:\n                min_list = []\n            min_length = len(i)\n            min_list = [i]\n        elif len(i) == min_length:\n            min_list.append(i)\n    return min_length, min_list", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(ls):\n    min_ls = list(map(lambda x: len(x), ls))\n    min_ind = min_ls.index(min(min_ls))\n    return min_ind, ls[min_ind]\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(nums):\n    min_length = len(nums[0])\n    min_list = [nums[0]]\n    for num in nums:\n        if len(num) < min_length:\n            min_length = len(num)\n            min_list = [num]\n        elif len(num) == min_length:\n            min_list.append(num)\n    return (min_length, min_list)\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(list):\n    return(len(min(list, key=lambda l: len(l))), min(list, key=lambda l: len(l)))\n\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(list1):\n    list1 = sorted(list1, key = lambda x:len(x))\n    return list1[0], list1\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\nimport pytest\n\n\n@pytest.mark.parametrize('arr', [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\ndef test_min_length_list(arr):\n    from src.searching.min_length_list import min_length_list\n    assert min_length_list(arr) == (1, [0])\n\n\ndef test_min_length_list_corner_cases():\n    from src.searching.min_length_list import min_length_list\n    assert min_length_list([]) == (0, [])\n    assert min_length_list([[]]) == (1, [[]])\n    assert min_length_list([[], [0]]) == (2, [0, []])\n\n\ndef test_min_length_list_not_list():\n    from src.searching.min_length_list import min_length_list\n    with pytest.raises(TypeError):\n        min_length_list('not list')", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(list_of_list):\n    return min(list_of_list, key=lambda lst: len(lst))\n\n# assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lst):\n    min_len = min(map(len, lst))\n    return min(filter(lambda x: len(x)==min_len, lst), key=lambda x: x[0])\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lists):\n    min_length = len(lists[0])\n    min_list = lists[0]\n\n    for list_i in lists:\n        if len(list_i) < min_length:\n            min_length = len(list_i)\n            min_list = list_i\n\n    return min_length, min_list\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(x,y,z):\n    return x == y and y == z and z == x\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(x,y,z):\n    if ((x**2)+(y**2)+(z**2))==(x+y+z)**2:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    return (a == b == c)", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\nimport math\n\ndef check_equilateral(a,b,c):\n\tside=list(map(lambda x:x**2,(a,b,c)))\n\tif math.sqrt(sum(side))==sum(side).pop():\n\t\treturn True\n\treturn False\n\t", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a == b == c:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(side1,side2,side3):\n    if (side1 == side2) and (side1 == side3) and (side2 == side3):\n        return True\n    else:\n        return False\n\n# Driver Code", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    return a==b==c\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    \"\"\"\n    check_equilateral takes three sides of the triangle and return True or False if the triangle is equilateral or not.\n    >>> check_equilateral(6,8,12)==False \n    \"\"\"\n    if ((a**2)+ (b**2)+(c**2))==((a+b+c)**2):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a, b, c):\n\tif a==b==c:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\n# Write your function here\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n    \n# Write your test case here\ndef test_function(test_case):\n    a = test_case[0]\n    b = test_case[1]\n    c = test_case[2]\n    solution = test_case[3]\n    output = check_equilateral(a,b,c)\n    if solution == output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case = [6, 8, 12, False]\ntest_function(test_case)\n\ntest_case = [6, 8, 12, True]\ntest_function(test_case)"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(width,height):\n    return height*width\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(width,height):\n    \"\"\"\n    width: int, the width of a parallelogram\n    height: int, the height of a parallelogram\n    return: int, the area of a parallelogram\n    \"\"\"\n    area = width*height\n    return area\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(length,width):\n\treturn length*width\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a,b):\n    assert type(a)==int and type(b)==int, \"Value must be int\"\n    assert a>0 and b>0, \"Value must be positive\"\n    return a*b\n\nparallelogram_area(10,20)\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base1,base2):\n    assert base1>0 and base2>0,\"base1 and base2 cannot be zero\"\n    area=base1*base2\n    return area\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(length1,length2):\n    return length1*length2\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(height, width):\n    return height * width\n\n# Test 1", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(length, breadth):\n    area = length * breadth\n    return area\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    # your code goes here\n    if len(s) < 2:\n        return \"Invalid string\"\n    else:\n        return \"Equal\" if s[0] == s[-1] else \"Not Equal\"\n\n\n# + [markdown] id=\"lqT8p8bIM-U3\"\n# **Problem Statement 3**\n# Write a function which takes a positive integer n and returns the sum of all the positive integers smaller than or equal to n.\n#\n# **Example**:\n# sum_all_pos(10) \u279e 25\n#\n# sum_all_pos(12) \u279e 36\n#\n# sum_all_pos(15) \u279e 55\n\n# + id=\"BE_Ps1cIM-U4\" outputId=\"b26a357a-890c-46e1-c5f1-17355f4d3084\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 51}", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n#print(check_Equality('hello'))\n#print(check_Equality('mumbai'))\n#print(check_Equality('delhi'))\n#print(check_Equality('abba'))\n#print(check_Equality('abaa'))\n#print(check_Equality('abbc'))", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str1):\n    if str1[0] == str1[len(str1)-1]:\n        return \"Equal\"\n    else:\n        return \"not equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n# Here we use string slicing to compare the first and last characters of a string.\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n    ", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(s):\n    # Don't modify this code\n    return \"Equal\" if s[0] == s[-1] else \"NotEqual\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(input_string):\n    if input_string[0] == input_string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(s):\n    if s[0]==s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str1):\n    if str1[0] == str1[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(nums):\n    n = len(nums)\n    max_num = max(nums)\n    min_num = min(nums)\n    # step = max_num - min_num + 1\n    step = 256\n    arr = [0] * step\n    for num in nums:\n        arr[num-min_num] += 1\n    for i in range(len(arr)):\n        arr[i] += arr[i-1]\n    result = [0] * n\n    for i in range(len(nums)-1,-1,-1):\n        result[arr[nums[i]-min_num] - 1] = nums[i]\n        arr[nums[i]-min_num] -= 1\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(unsorted_list):\n    num_items = len(unsorted_list)\n    min_value = min(unsorted_list)\n    max_value = max(unsorted_list)\n    bucket_list = [0] * (max_value - min_value + 1)\n    # Fill in the bucket list with the number of occurrences of each value\n    for value in unsorted_list:\n        bucket_list[value - min_value] += 1\n\n    # Iterate through the bucket list, and store the count of values in the bucket\n    count = 0\n    for i in range(len(bucket_list)):\n        while bucket_list[i] > 0:\n            unsorted_list[count] = i + min_value\n            count += 1\n            bucket_list[i] -= 1\n\n    return unsorted_list\n\n\ndef main():\n    unsorted_list = [1, 23, 4, 5, 6, 7, 8]\n    result = counting_sort(unsorted_list)\n    print(result)\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(array):\n    smallest = array[0]\n    largest = array[0]\n    for num in array:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    size = largest - smallest + 1\n    count = [0] * size\n    for num in array:\n        count[num - smallest] += 1\n    result = [0] * len(array)\n    index = 0\n    for i in range(size):\n        count[i] += count[i - 1]\n    for num in array:\n        result[count[num - smallest] - 1] = num\n        count[num - smallest] -= 1\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    count = [0] * (max(arr) + 1)\n\n    for i in arr:\n        count[i] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n\n    sorted_arr = [0] * len(arr)\n\n    for i in arr[::-1]:\n        sorted_arr[count[i]-1] = i\n        count[i] -= 1\n\n    return sorted_arr\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(A):\n    max_element = max(A)\n    count_arr = [0] * (max_element + 1)\n    for i in A:\n        count_arr[i] += 1\n    i = 0\n    for j in range(max_element + 1):\n        while count_arr[j] > 0:\n            A[i] = j\n            i += 1\n            count_arr[j] -= 1\n    return A\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    min_ = min(arr)\n    max_ = max(arr)\n    bucket_count = [0]*(max_ - min_ + 1)\n    result = [0]*len(arr)\n    for i in arr:\n        bucket_count[i-min_] += 1\n\n    for i in range(1, len(bucket_count)):\n        bucket_count[i] += bucket_count[i-1]\n\n    for i in range(len(arr)-1, -1, -1):\n        result[bucket_count[arr[i]-min_]-1] = arr[i]\n        bucket_count[arr[i]-min_] -= 1\n\n    return result\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(array):\n    array = list(array)\n    max_num = max(array)\n    counter = [0]*(max_num+1)\n\n    for i in array:\n        counter[i] += 1\n\n    for i in range(1, len(counter)):\n        counter[i] += counter[i-1]\n\n    new_array = [None]*len(array)\n    for i in range(len(array)-1, -1, -1):\n        new_array[counter[array[i]] - 1] = array[i]\n        counter[array[i]] -= 1\n\n    return new_array", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    max_num = max(arr)\n    count = [0] * (max_num + 1)\n    for num in arr:\n        count[num] += 1\n    for i in range(1, max_num + 1):\n        count[i] += count[i - 1]\n    sorted_arr = []\n    for num in arr:\n        sorted_arr.append(num)\n        count[num] -= 1\n        for i in range(count[num], max_num - num):\n            sorted_arr.append(num)\n    return sorted_arr\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n  max_num = max(arr)\n  count = [0] * (max_num+1)\n  output = [None] * len(arr)\n  for num in arr:\n    count[num] += 1\n  for i in range(1,len(count)):\n    count[i] += count[i-1]\n  for i in range(len(arr)-1,-1,-1):\n    count[arr[i]] -= 1\n    output[count[arr[i]]] = arr[i]\n  return output\n\n# assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n# assert counting_sort([5,1,2,3,4,3,4,3,4,3,4,3,4,3,4]) == [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5]\n# assert counting_sort([3,2,1]) == [1, 2, 3]\n# assert counting_sort([2,1,0,-1,-2,-3,-4]) == [-4, -3, -2, -1, 0, 1, 2]\n# assert counting_sort([-1,-2,-3,-4,-5,-6]) == [-6, -5, -4, -3, -2, -1]\n# assert counting_sort([]) == []\n\n# def counting_sort(arr):\n#   min_num = min(arr)\n#   max_num = max(arr)\n#   bucket = [None] * (max_num-min_num+1)\n#   for num in arr:\n#     bucket[num-min_num] = num\n#   output = [None] * len(arr)\n#   for i in range(len(bucket", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    m = max(arr)\n    count = [0] * (m+1)\n    for i in arr:\n        count[i] += 1\n    for i in range(1,m+1):\n        count[i] += count[i-1]\n    output = [0] * len(arr)\n    for i in range(len(arr)-1,-1,-1):\n        output[count[arr[i]]-1] = arr[i]\n        count[arr[i]] -= 1\n    return output\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(start,factor,n):\n    t=start\n    for i in range(n-1):\n        t=t*factor\n    return t\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,b,t):\n    #your code goes here\n    return a*(b**(t-1))\n# Write a function to calculate sum of N terms of the GP\ndef gp_sum(a,b,n):\n    # your code goes here\n    return a*(b**n-1)/(b-1)\n# Write a function to calculate ratio of consecutive terms in GP\ndef gp_ratio(a,b,m,n):\n    #your code goes here\n    return ((a*b**(n-1))/(a*b**(m-1)))\n# Write a function to calculate sum of GP with n terms where ratio is between 0 and 1\ndef gp_sum_ratio(a,b,ratio,n):\n    #your code goes here\n    result=a\n    for i in range(n):\n        result=result+(b**(i+1))*((ratio**(i+1)))\n    return result", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a,n,t):\n\tif t==0:\n\t\treturn 0\n\telif t==1:\n\t\treturn a\n\telif t==n:\n\t\treturn (a**n)\n\telse:\n\t\treturn (a*(tn_gp(a,n,t-1)))\n\t", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n,r,p):\n    if n==0:\n        return 0\n    elif n==1:\n        return r\n    elif n==2:\n        return r*r\n    else:\n        return r*p**(n-1)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a, n, t):\n    if t < 0:\n        raise ValueError(\"Incorrect input for t\")\n    elif t == 0:\n        return 0\n    elif t == 1:\n        return a\n    else:\n        result = tn_gp(a, n, t - 1) * a\n        return result % 1000000007\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\n# +\ndef tn_gp(x,n,t):\n    result = 0\n    for i in range(n):\n        result += x * pow(x,i)\n    return pow(result,t)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a,n,t):\n    s=0\n    for i in range(n):\n        s+=a*a**(n-i-1)\n    return (a*(1+t)**n-s)/(1-a*t)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a,r,n):\n    assert n>=1 and n<=5\n    if n==1:\n        return a\n    if n==2:\n        return a*a\n    if n==3:\n        return a*a*a\n    if n==4:\n        return a*a*a*a\n    if n==5:\n        return a*a*a*a*a\n    elif n==6:\n        return a*a*a*a*a*a\n    else:\n        return a*(r**n)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(r, n, t):\n    return r*(r**t-1)/(r**t-r**n)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\nimport math\n\ndef geometric_series(n, a):\n    return a*(1/math.factorial(n-1))\n\ndef tn_gp(n, t, a):\n    \"\"\"\n    :param n: no of terms\n    :param t: nth term\n    :param a: first term\n    :return:\n    \"\"\"\n    return a*(t/math.factorial(n-1))\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    str_n = str(n)\n    reverse = str_n[::-1]\n    return int(reverse) == (int(str_n) - 2)\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num / 10\n    return num == rev + 1\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    return num == int(str(num)[::-1]) + 1\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(number):\n    reverse = number\n    while reverse != 0:\n        number = number % 10\n        reverse = (reverse // 10) * 10 + number\n    if number == (2 * reverse - 1):\n        return True\n    return False\n\n# assert check(70) == False", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    # Write your logic here\n    return False\n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    return (num-int(str(num)[::-1])) == 1\n\n# print(check(70))\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    return num == (int(str(num)[::-1])+1)\n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(number):\n    return number == int(str(number)[::-1]) - 1\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(x):\n    return x - int(str(x)[::-1]) == 1\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n#use the modulo operator to test whether it is a valid number\ndef check(number):\n    return number % 10 == 0 and number % (number ** 2) == 10\n\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, length):\n\t\"\"\"\n\tfind the largest number that can be formed with the given digits\n\t\"\"\"\n\t# initialize the result\n\tresult = 0\n\t# sort the digits\n\tsorted_digits = sorted(digits, reverse=True)\n\t# loop over the digits\n\tfor i in range(len(digits)):\n\t\t# update the result\n\t\tresult = result * 10 + sorted_digits[i]\n\t\t# check the length\n\t\tif result > pow(10, length):\n\t\t\tbreak\n\treturn result\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, k):\n    res = \"\"\n    for i in range(len(digits)):\n        res = res + str(digits[i])\n    return res[::-1][0:k]\n\n\ndef find_Max_Num(digits, k):\n    if k == len(digits):\n        return int(\"\".join(digits))\n    digits_list = []\n    for i in range(len(digits)):\n        digits_list.append(int(digits[i]))\n    digits_list.sort(reverse=True)\n    return int(\"\".join(str(dig) for dig in digits_list[0:k]))\n\ndef find_Max_Num(digits, k):\n    a = 10 ** k\n    num = 0\n    for i in digits:\n        num += a * i\n        a = a // 10\n    return num\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,n):\n\tmax=0\n\tfor i in range(len(digits)):\n\t\tfor j in range(i,len(digits)):\n\t\t\tcurr = str(digits[i]) + str(digits[j])\n\t\t\tif len(curr) == n and int(curr) > max :\n\t\t\t\tmax = int(curr)\n\treturn max\n\n# Sample test case", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(input_list,digit_count):\n    input_list.sort()\n    input_list.reverse()\n    number_list = []\n    for i in range(digit_count):\n        number_list.append(input_list[i])\n    num = reduce(lambda x,y:x*10+y,number_list)\n    return num\n\ndef test_function(test_case):\n    output = find_Max_Num(test_case[0],test_case[1])\n    solution = test_case[2]\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,N):\n\tres = 0\n\tfor i in range(N):\n\t\tres += pow(digits[i],N-i-1)\n\treturn res\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,length):\n    num = 0\n    digits.sort(reverse=True)\n    for i in range(length):\n        num += digits[i]*(10**i)\n    return num\n    ", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(arr, n):\n    arr.sort()\n    res = \"\"\n    for num in arr:\n        res += str(num)\n    return int(res)\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,k):\n    if k == 0:\n        return 0\n    ans = find_Max_Num(digits,k-1)\n    num = ans*10 + digits[-1]\n    if num > int(\"\".join(map(str,digits))):\n        return ans\n    else:\n        return num\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\nfrom collections import defaultdict\n\ndef find_Max_Num(digits,K):\n    a = defaultdict(int)\n    for i in digits:\n        a[i] += 1\n    max_num = 0\n    for key in range(10):\n        if a[key] > 0:\n            max_num = max_num * 10 + key\n            a[key] -= 1\n            while a[key] < K and key < 9:\n                key += 1\n                if key in a:\n                    a[key] += 1\n    return max_num\n\ndef find_Max_Num2(digits,K):\n    max_num = 0\n    for i in range(10):\n        n = 1\n        for j in range(10):\n            n *= j\n            if n > K:\n                break\n        for j in range(10):\n            if j in digits and n+j > K:\n                break\n            n += j\n        max_num = max(max_num,n)\n    return max_num\n\ndef main():\n    assert find_Max_Num([1,2,3],3) == 321\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits, length):\n    \"\"\"\n    :type digits: List[int]\n    :type length: int\n    :rtype: int\n    \"\"\"\n    max_num = 0\n    for i in range(length):\n        for j in range(length):\n            for k in range(length):\n                temp = 10**i + 10**j + 10**k\n                if temp > max_num and temp > digits[0] and temp > digits[1] and temp > digits[2]:\n                    max_num = temp\n    return max_num\n\n\ndef test_find_Max_Num():\n    assert find_Max_Num([1,2,3],3) == 321\n    assert find_Max_Num([9,1,3,8,7,5],6) == 15879\n    assert find_Max_Num([5,5,5,5,5,5],6) == 5**6 - 5\n    assert find_Max_Num([9,1,3,8,7,5],4) == 9138\n    assert find_Max_Num([5,5,5,5,5,5],4) == 5**4 - 5\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_signs(x, y):\n    \"\"\"\n    returns boolean value based on whether the given two integers have opposite sign or not\n    \"\"\"\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    return  (a < 0 and b > 0) or (a > 0 and b < 0)\n\ndef check_opposite_signs():\n    assert opposite_Signs(1,-2) == True\n    assert opposite_Signs(2,-1) == True\n    assert opposite_Signs(1,1) == False\n    assert opposite_Signs(-1,-1) == False\n    print(\"Pass\")\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_signs(a,b):\n    if (a>0 and b>0) or (a<0 and b<0) or (a==0 and b==0):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1, num2):\n    return abs(num1) < abs(num2) or abs(num1) == abs(num2) and num1 * num2 < 0\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1,num2):\n    if num1>0 and num2<0:\n        return True\n    elif num1<0 and num2>0:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(x, y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n#solution\n\ndef opposite_signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)\n\n\n#test\n\n#assert opposite_Signs(1,-2) == True", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(x,y):\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    elif x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a,b):\n    if a > 0 and b < 0 or a < 0 and b > 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n#my solution\ndef opposite_Signs(num1, num2):\n    return num1 > 0 and num2 < 0 or num1 < 0 and num2 > 0\n\n#my solution 2\ndef opposite_Signs(num1, num2):\n    return (num1 > 0 and num2 < 0) or (num1 < 0 and num2 > 0)\n\n\n#Test Cases"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return (n * (3 * n - 1)) / 2\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return 1 / 4 * ((n ** 2) * (3 ** 2)) + (n - 1)\n\n\ndef test_function():\n    test = [1, 2, 3, 4, 5, 6, 7, 8]\n    result = []\n    for i in test:\n        result.append(is_octagonal(i))\n    assert result == [1, 3, 5, 7, 9, 11, 13, 15]\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Input: The number n which is an integer.\n    Output: Returns the nth octagonal number.\n    \"\"\"\n    if n == 1:\n        return 8\n    total = 0\n    num = 8\n    while True:\n        # print(total)\n        total += num\n        num += 4\n        if total == n:\n            return num", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    n = n-1\n    return int(round(n * (n+1) * (2 * n + 1) / 6))\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\nfrom math import sqrt\n\ndef is_octagonal(n):\n    \"\"\"\n    This function takes a number n as input and returns an\n    octagonal number that is greater than or equal to n.\n\n    :param n: An integer.\n    :return: An integer.\n    \"\"\"\n    sqrt_n = int(sqrt(n)) + 1\n    return 8 * (sqrt_n * (sqrt_n + 1) // 2) + n\n\n\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65\n    assert is_octagonal(15) == 193\n    assert is_octagonal(20) == 240\n    assert is_octagonal(25) == 285\n    assert is_octagonal(30) == 324\n    assert is_octagonal(35) == 363\n    assert is_octagonal(40) == 400\n    assert is_octagonal(45) == 437\n    assert is_octagonal(50) == 472\n    assert is_octagonal(100) == 969\n    assert is_octagonal(200) == 1928\n    assert is_octagonal(300) == 2887\n    assert is_octagonal(400) == 3844\n    assert is_octagonal(500) == 4799\n    assert is_octagonal(600) == 5752\n    assert is_octagonal(700) == 6703\n    assert is_octagonal(800) == 7652\n    assert is_octagonal(900) == 8599\n    assert is_octagonal(1000) == 9544\n    assert is_octagonal(1100) == 10487\n    assert is_octagonal(1200) == 11428\n    assert is_octagonal(1", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(number):\n    return 1/2*number*(3*number-1)\n\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef nth_octagonal(n):\n    return ((n * (n - 1)) * (2 * n - 1)) // 3\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Args:\n        n: int\n\n    Returns:\n        int: nth octagonal number\n    \"\"\"\n    return (n * (3 * n - 1)) / 2\n\ndef nth_octagonal(n):\n    \"\"\"\n    Args:\n        n: int\n\n    Returns:\n        int: nth octagonal number\n    \"\"\"\n    return sum(is_octagonal(i) for i in range(1, n+1))\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    if n < 1:\n        return False\n    a = n * (3 * n - 1) / 2\n    return a == int(a)\n\ndef is_octagonal2(n):\n    if n < 1:\n        return False\n    a = n * (3 * n - 1) / 2\n    return a % 8 == 0\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nfrom math import sqrt\nfrom typing import Union\n\n\ndef is_octagonal(n: Union[int, float]) -> bool:\n    \"\"\"\n    Test whether n is the square of a number.\n\n    >>> is_octagonal(5)\n    True\n\n    >>> is_octagonal(4)\n    False\n    \"\"\"\n    return int(round(sqrt(8 * n + 1))) == int(round(sqrt(8 * n + 1)))\n\n\ndef nth_octagonal(n: Union[int, float]) -> int:\n    \"\"\"\n    Find the nth octagonal number.\n\n    >>> nth_octagonal(5)\n    65\n    \"\"\"\n    i = 1\n    while True:\n        if is_octagonal(i):\n            if i == n:\n                return i\n        i += 1\n\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, n):\n    if n <= 1:\n        return n\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_len += 1\n        else:\n            curr_len = 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\ndef max_len_sub2(arr, n):\n    if n <= 1:\n        return n\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_len += 1\n        else:\n            curr_len = 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\ndef max_len_sub3(arr, n):\n    if n <= 1:\n        return n\n    max_len = 1\n    curr_len = 1\n    max_sub = 1\n    max_sub_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_len += 1\n        else:\n            curr_len = 1\n        if curr_len > max_len:\n            max_len = curr_len\n            max_sub = max_sub + 1\n            max_sub_index = i\n        elif curr_len < max_len:\n            max_sub = max_sub + 1\n    return max_sub", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, max_diff):\n    max_len = 1\n    start = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] <= max_diff:\n            max_len = max(max_len, i - start + 1)\n        else:\n            start = i\n    return max_len\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n    # Write your code here\n    if n <= 1:\n        return n\n    max_len = 1\n    length = len(arr)\n    for i in range(1, length):\n        if arr[i] - arr[i-1] <= 2 and max_len < length - i:\n            max_len = length - i\n    return max_len\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(array, k):\n    # Your code here\n    if len(array) == 1:\n        return 1\n    else:\n        if array[0] - array[1] == k:\n            return max(max_len_sub(array[1:], k), max_len_sub(array[1:], k + array[0] - array[1])) + 1\n        elif array[0] - array[1] != k:\n            return max(max_len_sub(array[1:], k), max_len_sub(array[1:], k + array[0] - array[1]))\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, diff):\n    n = len(arr)\n    if n < 2:\n        return 0\n    p = [-1] * n\n    count = 1\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] == diff:\n            count += 1\n            p[i] = p[i - 1]\n        else:\n            count = 1\n            p[i] = i\n    return max(count, n - p[-1])\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n    adj_diff = [0] * n\n    max_len = 0\n    l = 0\n    for r in range(n):\n        if adj_diff[r] == 0:\n            l = r\n            while r < n and adj_diff[r] == 0:\n                adj_diff[r] = arr[l] - arr[r]\n                r += 1\n            max_len = max(max_len, r - l + 1)\n        elif adj_diff[r] < 0:\n            l = r\n            while r < n and adj_diff[r] < 0:\n                adj_diff[r] = arr[l] - arr[r]\n                r += 1\n            max_len = max(max_len, r - l + 1)\n    return max_len\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, s):\n    prev_num = -1\n    curr_max_len = 0\n    for num in arr:\n        if abs(prev_num - num) <= s:\n            curr_max_len += 1\n        else:\n            curr_max_len = 1\n        prev_num = num\n\n    return curr_max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, difference):\n    if len(arr) == 0:\n        return 0\n    res = 0\n    start = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] <= difference:\n            start = i\n        else:\n            res = max(res, i - start)\n            start = i\n    res = max(res, len(arr) - start)\n    return res\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, k):\n    pass\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, threshold):\n    arr.sort()\n    ans = 0\n    left = 0\n    right = 0\n    while left < len(arr):\n        while right < len(arr) and arr[left] + threshold <= arr[right]:\n            right += 1\n        ans = max(ans, right - left)\n        left = right\n    return ans\n\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,n):\n    \"\"\"\n    :param s: str\n    :param n: int\n    :return: int\n    \"\"\"\n    count=0\n    for i in range(len(s)-n+1):\n        sum=0\n        for j in range(i,i+n):\n            sum+=int(s[j])\n        if sum==n:\n            count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(string,sum_of_digits):\n    #Your Code Here\n    l=len(string)\n    if l<sum_of_digits:\n        return 0\n    \n    counter=0\n    for i in range(l-sum_of_digits+1):\n        number=0\n        for j in range(i,i+sum_of_digits):\n            number+=int(string[j])\n        if number==sum_of_digits:\n            counter+=1\n    return counter\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(S, N):\n    count = 0\n    for i in range(len(S)):\n        if (len(str(int(S[i:i+N])))==N):\n            count+=1\n    return count\n    \nS = \"112112\"\nN = 6", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n#this code is not tested yet\ndef count_Substrings(str,n):\n    sum = 0\n    for i in range(len(str)-n+1):\n        temp = 0\n        for j in range(n):\n            temp += int(str[i+j])\n        if temp == n:\n            sum += 1\n    return sum", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str, n):\n    str_len = len(str)\n    substrings = []\n\n    for i in range(str_len):\n        for j in range(i, str_len):\n            substrings.append(str[i:j+1])\n\n    total_sum = sum(map(int, substrings))\n    return total_sum", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\nfrom collections import defaultdict\n\ndef count_Substrings(S,n):\n    \"\"\"\n    @param S: input string\n    @param n: count of digits\n    @return: count of substrings with sum of digits equal to their length\n    \"\"\"\n    sub_count=0\n    dig_count = defaultdict(int)\n    for i in range(len(S)):\n        dig_count[int(S[i])] += 1\n\n    dig_count[int(S[0])] -= 1\n    for key, value in dig_count.items():\n        if value == 0 and key != 0:\n            sub_count += n - 1\n        elif value == n - 1 and key != 0:\n            sub_count += 1\n        else:\n            sub_count += value\n    return sub_count\n\ndef main():\n    S = input().strip()\n    n = int(input().strip())\n    print(count_Substrings(S,n))\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string,length):\n    sub_count = 0\n    for i in range(len(string)):\n        j = 0\n        while j < length:\n            sub_count += 1\n            j += int(string[i+j])\n    return sub_count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(str,size):\n    count = 0\n    for i in range(len(str)):\n        sum = 0\n        for j in range(i,len(str)):\n            sum += int(str[j])\n        if sum == size:\n            count += 1\n    return count\n\ndef count_Substrings(str,size):\n    count = 0\n    for i in range(len(str)):\n        sum = 0\n        for j in range(i,len(str)):\n            sum += int(str[j])\n        if sum == size and len(str) == sum:\n            count += 1\n    return count\n\ndef count_Substrings(str,size):\n    count = 0\n    for i in range(len(str)):\n        if len(str)-i == size and int(str[i:len(str)-i+1]) == sum(map(int,str[i:len(str)-i+1])):\n            count += 1\n    return count\n\ndef count_Substrings(str,size):\n    count = 0\n    for i in range(len(str)):\n        if len(str)-i == size and int(str[i:len(str)-i+1]) == sum(map(int,str[i:len(str)-i+1])):\n            count += 1\n    return count\n\ndef count_Substrings(str,size):\n    count = 0\n    for i in range(len(str)):\n        if len(str)-i == size and sum(map(int,str[i:len(str)-i+1])) == len(str)-i+1:\n            count += 1\n    return count\n\ndef count_Substrings(str,size):\n    count = 0\n    for i in range(len(str)):\n        if len(str)-i == size and sum(map(int,str[i:len(str)-i+1])) == len(str)-i+1:\n            count += 1\n    return count\n\ndef count_Substrings(str,size):\n    count = 0\n    for i in range(len(str", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str,length):\n    count = 0\n    for i in range(len(str)):\n        if len(str[i:i+length]) == length and sum(int(i) for i in str[i:i+length]) == length:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string, length):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum(map(int, string[i:j+1])) == length:\n                count += 1\n    return count\n\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    return min(lst)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    return min(nums)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(numbers):\n    return min(numbers)\n\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    return min(nums)", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(num_list):\n    if len(num_list) == 1:\n        return num_list[0]\n    else:\n        num_list.sort()\n        return num_list[0]\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n# 1. We know that we can use list.sort() function to sort a list.\n# 2. But we can also use lambda functions to sort list with 1 line of code.\n# 3. return the smallest number in the list.\n# 4. We can also return a list of elements with the smallest number.\n\ndef smallest_num(lst):\n    lst.sort(key=lambda num: num, reverse=True)\n    return lst[0]\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(num_list):\n    smallest = num_list[0]\n    for num in num_list:\n        if num < smallest:\n            smallest = num\n    return smallest\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(numbers):\n    return min(numbers)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n# array = [10, 20, 1, 45, 99]\n\ndef smallest_num(array):\n    min_number = array[0]\n    for i in array:\n        if i < min_number:\n            min_number = i\n    return min_number", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(numbers):\n    \"\"\"\n    Takes a list of integers and returns the smallest number.\n    \"\"\"\n    smallest_num = numbers[0]\n    for i in numbers:\n        if i < smallest_num:\n            smallest_num = i\n    return smallest_num\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nfrom itertools import combinations\n\n\ndef max_difference(pairs):\n    \"\"\"Returns the maximum difference between available pairs.\"\"\"\n    return max([max(pair) - min(pair) for pair in combinations(pairs, 2)])\n\n\ndef main():\n    \"\"\"Read input from STDIN. Print output to STDOUT.\"\"\"\n    pairs = [(3, 5), (1, 7), (10, 3), (1, 2)]\n    print(max_difference(pairs))\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nfrom typing import Tuple, List\n\n\ndef max_difference(list_of_tuples: List[Tuple]) -> int:\n    \"\"\"\n    This solution is really tricky.\n    If we just sort the given list, the maximum difference would be between two successive tuples.\n    For example, we have a tuple list [ (3, 5), (1, 7), (10, 3), (1, 2) ],\n    if we sort the list, then the tuples would be [ (1, 2), (1, 7), (3, 5), (10, 3) ],\n    and the maximum difference would be 7.\n    But we want to find the maximum difference between any two tuples,\n    not only between two successive tuples.\n    \"\"\"\n\n    max_diff = 0\n\n    for i in range(len(list_of_tuples)):\n        for j in range(i + 1, len(list_of_tuples)):\n            max_diff = max(max_diff, abs(list_of_tuples[i][0] - list_of_tuples[j][0]) + abs(list_of_tuples[i][1] - list_of_tuples[j][1]))\n\n    return max_diff\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuple_list):\n    # If length of list is zero, return 0\n    if len(tuple_list) == 0:\n        return 0\n\n    max_difference = 0\n    # Sort list in ascending order\n    tuple_list.sort()\n\n    # Iterate through the sorted list\n    for i in range(len(tuple_list) - 1):\n        difference = tuple_list[i][1] - tuple_list[i + 1][0]\n        if difference > max_difference:\n            max_difference = difference\n\n    return max_difference\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nimport pytest\n\ndef max_difference(numbers):\n    \"\"\"Returns the maximum difference between available pairs in the given tuple list.\"\"\"\n\n    difference = 0\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            difference = max(difference, numbers[i][0] - numbers[j][1])\n\n    return difference\n\ndef test_max_difference():\n    \"\"\"Test max_difference.\"\"\"\n\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(list):\n    # Write your code here\n    list1=list\n    list1.sort()\n    print(list1)\n    max=0\n    if len(list1)>1:\n        for i in range(0,len(list1)-1):\n            for j in range(i+1,len(list1)):\n                if abs(list1[i][0]-list1[j][0])>max:\n                    max=abs(list1[i][0]-list1[j][0])\n    else:\n        return 0\n    return max\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nimport random\nfrom .utils import run_tests\n\n\ndef max_difference(pairs):\n    pairs.sort(key=lambda x: x[1])\n    max_difference = pairs[0][0] - pairs[-1][0]\n    for i in range(len(pairs)):\n        for j in range(i):\n            if pairs[i][0] - pairs[j][0] > max_difference:\n                max_difference = pairs[i][0] - pairs[j][0]\n    return max_difference\n\n\ndef generate_pairs(size):\n    while True:\n        yield random.randrange(100), random.randrange(100)\n\n\ndef test(n=100):\n    pairs = list(generate_pairs(n))\n    assert max_difference(pairs) == max([pair[0] - pair[1] for pair in pairs])\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(pairs):\n    pairs = sorted(pairs)\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(len(pairs)):\n            if i != j:\n                if pairs[i][1] - pairs[j][1] > max_diff:\n                    max_diff = pairs[i][1] - pairs[j][1]\n    return max_diff\n\ndef test_max_difference():\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert max_difference([(3, 5), (3, 7), (3, 10), (3, 2)]) == 7\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 3)]) == 2\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 5)]) == 5\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 1)]) == 2\n    assert max_difference([(1, 7), (10, 3), (1, 3)]) == 2\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 3)]) == 2", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(list):\n    # sort tuple according to second index and get the length\n    # length is the total number of pairs\n    length = len(list)\n    # sort tuple according to first index\n    list.sort(key = lambda x:x[1])\n    # if there is only one pair, return 0\n    if length == 1:\n        return 0\n    # get the difference between each two tuples\n    difference = []\n    for i in range(length-1):\n        difference.append(list[i+1][0]-list[i][0])\n    # return the maximum difference\n    return max(difference)\n\n\ndef test_function(test_case):\n    solution = max_difference\n    output = solution(test_case)\n    print(\"output: \", output)\n    print(\"expected: \", test_case[-1])\n    assert output == test_case[-1]\n\ntest_case = [([3, 5], 7), ([1, 7], 1), ([10, 3], 7), ([1, 2], 0)]\ntest_function(test_case)\n\n# Test Case 1\n# [3, 5], 7\n#\n# Test Case 2\n# [1, 7], 1\n#\n# Test Case 3\n# [10, 3], 7\n#\n# Test Case 4\n# [1, 2], 0\n#\n# Correct Answer\n# 7", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuple_list):\n    assert type(tuple_list) is list\n    assert len(tuple_list) > 0\n\n    max_diff = 0\n\n    for i in range(len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(pairs):\n    s = set()\n    for x,y in pairs:\n        s.add(y-x)\n    return max(s)\n\n#assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n#assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2), (5, 10)]) == 10\n#assert max_difference([(1, 4), (2, 3), (3, 4)]) == 1\n#assert max_difference([(1, 4), (2, 3)]) == 1"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(sub):\n    sub.sort(key=lambda x: x[1], reverse=True)\n    return sub\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    return sorted(marks,key=lambda x: x[1],reverse=True)\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\nsubject_marks = lambda a : sorted(a, key = lambda x : x[1])", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(student_marks):\n    return sorted(student_marks, key=lambda student: student[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    marks.sort(key = lambda x: x[1])\n    return marks\n\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n\n# +\n# Write a function to find the sum of the numbers from 0 to a given number n.", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    marks.sort(key=lambda subject: subject[1])\n    return marks\n\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks_tuple_list):\n    marks_tuple_list.sort(key=lambda x: x[1])\n    return marks_tuple_list\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    return sorted(marks, key = lambda x: x[1])\n\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n\treturn sorted(marks, key = lambda x:x[1], reverse = True)\n\n#print(subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]))", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subject_marks):\n    subject_marks.sort(key = lambda subject_marks: subject_marks[1])\n    return subject_marks\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(my_list):\n\tif isinstance(my_list, list):\n\t\tif len(my_list)==1:\n\t\t\treturn my_list[0]\n\t\telse:\n\t\t\treturn recursive_list_sum(my_list[1]) + recursive_list_sum(my_list[0])\n\telse:\n\t\treturn my_list\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list):\n    if type(list[0]) == type([]):\n        return recursive_list_sum(list[0]) + recursive_list_sum(list[1])\n    else:\n        return list[0] + recursive_list_sum(list[1:])\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    \"\"\"\n    :param list: A list of numbers\n    :return: Sum of the numbers\n    \"\"\"\n    if type(list) is list:\n        for element in list:\n            if type(element) is list:\n                return recursive_list_sum(element) + recursive_list_sum(element)\n            else:\n                return element + recursive_list_sum(list)\n    else:\n        return list\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list_number):\n    total = 0\n    for item in list_number:\n        if type(item) == int:\n            total += item\n        else:\n            total += recursive_list_sum(item)\n    return total\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n    # your code here\n    return sum(lst)\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    if isinstance(list, int):\n        return list\n    elif isinstance(list, list):\n        s = 0\n        for x in list:\n            s += recursive_list_sum(x)\n        return s\n    else:\n        raise TypeError\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    if type(list) is list:\n        total = 0\n        for value in list:\n            total += recursive_list_sum(value)\n        return total\n    else:\n        return list\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if type(lst[0]) is int:\n        return sum(lst)\n    else:\n        return sum(recursive_list_sum(x) for x in lst)\n\ndef test_recursive_list_sum():\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(L):\n    if isinstance(L,int):\n        return L\n    elif isinstance(L,list):\n        sum = 0\n        for el in L:\n            sum += recursive_list_sum(el)\n        return sum\n    else:\n        return L\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list_of_list):\n    if isinstance(list_of_list[0], list):\n        return sum([recursive_list_sum(x) for x in list_of_list])\n    else:\n        return sum(list_of_list)\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\n# find negative number\ndef find_neg(arr):\n    if arr[0] < 0:\n        return True\n    else:\n        return False\n\n# count positive number in list\ndef pos_count(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    count = 0\n    for i in nums:\n        if i>0:\n            count +=1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(num_list):\n    count = 0\n    for num in num_list:\n        if num > 0:\n            count += 1\n    return count\n\ndef main():\n    print(pos_count([1,-2,3,-4]))\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(L):\n    return len([x for x in L if x > 0])\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(numbers):\n    pos_count = 0\n    for n in numbers:\n        if n > 0:\n            pos_count += 1\n    return pos_count\n\n# test for correctness", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(input_list):\n    count = 0\n    for num in input_list:\n        if num > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n\ndef test_pos_count():\n    assert pos_count([1,-2,3,-4]) == 2\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(input_list):\n    count = 0\n    for item in input_list:\n        if item > 0:\n            count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(numbers):\n    count = 0\n    for number in numbers:\n        if number >= 0:\n            count = count + 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\nfrom collections import defaultdict\n\ndef bell_number(n):\n    cache = defaultdict(int)\n\n    def bell_number_helper(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if cache[n] != 0:\n            return cache[n]\n        cache[n] = bell_number_helper(n - 1) + bell_number_helper(n - 2)\n        return cache[n]\n    return bell_number_helper(n)\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\n# Implement the function\n\ndef bell_number(n):\n    b = 1\n    for i in range(1, n+1):\n        b += i * bell_number(i-1)\n    return b", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    result = 0\n    for i in range(n):\n        result += bell_numbers(i)\n    return result\n\ndef bell_numbers(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sum([binomial(n,k)*bell_numbers(n-k)*bell_numbers(k) for k in range(1,n+1)])\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    count=0\n    for i in range(1,n+1):\n        count+=binomial(i,i-1)*10**i\n    return count\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        if n <= 3:\n            return 1 + bell_number(n - 1)\n        else:\n            return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n\n#assert bell_number(4)==5", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nimport math\nimport sys\n\ndef bell_number(N):\n    assert isinstance(N,int) and N>1, \"N must be an integer larger than 1\"\n    bell = 1\n    for i in range(1,N+1):\n        bell = bell*math.factorial(i)\n    return bell\n\ndef partition_bell(n):\n    if n == 1:\n        return 1\n    part = 0\n    for i in range(1, n+1):\n        part += int(bell_number(i) / math.factorial(i))\n    return part\n\ndef partition_bell_sum(n):\n    if n == 1:\n        return 1\n    part = 0\n    for i in range(1, n+1):\n        part += int(bell_number(i) * i)\n    return part\n\ndef partition_bell_comb(n):\n    if n == 1:\n        return 1\n    part = 0\n    for i in range(1, n+1):\n        part += int(bell_number(i))\n    return part\n\ndef partition_bell_comb_sum(n):\n    if n == 1:\n        return 1\n    part = 0\n    for i in range(1, n+1):\n        part += int(bell_number(i) * i)\n    return part\n\ndef partition_bell_stirling(n):\n    if n == 1:\n        return 1\n    part = 0\n    for i in range(1, n+1):\n        part += int(bell_number(i) * math.factorial(i))\n    return part\n\ndef partition_bell_stirling_sum(n):\n    if n == 1:\n        return 1\n    part = 0\n    for i in range(1, n+1):\n        part += int(bell_number(i) * i * math.factorial(i))\n    return part\n\ndef partition_bell_min(n):\n    if n == 1:\n        return 1\n    part = 0\n    for i in range(1, n+1):\n        part += int(bell_number(", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef partition_bell_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    bell_num = bell_number(n)\n    num_ways = 0\n    for k in range(n):\n        num_ways += partition_bell_number(n-k)*bell_num\n\n    return num_ways\n\ndef bell_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    num = 1\n    for k in range(2,n):\n        num += num//k\n\n    return num", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef partition_bell_number(num):\n    partition_func = [1]\n    for i in range(2,num+1):\n        partition_func.append(partition_func[i-1]+partition_func[i-2])\n    return partition_func[num]\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return sum(bell_number(i) + bell_number(n-i) for i in range(1,n+1))\n\n#test", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 0:\n        return 1\n    return sum(bell_number(x) for x in xrange(n))\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n# Monotonic elements can be one of two types:\n# - Increasing\n# - Decreasing\n#\n# Monotonic elements cannot be neither increasing and decreasing or neither decreasing and increasing\n#\n# Monotonic elements cannot be neither increasing and decreasing or neither decreasing and increasing\n#\n# Hence, the only way to tell if a array is monotonic or not is to check if the elements are in one of the following order:\n#\n# Increasing: 1,2,3,4,5,6,7,8,9,10\n# Decreasing: 10,9,8,7,6,5,4,3,2,1\n\ndef is_Monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] > arr[1]:\n        return False\n    for i in range(len(arr)-2):\n        if arr[i] < arr[i+1] and arr[i+1] > arr[i+2]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(A):\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    l, r = 0, len(arr)-1\n    while l < r:\n        if arr[l] < arr[l+1]:\n            l += 1\n        elif arr[l] > arr[l+1]:\n            r -= 1\n        else:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if(len(arr)==1):\n        return True\n    elif(len(arr)==2):\n        return arr[0]<=arr[1]\n    elif(arr[0]>arr[1]):\n        return False\n    else:\n        return is_Monotonic(arr[1:])\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    return True if all([arr[i] <= arr[i+1] or arr[i] >= arr[i+1] for i in range(len(arr)-1)]) else False\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    prev_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > prev_val:\n            continue\n        elif arr[i] < prev_val:\n            return False\n        prev_val = arr[i]\n\n    return True", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\nfrom __future__ import print_function\nfrom functools import cmp_to_key\n\n# Python3 program to check monotonicity \n# of array of integers \ndef is_Monotonic(arr): \n\n\t# First check if the array is \n\t# empty or has only one element. \n\tif len(arr) <= 1: \n\t\treturn True\n\t# Compare adjacent elements \n\tfor i in range(1, len(arr)): \n\t\tif arr[i - 1] >= arr[i]: \n\t\t\treturn False\n\treturn True\n\ndef is_Monotonic2(arr): \n\n\t# Sort the array in ascending \n\t# order. \n\tarr = sorted(arr) \n\n\t# Compare adjacent elements \n\tfor i in range(1, len(arr)): \n\t\tif arr[i - 1] >= arr[i]: \n\t\t\treturn False\n\treturn True\n\n# Driver program to test above function \narr = [6, 5, 4, 4] ", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(list1, list2):\n    n = len(list1)\n    m = len(list2)\n    \n    if n < m:\n        return False\n    \n    for i in range(n-m+1):\n        found = True\n        for j in range(m):\n            if list1[i+j] != list2[j]:\n                found = False\n                break\n        if found:\n            return True\n    return False\n        \n    ", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(l1, l2):\n    if len(l2) > len(l1):\n        return False\n    elif len(l2) < len(l1):\n        return is_sublist(l2, l1)\n    else:\n        return l2 in l1\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(main,sub):\n    main_index=0\n    sub_index=0\n    while main_index<len(main) and sub_index<len(sub):\n        if main[main_index]==sub[sub_index]:\n            main_index+=1\n            sub_index+=1\n        else:\n            main_index+=1\n    return sub_index==len(sub)\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(L1,L2):\n    if L2 == []:\n        return True\n    if len(L2) == 1:\n        return True if L1[0] == L2[0] else False\n    for index in range(0,len(L1)-len(L2)+1):\n        if L1[index:index+len(L2)] == L2:\n            return True\n    return False\n    ", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list,sublist):\n    if list == []:\n        return False\n    if sublist == []:\n        return True\n    if list[0] == sublist[0]:\n        if is_sublist(list[1:],sublist[1:]):\n            return True\n        return False\n    else:\n        return is_sublist(list[1:],sublist)\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(arr,l):\n    for i in l:\n        if i in arr:\n            return True\n        else:\n            return False\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(lst,sub):\n\tfor i in range(len(lst)-len(sub)+1):\n\t\tif(lst[i:i+len(sub)] == sub):\n\t\t\treturn True\n\treturn False", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1, list2):\n    return list2 in list(itertools.permutations(list1))", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(A,B):\n\ti = 0\n\tj = 0\n\twhile i < len(A) and j < len(B):\n\t\tif A[i] == B[j]:\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse:\n\t\t\ti += 1\n\treturn (j == len(B))\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n#list a\ndef is_sublist(sublist,mainlist):\n    \"\"\"\n    Return True if sublist is a sublist of mainlist, else return False.\n    sublist: a list to check if it's a sublist of mainlist\n    mainlist: the list to check if it contains sublist\n    \"\"\"\n    for i in range(len(sublist)):\n        if sublist[i] not in mainlist[i:]:\n            return False\n    return True\n\n#list b\ndef is_sublist(sublist,mainlist):\n    \"\"\"\n    Return True if sublist is a sublist of mainlist, else return False.\n    sublist: a list to check if it's a sublist of mainlist\n    mainlist: the list to check if it contains sublist\n    \"\"\"\n    for i in range(len(sublist)):\n        if sublist[i] not in mainlist[:len(sublist)-i]:\n            return False\n    return True"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef get_equal(arr: List[Tuple[int, int, int]], n: int) -> str:\n    \"\"\"\n    O(n) runtime, O(1) storage, where n is the length of array.\n    :param arr: input array of tuples.\n    :param n: length of each tuple in the array.\n    :return: 'All tuples have same length' if all tuples have same length, 'Not all tuples have same length' otherwise.\n    \"\"\"\n    if n < 0:\n        return 'Not all tuples have same length'\n\n    for i in range(len(arr)):\n        if len(arr[i]) != n:\n            return 'Not all tuples have same length'\n\n    return 'All tuples have same length'\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tup_list, tup_len):\n    if len(tup_list) == 0:\n        return 'No tuples'\n    elif len(tup_list) == 1:\n        return 'All tuples have same length'\n    else:\n        for i in range(len(tup_list)):\n            if len(tup_list[i]) != tup_len:\n                return 'Not all tuples have same length'\n        return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, size):\n    for tup in tuples:\n        if len(tup) != size:\n            return False\n    return \"All tuples have same length\"\n\n\n# Test case", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tup, length):\n    \"\"\"\n    :param tup: list of tuples\n    :param length: length of tuple\n    :return: str\n    \"\"\"\n    return \"All tuples have same length\" if len(tup) == 0 or len(tup[0]) == length and all(len(t) == length for t in tup) else \"Some tuples have different length\"\n\n#test code", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, num):\n    if len(tuples) == 1:\n        return 'All tuples have same length'\n    else:\n        for tup in tuples:\n            if len(tup) != num:\n                return 'All tuples have same length'\n    return 'All tuples have same length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    for t in tuples:\n        if len(t) != length:\n            return \"All tuples have same length\"\n    return \"All tuples don't have same length\"\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    for tuple_item in tuples:\n        if len(tuple_item) != length:\n            return False\n    return \"All tuples have same length\"\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuple_list, length):\n    if length == 0:\n        return 'All tuples have same length'\n    else:\n        for tup in tuple_list:\n            if len(tup) != length:\n                return 'Not all tuples have same length'\n\ndef get_equal(tuple_list, length):\n    # Code Here\n    return 'All tuples have same length' if all(map(lambda x:len(x) == length, tuple_list)) else 'Not all tuples have same length'", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    is_all_equal = True\n    for t in tuples:\n        if len(t) != length:\n            is_all_equal = False\n    return 'All tuples have same length' if is_all_equal else 'Tuples have different lengths'\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuple_list, length):\n    for i in range(len(tuple_list)):\n        if len(tuple_list[i]) != length:\n            return 'Some tuples do not have same length'\n    return 'All tuples have same length'\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(unsorted_list):\n    if len(unsorted_list) > 1:\n        gap = len(unsorted_list)\n        while gap > 1:\n            for i in range(gap):\n                gap = 10\n                for j in range(i+gap, len(unsorted_list)):\n                    if unsorted_list[i] > unsorted_list[j]:\n                        unsorted_list[j], unsorted_list[i+gap] = unsorted_list[i+gap], unsorted_list[j]\n            gap = int(len(unsorted_list) / 10)\n            print gap\n    return unsorted_list\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(L):\n  \"\"\"\n  Sort list L using comb sort.\n  \"\"\"\n  pass\n\n# Tests\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            tmp = nums[i]\n            j = i\n            while j >= gap and nums[j-gap] > tmp:\n                nums[j] = nums[j-gap]\n                j -= gap\n            nums[j] = tmp\n        gap //= 1\n    return nums\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(input_list):\n    pass\n\n# test case for comb sort", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(input_list):\n    if len(input_list) < 2:\n        return input_list\n    gap = len(input_list)\n    shrink = 1\n    while shrink >= 1:\n        gap = int(gap / 1.25)\n        if gap <= 1:\n            shrink = 0\n        for i in range(gap, len(input_list)):\n            if input_list[i-gap] > input_list[i]:\n                temp = input_list[i-gap]\n                input_list[i-gap] = input_list[i]\n                input_list[i] = temp\n    return input_list\n\n\n# +\n# The List\nmy_list = [5, 15, 37, 25, 79]\n\n# Function Call", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(numbers):\n    length = len(numbers)\n    gap = length\n\n    while gap > 1:\n        gap = int(length / 1.2)\n        for i in range(gap, length):\n            temp = numbers[i]\n            j = i\n            while j >= gap and temp < numbers[j - gap]:\n                numbers[j] = numbers[j - gap]\n                j -= gap\n\n            numbers[j] = temp\n\n        length = gap\n\n    return numbers\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(list_to_sort):\n    pass\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(list_):\n    pass\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(L):\n    if len(L) <= 1:\n        return L\n    gap = len(L)\n    while gap > 1:\n        gap //= 1.25\n        i = 0\n        while i + gap < len(L):\n            if L[i] > L[i + gap]:\n                L[i], L[i + gap] = L[i + gap], L[i]\n            i += 1\n    return L\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nimport math\n\n\ndef comb_sort(array):\n    n = len(array)\n    gap = n\n    while gap > 1:\n        gap = int(math.floor(n / float(gap)))\n        for i in range(gap, n):\n            k = i\n            while k >= gap and array[k - gap] > array[k]:\n                array[k], array[k - gap] = array[k - gap], array[k]\n                k -= gap\n\n\n# Test program"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        x = n - i * i\n        if x < 0:\n            break\n        if x == 0:\n            return True\n    return False\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = dif_Square(n)\n    print(\"Expected output:\", solution)\n    print(\"Output:\", output)\n    if solution == output:\n        print(\"Testcase passed\")\n    else:\n        print(\"Testcase failed\")\n\n\ntest_case = [5, True]\ntest_function(test_case)\n\ntest_case = [16, False]\ntest_function(test_case)", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    if num < 2:\n        return False\n    sqrt = int(num ** .5)\n    while num > 0:\n        if num == (sqrt * sqrt):\n            return True\n        else:\n            num -= sqrt\n            sqrt -= 1\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: bool\n\t\"\"\"\n\t# Squares\n\tS = [i*i for i in range(1,int(n/2)+1)]\n\tD = [abs(i - n) for i in S]\n\t# Compare the difference of squares with the diffrence of the number\n\tif n in D:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    res = False\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            res = True\n            break\n        elif i ** 2 > n:\n            break\n    return res\n\n\ndef main():\n    print(dif_Square(5))\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    for i in range(1, num + 1):\n        if num == (i**2 - i):\n            return True\n        if num == (i**2 + i):\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    i = 1\n    while i*i < num:\n        if num - i*i == 0:\n            return True\n        i += 1\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(x):\n    x = int(x)\n    i = 1\n    while i*i < x:\n        if x == (i*i + i*i):\n            return True\n        i += 1\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n  square = 0\n  for i in range(1, num):\n    square = square + i**2\n  return (square == num)\n\n#test code", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    \"\"\"\n    :param num: Integer\n    :return: Boolean\n    \"\"\"\n    i=0\n    while i<=num/2:\n        if num-i*i==i:\n            return True\n        i+=1\n    return False\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\ndef multiple_split(string):\n\treturn re.split(r'[ \\*]+', string)\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string, delimiters = ['\\n', ' ', '*', ':', ';']):\n    if isinstance(string, str) and isinstance(delimiters, list):\n        return [word for word in re.split(r\"({0})\".format('|'.join(delimiters)), string) if word]\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string):\n    return re.split('[\\*\\^\\&\\@\\#\\$]', string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\ndef multiple_split(text):\n    return re.split(r'\\s*\\*\\s*|\\s*\\-\\s*|\\s*,\\s*|\\s*\\|\\s*|\\s*\\+\\s*|\\s*\\:\\s*|\\s*\\;\\s*|\\s*\\?\\s*|\\s*\\!\\s*', text)\n\n\n# +\ndef multiple_split(text):\n    text = re.sub(r'\\s*\\*\\s*|\\s*\\-\\s*|\\s*,\\s*|\\s*\\|\\s*|\\s*\\+\\s*|\\s*\\:\\s*|\\s*\\;\\s*|\\s*\\?\\s*|\\s*\\!\\s*', r'', text)\n    text = re.sub(r'\\s+', r' ', text)\n    text = text.strip()\n    if text:\n        return text.split()\n    else:\n        return []\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n\ndef multiple_split(string, delimiters: str = \",;:\") -> list:\n    \"\"\"\n    >>> multiple_split(\"Forces of the \\ndarkness*are coming into the play.\")\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split(\"Hello ; World\", \";\")\n    ['Hello', 'World']\n    >>> multiple_split(\"Hello , World\", \",\")\n    ['Hello', 'World']\n    >>> multiple_split(\"Hello ; World\", \"World\")\n    ['Hello ;', '']\n    >>> multiple_split(\"Hello ; World\", \"Hello\")\n    ['', 'World']\n    \"\"\"\n    pattern = re.compile(\"|\".join(map(re.escape, delimiters)))\n    return pattern.split(string)", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n\ndef multiple_split(string):\n    \"\"\"\n    >>> multiple_split(\"Forces of the \\ndarkness*are coming into the play.\")\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    \"\"\"\n    return re.split(r'\\*|\\s', string)\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\n\ndef multiple_split(string):\n    return re.split(r'\\W+', string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(s):\n    return [t.strip() for t in re.split('[/\\\\!+\\-\\^\\*\\?\\[\\]\\{\\}\\(\\):;]*', s)]\n\n\n# TEST", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string):\n    return re.split('[*]', string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n\ndef multiple_split(s: str, sep: str = \",\") -> list:\n    return re.split(r'(\\w+){}'.format(sep), s)\n\n"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, target):\n    # Write your code here\n    #keep the last element of each pattern\n    patterns= [ patterns[i][-1] for i in range(len(patterns))]\n    #get the last element of the target\n    target= target[-1]\n    count = 0\n    for i in range(len(patterns)):\n        if patterns[i] == target:\n            count += 1\n    return count == len(patterns)\n\n\n\n# +\n# A leetcode problem \n# -\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, colors):\n\n    if len(patterns) != len(colors):\n        return False\n\n    for index in range(len(patterns)):\n        pattern = patterns[index]\n        color = colors[index]\n\n        if len(pattern) != len(color):\n            return False\n\n        for pair in zip(pattern, color):\n            if pair[0] != pair[1]:\n                return False\n    return True\n\n\ndef is_samepatterns(patterns, colors):\n    for patt, color in zip(patterns, colors):\n        if patt != color:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns,sequence):\n    if not (len(patterns) == len(sequence)):\n        return False\n    for i in range(0,len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, test_strings):\n    if len(patterns) != len(test_strings):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] != test_strings[i] and patterns[i] != test_strings[i-1]:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, testcases):\n    # Write your code here.\n    if len(patterns) != len(testcases):\n        return False\n    for p in patterns:\n        if p not in testcases:\n            return False\n    for p in patterns:\n        if testcases.count(p) != 2:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, letter):\n    \"\"\"\n    :param patterns: a list of strings\n    :param letter: a string\n    :return: True if the letter follows the given pattern, False otherwise\n    \"\"\"\n    if not letter:\n        return False\n    if patterns[0] == letter:\n        return is_samepatterns(patterns[1:], letter[1:])\n    return is_samepatterns(patterns, letter[1:])\n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, input):\n    if len(patterns) != len(input):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] == \"?\" or patterns[i] == input[i]:\n            pass\n        else:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, array):\n    return list(map(array.count, patterns)) == [1, 2, 2]\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, word):\n  if len(patterns)==0:\n    return True\n  else:\n    return is_samepatterns(patterns[1:], word[1:]) and patterns[0]==word[0]\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, string):\n    for i in range(len(string)):\n        if string[i] not in patterns:\n            return False\n        else:\n            patterns.remove(string[i])\n            if len(patterns)==0:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if t[0]%k == 0 and t[1]%k == 0 and t[2]%k == 0:\n            result.append(t)\n    return str(result)\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(list, k):\n    if k <= 0:\n        return []\n    result = []\n    for x in list:\n        if x == x % k:\n            result.append(x)\n    return result\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(lst, k):\n    return [tuple(i) for i in lst if all(x % k == 0 for x in i)]", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(lst, k):\n    lst = list(filter(lambda x: x % k == 0, lst))\n    return str([(x[0], x[1], x[2]) for x in lst]) if len(lst) != 0 else None\n\n# Test cases", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(lst, k):\n    return '[{0}]'.format(','.join(str(e) for e in lst[0]) if all(e % k == 0 for e in lst[0]) else '')\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    result = []\n    for item in tuples:\n        if all(x % k == 0 for x in item):\n            result.append(item)\n    return str(result)\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(lst, k):\n    return ','.join([','.join(map(str, i)) for i in lst if all(x % k == 0 for x in i)])\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(lst, k):\n    result = []\n    for t in lst:\n        if (all(t[i] % k == 0 for i in range(len(t)))):\n            result.append(t)\n    return str(result)\n\n#assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(list_of_tuples, k):\n    result = []\n    for tuple in list_of_tuples:\n        if all(elem % k == 0 for elem in tuple):\n            result.append(tuple)\n    return str(result)\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    return str(tuple(filter(lambda x: x % k == 0, tuple(map(sum, tuples))))))\n\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(width, height):\n    if (width>height):\n        result = height*(height+1)/2\n    else:\n        result = width*(width+1)/2\n    return result", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\nimport unittest\n\ndef count_Squares(height, width):\n    return width * height * 4\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# In order to count the number of squares in a rectangle, we first find the side length of the rectangle.\n# The side length of a rectangle is the length of one side of the rectangle.\n# To find the side length of a rectangle, we multiply the length of its width and height.\n# The number of squares in a rectangle is equal to the side length of the rectangle squared.\n# So, we return the side length of the rectangle squared.\n\ndef count_Squares(width, height):\n    return width * height * width * height\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n#answer\ndef count_Squares(n,m):\n    return n**2*m\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_squares(length,width):\n    return length*width\n    ", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(height,width):\n\tcount = 0\n\tfor i in range(height):\n\t\tfor j in range(width):\n\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n, m):\n    return n*n + m*m\n\n# assert count_Squares(4,3) == 20\n\n# test = int(input(\"Enter no of rows: \"))\n# test1 = int(input(\"Enter no of columns: \"))\n# print(count_Squares(test, test1))", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(w, h):\n    return w * h\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n, m):\n    \"\"\"\n    Returns number of squares in a rectangle of size n x m\n    >>> count_Squares(4,3) == 20\n    True\n    >>> count_Squares(5,3) == 30\n    True\n    >>> count_Squares(5,5) == 50\n    True\n    >>> count_Squares(5,6) == 60\n    True\n    >>> count_Squares(6,4) == 30\n    True\n    \"\"\"\n    return n * m\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(a, b):\n    \"\"\"\n    >>> count_Squares(4,3)\n    20\n    \"\"\"\n    count = 0\n    for i in range(0,a+1):\n        for j in range(0,b+1):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    # write your code here\n    sum_odd = 0\n    sum_even = 0\n    while num > 0:\n        if num % 10 % 2 == 0:\n            sum_even += num % 10\n        else:\n            sum_odd += num % 10\n        num //= 10\n    return sum_even - sum_odd\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(n):\n    \"\"\"\n    Return True if there is a difference between the sum of odd digits and the sum of even digits,\n    otherwise False\n    \"\"\"\n\n    # Method 1: Use XOR operator\n    return ((n ^ (n & (n-1))) & 1) != 0\n\n# Method 2: Use modulo operator\ndef is_Diff(n):\n    return n % 10 != 0\n\ndef is_Diff(n):\n    return not (n % 2 and n % 5)\n\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\nimport unittest\ndef is_Diff (n):\n    even = 0\n    odd = 0\n    while n:\n        if n % 2:\n            odd += n % 10\n        else:\n            even += n % 10\n        n //= 10\n    if even != odd:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    res = 0\n    for num in str(num):\n        if int(num) % 2 == 0:\n            res += int(num)\n        else:\n            res -= int(num)\n    return res\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    x = str(num)\n    digit = list(x)\n    even_sum = 0\n    odd_sum = 0\n    for i in digit:\n        if int(i)%2==0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    if even_sum == odd_sum:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    sum1 = 0\n    sum2 = 0\n    str1 = str(num)\n    # print(str1)\n    for i in range(0, len(str1)):\n        if int(str1[i]) % 2 == 0:\n            sum1 += int(str1[i])\n        else:\n            sum2 += int(str1[i])\n    if (sum1 - sum2) == 0:\n        return False\n    return (sum1 - sum2)", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    #use string slicing to find even and odd\n    str_num = str(num)\n    odd_num = str_num[1::2]\n    even_num = str_num[0::2]\n    even_sum = sum(int(x) for x in even_num)\n    odd_sum = sum(int(x) for x in odd_num)\n    return even_sum - odd_sum\n\n\n#print (is_Diff(12345))\n\ndef is_Diff_2(num):\n    #use if and while to find even and odd\n    sum_odd = 0\n    sum_even = 0\n    while (num > 0):\n        num = num // 10\n        if (num % 2 == 0):\n            sum_even += num\n        else:\n            sum_odd += num\n    return sum_even - sum_odd\n\n#print (is_Diff_2(12345))", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    odd_count = 0\n    even_count = 0\n    sum = 0\n    num = str(num)\n    for x in num:\n        if x % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    sum = odd_count + even_count\n    if sum % 2 == 0:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (x):\n    sum_even = 0\n    sum_odd = 0\n    while x:\n        if x % 10 == 0:\n            sum_even += x\n        else:\n            sum_odd += x\n        x //= 10\n    return sum_odd != sum_even\n\n\ndef main():\n    # assert is_Diff(12345) == False\n    print(is_Diff(12345))\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (num):\n    even_sum = 0\n    odd_sum = 0\n    while num > 0:\n        if (num % 10) % 2 == 0:\n            even_sum += (num % 10)\n        else:\n            odd_sum += (num % 10)\n        num = num // 10\n    return even_sum == odd_sum\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(x):\n    ans = 0\n    for i in range(1, x+1):\n        ans += i & (i - 1)\n    return ans", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n):\n        count += bin(i).count('1') & 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(num):\n    count = 0\n    for i in range(0,num+1):\n        if (num & i) and ((num | i) != num):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\nfrom collections import Counter\n\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(0, n + 1):\n        s = bin(i)[2:]\n        # print(s)\n        if len(s) % 2 != 0:\n            count += Counter(s).get(1, 0)\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += 1 if count_odd_bits(i) else 0\n    return count\n\ndef count_odd_bits(n):\n    count = 0\n    while n > 0:\n        if n % 2:\n            count += 1\n        n = n >> 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\nimport unittest\n\ndef count_With_Odd_SetBits(n):\n\t\"\"\"\n\t:type n: int\n\t:rtype: int\n\t\"\"\"\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\tcount = 0\n\t\tfor i in range(1,n+1):\n\t\t\tif count_With_Odd_SetBits(n - i) == 0 and count_With_Odd_SetBits(i) > 0:\n\t\t\t\tcount += 1\n\t\treturn count\n\t", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\nfrom math import log\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += sum(int(d) % 2 for d in bin(i))\n    return count\n\n\n# assert count_With_Odd_SetBits(10) == 3\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(num):\n    count = 0\n    for i in range(1, num+1):\n        setBits = set(bin(i)[2:])\n        if len(setBits) % 2 == 1:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        num_of_set_bits = 0\n        while (i != 0):\n            if (i & 1):\n                num_of_set_bits += 1\n            i = i >> 1\n        if(num_of_set_bits % 2 == 1):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(string):\n    return len(string)%2 == 0", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word)%2 == 0:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n# Write your code here\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    return len(word)%2!=0\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    return len(word)%2\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(str_word):\n    return len(str_word) % 2 != 0\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n\ndef word_len2(word):\n    return not len(word)%2\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n\nword_len(\"Hadoop\")\n\n\n# + [markdown] id=\"lS7WM_wuF_8j\"\n# **Question 6: Write a function that checks whether a string is pangram or not.**\n#\n#\n# **Note: Pangrams are words or sentences containing every single letter of the alphabet at least once.**\n#\n#\n# **Example:**\n#\n# pangram = \"the quick brown fox jumps over the lazy dog\"\n#\n# is_pangram(pangram) should return True.\n#\n# pangram = \"the quick brown fox jumps over the lazy cog\"\n#\n# is_pangram(pangram) should return False.\n#\n#\n\n# + id=\"h7eLz1Y7F_8k\" outputId=\"d97f5f56-b360-402f-8930-8a5e71014722\" colab={\"base_uri\": \"https://localhost:8080/\"}", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) & 1 == 0:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n * tetrahedral_number(n-1)\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n == 1:\n        return 1\n    else:\n        return n * tetrahedral_number(n-1)\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nimport math\n\n# factorial function\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# n is the number of vertices in the tetrahedron\n# 1 * (2 * 3 * 4) + 2 * (3 * 4 * 5) + ... + (n-1) * (n * n)\ndef tetrahedral_number(n):\n    if n == 0:\n        return 0\n    else:\n        return factorial(n) * math.factorial(n-1) * math.factorial(n) * math.factorial(n+1)\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    # Write your code here\n    from math import factorial\n\n    def tetrahedral_number_helper(n):\n        if n <= 0:\n            return 0\n\n        if n == 1:\n            return 1\n\n        if n == 2:\n            return 3\n\n        return factorial(n) * tetrahedral_number_helper(n - 3)\n\n    return tetrahedral_number_helper(n)\n\n\ndef test():\n    assert tetrahedral_number(0) == 0\n    assert tetrahedral_number(1) == 1\n    assert tetrahedral_number(2) == 3\n    assert tetrahedral_number(3) == 10\n    assert tetrahedral_number(4) == 42\n    assert tetrahedral_number(5) == 35\n    assert tetrahedral_number(6) == 286\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n == 0:\n        return 0\n    return n * tetrahedral_number(n - 1) + n * (n + 1) * (n + 2) / 6.0\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nfrom math import floor, sqrt\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Tetrahedral numbers can be found by the formula:\n\n    Tn = n*(2*n-1)*(n+1)/6\n\n    n = 0 -> 0\n    n = 1 -> 1\n    n = 2 -> 5\n    n = 3 -> 15\n    n = 4 -> 35\n    \"\"\"\n    return int(n * (2 * n - 1) * (n + 1) / 6)\n\ndef tetrahedral_number2(n):\n    \"\"\"\n    Tetrahedral numbers can be found by the formula:\n\n    Tn = n*(2*n-1)*(n+1)/6\n\n    n = 0 -> 0\n    n = 1 -> 1\n    n = 2 -> 5\n    n = 3 -> 15\n    n = 4 -> 35\n    \"\"\"\n    return int(floor(n * (2 * n - 1) * (n + 1) / 6))\n\ndef tetrahedral_number3(n):\n    \"\"\"\n    Tetrahedral numbers can be found by the formula:\n\n    Tn = n*(2*n-1)*(n+1)/6\n\n    n = 0 -> 0\n    n = 1 -> 1\n    n = 2 -> 5\n    n = 3 -> 15\n    n = 4 -> 35\n    \"\"\"\n    return int(floor(n * (sqrt(1 + 24 * n) - 1) / 6))\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n == 0:\n        return 0\n    return sum(tetrahedral_number(i) for i in range(1, n + 1))\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    pass\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nfrom math import factorial\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        nth tetrahedral number.\n    \"\"\"\n    return int(factorial(n + 3) / (factorial(3) * factorial(n + 1)))\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return 1 + n*(n + 1)*(n + 2)/6\n\n\n# -\n\n# # 2. Add\n#\n# Given two integer arrays `a` and `b`, implement a function `add` to compute the sum of the two arrays. \n#\n# **Do not use built-in function for the purpose.**\n#\n# *Hint*: if the length of the two arrays are different, which means their shapes are different, \n# the shape of the result array will be the same as that of `a`. \n#\n# *Hint*: it is recommended to use two nested for-loops to compute the result.\n\n# +\ndef add(a, b):\n    if len(a) == len(b):\n        c = [0] * len(a)\n        for i in range(len(a)):\n            for j in range(len(a)):\n                c[i] += a[i] + b[j]\n        return c\n    else:\n        c = [0] * len(a)\n        for i in range(len(a)):\n            for j in range(len(b)):\n                c[i] += a[i] + b[j]\n        return c\n\n# Test\na = [1, 2, 3]\nb = [1, 1, 1]"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tup1,tup2):\n    return [(tup1[i],tup2[i]) for i in range(len(tup1))]\n\n\nzip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) )\n\n\n# +\n# write a function to find the first index of an element in a tuple\n\ndef first_index(tup,val):\n    return tup.index(val)\n\nfirst_index((7, 8, 4, 5, 9, 10), 4)\n\n\n# +\n# write a function to find the last index of an element in a tuple\n\ndef last_index(tup,val):\n    return len(tup) - tup[::-1].index(val) - 1\n\nlast_index((7, 8, 4, 5, 9, 10), 4)\n\n\n# +\n# write a function to concatenate the two given tuples\n\ndef concatenate_tuples(tup1,tup2):\n    return tup1 + tup2\n\nconcatenate_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6) )\n\n\n# +\n# write a function to interleave the two given tuples\n\ndef interleave_tuples(tup1,tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i])\n        result.append(tup2[i])\n    return result\n\ninterleave_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6) )\n# -", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple_one, tuple_two):\n    return list(zip(tuple_one, tuple_two))", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\nfrom typing import Tuple\nimport re\n\n\ndef zip_tuples(tuple1: Tuple, tuple2: Tuple) -> Tuple:\n    \"\"\"\n    Parameters\n    ----------\n    tuple1 : Tuple\n        Tuple 1\n    tuple2 : Tuple\n        Tuple 2\n\n    Returns\n    -------\n    Tuple\n        List of zipped tuples\n    \"\"\"\n    return [(x, y) for x, y in zip(tuple1, tuple2)]\n\n\n# Test Cases", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(t1, t2):\n    return list(zip(t1, t2))", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(t1,t2):\n    assert isinstance(t1,tuple)\n    assert isinstance(t2,tuple)\n    t_zip = list()\n    for i in range(len(t1)):\n        t_zip.append((t1[i],t2[i]))\n    return t_zip", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n\tzip_tuple = []\n\tfor i in range(len(tuple1)):\n\t\tzip_tuple.append((tuple1[i], tuple2[i]))\n\treturn zip_tuple\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple_one, tuple_two):\n    zip_list = []\n    for i in range(len(tuple_one)):\n        zip_list.append((tuple_one[i], tuple_two[i]))\n    return zip_list\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    zipped = []\n    for i in range(len(tuple1)):\n        zipped.append((tuple1[i], tuple2[i]))\n    return zipped\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(t1, t2):\n    return list(zip(t1, t2))\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1,tuple2):\n    lst = []\n    for i in range(len(tuple1)):\n        lst.append((tuple1[i], tuple2[i]))\n    return lst\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3*3.14*radius**3\n    ", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    return 4.0/3.0*3.1415926535897932384626433832795*radius**3\n\n#assert volume_sphere(10)==4188.790204786391\n#print(volume_sphere(10))\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return (4/3)*pi*radius**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    \"\"\"Return the volume of a sphere with radius `radius`.\"\"\"\n    return (4/3)*3.14*radius*radius*radius\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    volume = (4/3) * 3.14159 * (radius ** 3)\n    return volume\n\n# This is an alternative way to write the same function\n\ndef volume_sphere(radius):\n    return (4/3) * 3.14159 * (radius ** 3)\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    \"\"\"Calculates the volume of a sphere\"\"\"\n    return 4*math.pi*radius**3/3\n\n# Unit tests", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    return (4/3)*3.14159*radius*radius*radius\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return (4.1888 * radius * radius * radius)\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere\n    \n    Parameters:\n    radius (float) - Radius of the sphere\n    \n    Returns:\n    volume (float) - Volume of the sphere\n    \"\"\"\n    volume = (4/3)*3.14159*radius**3\n    return volume\n\n\n# +", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(r):\n    volume = (4/3)*math.pi*r**3\n    return volume"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\n# + id=\"wBn-Si9w9oLe\"\n# Function to get the character from given string\ndef get_Char(s):\n    count = 0\n    for i in s:\n        count += ord(i)\n    return chr(count)\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"hIXjdr7x99rE\" outputId=\"6c51491b-244e-47c2-8c67-ff439f842789\"\ns = input(\"Enter the string: \")\nget_Char(s)\n\n# + [markdown] id=\"68ajg8-G974R\"\n# #### Write a python program to find the most repeated character in the given string.\n# assert get_Max_Char(\"abcabc\") == \"c\"\n\n# + id=\"hMfrL1jv-LuW\"\n# Function to find the max char\ndef get_Max_Char(s):\n    max_count = 0\n    max_char = None\n    for i in s:\n        count = s.count(i)\n        if count > max_count:\n            max_count = count\n            max_char = i\n    return max_char\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"v7NzD0K8-x9v\" outputId=\"c73b7c39-f1b7-4e3f-a006-3f218b920684\"\ns = input(\"Enter the string: \")\nget_Max_Char(s)\n\n\n# + [markdown] id=\"HoJtnk6S-84E\"\n# #### Write a python function to get the lexicographically smallest string from a given list of strings.\n# assert get_Lexico_Smallest([\"a\", \"b\", \"ab\"]) == \"ab\"\n\n# + id=\"W7U6U41m-10I\"\n# Function to get the lexicographically smallest string", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(s):\n    \"\"\"\n    :param s: input string\n    :return: character made by adding all the characters of the given string\n    \"\"\"\n    output = \"\"\n    for i in s:\n        output += i\n    return output\n\n# Main", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str1):\n    \"\"\"\n    :param str1:\n    :return:\n    \"\"\"\n    sum = 0\n    for i in str1:\n        sum = sum + ord(i)\n    return chr(sum)", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    return chr(sum(ord(c) for c in string))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str):\n    return chr(sum([ord(i) for i in str]))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    return str[0]+str[1]+str[2]\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    return chr(ord('a') + sum(ord(char) for char in str))", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(str1):\n    return chr(ord(str1[0])+ord(str1[1])+ord(str1[2]))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str1):\n    return str1[0] + str1[1] + str1[2]\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_char(string):\n    sum_ = 0\n    for x in string:\n        sum_ += ord(x)\n    return chr(sum_)\n\n\n# test case"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef newman(n):\n    n1, n2 = 0, 0\n    for i in range(n):\n        n1, n2 = n2, n1 + n2\n        if i == n-1:\n            return n2\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 0\n    else:\n        return (sequence(n-1)+sequence(n-2))\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    i = 1\n    while True:\n        i = next(sequence_generator(i))\n        if i == n:\n            return i\n\ndef sequence_generator(starting):\n    current = 0\n    yield starting\n    while True:\n        current = next_newman_conway_number(current)\n        yield current\n\ndef next_newman_conway_number(starting):\n    if starting == 0:\n        return 1\n    elif starting % 2 == 0:\n        return starting/2\n    else:\n        return 3*starting+1\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    newman_conway = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    # print(newman_conway)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return newman_conway[n-2] + newman_conway[n]\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef newman_conway(n):\n    # Newman Conway Sequence: http://en.wikipedia.org/wiki/Newman_Conway_sequence\n    if n <= 0: return None\n\n    def f(a, b, c, n):\n        if n == 1: return a\n        elif n == 2: return b\n        else: return f(c, a, b, n - 2)\n\n    return f(0, 1, 1, n)\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    return int(n)\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1)+sequence(n-2)+sequence(n-3)\n    ", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    pass\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\nfrom itertools import count\n\nfrom math import sqrt\n\nfrom utils.primes import primes_up_to\n\n\ndef sequence(n):\n    \"\"\"\n    Find n-th number in newman conway sequence\n\n    :param n: number to find\n    :return: n-th number in newman conway sequence\n    \"\"\"\n    if n < 0:\n        raise Exception(\"Index must be greater than or equal to 0\")\n\n    result = 0\n    while result < n:\n        result = next(newman_conway_generator(result))\n    return result\n\n\ndef newman_conway_generator(x):\n    \"\"\"\n    Generate newman conway sequence\n\n    :param x: start number of the sequence\n    :return: newman conway sequence generator\n    \"\"\"\n    m = 1\n    m2 = 0\n    while True:\n        x2 = (x**2) % 3\n        result = (x**2 + m2) % 3\n        if result == 1:\n            yield result\n        else:\n            yield result\n        m2 = m\n        m = (m * x2) % 3\n\n\ndef mersenne(n):\n    \"\"\"\n    Return mersenne number.\n\n    :param n: power of 2\n    :return: mersenne number\n    \"\"\"\n    return 2 ** n - 1\n\n\ndef all_mersenne(n):\n    \"\"\"\n    Return all mersenne numbers.\n\n    :param n: power of 2\n    :return: all mersenne numbers\n    \"\"\"\n    return set(mersenne(k) for k in range(0, n + 1))\n\n\ndef all_newman_conway(n):\n    \"\"\"\n    Return all newman conway numbers.\n\n    :param n: number\n    :return: all newman conway numbers\n    \"\"\"\n    return set(next(newman_conway_generator(k)) for k in range(0, n + 1))\n\n\ndef all_newman_conway_up_to(n):\n    \"\"\"\n    Return all newman conway numbers up to n.\n\n    :param n: number\n    :return: all newman conway numbers up to n\n    \"\"\"\n    return all_newman_conway(n) &", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"Write a function to find the n-th number in newman conway sequence.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        s1 = sequence(n//2)\n        s2 = 0\n        if n % 2 == 0:\n            s2 = s1\n        else:\n            s2 = s1 * s1 * 2 + 1\n        return s1 + s2\n\n\ndef test():\n    assert sequence(10) == 6\n\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Returns the surface area of a sphere\n    :param radius: int or float\n    :return:\n    \"\"\"\n    return (4/3)*np.pi*radius**2\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    surface_area= 4*math.pi*(radius**2)\n    return surface_area", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\n# def surfacearea_sphere(r):\n#     return 4/3 * pi * r**2 * r * r\n\ndef surfacearea_sphere(r):\n    return 4 * pi * (r**2)\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    \"\"\"Calculates the surface area of a sphere.\n    Input: radius\n    Output: surface area\"\"\"\n    # Check if radius is 0\n    if radius <= 0:\n        print(\"Radius must be a positive number.\")\n        return 0\n    # Calculate surface area\n    area = 4*radius**2*math.pi\n    return area\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function calculates the surface area of a sphere.\n    \"\"\"\n    return (4*math.pi*r**2)\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(r):\n    return 4*math.pi*r**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    import math\n    return 4/3 * math.pi * (radius ** 3)\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n\t\"\"\"Calculates surface area of a sphere given its radius\"\"\"\n\treturn (4.0/3.0) * math.pi * (radius ** 3)\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    area = 4.0*math.pi*radius**2\n    return area\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import floor, sqrt\n\ndef centered_hexagonal_number(n):\n    return floor((3 * sqrt(2) * n ** 2 + 1) / 4)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import sqrt\n\n\ndef centered_hexagonal_number(n):\n    # Complete this function\n    n_hexagonal = 2 * n * n + 1\n    for i in range(1, int(sqrt(2 * n_hexagonal)) + 1):\n        if n_hexagonal % i == 0:\n            return n_hexagonal / i\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    https://en.wikipedia.org/wiki/Hexagonal_number#Centered_hexagonal_numbers\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 6\n    if n == 2:\n        return 20\n    else:\n        return (n * (2 * n - 1)) // 2\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    number = 0\n    for i in range(n):\n        number += i * ((2 * i + 1) * (2 * i + 1))\n    return number", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nimport math\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"Find nth centered hexagonal number.\n\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    i = 1\n    while True:\n        a = hexagonal_number(i)\n        if a >= n:\n            return a\n        i += 1\n\n\ndef hexagonal_number(n):\n    \"\"\"Find nth hexagonal number.\n\n    >>> hexagonal_number(10)\n    1716\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef main():\n    n = int(input())\n    print(centered_hexagonal_number(n))\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    :param n: a positive integer\n    :return: the nth centered hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    value = 2\n    for i in range(n - 1):\n        value += 15 * i\n    return value\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    n=n-1\n    if(n==1):\n        return 1\n    else:\n        return 1+2*centered_hexagonal_number(n-1)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nfrom math import floor, sqrt\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Finds nth centered hexagonal number.\n\n    Args:\n        n (int): nth centered hexagonal number to find.\n\n    Returns:\n        int: nth centered hexagonal number.\n\n    Examples:\n        >>> centered_hexagonal_number(10)\n        271\n        >>> centered_hexagonal_number(1000000)\n        17136611490427257138\n        >>> centered_hexagonal_number(9)\n        251\n    \"\"\"\n    # floor(sqrt(1 + 8*n)) / 2\n    return floor(sqrt(8*n + 1) / 2)\n\n\ndef main():\n    # 10th centered hexagonal number\n    assert centered_hexagonal_number(10) == 271\n    # 1000000th centered hexagonal number\n    assert centered_hexagonal_number(1000000) == 17136611490427257138\n    # 9th centered hexagonal number\n    assert centered_hexagonal_number(9) == 251\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    a, b = 1, 1\n    i = 1\n    while i <= n:\n        a, b = b, a + b\n        i += 1\n    return a\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nimport math\n\ndef centered_hexagonal_number(n):\n    return (24*n*(n+1)*(2*n+1)*(3*n+3))//240\n\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(a, b, c):\n    result = a.copy()\n    result.update(b)\n    result.update(c)\n    return result\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1,d2,d3):\n    result = {}\n    result.update(d1)\n    result.update(d2)\n    result.update(d3)\n    return result\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n#answer\n\ndef merge_dictionaries_three(d1, d2, d3):\n    return {**d1, **d2, **d3}\n\n\n#test case\nd1 = {\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}\nd2 = {\"G\": \"Green\", \"W\": \"White\"}\nd3 = {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    dict = dict1.copy()\n    for key, value in dict2.items():\n        if key in dict1:\n            dict[key] = value\n        elif key in dict3:\n            dict[key] = value\n        else:\n            dict[key] = dict3[key]\n    return dict\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict_1, dict_2, dict_3):\n    dict_merged = dict_1.copy()\n    for k, v in dict_2.items():\n        dict_merged.update({k: v})\n    for k, v in dict_3.items():\n        dict_merged.update({k: v})\n    return dict_merged\n\n\n#\n# Explanation:\n#\n# There are three dictionaries:\n#\n# dict_1: {R: Red, B: Black, P: Pink}\n#\n# dict_2: {G: Green, W: White}\n#\n# dict_3: {O: Orange, W: White, B: Black}\n#\n# And the desired output is:\n#\n# {B: Black, R: Red, P: Pink, G: Green, W: White, O: Orange}\n#\n# We want to start with the keys and values in dict_1. We need to add the keys and values from dict_2, then the keys and values from dict_3.\n#\n# So, we start with:\n#\n# dict_merged = {R: Red, B: Black, P: Pink}\n#\n# We then iterate through the keys and values in dict_2:\n#\n# {G: Green, W: White}\n#\n# And we want to add the values to the dict_merged dictionary:\n#\n# {R: Red, B: Black, P: Pink, G: Green, W: White}\n#\n# Finally, we iterate through the keys and values in dict_3:\n#\n# {O: Orange, W: White, B: Black}\n#\n# And we want to add the", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(*dicts):\n    merged_dict = dict(zip(*dicts))\n    return merged_dict\n\n\n# + id=\"HSR0FKzCmY1j\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    output_dict = {}\n    for key in dict1:\n        output_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in output_dict:\n            output_dict[key] = dict2[key]\n        elif dict2[key] > output_dict[key]:\n            output_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in output_dict:\n            output_dict[key] = dict3[key]\n        elif dict3[key] > output_dict[key]:\n            output_dict[key] = dict3[key]\n    return output_dict\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\nfrom functools import reduce\n\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    :param dict1:\n    :param dict2:\n    :param dict3:\n    :return:\n    \"\"\"\n\n    result = {}\n\n    # this is a bit more complicated and slower\n    # result = {**dict1, **dict2, **dict3}\n\n    # reduce(lambda acc, item: {**acc, **item}, [dict1, dict2, dict3], {})\n    result = reduce(lambda acc, item: dict(dict1, **item), [dict2, dict3], dict1)\n\n    return result\n\n\ndef merge_dictionaries_three_2(dict1, dict2, dict3):\n    \"\"\"\n    :param dict1:\n    :param dict2:\n    :param dict3:\n    :return:\n    \"\"\"\n\n    result = {}\n\n    # this is a bit more complicated and slower\n    # result = {**dict1, **dict2, **dict3}\n\n    # reduce(lambda acc, item: {**acc, **item}, [dict1, dict2, dict3], {})\n    result = dict1.copy()\n\n    for key, value in dict2.items():\n        if key in result:\n            if isinstance(value, dict):\n                result[key] = merge_dictionaries_three_2(result[key], value, dict3.get(key))\n            else:\n                result[key] = value\n        else:\n            result[key] = value\n\n    for key, value in dict3.items():\n        if key in result:\n            if isinstance(value, dict):\n                result[key] = merge_dictionaries_three_2(result[key], dict2.get(key), value)\n            else:\n                result[key] = value\n        else:\n            result[key", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(d1,d2,d3):\n  result = {}\n  for key in d1:\n    result[key] = d1[key]\n  for key in d2:\n    result[key] = d2[key]\n  for key in d3:\n    result[key] = d3[key]\n  return result\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(nums):\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    return counts\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(my_list):\n    counts = {}\n    for x in my_list:\n        if x in counts:\n            counts[x] += 1\n        else:\n            counts[x] = 1\n    return counts\n\nmy_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list_of_nums):\n    count = dict()\n    for i in list_of_nums:\n        if i in count:\n            count[i] = count[i] + 1\n        else:\n            count[i] = 1\n    return count\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(input_list):\n    return {i:input_list.count(i) for i in set(input_list)}\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(list):\n    return collections.Counter(list)\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\nfrom collections import Counter\n\ndef freq_count(numbers):\n    result = Counter(numbers)\n    return result\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(L):\n    result = {}\n    for element in L:\n        if element in result:\n            result[element] += 1\n        else:\n            result[element] = 1\n    return result\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(lst):\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(numbers):\n    dictionary = {}\n    for x in numbers:\n        if x in dictionary:\n            dictionary[x] += 1\n        else:\n            dictionary[x] = 1\n    return dictionary\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(elements):\n    count = {}\n    for element in elements:\n        if element in count:\n            count[element] = count[element] + 1\n        else:\n            count[element] = 1\n    return count\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    :param n: a positive integer\n    :return: the closest smaller number than n\n    \"\"\"\n    # Your code here\n    l = []\n    for i in range(1, n):\n        if n - i in l:\n            return n - i\n        l.append(i)\n    return 0\n\n#---------------------------------------------------\n\ndef is_happy(n):\n    \"\"\"\n    Write a function to determine if a number is happy.\n    A happy number is a number defined by the following process:\n    Starting with any positive integer, replace the number by the\n    sum of the squares of its digits, and repeat the process until\n    the number equals 1 (where it will stay), or it loops endlessly in a\n    cycle which does not include 1. Those numbers for which this process\n    ends in 1 are happy numbers.\n    :param n: an integer\n    :return: True if n is happy, False otherwise\n    \"\"\"\n    # Your code here\n    num = n\n    sum_num = 0\n    while num != 1:\n        digit = int(str(num)[-1])\n        sum_num += digit ** 2\n        num = sum_num\n    return num == 1\n\n#---------------------------------------------------\n\ndef remove_duplicates(n):\n    \"\"\"\n    Write a function to remove duplicates from an array.\n    :param n: a list\n    :return: a list with duplicates removed\n    \"\"\"\n    # Your code here\n    result = []\n    for i in n:\n        if i not in result:\n            result.append(i)\n    return result\n\n#---------------------------------------------------\n\ndef shuffle(n):\n    \"\"\"\n    Shuffle a list.\n    :param n: a list\n    :return: a list\n    \"\"\"\n    # Your code here\n    result = []\n    while n:\n        result.append(n[random.randint(0, len(n) - 1)])\n        n.remove(n[random.randint(0, len(n) - 1)])\n    return result\n\n#---------------------------------------------------\n\ndef add_group_char(s):\n    \"\"\"\n    Write a function to add a character to the front of every word in a string.\n    :param s: a string\n    :return: a string with all words", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    arr = []\n    for i in range(n, 0, -1):\n        arr.append(abs(i-n))\n    return arr[0]", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\nfrom math import sqrt\ndef closest_num(n):\n    return int(round(sqrt(n)))\n\ndef test_closest_num():\n    assert closest_num(11) == 10\n    assert closest_num(2147483647) == 2147483647\n    assert closest_num(2147483648) == 2147483647\n    assert closest_num(-2147483649) == -2147483649", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    num_list = sorted(range(1, 101), key=lambda x: abs(n - x))\n    for x in num_list:\n        if x == n:\n            return x\n        if x > n:\n            return x - 1\n        if x < n:\n            return x + 1\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nfrom functools import lru_cache\n\ndef closest_num(n):\n    \"\"\"\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n    start, end = 0, n\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid == n:\n            return mid\n        if mid * mid > n:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\n\n\ndef closest_num_recur(n):\n    \"\"\"\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n    if n < 2:\n        return n\n    start, end = 1, n\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid > n:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start - 1\n\n\ndef closest_num_dp(n):\n    \"\"\"\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n    if n < 2:\n        return n\n\n    dp = [float('inf')] * n\n    dp[0] = 0\n\n    for i in range(1, n):\n        j = i - 1\n        while j > 0 and dp[j] >= i:\n            j -= 1\n        dp[i] = j + 1\n\n    return dp[n - 1]\n\n\ndef closest_num_lru(n):\n    \"\"\"\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n    @lru_cache(None)\n    def find_smaller(n):\n        if n < 2:\n            return n\n        start, end = 1, n\n        while start <= end:\n            mid = start + (end - start) // 2\n            if mid * mid > n:\n                end = mid - 1\n            else:\n                start = mid + 1\n        return start - 1\n\n    return find_smaller(n)", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    lst = []\n    for i in range(1, n+1):\n        lst.append(abs(n - i))\n    return lst.index(min(lst)) + 1\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    num = n\n    for i in range(n, 10000):\n        if num % i == 0:\n            if abs(num - i) < abs(num - num // i):\n                num = i\n    return num\n\ndef closest_num(n):\n    l = []\n    for i in range(1,n):\n        for j in range(1, n):\n            if abs(i-j) < abs(i-n):\n                l.append(i)\n    return l[0]\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    if n == 0:\n        return 10\n    else:\n        r = (n/10)*10\n        if r >= n:\n            return n\n        else:\n            return r\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nfrom sortedcontainers import SortedDict\ndef closest_num(n):\n    m = SortedDict({x:abs(x-n) for x in range(1,1000)})\n    return m[m.nearest(n)]\n\n# %%", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nfrom collections import Counter\n\ndef closest_num(n):\n    l = list(map(int, Counter(str(n)).most_common()))\n    l.sort()\n    for i in l:\n        if n - i < abs(n - i):\n            return n - i\n\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list_words):\n    max_len = 0\n    for word in list_words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\n# time complexity : O(n)\n# space complexity : O(1)\ndef len_log(string_array):\n    max_len = 0\n    for string in string_array:\n        max_len = max(max_len, len(string))\n    return max_len\n\n# time complexity : O(n)\n# space complexity : O(1)\ndef len_log_2(string_array):\n    max_len = 0\n    for string in string_array:\n        max_len = max(max_len, len(string))\n    return max(max_len, len(max_len))", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(log):\n    max = 0\n    for i in range(len(log)):\n        if len(log[i]) > max:\n            max = len(log[i])\n    return max\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(input_array):\n    \"\"\"\n    :param input_array:\n    :return:\n    \"\"\"\n    return max(map(len,input_array))\n\ndef main():\n    assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n\n\n# assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef length_longest_word(words):\n    words = [word.lower() for word in words]\n    words = [word for word in words if len(word) > 0]\n    words = [word for word in words if word.isalpha()]\n    if len(words) == 0:\n        return 0\n    else:\n        return max([len(word) for word in words])\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(list_of_words):\n    max_len = 0\n    for word in list_of_words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(log):\n    res = -1\n    for i in log:\n        if len(i) > res:\n            res = len(i)\n    return res\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    max_length = 0\n    for word in words:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length\n\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(strs):\n    '''\n    \u6700\u957f\u5355\u8bcd\u957f\u5ea6\n    :param strs: \u5355\u8bcd\u5217\u8868\n    :return: \u6700\u957f\u5355\u8bcd\u957f\u5ea6\n    '''\n    if len(strs) == 0:\n        return 0\n    maxLen = 0\n    for i in strs:\n        if len(i) > maxLen:\n            maxLen = len(i)\n    return maxLen"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(lst, s):\n    for i in range(len(lst)-len(s)+1):\n        if lst[i] == s:\n            return True\n    return False\n\n#test cases", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(s,sub):\n    for i in range(len(s)):\n        if s[i] == sub[0]:\n            if s[i:i+len(sub)] == sub:\n                return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(strs,sub):\n    if len(sub) == 0:\n        return True\n    for i in range(len(strs)):\n        if strs[i].startswith(sub):\n            for j in range(len(sub)):\n                if sub[j] != strs[i][j]:\n                    break\n            else:\n                return True\n    return False\n\n\n\n# +\ndef find_substring(strs, sub):\n    if len(sub) == 0:\n        return True\n    for i in range(len(strs)):\n        if strs[i].startswith(sub):\n            for j in range(len(sub)):\n                if sub[j] != strs[i][j]:\n                    break\n            else:\n                return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(lst, sub):\n    sub = sub.lower()\n    count = 0\n    for i in lst:\n        if sub in i:\n            count += 1\n            if count == len(sub):\n                return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n#input: a list of strings and a substring to check\n#return: True if the substring is present in the list, false otherwise.\n\ndef find_substring(strings, substring):\n    # O(n) time | O(1) space\n    for string in strings:\n        if substring in string:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_strings, sub_string):\n    return sub_string in \" \".join(list_of_strings)\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n#list=[\"red\",\"black\",\"white\",\"green\",\"orange\"]\n#word=\"ack\"\n#word_len=len(word)\n#print(word_len)\n#word=word.lower()\n#print(word)\n#print(list)\n#for i in range(0,len(list)):\n#    if list[i] == word:\n#        return True\n#return False\n\ndef find_substring(list,word):\n    list=list.lower()\n    word=word.lower()\n    word_len=len(word)\n    for i in range(0,len(list)):\n        if list[i:i+word_len]==word:\n            return True\n    return False", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(ls,sub):\n    for str in ls:\n        if sub in str:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(arr,sub):\n    n = len(arr)\n    m = len(sub)\n    if n < m:\n        return False\n    for i in range(n):\n        if arr[i] == sub[0]:\n            for j in range(1,m):\n                if arr[i+j] != sub[j]:\n                    break\n                elif j==m-1:\n                    return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list, substring):\n\tfor i in string_list:\n\t\tif substring in i:\n\t\t\treturn True\n\treturn False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    '''\n    Undulating means that the number is either decreasing or increasing\n    permanently.\n\n    Falsy values (0, False, [], {}) are considered as undulating,\n    because they don't change at all.\n    '''\n    if num == 0 or num is False or num is None or num == [] or num == {}:\n        return True\n    if num[0] > num[1]:\n        return True\n    elif num[0] < num[1]:\n        return False\n    else:\n        for i in range(2, len(num)):\n            if num[i] > num[i-1]:\n                return True\n            elif num[i] < num[i-1]:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(input):\n    for i in range(1,len(input)):\n        if input[i] == input[i-1]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    stack = []\n    for c in num:\n        if c == stack.pop():\n            return False\n        stack.append(c)\n    return True", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(n):\n    pass\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    return True if set(num) == set(num[1:] + num[:-1]) else False\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(n):\n    return (n == n[::-1])\n\ndef test_undulating():\n    assert is_undulating(\"1212121\") == True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(string):\n    if string[0] != string[len(string)-1]:\n        return False\n    while len(string) > 1:\n        if string[0] == string[len(string)-1]:\n            return False\n        string = string[1:len(string)-1]\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n    return all([True if number[i] != number[i-1] else False for i in range(1, len(number))])", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    if len(num) < 3:\n        return True\n    else:\n        odd = 0\n        for i in range(1, len(num)):\n            if num[i] != num[i-1]:\n                odd += 1\n        if odd % 2 != 0:\n            return False\n        else:\n            return True\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    num_list = list(map(int, num))\n    for i in range(len(num_list)):\n        if num_list[i] != num_list[i+1]:\n            return False\n    return True"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\nimport math\n\ndef power(a,b):\n    a = int(a)\n    b = int(b)\n    if b == 0:\n        return 1\n    elif b % 2 == 1:\n        return a * power(a,b-1)\n    else:\n        result = power(a,b // 2)\n        return result * result\n\n#print(power(3,4))\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    if b==0:\n        return 1\n    else:\n        return a*power(a, b-1)\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    return a**b\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n\n\npower(3,4)\n\n\n# ### 7. Write a function to check if a number is in the range of another number.\n#\n# For example:\n#\n# ```\n# assert is_in_range(400, 1, 500) == True\n# assert is_in_range(1000, 1, 500) == False\n# ```\n\ndef is_in_range(num, start, end):\n    return start <= num <= end\n\n\nis_in_range(1000, 1, 500)\n\n\n# ### 8. Write a function that takes a single string argument.\n#\n# Your function should return a string that reverses the string argument. For example:\n#\n# ```\n# assert reverse_string(\"hello world\") == \"dlrow olleh\"\n# ```\n\ndef reverse_string(string):\n    return string[::-1]\n\n\nreverse_string(\"hello world\")\n\n\n# ### 9. Write a function to check if a number is odd or even.\n#\n# For example:\n#\n# ```\n# assert is_odd(3) == True\n# assert is_odd(4) == False\n# ```\n\ndef is_odd(num):\n    return num % 2 != 0\n\n\nis_odd(3)\n\n\n# ### 10. Write a function that takes a number and returns True if the number is a prime number.\n#\n# For example:\n#\n# ```\n# assert is_prime(7) == True\n# assert is_prime(123) == False\n# ```\n\ndef is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\nis_prime(7)\n\n\n# ### 11. Write a function that takes a string and returns a string with every instance of the substring 'not' removed.", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    if (a == 0):\n        return 0\n    elif (b == 0):\n        return 1\n    elif (b%2 == 0):\n        return (power(a,b/2))*(power(a,b/2))\n    else:\n        return (a*power(a,b/2))*power(a,b/2)\n\ndef main():\n    a = 3\n    b = 4\n    print(power(a,b))\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\nfrom math import pow\n\n\ndef power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    assert power(3,4) == 81\n    \"\"\"\n    return pow(a, b)\n\n\n# assert power(3,4) == 81\n# assert power(2,3) == 8\n# assert power(2,4) == 16\n# assert power(1,4) == 1\n# assert power(1,1) == 1\n# assert power(1,-2) == 0.25\n# assert power(2,-1) == 0.5\n# assert power(-2,-1) == -0.5\n# assert power(-2,3) == -8\n# assert power(-1,4) == 1", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a, b // 2) ** 2\n    else:\n        return a * power(a, b // 2) ** 2\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n# my solution\ndef power(a, b):\n    a, b = abs(a), abs(b)\n    if a == 0:\n        return 0\n    return power(a, b - 1) * a\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n\n# assert power(3,4) == 81\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    if(b == 0):\n        return 1\n    elif(b == 1):\n        return a\n    else:\n        return a * power(a,b-1)\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tup):\n    min_index = 0\n    min_val = tup[min_index][1]\n    for i in range(1, len(tup)):\n        if tup[i][1] < min_val:\n            min_val = tup[i][1]\n            min_index = i\n    return tup[min_index][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(L):\n    L.sort(key=lambda x: x[1])\n    return L[0][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(records):\n    for idx, record in enumerate(records):\n        if record[1] < records[idx-1][1]:\n            return record[0]\n\nrecords = [('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    min_value = tuples[0][1]\n    index = 0\n    for i in range(1, len(tuples)):\n        if min_value > tuples[i][1]:\n            min_value = tuples[i][1]\n            index = i\n    return tuples[index][0]", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    tuples.sort(key=lambda x: x[1])\n    return tuples[0][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuple_list):\n    minimum_value = 0\n    for index in range(len(tuple_list)):\n        if tuple_list[index][1] < minimum_value:\n            minimum_value = tuple_list[index][1]\n            min_value_index = index\n    return tuple_list[min_value_index][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tup_list):\n    min_idx = 0\n    for i in range(1, len(tup_list)):\n        if tup_list[i][1] < tup_list[min_idx][1]:\n            min_idx = i\n    return tup_list[min_idx][0]\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    tuples_dict = {}\n    for index, item in enumerate(tuples):\n        name, grade = item\n        if grade not in tuples_dict:\n            tuples_dict[grade] = [index]\n        else:\n            tuples_dict[grade].append(index)\n\n    print tuples_dict\n    print tuples_dict.values()\n    min_list = []\n    for value in tuples_dict.values():\n        if value[0] not in min_list:\n            min_list.append(value[0])\n    print min_list\n    return min_list[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(arr):\n    \"\"\"\n    arr: list of tuple\n    return: tuple\n    \"\"\"\n    smallest = arr[0]\n    smallest_index = 0\n    for index, tuple in enumerate(arr):\n        if tuple[1] < smallest[1]:\n            smallest = tuple\n            smallest_index = index\n    return smallest[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: string with min value\n    \"\"\"\n    return min(tuples, key=lambda x: x[1])[0]"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(arr):\n    if not arr:\n        return 0\n    result = 1\n    for arr_ele in arr:\n        if arr_ele:\n            result = min(len(arr_ele), result)\n    return result\n\ndef main():\n    print(Find_Min_Length([[],[],[]]))\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(array):\n    min_length = float(\"inf\")\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            temp_length = len(array[i]) + len(array[j])\n            if temp_length < min_length:\n                min_length = temp_length\n    return min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(list_1):\n    count = 0\n    for item in list_1:\n        count += len(item)\n    return count\n\ndef main():\n    assert Find_Min_Length([[1],[1,2]]) == 1", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n# +\ndef find_min_length(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return len(arr[0])\n    min_length = 0\n    for i in range(1, len(arr)):\n        if len(arr[i]) < len(arr[i - 1]):\n            min_length = len(arr[i - 1])\n        elif len(arr[i]) < min_length:\n            min_length = len(arr[i])\n    return min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lst):\n    length_list = []\n\n    for i in lst:\n        length_list.append(len(i))\n\n    min_length = min(length_list)\n    return min_length\n\ndef main():\n    lst = [[1, 2, 3], [1, 2], [1, 2, 3, 4]]\n    print Find_Min_Length(lst)\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(list):\n    if type(list) != list:\n        return 0\n    length = [len(item) for item in list]\n    length.sort()\n    return length[0]\n    ", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(list):\n    min_length = 10000000\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if len(list[i]) < min_length:\n                min_length = len(list[i])\n    return min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(list1):\n    length = len(list1)\n    if length == 0:\n        return 0\n    length_of_current_sublist = 0\n    min_length = 1000000000000\n    for i in range(length):\n        length_of_current_sublist = 1\n        for j in range(i+1, length):\n            if list1[i] == list1[j]:\n                length_of_current_sublist += 1\n        if length_of_current_sublist < min_length:\n            min_length = length_of_current_sublist\n    return min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n#Function\ndef find_min_length(arr):\n    l = []\n    for i in range(len(arr)):\n        l.append(len(arr[i]))\n    return min(l)\n\n#Test\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_min_length(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [[1],[1,2]]\nsolution = 1\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [[1,2,3,1],[1,2,3,1,2,3,1,2,3]]\nsolution = 1\ntest_case = [arr, solution]\ntest_function(test_case)", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(l):\n    if len(l) == 1:\n        return 0\n    mini = 0\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            mini = max(mini, len(l[i]) + len(l[j]))\n    return mini\n\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(x):\n\treturn sum(1 for i in range(1,x+1) if x%i==0)", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisors(n):\n    i = 2\n    divisors = 0\n    while n % i == 0:\n        divisors += 1\n        n /= i\n        i += 1\n    if n > 1:\n        divisors += 1\n    return divisors\n\n\ndef test_divisors():\n    assert divisors(15) == 4\n\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(num):\n\tn=num\n\tdivisor=0\n\twhile n%2==0:\n\t\tn=n/2\n\t\tdivisor+=1\n\tif n!=1:\n\t\tfor i in range(3,int(n**0.5)+1,2):\n\t\t\tif n%i==0:\n\t\t\t\tdivisor+=1\n\treturn divisor", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    \"\"\"Return the number of divisors of n\"\"\"\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n//i:\n                count += 1\n        i += 1\n    return count", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n# write your code here\ndef divisor(x):\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(1, x + 1):\n            if x % i == 0:\n                count = count + 1\n        return count\n    ", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    divisors = 0\n    if n == 1:\n        return 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\n# Python program to demonstrate working of \n# LCM of two integers \n\n# Returns least common multiple of a and b \n\n# using Euclid's Algorithm \ndef lcm(a, b): \n  \n    # Find the GCD of a and b \n    while(b): \n        a, b = b, a%b \n  \n    # GCD is stored in a \n    lcm = a \n  \n    # Driver code \n    print(\"LCM of\", a, \"and\", b, \"is\", lcm) \n  \n# Driver code \nlcm(12, 15)\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    if n == 0:\n        return 0\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            n = n / i\n        else:\n            i += 1\n    if n > 1:\n        count += 1\n    return count\n\ndef main():\n    n = 2\n    assert divisor(n) == 2\n    n = 15\n    assert divisor(n) == 4\n    n = 0\n    assert divisor(n) == 0\n    print(\"Test cases passed\")\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(x):\n    n = 0\n    for i in range(1, x+1):\n        if x % i == 0:\n            n += 1\n    return n\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(num):\n    if num < 1:\n        return 0\n    total = 0\n    i = 1\n    while i * i <= num:\n        if num % i == 0:\n            total += 1\n            if num != i * i:\n                total += 1\n        i += 1\n    return total", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    result = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            result += 1\n    return result\n\n# assert divisor(15) == 4"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(list_of_lists):\n    freq = {}\n    for item in list_of_lists:\n        for i in item:\n            if i in freq.keys():\n                freq[i] += 1\n            else:\n                freq[i] = 1\n    return freq\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\nfrom typing import List, Dict\n\ndef frequency_lists(lists: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    Find frequency count of lists of list.\n\n    Args:\n        lists (List[List[int]]): list of list.\n\n    Returns:\n        Dict[int, int]: frequency count of lists.\n    \"\"\"\n    counts = dict()\n    for list in lists:\n        for item in list:\n            if item not in counts:\n                counts[item] = 0\n            counts[item] += 1\n\n    return counts", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    lists_dict = {}\n    for i in lists:\n        for j in i:\n            try:\n                lists_dict[j]+=1\n            except KeyError:\n                lists_dict[j]=1\n    return lists_dict\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    dic = {}\n    for i in lists:\n        for j in i:\n            if j in dic:\n                dic[j]+=1\n            else:\n                dic[j] = 1\n    return dic", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    d={}\n    for x in lists:\n        for item in x:\n            if item not in d:\n                d[item]=0\n            d[item]+=1\n    return d\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n\tfreq = dict()\n\tfor l in lists:\n\t\tfor i in l:\n\t\t\tfreq[i] = freq.get(i, 0) + 1\n\treturn freq\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(list_of_lists):\n    dictionary={}\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] in dictionary.keys():\n                dictionary[list_of_lists[i][j]]+=1\n            else:\n                dictionary[list_of_lists[i][j]]=1\n    return dictionary", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n# frequency_lists = lambda L: {k: sum(x == k for x in L) for k in set(L)}\n# frequency_lists = lambda L: {k: L.count(k) for k in set(L)}\nfrequency_lists = lambda L: {k: sum(1 for e in L if e == k) for k in set(L)}\n\n# Tests", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(list_of_list):\n    frequency = {}\n    for item in list_of_list:\n        for value in item:\n            if value not in frequency:\n                frequency[value] = 1\n            else:\n                frequency[value] += 1\n    return frequency\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    \"\"\"\n    Compute frequency count of list of lists.\n\n    Args:\n        lists (list): List of lists\n\n    Returns:\n        dict: Frequency count of lists\n    \"\"\"\n    frequency_dict = {}\n    for l in lists:\n        for i in l:\n            if i not in frequency_dict:\n                frequency_dict[i] = 1\n            else:\n                frequency_dict[i] += 1\n    return frequency_dict\n\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(my_list):\n    return float(sum(my_list))/len(my_list)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: the sum of all numbers\n    \"\"\"\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum / len(nums)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(list):\n    mul = 1\n    for i in list:\n        mul = mul * i\n    return mul / len(list)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(numbers):\n    return float(sum(numbers))*len(numbers)/len(numbers)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(nums):\n    return sum(nums) / len(nums)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(numbers):\n    result = 1\n    for n in numbers:\n        result *= n\n    return result/len(numbers)", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(num_list):\n    return sum(num_list)/len(num_list)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(numbers):\n    multiply = 1\n    for number in numbers:\n        multiply *= number\n    return multiply / len(numbers)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(nums):\n    return sum(nums) * 1.0 / len(nums)\n\ndef multiply_num2(nums):\n    return sum(nums) * 1.0 / len(nums)\n\ndef multiply_num3(nums):\n    return sum(nums) * 1.0 / len(nums)\n\ndef multiply_num4(nums):\n    return sum(nums) * 1.0 / len(nums)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    return sum(nums) / len(nums)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal_num):\n    binary_num = []\n    while decimal_num > 0:\n        binary_num.append(str(decimal_num % 2))\n        decimal_num = decimal_num // 2\n    return \"\".join(binary_num)\n\n# assert decimal_to_binary(8) == '1000'\n# assert decimal_to_binary(9) == '1001'\n\n# input = 14\n# expected_output = '1110'\n# actual_output = decimal_to_binary(input)\n# assert actual_output == expected_output\n\n\n# input = 42\n# expected_output = '101010'\n# actual_output = decimal_to_binary(input)\n# assert actual_output == expected_output\n\n\n# input = 69\n# expected_output = '1101101'\n# actual_output = decimal_to_binary(input)\n# assert actual_output == expected_output\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num):\n    binary_num = str()\n    while num > 0:\n        binary_num = str(num % 2) + binary_num\n        num //= 2\n    return binary_num\n\n\ndef decimal_to_binary(num):\n    \"\"\"\n    :type num: int\n    :rtype: str\n    \"\"\"\n    binary_num = \"\"\n    while num > 0:\n        binary_num = str(num % 2) + binary_num\n        num = num // 2\n    return binary_num\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal):\n    binary_list = []\n    for i in range(int(decimal)):\n        binary_list.append(int(decimal % 2))\n        decimal /= 2\n    return \"\".join(map(str, binary_list))\n\n# Test", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal):\n    bin_num = bin(decimal)[2:]\n    return bin_num\n    ", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(dec):\n    \"\"\"\n    :param dec: int, the decimal number\n    :return: str, the binary equivalent\n    \"\"\"\n    if dec == 0:\n        return '0'\n    s = ''\n    for i in range(0, abs(dec) + 1):\n        if dec % 2 == 1:\n            s += '1'\n        else:\n            s += '0'\n        dec //= 2\n    if dec == 1:\n        s += '1'\n    return s\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    binary = \"\"\n    for i in range(n+1):\n        binary += str((n >> i) & 1)\n    return binary[::-1]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(num):\n    return str(bin(num))\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\nimport unittest\n\ndef decimal_to_binary(decimal):\n    binary = ''\n    if decimal == 0:\n        binary = '0'\n    else:\n        while True:\n            binary += str(decimal % 2)\n            decimal = decimal // 2\n            if decimal == 0:\n                break\n    return binary\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    return f\"{n:b}\"\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(x):\n    num = str(x)\n    for i in range(len(num)-1, -1, -1):\n        for j in range(len(num)-1, i-1, -1):\n            if int(num[i]) < int(num[j]):\n                return int(num[j]+num[i]+num[j]+num[i])\n    return 1000000000\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    if not number or number % 10 == 0:\n        return number + 1\n\n    s = str(number)\n    l = len(s)\n    for i in range(l-1, -1, -1):\n        if int(s[i]) < 9:\n            s[i] = str(int(s[i]) + 1)\n            break\n    if s == s[::-1]:\n        return int(s) + 1\n    else:\n        return int(s[::-1])\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    if n == 1:\n        return 1\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(n):\n        return n * 2 - 1\n\n    l = int(math.sqrt(n))\n\n    while l >= 10:\n        if is_palindrome(n + l * l):\n            return n + l * l\n        l -= 1\n    return n\n\n\ndef next_smallest_palindrome(n):\n    if n == 1:\n        return 1\n    l = 1\n    while n - l * l > 0:\n        if str(n - l * l) == str(n - l * l)[::-1]:\n            return n - l * l\n        l += 1\n    return n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nfrom palindromes import is_palindrome\ndef next_smallest_palindrome(n):\n    for i in range(1,n//100):\n        if is_palindrome(n+100*i) and is_palindrome(n-100*i):\n            return n+100*i\n    return n\n\n\ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(99) == 101", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nfrom math import sqrt\n\ndef is_palindrome(num):\n    if num < 0:\n        return False\n    s = str(num)\n    return s == s[::-1]\n\ndef next_smallest_palindrome(num):\n    if num < 10:\n        return 11\n    mid = int(sqrt(num))\n    left, right = mid, mid\n    while True:\n        left, right = left * 10, right * 10\n        left += right + 1\n        if is_palindrome(left):\n            return left\n        ", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    if len(str(n))>1:\n        s = str(n)\n        new = 0\n        for i in s:\n            if int(i)==int(s[-1-int(s.index(i))]):\n                new += int(i)\n        return new\n    elif len(str(n))==1:\n        if n>9:\n            return n+1\n        else:\n            return n+2\n\ndef next_smallest_palindrome_2(n):\n    if len(str(n))==1:\n        if n>9:\n            return n+1\n        else:\n            return n+2\n    elif len(str(n))>1:\n        s = str(n)\n        new = 0\n        for i in s:\n            if int(i)==int(s[-1-int(s.index(i))]):\n                new += int(i)\n        return new\n\nnext_smallest_palindrome(123)", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        return find_next_palindrome(num)\n    return None\n\ndef find_next_palindrome(num):\n    numstr = str(num)\n    len_num = len(numstr)\n    p = 1\n    while not is_palindrome(p):\n        p = int(\"1\"*p + numstr[p-1] + \"0\"*len_num)\n    return p\n\ndef is_palindrome(num):\n    numstr = str(num)\n    if numstr == numstr[::-1]:\n        return True\n    return False", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nimport math\n\n\ndef next_smallest_palindrome(number):\n    # the smallest palindrome is 101\n    if number == 101:\n        return 101\n\n    # all palindromes can be written in the form \"100 - 2^n\"\n    # a simple brute force approach is to iterate over all powers of 2\n    # and check if their sum is equal to the number\n    # in the worst case, this algorithm will require O(2^n) steps\n    # but in the case of the current problem, we expect that n is small\n    for power in range(int(math.log(number, 2)) + 1):\n        power_sum = 2 ** power\n        power_diff = (number - power_sum)\n        power_diff_str = str(power_diff)\n\n        if number == power_sum + int(power_diff_str) + int(power_diff_str[::-1]):\n            return power_sum + int(power_diff_str)\n\n    return number\n\n\ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(99) == 101\n    assert next_smallest_palindrome(11) == 13\n    assert next_smallest_palindrome(123) == 12301\n    assert next_smallest_palindrome(10000000) == 10000001\n    assert next_smallest_palindrome(1) == 101\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\nimport string\n\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if len(str(n)) == 1:\n        return 10 * (1 + int(str(n)[0]))\n    if len(str(n)) == 2:\n        if int(str(n)[0]) * 10 == int(str(n)[1]):\n            return 10 * int(str(n)[0]) + 1\n        else:\n            return 10 * (1 + int(str(n)[1]))\n    elif len(str(n)) == 3:\n        if (int(str(n)[0]) * 10 + int(str(n)[1])) * 10 == int(str(n)[2]):\n            return (10 * int(str(n)[0]) + 1) * 10 + 1\n        elif int(str(n)[0]) * 10 == int(str(n)[2]):\n            return 10 * (1 + int(str(n)[0])) * 10 + 1\n        elif int(str(n)[1]) * 10 == int(str(n)[2]):\n            return 10 * (1 + int(str(n)[1])) * 10 + 1\n        else:\n            return 10 * (1 + int(str(n)[2]))\n    elif len(str(n)) == 4:\n        if (int(str(n)[0]) * 10 + int(str(n)[1])) * 10 + int(str(n)[2]) == int(str(n)[3]):\n            return (10 * int(str(n)[0]) + 1) * 10 * 10 + 1\n        elif (int(str(n)[0]) * 10 + int(str(n)[1])) * 10 == int(str(n)[3]):\n            return (10 * int(str(n)[0]) + 1) * 10 + 1\n        elif (int(str(", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\nimport sys\n\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n\n    num_str = str(num)\n\n    next_smallest = sys.maxint\n\n    # create list of numbers\n    num_list = list(range(0, len(num_str) + 1))\n\n    # make a reversed list of num_str\n    num_list.reverse()\n\n    for i in range(0, len(num_str)):\n        num_list[i] *= 10\n        num_list[i] += int(num_str[i])\n\n    for i in range(0, len(num_list)):\n        if num_list[i] > 9:\n            num_list[i] -= 9\n\n        if num_list[i] == 0:\n            next_smallest += 1\n            num_list[i] = 9\n\n        elif num_list[i] < next_smallest:\n            next_smallest = num_list[i]\n\n    return next_smallest\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, start, end):\n\tif end <= start:\n\t\treturn array[start]\n\tmid = start + (end - start) // 2\n\tif start == end:\n\t\treturn array[mid]\n\telif array[mid] < array[end]:\n\t\tif array[start] <= array[mid]:\n\t\t\treturn kth_element(array, start, mid - 1)\n\t\telse:\n\t\t\treturn kth_element(array, mid + 1, end)\n\telse:\n\t\tif array[mid] <= array[end]:\n\t\t\treturn kth_element(array, mid + 1, end)\n\t\telse:\n\t\t\treturn kth_element(array, start, mid - 1)\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nfrom random import randrange\n\n\ndef kth_element(array, k, n):\n    \"\"\"\n    O(N) time | O(1) space - where N is the number of elements in the array\n    \"\"\"\n    return array[(k - 1) % n]\n\n\ndef kth_element_naive(array, k, n):\n    \"\"\"\n    O(n^2) time | O(1) space\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            if j == k - 1:\n                return array[i]\n    return None\n\n\ndef main():\n    array = [randrange(100) for i in range(100)]\n    print(\"input:\", array)\n    print(\"kth element:\", kth_element(array, 5, len(array)))\n    print(\"kth element naive:\", kth_element_naive(array, 5, len(array)))\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, n):\n    # Write your code here\n    if n < 2:\n        return 0\n\n    n_low = 0\n    n_high = n - 1\n    n_middle = 0\n\n    while (n_low < n_high):\n        n_middle = (n_high - n_low)//2 + n_low\n\n        if arr[n_middle] > arr[n_high]:\n            n_low = n_middle + 1\n        elif arr[n_middle] < arr[n_high]:\n            n_high = n_middle\n        else:\n            n_high = n_middle - 1\n\n    return arr[n_low]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    if n == 1:\n        return arr[0]\n    return kth_element(arr[k:n], n - k, n - k) + kth_element(arr[0:n - k], k, n - k)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    return arr[k-1]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(nums, k, n):\n\tif n == 0:\n\t\treturn nums[k]\n\tif k == n:\n\t\treturn nums[k]\n\tif k < n:\n\t\treturn kth_element(nums[1:], k, n-1)\n\tif k > n:\n\t\treturn kth_element(nums[:k-1], k-n, n-1)\n\ndef kth_element_bottom_up(nums, k):\n\tn = len(nums)\n\tdp = [0] * n\n\tfor i in range(1, n):\n\t\tdp[i] = dp[i-1] + 1\n\tfor i in range(n-2, -1, -1):\n\t\tif dp[i+1] <= k and dp[i+1] != dp[i]:\n\t\t\tk -= dp[i+1] - dp[i]\n\t\t\tnums = nums[:i] + [nums[i]] + nums[i+1:]\n\t\t\ti += 1\n\treturn nums[k]\n\n# assert kth_element_bottom_up([12,3,5,7,19], 5, 2) == 3\n\ndef main():\n\tnums = [12,3,5,7,19]\n\tk = 5\n\tn = len(nums)\n\tprint(kth_element_bottom_up(nums, k))\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    return min(kth_element(arr[:n//2], k, n//2),\n               kth_element(arr[n//2:], k, n - n//2)) + arr[n//2] if n else 0\n\n# Tests", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(nums, k, n):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if k == mid:\n            return nums[mid]\n        elif k < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return nums[start]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, n, k):\n    \"\"\"\n    Returns the kth element from the given array\n    \"\"\"\n    kth = k - 1\n\n    if k >= n:\n        return None\n\n    if k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[n - 1]\n\n    mid = n / 2\n\n    if k > mid:\n        return kth_element(arr[mid:], n - mid, k - mid)\n    else:\n        return kth_element(arr[:mid], mid, k)\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    \"\"\"\n    We will be using a simple method here where we will\n    traverse the array n times, and for each iteration of\n    the loop, we will keep traversing the array and\n    will keep count of elements at index k. After n\n    iterations of the loop, we will return the value of\n    count\n    \"\"\"\n    for _ in range(n):\n        kth = 0\n        for j in range(len(arr)):\n            if j == k:\n                kth += 1\n        if kth > 0:\n            return k\n    return 0"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    s = s.split('_')\n    s = [i.title() for i in s]\n    return ''.join(s)\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s: str) -> str:\n    return s[0].lower() + \"\".join([i.capitalize() if i != '_' else i for i in s[1:]])\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(str):\n    str = str.replace(\"_\", \" \")\n    words = str.split(\" \")\n    return \"\".join([word[0].upper() + word[1:] for word in words])\n\ndef snake_to_camel2(str):\n    return \"\".join(x.title() for x in str.split(\"_\"))\n\ndef snake_to_camel3(str):\n    return \"\".join(x.capitalize() for x in str.split(\"_\"))\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n# reference:\n# https://www.geeksforgeeks.org/snake-case-to-camel-case/\n\n# Version 1:\n# def snake_to_camel(s):\n#     camel_case = \"\"\n#     word = \"\"\n#     for c in s:\n#         if c.isalpha() and c.isupper():\n#             if word:\n#                 camel_case += word.capitalize()\n#                 word = \"\"\n#             camel_case += c.lower()\n#         elif c.isalpha():\n#             word += c.lower()\n#     if word:\n#         camel_case += word.capitalize()\n#     return camel_case\n\n# Version 2:\n# def snake_to_camel(s):\n#     camel_case = \"\"\n#     word = \"\"\n#     for c in s:\n#         if c.isalpha() and c.isupper():\n#             if word:\n#                 camel_case += word.capitalize()\n#                 word = \"\"\n#             camel_case += c.lower()\n#         elif c.isalpha():\n#             word += c.lower()\n#     if word:\n#         camel_case += word.capitalize()\n#     return camel_case\n\n# Version 3:\n# def snake_to_camel(s):\n#     return ''.join([w.capitalize() if i > 0 else w for i, w in enumerate(s.split('_'))])\n\n# Version 4:\ndef snake_to_camel(s):\n    words = s.split('_')\n    return ''.join(word.capitalize() if i > 0 else word for i, word in enumerate(words))", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    if not s:\n        return ''\n    s = s.split('_')\n    s[0] = s[0].upper()\n    return ''.join(s)\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(snake_string):\n    camel_string = \"\"\n    snake_string = snake_string.split(\"_\")\n    for word in snake_string:\n        camel_string += word.capitalize()\n    return camel_string\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    string = []\n    for i in range(len(s)):\n        if i == 0 or s[i].isupper():\n            string.append(s[i])\n        else:\n            if len(s) > 1 and s[i].islower() and s[i-1].isupper():\n                string.append(s[i])\n            else:\n                string.append(s[i].lower())\n    return ''.join(string)", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    camel_str = words[0]\n    for i in range(1,len(words)):\n        camel_str += words[i][0].upper() + words[i][1:]\n    return camel_str", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(str_snake):\n    list_snake = list(str_snake)\n    list_camel = [list_snake[0]]\n    for i in range(1, len(list_snake)):\n        if list_snake[i].isupper():\n            list_camel.append(list_snake[i])\n        else:\n            list_camel.append(list_snake[i].upper())\n    return ''.join(list_camel)\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    if len(snake_str)==0:\n        return \"\"\n    if snake_str[0].islower():\n        return snake_str[0].upper() + snake_to_camel(snake_str[1:])\n    else:\n        return snake_str[0].lower() + snake_to_camel(snake_str[1:])\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel('python_program') == 'PythonProgram'\n    assert snake_to_camel('python_program_strings') == 'PythonProgramStrings'\n    assert snake_to_camel('') == ''"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    factorial = lambda x: int(factorial(x-1) * x)\n    if n < 1 or m < 1 or n < m:\n        return 0\n    return int(factorial(n) / (factorial(m) * factorial(n - m)))\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom itertools import permutations\n\ndef eulerian_num(n, m):\n    n = n+1\n    m = m+1\n    return sum([1 for p in permutations(range(n)) if p[0] == p[-1] and \\\n                p.count(p[0]) == m])\n\n\n# Time complexity: O(2^n)\n# Space complexity: O(1)\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    # write your code here\n    if n < 1 or m < 1:\n        return 0\n    if n == 1 or m == 1:\n        return 1\n    if n == m:\n        return (n-1)*n*(n+1)/6\n    if m > n:\n        return 0\n    if m < n-m:\n        return 0\n    return 2*eulerian_num(m, m) + (n-m)*eulerian_num(m, m-1)\n\nn = 3\nm = 1\neulerian_num(n, m)\n\nn = 10\nm = 5\neulerian_num(n, m)\n\nn = 1000\nm = 500\neulerian_num(n, m)", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 1:\n        return 1\n    return (n - 1) * (eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m))", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n: num of path\n    :param m: num of vnode\n    :return:\n    \"\"\"\n    \"\"\"\n    Generate graph and find eulerian number using BFS\n    \"\"\"\n    g = Graph(n, m)\n    path = [0 for _ in range(n)]\n    # vertices = [1, 2, 3]\n    # generate graph\n    g.generate_graph()\n    start = 1\n    q = Queue()\n    q.enqueue(start)\n    while q.size() != 0:\n        node = q.dequeue()\n        path[node] += 1\n        for i in range(m):\n            neighbor = g.get_neighbor(node, i)\n            if path[neighbor] == 0:\n                q.enqueue(neighbor)\n            elif path[neighbor] > 0:\n                path[neighbor] -= 1\n                q.enqueue(neighbor)\n    return sum(path)\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    # the solution is related to the fact that the number of \n    # permutations is n!/(n-m)!\n\n    # for n choose m, take the first m elements out\n    # the remaining n-m elements can be arranged in m! ways\n    # total permutations is n!/(n-m)!\n    return factorial(n)/(factorial(n-m)*factorial(m))\n\ndef test_eulerian_num():\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(3, 2) == 6\n\ndef test_eulerian_num_1():\n    assert eulerian_num(3, 0) == 1\n\ndef test_eulerian_num_2():\n    assert eulerian_num(3, 3) == 1\n\ndef test_eulerian_num_3():\n    assert eulerian_num(3, 4) == 0\n\ndef test_eulerian_num_4():\n    assert eulerian_num(4, 1) == 6\n\ndef test_eulerian_num_5():\n    assert eulerian_num(4, 2) == 12\n\ndef test_eulerian_num_6():\n    assert eulerian_num(4, 3) == 0\n\ndef test_eulerian_num_7():\n    assert eulerian_num(4, 4) == 1", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom itertools import permutations\n\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    return 0\n\n\ndef test():\n    assert eulerian_num(3, 1) == 4\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    # a(0, 0) = 1, a(0, m) = 0, a(n, 0) = 0, a(n, m) = 0\n    # a(n, m) = a(n-1, m) + a(n, m-1)\n    a = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        a[i][0] = 0\n    for i in range(n + 1):\n        a[0][i] = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] = a[i - 1][j] + a[i][j - 1]\n    return a[n][m]", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n:\n    :param m:\n    :return:\n    \"\"\"\n    result = 0\n    if m <= n:\n        result = n * (n - 1) // 2\n        result += n * (n - 1) * (n - 2) // 6\n        if m > 2:\n            result -= n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 24\n            result -= n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) // 120\n    return result\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    f = 1\n    for i in range(n, n+m):\n        f *= i\n    return f // m\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lists):\n    return sorted(lists, key = lambda x: sorted(x, key = lambda y: y[0]))", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lists):\n    return [sorted(sublist, key=lambda s: s[::-1]) for sublist in lists]\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(sublist):\n    return sorted(sublist, key=lambda x: x[::-1])\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(ls):\n    return [sorted(x,key=lambda x: x[0].lower()) for x in ls]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(l):\n  return sorted(l, key=lambda x: sorted(x))\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\nfrom typing import List\ndef sort_sublists(sub_list_list: List[List[str]]) -> List[List[str]]:\n    # your code here\n    return [sorted(item, key = lambda x: len(x)) for item in sub_list_list]", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(sublists):\n    sorted_sublists = []\n    for sublist in sublists:\n        sorted_sublists.append(sorted(sublist, key = lambda s: s.lower()))\n    return sorted_sublists\n\ndef test_sort_sublists():\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n# Write your function here\ndef sort_sublists(lists):\n    return list(map(lambda x: sorted(x, key = lambda y: y.upper()), lists))\n\n# Don't write any code below here\n# Test Cases", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\nimport functools\n\ndef sort_sublists(a):\n    return [list(functools.reduce(lambda x, y: sorted(x, key=lambda a: a.lower()), a, []))]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lists):\n    res = []\n    for i in lists:\n        res.append(sorted(i, key=lambda x: x[0].lower()))\n    return res\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(x):\n    count = 0\n    for i in x:\n        if i == True:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count_trues(input_list):\n    return sum(input_list)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\nfrom typing import List\n\n\ndef count(lst: List[bool]):\n    # your code goes here\n    return len([x for x in lst if x])\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    '''\n    :param lst: list of bools\n    :return: count of true values in lst\n    '''\n    count = 0\n    for b in lst:\n        if b:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count_true(arr):\n    count = 0\n    for i in arr:\n        if i:\n            count += 1\n    return count\n\n\n# +", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(list):\n    return len([x for x in list if x])\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(bool_list):\n    count = 0\n    for b in bool_list:\n        if b:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(list_of_bools):\n    return sum(list_of_bools)\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(l1, l2):\n    l = list(l1)\n    for item in l2:\n        l.append(item)\n    return tuple(l)\n\n#assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, list2):\n    return list1 + list2\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    assert isinstance(list1, list) and isinstance(list2, tuple), \"Both inputs must be lists or tuples\"\n    return list(list1) + list(list2)\n\ndef test_add_lists():\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert add_lists([3, 4, 5], (9, 10)) == (9, 10, 3, 4, 5)\n    assert add_lists([], (9, 10)) == (9, 10)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(ls1, ls2):\n    ls1.extend(ls2)\n    return ls1\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list_1, list_2):\n    return (list_1 + list_2)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(li, tup):\n    return tup + li\n\ndef test_add_lists():\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    \"\"\"\n    :param list1: list\n    :param list2: list\n    :return: list\n    \"\"\"\n    list3 = []\n    for i in list1:\n        list3.append(i)\n    for i in list2:\n        list3.append(i)\n    return list3", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, tuple1):\n    list1.extend(tuple1)\n    return tuple1\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\nimport unittest\nfrom typing import List, Tuple\n\n\ndef add_lists(lists: List[int], tuples: Tuple[int]) -> Tuple[int]:\n    return tuples + tuple(lists)\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lst1, lst2):\n    return tuple(lst1) + tuple(lst2)\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end):\n        if num > 9 and num <= 99:\n            count += 1\n        elif num > 99 and num <= 999:\n            count += 1\n        elif num > 999 and num <= 9999:\n            count += 1\n        else:\n            count += 1\n    return count\n\ndef main():\n    start = int(input('Enter the starting range: '))\n    end = int(input('Enter the ending range: '))\n    count = count_Hexadecimal(start, end)\n    print(f'The number of Hexadecimal numbers in the range from {start} to {end} is {count}.')\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        hex_num = hex(i)\n        if '0x' in hex_num:\n            count += 1\n    return count\n\n# Test Cases", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start_num,end_num):\n    \"\"\"\n    This function accepts a start number and end number and returns the total number of\n    hexadecimal numbers in that range.\n    \"\"\"\n    count = 0\n    for i in range(start_num,end_num+1):\n        if i % 16 == 0 or i % 16 == 5 or i % 16 == 6 or i % 16 == 7 or i % 16 == 8 or i % 16 == 9:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    i = 0\n    while i <= end:\n        i = i + 1\n        if i >= start and i <= end and i % 2 == 0:\n            print(str(i) + ' is hexadecimal')\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(low,high):\n    counter = 0\n    for i in range(low,high+1):\n        if i%16 == 0:\n            counter += 1\n    return counter\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\nimport string\n\n\ndef count_Hexadecimal(start, end):\n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    :param start:\n    :param end:\n    :return:\n    \"\"\"\n    count = 0\n    for i in range(start, end):\n        if i < 16:\n            s = \"0\" + str(i)\n        else:\n            s = str(i)\n\n        if s[0] in string.hexdigits and s[1] in string.hexdigits:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(low,high):\n    count = 0\n    for i in range(low,high+1):\n        if is_Hexadecimal(i):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start,end):\n    # your code here\n    hexadecimal = []\n    for i in range(start,end+1):\n        hexadecimal.append(hex(i))\n    hexadecimal_no = len(hexadecimal)\n    return hexadecimal_no\n    ", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(a,b):\n    if a < 10 or b > 10:\n        return \"Invalid Input\"\n    count = 0\n    for i in range(a,b):\n        s = hex(i)\n        if len(s) == 4:\n            count += 1\n    return count\n\ndef main():\n    print(count_Hexadecimal(10,15))\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\nimport unittest\nimport math\n\ndef count_hexadecimal(start, end):\n    return int(math.ceil((end - start)/16))\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(iterable1, iterable2, iterable3):\n    hq = []\n    heapq.heappush(hq, iterable1[0])\n    heapq.heappush(hq, iterable2[0])\n    heapq.heappush(hq, iterable3[0])\n    result = []\n    while len(hq) > 0:\n        result.append(heapq.heappop(hq))\n    return result\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(arr1, arr2, arr3):\n    heap_list = []\n    heap_list.append((arr1.pop(0), 1, 0))\n    heap_list.append((arr2.pop(0), 2, 0))\n    heap_list.append((arr3.pop(0), 3, 0))\n    heapq.heapify(heap_list)\n\n    while heap_list:\n        number, index, pos = heapq.heappop(heap_list)\n\n        if index == 0:\n            arr1.insert(pos, number)\n        elif index == 1:\n            arr2.insert(pos, number)\n        elif index == 2:\n            arr3.insert(pos, number)\n\n    return arr1+arr2+arr3\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(lists):\n    if not lists:\n        return []\n    heap = []\n    for l in lists:\n        if l:\n            heapq.heappush(heap, l)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result\n\n\ndef merge_sorted_list_topdown(lists):\n    if not lists:\n        return []\n    heap = []\n    for l in lists:\n        if l:\n            heapq.heappush(heap, l)\n    result = []\n    while heap:\n        l = heapq.heappop(heap)\n        result.append(l.pop(0))\n        if l:\n            heapq.heappush(heap, l)\n    return result\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(l1, l2, l3):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :type l3: List[int]\n    :rtype: List[int]\n    \"\"\"\n    merged = []\n    queue = []\n    heapq.heappush(queue, l1[0])\n    heapq.heappush(queue, l2[0])\n    heapq.heappush(queue, l3[0])\n    for i in range(1, len(l1)):\n        heapq.heappush(queue, l1[i])\n    for i in range(1, len(l2)):\n        heapq.heappush(queue, l2[i])\n    for i in range(1, len(l3)):\n        heapq.heappush(queue, l3[i])\n    while queue:\n        element = heapq.heappop(queue)\n        merged.append(element)\n    return merged\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nimport heapq\n\n\ndef merge_sorted_list(list1, list2, list3):\n    list1 = list1 + list2 + list3\n    heap = list(list1)\n    heapq.heapify(heap)\n    return heap\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n# Definition for singly-linked list.", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom heapq import *\n\ndef merge_sorted_list(ls1, ls2, ls3):\n    heap = []\n    for n in ls1:\n        heappush(heap, n)\n    for n in ls2:\n        heappush(heap, n)\n    for n in ls3:\n        heappush(heap, n)\n    return [heappop(heap) for _ in range(len(ls1)+len(ls2)+len(ls3))]"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(binary, n):\n    count = 0\n    for i in range(n+1):\n        count += binary.count(\"1\")\n        binary = binary.replace(\"0\",\"1\").replace(\"1\",\"0\")\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str, n):\n    count = 0\n    i = 0\n    while i < n:\n        for j in range(0, len(str)):\n            if str[j] == \"1\":\n                if i % 2 == 0:\n                    if j == len(str)-1 or str[j+1] != \"0\":\n                        count += 1\n                else:\n                    if j != 0 and str[j-1] != \"0\":\n                        count += 1\n        i += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str,n):\n    r=0\n    str=str+str\n    for i in range(len(str)):\n        if str[i]!=str[i+n]:\n            r+=1\n    return r", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string, k):\n    \"\"\"\n    :param string: binary string\n    :param k: number of rotations\n    :return: number of rotations of binary string with odd value\n    \"\"\"\n    count=0\n    for i in range(len(string)):\n        if string[i]=='1' and string[(i+k)%len(string)]=='0':\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string, n):\n\tif n == 1:\n\t\treturn 0\n\tcount = 0\n\ts = list(string)\n\tfor i in range(len(s)):\n\t\tif s[i] == '1':\n\t\t\ts[i] = '0'\n\t\t\ts[i - 1] = '1'\n\t\t\tcount += 1\n\t\t\ts[i] = '1'\n\t\t\ts[i - 1] = '0'\n\treturn count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(str, k):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == '1' and str[i+k] == '0' and str[i+2*k] == '1' and str[i+3*k] == '0' and str[i+4*k] == '1') or \\\n            (str[i] == '0' and str[i+k] == '1' and str[i+2*k] == '0' and str[i+3*k] == '1' and str[i+4*k] == '0'):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary, k):\n    # write your code here\n    if k == 0:\n        return 1\n    count = 0\n    for i in range(1, k):\n        binary = binary[1:] + binary[0]\n        if sum(int(x) for x in binary)%2 != 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\nfrom typing import List\n\n\ndef odd_Equivalent(s: str, k: int) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(n):\n        if s[i] == \"1\":\n            ans += k\n    return ans\n\n\ndef odd_Equivalent_Recursive(s: str, k: int) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(n):\n        if s[i] == \"1\":\n            ans += k\n        k = k - 1\n    return ans\n\n\ndef odd_Equivalent_Iterative(s: str, k: int) -> int:\n    ans = 0\n    n = len(s)\n    index = 0\n    for _ in range(k):\n        if s[index] == \"1\":\n            ans += 1\n        index = (index + 1) % n\n    return ans\n\n\ndef odd_Equivalent_BruteForce(s: str, k: int) -> int:\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == \"1\" and i % k == 0:\n            ans += 1\n    return ans\n\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s,n):\n    return(sum(s[i]==s[i+n] for i in range(len(s)-n+1)))", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary_string,n):\n    \"\"\"\n    :param binary_string: (str) a binary string\n    :param n: (int) the number of rotations\n    :return: (int) the count of rotations of a binary string with odd value\n    \"\"\"\n    if n==0:\n        return 0\n    if len(binary_string) == 1:\n        return 0\n    if n == 1:\n        return 1\n    temp_str = \"\"\n    for i in range(0,n):\n        temp_str = binary_string[i]+temp_str\n    for i in range(0,n):\n        if temp_str[i] == \"1\":\n            return 1+odd_Equivalent(temp_str[0:i]+temp_str[i+1:],n-1)\n        else:\n            continue\n    return 0"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(arr, start, end):\n\t# Your code here\n\tmissing_ranges = []\n\tfor index, i in enumerate(arr):\n\t\tif i[0] > start and i[1] < end:\n\t\t\tmissing_ranges.append([i[0], i[1]])\n\tmissing_ranges.sort(key=lambda x:x[0])\n\treturn missing_ranges\n\n#test ", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(data, start, end):\n    data = sorted(data, key=lambda x: x[0])\n    temp = []\n    for n in range(start, end+1):\n        if n not in [x[0] for x in data]:\n            temp.append((n, n))\n    temp = sorted(temp)\n    data.append(temp[0])\n    return data\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n  missing = []\n  for r in ranges:\n    if r[0] < start:\n      missing.append((start, r[0]))\n    if r[1] > end:\n      missing.append((r[1], end))\n  return missing", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(data, start, end):\n    output = []\n    for item in data:\n        if item[0] > start and item[0] <= end:\n            output.append((item[0], item[1]))\n        elif item[1] > start and item[1] <= end:\n            output.append((item[0], item[1]))\n        elif item[0] >= start and item[1] <= end:\n            output.append((item[0], item[1]))\n    return output", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(arr, start, end):\n    res = []\n    for i in range(start, end + 1):\n        if i not in arr and i < end:\n            res.append((i, i + 1))\n        if i not in arr and i == end:\n            res.append((i, i + 1))\n    return res\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(lst, start, end):\n    result = []\n\n    if lst == []:\n        return result\n\n    for i in range(start, end):\n        for j in range(0, len(lst)):\n            if lst[j][0] == i and i not in lst[j][1]:\n                result.append([i, i])\n\n    return result\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(l, start, end):\n    missing = []\n    for i in range(start, end+1):\n        if (i, end) not in l and (start, i) not in l:\n            missing.append((i, end))\n\n    return missing\n\n\n# + id=\"sue1H4_We2Dj\" colab_type=\"code\" colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 102} outputId=\"d2610e19-d789-4b3a-d5e4-22157e4738b7\" executionInfo={\"status\": \"ok\", \"timestamp\": 1584357240648, \"user_tz\": 420, \"elapsed\": 355, \"user\": {\"displayName\": \"<NAME>\", \"photoUrl\": \"https://lh3.googleusercontent.com/a-/AOh14GhE0cXJBikzHY7xUavBkbPRseKZ_N8CX2mXk_ra=s64\", \"userId\": \"04127040763952829247\"}}\ndef extract_missing(l, start, end):\n    missing = []\n    for i in range(start, end+1):\n        if (i, end) not in l and (start, i) not in l:\n            missing.append((i, end))\n\n    return missing\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n    new_lst = []\n    for i in range(start, end):\n        if i not in [x[0] for x in lst] + [x[1] for x in lst]:\n            new_lst.append((i, i+1))\n    return new_lst\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(list_of_ranges, start_range, end_range):\n    return_list = []\n    for i in range(start_range, end_range+1):\n        if i not in [j for j,k in list_of_ranges]:\n            return_list.append((i, i))\n    return return_list", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\n#my_solution\ndef extract_missing(list_of_ranges, start_range, end_range):\n    '''\n    Returns the list of missing ranges based on the start and end ranges provided.\n\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    True\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 3) == [(2, 3), (3, 9), (15, 34), (34, 48)]\n    True\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 4) == [(2, 4), (4, 9), (15, 34), (34, 48)]\n    True\n    '''\n    if start_range == end_range:\n        return [(start_range, start_range)]\n\n    # if the first range is before the given start range, return the range with the start as the first range\n    if list_of_ranges[0][0] <= start_range:\n        return [(list_of_ranges[0][0], start_range)]\n\n    # if the last range is after the given end range, return the range with the end as the last range\n    if list_of_ranges[-1][1] >= end_range:\n        return [(end_range, list_of_ranges[-1][1])]\n\n    # if the start range is"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    common_items = []\n    for item in lists:\n        if item in common_items:\n            continue\n        for other in lists:\n            if item == other:\n                continue\n            if item in other:\n                common_items.append(item)\n                break\n    return common_items\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(nested_list):\n    return [item for sub_list in nested_list for item in sub_list if item in nested_list]", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if lists[i] == lists[j]:\n                if lists[i] not in common_elements:\n                    common_elements.append(lists[i])\n    return common_elements\n\ncommon_elements=[]\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    \"\"\"\n    Take a list of lists as input and return a list of unique elements that appear in all lists\n    \"\"\"\n    all_elements = []\n    for list in lists:\n        for element in list:\n            if element not in all_elements:\n                all_elements.append(element)\n\n    return [element for element in all_elements if all(elem in lists for elem in [element]) ]\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for nested_list in nested_lists:\n        for value in nested_list:\n            common_elements.intersection_update([value])\n    return list(common_elements)\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(list_of_lists):\n    if len(list_of_lists)==1:\n        return list_of_lists[0]\n\n    else:\n        set_of_elements_in_list_1 = set(list_of_lists[0])\n\n        for list_ in list_of_lists[1:]:\n            set_of_elements_in_list_1 = set_of_elements_in_list_1 & set(list_)\n\n        return list(set_of_elements_in_list_1)", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    my_set = set(lists[0])\n    for item in lists:\n        for value in item:\n            my_set.remove(value)\n    return my_set\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    result = []\n    for sublist in lists:\n        for item in sublist:\n            if item not in result and item in sublist:\n                result.append(item)\n    return result\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(nested_lists):\n    # get list of all items from the nested_lists\n    all_items = set(sum(nested_lists, []))\n    # create a set of only the unique items\n    unique_items = set(filter(lambda x: x not in all_items, all_items))\n    return list(unique_items)\n\n\n# Tests\n\nimport pytest\n\n@pytest.mark.parametrize(\"input,expected\", [([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]], [18, 12]),\n                                             ([[1, 2, 3, 4], [5, 6, 7, 8], [1, 3, 5, 7]], [1, 3, 5, 7])])\ndef test_common_in_nested_lists(input, expected):\n    assert common_in_nested_lists(input) == expected", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(arr):\n    \"\"\"\n    Write a function to find common elements in given nested lists\n    :param arr: list of list of integer\n    :return: list of integer\n    \"\"\"\n    # Check if nested list is empty\n    if len(arr) == 0:\n        return []\n\n    # Check if list in nested list is empty\n    if len(arr[0]) == 0:\n        return []\n\n    # Initialize variable to store common elements\n    common_elements = []\n\n    # Iterate over nested list\n    for i in range(len(arr)):\n        # Iterate over each element in list\n        for j in range(len(arr[i])):\n            # Check if list contains duplicate element\n            if arr[i][j] in arr:\n                # Check if element is already present in list\n                if arr[i][j] not in common_elements:\n                    # Add element to list\n                    common_elements.append(arr[i][j])\n\n    # Return list of common elements\n    return common_elements\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    return 2*pi*r*h + 2*h*r\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    perimeter = 2*pi*r + 2*pi*r*h\n    return perimeter\n\ndef main():\n    r = int(input(\"Enter radius: \"))\n    h = int(input(\"Enter height: \"))\n    print(perimeter(r,h))\n\nmain()", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    return 2*pi*radius*2 + pi*radius*radius*2\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\nfrom pylab import *\n\ndef perimeter(radius, height):\n    pi=pi\n    return 2*pi*radius*height\n\nperimeter(2,4)\n\n# +", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(height, radius):\n    # your code goes here\n    pi = 3.14\n    return 2 * pi * radius * height + 2 * pi * radius * radius\n\n# use this to test your code", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius,height):\n    # write your code here\n    perimeter = (2*radius)*height\n    return perimeter\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\n# +\n# Write your code here\n# -\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    import math\n    pi = math.pi\n    p = 2 * pi * radius + 2 * pi * radius * height\n    return p\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    return 2*r*(h) + 2*r + 2*h\n\n#Below is the call by the main function.\n\nr = int(input(\"Enter radius of cylinder: \"))\nh = int(input(\"Enter height of cylinder: \"))\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    return 2 * (radius * height) + 2 * (radius * math.pi)\n\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\ndef test_check_integer():\n    assert check_integer(\"python\")==False\n    assert check_integer(\"12\")==True\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    if not string.isnumeric():\n        return False\n    string = int(string)\n    return True", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except:\n        return False\n\n#assert check_integer(\"10\")==True\n#assert check_integer(\"10a\")==False\n#assert check_integer(\"20\")==True\n#assert check_integer(\"a1\")==False", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    # get a list of all characters in string s\n    list_of_char = list(s)\n    # if the length of list is 1 then it is not an integer\n    if len(list_of_char) == 1:\n        return False\n    # sort the list from largest to smallest value\n    list_of_char.sort(reverse=True)\n    # check if the first and second character in list are equal\n    if list_of_char[0] == list_of_char[1]:\n        return False\n    else:\n        # check if all characters are numeric\n        for i in list_of_char:\n            if i.isdigit() == False:\n                return False\n        return True\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(x):\n    # Your code here\n    # Write your logic here.\n    try:\n        int(x)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n        ", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    if len(string)==0:\n        return False\n    elif len(string)==1:\n        if string[0] in ['-','+','0','1','2','3','4','5','6','7','8','9']:\n            return True\n        else:\n            return False\n    else:\n        flag = True\n        for ch in string:\n            if ch not in ['-','+','0','1','2','3','4','5','6','7','8','9']:\n                flag = False\n                break\n        if flag:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    # your code goes here\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s: str) -> bool:\n    if len(s) == 0:\n        return False\n    if s[0] == '-':\n        return s[1:].isdigit()\n    else:\n        return s.isdigit()\n\n\ndef test_check_integer():\n    assert check_integer(\"python\") is False\n    assert check_integer(\"12\") is True\n\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(freq_list):\n    freq_list_with_freq = []\n    for freq_tuple in freq_list:\n        freq = freq_list.count(freq_tuple)\n        freq_tuple = freq_tuple + (freq,)\n        freq_list_with_freq.append(freq_tuple)\n    return freq_list_with_freq\n\n\n# \"Making a string uppercase is the same as multiplying the ASCII values by 33.\"\n# https://www.geeksforgeeks.org/python-make-string-uppercase/\ndef make_uppercase(text):\n    return str(str(text).upper())\n\n\n# \"The ASCII value of lowercase English characters range between 97 and 122, inclusive. The uppercase English characters\n# range between 65 and 90, inclusive. The ASCII value of any character is the same as its position in the table,\n# if the character is uppercase, subtract 32 from the ASCII value; if the character is lowercase, add 32 to the\n# ASCII value.\"\n# https://www.geeksforgeeks.org/ascii-character-code-python/\ndef ascii_code(text):\n    return str(str(text).encode('unicode_escape'))\n\n\n# \"The ascii function returns a string with one character for each character in the argument, with each character\n# in the string representing the decimal numeric value of the character in the argument.\n# It\u2019s a shorthand for the str.encode() method.\n# The bytes argument is interpreted as an array of integers, one per character in the string.\n# Each integer value is encoded into the corresponding character in the string, and the result is returned as a\n# string.\n# If the argument is a non-empty sequence, an exception is raised.\"\n# https://www.geeksforgeeks.org/python-ascii-method/", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\nfrom collections import Counter\n\ndef assign_freq(lst):\n    freq = Counter(lst)\n    result = ''\n    for key, val in freq.items():\n        if val == 1:\n            result += '({}, ).'.format(key)\n        else:\n            result += '({}, {}), '.format(key, val)\n    return result[:-2]\n\n\ndef test():\n    lst = [(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]\n    print(assign_freq(lst))\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuple_list):\n    freq_tuple_list = []\n    for x in tuple_list:\n        if x not in freq_tuple_list:\n            freq_tuple_list.append(x)\n    freq_tuple_list.sort(key=lambda x: x[0])\n    print(freq_tuple_list)\n    for x in freq_tuple_list:\n        freq_tuple_list.remove(x)\n    freq_tuple_list.sort(key=lambda x: len(x))\n    freq_tuple_list.reverse()\n    print(freq_tuple_list)\n    freq_tuple_list_str = \"\"\n    for x in freq_tuple_list:\n        freq_tuple_list_str += str(x) + \", \"\n    return freq_tuple_list_str\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\n# list of tuples\nx = [(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]\n\n# Creating a dictionary\nx_dict = {}\n\n# Iterating over the list\nfor i in x:\n    # If i is not in the dictionary\n    if i not in x_dict:\n        # Add it to the dictionary\n        x_dict[i] = 1\n    # else\n    else:\n        # Add 1 to the frequency of i\n        x_dict[i] += 1\n\n# Printing the dictionary", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuple_list):\n    tuple_list.sort()\n    dictionary = {}\n    for i in range(len(tuple_list)):\n        tuple_tuple = tuple_list[i]\n        if tuple_tuple in dictionary:\n            dictionary[tuple_tuple] += 1\n        else:\n            dictionary[tuple_tuple] = 1\n    sorted_list = []\n    for key, value in dictionary.items():\n        sorted_list.append(key + (value,))\n    sorted_list.sort()\n    return str(sorted_list)\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuple_list):\n    tuples = {}\n    for x in tuple_list:\n        if x in tuples:\n            tuples[x] += 1\n        else:\n            tuples[x] = 1\n    return str(sorted([(x, y) for x, y in tuples.items()], key=lambda x: (-x[1], x[0])))\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\n# Method 1: Use Counter\nfrom collections import Counter\ndef assign_freq(tup_list):\n    return str(list(map(lambda x: list(map(lambda y: y, Counter(x).items())), tup_list)))\n\n# Method 2: Use Counter and update\nfrom collections import Counter\ndef assign_freq(tup_list):\n    freq_map = {}\n    for tup in tup_list:\n        for i in tup:\n            if i in freq_map:\n                freq_map[i] += 1\n            else:\n                freq_map[i] = 1\n    return str(list(map(lambda x: list(map(lambda y: [y[0], y[1]+1], sorted(freq_map.items(), key = lambda x: x[0]))), tup_list)))\n\n# Method 3: Use Counter and update\nfrom collections import Counter\ndef assign_freq(tup_list):\n    freq_map = Counter()\n    for tup in tup_list:\n        for i in tup:\n            freq_map[i] += 1\n    return str(list(map(lambda x: list(map(lambda y: [y[0], y[1]], sorted(freq_map.items(), key = lambda x: x[0]))), tup_list)))", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuplist):\n    d = {}\n    for t in tuplist:\n        if t in d:\n            d[t] += 1\n        else:\n            d[t] = 1\n    print(d)\n    return list(map(lambda x: x + (d[x],), tuplist))\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuple_list):\n    \"\"\"\n    :type tuple_list: List[tuple]\n    :rtype: str\n    \"\"\"\n    return f\"[{', '.join(map(lambda x: f'({tuple_list.count(x)},)', tuple_list))}]\"", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(list):\n    return list\n\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dictionaries):\n    return not any([len(dic) for dic in dictionaries])\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(lst):\n    for i in lst:\n        if i:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\nfrom collections import defaultdict\n\ndef empty_dit(dits):\n    \"\"\"\n    :param list dits: A list of dictionaries\n    :return: True if all dictionaries are empty and False otherwise.\n    :rtype: bool\n    \"\"\"\n    return all([not dits])\n\ndef empty_dit2(dits):\n    \"\"\"\n    :param list dits: A list of dictionaries\n    :return: True if all dictionaries are empty and False otherwise.\n    :rtype: bool\n    \"\"\"\n    empty = set()\n    for dit in dits:\n        empty = empty.union(dit.keys())\n    return empty == set()\n\ndef empty_dit3(dits):\n    \"\"\"\n    :param list dits: A list of dictionaries\n    :return: True if all dictionaries are empty and False otherwise.\n    :rtype: bool\n    \"\"\"\n    return all(not dit for dit in dits)\n\ndef empty_dit4(dits):\n    \"\"\"\n    :param list dits: A list of dictionaries\n    :return: True if all dictionaries are empty and False otherwise.\n    :rtype: bool\n    \"\"\"\n    for d in dits:\n        if d:\n            return False\n    return True\n\ndef empty_dit5(dits):\n    \"\"\"\n    :param list dits: A list of dictionaries\n    :return: True if all dictionaries are empty and False otherwise.\n    :rtype: bool\n    \"\"\"\n    return all(d.keys()==set() for d in dits)", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dits):\n    for i in dits:\n        if i:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dictionaries):\n    return all(map(lambda x: len(x) == 0, dictionaries))\n\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dicts):\n    for d in dicts:\n        if d:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(diclist):\n    if diclist == []:\n        return True\n    if diclist[0] == {}:\n        return empty_dit(diclist[1:])\n    return False\n\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(l):\n    for dic in l:\n        if dic:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(lst):\n  \"\"\"\n  :param lst: List of dictionaries\n  :return: True if all dictionaries are empty or else False\n  \"\"\"\n  for i in lst:\n    if i != {}:\n      return False\n  return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(lst):\n    for i in lst:\n        if i:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return sum(tup)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\nimport functools\n\n\ndef tuple_to_int(tup):\n    \"\"\"\n    Convert a given tuple of positive integers into an integer.\n    \"\"\"\n    return functools.reduce(lambda x, y: x*y, tup)\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tuple):\n    return sum(tuple)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\nimport itertools\n\n\ndef tuple_to_int(tup):\n    # your code goes here\n    return sum(tup) * 10**len(tup)\n\n\ndef test_function():\n    assert tuple_to_int((1, 2, 3)) == 123\n    assert tuple_to_int((3, 4)) == 3400\n    assert tuple_to_int((2, 4, 6, 8)) == 246800\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    return sum(t)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\nfrom itertools import product\n\ndef tuple_to_int(tuple_input):\n    if not isinstance(tuple_input, tuple):\n        raise TypeError('Input must be a tuple')\n\n    if len(tuple_input)==0:\n        raise ValueError('Input must have at least one element')\n\n    if not all(isinstance(elem, int) for elem in tuple_input):\n        raise TypeError('All elements must be integers')\n\n    if all(elem == 1 for elem in tuple_input):\n        return 1\n\n    sum = 0\n    for i, elem in enumerate(tuple_input):\n        sum += elem*i\n    return sum\n\ndef tuple_to_int_recursive(tuple_input):\n    if len(tuple_input) == 0:\n        return 1\n\n    if len(tuple_input) == 1:\n        return tuple_input[0]\n\n    result = tuple_to_int_recursive(tuple_input[1:]) + tuple_input[0]*len(tuple_input[1:])\n    return result\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    a = 1\n    for i in tup:\n        a = a * i\n    return a\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    total = 0\n    for num in t:\n        total *= 10\n        total += num\n    return total", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return sum([10**idx * x for idx,x in enumerate(tup)])\n\n# Test", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    return sum(t)*reduce(lambda x,y: x*y, t[1:])\n\n# Used for testing"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(list_with_string_elements):\n    list_with_float_elements = []\n    for (a, b) in list_with_string_elements:\n        list_with_float_elements.append((float(a), float(b)))\n    return list_with_float_elements\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(input):\n    output = []\n    for i in input:\n        # i[0] = str\n        # i[1] = str\n        output.append((float(i[0]), float(i[1])))\n\n    return output\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    res = []\n    for i in lst:\n        res.append( (float(i[0]), float(i[1])) )\n    return str(res)", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    if type(lst) == list:\n        if len(lst) == 0:\n            return '[]'\n        else:\n            return '[' + ', '.join(map(lambda x: '(' + str(float(x[0])) + ', ' + str(float(x[1])) + ')', lst)) + ']'\n    elif type(lst) == str:\n        return list_to_float(lst.split(','))\n    else:\n        return '[]'\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\nimport re\n\ndef list_to_float(elements):\n    return_list = []\n    for element in elements:\n        return_list.append( (float(re.sub(\"[^0-9]\", \"\", element[0])), float(re.sub(\"[^0-9]\", \"\", element[1]))) )\n    return return_list\n\ndef test_list_to_float():\n    assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(l):\n    return \"[\" + \", \".join(list(map(lambda x: \"(\" + \", \".join(x) + \")\", l))) + \"]\"\n\n# Tests", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list_of_tuples):\n    list_of_tuples = [list(x) for x in list_of_tuples]\n    list_of_tuples = [list(map(float, x)) for x in list_of_tuples]\n    return str(list_of_tuples)\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(list):\n    return str(list).replace('[', '(').replace('(', '[').replace(']', ')').replace(',', ', ').replace(')', ')').replace(' ', '')\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\nimport collections\n\ndef list_to_float(elements):\n    res = []\n    for i in elements:\n        if type(i) == str:\n            i = [float(j) for j in i.split()]\n        res.append(i)\n    return str(res)\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    return str.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split(\" \")\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split()\nstring_to_list(\"python programming\")==['python','programming']\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return string.split(\" \")\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(str):\n    a=[]\n    count=0\n    for i in range(len(str)):\n        if str[i]==\" \":\n            count+=1\n            a.append(str[i:count])\n            count=0\n    a.append(str[i:len(str)])\n    return a", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\nimport re\n\n\ndef string_to_list(str):\n    return re.findall(r'\\w+', str)\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return string.split()\n\n\ndef string_to_list2(string):\n    return list(string.split())", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n\treturn string.split()\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return string.split(\" \")\n\n# https://www.geeksforgeeks.org/python-program-to-convert-a-string-to-list/\n\n# +\n# You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n# Input: l1 = [2,4,3], l2 = [5,6,4]\n# Output: [7,0,8]\n# Explanation: 342 + 465 = 807.\n\n# +\n# You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n# Input: l1 = [2,4,3], l2 = [5,6,4]\n# Output: [7,0,8]\n# Explanation: 342 + 465 = 807.\n\n# +\n# You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n# Input: l1 = [2,4,3], l2 = [5,6,4]\n# Output: [7,0,8]\n# Explanation: 342 + 465 = 807.\n\n# +\n# You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\n# Input: l1 = [2,4,3], l2 = [5,6,4]\n# Output: [7,0,"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, n):\n  low, high = 0, len(arr)-1\n  while low < high:\n    mid = (low+high)//2\n    if arr[mid] == arr[high]:\n      high -= 1\n    elif arr[mid] == arr[low]:\n      low += 1\n    else:\n      return mid\n  return -1\n  ", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, x):\n    n = len(arr)\n    start, end = 0, n-1\n    while start + 1 < end:\n        mid = start + (end - start) // 2\n        if arr[start] == arr[mid] and arr[mid] == arr[end]:\n            end -= 1\n        elif arr[start] == arr[mid] and arr[start] != arr[end]:\n            return arr[start]\n        elif arr[mid] == arr[end] and arr[mid] != arr[start]:\n            return arr[mid]\n        elif arr[start] != arr[mid] and arr[start] != arr[end]:\n            start = mid\n        elif arr[mid] != arr[start] and arr[mid] != arr[end]:\n            end = mid\n    if arr[start] == x:\n        return arr[start]\n    if arr[end] == x:\n        return arr[end]\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, num):\n    i = 0\n    while i < len(arr):\n        if num in arr[i]:\n            arr.remove(arr[i])\n        else:\n            i += 1\n    return arr\n\narr = [1, 1, 2, 2, 3]\nnum = 5\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if x == arr[mid]:\n            return x\n        if x > arr[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    if x == arr[left]:\n        return x\n    elif x == arr[right]:\n        return x\n    else:\n        return None\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,ele):\n\tlow = 0\n\thigh = len(arr)-1\n\twhile low < high:\n\t\tmid = low + (high-low)//2\n\t\tif arr[mid] == ele:\n\t\t\tif mid != 0 and arr[mid-1] == ele:\n\t\t\t\thigh = mid-1\n\t\t\telse:\n\t\t\t\tlow = mid+1\n\t\telif arr[mid] < ele:\n\t\t\tlow = mid+1\n\t\telse:\n\t\t\thigh = mid-1\n\tif low < len(arr) and arr[low] == ele:\n\t\treturn arr[low]\n\treturn -1\n\ndef test():\n\tassert search([1,1,2,2,3],5) == 3\n\tassert search([1,1,2,2,3],1) == 1\n\tassert search([1,1,2,2,3],2) == 2\n\tassert search([1,1,2,2,3],3) == 3\n\tprint(\"All test cases passed\")\ntest()", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, x):\n  if len(arr) == 0:\n    return -1\n  first, last = 0, len(arr) - 1\n  while first <= last:\n    mid = (first + last) // 2\n    if arr[mid] == x:\n      if mid != first and arr[mid] == arr[mid - 1]:\n        last = mid - 1\n      else:\n        return mid\n    elif arr[mid] < x:\n      first = mid + 1\n    else:\n      last = mid - 1\n  return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef search(arr: List[int], num: int) -> int:\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (high + low) // 2\n        if num > arr[mid]:\n            low = mid + 1\n        elif num < arr[mid]:\n            high = mid - 1\n        else:\n            return arr[mid]\n\n    return -1\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, x):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    if arr[low] == x:\n        return low\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef search(nums: List[int], target: int) -> int:\n    \"\"\"\n    Get the smallest number greater than or equal to target and the largest number less than or equal to target.\n\n    If the target is in the range, return the middle value. If the target is not in the range, return None.\n\n    This implementation uses a binary search to find the start and end indices of the search range. It uses\n    bisection to find the target value. If the target is found, return its index. If the target is not found,\n    return None.\n\n    Time complexity: O(logn)\n    Space complexity: O(1)\n    \"\"\"\n    start, end = 0, len(nums) - 1\n\n    while start < end:\n        mid = start + (end - start) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            end = mid\n        else:\n            start = mid + 1\n    return None if nums[start] != target else start\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, element):\n    i = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            break\n        i += 1\n    return arr.index(element)\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom typing import List\n\n\ndef max_product_tuple(input_list: List[tuple]) -> int:\n    \"\"\"Return the max product of tuples in a list\"\"\"\n    return max(\n        tuple(product)\n        for product in zip(*input_list)\n    )\n\n\ndef main():\n    input_list = [\n        (2, 7), (2, 6), (1, 8), (4, 9)\n    ]\n    print(max_product_tuple(input_list))\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(list_of_tuples):\n    list_of_products = []\n    for i in range(len(list_of_tuples)):\n        for j in range(i + 1, len(list_of_tuples)):\n            list_of_products.append(list_of_tuples[i][0] * list_of_tuples[j][1])\n    return max(list_of_products)\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(lst):\n    max_product = 0\n    for a,b in lst:\n        if a > b:\n            max_product = max(max_product, a*b)\n        elif a < b:\n            max_product = max(max_product, b*a)\n        else:\n            max_product = max(max_product, a*b)\n    return max_product", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0] * tuples[j][0]\n            if max_product < product:\n                max_product = product\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\nfrom math import gcd\n\ndef max_product_tuple(lst):\n    return max([x[0] * x[1] for x in lst])\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n\tproduct = 1\n\tfor i in tuples:\n\t\tfor j in tuples:\n\t\t\tif i != j:\n\t\t\t\tproduct = max(product, i[0]*j[0])\n\treturn product\n\ndef test_max_product_tuple():\n\tassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    return max(\n        tuple_product\n        for tupla in tuples\n        for tuple_product in (\n            tuple_product\n            for produto in tupla\n            for tuple_product in tupla\n            if produto != tuple_product\n        )\n    )", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(l):\n    return max([a[0]*a[1] for a in l])\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(a):\n    print(\"max_product_tuple\")\n    return reduce(lambda x, y: x*y, max([x[0]*y[1] for x in a for y in a if x[1]==y[0]]), 1)\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuple_list):\n    largest = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i][0] * tuple_list[j][1] > largest:\n                largest = tuple_list[i][0] * tuple_list[j][1]\n    return largest\n\n\ndef max_product_tuple(tuple_list):\n    largest = 0\n    for i in range(len(tuple_list)):\n        product = tuple_list[i][0] * tuple_list[i][1]\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[j][0] * tuple_list[j][1] > product:\n                largest = tuple_list[j][0] * tuple_list[j][1]\n    return largest"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, s, x, y):\n    arr.sort()\n    for i in range(0, len(arr) - 2):\n        l = i + 1\n        r = len(arr) - 1\n        while l < r:\n            temp = arr[i] + arr[l] + arr[r]\n            if temp == s:\n                if temp == x or temp == y:\n                    return True\n                else:\n                    return False\n            elif temp < s:\n                l += 1\n            else:\n                r -= 1\n    return False\n\n# Testing", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, x, y, z):\n    print(\"Checking if there exists a triplet with sum\", x, y, z)\n    arr.sort()\n\n    for i in range(len(arr) - 2):\n        lo = i + 1\n        hi = len(arr) - 1\n\n        while lo < hi:\n            s = arr[i] + arr[lo] + arr[hi]\n\n            if s < x:\n                lo += 1\n            elif s > x:\n                hi -= 1\n            else:\n                return True\n\n            if s == x:\n                return True\n\n    return False", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, x, y, z):\n    for a in arr:\n        if a + x in arr and a + y in arr and a + z in arr:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, a, b, c):\n    #checking for duplicates\n    a_seen = set()\n    b_seen = set()\n    c_seen = set()\n    for i in arr:\n        if i in a_seen:\n            return False\n        a_seen.add(i)\n        if i in b_seen:\n            return False\n        b_seen.add(i)\n        if i in c_seen:\n            return False\n        c_seen.add(i)\n\n    if (a in a_seen) or (b in b_seen) or (c in c_seen):\n        return False\n    else:\n        return True\n\n\ndef find_triplet(arr, s):\n    # 2 7 4 0 9 5 1 3\n    n = len(arr)\n    a = 0\n    b = n-1\n    c = n-2\n\n    while (a < b and c >= 0):\n        print(a, b, c)\n        if (arr[a] + arr[b] + arr[c]) == s:\n            return True\n        elif (arr[a] + arr[b] + arr[c]) > s:\n            c -= 1\n        else:\n            a += 1\n    return False\n\n\n# print(find_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8))", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, triplet_sum, min_num, max_num):\n    for i in range(min_num, max_num + 1):\n        j = max_num\n        k = min_num\n        while j > i:\n            s = arr[i] + arr[j] + arr[k]\n            if s == triplet_sum:\n                return True\n            elif s < triplet_sum:\n                j -= 1\n            else:\n                k += 1\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, target1, target2, target3):\n    \"\"\"Function to find the triplet\"\"\"\n    # Check if the array is sorted\n    if len(arr) > 1:\n        for i in range(len(arr) - 1):\n            for j in range(i+1, len(arr)):\n                if arr[i] + arr[j] == target1:\n                    for k in range(j+1, len(arr)):\n                        if arr[j] + arr[k] == target2:\n                            if arr[i] + arr[k] == target3:\n                                return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\nimport math\n\ndef check_triplet(arr, s, t, x):\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == s and arr[i] + arr[j] != t and arr[i] + arr[k] != t and arr[j] + arr[k] != t:\n                    if arr[i] == x or arr[j] == x or arr[k] == x:\n                        return True\n    return False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, x, y, z):\n    #write your code here\n    arr.sort()\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x:\n                if arr[i] * arr[j] == y:\n                    if arr[i] * arr[j] * arr[i+1] == z:\n                        return True\n                    elif arr[i] * arr[j] * arr[len(arr)-1] == z:\n                        return True\n    return False\n\n#test cases", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, a, b, c):\n    s1 = sum(arr[0:3])\n    s2 = sum(arr[3:6])\n    s3 = sum(arr[6:9])\n    s4 = sum(arr[9:12])\n    s5 = sum(arr[12:15])\n    s6 = sum(arr[15:18])\n    s7 = sum(arr[18:21])\n    s8 = sum(arr[21:24])\n    s9 = sum(arr[24:27])\n    s10 = sum(arr[27:30])\n    s11 = sum(arr[30:33])\n    s12 = sum(arr[33:36])\n    s13 = sum(arr[36:39])\n    s14 = sum(arr[39:42])\n    s15 = sum(arr[42:45])\n    s16 = sum(arr[45:48])\n    s17 = sum(arr[48:51])\n    s18 = sum(arr[51:54])\n    s19 = sum(arr[54:57])\n    s20 = sum(arr[57:60])\n    s21 = sum(arr[60:63])\n    s22 = sum(arr[63:66])\n    s23 = sum(arr[66:69])\n    s24 = sum(arr[69:72])\n    s25 = sum(arr[72:75])\n    s26 = sum(arr[75:78])\n    s27 = sum(arr[78:81])\n    s28 = sum(arr[81:84])\n    s29 = sum(arr[84:87])\n    s30 = sum(arr[87:90])\n    s31", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(a, target_sum_min, target_sum_max, target_sum_sum):\n    for i in range(len(a)-1):\n        for j in range(i+1, len(a)):\n            if target_sum_min <= a[i] + a[j] <= target_sum_max:\n                if a[i] + a[j] == target_sum_sum:\n                    return True\n    return False\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\nimport random\nfrom typing import List\n\ndef smartNumber(n: int) -> int:\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    numbers = [0, 1, 3, 5, 7, 9, 12, 15, 17, 19, 21, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 2", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    sum = 0\n    while True:\n        sum += (sum + 1) * 10\n        digits = [int(x) for x in str(sum)]\n        if sum == int(''.join(map(str, digits))):\n            break\n    return sum\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\nimport math\n\ndef smartNumber(n):\n    i = 0\n    n = int(math.sqrt(n))\n    while i <= n:\n        x = 1\n        y = i\n        z = i\n        j = 2\n        while j <= n:\n            x = x * j\n            y = y * (j+1)\n            z = z * (j+2)\n            j += 1\n        if x == z and y == z:\n            return z\n        i += 1\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    first_smart_number = 1\n    for i in range(2,n+1):\n        first_smart_number += i\n        if first_smart_number < i:\n            break\n    return first_smart_number\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    '''\n    Using both the sieve of eratosthenes and the staircase method\n    '''\n    num_of_stairs = 1\n    num_of_primes = 0\n    for p in range(2,1000000):\n        if is_prime(p):\n            num_of_primes += 1\n        if num_of_primes == n:\n            return num_of_stairs\n        num_of_stairs += 1\n\ndef is_prime(num):\n    '''\n    Check if a number is prime\n    '''\n    for i in range(2, int(num**(0.5))+1):\n        if num%i == 0:\n            return False\n    return True", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n\tarr = []\n\tfor i in range(1, n+1):\n\t\tarr.append(int(str(i)[::-1]*i))\n\treturn max(arr)\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    '''\n    use the the summation method to find it\n    '''\n    i = 0\n    while i <= n:\n        num = 0\n        for j in range(1, i+1):\n            num += 10**j\n        i += 1\n        if num == num*10**n:\n            return num\n    return None\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    a = 0\n    b = 1\n    for i in range(1, n+1):\n        c = a + b\n        a = b\n        b = c\n    return c\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n == 0:\n        return 1\n    else:\n        m = smartNumber(n-1)\n        return m * (m+1) // 2\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nimport unittest\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Returns a sum of all amicable numbers from 1 to n.\n    \"\"\"\n    ret = 0\n    amicables = []\n\n    for num in range(1, n + 1):\n        if is_amicable(num):\n            ret += num\n            amicables.append(num)\n\n    return ret\n\ndef is_amicable(num):\n    \"\"\"\n    Returns True if num is an amicable number, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n\n    total = 0\n    for i in range(1, num):\n        if num % i == 0:\n            total += i\n            if total == num:\n                return True\n            if i != num // i:\n                total += num // i\n    return False\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nfrom functools import reduce\n\ndef is_prime(n):\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n\ndef is_amicable(n):\n    return sum(divisors(n)) == n and sum(divisors(sum(divisors(n)))) == sum(divisors(n))\n\ndef divisors(n):\n    return list(filter(lambda x:n%x==0, range(1, int(n**0.5)+1)))\n\ndef amicable_numbers_sum(n):\n    return sum([x for x in range(1,n+1) if is_prime(x) and is_amicable(x)])", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(num):\n    if num <= 0:\n        return None\n\n    amicable_numbers = []\n    for i in range(1, num + 1):\n        # Get the sum of all divisors of the number\n        sum_of_divisors = sum(get_divisors(i))\n        if i == sum_of_divisors:\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\n\ndef get_divisors(num):\n    divisors = []\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors.append(num // i)\n            divisors.append(i)\n    return divisors", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nfrom projecteuler.utils.prime import prime_factors\nfrom projecteuler.utils.amicable_numbers import amicable_numbers\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(amicable_numbers(n))", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(number):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_ = 0\n    a_num_list = []\n    for i in range(1, number+1):\n        if is_amicable(i):\n            sum_ += i\n            a_num_list.append(i)\n    return sum(a_num_list)\n\n\ndef is_amicable(number):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    if number < 1:\n        return False\n    sum1 = sum_divisor(number)\n    sum2 = sum_divisor(sum1)\n    if sum1 == sum2 and sum1 != number:\n        return True\n    return False\n\n\ndef sum_divisor(number):\n    \"\"\"\n    Sum the divisors of a number.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, int(number/2)+1):\n        if number % i == 0:\n            sum_ += i\n            if number//i != i:\n                sum_ += number//i\n    return sum_", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nfrom math import sqrt\n\ndef amicable_numbers_sum(number):\n    \"\"\"\n    :param number: An integer.\n    :return: The sum of all the amicable numbers from 1 to number.\n    \"\"\"\n    result = 0\n    for i in range(1, number + 1):\n        sum_of_divisors = sum_of_divisors_of(i)\n        if i == sum_of_divisors and i != sum_of_divisors_of(sum_of_divisors):\n            result += i\n    return result\n\ndef sum_of_divisors(number):\n    \"\"\"\n    :param number: An integer.\n    :return: The sum of the divisors of number.\n    \"\"\"\n    result = 0\n    for i in range(1, sqrt(number) + 1):\n        if number % i == 0:\n            result += i + number / i\n    return result\n\ndef sum_of_divisors_of(number):\n    \"\"\"\n    :param number: An integer.\n    :return: The sum of the divisors of number.\n    \"\"\"\n    return sum_of_divisors(number) - number\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nfrom util import prime_factors\nfrom collections import Counter\n\ndef amicable_numbers(n):\n    \"\"\"\n    n: number of amicable numbers to find\n    return: list of amicable numbers\n    \"\"\"\n    amicables = []\n    d = dict()\n    for i in xrange(2, n):\n        # check if i is divisible by its own sum of divisors\n        # i.e. i = sum(d) where d is a set of i's divisors\n        s = sum(prime_factors(i))\n        if s in d and d[s] == i:\n            amicables.append(i)\n            amicables.append(s)\n        d[i] = i\n\n    return amicables\n\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    n: number of amicable numbers to find\n    return: sum of all amicable numbers\n    \"\"\"\n    return sum(amicable_numbers(n))", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(x):\n    sum = 0\n    for i in range(1,x+1):\n        if sum_of_proper_divisors(i) == i and sum_of_proper_divisors(sum_of_proper_divisors(i)) == i:\n            sum += i\n    return sum\n\n\ndef sum_of_proper_divisors(num):\n    sum = 0\n    for i in range(1,num+1):\n        if num % i == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nfrom collections import Counter\ndef amicable_numbers_sum(n):\n    n_list = [i for i in range(1, n+1)]\n    c = Counter(n_list)\n    sum = 0\n    for i in n_list:\n        if i in c:\n            if c[i] != i:\n                sum += c[i]\n                sum += i\n    return sum\n\n\n#assert amicable_numbers_sum(999)==504", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nimport os\nfrom eulerlib import primeFactors, isPrime\n\ndef amicable_numbers_sum(n):\n    s = 0\n    for i in range(1,n+1):\n        if i == amicable(i):\n            s += i\n    return s\n\ndef amicable(n):\n    s = 0\n    m = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            m = n/i\n            if primeFactors(m) == primeFactors(n):\n                s += m\n                if i != m:\n                    s += i\n    return s\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real,imaginary):\n    return np.arctan2(imaginary,real)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    return abs(b/a)\n\n# Add your tests here```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nModule 2: Making Functions More Useful  Challenge 14: Difference Between `max()` and `max()`Write a function that takes a list of numbers and returns the difference between the largest number and the smallest number in that list.For example, given the input `[-1, 5, -2, 10]`, your function should return `10 - (-1)`.\n\n### Code:\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\n#SOLUTION\n\nimport math\n\ndef angle_complex(a,b):\n    #your code here\n    return math.atan2(b,a)", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real,img):\n    return np.arctan2(img,real)*180/np.pi\n\ndef main():\n    \"\"\"\n    Test cases:\n        assert angle_complex(0,1j)==1.5707963267948966\n        assert angle_complex(0,0)==0.0\n        assert angle_complex(1,0)==0.0\n        assert angle_complex(-1,0)==180.0\n        assert angle_complex(0,0)==0.0\n        assert angle_complex(1,2)==31.41592653589793\n        assert angle_complex(1,2)==-31.41592653589793\n    \"\"\"\n    assert angle_complex(0,1j)==1.5707963267948966 \n    assert angle_complex(0,0)==0.0\n    assert angle_complex(1,0)==0.0\n    assert angle_complex(-1,0)==180.0\n    assert angle_complex(0,0)==0.0\n    assert angle_complex(1,2)==31.41592653589793\n    assert angle_complex(1,2)==-31.41592653589793\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(x, y):\n    z = (x**2+y**2)**0.5\n    try:\n        return math.degrees(math.atan2(y,x))\n    except ZeroDivisionError:\n        return math.pi/2\n\n\n# assert angle_complex(0, 1) == 0\n# assert angle_complex(0, -1) == math.pi\n# assert angle_complex(1, 0) == math.pi/2\n# assert angle_complex(-1, 0) == -math.pi/2\n# assert angle_complex(0, 1) == 0\n# assert angle_complex(0, -1) == math.pi\n# assert angle_complex(1, 0) == math.pi/2\n# assert angle_complex(-1, 0) == -math.pi/2", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    return math.atan2(b,a)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x, y):\n    return np.arctan2(y, x)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(a,b):\n  return math.atan2(b,a)\n\na=complex(0,1)", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a, b):\n    angle = 0\n    if a == 0 and b == 0:\n        return 0\n    if a != 0:\n        angle = math.atan(b/a)\n        if a < 0:\n            angle = math.pi - angle\n        return angle\n    else:\n        if b > 0:\n            angle = math.pi/2\n        else:\n            angle = -math.pi/2\n        return angle\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(num1,num2):\n    return ((math.atan2(num2.imag, num2.real))*180)/(math.pi)\n\n\n# -\n\nangle_complex(0,1j)\n\n# +"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, index):\n    # Your code here\n    if len(binary_string) == 1:\n        return 0\n    elif len(binary_string) == 2:\n        if binary_string[0] == binary_string[1]:\n            return 0\n        return 1\n    else:\n        zero_count = 0\n        one_count = 0\n        for i in range(len(binary_string)):\n            if binary_string[i] == '1':\n                one_count += 1\n            else:\n                zero_count += 1\n\n        if zero_count > one_count:\n            return find_length(binary_string[:zero_count], zero_count)\n        else:\n            return find_length(binary_string[one_count:], one_count)\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(string, number):\n    length = 0\n    for i in range(len(string)):\n        length = max(length, string.count(\"0\")-string.count(\"1\"))\n        string = string[(string.find(str(number)) + len(str(number))):]\n    return length\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary_string, k):\n    # base case\n    if len(binary_string) == k:\n        return 0\n    # find start and end index of 1\n    start = 0\n    end = k-1\n    while end < len(binary_string) and binary_string[end] == '0':\n        end += 1\n    while start < end and binary_string[start] == '0':\n        start += 1\n    # find start and end index of 0\n    if start == end:\n        start = 0\n        end = k-1\n        while end < len(binary_string) and binary_string[end] == '1':\n            end += 1\n        while start < end and binary_string[start] == '1':\n            start += 1\n    return end - start", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_str, k):\n    # Sub-string's count of 0's\n    count_0 = 0\n    count_1 = 0\n    # The length of the sub-string\n    length = 0\n\n    # Find the count of 0's and 1's\n    for c in binary_str:\n        if c == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n    # Find the minimum sub-string length\n    if count_0 > k:\n        while count_0 > k:\n            count_0 -= 1\n            length += 1\n    elif count_1 > k:\n        while count_1 > k:\n            count_1 -= 1\n            length += 1\n    else:\n        return length\n\n    # Find the maximum sub-string length\n    max_length = 0\n\n    # Find the maximum sub-string length\n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n\n        for j in range(length):\n            if j >= i and j < (i + length):\n                if binary_str[j] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n\n        if count_0 > k:\n            while count_0 > k:\n                count_0 -= 1\n                length += 1\n        elif count_1 > k:\n            while count_1 > k:\n                count_1 -= 1\n                length += 1\n        else:\n            return length\n\n    return max_length\n\n\ndef find_length_optimized(binary_str, k):\n    count_0 = 0\n    count_1 = 0\n    length = 0\n\n    while True:\n        if count_0 > k:\n            while count_0 > k:\n                count_0 -= 1\n                length += 1\n        elif count_1 > k:\n            while count_1 > k:\n                count_1 -= 1\n                length += 1\n        else:\n            return length\n\n        for i in range(length):\n            count_0 = 0\n            count_1", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(string, pattern):\n    max_diff = 0\n    diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            diff -= 1\n        else:\n            diff += 1\n        \n        if diff > max_diff:\n            max_diff = diff\n        \n        if diff == pattern:\n            return i - pattern + 1\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, x):\n    count0 = 0\n    count1 = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        if count1 - count0 >= x:\n            return count1 - count0\n    return count1 - count0\n\n# assert find_length(\"11000010001\", 12) == 8\n# assert find_length(\"11000010001\", 10) == 6\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(string, num_zeros):\n    count = 0\n    num_ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n            if count > num_zeros:\n                return i\n        elif string[i] == '1':\n            num_ones += 1\n            if num_ones > num_zeros:\n                return i + 1\n    return len(string) + 1\n\ndef find_length_2(string, num_zeros):\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        if zeros > num_zeros:\n            return i\n        elif ones > num_zeros:\n            return i + 1\n    return len(string) + 1\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_str, target_length):\n    zero_count = 0\n    one_count = 0\n    counter = 0\n    ans = 0\n    while counter < target_length:\n        if binary_str[counter] == '1':\n            one_count += 1\n        else:\n            zero_count += 1\n        counter += 1\n\n    ans = abs(one_count - zero_count)\n    return ans\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary, k):\n    n = len(binary)\n    max_diff = 0\n    for i in range(n):\n        count_zero = 0\n        count_one = 0\n        for j in range(i, n):\n            if binary[j] == \"0\":\n                count_zero += 1\n            else:\n                count_one += 1\n            if count_zero - count_one > k:\n                return j - i + 1\n            if count_zero - count_one < -k:\n                return n - j - 1\n        if i - 1 >= 0 and count_zero - count_one > k:\n            return j - i + 1\n        if i - 1 >= 0 and count_zero - count_one < -k:\n            return n - j - 1\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\n# O(n) time | O(1) space\ndef find_length(binary_string, max_length):\n    result = 0\n    zeros = binary_string.count(\"0\")\n    ones = binary_string.count(\"1\")\n\n    if zeros == ones:\n        return max_length\n\n    if zeros > ones:\n        return max_length - ones + zeros\n\n    return max_length - zeros + ones"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(number1, number2):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    number1: int, the first number\n    number2: int, the second number\n    return: int, the sum of common divisors of two numbers\n    \"\"\"\n    def get_common_divisors(number):\n        \"\"\"\n        Find the common divisors of a given number.\n        number: int, the number\n        return: list, the list of common divisors\n        \"\"\"\n        i = 1\n        divisors = []\n        while i <= number:\n            if number % i == 0:\n                divisors.append(i)\n            i += 1\n        return divisors\n\n    return sum(set(get_common_divisors(number1)).intersection(set(get_common_divisors(number2))))\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisor(a, b):\n\n    common_divisor = 0\n    if (a % b) == 0:\n        common_divisor = a/b\n        common_divisor = common_divisor + sum_common_divisor(b, common_divisor)\n    else:\n        common_divisor = sum_common_divisor(b, common_divisor)\n\n    return common_divisor\n\n\ndef sum_common_divisor_rec(a, b):\n\n    common_divisor = 0\n    if (a % b) == 0:\n        common_divisor = a/b\n        common_divisor = common_divisor + sum_common_divisor(b, common_divisor)\n    else:\n        common_divisor = sum_common_divisor(b, common_divisor)\n\n    return common_divisor\n\n\ndef sum_common_divisor_memo(a, b, memo):\n\n    if (a, b) in memo:\n        return memo[(a, b)]\n\n    common_divisor = 0\n    if (a % b) == 0:\n        common_divisor = a/b\n        common_divisor = common_divisor + sum_common_divisor(b, common_divisor)\n    else:\n        common_divisor = sum_common_divisor(b, common_divisor)\n\n    memo[(a, b)] = common_divisor\n\n    return common_divisor\n\n\ndef sum_common_divisor_memo_rec(a, b, memo):\n\n    if (a, b) in memo:\n        return memo[(a, b)]\n\n    common_divisor = 0\n    if (a % b) == 0:\n        common_divisor = a/b\n        common_divisor = common_divisor + sum_common_divisor(b, common_divisor)\n    else:\n        common_divisor = sum_common_divisor(b, common_divisor)\n\n    memo[(a, b)] = common_divisor\n\n    return common_divisor\n\n\ndef test_sum_common_divisor():\n    assert sum_common_divisor(", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(num1, num2):\n\t# Your code here\n\treturn\n\n\ndef test_sum_common_divisors():\n\tassert sum_common_divisors(10,15) == 6\n\tassert sum_common_divisors(1000, 15) == 6\n\tassert sum_common_divisors(100, 100) == 10\n\tassert sum_common_divisors(100000, 200000) == 6\n\tprint(\"pass\")\n\ntest_sum_common_divisors()", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(a,b):\n    return sum(set([x for x in range(1,max(a,b)) if a%x == 0 and b%x == 0]))\n\na,b = (10,15)", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(num1,num2):\n    #sum of common divisors of two numbers is equal to LCM of the two numbers\n    lcm_of_num1_and_num2 = (num1*num2)//gcd(num1,num2)\n    #now find the factors of lcm of two numbers\n    lcm_factors = set([x for x in range(1,int(lcm_of_num1_and_num2)) if lcm_of_num1_and_num2%x==0])\n    #now remove the factor which is either of the number and lcm of two numbers\n    lcm_factors.remove(num1)\n    lcm_factors.remove(num2)\n    #now take the sum of common divisors of two numbers\n    return sum(lcm_factors)", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(a, b):\n\n    l = []\n    l2 = []\n\n    for i in range(1,a+1):\n        if a % i == 0:\n            l.append(i)\n    \n    for j in range(1,b+1):\n        if b % j == 0:\n            l2.append(j)\n    \n    l_common = [x for x in l if x in l2]\n    print(l_common)\n    return sum(l_common)\n\ndef sum_of_common_divisors(a, b):\n    \n    # Iterating over all numbers\n    common_divisors = set(reduce(list.__add__,\n        ([i, a//i] for i in range(1, int(a**0.5) + 1) if a % i == 0)\n    ))\n\n    # Removing self from common_divisors\n    common_divisors.remove(a)\n    common_divisors.remove(b)\n\n    # Adding 1\n    common_divisors.add(1)\n\n    # Adding common divisors in descending order\n    common_divisors = sorted(common_divisors, reverse=True)\n    \n    # Sum of common divisors\n    return sum(common_divisors)\n\na = 10\nb = 15\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_divisors(n1, n2):\n    sum = 0\n    divisors = set()\n    for i in range(1, n1 + 1):\n        if n1 % i == 0:\n            divisors.add(i)\n            if i != n1:\n                divisors.add(n1 // i)\n    for i in range(1, n2 + 1):\n        if n2 % i == 0:\n            divisors.add(i)\n            if i != n2:\n                divisors.add(n2 // i)\n    divisors = set(sorted(divisors))\n    for i in divisors:\n        sum += i\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(x,y):\n    sum = 0\n    common_divisors = []\n    for i in range(1,x+1):\n        if x % i == 0 and y % i == 0:\n            common_divisors.append(i)\n    for num in common_divisors:\n        if num > x/2:\n            sum += x/num\n        if num > y/2:\n            sum += y/num\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(num1, num2):\n    s = 1\n    for i in range(1, num1+1):\n        if num1 % i == 0 and num2 % i == 0:\n            s = s + i\n    return s\n\ndef test():\n    assert sum_of_common_divisors(10,15) == 6\n\ntest()", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(num1,num2):\n    all_divisors = []\n    for i in range(1,int(max(num1,num2))):\n        if num1%i==0 and num2%i==0:\n            all_divisors.append(i)\n    return sum(all_divisors)\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(first_number, second_number):\n    return first_number * second_number\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(num1, num2):\n    if (num1 == 0 and num2 == 0) or (num1 == 0 or num2 == 0):\n        return 0\n    elif num1 > 0 and num2 > 0:\n        return multiply_int(num1 - 1, num2) + multiply_int(num1, num2 - 1)\n    elif num1 < 0 and num2 > 0:\n        return multiply_int(num1 + 1, num2) - multiply_int(num1, num2 - 1)\n    elif num1 < 0 and num2 < 0:\n        return multiply_int(num1 + 1, num2) + multiply_int(num1, num2 + 1)\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    if a<0 or b<0:\n        return\n    return a*b\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    return x*y\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(int1,int2):\n    result = 0\n    for i in range(int1,int2+1):\n        result += i\n    return result\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a, b):\n    return a * b\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x,y):\n    # your code here\n    return x*y\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    c=a\n    d=b\n    while c>0:\n        temp=c%d\n        c=c//d\n        d=temp+d\n    return d", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a * b\n\ndef multiply_int_v2(a, b):\n    result = 0\n    for i in range(a):\n        result += i\n    return result * b\n\ndef multiply_int_v3(a, b):\n    return (a * b) + (a * b) - (a * b)\n\n# assert multiply_int(10,20)==200\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\n#\n# This solution is the same as the linked one, but it has a space before and after the == operator. I assume this is a mistake.\n#\ndef multiply_int(a,b):\n    return a*b\n\n\n#\n# This solution is a hack. It does not work, because it assumes that the operator is * and not **.\n#\ndef multiply_int(a,b):\n    return a**b\n\n\n#\n# This solution is the same as the linked one, but it has a space before and after the == operator. I assume this is a mistake.\n#\ndef multiply_int(a,b):\n    return a * b\n\n\n#\n# This solution is the same as the linked one, but it has a space before and after the == operator. I assume this is a mistake.\n#\ndef multiply_int(a, b):\n    return a * b\n\n\n#\n# This solution is the same as the linked one, but it has a space before and after the == operator. I assume this is a mistake.\n#\ndef multiply_int(a, b):\n    return a * b"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    result = []\n    for word in words:\n        if len(word)>n:\n            result.append(word)\n    return result\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\n# return list of words longer than n\ndef long_words(n, words):\n    return [w for w in words if len(w) > n]\n\n\n# Test cases", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word) > n]\n\nlong_words(3,\"python is a programming language\")\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\nimport unittest\n\ndef long_words(n, words):\n    \"\"\"\n    Words that are longer than n\n    :param n: int\n    :param words: list of strings\n    :return: list of strings\n    \"\"\"\n    return [word for word in words if len(word) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    return [word for word in words if len(word) > n]", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n, words):\n    return [word for word in words if len(word) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,lst):\n    return [word for word in lst if len(word)>n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n    if n <= 0:\n        return []\n    res = []\n    for word in words:\n        if len(word) > n:\n            res.append(word)\n    return res\n\n#assert long_words(3,\"python is a programming language\")==['python','programming','language']\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words if len(word)>n]\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\n# + id=\"zqJ318h53vS-\" colab_type=\"code\" colab={}\ndef magic_square_test(square):\n  if(sum(square[0]) == sum(square[1]) == sum(square[2]) == sum(square[3]) == 45):\n    return True\n  elif(sum(square[0]) == sum(square[1]) == sum(square[2]) == sum(square[3]) == 18):\n    return True\n  elif(sum(square[0]) == sum(square[1]) == sum(square[2]) == sum(square[3]) == 120):\n    return True\n  elif(sum(square[0]) == sum(square[1]) == sum(square[2]) == sum(square[3]) == 175):\n    return True\n  elif(sum(square[0]) == sum(square[1]) == sum(square[2]) == sum(square[3]) == 220):\n    return True\n  else:\n    return False\n\n\n# + [markdown] id=\"I27j5e9P32FA\" colab_type=\"text\"\n# # 6) Find Prime Number\n#\n# Write a function to find prime number.\n# assert is_prime(7) == True\n# assert is_prime(25) == True\n# assert is_prime(121) == True\n# assert is_prime(2147483647) == False\n#\n\n# + id=\"iPZ_pt_P34kU\" colab_type=\"code\" colab={}\ndef is_prime(n):\n  for i in range(2, n+1):\n    if(n % i == 0):\n      return False\n  return True\n\n\n# + [markdown] id=\"i_3q0Ygk4wO0\" colab_type=\"text\"\n# # 7) Find", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(square):\n    magic_sum = sum([min(row) for row in square]) + sum([max(row) for row in square])\n    return magic_sum == sum(sum(square))\n\ndef magic_square_test(square):\n    assert magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\n    return True\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    rows = [\n        sum(row[0:3]),\n        sum(row[3:6]),\n        sum(row[6:9])\n    ]\n    columns = [\n        sum(column[0:3]),\n        sum(column[3:6]),\n        sum(column[6:9])\n    ]\n    diagonals = [\n        sum(matrix[0][0:3]),\n        sum(matrix[2][0:3])\n    ]\n\n    return rows == columns == diagonals == [15, 15, 15]\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(m):\n    row = [sum(m[0]), sum(m[1]), sum(m[2]), sum(m[3])]\n    col = [sum(m[0]), sum(m[1]), sum(m[2]), sum(m[3])]\n    dia_l = [m[0][0]+m[1][1]+m[2][2], m[0][2]+m[1][1]+m[2][0]]\n    dia_r = [m[3][0]+m[1][1]+m[0][2], m[3][2]+m[1][1]+m[0][0]]\n    return row == [15, 15] and col == [15, 15] and dia_l == [15, 15] and dia_r == [15, 15]\n\n# Use sum to count the sum of each row.\n# def magic_square(m):\n#     row = sum(m[0]), sum(m[1]), sum(m[2]), sum(m[3])\n#     col = sum(m[0]), sum(m[1]), sum(m[2]), sum(m[3])\n#     dia_l = m[0][0]+m[1][1]+m[2][2], m[0][2]+m[1][1]+m[2][0]\n#     dia_r = m[3][0]+m[1][1]+m[0][2], m[3][2]+m[1][1]+m[0][0]\n#     return row == [15, 15] and col == [15, 15] and dia_l == [15, 15] and dia_r == [15, 15]\n\n# Use list comprehension.\n# def magic_square(m):\n#", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(square):\n    sum = 1\n    for i in range(len(square)):\n        sum += sum_row(square, i)\n    if sum == 63:\n        return True\n    return False\n\ndef sum_row(square, row):\n    sum = 0\n    for i in range(len(square)):\n        sum += square[row][i]\n    return sum\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(m):\n    sum_of_rows = sum_of_columns = sum_of_diagnol = 0\n\n    for i in range(len(m)):\n        for j in range(len(m)):\n            sum_of_rows += m[i][j]\n            sum_of_columns += m[j][i]\n            if i == j:\n                sum_of_diagnol += m[i][i]\n            if i+j == len(m)-1:\n                sum_of_diagnol += m[i][j]\n\n    return sum_of_rows == sum_of_columns == sum_of_diagnol == 45\n\ndef test_magic_square():\n    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef is_magic(m):\n    row_sum = sum(m[0])\n    row_sum = row_sum + sum(m[1])\n    row_sum = row_sum + sum(m[2])\n    row_sum = row_sum + sum(m[3])\n    if row_sum == 34:\n        return True\n    col_sum = 0\n    for i in range(0, 4):\n        col_sum += m[i][0]\n        col_sum += m[i][1]\n        col_sum += m[i][2]\n        col_sum += m[i][3]\n    if col_sum == 34:\n        return True\n    diag_sum = 0\n    for i in range(0, 4):\n        diag_sum += m[i][i]\n    if diag_sum == 34:\n        return True\n    diag_sum = 0\n    for i in range(0, 4):\n        diag_sum += m[3-i][i]\n    if diag_sum == 34:\n        return True\n    return False\n\ndef magic_square_test():\n    m = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    return is_magic(m)\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(magic_square):\n    squares=zip(*magic_square)\n    sum_col=sum(squares[0])\n    sum_row=sum(squares[1])\n    sum_diag_top_right=sum(squares[2])\n    sum_diag_bottom_left=sum(squares[3])\n    return sum_col==sum_row==sum_diag_top_right==sum_diag_bottom_left\n\n\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\ndef magic_square(magic_square):\n    squares=zip(*magic_square)\n    sum_col=sum(squares[0])\n    sum_row=sum(squares[1])\n    sum_diag_top_right=sum(squares[2])\n    sum_diag_bottom_left=sum(squares[3])\n    return sum_col==sum_row==sum_diag_top_right==sum_diag_bottom_left\n\n\n\nmagic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    if len(matrix) != 4:\n        return False\n    if len(matrix[0]) != 4:\n        return False\n\n    sum_of_cols = sum_of_rows = sum_of_diag_l = sum_of_diag_r = 0\n\n    for row in matrix:\n        for element in row:\n            sum_of_cols += element\n            sum_of_rows += element\n\n    for i in range(4):\n        sum_of_diag_l += matrix[i][i]\n        sum_of_diag_r += matrix[i][3 - i]\n\n    return sum_of_cols == sum_of_rows and sum_of_diag_l == sum_of_diag_r and sum_of_cols == 24\n\n\ndef magic_square(matrix):\n    if not magic_square_test(matrix):\n        return None\n\n    row_list = [list(row) for row in matrix]\n    for row in row_list:\n        if row[0] == row[1] == row[2] != 0:\n            return row[0] * 100 + row[1] * 10 + row[2]\n        if row[3] == row[2] == row[1] != 0:\n            return row[3] * 100 + row[2] * 10 + row[1]\n    if row_list[0][0] == row_list[1][1] == row_list[2][2] != 0:\n        return row_list[0][0] * 100 + row_list[1][1] * 10 + row_list[2][2]\n    if row_list[0][3] == row_list[1][2] == row_list[2][1] != 0:\n        return row_list[0][3] * 100 + row_list[1][2", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(square):\n    print(square)\n    sum_columns = sum_rows = sum_diagonals = 0\n    if(len(square) == 4):\n        for row in range(4):\n            sum_columns += square[row][row]\n            sum_rows += square[row][3-row]\n            sum_diagonals += square[row][row]\n            sum_diagonals += square[row][3-row]\n        if(sum_columns == 24 and sum_rows == 24 and sum_diagonals == 24):\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    \"\"\"\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    (2, 5)\n    >>> max_occurrences([])\n    (None, None)\n    >>> max_occurrences([1,1,2,2,3,3])\n    (3, 2)\n    \"\"\"\n    if len(lst) == 0:\n        return None, None\n    cnt = 0\n    max_freq = lst[0]\n    max_val = lst[0]\n    for i in range(len(lst)):\n        if lst[i] == max_freq:\n            cnt += 1\n        else:\n            cnt = 1\n        if cnt > max_freq:\n            max_freq = cnt\n            max_val = lst[i]\n    return max_val, max_freq", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(array):\n    hashmap = {}\n    for num in array:\n        if num in hashmap:\n            hashmap[num] += 1\n        else:\n            hashmap[num] = 1\n\n    max_value = 0\n    max_num = 0\n    for key, value in hashmap.items():\n        if value > max_value:\n            max_value = value\n            max_num = key\n    return (max_num, max_value)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    cnt = Counter(lst)\n    item = max(cnt.items(), key=lambda x:x[1])[0]\n    freq = max(cnt.values())\n    return item, freq\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(items):\n    max_frequency=0\n    max_item=0\n    for item in items:\n        frequency=items.count(item)\n        if frequency>max_frequency:\n            max_frequency=frequency\n            max_item=item\n    return (max_item,max_frequency)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n    Time Complexity: O(N)\n    \"\"\"\n    max_item = None\n    max_occurrence = 0\n    for item in lst:\n        if item not in lst or lst.count(item) > max_occurrence:\n            max_occurrence = lst.count(item)\n            max_item = item\n    return max_item, max_occurrence\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(arr):\n    \"\"\"\n    arr = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\n    arr.sort()\n\n    arr = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\n    arr.sort(key=arr.count)\n\n    arr = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\n    arr.sort(key=lambda x: -arr.count(x))\n\n    arr = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\n    arr.sort(key=lambda x: arr.count(x), reverse=True)\n\n    arr = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\n    arr.sort(key=arr.count, reverse=True)\n\n    arr = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\n    arr.sort(key=lambda x: (arr.count(x), x))\n\n    arr = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\n    arr.sort(key=lambda x: (arr.count(x), -", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(arr):\n    count = {}\n    for item in arr:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    max_val = 0\n    max_item = None\n    for key,value in count.items():\n        if value > max_val:\n            max_val = value\n            max_item = key\n    return (max_item, max_val)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\nfrom collections import Counter\ndef max_occurrences(data):\n    count=Counter(data)\n    item,freq=max(count.items(), key = lambda x:x[1])\n    return item,freq\n\n#Write a function to find the item with maximum frequency in a given list", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    freq = {}\n    for item in lst:\n        freq[item] = freq.get(item,0)+1\n    return max(freq, key=freq.get)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(arr):\n    max_occurrences = []\n    max_frequency = arr[0]\n    max_value = arr[0]\n    for value in arr:\n        if arr.count(value) > max_frequency:\n            max_frequency = arr.count(value)\n            max_value = value\n        elif arr.count(value) == max_frequency:\n            max_value = max_value\n        max_occurrences.append((max_value, max_frequency))\n    return max_occurrences"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    return ''.join([c if c.lower() in 'aeiou' else c.lower() for c in s.lower()])", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(word):\n    return \"\".join(c for c in reversed(word) if c.lower() in 'aeiouAEIOU')", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n# Your function should return a string\ndef reverse_vowels(str1):\n\n    # Step 1: replace all the vowels with #\n    str1 = str1.replace('a', '#')\n    str1 = str1.replace('e', '#')\n    str1 = str1.replace('i', '#')\n    str1 = str1.replace('o', '#')\n    str1 = str1.replace('u', '#')\n\n    # Step 2: reverse the string\n    str1 = str1[::-1]\n\n    # Step 3: replace the vowels with the original letters\n    str1 = str1.replace('#', 'a')\n    str1 = str1.replace('#', 'e')\n    str1 = str1.replace('#', 'i')\n    str1 = str1.replace('#', 'o')\n    str1 = str1.replace('#', 'u')\n\n    return str1\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str):\n    \"\"\"\n    First define the alphabets which are vowels.\n    Then loop through the string and check if the character is a vowel or not.\n    If the character is a vowel, change the string and return the string.\n    :param str: The given string\n    :return: The reversed string\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str = str[::-1]\n    for i in range(len(str)):\n        if str[i] in vowels:\n            str = str[:i] + str[i+1:][::-1] + str[i] + str[i+1:]\n    return str", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    return \"\".join(filter(lambda x: x in \"AEIOUaeiou\", reversed(string)))\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(str):\n    str = str.lower()\n    vowels = 'aeiou'\n    return ''.join(c for c in str if c in vowels) + ''.join(c for c in str if c not in vowels)\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels = ''.join(vowels)\n    print(vowels)\n    #string = string.lower()\n    #print(string)\n    #vowels = 'aeiou'\n    #print(vowels)\n\n    for i in vowels:\n        string = string.replace(i, '')\n    return string\n\n#print(reverse_vowels(\"Python\"))\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(text):\n    vowels = \"AEIOUaeiou\"\n    #remove vowels from string\n    new_str = \"\"\n    for i in text:\n        if i not in vowels:\n            new_str = new_str + i\n    #reverse remaining string\n    rev_str = new_str[::-1]\n    return rev_str\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\nimport re\n\nVOWELS = ['a', 'e', 'i', 'o', 'u']\n\n\ndef reverse_vowels(string):\n    vowel_idx = string.find(VOWELS)\n    if vowel_idx == -1:\n        return string\n\n    vowels = string[:vowel_idx]\n    vowels = vowels[::-1]\n    return vowels + string[vowel_idx + len(VOWELS):]\n\n\ndef reverse_vowels_regex(string):\n    return re.sub(r\"(?<=[a-z])(?=[aeiou])|(?<=[aeiou])(?=[a-z])\", \"\", string)", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    rev = []\n    for char in s:\n        if char.lower() in \"aeiouAEIOU\":\n            rev.append(char.upper())\n        else:\n            rev.append(char)\n    return ''.join(rev)[::-1]\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join([str(x) for x in tup])\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return str(tup)\n\ndef tup_string(tup):\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    str = \"\"\n    for x in tup:\n        str += x\n    return str\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    s = \"\"\n    for i in tup:\n        s = s + i\n    return s\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return ''.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\n#tup_string function\ndef tup_string(tup):\n    return \"\".join(tup)\n\n#Test"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\nsum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numList):\n    sum = 0\n    for num in numList:\n        if num < 0:\n            sum += num\n    return sum\n\ndef sum_negativenum(numList):\n    return sum(filter(lambda x: x < 0, numList))\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\nimport unittest\ndef sum_negativenum(numbers):\n    return sum(filter(lambda x:x<0, numbers))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(list):\n    return sum(filter(lambda x: x<0, list))\n\n\ndef main():\n    list1 = [2, 4, -6, -9, 11, -12, 14, -5, 17]\n    print(\"Given list: \", list1)\n    print(\"Sum of Negative numbers: \", sum_negativenum(list1))\n    list2 = [2, 0, -2, 4, 6, 8, 10, 12, 14, 16]\n    print(\"Given list: \", list2)\n    print(\"Sum of Negative numbers: \", sum_negativenum(list2))\n    print(\"Sum of Negative numbers: \", sum(filter(lambda x: x<0, list2)))\n\nmain()\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(lst):\n    return sum([x for x in lst if x < 0])\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum(filter(lambda n: n < 0, numbers))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(mylist):\n    return sum([num for num in mylist if num < 0])\n\ndef sum_negativenum(mylist):\n    return sum(list(filter(lambda x: x < 0, mylist)))\n\ndef sum_negativenum(mylist):\n    return sum(list(filter(lambda x: x >= 0, mylist)))\n\ndef sum_negativenum(mylist):\n    return sum(filter(lambda x: x < 0, mylist))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n\treturn sum(filter(lambda x: x<0, numbers))\n\ndef test_sum_negativenum():\n\tassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, n):\n    # Write your code here\n    even = odd = 0\n    for i in range(p, n):\n        if(arr[i]%2==0):\n            even+=1\n        else:\n            odd+=1\n    if(even>odd):\n        return \"ODD\"\n    elif(even<odd):\n        return \"EVEN\"\n    else:\n        return \"INVALID\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, i):\n    if p==0:\n        return \"ODD\"\n    elif p>0:\n        if arr[i]==0:\n            return \"EVEN\"\n        else:\n            return check_last(arr, p-1, i+1)\n    elif p<0:\n        if arr[i]==0:\n            return \"ODD\"\n        else:\n            return check_last(arr, p+1, i+1)\n\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,n,p):\n    if p == 1:\n        return \"EVEN\" if arr[-1] % 2 == 0 else \"ODD\"\n    else:\n        return \"EVEN\" if check_last(arr[:-1], n, p-1) == \"EVEN\" else \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,q):\n    even = False\n    odd = False\n    if q == 0:\n        if arr[-1] % 2 == 0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    else:\n        if arr[-1] % 2 == 0:\n            return \"EVEN\"\n        else:\n            return \"ODD\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(nums,p,n):\n    for i in range(p-1):\n        nums.pop(0)\n    if nums[-1]%2==0:\n        return \"EVEN\"\n    return \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,n):\n    x = (n % p)\n    if x == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr, p, n):\n    if p == 0:\n        return \"EVEN\"\n    if p == 1:\n        if arr[n-1] % 2 == 1:\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n    else:\n        arr[n-1] = arr[n-1] + check_last(arr,p-1,n)\n        if arr[n-1] % 2 == 1:\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    if arr[len(arr)-1]%2==0:\n        return \"EVEN\"\n    return \"ODD\"\n\n# +", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr, p, n):\n    if p < n:\n        return \"INVALID\"\n    arr.pop()\n    return \"EVEN\" if arr[-1]%2==0 else \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    n = len(arr)\n    if n == 1:\n        return 'ODD'\n    elif n == 2:\n        if (arr[0]+arr[1])%2==0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    else:\n        total_sum = sum(arr)\n        last_element = arr[n-1]\n        if total_sum%2==0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\n# Hexagonal Numbers\n# hexagonal_num = lambda x: sum(map(lambda n: n*(2*n-1), range(1, x + 1)))\n\ndef hexagonal_num(n):\n    return sum(map(lambda n: n*(2*n-1), range(1, n + 1)))", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nhexagonal_num = lambda x: x * (2 * x - 1)", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    hexagonal = 0\n    for i in range(1, n + 1):\n        hexagonal += i * 6 - 2 * (i - 1)\n    return hexagonal\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return int((n * (2 * n - 1)) / 2)\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nimport math\n\ndef hexagonal_num(n):\n    return int(math.sqrt(n**3)/3) + math.sqrt(n**3)%3\n\ndef main():\n    n = int(input(\"Please enter a number: \"))\n    print(hexagonal_num(n))\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n    :param n: integer\n    :return: nth hexagonal number\n    \"\"\"\n    return (n * (2 * n - 1))\n\ndef hexagonal_num_iter(n):\n    \"\"\"\n    :param n: integer\n    :return: nth hexagonal number\n    \"\"\"\n    i = 0\n    j = 1\n    result = 0\n    while j <= n:\n        result += j\n        j += i\n        i += 1\n    return result", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nimport math\n\n\ndef hexagonal_num(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    n = math.sqrt(8*n) + 1\n    return round(n)\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = hexagonal_num(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    else:\n        return 6*n - 1\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    hexagonal_numbers = []\n    a = 0\n    b = 1\n    while len(hexagonal_numbers) <= n:\n        hexagonal_numbers.append(a*a*3 + b*b)\n        a, b = a + b, a + 2*b\n    return hexagonal_numbers[n-1]\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    return ((1 + 24 * n) * n) // 2\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(dollar):\n    \"\"\"\n    dollor : type float\n    \"\"\"\n    print(\"a single kwh charge is 0.15 dollar\")\n    print(\"number of kwh * 0.15 dollar = $\")\n    print(\"total dollar = $\")\n\ncal_electbill(75)", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(month):\n    elec_rate = 0.0670\n    elec_bill = 0\n    if month > 0:\n        elec_bill = elec_rate * month\n    else:\n        elec_bill = 0\n    return elec_bill\n\ndef main():\n    month = 10\n    elec_bill = cal_electbill(month)\n    print(elec_bill)\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(a):\n    b = (1/6)*a**3+(1/3)*a**2+(1/15)*a\n    return b\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kWh):\n    bill=0.17*kWh + 0.19*kWh/1000 + 0.09*kWh/100000\n    return bill", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(batteries):\n    electbill = (batteries/2.45)*(1.25+0.50)\n    return electbill\n\n\ndef test_cal_electbill():\n    assert cal_electbill(75)==246.25\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kWh):\n    \"\"\"\n    Args:\n        kWh (int): The number of kiloWatt hours\n\n    Returns:\n        float: The electricity bill\n    \"\"\"\n    # TODO: Write your function here\n    bill = 0\n    for i in range(kWh):\n        bill += (5.75 + 0.32) * (1 + 0.06)\n    return bill\n\n# End of cal_electbill()\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    return (kwh*30.00)\n\ndef cal_electbill(kwh):\n    if kwh<0 or kwh>1000:\n        return \"Invalid\"\n    return (kwh*30.00)\n\ndef cal_electbill(kwh):\n    kwh=float(kwh)\n    if kwh < 0 or kwh > 1000:\n        return \"Invalid\"\n    return (kwh * 30.00)\n\ndef cal_electbill(kwh):\n    if kwh<0 or kwh>1000:\n        return \"Invalid\"\n    else:\n        return kwh * 30.00\n\ndef cal_electbill(kwh):\n    if kwh<0 or kwh>1000:\n        return \"Invalid\"\n    else:\n        return float(kwh) * 30.00\n\ndef cal_electbill(kwh):\n    return (kwh*30.00) if kwh >= 0 and kwh <= 1000 else \"Invalid\"\n\ndef cal_electbill(kwh):\n    return \"Invalid\" if kwh < 0 or kwh > 1000 else kwh * 30.00\n\ndef cal_electbill(kwh):\n    if kwh < 0 or kwh > 1000:\n        return \"Invalid\"\n    return kwh * 30.00\n\ndef cal_electbill(kwh):\n    return (kwh * 30.00) if (kwh >= 0 and kwh <= 1000) else \"Invalid\"\n\ndef cal_electbill(kwh):\n    return (kwh * 30.00) if kwh >= 0 and kwh <= 1000 else \"Invalid\"", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(hours):\n    total_cost=0\n    if hours<=10:\n        total_cost=hours*4.15\n    elif hours>10 and hours<=20:\n        total_cost=(hours-10)*3.10+4.15\n    elif hours>20:\n        total_cost=(hours-20)*2.70+3.10+4.15\n    return total_cost\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kWh):\n    \"\"\"\n    KWh: the kilowatt hour number\n    \"\"\"\n    bill = 1.0 * kWh / 100 * 40\n    return bill\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    bill = kwh * 0.15\n    return bill\n\n# assert cal_electbill(75)==246.25\n\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\n# The naive way, this is O(n^2)\ndef zero_count(array):\n    count = 0\n    for i in range(len(array)):\n        for j in range(i, len(array)):\n            if array[i] == 0 and array[j] == 0:\n                count += 1\n                break\n    return float(count) / (len(array) * (len(array)-1))\n\n# More efficient, but still O(n^2)\ndef zero_count_better(array):\n    count = 0\n    zeros = [0] * len(array)\n    for i in range(len(array)):\n        zeros[i] = 0 if array[i] == 0 else 1\n    for i in range(len(array)):\n        for j in range(i, len(array)):\n            if zeros[i] == 0 and zeros[j] == 0:\n                count += 1\n                break\n    return float(count) / (len(array) * (len(array)-1))\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(nums):\n    zero_count=0\n    for num in nums:\n        if num==0:\n            zero_count+=1\n    return zero_count/len(nums)", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    total=len(arr)\n    zero=0\n    for i in arr:\n        if i==0:\n            zero+=1\n    return zero/total\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    zero = 0\n    num = len(arr)\n    for i in range(0, num):\n        if arr[i] == 0:\n            zero += 1\n    return float(zero) / num\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(array):\n    sum = 0\n    for i in array:\n        if i == 0:\n            sum += 1\n    return sum/len(array)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(array):\n    zeroes = 0\n    for element in array:\n        if element == 0:\n            zeroes = zeroes + 1\n    return zeroes / float(len(array))\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(numbers):\n    zero_count = 0\n    for num in numbers:\n        if num == 0:\n            zero_count += 1\n    return zero_count/len(numbers)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(list):\n    num_zeroes = 0\n    for i in list:\n        if i == 0:\n            num_zeroes += 1\n    return num_zeroes / len(list)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(array):\n    count = 0\n    for i in range(len(array)):\n        if array[i] == 0:\n            count = count + 1\n    return count/len(array)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(array):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    num_zeros = 0\n    for i in array:\n        if i == 0:\n            num_zeros += 1\n    return num_zeros / len(array)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(number):\n    # try:\n    #     number = int(number)\n    # except:\n    #     return False\n    if number <= 0:\n        return False\n    power = 1\n    while power < number:\n        if number & power:\n            return False\n        power *= 2\n    return True\n    # except:\n    #     return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n\n    # Find the highest power of 2\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 = power_of_2 * 2\n    \n    # Check if n is sum of powers of 2\n    for i in range(1, int(power_of_2 / 2) + 1):\n        if power_of_2 - i < n:\n            if n == power_of_2 - i:\n                return True\n            if n == power_of_2 - 2 * i:\n                return True\n    return False\n\n# assert", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\nimport math\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    num = str(n)\n    for i in range(len(num)):\n        power = math.pow(2, len(num) - i)\n        if num.count(str(power)) != 1:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(num):\n\tnum = int(num)\n\tif num == 0 or num == 1:\n\t\treturn False\n\telse:\n\t\ti=1\n\t\twhile num > 1:\n\t\t\tif(num % 2 == 1):\n\t\t\t\treturn False\n\t\t\tnum = num//2\n\t\t\ti += 1\n\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    binary_str = str(bin(n))\n    count = 0\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            count += 1\n    if count == 1:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(number):\n    num = 1\n    while num <= number:\n        if (number & num) == 0:\n            return False\n        num <<= 1\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num == 0 or num == 1:\n        return False\n\n    for i in range(1,num+1):\n        if num%i == 0:\n            if num//i == i:\n                return True\n    return False\n\n\n#test case 1", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n\n    return is_Sum_Of_Powers_Of_Two(n >> 1) or is_Sum_Of_Powers_Of_Two((n >> 1) + (n & 1))\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num == 0:\n        return False\n    if num & (num - 1) == 0:\n        return True\n    while num > 1:\n        num = num & (num - 1)\n    return num == 1\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    pi=math.pi\n    return 2*pi*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(r):\n    return 2 * 3.14 * r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    \"\"\"\n    return float: circumference of circle with radius radius\n    >>> circle_circumference(10)==62.830000000000005\n    True\n    \"\"\"\n    return 2*radius*math.pi\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * 3.14 * radius\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(r):\n    return 2*math.pi*r\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    \"\"\"\n    Return the circumference of the circle with radius radius.\n    :param radius: the radius of the circle.\n    :return: the circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * 3.14 * radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return 2 * pi * radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    \"\"\"\n    :param radius:\n    :return:\n    \"\"\"\n    return 2 * 3.1415 * radius\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\n#Solution 1: using the math package.\n#Solution 2: using the math.pi constant.\n#Solution 3: using the math.sqrt function.\n\n\nimport math\n\ndef circle_circumference(radius):\n    circumference = radius * 2 * math.pi\n    return circumference\n\ndef circle_circumference(radius):\n    circumference = radius * 2 * math.sqrt(math.pi)\n    return circumference\n\ndef circle_circumference(radius):\n    circumference = radius * 2 * math.pi\n    return circumference\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuples):\n    \"\"\"Extracts elements that occur singly in tuples list\"\"\"\n    return [x for x in tuples if tuples.count(x) == 1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nimport unittest\n\n\ndef extract_singly(tup):\n    \"\"\"\n    Finds all elements in the tup that are only in 1 position\n    and return them in a list\n    :param tup: list of tuples\n    :return: list of unique elements\n    \"\"\"\n    result = []\n    for i in tup:\n        if i not in result:\n            result.append(i)\n    return result\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom itertools import chain\nfrom collections import defaultdict\nfrom operator import itemgetter\n\n# write your code here\ndef extract_singly(data):\n    freqs = defaultdict(int)\n    for i in data:\n        freqs[i] += 1\n    singly = [i for i in freqs.keys() if freqs[i] == 1]\n    return singly + chain.from_iterable(data)\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuple_list):\n    # Write your code here.\n    return [x for (x, _) in groupby(tuple_list)]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\nimport collections\ndef extract_singly(tup):\n    res = []\n    d = collections.defaultdict(set)\n    for tup_ in tup:\n        d[tup_[0]].add(tup_)\n    for k, v in d.items():\n        if len(v) == 1:\n            res.append(k)\n    return res\n\n\n# assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuple_list):\n    result = []\n    for tup in tuple_list:\n        if tup in result:\n            continue\n        result.append(tup)\n    return result\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom typing import List\n\n\ndef extract_singly(elements: List[tuple]) -> List:\n    return [item for element in elements for item in element if element.count(item) == 1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuples):\n    return [x for x in tuples for y in tuples if x == y]\n\n# Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n# Example:\n# Input: [-2,1,-3,4,-1,2,1,-5,4],\n# Output: 6\n# Explanation: [4,-1,2,1] has the largest sum = 6.\n\n# Follow up:\n# If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\n# +\ndef extract_singly(l):\n    return [x for x in l if l.count(x) == 1]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup_list):\n    return [x for x in tup_list for y in tup_list if x == y]\n\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    for i in range(len(arr)-1, 0, -1):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                arr = swap(arr, i, j)\n                arr = flip(arr, i)\n                arr = flip(arr, j)\n    return arr\n\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    return arr\n\ndef flip(arr, i):\n    arr[i] = arr[0]\n    arr[0] = arr[i]\n    return arr\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(li):\n    if len(li) <= 1:\n        return li\n    k = len(li) - 1\n    while k >= 0:\n        i = k\n        while i >= 0 and li[i] < li[i+1]:\n            li[i], li[i+1] = li[i+1], li[i]\n            print(li)\n            i -= 1\n        k -= 1\n    return li\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(array):\n    for i in range(len(array) - 1, -1, -1):\n        # find the biggest number in the list\n        biggest_num_index = find_biggest_num(array, i)\n        # swap this number with the biggest number in the list\n        array = swap_array(array, i, biggest_num_index)\n    return array\n\ndef find_biggest_num(array, index):\n    biggest_num_index = index\n    for i in range(index, 0, -1):\n        if array[i] > array[biggest_num_index]:\n            biggest_num_index = i\n    return biggest_num_index\n\ndef swap_array(array, i, j):\n    # to reverse array from i to j:\n    # reverse array from i to the end\n    for k in range(i, j+1):\n        array[k], array[j] = array[j], array[k]\n    return array\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(alist):\n    # find the length of the list\n    length = len(alist)\n    # start from end of the list\n    for i in range(length-1, 0, -1):\n        j = i\n        # find a value larger than alist[i]\n        while alist[j] < alist[i] and j > 0:\n            # swap\n            alist[i], alist[j] = alist[j], alist[i]\n            # re-compute j\n            j -= 1\n            # move the first j-1 elements in place\n            for k in range(j, 0, -1):\n                alist[k], alist[k-1] = alist[k-1], alist[k]\n    # reverse the first n-1 elements\n    for i in range(1, length):\n        alist[i], alist[0] = alist[0], alist[i]\n    return alist\n\n\n# Test", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(list):\n\tif len(list) == 0:\n\t\treturn list\n\tfor i in range(len(list)-1, -1, -1):\n\t\tif list[i] != i + 1:\n\t\t\t#turns the list into (i, i-1) shape\n\t\t\tturn_list = list[i:] + [list[i]]\n\t\t\tfor j in range(len(turn_list)):\n\t\t\t\tlist[j] = turn_list[j]\n\treturn list\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    n = len(arr)\n    res = []\n    for i in range(n):\n        if arr[i] != i + 1:\n            j = i\n            while j >= 0 and arr[j] != j + 1:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                j -= 1\n            res.append(j+1)\n            for k in range(i-1, -1, -1):\n                arr[k], arr[k+1] = arr[k+1], arr[k]\n            res.append(i+1)\n    return res\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(unsorted_list):\n    \"\"\"Sort a list by doing pancake sort.\"\"\"\n    if len(unsorted_list) == 0:\n        return unsorted_list\n    if len(unsorted_list) == 1:\n        return unsorted_list\n    for i in range(len(unsorted_list) - 1, 0, -1):\n        if unsorted_list[i - 1] > unsorted_list[i]:\n            unsorted_list = flip(unsorted_list, i - 1)\n    return unsorted_list\n\ndef flip(unsorted_list, flip_number):\n    \"\"\"Flip the elements starting from the flip number.\"\"\"\n    unsorted_list = unsorted_list[flip_number:] + unsorted_list[:flip_number]\n    return unsorted_list", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(elements):\n    # TODO: write your solution here\n    if len(elements) <= 1:\n        return elements\n    for i in range(len(elements)-1, 0, -1):\n        if elements[i] < elements[i-1]:\n            first = i\n            for j in range(first, 0, -1):\n                if elements[j] > elements[j-1]:\n                    elements[j-1], elements[j] = elements[j], elements[j-1]\n                else:\n                    break\n            elements[0], elements[first-1] = elements[first-1], elements[0]\n            elements = elements[:first-1] + elements[first:]\n            print(\"pancake_sort({0}) = {1}\".format(elements, pancake_sort(elements)))\n            return pancake_sort(elements)\n    return elements\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(elements):\n    return sorted(elements)\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    res = []\n    for i in range(len(arr), 0, -1):\n        n = arr.pop(0)\n        res.append(n)\n        for j in range(i):\n            arr.insert(j, arr[j] // n)\n            arr.pop()\n    return res"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    return len([x for x in list1 if x in list2 and x in list3])\n\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1,list2,list3):\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2 and num1 in list3:\n                count += 1\n    return count\n\ndef main():\n    print count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(lst1, lst2, lst3):\n    cnt = 0\n    for i in range(len(lst1)):\n        for j in range(i+1, len(lst1)):\n            if lst1[i] == lst2[j] and lst1[i] == lst3[j]:\n                cnt += 1\n    return cnt", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    pair_count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            pair_count += 1\n    return pair_count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(A,B,C):\n    D={}\n    count=0\n    for a in A:\n        for b in B:\n            for c in C:\n                if(a==b and b==c):\n                    if(a,b,c) not in D:\n                        D[(a,b,c)]=1\n                    else:\n                        D[(a,b,c)]+=1\n                    count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(l1,l2,l3):\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    count = 0\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(l1, l2, l3):\n    if len(l1) == 0 or len(l2) == 0 or len(l3) == 0:\n        return 0\n    count = 0\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j and i == k:\n                    count += 1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(lst1, lst2, lst3):\n    set1 = set(lst1)\n    set2 = set(lst2)\n    set3 = set(lst3)\n    count = 0\n    for i in set1:\n        for j in set2:\n            if j==i:\n                count+=1\n    for i in set1:\n        for j in set3:\n            if j==i:\n                count+=1\n    for i in set2:\n        for j in set3:\n            if j==i:\n                count+=1\n    return count\n\n# if __name__ == '__main__':\n#     lst1 = [1, 2, 3, 4, 5, 6, 7, 8]\n#     lst2 = [2, 2, 3, 1, 2, 6, 7, 9]\n#     lst3 = [2, 1, 3, 1, 2, 6, 7, 9]\n#     print(count_samepair(lst1, lst2, lst3))\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuple):\n    return len([i for i in tuple if isinstance(i, list)])\n\n\ndef test_find_lists():\n    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuples):\n    \"\"\"\n    arguments: tuple\n    return: int\n    \"\"\"\n    count = 0\n    for i in tuples:\n        if len(i) > 1:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    return sum([isinstance(i, list) for i in tup])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom collections import Counter\ndef find_lists(t):\n    return len(set(Counter(list(e) for e in t).values()))\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_list):\n    return len([True for tup in tuple_list if len(tup) == len(tuple_list[0])])\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\nfrom itertools import chain\nfrom functools import reduce\n\n\ndef find_lists(tuple_list):\n    return len(list(chain(*tuple_list)))\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(lists):\n    res = 0\n    for l in lists:\n        if isinstance(l, tuple):\n            res += 1\n    return res\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tup):\n    count = 0\n    for i in tup:\n        if type(i) == type(list()):\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    a = []\n    for i in t:\n        a.append(i)\n    a = set(a)\n    return len(a)\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuples):\n    count = 0\n    for i in tuples:\n        if len(i) >= 2:\n            count += 1\n    return count\n\n# -------------------------------------------------\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\nfrom typing import List\ndef sum_pairs(arr: List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            count += abs(arr[i] - arr[j])\n    return count\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(array,n):\n    sum = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            if i!=j:\n                sum = sum+abs(array[i]-array[j])\n    return sum", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, n):\n    if n == 0:\n        return 0\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += abs(arr[i]-arr[j])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_pairs(arr,n):\n\tsum=0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tsum+=abs(arr[i]-arr[j])\n\treturn sum\n\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += abs(arr[i]-arr[j])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\nfrom collections import defaultdict\n\ndef sum_Pairs(arr, k):\n    count = 0\n    count1 = 0\n    d = defaultdict(int)\n    for i in range(0,len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    for i in d:\n        if d[i] > 1:\n            if arr[i] + k in d:\n                if arr[i] == arr[i] + k:\n                    count += k * 2\n                    count1 += k\n                else:\n                    count += k\n                    count1 += k\n            else:\n                count += k\n    return count+count1\n\ndef main():\n    print(sum_Pairs([1, 8, 9, 15, 16], 5))\n\n\nmain()\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    s = 0\n    for i in range(n):\n        for j in range(n):\n            s += abs(arr[i] - arr[j])\n    return s\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_pairs(arr,n):\n    sum=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            sum+=abs(arr[i]-arr[j])\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    s1 = 0\n    for i in range(n):\n        s2 = 0\n        for j in range(i+1,n):\n            s2 += abs(arr[i]-arr[j])\n        s1 += s2\n    return s1\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, n):\n    count = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            count += abs(arr[i] - arr[j])\n    return count\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(nums, n):\n    nums = sorted(nums)\n    return nums[n-1] - nums[0]\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    # Your code here\n    arr.sort()\n    return max(arr[i]-arr[i-1] for i in range(1,n))\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    arr.sort()\n    x=arr[0]\n    for i in range(0,n-1):\n        y=abs(arr[i+1]-x)\n        if(y>max_diff):\n            max_diff=y\n        x=arr[i+1]\n    return max_diff\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    max_val = float(\"-inf\")\n    diff = float(\"-inf\")\n    for i in range(n-1):\n        diff = max(abs(arr[i+1] - arr[i]),diff)\n        max_val = max(max_val,diff)\n    return max_val\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    arr = sorted(arr)\n    if len(arr) < 2:\n        return 0\n    for i in range(len(arr)-1):\n        if abs(arr[i+1] - arr[i]) > abs(arr[-1] - arr[i]):\n            return abs(arr[-1] - arr[i])\n    return abs(arr[-1] - arr[0])\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,max_val):\n    max_val=abs(max_val)\n    return max(abs(x-y) for x in arr for y in arr if abs(x-y)>max_val)\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    temp = []\n    for i in range(n):\n        for j in range(i+1,n):\n            temp.append(abs(arr[i] - arr[j]))\n    return max(temp)\n\ndef main():\n    arr = (2,1,5,3)\n    n = len(arr)\n    print(\"The maximum difference between any two elements is\", max_Abs_Diff(arr,n))\n    \nmain()", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    arr.sort()\n    return arr[n-1]-arr[0]\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    l = list(arr)\n    l.sort()\n    print(l)\n    max_val = l[n-1] - l[0]\n    print(max_val)\n    for i in range(n-1):\n        print(l[i]-l[i+1])\n        if abs(l[i]-l[i+1]) > max_val:\n            max_val = abs(l[i]-l[i+1])\n    return max_val\n\n# max_Abs_Diff((2,1,5,3,4),5)\n# max_Abs_Diff((2,1,5,3,4),4)\nmax_Abs_Diff((2,1,5,3,4),3)", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,k):\n\t#Your code here\n\tarr.sort()\n\tans = 0\n\tfor i in range(len(arr)-1):\n\t\tans = max(ans,abs(arr[i+1]-arr[i])-k)\n\treturn ans\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return sum(ord(char) for char in string)\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    total_characters = 0\n    for char in string:\n        total_characters += ord(char)\n    return total_characters\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\nimport string\n\n\ndef ascii_value_string(s):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    assert ascii_value_string(\"python\")==112\n    \"\"\"\n    list_char = list(s)\n    total = 0\n    for char in list_char:\n        total += ord(char)\n    return total\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(s):\n    return sum([ord(c) for c in s])\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    total_ascii = 0\n    for c in string:\n        total_ascii += ord(c)\n    return total_ascii\n\n# print(ascii_value_string(\"python\"))", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(text):\n    \"\"\"\n    Args:\n       text(string): string to be checked\n    Returns:\n       int: ascii value of total characters in the string\n    \"\"\"\n    total_chars = 0\n    for char in text:\n        total_chars = total_chars + ord(char)\n    return total_chars\n\ndef main():\n    data = input()\n    print(ascii_value_string(data))\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    s = s.lower()\n    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum\n\n\n#assert ascii_value_string(\"Python\")== 112\n#assert ascii_value_string(\"python\")==112\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\n#include<stdio.h>\nint ascii_value_string(const char *s)\n{\n    int i,total=0;\n    char *p;\n    for(p=s;*p;p++)\n        total+=*p;\n    return total;\n}\n\nint main()\n{\n    printf(\"%d\\n\",ascii_value_string(\"python\"));\n    return 0;\n}", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    return sum(ord(c) for c in s)\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\n#Solution 1\ndef ascii_value_string(string):\n  return sum(ord(i) for i in string)\n  "], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[row][col]\n\n    path_sum = triangle[row][col]\n    left = max_path_sum(triangle, row - 1, col)\n    right = max_path_sum(triangle, row - 1, col - 1)\n\n    path_sum = max(left, right) + triangle[row][col]\n    return path_sum\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\n\nfrom utils.matrix import *\nfrom utils.tree import *\n\n\ndef max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[0][col]\n    if row == 1:\n        return max(triangle[0][col], triangle[1][col])\n\n    memo = {}\n    memo[0, col] = triangle[0][col]\n    memo[1, col] = max(triangle[0][col], triangle[1][col])\n\n    for i in range(2, row):\n        max_val = -sys.maxsize\n        for j in range(col):\n            max_val = max(max_val, triangle[i][j] + memo[(i-1, j), (i-1, j+1)])\n        memo[i, col] = max_val\n    return memo[row-1, col]\n\n\ndef max_path_sum_v2(triangle):\n    @lru_cache(None)\n    def dfs(row, col):\n        if row == 0:\n            return triangle[0][col]\n        if row == 1:\n            return max(triangle[0][col], triangle[1][col])\n        max_val = -sys.maxsize\n        for j in range(col):\n            max_val = max(max_val, triangle[row][j] + dfs(row-1, j))\n        return max_val\n\n    return dfs(len(triangle)-1, len(triangle[0])-1)\n\n\ndef max_path_sum_v3(triangle):\n    # all three solution are same\n    memo = {}\n    memo[0, 0] = triangle[0][0]\n    for i in range(1, len(triangle)):\n        memo[i, 0] = triangle[i][0] + max(memo[i-1, 0], memo[i-1, 1])\n    for i in range(1, len(triangle[0])):\n        memo[0, i", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom typing import List\n\ndef max_path_sum(triangle: List[List[int]], row_idx: int, col_idx: int) -> int:\n    \"\"\"\n    Time complexity: O(n^2) where n is the length of the input triangle\n    Space complexity: O(n)\n    \"\"\"\n    if row_idx == len(triangle):\n        return triangle[-1][col_idx]\n    if col_idx == len(triangle[row_idx]):\n        return max_path_sum(triangle, row_idx+1, 0) + triangle[row_idx][col_idx]\n    current_val = max(triangle[row_idx][col_idx], triangle[row_idx][col_idx+1], triangle[row_idx+1][col_idx]) + max_path_sum(triangle, row_idx, col_idx+1)\n    return current_val\n\ndef max_path_sum_backtracking(triangle: List[List[int]], row_idx: int, col_idx: int) -> int:\n    \"\"\"\n    Time complexity: O(n^2) where n is the length of the input triangle\n    Space complexity: O(n)\n    \"\"\"\n    if row_idx == len(triangle):\n        return triangle[-1][col_idx]\n    if col_idx == len(triangle[row_idx]):\n        return max_path_sum_backtracking(triangle, row_idx+1, 0) + triangle[row_idx][col_idx]\n    current_val = max(triangle[row_idx][col_idx], triangle[row_idx][col_idx+1], triangle[row_idx+1][col_idx])\n    if row_idx+1 == len(triangle):\n        return current_val + triangle[row_idx][col_idx]\n    return max(current_val + triangle[row_idx][col_idx], max_path_sum_backtracking(triangle, row_idx, col_idx+1))\n\ndef test_max_path_sum():", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nimport unittest\n\n\ndef max_path_sum(triangle, i, j):\n    \"\"\"Find the maximum total path sum in the given triangle.\n\n    :param triangle: The list of lists representing the triangle.\n    :param i: The index of the row to start at.\n    :param j: The index of the column to start at.\n    :returns: The maximum total path sum in the given triangle.\n    \"\"\"\n    total_path_sum = 0\n    if i == triangle.shape[0]:\n        return total_path_sum\n    else:\n        total_path_sum = max(\n            total_path_sum,\n            triangle[i][j] + max(\n                max_path_sum(triangle, i + 1, j),\n                max_path_sum(triangle, i + 1, j + 1),\n            ),\n        )\n    return total_path_sum\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    \"\"\"\n    Returns the maximum total path sum in the given triangle from row 0 to row n.\n    \"\"\"\n    if row == 0:\n        return triangle[row][col]\n    elif row == col:\n        return max(triangle[row][col], triangle[row-1][col-1], triangle[row-1][col])\n    else:\n        a = max(triangle[row][col], triangle[row-1][col], triangle[row-1][col-1])\n        b = max_path_sum(triangle, row-1, col-1)\n        c = max_path_sum(triangle, row-1, col)\n        return max(a, b, c)\n\n# test cases", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(arr, i, j):\n    path = 0\n    for m in range(i, j):\n        path = max(path, max_path_sum(arr, i, m) + arr[i][m] + max_path_sum(arr, m, j))\n    return path\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(matrix, startRow, startCol):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type startRow: int\n    :type startCol: int\n    :rtype: int\n    \"\"\"\n    rows = len(matrix)\n    cols = len(matrix[0])\n    dp = [[0 for col in range(cols)] for row in range(rows)]\n    max_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            dp[i][j] = matrix[i][j] + max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n            max_sum = max(max_sum, dp[i][j])\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, i, j):\n    max_so_far = triangle[i][j]\n    if i == 0:\n        return triangle[i][j]\n    if i == 1:\n        return max(triangle[i][j], triangle[i][j] + triangle[i-1][j])\n    if i == 2:\n        return max(triangle[i][j], triangle[i][j] + triangle[i-1][j], triangle[i][j] + triangle[i-2][j])\n    for k in range(j+1, i):\n        # The maximum sum is the sum of the max of the two path starting at k-1 and k+1.\n        max_so_far = max(max_so_far, triangle[i][j] + max(triangle[i-1][k-1], triangle[i-2][k]))\n    return max_so_far\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, x_index, y_index):\n    \"\"\"\n    Best case: O(n)\n    Average case: O(n)\n    Worst case: O(n)\n    \"\"\"\n    if x_index == y_index == 0:\n        return triangle[x_index][y_index]\n\n    # Find the maximum sum of the last row\n    max_sum_of_last_row = triangle[x_index][y_index]\n    for row in triangle:\n        max_sum_of_last_row = max(max_sum_of_last_row, row[x_index])\n\n    # Find the maximum sum from the last row to the current row\n    for y in range(y_index, -1, -1):\n        max_sum_from_last_row = triangle[x_index][y]\n        for x in range(x_index, -1, -1):\n            max_sum_from_last_row = max(max_sum_from_last_row, triangle[x][y] + max_sum_of_last_row)\n\n    return max_sum_from_last_row", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    sum_digits=0\n    while n>0:\n        sum_digits += (n%10)\n        n=n//10\n    return sum_digits\n\ndef sum_digits_twoparts_improved(n):\n    sum_digits=0\n    for i in range(n):\n        sum_digits += (n%10)\n        n=n//10\n    return sum_digits\n\ndef sum_digits_twoparts_func(n):\n    return sum([int(i) for i in str(n)])\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n\n    parts = [sum([int(i) for i in str(num)])]\n    prev_sum = sum([int(i) for i in str(num)])\n    for i in range(0, len(str(num))):\n        sum_parts = sum([int(i) for i in str(num)])\n        if sum_parts > prev_sum:\n            prev_sum = sum_parts\n            parts.append(sum([int(i) for i in str(num)]))\n\n    return max(parts)", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(number):\n    if number < 10:\n        return number\n\n    mod = number%10\n    number = number//10\n    return sum_digits_twoparts(number)+mod\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    l = [int(i) for i in str(num)]\n    s = []\n    for i in l:\n        s.append(i)\n    l2 = sum(s)\n    return l2\n\n# print(sum_digits_twoparts(35))", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(number):\n    # Write your code here\n    if number < 0:\n        number *= -1\n    ones = 0\n    while number > 0:\n        ones += number % 10\n        number //= 10\n    return ones", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(number):\n\n    if number < 0:\n        return 'number should be a positive number'\n\n    max_sum = 0\n    max_sum_div_10 = 0\n    while number > 0:\n        number = number // 10\n        num_digit = number % 10\n        max_sum_div_10 = num_digit + max_sum_div_10\n        max_sum = max_sum_div_10\n        if num_digit < 0:\n            return 'number should be a positive number'\n\n    return max_sum\n\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    ans = []\n    n = str(n)\n    for i in range(len(n)):\n        if i%2 == 0:\n            ans.append(int(n[i]))\n        else:\n            ans.append(int(n[i])*2)\n    s = 0\n    for i in range(len(ans)):\n        s += ans[i]\n    if s > 10:\n        return sum_digits_twoparts(s)\n    else:\n        return s\n    ", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(number):\n    if number<10:\n        return number\n    else:\n        digit_part = number // 10\n        remainder_part = number % 10\n        return sum_digits_twoparts(digit_part) + sum_digits_twoparts(remainder_part)\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\n#idea : not so good\ndef sum_digits_twoparts(number):\n    result = 0\n    while number > 0:\n        result += number % 10\n        number //= 10\n    return result\n    ", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\n# O(log(n)) time | O(1) space\ndef sum_digits_twoparts(num):\n    if num < 10:\n        return num\n    left, right = 0, 0\n    while num > 0:\n        left += num % 10\n        num //= 10\n        right += num % 10\n        num //= 10\n    return max(left, right)"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(A, diff):\n    A = sorted(A)\n    for i in range(len(A)):\n        if A[i] == 0 or A[i] == diff:\n            continue\n        j = i + 1\n        k = len(A) - 1\n        while j < k:\n            if A[j] - A[i] == 1 or A[k] - A[i] == 1:\n                j += 1\n            else:\n                break\n        if j == k:\n            return j - i\n    return 0\n\ndef main():\n    # Input array\n    A = [1, 2, 3, 4, 5, 3, 2]\n    # Value of diff\n    diff = 7\n    # Calling the function\n    print(\"The length of the longest subsequence with difference one is\", longest_subseq_with_diff_one(A, diff))\n\nmain()", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, diff):\n    lis = [0]*len(arr)\n    for i in range(len(arr)):\n        lis[i] = 1\n        for j in range(i):\n            if (abs(arr[j] - arr[i]) == diff):\n                lis[i] = max(lis[i], lis[j] + 1)\n    return max(lis)\n\narr = [1, 2, 3, 4, 5, 3, 2]", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    arr = [arr[0]] + arr + [arr[-1]]\n    mx = 0\n    for i in range(1, len(arr) - 1):\n        temp = 0\n        for j in range(i, len(arr)):\n            if arr[j] - arr[i] == 1:\n                temp += 1\n            mx = max(mx, temp)\n    return mx\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom collections import Counter\nfrom itertools import count\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(arr: List[int], difference_one: int) -> int:\n    if not arr:\n        return 0\n\n    cnt = Counter(arr)\n    odd_cnt = cnt[1] + cnt[-1]\n    cnt[1] = cnt.get(1, 0) // 2\n    cnt[-1] = cnt.get(-1, 0) // 2\n    while odd_cnt:\n        if difference_one + 1 in cnt and cnt[difference_one + 1]:\n            cnt[difference_one + 1] -= 1\n            odd_cnt -= 1\n        else:\n            difference_one += 2\n\n    return difference_one + cnt[0] + cnt[-1]\n\n\ndef longest_subseq_with_diff_one_2(arr: List[int], difference_one: int) -> int:\n    if not arr:\n        return 0\n\n    cnt = Counter(arr)\n    odd_cnt = cnt[1] + cnt[-1]\n    cnt[1] = cnt.get(1, 0) // 2\n    cnt[-1] = cnt.get(-1, 0) // 2\n    if odd_cnt:\n        cnt[difference_one + 1] += odd_cnt\n\n    difference_one += 1\n    for k in cnt:\n        difference_one += cnt[k]\n\n    return difference_one\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\n# a simple brute force approach can be used\ndef brute_force(arr):\n    # find the max sub array and then find the diff between adjacent\n    if len(arr) == 1:\n        return 1\n    max_len = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            curr_len = 1\n            curr = arr[i]\n            prev = arr[j]\n            while curr != prev:\n                if curr + 1 == prev:\n                    curr_len += 1\n                    curr += 1\n                    prev -= 1\n                elif curr - 1 == prev:\n                    curr_len += 1\n                    curr -= 1\n                    prev += 1\n                else:\n                    break\n            max_len = max(max_len, curr_len)\n    return max_len\n\n# the above approach can be optimized as follows\ndef optimised_brute_force(arr):\n    if len(arr) == 1:\n        return 1\n    max_len = 1\n    for i in range(len(arr)):\n        curr_len = 1\n        curr = arr[i]\n        for j in range(i+1, len(arr)):\n            prev = arr[j]\n            while curr != prev:\n                if curr + 1 == prev:\n                    curr_len += 1\n                    curr += 1\n                    prev -= 1\n                elif curr - 1 == prev:\n                    curr_len += 1\n                    curr -= 1\n                    prev += 1\n                else:\n                    break\n            max_len = max(max_len, curr_len)\n    return max_len\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(array, n):\n    if len(array) <= 1:\n        return len(array)\n\n    dp = [0]*(n+1)\n\n    # Initialize the values of dp[0] as 1\n    for i in range(1, len(dp)):\n        dp[i] = 1\n\n    for i in range(1, len(dp)):\n        for j in range(0, len(array)):\n            if array[j] == i:\n                if i == dp[i-1]:\n                    dp[i] = dp[i-1] + 1\n                else:\n                    dp[i] = dp[i-1]\n\n    return max(dp)\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    # Your code here\n    window = {}\n    for i in range(n):\n        if arr[i] in window:\n            window[arr[i]] += 1\n        else:\n            window[arr[i]] = 1\n    max_len = 0\n    res = 0\n    for k, v in window.items():\n        if k + 1 in window:\n            if window[k + 1] == v:\n                max_len = max(max_len, v + 1)\n        else:\n            max_len = max(max_len, v)\n        res += max_len\n    return res\n\n\n# Tests", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    # Your code here\n    if len(arr)==1:\n        return 1\n    dp = [1 for i in range(n+1)]\n    max_len = 1\n    for i in range(2,n+1):\n        for j in range(1,i):\n            if (arr[j-1] != arr[i-1]) and (dp[j-1] + 1 > dp[i-1]):\n                dp[i] = dp[j-1] + 1\n                max_len = max(max_len, dp[i])\n    return max_len\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, k):\n    dp = [[0 for _ in range(k + 1)] for _ in range(len(arr))]\n\n    for i in range(len(arr)):\n        for j in range(k, -1, -1):\n            if j == 0:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = 1 if arr[i] != arr[i - 1] else 0\n            else:\n                dp[i][j] = dp[i - 1][j - 1] if arr[i] == arr[i - 1] else max(dp[i - 1][j], dp[i - 1][j - 1])\n\n    print(dp)\n    return dp[-1][k]\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\n# time complexity: O(nlogn), space complexity: O(n)\ndef longest_subseq_with_diff_one(arr, sum):\n    def backtrack(arr, i, curr_sum, prefix):\n        if curr_sum >= sum:\n            return\n        if curr_sum < sum:\n            return\n        prefix = prefix + [arr[i]]\n        dp[curr_sum] = max(dp[curr_sum], 1 + dp[curr_sum - arr[i]])\n        backtrack(arr, i + 1, curr_sum, prefix)\n        dp[curr_sum] = max(dp[curr_sum], dp[curr_sum - arr[i]])\n        backtrack(arr, i + 1, curr_sum, prefix)\n        prefix = prefix[:-1]\n\n    dp = [0] * (sum + 1)\n    backtrack(arr, 0, 0, [])\n    return dp[-1]\n\n\n# time complexity: O(n), space complexity: O(n)\ndef longest_subseq_with_diff_one_dp(arr, sum):\n    dp = [0] * (sum + 1)\n    for i in range(1, sum + 1):\n        for j in range(len(arr)):\n            if arr[j] <= i:\n                dp[i] = max(dp[i], dp[i - arr[j]] + 1)\n    return dp[-1]\n\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n# Write your code here\ndef does_Contain_B(start_index, end_index, B):\n    if (start_index >= end_index):\n        return False\n    if (start_index > end_index):\n        return False\n    for i in range(start_index, end_index):\n        if(B == i):\n            return True\n    return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\n# Recursive solution\ndef does_Contain_B(a,b,c):\n    if (a == b) or (a == c):\n        return True\n    if (b == c):\n        return does_Contain_B(a,c,b)\n    return does_Contain_B(a,b,c)\n\n\n# Dynamic Programming solution\ndef does_Contain_B_DP(a, b, c):\n    memo = {}\n    return does_Contain_B_DP_helper(a, b, c, memo)\n\n\ndef does_Contain_B_DP_helper(a, b, c, memo):\n    # Base Case\n    if a == b:\n        return True\n    if a == c:\n        return True\n    if b == c:\n        return does_Contain_B_DP_helper(a, c, b, memo)\n\n    # Check if this combination is already in memo\n    if (a, b, c) in memo:\n        return memo[(a, b, c)]\n\n    # recursion\n    ans = False\n    if a > b:\n        ans = does_Contain_B_DP_helper(a-b, b, c, memo)\n    if c > b:\n        ans = does_Contain_B_DP_helper(a, b, c-b, memo)\n    ans = ans or does_Contain_B_DP_helper(a, b, c, memo)\n\n    memo[(a, b, c)] = ans\n    return ans\n\n\n# Main", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    if a == b == c:\n        return True\n    if a == b or b == c or a == c:\n        return False\n    else:\n        return does_Contain_B(a,b,c)\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(n1, n2, n3):\n    if n1 == n2 == n3:\n        return True\n    elif n1 != n2 != n3:\n        return False\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,c):\n    i=a\n    while i<=b:\n        if i==c:\n            return True\n        i+=1\n    return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(num, k, m):\n    if num == k or num == m:\n        return True\n\n    if num > k and num < m:\n        if is_palindrome(num):\n            return True\n        else:\n            return False\n    else:\n        return does_Contain_B(num, k+1, m)\n\ndef is_palindrome(num):\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\ndef main():\n    print(does_Contain_B(1, 7, 3))\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(A, B, n):\n    #Your code goes here\n    #Note: Use while loop\n    count=0\n    temp=A\n    while(temp!=B):\n        count+=1\n        temp=temp+n\n    if count==0:\n        return False\n    return True\n\n\ndef main():\n    A=int(input(\"Enter A: \"))\n    B=int(input(\"Enter B: \"))\n    n=int(input(\"Enter n: \"))\n    print(does_Contain_B(A, B, n))\n\n\nmain()", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\n# Python3 program to check whether a number is \n# present in the infinite sequence or not \n\n# Function to find whether a number is present \n# in the infinite sequence or not \ndef does_Contain_B(A, B, n): \n\n\t# Loop to find the value of n and check whether \n\t# it is equal to A or not \n\tfor i in range(n): \n\t\tif A == n: \n\t\t\treturn True\n\n\t# Return false as B is not present in infinite \n\t# sequence \n\treturn False\n\n\n# Driver code ", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(A,B,N):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    if A > B:\n        return False\n    else:\n        for i in range(A,N,B):\n            if i == B:\n                return True\n        return False\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(A,B,C):\n    if A*B*C < 0:\n        return True\n    return False\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\nfrom functools import reduce\ndef is_coprime(a, b):\n    if b == 0:\n        return True\n    elif a % b == 0:\n        return False\n    else:\n        return is_coprime(b, a % b)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef is_coprime_math(a,b):\n    return gcd(a,b) == 1\n\ndef is_coprime_simple(a,b):\n    return not reduce(lambda x,y: x*y, [x for x in range(1,b+1) if x*a % b == 0])\n\ndef is_coprime_using_reduce(a,b):\n    # reduce takes the function and the sequence and reduce the sequence down to one. \n    return reduce(lambda x,y: x*y, [x for x in range(1,b+1) if x*a % b == 0]) == 1\n\ndef is_coprime_using_lambda(a,b):\n    return len(list(filter(lambda x: x != 0, [x for x in range(1,b+1) if x*a % b == 0]))) == 0\n\ndef is_coprime_using_mod_and_div(a,b):\n    if a%b == 0 and b!=0:\n        return False\n    if a==b==0:\n        return True\n    else:\n        return is_coprime_using_mod_and_div(b,a%b)\n\ndef is_coprime_using_gcd(a,b):\n    return gcd(a,b) == 1\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    # Your code here\n    gcd=gcd(a,b)\n    if gcd==1:\n        return True\n    else:\n        return False\n\ndef gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(x,y):\n    while(y):\n        if((x % y == 0) and (y % x == 0)):\n            return False\n        x,y = y,x%y\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\n#NOTE : Function should take in two numbers and return True if they are co-prime\n\ndef is_coprime(x,y):\n    \"\"\"\n    Return True if the two numbers are co-prime\n    \"\"\"\n    if x == 1:\n        return True\n    elif y == 1:\n        return True\n    else:\n        return False\n\n#assert tests", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: bool\n    \"\"\"\n    if a == 0 or b == 0:\n        return False\n    while b != 0:\n        if a == b:\n            return False\n        a, b = b, a % b\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    # Write your logic here\n    for x in range(1,a):\n        if a % x == 0 and b % x == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(m,n):\n    if gcd(m,n) == 1:\n        return True\n    return False\n\n\n# +\ndef gcd(a,b):\n    \"\"\"\n    a,b: integers\n    returns: greatest common divisor\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a,b):\n    \"\"\"\n    a,b: integers\n    returns: least common multiple\n    \"\"\"\n    return abs(a*b)/gcd(a,b)\n\n\n# -\n\ndef gcd(a, b):\n    \"\"\"returns the greatest common divisor of a and b\"\"\"\n    while b != 0:\n        a, b = b, a%b\n    return a\n\n\ndef lcm(a, b):\n    \"\"\"returns the least common multiple of a and b\"\"\"\n    return abs(a*b)/gcd(a,b)\n\n\n# +\ndef gcd(a,b):\n    \"\"\"\n    a,b: integers\n    returns: greatest common divisor\n    \"\"\"\n    if a == b:\n        return a\n    while b != 0:\n        a,b = b,a%b\n    return a\n\n\ndef lcm(a,b):\n    \"\"\"\n    a,b: integers\n    returns: least common multiple\n    \"\"\"\n    return a*b/gcd(a,b)\n\n\n# +\ndef gcd(a,b):\n    \"\"\"\n    a,b: integers\n    returns: greatest common divisor\n    \"\"\"\n    a, b = max(a, b), min(a, b)\n    while b != 0:\n        a, b = b, a%b\n    return a\n\ndef lcm(a,b):\n    \"\"\"\n    a,b: integers\n    returns: least common multiple\n    \"\"\"\n    return a*b/gcd(a,b)\n\n\n# -\n\ndef gcd(a,b):\n    \"\"\"\n    a,b: integers\n    returns: greatest common divisor\n    \"\"\"\n    while b != 0:\n        a,b = b,a%b\n    return a\n\n\ndef lcm(a,b):\n    \"\"\"\n    a,b: integers\n    returns: least common multiple\n    \"\"\"\n    return a*b", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\nimport math\n\ndef is_coprime(a,b):\n    if a == 0 or b == 0:\n        return False\n    else:\n        if a == b:\n            return True\n        else:\n            d = math.gcd(a,b)\n            if d != 1:\n                return False\n            else:\n                return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if gcd(a,b)!=1:\n        return False\n    return True\n\ndef gcd(a,b):\n    while b>0:\n        c=b\n        b=a%b\n        a=c\n    return a\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(x, y):\n    \"\"\"\n    Co-prime numbers are numbers that can be divided by only one number\n    except for themselves.\n    \"\"\"\n    if x < 2 or y < 2:\n        return False\n    return all(x % i for i in range(2, y)) and all(y % i for i in range(2, x))"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom random import randint\nfrom typing import List\n\nfrom data_structures.binary_tree import Node, BinaryTree\nfrom data_structures.binary_tree.binary_tree_helper import convert_to_binary_tree\n\n\ndef merge(left: List, right: List) -> List:\n    \"\"\"\n    merge two sublists\n    :param left: sublist left\n    :param right: sublist right\n    :return: merged list\n    \"\"\"\n    result = []\n    l = len(left)\n    r = len(right)\n\n    i = 0\n    j = 0\n\n    while i < l and j < r:\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\n\ndef merge_sort(array: List) -> List:\n    \"\"\"\n    recursive implementation\n    :param array: input array\n    :return: sorted array\n    \"\"\"\n    if len(array) == 1:\n        return array\n\n    mid = len(array) // 2\n    left = merge_sort(array[:mid])\n    right = merge_sort(array[mid:])\n    return merge(left, right)\n\n\ndef merge_sort_top_down(array: List) -> List:\n    \"\"\"\n    recursive implementation\n    :param array: input array\n    :return: sorted array\n    \"\"\"\n    if len(array) == 1:\n        return array\n\n    tree = BinaryTree()\n    for num in array:\n        tree.add(num)\n\n    def find_middle(node):\n        \"\"\"\n        find the mid point of the given tree\n        :param node: root node\n        :return: the mid point node\n        \"\"\"\n        if node.left is None and node.right is None:\n            return node\n\n        mid_left = find_middle(node.left)\n        mid_right = find_middle(node.right)\n\n        if mid_left.value > mid_right.", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom typing import List\nfrom typing import Callable\n\n\ndef merge_sort(list_to_sort: List[int]) -> List[int]:\n    \"\"\"\n    Sorts the list passed as argument.\n\n    Args:\n        list_to_sort (List[int]): The list to be sorted.\n\n    Returns:\n        List[int]: The sorted list.\n    \"\"\"\n    if len(list_to_sort) <= 1:\n        return list_to_sort\n\n    middle_index = len(list_to_sort) // 2\n\n    left_list = list_to_sort[:middle_index]\n    right_list = list_to_sort[middle_index:]\n\n    return merge(merge_sort(left_list), merge_sort(right_list))\n\n\ndef merge(list_1: List[int], list_2: List[int]) -> List[int]:\n    \"\"\"\n    Merges two sorted lists.\n\n    Args:\n        list_1 (List[int]): The first list to be merged.\n        list_2 (List[int]): The second list to be merged.\n\n    Returns:\n        List[int]: The merged list.\n    \"\"\"\n    list_to_return = []\n    list_1_index = 0\n    list_2_index = 0\n\n    while list_1_index < len(list_1) and list_2_index < len(list_2):\n        if list_1[list_1_index] <= list_2[list_2_index]:\n            list_to_return.append(list_1[list_1_index])\n            list_1_index += 1\n        else:\n            list_to_return.append(list_2[list_2_index])\n            list_2_index += 1\n\n    while list_1_index < len(list_1):\n        list_to_return.append(list_1[list_1_index])\n        list_1_index += 1\n\n    while list_2_index < len(list_2):\n        list", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) == 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    left_idx = 0\n    right_idx = 0\n    while left_idx < len(left) and right_idx < len(right):\n        if left[left_idx] < right[right_idx]:\n            result.append(left[left_idx])\n            left_idx += 1\n        else:\n            result.append(right[right_idx])\n            right_idx += 1\n    while left_idx < len(left):\n        result.append(left[left_idx])\n        left_idx += 1\n    while right_idx < len(right):\n        result.append(right[right_idx])\n        right_idx += 1\n    return result\n\n\ndef test_merge_sort():\n    assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\nfrom random import shuffle\n\n\ndef merge(left, right):\n    result = []\n    left, right = iter(left), iter(right)\n    while True:\n        try:\n            left_val = next(left)\n            right_val = next(right)\n        except StopIteration:\n            if left_val:\n                result.append(left_val)\n            if right_val:\n                result.append(right_val)\n            break\n        if left_val < right_val:\n            result.append(left_val)\n            result.append(right_val)\n        else:\n            result.append(right_val)\n            result.append(left_val)\n    return result\n\n\ndef merge_sort(array):\n    if len(array) == 1:\n        return array\n    mid = len(array) // 2\n    left, right = merge_sort(array[:mid]), merge_sort(array[mid:])\n    return merge(left, right)\n\n\ndef test_merge_sort():\n    array = [3, 4, 2, 6, 5, 7, 1, 9]\n    assert merge_sort(array) == [1, 2, 3, 4, 5, 6, 7, 9]\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom typing import List\n\n\ndef merge_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Space Complexity: O(N)\n    Time Complexity: O(N*logN)\n    \"\"\"\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums) // 2\n    left = merge_sort(nums[:mid])\n    right = merge_sort(nums[mid:])\n    return merge(left, right)\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    res = []\n    while len(left) and len(right):\n        if left[0] <= right[0]:\n            res.append(left.pop(0))\n        else:\n            res.append(right.pop(0))\n    res += left + right\n    return res", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\n\ndef merge(left, right):\n    res = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            res.append(left[i])\n            i += 1\n        else:\n            res.append(right[j])\n            j += 1\n    while i < len(left):\n        res.append(left[i])\n        i += 1\n    while j < len(right):\n        res.append(right[j])\n        j += 1\n    return res\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n        merge_sort(left)\n        merge_sort(right)\n\n        i, j, k = 0, 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(unsorted_list):\n    if len(unsorted_list) > 1:\n        mid = len(unsorted_list) // 2\n        left_half = unsorted_list[:mid]\n        right_half = unsorted_list[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n        i = 0\n        j = 0\n        k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                unsorted_list[k] = left_half[i]\n                i = i + 1\n            else:\n                unsorted_list[k] = right_half[j]\n                j = j + 1\n            k = k + 1\n        while i < len(left_half):\n            unsorted_list[k] = left_half[i]\n            i = i + 1\n            k = k + 1\n        while j < len(right_half):\n            unsorted_list[k] = right_half[j]\n            j = j + 1\n            k = k + 1\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(A):\n    # write your code here\n    if len(A) < 2:\n        return A\n    left = A[0:len(A)/2]\n    right = A[len(A)/2:len(A)]\n    return merge(merge_sort(left), merge_sort(right))\n\n\ndef merge(left, right):\n    i = 0\n    j = 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n    return result\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\nfrom typing import List\n\n\ndef merge_sort(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Complexity:\n        - Time: O(nlog(n))\n        - Space: O(n)\n    \"\"\"\n    if not numbers:\n        return numbers\n\n    if len(numbers) == 1:\n        return numbers\n\n    mid = len(numbers) // 2\n    left = numbers[:mid]\n    right = numbers[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    result = merge(left, right)\n    return result\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"\n    Complexity:\n        - Time: O(n)\n        - Space: O(n)\n    \"\"\"\n    result = []\n    left_index = 0\n    right_index = 0\n    while len(result) < len(left) + len(right):\n        if left_index >= len(left) or right_index >= len(right):\n            result.append(left[left_index] if left_index < len(left) else right[right_index])\n            left_index += 1\n            right_index += 1\n        elif left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n\n    return result\n\n\ndef main():\n    numbers = [3, 4, 2, 6, 5, 7, 1, 9]\n    print(merge_sort(numbers))\n\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    # write your code here\n    a = a\n    b = b\n    c = c\n    x = (-b)/(2*a)\n    y = (-c)/(a)\n    print(x,y)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    from sympy import solve\n    v = solve(b*x**2 + a*x + c, x)\n    return v\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    discriminant = (b**2) - 4*a*c\n    if discriminant>0:\n        return ((-b + math.sqrt(discriminant))/(2*a), (-b - math.sqrt(discriminant))/(2*a))\n    else:\n        print(\"discriminant is negative\")\n        return None\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a, b, c):\n    d = (b**2) - 4 * a * c\n    return (-b + np.sqrt(d)) / (2 * a), (-b - np.sqrt(d)) / (2 * a)\n\n\ndef test_parabola_vertex():\n    assert parabola_vertex(5, 3, 2) == (-0.3, 1.55)\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    delta = (b**2)-4*a*c\n    if delta < 0:\n        return None\n    return ((-b + delta**0.5)/(2*a), (-b - delta**0.5)/(2*a))\n\n# Testing", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a, b, c):\n    # Complete the function\n    return (-b/(2*a), -c/(2*a**2))\n\n# Test", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a,b,c):\n    return ((-b+(b**2-4*a*c)**0.5)/(2*a), (-b-(b**2-4*a*c)**0.5)/(2*a))\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n\tx=(-b+math.sqrt(b**2-4*a*c))/(2*a)\n\ty=0\n\treturn (x,y)\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    x0 = -b/2/a\n    y0 = a*x0**2+b*x0+c\n    return (x0, y0)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    d = b*b-4*a*c\n    x1 = (-b+sqrt(d))/(2*a)\n    x2 = (-b-sqrt(d))/(2*a)\n    if x1<x2:\n        return(x1, (a*x1**2+b*x1+c)/(2*a))\n    return(x2, (a*x2**2+b*x2+c)/(2*a))\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l,p):\n    ls=[]\n    for i in range(0,len(l)):\n        ls.append(l[i][p])\n    return ls\n    ", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list, elem):\n    if type(list) is not list:\n        return \"list is not a list\"\n    return [list[i][elem] for i in range(len(list))]\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list, index):\n\treturn [list[index]]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(input_list, idx):\n    result = []\n    for row in input_list:\n        result.append(row[idx])\n    return result\n\ninput_list = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(given_list,idx):\n    list_return = []\n    for i in given_list:\n        list_return.append(i[idx])\n    return list_return\n\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(lst, position):\n    output = []\n    for i in range(len(lst)):\n        output.append(lst[i][position])\n    return output\n\n# Test your solution here", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list, pos):\n    return [x[pos] for x in list]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(matrix, value):\n    result = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == value:\n                result.append(matrix[i][j])\n    return result\n\ndef main():\n    print(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2))\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\nfrom itertools import starmap\n\ndef specified_element(lst, elem):\n    return [list(starmap(lambda x,y:x if y==elem else y,lst[i])) for i in range(len(lst))]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(arr, num):\n    return [arr[i][num] for i in range(len(arr))]\n\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(x):\n    \"\"\"\n    :param x: A number\n    :return: The bitwise XOR of the number and 1\n    \"\"\"\n    return x ^ 1\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(x):\n    return x & 0x555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    assert n>=0, \"n should be greater than equal to 0\"\n    while n > 0:\n        n = n ^ 1\n    return n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# Write your code here\ndef even_bit_toggle_number(number):\n    bin_str = bin(number)\n    new_bin_str = ''\n    for i in range(len(bin_str)):\n        if bin_str[i] == '1':\n            new_bin_str += '0'\n        else:\n            new_bin_str += '1'\n    return int(new_bin_str, 2)\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    \"\"\"\n    :param number: a given number\n    :return: the even bit toggled version of the given number\n    \"\"\"\n    number = int(number)\n    even_bit_list = []\n    while number:\n        even_bit_list.append(number & 1)\n        number >>= 1\n    even_bit_list.reverse()\n    for i in range(len(even_bit_list)):\n        if even_bit_list[i] == 0:\n            even_bit_list[i] = 1\n        else:\n            even_bit_list[i] = 0\n    return int(''.join(str(i) for i in even_bit_list))\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    if num == 0:\n        return 0\n    num = num & (num-1)\n    return num", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\nimport math\n\ndef even_bit_toggle_number(n):\n    n &= ~(-1 << n)\n    return n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    if type(num) != int:\n        return \"The number must be an integer.\"\n    return num ^ (num & -num)\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    \"\"\"\n    The function takes a number n as input, iterates over all the bits of the number (one at a time), checks whether the\n    bit is even or odd, and toggles the bit if it is even.\n    \"\"\"\n    n = str(n)\n    n = list(map(int, n))\n\n    for bit in n:\n        if bit % 2 == 0:\n            n[n.index(bit)] = 1\n        else:\n            n[n.index(bit)] = 0\n\n    return int(\"\".join(map(str, n)))", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    bit_num = 0\n    while num > 0:\n        if (num & 1) == 1:\n            num = num ^ (1<<bit_num)\n        bit_num += 1\n    return num\n\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup_str):\n    \"\"\"\n    Input:\n        tup_str: Tuple of string values\n    Output:\n        new_tup: Tuple of string values\n    \"\"\"\n    new_tup = tuple((int(val_str[0]), int(val_str[1])) for val_str in tup_str)\n    return new_tup\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\nfrom __future__ import division\ndef tuple_int_str(tuples):\n    return tuple([tuple(map(int, x)) for x in tuples])\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(values_str):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    values = []\n    for i in values_str:\n        try:\n            values.append((int(i[0]), int(i[1])))\n        except:\n            values.append((i[0], i[1]))\n    return values\n\n\ndef test_tuple_int_str():\n    \"\"\"\n    Run doctests\n    \"\"\"\n    assert tuple_int_str((('333', '33'), ('1416', '55'))) == ((333, 33), (1416, 55))\n    assert tuple_int_str((('333', '33'), ('33', '55'))) == ((333, 33), (33, 55))\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_of_str):\n    return tuple((int(x),int(y)) for x,y in tuple_of_str)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tup):\n    return tuple((int(i), int(j)) for i, j in tup)\n\n# Test", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(t_str):\n  return tuple(int(a) for a in t_str)\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\nimport re\n\ndef tuple_int_str(inp):\n    \"\"\"Function to convert tuple of string values to tuple of integer values\n\n    Args:\n        inp (tuple): Tuple of string values\n\n    Returns:\n        tuple: Tuple of integer values\n\n    \"\"\"\n    out = ()\n    for x in inp:\n        out += (tuple(map(int, x)),)\n    return out\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(s_tuple):\n    s_tuple_int = []\n    for s in s_tuple:\n        s_tuple_int.append(tuple(map(int, s)))\n    return tuple(s_tuple_int)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(data):\n    new_data = []\n    for i in data:\n        new_data.append((int(i[0]), int(i[1])))\n    return new_data\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(t):\n    return tuple(map(lambda x: int(x[0]), t))\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(L):\n    L.sort()\n    encoded = []\n    cur = 0\n    val = L[cur]\n    while cur < len(L)-1:\n        if L[cur+1] == val:\n            cur += 1\n        else:\n            encoded.append([L[cur], cur-cur])\n            cur += 1\n            val = L[cur]\n    return encoded\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(list):\n    \"\"\"\n    >>> encode_list([1,1,2,3,4,4.3,5,1])\n    [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    \"\"\"\n    l = []\n    for x in list:\n        if x not in l:\n            l.append(x)\n    for x in l:\n        if l.count(x) > 1:\n            l[l.index(x)] = [x, l.count(x)]\n        else:\n            l[l.index(x)] = x\n    return l\n\ndef encode_list(list):\n    \"\"\"\n    >>> encode_list([1,1,2,3,4,4.3,5,1])\n    [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    \"\"\"\n    return [[x,list.count(x)] for x in set(list) if list.count(x)>1] + [x for x in set(list) if list.count(x)<=1]\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(num_list):\n    encoded = []\n    for num in num_list:\n        if len(encoded) == 0:\n            encoded.append([num, 1])\n        else:\n            if encoded[-1][0] == num:\n                encoded[-1][1] += 1\n            else:\n                encoded.append([num, 1])\n    return encoded\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    i = 0\n    res = []\n    while i < len(lst):\n        temp = lst[i]\n        if temp == lst[i+1]:\n            temp = [temp, 1]\n        else:\n            temp = [temp, 1]\n        res.append(temp)\n        i += 1\n    return res\n\n# Examples", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(L):\n    i = 0\n    result = []\n    while i < len(L):\n        if i == len(L) - 1 or L[i] != L[i + 1]:\n            result.append([L[i], 1])\n            i += 1\n        else:\n            result.append([L[i], result[i - 1][1] + 1])\n            i += 1\n    return result\n\ndef encode_list(L):\n    i = 0\n    result = []\n    while i < len(L):\n        while i != len(L) - 1 and L[i] == L[i + 1]:\n            result.append([L[i], result[i - 1][1] + 1])\n            i += 1\n        result.append([L[i], 1])\n    return result\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\nfrom typing import List\n\n\ndef encode_list(nums: List[int]) -> List[List[int]]:\n    res: List[List[int]] = []\n    pre_num = 0\n    for n in nums:\n        if n == pre_num:\n            res[-1][0] += 1\n        else:\n            res.append([1, n])\n        pre_num = n\n    return res\n\n\ndef main():\n    assert encode_list([1, 1, 2, 3, 4, 4.3, 5, 1]) == [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    assert encode_list([1, 2, 3, 4, 5, 6, 7, 8]) == [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8]]\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(li):\n    if len(li)==0:\n        return []\n    if len(li)==1:\n        return [li]\n    ret=[]\n    s=li[0]\n    k=1\n    for i in range(1,len(li)):\n        if li[i]==s:\n            k+=1\n        else:\n            ret.append([k,s])\n            k=1\n            s=li[i]\n    ret.append([k,s])\n    return ret\n\ndef reflect_encode_list(li):\n    ret=[]\n    for i in encode_list(li):\n        for j in range(i[0]):\n            ret.append(i[1])\n    return ret", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lst):\n    result = []\n    current = lst[0]\n    count = 1\n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            result.append([count, current])\n            current = item\n            count = 1\n    result.append([count, current])\n    return result\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\n# Initial solution:\ndef encode_list(alist):\n    \"\"\"\n    :param alist: List to encode\n    :return: Encoded list\n    \"\"\"\n    encoded = []\n    counter = 1\n    current_value = alist[0]\n    for i in range(1, len(alist)):\n        if alist[i] == current_value:\n            counter += 1\n        else:\n            encoded.append([counter, current_value])\n            counter = 1\n            current_value = alist[i]\n    encoded.append([counter, current_value])\n    return encoded\n\n\n# Optimized solution:\ndef encode_list(alist):\n    \"\"\"\n    :param alist: List to encode\n    :return: Encoded list\n    \"\"\"\n    encoded = []\n    current_value = alist[0]\n    counter = 1\n    for i in range(1, len(alist)):\n        if alist[i] == current_value:\n            counter += 1\n        else:\n            encoded.append([counter, current_value])\n            current_value = alist[i]\n            counter = 1\n    encoded.append([counter, current_value])\n    return encoded\n\n\ndef test():\n    test_list = [1, 1, 2, 3, 4, 4.3, 5, 1]\n    assert encode_list(test_list) == [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(l):\n    i = 0\n    while i < len(l)-1:\n        if l[i] != l[i+1]:\n            yield [l[i], 1]\n            i += 1\n        else:\n            yield [l[i], l[i+1]-l[i]+1]\n            i += 2\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n# Write your code here\ndef min_Ops(arr,k,num):\n    min_ops = 0\n    for i in range(len(arr)):\n        temp = arr[i]\n        j = 0\n        while(temp != num):\n            if(arr[j] != temp):\n                arr[j] = temp\n            j = (j+1)%len(arr)\n            temp = arr[j]\n        min_ops+=k\n    return min_ops\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,n):\n    result=0\n    if len(arr)<=n:\n        return 0\n    for i in range(0,k):\n        n=n-1\n        for j in range(0,n):\n            if arr[j]!=arr[n]:\n                result=result+1\n                if arr[j]>arr[n]:\n                    arr[j]=arr[j]-arr[n]\n                else:\n                    arr[n]=arr[n]-arr[j]\n    return result\n        \n# O(n^2) time | O(1) space - where n is the length of the array\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,n,k):\n\t# Your code here\n\theap = []\n\tarr = [arr[i] for i in range(0,n)]\n\tarr.sort()\n\tfor i in range(0,n):\n\t\theapq.heappush(heap, (arr[i],i))\n\tfor j in range(0,k):\n\t\tif arr[0]!=arr[n-1]:\n\t\t\tarr[0] += 1\n\t\t\tarr[n-1] -= 1\n\t\t\theapq.heapify(heap)\n\t\t\tfor i in range(0,n):\n\t\t\t\tarr[i] = heapq.heappop(heap)[0]\n\t\telse:\n\t\t\tarr[0] += 1\n\t\t\theapq.heapify(heap)\n\t\t\tfor i in range(0,n):\n\t\t\t\tarr[i] = heapq.heappop(heap)[0]\n\treturn sum(arr)\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,x):\n\t#print(arr)\n\tif k==1:\n\t\treturn 0\n\tif x==1:\n\t\treturn -1\n\tmin_count=100000\n\tfor i in range(0,len(arr)):\n\t\tif arr[i]==x:\n\t\t\tnew_arr=list(arr)\n\t\t\tnew_arr[i]=x-1\n\t\t\tnew_arr=new_arr[:i]+new_arr[i+1:]\n\t\t\t#print(new_arr)\n\t\t\tcount=min_Ops(new_arr,k-1,x-1)+1\n\t\t\tif count<min_count:\n\t\t\t\tmin_count=count\n\treturn min_count\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(nums,n,k):\n    cur_ops = [0]*n\n    for i in range(k):\n        ind = 0\n        while True:\n            if cur_ops[ind] == 0:\n                cur_ops[ind] += 1\n                if all(cur_ops):\n                    return cur_ops[ind] - 1\n                break\n            ind = (ind+1)%n\n            ", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(A, N, k):\n\t# Write your code here\n\tn = len(A)\n\tif n > k:\n\t\tprint \"The array size should be less than or equal to k\"\n\tif n == k:\n\t\treturn 0\n\tif n == 2:\n\t\treturn abs(A[0] - A[1])\n\tif n == 3:\n\t\treturn abs(A[0] - A[1]) + abs(A[1] - A[2]) + abs(A[2] - A[0])\n\tif n == 4:\n\t\ta1 = abs(A[0] - A[1])\n\t\ta2 = abs(A[0] - A[2])\n\t\ta3 = abs(A[0] - A[3])\n\t\ta4 = abs(A[1] - A[2])\n\t\ta5 = abs(A[1] - A[3])\n\t\ta6 = abs(A[2] - A[3])\n\t\td12 = min(a1,a2)\n\t\td23 = min(a2,a3)\n\t\td34 = min(a3,a4)\n\t\td45 = min(a4,a5)\n\t\td56 = min(a5,a6)\n\t\treturn d12 + d23 + d34 + d45 + d56\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\nfrom heapq import *\ndef min_Ops(arr,k,n):\n    #sorting the array\n    arr.sort()\n    #keeping track of array elements and their frequency\n    freq = [0]*n\n    #creating a heap to store the elements\n    heap = []\n    #adding all elements to the heap\n    for i in arr:\n        heappush(heap,i)\n    #iterating until the heap has k elements\n    while(k):\n        x = heappop(heap)\n        #iterating until the array elements are equal\n        while(x!=arr[0]):\n            heappush(heap,arr[0])\n            arr[0] = x\n            k-=1\n    #calculating the operations\n    op = 0\n    for i in range(n):\n        op += (arr[i] - i) * (i + 1)\n    return op\n\n#creating an array\narr = [2,2,2,2]", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,n):\n    arr = sorted(arr)\n    if len(arr) == 1:\n        return 0\n    arr = [0]+arr\n    dp = [[float(\"inf\")] * (n+1) for i in range(k+1)]\n    for i in range(1,len(arr)):\n        for j in range(1,k+1):\n            if arr[i] == arr[i-1]:\n                dp[j][i] = dp[j][i-1]\n            else:\n                dp[j][i] = min(dp[j][i-1],dp[j-1][i-1]+1)\n    return dp[k][n]\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(A,k,t):\n    A_dict={}\n    for i in A:\n        if i not in A_dict:\n            A_dict[i]=1\n        else:\n            A_dict[i]+=1\n    min_dict=A_dict\n    for _ in range(k):\n        temp_dict={}\n        for i in A_dict:\n            if i%t==0:\n                temp_dict[i//t]+=A_dict[i]\n        for j in temp_dict:\n            if j in min_dict:\n                if temp_dict[j]<min_dict[j]:\n                    min_dict[j]=temp_dict[j]\n            else:\n                min_dict[j]=temp_dict[j]\n    ops=0\n    for i in min_dict:\n        ops+=min_dict[i]*(i)\n    return ops\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,n,k):\n\tc=[]\n\tfor i in arr:\n\t\tc.append(0)\n\tfor i in range(0,n):\n\t\tc[i]=1\n\tc[n-1]=n\n\tprint(c)\n\tindex=n-1\n\twhile(index>=0 and k>0):\n\t\tif(c[index]>1):\n\t\t\tc[index]=c[index]-1\n\t\t\tif(c[index]<n):\n\t\t\t\tc[index]=n\n\t\t\tindex=index-1\n\t\t\tk=k-1\n\t\telif(c[index]==1):\n\t\t\tindex=index-1\n\treturn c[index]\n\n"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month.lower() == 'january' or month.lower() == 'february' or month.lower() == 'march':\n        return 'winter'\n    elif month.lower() == 'april' or month.lower() == 'may' or month.lower() == 'june':\n        return 'spring'\n    elif month.lower() == 'july' or month.lower() == 'august' or month.lower() == 'september':\n        return 'summer'\n    elif month.lower() == 'october' or month.lower() == 'november' or month.lower() == 'december':\n        return 'fall'\n    else:\n        return 'unknown'\n\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n  seasons = {\n    1:'spring',\n    2:'summer',\n    3:'summer',\n    4:'autumn',\n    5:'autumn',\n    6:'winter',\n    7:'winter',\n    8:'winter',\n    9:'spring',\n    10:'spring',\n    11:'summer',\n    12:'winter'}\n  return seasons.get(month,None)\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month in ['December','January','February']:\n        season = 'winter'\n    elif month in ['March','April','May']:\n        season = 'spring'\n    elif month in ['June','July','August']:\n        season = 'summer'\n    elif month in ['September','October','November']:\n        season = 'autumn'\n    if day in range(1,21):\n        return season\n    else:\n        return 'error'\n\n#test", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if(month in ['January', 'February','March','April','May','June']):\n        return 'winter'\n    elif(month in ['July','August','September','October','November','December']):\n        return 'summer'\n    elif(day == 21):\n        return 'winter'\n    elif(day == 14):\n        return 'summer'", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    if month == 'January':\n        if day >= 21 and day < 32:\n            return ('spring')\n        if day >= 1 and day <= 19:\n            return ('winter')\n        if day >= 20 and day <= 31:\n            return ('autumn')\n    if month == 'February':\n        if day >= 1 and day <= 20:\n            return ('winter')\n        if day >= 21 and day <= 28:\n            return ('spring')\n        if day >= 29 and day <= 29:\n            return ('autumn')\n    if month == 'March':\n        if day >= 1 and day <= 19:\n            return ('winter')\n        if day >= 20 and day <= 31:\n            return ('spring')\n    if month == 'April':\n        if day >= 1 and day <= 19:\n            return ('spring')\n        if day >= 20 and day <= 30:\n            return ('summer')\n    if month == 'May':\n        if day >= 1 and day <= 31:\n            return ('summer')\n    if month == 'June':\n        if day >= 1 and day <= 30:\n            return ('summer')\n    if month == 'July':\n        if day >= 1 and day <= 31:\n            return ('summer')\n    if month == 'August':\n        if day >= 1 and day <= 31:\n            return ('autumn')\n    if month == 'September':\n        if day >= 1 and day <= 21:\n            return ('autumn')\n        if day >= 22 and day <= 30:\n            return ('winter')\n    if month == 'October':\n        if day >= 1 and day <= 20:\n            return ('winter')\n        if day >= 21 and day <= 31:\n            return ('spring')\n    if month == 'November':\n        if day >= 1 and day <= 20:\n            return ('autumn')\n        if day >= 21 and day <= 30:\n            return ('winter')\n    if month == 'December':\n       ", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    seasons=['winter','spring','summer','autumn']\n    for i in range(len(seasons)):\n        if month==seasons[i].split()[0].capitalize() and int(day)>=int(seasons[i].split()[1]):\n            return seasons[i]\nmonth_season('January',4)\n\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    month = month.lower()\n    if month in [\"january\", \"february\", \"march\"]:\n        if day < 18:\n            return \"spring\"\n        elif 18 <= day < 26:\n            return \"summer\"\n        else:\n            return \"autumn\"\n    elif month in [\"april\", \"may\", \"june\"]:\n        return \"summer\"\n    elif month in [\"july\", \"august\", \"september\"]:\n        return \"autumn\"\n    elif month in [\"october\", \"november\", \"december\"]:\n        return \"winter\"\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\nimport datetime\ndef month_season(month, day):\n    if month == 'January' or month == 'February':\n        return 'winter'\n    elif month == 'March' or month == 'April':\n        return 'spring'\n    elif month == 'May' or month == 'June':\n        return 'summer'\n    elif month == 'July' or month == 'August':\n        return 'summer'\n    elif month == 'September' or month == 'October':\n        return 'fall'\n    elif month == 'November' or month == 'December':\n        return 'winter'\n    else:\n        return \"error\"", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    if month in 'january february march april may june july august september october november december'.split():\n        if day >= 1 and day <= 31:\n            return 'winter'\n    elif month in 'january february march april may june july august september october november december'.split():\n        if day >= 1 and day <= 30:\n            return 'spring'\n    elif month in 'january february march april may june july august september october november december'.split():\n        if day >= 1 and day <= 31:\n            return 'summer'\n    elif month in 'january february march april may june july august september october november december'.split():\n        if day >= 1 and day <= 30:\n            return 'fall'\n    else:\n        return 'invalid month'\n\ndef month_season(month,day):\n    if month in 'January February March April May June July August September October November December'.split():\n        if day >= 1 and day <= 31:\n            return 'winter'\n    elif month in 'January February March April May June July August September October November December'.split():\n        if day >= 1 and day <= 30:\n            return 'spring'\n    elif month in 'January February March April May June July August September October November December'.split():\n        if day >= 1 and day <= 31:\n            return 'summer'\n    elif month in 'January February March April May June July August September October November December'.split():\n        if day >= 1 and day <= 30:\n            return 'fall'\n    else:\n        return 'invalid month'\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    if month.lower() == 'january':\n        if day < 18:\n            return 'winter'\n        elif day >= 18:\n            return 'summer'\n    elif month.lower() == 'february':\n        if day < 18:\n            return 'winter'\n        elif day >= 18:\n            return 'summer'\n    elif month.lower() == 'march':\n        if day < 18:\n            return 'winter'\n        elif day >= 18:\n            return 'spring'\n    elif month.lower() == 'april':\n        if day < 18:\n            return 'spring'\n        elif day >= 18:\n            return 'summer'\n    elif month.lower() == 'may':\n        if day < 18:\n            return 'spring'\n        elif day >= 18:\n            return 'summer'\n    elif month.lower() == 'june':\n        if day < 18:\n            return 'summer'\n        elif day >= 18:\n            return 'summer'\n    elif month.lower() == 'july':\n        if day < 18:\n            return 'summer'\n        elif day >= 18:\n            return 'summer'\n    elif month.lower() == 'august':\n        if day < 18:\n            return 'summer'\n        elif day >= 18:\n            return 'summer'\n    elif month.lower() == 'september':\n        if day < 18:\n            return 'summer'\n        elif day >= 18:\n            return 'summer'\n    elif month.lower() == 'october':\n        if day < 18:\n            return 'summer'\n        elif day >= 18:\n            return 'autumn'\n    elif month.lower() == 'november':\n        if day < 18:\n            return 'autumn'\n        elif day >= 18:\n            return 'autumn'\n    elif month.lower() == 'december':\n        if day < 18:\n            return 'autumn'\n        elif day >= 18:\n            return 'winter'\n    return ('Error')\n\n#print(month_season('January',1))\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\nimport numpy as np\nfrom itertools import product\n\ndef solution(a, b, n):\n    x_vals = []\n    y_vals = []\n    for x in range(1, 100):\n        for y in range(1, 100):\n            if a*x + b*y == n:\n                x_vals.append(x)\n                y_vals.append(y)\n    if len(x_vals) == 0:\n        return 'no solution'\n    return 'x = %s, y = %s' % (x_vals[0], y_vals[0])\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = n / a\n    y = n % a\n    print('x =', x, ', y =', y)\n    return x, y\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"Return x and y to satisfy ax + by = n.\"\"\"\n    return 'x = ' + str(n // b) + ', y = ' + str(n // a)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\nimport unittest\nfrom typing import List\n\n# from src.utils.solution import Solution\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\nimport math\n\n\ndef solution(a, b, n):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type n: int\n    :rtype: tuple[str, int, int]\n    \"\"\"\n    for x in range(1, n+1):\n        y = n - x * a\n        if x == 1 and n % a == 0:\n            x = n // a\n        if y == 0:\n            return \"x = {}, y = {}\".format(x, y)\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type n: int\n    :rtype: str\n    \"\"\"\n    if a == 0 and b == 0:\n        return 'x = %s , y = %s' % (0, 0)\n\n    if b == 0:\n        return 'x = %s , y = %s' % (n / a, 0)\n\n    x, y = 0, 1\n    while x*a + y*b != n:\n        x, y = y, x + y\n\n    return 'x = %s , y = %s' % (x, y)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = (n-b)/a\n    y = n - a*x\n    return 'x = {}, y = {}'.format(x,y)\n\n# Testing", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = y = 0\n    while x < n and x >= 0 and y < n and y >= 0:\n        if (a * x + b * y) == n:\n            return ('x = ', x, ', y = ', y)\n        elif (a * x + b * y) > n:\n            y -= 1\n        else:\n            x += 1\n\n# The above function finds x and y that satisfies ax + by = n.\n# Since the function has two variables (x and y), we need to return two values (x and y)\n# from the function. We use the tuple for returning the two values.\n#\n# The above function should take three integer numbers as input and return a tuple of two\n# strings. In the below example, 'a' and 'b' are two integers and 'n' is an integer.\n#\n# Now, let's consider the solution of another challenge.\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\nimport math\n\ndef gcd(a, b):\n    \"\"\"\n    Find GCD of a and b\n    \"\"\"\n    return a if b == 0 else gcd(b, a % b)\n\ndef solution(a, b, n):\n    \"\"\"\n    Find the solutions\n    \"\"\"\n    x = 0\n    y = 0\n    g = gcd(a, b)\n    lcm = abs(a*b) // g\n    # in case there is a solution\n    while True:\n        if n < (a*x + b*y):\n            n = n - lcm\n        elif n > (a*x + b*y):\n            x = x + 1\n        else:\n            return \"x = \" + str(x) + \", y = \" + str(y) + \".\"\n\n\ndef main():\n    \"\"\"\n    Do some tests\n    \"\"\"\n    assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n    assert solution(2, 3, 27) == ('x = ', 1, ', y = ', 1)\n    assert solution(2, 3, 31) == ('x = ', 2, ', y = ', 1)\n    assert solution(2, 3, 32) == ('x = ', 1, ', y = ', 1)\n    assert solution(2, 3, 49) == ('x = ', 4, ', y = ', 1)\n    assert solution(2, 3, 50) == ('x = ', 1, ', y = ', 2)\n    assert solution(2, 3, 51) == ('x = ', 1, ', y = ', 2)\n    assert solution(2, 3, 52) == ('x = ', 2, ', y = ', 2)\n    assert solution(2, 3, 73) == ('x = ', 2, ', y = ', 3)\n    assert solution(2, 3, 74) == ('x = ', 1, ', y = ', 3)\n    assert solution", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'x = ', 0, ', y = ', 0\n    elif a == 0:\n        return 'x = ', 0, ', y = ', n // b\n    elif b == 0:\n        return 'x = ', n // a, ', y = ', 0\n    else:\n        return 'x = ', n // a, ', y = ', n // b\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    list1 = [i for i in list1 if i not in list2]\n    return list1\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    return list(set(list1) - set(list2))", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n\n\ndef remove_elements_aux(list1, list2, result):\n    if list1 == []:\n        return result\n    element = list1[0]\n    if element not in list2:\n        result.append(element)\n    return remove_elements_aux(list1[1:], list2, result)\n\ndef remove_elements_aux_f(list1, list2, result):\n    if list1 == []:\n        return result\n    result.append(list1[0])\n    return remove_elements_aux_f(list1[1:], list2, result)\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(elements, to_remove):\n    result = []\n    for el in elements:\n        if el not in to_remove:\n            result.append(el)\n    return result\n\n\ndef remove_elements_v2(elements, to_remove):\n    return [el for el in elements if el not in to_remove]\n\n\ndef remove_elements_v3(elements, to_remove):\n    result = []\n    for el in elements:\n        if el not in to_remove:\n            result.append(el)\n    return result\n\n\ndef remove_elements_v4(elements, to_remove):\n    return list(filter(lambda x: x not in to_remove, elements))\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n\n\n# +\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    \"\"\"\n    :param list1: first list\n    :param list2: second list\n    :return: returns a list1 without elements from list2\n    \"\"\"\n    return list(filter(lambda x: x not in list2, list1))\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(a, b):\n\t\"\"\"\n\t:param list a: \n\t:param list b: \n\t\"\"\"\n\treturn list(set(a) - set(b))\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    new_list = [x for x in list1 if x not in list2]\n    return new_list"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(x):\n    # your code here\n    s=0\n    for i in range(0,x+1):\n        s=s+i\n    return s\n\n\n# -\n\n# # 3. A number is prime if it has exactly two distinct divisors (other than 1 and itself).\n# Write a function that checks if a number is prime or not.\n\ndef is_prime(x):\n    # your code here\n    for i in range(2,x):\n        if x%i==0:\n            return False\n    return True", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(x):\n    return sum([i for i in range(x, 0, -2)])\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n <= 0: return 0\n    return n*(n+1)/2 - sum_series(n-2)\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(x):\n    sum = 0\n    for i in range(x,0,-2):\n        sum += i\n    return sum\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    return sum(range(1, n+1)) + sum(range(n, 0, -2))\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    return sum(range(1, n+1, 2))\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    print(n)\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n <= 1:\n        return n\n    else:\n        return sum_series(n-1) + sum_series(n-2) + sum_series(n-3) + sum_series(n-4) + sum_series(n-5) + sum_series(n-6)\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(x):\n    if x <= 0:\n        return 0\n    sum_ = 0\n    for i in range(x+1, 0, -2):\n        sum_ += i\n    return sum_\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    total = 0\n    for i in range(1, n//2 + 1):\n        total += n-2*i\n    return total\n\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    # Write your code here\n    return n*s**2/(4*math.tan(math.pi/n))\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(num_sides, side_length):\n    return num_sides * (side_length ** 2) / 4.0\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(sides,length):\n    return sides*length*0.5\n\ndef area_circle(radius):\n    return radius*radius*3.14\n\ndef main():\n    print(area_polygon(4,20))\n    print(area_circle(5))\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(sides,side_length):\n    area = sides * side_length ** 2 / (4 * math.tan(math.pi/sides))\n    return area\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\n#answer\ndef area_polygon(n, r):\n    return 0.5*n*r**2\n\n\n#test", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nimport math\ndef area_polygon(n,r):\n    return n*(r**2)", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\n# Use the formula for calculating the area of a regular polygon\ndef area_polygon(n, r):\n    return (n * r**2)/2\n\n\n# Test Code", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,s):\n    return n*s**2/4\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n, s):\n    \"\"\"\n    Calculate the area of a regular polygon with n sides and side length s.\n    :param n: number of sides\n    :param s: side length\n    :return: area\n    \"\"\"\n    return n/2.0 * s * s\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(sides,length):\n    print(sides,length)\n    return sides*length**2/4\n\n\n# ## Set\n#\n# ### Addition\n#\n# Add two sets to get a new set.\n\n# +"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a, b):\n    s = 0\n    for i in range(1, a+1):\n        if a%i == 0:\n            s += i\n    for i in range(1, b+1):\n        if b%i == 0:\n            s += i\n    return s == a + b\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n1, n2):\n    n1_divisors = []\n    n2_divisors = []\n    for i in range(1, int(n1**0.5) + 1):\n        if n1 % i == 0:\n            n1_divisors.append(i)\n            n1_divisors.append(n1 / i)\n    for i in range(1, int(n2**0.5) + 1):\n        if n2 % i == 0:\n            n2_divisors.append(i)\n            n2_divisors.append(n2 / i)\n    n1_divisors = list(dict.fromkeys(n1_divisors))\n    n2_divisors = list(dict.fromkeys(n2_divisors))\n    return (n1_divisors == n2_divisors) and (n1 == n2)\n\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef sum_of_divisors(num):\n    sum = 0\n    for x in range(1,int(num**0.5)+1):\n        if num%x == 0:\n            sum += x\n    if num == sum:\n        return True\n    return False\n\n\n# +", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(number, divisor):\n    sumOfDivisors = 0\n    divisorCount = 0\n    sumOfDivisors += number\n    divisorCount += 1\n    while sumOfDivisors >= divisor:\n        sumOfDivisors -= divisor\n        divisorCount += 1\n\n    return sumOfDivisors == 0 and divisorCount == 2\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(n,m):\n    # Write your code here.\n    if n < m:\n        n,m = m,n\n    divisors_n = [1]\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors_n.append(i)\n    divisors_m = [1]\n    for i in range(1,m+1):\n        if m%i == 0:\n            divisors_m.append(i)\n    return sum(divisors_n) == sum(divisors_m)\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    divs = []\n    for i in range(1,a+1):\n        if a%i==0:\n            divs.append(i)\n    for j in range(1,b+1):\n        if b%j==0:\n            divs.append(j)\n    sum1 = 0\n    for k in range(0,len(divs)):\n        sum1 += divs[k]\n    if a==sum1 and b==sum1:\n        return True\n    return False\n\ndef areEquivalent2(a,b):\n    if(a==b):\n        return True\n    else:\n        l1 = [i for i in range(1,a+1) if a%i==0]\n        l2 = [j for j in range(1,b+1) if b%j==0]\n        sum1 = sum(l1)+sum(l2)\n        if sum1==a and sum1==b:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(num1, num2):\n    divisors1 = set(divisors(num1))\n    divisors2 = set(divisors(num2))\n    return len(divisors1) == len(divisors2)\n\ndef divisors(num):\n    divisors = set()\n    for i in range(1, int(num**(0.5))+1):\n        if num%i == 0:\n            divisors.add(i)\n            divisors.add(num/i)\n    return divisors\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    s1 = sum(x for x in range(1,int(a**(1/2))+1) if a%x==0)\n    s2 = sum(x for x in range(1,int(b**(1/2))+1) if b%x==0)\n    return s1 == s2\n\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    if a==b:\n        return True\n    else:\n        for i in range(1,a+1):\n            if a%i==0 and b%i==0:\n                return True\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    sum_a = 0\n    sum_b = 0\n    for i in range(1,a+1):\n        if a%i==0:\n            sum_a += i\n    for j in range(1,b+1):\n        if b%j==0:\n            sum_b += j\n    return sum_a == sum_b"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(s):\n    h = {}\n    for i in range(len(s)):\n        h[s[i]] = h.get(s[i], 0) + 1\n    return sum([1 for v in h.values() if v >= 2])", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    counts = {\n        'a':0,\n        'b':0,\n        'c':0,\n        'd':0,\n        'e':0,\n        'f':0,\n        'g':0,\n        'h':0,\n        'i':0,\n        'j':0,\n        'k':0,\n        'l':0,\n        'm':0,\n        'n':0,\n        'o':0,\n        'p':0,\n        'q':0,\n        'r':0,\n        's':0,\n        't':0,\n        'u':0,\n        'v':0,\n        'w':0,\n        'x':0,\n        'y':0,\n        'z':0,\n    }\n    for char in string.lower():\n        counts[char] += 1\n    return counts\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(s):\n    char_dict = {}\n    for char in s.lower():\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    return char_dict['b'] + char_dict['c'] + char_dict['f'] + char_dict['e'] + char_dict['g']\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(input_string):\n    count = 0\n    for letter in input_string:\n        if letter.isalpha():\n            count += input_string.count(letter)\n    return count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\nfrom collections import Counter\ndef count_char_position(str1):\n    count = 0\n    count_char_position = Counter(str1)\n    for key, value in count_char_position.items():\n        if key == key.upper():\n            count = count + value\n    return count\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    # Write your code here\n    count = 0\n    for i in string:\n        if (i.isalpha() and i.islower()):\n            count = count + 1\n        elif (i.isalpha() and i.isupper()):\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(input_string):\n    letters = {}\n    for letter in input_string:\n        letters[letter] = letters.get(letter,0) + 1\n    return sum([1 for char,count in letters.items() if char.isupper() == input_string.isupper()])\n\ndef test_count_char_position():\n    assert count_char_position(\"xbcefg\") == 2\n    assert count_char_position(\"XbCEFG\") == 2\n    assert count_char_position(\"xbceFg\") == 0\n    assert count_char_position(\"XbcEfg\") == 0\n    assert count_char_position(\"XBCEFG\") == 2\n    assert count_char_position(\"xbcefg\") == 2\n    assert count_char_position(\"xbcefg\") == 2\n    assert count_char_position(\"xbcefg\") == 2", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    return len([x for x in s if x.isalpha()])", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    d = {}\n    for i in string:\n        if i.islower():\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        if i.isupper():\n            if i.lower() in d:\n                d[i.lower()] += 1\n            else:\n                d[i.lower()] = 1\n    return len(d)\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n  count = 0\n  for char in string:\n    if char.lower() == string[0].lower():\n      count += 1\n    elif char.lower() == string[0].upper():\n      count += 1\n    else:\n      continue\n  return count\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_pair(arr, x):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i] ^ arr[j]) == x:\n                count += 1\n    return count\n\narr = [5,4,7,2,1]\nx = 5", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(lst,xor):\n  result=[]\n  for i in range(len(lst)):\n    for j in range(i+1,len(lst)):\n      if (xor == (lst[i] ^ lst[j])) & (lst[i] < lst[j]):\n        result.append(lst[i]+lst[j])\n  return len(set(result))\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_pair(arr, key):\n    ans = 0\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            if i != j:\n                if (arr[i] ^ arr[j]) == key and key % 2 == 0:\n                    ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(A,x):\n    count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1,len(A)):\n            if((A[i] ^ A[j]) % 2 == 0 and (A[i] ^ x) % 2 == 0):\n                count += 1\n    return count\n\n#print(find_even_Pair([5,4,7,2,1],5))\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr, number):\n    # Complete this function\n    pass\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,target):\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            xor = arr[i]^arr[j]\n            if xor==target and xor&1==0:\n                res+=1\n    return res\n\n\n#assert find_even_Pair([5,4,7,2,1],5) == 4", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,xor):\n    arr.sort()\n    print(arr)\n    count=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]^arr[j])%2==0:\n                count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,num):\n\tcount=0\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1,len(arr)):\n\t\t\tif (arr[i]^arr[j])==num and (arr[i]&arr[j])==0:\n\t\t\t\tcount+=1\n\treturn count\n\n# Find the most frequent item in a list", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,even_num):\n    even_pair_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]^arr[j] == even_num):\n                even_pair_count+=1\n    return even_pair_count\n\ndef main():\n    arr = [5,4,7,2,1]\n    print(\"Count of even Pairs are :\",find_even_Pair(arr,5))\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, XOR):\n    count = 0\n    for i in arr:\n        for j in arr:\n            if XOR == i ^ j and i != j:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\ndef main():\n    print next_Power_Of_2(10)\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n# Brute Force Solution\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n\n    # Check for a power of 2 and return if it is\n    if n & (n - 1) == 0:\n        return n\n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i * i\n\n    return 2 ** (n.bit_length())\n\n# Binary Solution\n# Approach 1: Use a binary search\ndef next_Power_Of_2(n):\n    lower = 1\n    upper = n\n    while upper - lower > 1:\n        mid = (upper + lower) // 2\n        if mid == n:\n            return n\n        elif mid < n:\n            lower = mid\n        else:\n            upper = mid\n    return lower + 1\n\n# Approach 2: Use a faster algorithm\ndef next_Power_Of_2(n):\n    # Check if the number is a power of 2\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the nearest power of 2\n    while n & (n - 1) != 0:\n        n = n & (n - 1)\n\n    return n << 1\n\n# Approach 3: Use bitwise operators\ndef next_Power_Of_2(n):\n    return 2 ** (n.bit_length())\n\n# Approach 4: Use log\ndef next_Power_Of_2(n):\n    return 2 ** (int(math.ceil(math.log(n, 2))))\n\n# Approach 5: Use math\ndef next_Power_Of_2(n):\n    return int(2 ** math.ceil(math.log(n, 2)))\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    return 1 << (n-1).bit_length()\n\n\n# Test cases", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    :param n: int, a number\n    :return: int, the smallest power of 2 greater than or equal to n\n    >>> next_Power_Of_2(0)\n    1\n    >>> next_Power_Of_2(1)\n    2\n    >>> next_Power_Of_2(2)\n    4\n    >>> next_Power_Of_2(3)\n    4\n    >>> next_Power_Of_2(4)\n    4\n    >>> next_Power_Of_2(5)\n    8\n    >>> next_Power_Of_2(6)\n    8\n    \"\"\"\n    i=1\n    while i<=n:\n        i=i*2\n    return i\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n < 1:\n        return 1\n    num = 0\n    while num < n:\n        num = num * 2\n    return num\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    a = n - 1\n    while a & (a + 1):\n        a = a & (a + 1)\n    return a + 1\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n# Answer\ndef next_Power_Of_2(n):\n    x = 1\n    while x < n:\n        x *= 2\n    return x\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n\tif (n & (n - 1)) == 0:\n\t\treturn n\n\telse:\n\t\treturn 2 << (n.bit_length() - 1)\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\nfrom math import log2\n\n\ndef next_Power_Of_2(n):\n    return 1 << int(log2(n))\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    p = 1\n    while p < n:\n        p = p*2\n    return p\n\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(array,number):\n    count = 0\n    for i in array:\n        if i == number:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, n):\n    count = 0\n    for i in arr:\n        if i == n:\n            count += 1\n    return count\n\n#Test Cases", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n    for num in arr:\n        if num == num:\n            return 1\n    return 0\n\n\n# Tests", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, number):\n    return len([x for x in arr if x==number])\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,num):\n    count=0\n    for i in range(len(arr)):\n        if arr[i]==num:\n            count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,n):\n    return arr.count(n)\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr,num):\n    counter = 0\n    for i in arr:\n        if i == num:\n            counter += 1\n    return counter\n\n# Test Cases", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(nums,num):\n  n = 0\n  for i in range(len(nums)):\n    if nums[i] == num:\n      n += 1\n  return n\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\nimport pytest\n\n\ndef frequency(numbers, num):\n    count = 0\n    for number in numbers:\n        if number == num:\n            count += 1\n    return count\n\n\n@pytest.mark.parametrize(\"numbers, num, expected\", [([1, 2, 3], 4, 0), ([1, 4, 4, 4], 4, 3)])\ndef test_frequency(numbers, num, expected):\n    actual = frequency(numbers, num)\n    assert actual == expected", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,num):\n    count = 0\n    for i in arr:\n        if(num==i):\n            count+=1\n    return count\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\nimport math\ndef get_pell(n):\n    if n < 2: return n\n    p = 1\n    q = 2\n    for i in range(1, n):\n        p, q = q, p + q\n        if i == n - 1:\n            return q\n    return p\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 0: return 0\n    if n == 1: return 1\n    p = get_pell(n-1)\n    q = get_pell(n-2)\n    return 2*p+q\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    if n < 2:\n        raise ValueError(\"n must be > 0\")\n    pell = [1,2]\n    if n == 2:\n        return 1\n    for i in range(2,n):\n        pell.append(pell[-1] + pell[-2])\n    return pell[-1]\n\ndef test_pell():\n    assert get_pell(1) == 1\n    assert get_pell(2) == 2\n    assert get_pell(4) == 12\n    assert get_pell(5) == 17\n    assert get_pell(10) == 285\n    assert get_pell(100) == 2340250562243190\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nimport math\ndef get_pell(n):\n    if n == 0:\n        return 0\n    i, p = 1, 0\n    while i <= n:\n        p += (2*i + 1)\n        i += 1\n    return p\n\n#assert get_pell(10) == 1934903923\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\nimport math\n\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n - 1) + get_pell(n - 2)\n\ndef get_pell_brute(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        pell = 0\n        for i in range(2, n):\n            pell = pell + i\n            pell = pell + get_pell_brute(i - 1)\n        return pell\n\ndef get_pell_prime(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * n - 1\n\ndef get_pell_optimized(n):\n    pell = 0\n    for i in range(n):\n        pell += get_pell_optimized(i)\n    return pell\n\ndef test():\n    for n in range(10):\n        if get_pell(n) != get_pell_prime(n):\n            return False\n        if get_pell(n) != get_pell_optimized(n):\n            return False\n        if get_pell(n) != get_pell_brute(n):\n            return False\n    return True\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n < 1:\n        raise ValueError(\"pell number must be positive\")\n    if n == 1:\n        return 1\n    a = 1\n    b = 2\n    for i in range(2, n + 1):\n        c = 2 * a + b\n        a = b\n        b = c\n    return c\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    prev = 1\n    curr = 2\n    pell = [1, 2]\n    for i in range(2, n):\n        curr = 2 * prev + curr\n        pell.append(curr)\n        prev = curr\n    return pell[n-1]", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    first = 1\n    second = 2\n    while n > 0:\n        n -= 1\n        temp = second\n        second = first + second\n        first = temp\n    return second\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    p = 1\n    q = 2\n    for i in range(2, n+1):\n        p = p + q\n        q = p - q\n    return p\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    pass\n\n#Testing\n\n# 2. Greek Pythagorean Triples"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list,start,end):\n    if not list:\n        return 0\n\n    sum_of_list = 0\n    for i in range(start,end+1):\n        sum_of_list += list[i]\n\n    return sum_of_list\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst,start,end):\n    res=0\n    for i in range(start,end+1):\n        res+=lst[i]\n    return res\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(l,start,end):\n    return sum(l[start:end+1])\n\n# test for the above function", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(num_list,start,end):\n    total=0\n    for i in range(start,end):\n        total+=num_list[i]\n    return total\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = sum_range_list(arr,test_case[2],test_case[3])\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [2,1,5,6,8,3,4,9,10,11,8,12]\nsolution = 29\ntest_case = [arr,solution,8,10]\ntest_function(test_case)\n\narr = [2,1,5,6,8,3,4,9,10,11,8,12]\nsolution = 29\ntest_case = [arr,solution,2,1]\ntest_function(test_case)", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list_num,start,end):\n    sum_num=0\n    for i in range(start,end+1):\n        sum_num+=list_num[i]\n    return sum_num\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(arr, start, end):\n    return sum(arr[start:end+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(arr, start_index, end_index):\n    return sum(arr[start_index:end_index+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst,start,end):\n    sum = 0\n    for i in range(start,end):\n        sum += lst[i]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(myList,start,end):\n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    :param myList: List to find sum in.\n    :param start: Start index of range.\n    :param end: End index of range.\n    :return: Total sum of numbers between indices.\n    \"\"\"\n    total=0\n    for i in range(start,end+1):\n        total+=myList[i]\n    return total\n\n#Test:", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst,a,b):\n    return sum(lst[a:b+1])"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    perimeter = (5 * (2 * n - 1))\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(length):\n    perimeter = (length*5) + (length*10)\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\nfrom math import cos, pi, sin\nimport numpy as np\n\n\ndef perimeter_pentagon(side_length):\n    \"\"\"\n    :param side_length: a positive integer\n    :return: the perimeter of the pentagon\n    \"\"\"\n    return side_length * 5 * (1 + 2 * np.cos(pi / 5))\n\n\ndef test_perimeter_pentagon():\n    \"\"\"\n    Run doctests\n    :return: nothing\n    \"\"\"\n    assert perimeter_pentagon(5) == 25\n    assert perimeter_pentagon(6) == 30\n    assert perimeter_pentagon(0) == 0\n    assert perimeter_pentagon(-1) == 0\n    assert perimeter_pentagon(4) == 28\n    assert perimeter_pentagon(1) == 5\n\n\ndef test_perimeter_pentagon_in_numpy():\n    \"\"\"\n    Test perimeter_pentagon function by comparing it to numpy solution\n    :return: nothing\n    \"\"\"\n    sides_length = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    numpy_perimeter = (5 + 2 * sides_length * np.cos(pi / 5)).sum()\n    assert np.allclose(perimeter_pentagon(sides_length), numpy_perimeter)\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(sides):\n    perimeter = 0\n    for i in range(5):\n        if i == 0:\n            perimeter += sides\n        elif i == 1:\n            perimeter += sides - 1\n        elif i == 2:\n            perimeter += sides - 2\n        elif i == 3:\n            perimeter += sides - 3\n        elif i == 4:\n            perimeter += sides - 4\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\n# Brute Force\ndef perimeter_pentagon(n):\n    return n * ((n - 1) * 5) // 2\n\n# Recursive\ndef perimeter_pentagon_rec(n, acc=0):\n    \"\"\"\n    acc: accumulative\n    n: number of sides\n    \"\"\"\n    if n == 1:\n        return 0\n    return perimeter_pentagon_rec(n - 1, acc + n) + n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    assert n % 2 != 0, 'the number must be odd'\n    return (n * (n - 3) * 2) + 1\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    return 3 * (n**2) + 5 * n\n\ndef perimeter_pentagon(n):\n    return n*(3*n-1) + 5*n\n\ndef perimeter_pentagon(n):\n    return (n-1)*((3*n-1)+5)\n\ndef perimeter_pentagon(n):\n    return (n-1)*(n+1)*(3*n+1)\n\ndef perimeter_pentagon(n):\n    return n* (3*n-1) + (5*n+1) - 1\n\ndef perimeter_pentagon(n):\n    return 3*(n**2)-1 + 5*n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    \"\"\"\n    :param n: number of sides of a regular polygon\n    :return: perimeter of a regular polygon\n    \"\"\"\n    if n < 3:\n        return None\n    else:\n        perimeter = n * (n-1)\n        return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\nfrom unittest import TestCase\n\n\ndef perimeter_pentagon(sides):\n    return sides * 5 * 2\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(x):\n    return 5 * x\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for letter in string:\n        if letter == 's' and string.count('s') > count:\n            count += 1\n        elif letter == 't' and string.count('t') > count:\n            count += 1\n        elif letter == 'd' and string.count('d') > count:\n            count += 1\n    return count\n\n#assert count_occurance(\"letstdlenstdporstd\") == 3", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    s_set = set()\n    count = 0\n    for char in string:\n        if char == \"s\":\n            if char not in s_set:\n                s_set.add(char)\n                count += 1\n    return count\n\n# O(n) time | O(1) space\n# O(1) time and space```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\n3. `reverse_string`Write a function to reverse a string.\n\n### Code:\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\n#my code\ndef count_occurance(str):\n    count = 0\n    for i in str:\n        if i == 'std':\n            count+=1\n    return count\n\n#O(n) time and O(1) space\n#count_occurance = lambda string : sum(1 for c in string if c == 'std')\n\n#O(n) time and O(1) space\ncount_occurance = lambda string: sum(1 if c == 'std' else 0 for c in string)\n\n\n#O(n) time and O(1) space\n#count_occurance = lambda string: sum(c == 'std' for c in string)\n\n#O(n) time and O(1) space\n#count_occurance = lambda string: string.count('std')", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    # your code here\n    strlist = string.split()\n    count = 0\n    for i in range(len(strlist)):\n        for j in range(len(strlist)):\n            if strlist[i] == \"std\":\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for s in string:\n        if s == \"std\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    return string.count(\"std\")\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for char in string:\n        if char == 'std':\n            count = count+1\n    return count\n\n\ndef count_occurance_v2(string):\n    count = 0\n    for char in string:\n        if char == 'std':\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    #your code here\n    count = 0\n    for i in string:\n        if i == 's' and (i+1) == 't' and (i+2) == 'd':\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(str_):\n    return len([char for char in str_ if char == 'std'])\n\n# O(n) time | O(1) space\n# O(n) time | O(1) space\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\n# + [markdown] id=\"K43SPb57n_91\"\n# ## 8. Write a program to count the number of words in a string\n#\n#\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"4C08NOqVp-a8\" outputId=\"0581961e-933c-4b34-b45c-5d633005b545\""], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\nimport string\n\ndef remove_splchar(string):\n    \"\"\"\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    return ''.join([letter for letter in string if letter.isalnum()])\n\ndef remove_splchar(string):\n    return \"\".join(filter(str.isalnum, string))\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(strng):\n    return \"\".join(c for c in strng if c.isalnum())\n\n#assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(st):\n    new_str = ''\n    for i in st:\n        if i.isalnum():\n            new_str += i\n    return new_str", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(txt):\n    return re.sub(r'[^a-zA-Z0-9]+', '', txt)\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(string):\n    return string.replace(' ','').replace('@','').replace('#','').replace('$','').replace('%','').replace('*','').replace('&','').replace('^','')\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(input_string):\n    string_list = []\n    for i in input_string:\n        if i.isalnum():\n            string_list.append(i)\n    return \"\".join(string_list)\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\n#Solution\ndef remove_splchar(string):\n    return ''.join(filter(str.isalnum, string))\n\n\n#Tests", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return ''.join(char for char in string if char.isalnum())\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return ''.join(filter(str.isalnum,string))\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return ''.join(filter(str.isalnum, string))"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\nimport collections\n\ndef group_keyvalue(pairs):\n    d = collections.defaultdict(list)\n    for pair in pairs:\n        d[pair[0]].append(pair[1])\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(pairs):\n    d = {}\n    for k, v in pairs:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(seq):\n    d = {}\n    for key, value in seq:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(lst):\n    ret = {}\n    for key, value in lst:\n        if key not in ret:\n            ret[key] = [value]\n        else:\n            ret[key].append(value)\n    return ret", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(sequence):\n    result = {}\n    for key, value in sequence:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(elements):\n    result = {}\n    for x,y in elements:\n        if x in result:\n            result[x].append(y)\n        else:\n            result[x] = [y]\n    return result\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n  ret = {}\n  for key, value in pairs:\n    if key not in ret:\n      ret[key] = [value]\n    else:\n      ret[key].append(value)\n  return ret\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(sequence):\n    return dict([(k, [v] if k not in r else r[k] + [v]) for k, v in sequence for r in [{} if i==0 else {k: [v]} for i in range(len(sequence))]])\n\n# Test", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(seq):\n    d = {}\n    for i, (k, v) in enumerate(seq):\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\n\ndef group_keyvalue2(seq):\n    return {k: [v for k, v in seq if k == k_] for k_, v in seq}\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(items):\n    groups = {}\n    for item in items:\n        k, v = item\n        if k not in groups:\n            groups[k] = []\n        groups[k].append(v)\n    return groups\n\n# group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for i in string:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if not stack:\n                return False\n            stack.pop()\n        else:\n            continue\n    return not stack\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    \"\"\"\n    >>> is_valid_parenthese('(){}[]')\n    True\n    >>> is_valid_parenthese('(){}[]')\n    True\n    >>> is_valid_parenthese('{[')\n    False\n    >>> is_valid_parenthese('{()}')\n    False\n    >>> is_valid_parenthese('([]{})')\n    False\n    >>> is_valid_parenthese('{}')\n    False\n    >>> is_valid_parenthese('()')\n    False\n    >>> is_valid_parenthese('()[]')\n    False\n    >>> is_valid_parenthese('([]')\n    False\n    \"\"\"\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(string[i])\n        if string[i] == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    if len(stack) > 0:\n        return False\n    else:\n        return True\n\ndef main():\n    string = input('Enter a string: ')\n    print(is_valid_parenthese(string))\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(str):\n    open_dict = {'(': ')', '[': ']', '{': '}'}\n    stack = []\n    for c in str:\n        if c in open_dict.keys():\n            stack.append(c)\n        elif len(stack) > 0:\n            top = stack.pop()\n            if open_dict[top] != c:\n                return False\n        else:\n            return False\n    return len(stack) == 0\n\ndef test_is_valid_parenthese():\n    assert is_valid_parenthese(\"(){}[]\")==True\n    assert is_valid_parenthese(\"({]})\")==False", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    # your code here\n    stack=[]\n    for i in string:\n        if i=='(':\n            stack.append(i)\n        elif i==')':\n            if stack==[]:\n                return False\n            else:\n                stack.pop()\n    return True if stack==[] else False\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(s):\n    \"\"\"O(n) solution. Time complexity is linear as O(n) and space complexity is constant as O(1)\"\"\"\n    if not s:\n        return True\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef is_valid_parenthese(s):\n    \"\"\"O(1) solution. Time complexity is linear as O(n) and space complexity is constant as O(1)\"\"\"\n    openings = {'(': ')'}\n    stack = []\n    for c in s:\n        if c in openings:\n            stack.append(c)\n        elif c in openings.values():\n            if not stack:\n                return False\n            open_c = stack.pop()\n            if openings[open_c] != c:\n                return False\n    return not stack\n\ndef is_valid_parenthese(s):\n    \"\"\"O(n) solution. Time complexity is linear as O(n) and space complexity is constant as O(1)\"\"\"\n    if not s:\n        return True\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if not stack or stack.pop() != '(':\n                return False\n    return len(stack) == 0\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string: str):\n    stack = []\n    for char in string:\n        if char in '([{':\n            stack.append(char)\n        elif char == '}' or char == ']' or char == ')':\n            if not stack:\n                return False\n            if char == '}' and stack[-1] != '{':\n                return False\n            if char == ']' and stack[-1] != '[':\n                return False\n            if char == ')' and stack[-1] != '(':\n                return False\n            stack.pop()\n\n    if stack:\n        return False\n\n    return True\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    if not isinstance(string, str):\n        raise TypeError('Expected str')\n    \n    stack = []\n    for c in string:\n        if c == '(':\n            stack.append(')')\n        elif c == '[':\n            stack.append(']')\n        elif c == '{':\n            stack.append('}')\n        elif len(stack) == 0 or c != stack.pop():\n            return False\n    \n    return len(stack) == 0", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(parenthese):\n    from collections import Counter\n    return Counter(parenthese) == Counter({\"(\":1,\")\":1,\"[\":1,\"]\":1})\n\n\ndef test_is_valid_parenthese():\n    assert is_valid_parenthese(\"(){}[]\")==True\n    assert is_valid_parenthese(\"(){}[\")==False\n    assert is_valid_parenthese(\"(){}\")==False\n    assert is_valid_parenthese(\"()\")==True\n    assert is_valid_parenthese(\"()()\")==True\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\n#for this solution, you need to use recursion\n#the idea is to keep track of a stack\n#when you see the corresponding left bracket, you can push it to the stack\n#when you see the corresponding right bracket, you can check if the corresponding left bracket is the top of the stack\n#if so, you can pop the two out\n#if not, return False\n#if the stack is empty, then return True\n\ndef is_valid_parenthese(parenthese):\n    stack = []\n    for i in range(0,len(parenthese)):\n        if parenthese[i] == \"(\":\n            stack.append(parenthese[i])\n        if parenthese[i] == \")\":\n            if len(stack) > 0 and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n#test case", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(str):\n    stack=[]\n    for i in str:\n        if i in ('(','[',')','{'):\n            stack.append(i)\n        elif i in (')','}']:\n            if len(stack)==0:\n                return False\n            if i==')' and stack[-1]=='(':\n                stack.pop()\n            elif i==']' and stack[-1]=='[':\n                stack.pop()\n            elif i=='}' and stack[-1]=='{':\n                stack.pop()\n        else:\n            raise ValueError(\"Wrong input\")\n    if len(stack)==0:\n        return True\n    return False\n\ndef is_valid_parenthese2(str):\n    stack = []\n    map = {')': '(', '}': '{', ']': '['}\n    for char in str:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack or map[char] != stack.pop():\n                return False\n    return len(stack) == 0\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return a + b + c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    p=(a+b+c)/2\n    return p\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(base,height):\n    p=base+height\n    return p\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n\ndef test_perimeter_triangle():\n    assert perimeter_triangle(10,20,30)==60\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    s=a+b+c\n    return s\n\ndef perimeter_triangle(a, b, c):\n    return a+b+c\n\n# ---------------------\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    \"\"\"\n    Args:\n       a,b,c: length of the three sides\n    Returns:\n       Perimeter of the triangle\n    \"\"\"\n    perimeter = a + b + c\n    return perimeter\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    p=(a+b+c)/2\n    return p\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    p=a+b+c\n    return p\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    if (a>b) & (a>c):\n        p = a+b+c\n    if (b>a) & (b>c):\n        p = a+b+c\n    if (c>a) & (c>b):\n        p = a+b+c\n    return p"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(m, n):\n    for i in range(m,n):\n        for j in range(i,n):\n            if lcm(i,j) >= m and lcm(i,j) <= n:\n                return (i,j)\n    return None\n\ndef lcm(a, b):\n    return (a*b)//gcd(a,b)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n\n    a = int(a)\n    b = int(b)\n    lcm = int(a * b / gcd(a,b))\n    while(lcm <= a):\n        if(gcd(a,lcm) == 1):\n            return (a,lcm)\n        lcm += a\n\n#Code contributed by: <NAME>\n\ndef gcd(a,b):\n    while(b != 0):\n        a, b = b, a%b\n    return a", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nimport math\n\ndef answer(lower, upper):\n    for i in range(lower, upper+1):\n        for j in range(i+1, upper+1):\n            if math.gcd(i, j) <= upper:\n                return i, j\n    return 0, 0", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nimport math\n\ndef answer(a,b):\n    \"\"\"\n    >>> answer(3,8)\n    (3, 6)\n    >>> answer(5,9)\n    (15, 9)\n    >>> answer(20,35)\n    (30, 60)\n    \"\"\"\n    lcm=1\n    for i in range(a,b+1):\n        if lcm>i:\n            lcm=i\n        if i%lcm==0 and (i//lcm) in range(a,b+1) and lcm>i//lcm:\n            return (i,lcm)\n    return (0,0)\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nfrom itertools import combinations\nimport math\n\ndef lcm(a,b):\n    return (a*b)/math.gcd(a,b)\n\ndef answer(a, b):\n    if b < a:\n        a,b = b,a\n    d = []\n    for i in range(a,b+1,1):\n        for j in range(a,b+1,1):\n            if i!=j and lcm(i,j) in range(a,b+1,1):\n                d.append(i)\n                d.append(j)\n    return tuple(d)\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nimport math\n\n\ndef answer(a,b):\n    for i in range(a,b):\n        for j in range(a,b):\n            if i!=j and lcm(i,j)<=b:\n                return i,j\n    return \"No\"\n\ndef lcm(a,b):\n    return int(a*b/math.gcd(a,b))\n\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef lcm(a, b):\n    return (a * b) // (gcd(a,b))\n\ndef answer(min_num, max_num):\n    for a in range(min_num, max_num+1):\n        for b in range(a+1, max_num+1):\n            if lcm(a, b) > min_num and lcm(a, b) < max_num:\n                return (a,b)\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(n1, n2):\n    if n1 < 0 or n2 < 0:\n        raise ValueError(\"n1 and n2 must be non-negative integers\")\n    \n    max_lcm = min(n1, n2) * max(n1, n2)\n    \n    for i in range(n1, n2 + 1):\n        if max_lcm % i == 0:\n            return i, max_lcm / i\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nfrom math import gcd\n\ndef answer(a, b):\n    '''\n    We can just get all possible divisors and use the gcd to figure out if the lcm is in the range\n    '''\n    divisors = []\n    for i in range(a,b+1):\n        if i % a == 0 and i % b == 0:\n            divisors.append(i)\n    for i in range(len(divisors)):\n        for j in range(i+1,len(divisors)):\n            if gcd(divisors[i],divisors[j]) == divisors[i] * divisors[j] / gcd(divisors[i], divisors[j]):\n                return (divisors[i], divisors[j])\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nfrom math import gcd\nfrom itertools import takewhile\n\ndef find(start,end):\n    if end % start == 0:\n        return (start,end)\n    for i in takewhile(lambda x:x <= end,range(start,end)):\n        if gcd(i,end) == 1:\n            return (i,end//i)\n\ndef answer(start,end):\n    result = find(start,end)\n    if result:\n        return result\n    else:\n        return (end,end)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\nfrom string import printable\n\ndef string_literals(literal_list, string_text):\n    \"\"\"\n    :param literal_list: list of literals in string\n    :param string_text: string to be searched\n    :return: string 'Matched' if the literals are in the string,\n             or return 'Not Found' if the literals are not in the string.\n    \"\"\"\n    if len(literal_list) == 0:\n        return 'No literals given'\n    for string_literal in literal_list:\n        if string_literal in string_text:\n            return 'Matched!'\n    return 'Not Found'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(keywords, str):\n    if keywords == ['']:\n        return 'No Matched!'\n    if str.find(keywords[0]) == -1:\n        return string_literals(keywords[1:], str)\n    if keywords[0] in str:\n        return string_literals(keywords[1:], str)\n    else:\n        return 'No Matched!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\n# solution\n\ndef string_literals(strings, string):\n    for s in strings:\n        if s in string:\n            return 'Matched'\n    return 'Not found'\n\n# test", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals, target):\n    # your code here\n    for literal in literals:\n        if literal in target:\n            return 'Matched!'\n    return 'Not Matched!'\n\n\n# +\ndef string_literals_v1(literals, target):\n    for literal in literals:\n        if literal == target:\n            return 'Matched!'\n    return 'Not Matched!'\n\ndef string_literals_v2(literals, target):\n    for literal in literals:\n        if literal in target:\n            return 'Matched!'\n    return 'Not Matched!'\n\ndef string_literals_v3(literals, target):\n    for literal in literals:\n        if literal == target:\n            return 'Matched!'\n    return 'Not Matched!'\n\ndef string_literals_v4(literals, target):\n    for literal in literals:\n        if literal in target:\n            return 'Matched!'\n    return 'Not Matched!'\n\ndef string_literals_v5(literals, target):\n    for literal in literals:\n        if literal == target:\n            return 'Matched!'\n    return 'Not Matched!'\n\ndef string_literals_v6(literals, target):\n    for literal in literals:\n        if literal == target:\n            return 'Matched!'\n    return 'Not Matched!'\n\n\n# -\n\nfor i in range(7):\n    print(f'for i={i}: {timeit.timeit(\"string_literals_v{i+1}(literals, target)\", globals=globals(), number=1000000)}')", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n    for literal in literals:\n        if literal in string:\n            return \"Matched!\"\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\nfrom .utils import *\n\n\ndef string_literals(literals,string):\n    \"\"\"\n    :param literals: The literals string.\n    :param string: The string to search in.\n    :return: The matched result.\n    \"\"\"\n    result = []\n    for literal in literals:\n        if literal in string:\n            result.append('Matched!')\n    return 'No matched' if len(result) == 0 else ', '.join(result)\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(arr,s):\n    return \"Matched!\" if all(lit in s for lit in arr) else \"No Match\"", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals,string):\n    for literal in literals:\n        if literal in string:\n            return 'Matched!'\n    return 'Not matched!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals, string):\n    \"\"\"\n    Parameters:\n        literals (list): a list of literals\n        string (str): a string\n\n    Returns:\n        result (str): a string showing the result of search\n    \"\"\"\n    if literals is None:\n        return ''\n    result = ''\n    for literal in literals:\n        if literal in string:\n            result += 'Matched! '\n    return result\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(keywords,input_string):\n    count = 0\n    if input_string is None:\n        return False\n    for keyword in keywords:\n        for char in keyword:\n            if input_string.count(char) != 0:\n                count += 1\n    if count > 0:\n        return 'Matched!'\n    else:\n        return False\n#string_literals(['language'],'python language')\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    \"\"\"\n    If the number is not a multiple of 10, 11 or 12,\n    it is not a keith number.\n    \"\"\"\n    return n % 10 == 4 or n % 10 == 5 or n % 10 == 6 or n % 10 == 8 or n % 10 == 9", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if str(num)[0] == \"0\":\n        return False\n    if str(num)[1:] == str(num)[::-1]:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    \"\"\"\n    n: int\n    return: bool\n    \"\"\"\n    total = 0\n    while n != 0:\n        digit = n%10\n        total += digit ** 2\n        n //= 10\n\n    if total == n:\n        return True\n    return False", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if (num % 3 == 0 and num % 5 == 0) or (num % 3 == 2 and num % 5 == 4):\n        return True\n    return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n    def get_sum(num):\n        sum = 0\n        while num > 0:\n            sum += (num % 10) ** 2\n            num = num // 10\n        return sum\n\n    if n <= 10:\n        return True\n    elif get_sum(n) == n:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\nfrom math import sqrt\n\n\ndef is_num_keith(number: int) -> bool:\n    if number < 1:\n        return False\n    for i in range(2, int(sqrt(number))):\n        if number % i == 0:\n            return False\n    return True\n\n\ndef is_num_keith_2(number: int) -> bool:\n    return all(\n        int(number / i) == int(number / j)\n        for i in range(1, int(sqrt(number)))\n        for j in range(i, int(sqrt(number)))\n    )", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if num == 1 or num == 2:\n        return True\n    elif num == 4 or num == 7:\n        return False\n    else:\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    else:\n        i = 1\n        while i*i <= num:\n            if num % i == 0:\n                return False\n            i += 1\n        return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    keith_num = 145\n    keith_num_len = len(str(keith_num))\n    num_len = len(str(num))\n    if num == keith_num:\n        return True\n    if num_len != keith_num_len:\n        return False\n    num = str(num)\n    num_rev = num[::-1]\n    if int(num) + int(num_rev) == keith_num:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    temp = 1\n    while num > 1 and temp < num:\n        temp *= num\n    return num == temp\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\nfrom math import radians, cos, sin, asin, sqrt\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # convert decimal degrees to radians\n    lat1,lon1,lat2,lon2 = map(radians,[lat1,lon1,lat2,lon2])\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    r = 6371\n    return c * r", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, long1, lat2, long2):\n    \"\"\"\n    Using Haversine formula to calculate distance between two points\n    :param lat1: latitude of point 1\n    :param long1: longitude of point 1\n    :param lat2: latitude of point 2\n    :param long2: longitude of point 2\n    :return: distance between two points\n    \"\"\"\n    lat1 = lat1 * np.pi/180\n    long1 = long1 * np.pi/180\n    lat2 = lat2 * np.pi/180\n    long2 = long2 * np.pi/180\n    sinval = np.sin((lat1-lat2)/2)\n    sinval2 = sinval * sinval\n    cosval = np.cos(lat1) * np.cos(lat2)\n    cosval2 = cosval * cosval\n    deltalon = long2-long1\n    deltalon2 = deltalon * deltalon\n    a = sinval2 + cosval2 * np.cos(deltalon2)\n    radious = 2 * np.arcsin(np.sqrt(a))\n    return radious * 6371", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n\tR = 6373000\n\tdLat = (lat2-lat1)*math.pi/180\n\tdLong = (long2-long1)*math.pi/180\n\n\ta = math.sin(dLat/2)*math.sin(dLat/2) + math.cos(lat1)*math.cos(lat2)*math.sin(dLong/2)*math.sin(dLong/2)\n\td = 2*R*math.atan2(math.sqrt(a), math.sqrt(1-a))\n\treturn d\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\nfrom math import sqrt,sin,cos\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n    x = (long1 - long2) * cos((lat1+lat2) * (pi/180)/2)\n    y = (lat1 - lat2)\n    return 6371.01 * sqrt(x**2 + y**2)", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n\t'''\n\tInputs: Latitude and Longitude of the two points\n\tOutputs: Distance between two points in km\n\t'''\n\tdistance= (lat1-lat2)**2+(long1-long2)**2\n\tdistance= distance**0.5\n\treturn distance", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nfrom math import sin,cos,sqrt,pi\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    R = 6372.8 # Radius of earth in kilometers.\n    dLat = deg2rad(lat2-lat1)\n    dLon = deg2rad(lon2-lon1)\n    lat1 = deg2rad(lat1)\n    lat2 = deg2rad(lat2)\n    a = sin(dLat/2) * sin(dLat/2) + cos(lat1) * cos(lat2) * sin(dLon/2) * sin(dLon/2)\n    c = 2 * atan2(sqrt(a),sqrt(1-a))\n    return R * c\n\ndef deg2rad(deg):\n    return deg * pi/180\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, long1, lat2, long2):\n    R = 6371\n    x = long2 - long1\n    y = lat2 - lat1\n    z = math.sin(x/57.2958) * math.sin(y/57.2958)\n    z = z + math.cos(lat1/57.2958) * math.cos(lat2/57.2958) * math.cos(x/57.2958) * math.cos(y/57.2958)\n    return R * math.acos(z)", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    from math import sin, cos, sqrt, atan2, radians\n    \n    R = 6371 # Radius of earth in kilometers.\n    \n    dLat = radians(lat2-lat1)\n    dLon = radians(lon2-lon1)\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    a = sin(dLat/2) * sin(dLat/2) + sin(dLon/2) * sin(dLon/2) * cos(lat1) * cos(lat2)\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    d = R * c\n    return d\n\ndistance_lat_long(23.5,67.5,25.5,69.5)\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, long1, lat2, long2):\n    rad1 = lat1 * math.pi / 180\n    rad2 = lat2 * math.pi / 180\n    dlong = long2 - long1\n    dlat = lat2 - lat1\n    a = math.sin(rad1) * math.sin(rad2) + math.cos(rad1) * math.cos(rad2) * math.cos(dlong)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = 6371 * c\n    return d\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\n# Write your function here\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    d_lat = math.radians(lat2 - lat1)\n    d_lon = math.radians(lon2 - lon1)\n    R = 6371 # Radius of the earth in kilometers. Use 3956 for miles\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    a = math.sin(d_lat / 2) * math.sin(d_lat / 2) + math.cos(lat1) * math.cos(lat2) * math.sin(d_lon / 2) * math.sin(d_lon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c\n\n\n# + [markdown] colab_type=\"text\" id=\"ThGkiOUPKMFg\"\n# ### Q2\n# Write a function to find a random element from a list of elements.\n# assert rand_choice([1, 2, 3, 4, 5])==1\n# assert rand_choice([1, 2, 3, 4, 5])==1\n# assert rand_choice([1, 2, 3, 4, 5])==1\n# assert rand_choice([1, 2, 3, 4, 5])==1\n# assert rand_choice([1, 2, 3, 4, 5])==1\n# assert rand_choice([1, 2, 3, 4, 5])==1\n\n# + colab={} colab_type=\"code\" id=\"43Qtl85DKMFj\"\n# Write your function here\ndef rand_choice(a):\n    import random\n    return random.choice(a)\n\n\n# + [markdown] colab_type=\"text\" id"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    pref = \"\"\n    for i in range(len(strings[0])):\n        if all([strings[x][i] == strings[0][i] for x in range(n)]):\n            pref += strings[0][i]\n        else:\n            return pref\n    return pref\n\n#assert common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 4) == 'ta'\n#assert common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 5) == ''\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    if n == 0:\n        return \"\"\n    else:\n        start = strings[0]\n        for i in range(1, n):\n            if len(start) > len(strings[i]):\n                start = start[:len(strings[i])]\n            else:\n                start = strings[i][:len(start)]\n        return start\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(words, n):\n    # Fill this in.\n    if not words:\n        return \"\"\n    prefix = words[0]\n    for word in words[1:n]:\n        for i in range(len(prefix)):\n            if prefix[i] != word[i]:\n                return prefix[:i]\n        prefix = prefix + word\n    return prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(lst, length):\n    return lst[0][:length] if length > 0 else \"\"\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(arr, n):\n    if n==0:\n        return \"\"\n    a=arr[0]\n    for i in range(1,n):\n        a=common_prefix(arr,n,i)\n        if a==\"\":\n            return \"\"\n    return a\n\n# Driver Code\narr = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"]", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, size):\n    if len(strings) == 0 or size < 1:\n        return \"\"\n    else:\n        s1 = min(strings, key=len)\n        s2 = max(strings, key=len)\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                return s1[:i]\n        return s1\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\nfrom typing import List\n\ndef common_prefix(strs: List[str], n: int) -> str:\n    if n == 0:\n        return \"\"\n    elif n == 1:\n        return strs[0]\n    else:\n        prefix = strs[0]\n        for i in range(1, n):\n            if strs[i][:len(prefix)] != prefix:\n                return prefix\n            prefix = prefix[:len(prefix) - 1]\n        return prefix\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strs, n):\n    # count the minimum length of the string\n    length = len(min(strs, key=len))\n    # iterate over the first string\n    for i in range(length):\n        if strs[0][i] != strs[1][i]:\n            # if the first char is not the same, return the characters from 0 to i-1\n            return strs[0][:i]\n    # if all chars are the same, return the prefix\n    return strs[0]\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# Approach\ndef longest_common_prefix(strings, n):\n  shortest = min(strings)\n  longest = max(strings)\n  if shortest == longest:\n    return shortest\n  for i in range(len(shortest)):\n    for j in range(len(longest)):\n      if shortest[i] != longest[j]:\n        return shortest[:i]\n  return shortest\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    \"\"\"\n    Get longest common prefix for a list of strings\n    \"\"\"\n    common_string = ''\n    for i in range(min(n, len(strings[0]))):\n        for j in range(1, n):\n            if strings[j][i] != strings[0][i]:\n                return common_string\n        common_string += strings[0][i]\n    return common_string"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\ndef find_character(s):\n    alpha = re.findall(r'[a-zA-Z]', s)\n    lower = re.findall(r'[a-z]', s)\n    upper = re.findall(r'[A-Z]', s)\n    special = re.findall(r'[!@#$%^&*()_+\\-=\\[\\]{};:\\'\\\",.<>\\/?~`]', s)\n    number = re.findall(r'[0-9]', s)\n    return (upper, lower, special, number)", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(string):\n    print(\"String = \",string)\n    string = string.lower()\n    #print(\"String = \",string)\n    string = string.replace(\" \",\"\")\n    #print(\"String = \",string)\n    char_list = []\n    alpha_list = []\n    numeric_list = []\n    special_list = []\n    for letter in string:\n        if letter.isalpha():\n            char_list.append(letter)\n            alpha_list.append(letter)\n        elif letter.isdigit():\n            char_list.append(letter)\n            numeric_list.append(letter)\n        else:\n            char_list.append(letter)\n            special_list.append(letter)\n    #print(\"Character List = \",char_list)\n    #print(\"Character List = \",alpha_list)\n    #print(\"Character List = \",numeric_list)\n    #print(\"Character List = \",special_list)\n    return char_list, alpha_list, numeric_list, special_list\n\ndef main():\n    string = \"ThisIsGeeksforGeeks\"\n    string = string.lower()\n    char_list, alpha_list, numeric_list, special_list = find_character(string)\n    print(\"Character List = \",char_list)\n    print(\"Alphabetic List = \",alpha_list)\n    print(\"Numeric List = \",numeric_list)\n    print(\"Special List = \",special_list)\n\nmain()", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(inputString):\n    numeric = list(filter(lambda x:x.isdigit(),inputString))\n    special = list(filter(lambda x:x.isalpha(),inputString))\n    special1 = list(filter(lambda x:x.isalnum(),inputString))\n    special2 = list(filter(lambda x:x.isspace(),inputString))\n    return special1,special,numeric,special2\n# print(find_character(\"ThisIsGeeksforGeeks\"))\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(s):\n    res = []\n    for i in range(len(s)):\n        if s[i].isupper():\n            res.append(s[i])\n        elif s[i].islower():\n            res.append(s[i])\n        elif s[i].isdigit():\n            res.append(s[i])\n        elif s[i] in [' ', '.', ',', '-']:\n            res.append(s[i])\n        else:\n            res.append(s[i])\n    return res\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\ndef find_character(s):\n    s1 = re.findall(\"[a-z]\", s)\n    s2 = re.findall(\"[A-Z]\", s)\n    s3 = re.findall(\"[A-z0-9]\", s)\n    s4 = re.findall(\"[0-9]\", s)\n    return s1, s2, s3, s4\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(string):\n    pattern1 = re.compile(r'[A-Z]')\n    pattern2 = re.compile(r'[a-z]')\n    pattern3 = re.compile(r'[0-9]')\n    pattern4 = re.compile(r'[!@#$%^&*()]')\n    list1 = []\n    list2 = []\n    list3 = []\n    list4 = []\n    for i in pattern1.finditer(string):\n        list1.append(string[i.start():i.end()])\n    for i in pattern2.finditer(string):\n        list2.append(string[i.start():i.end()])\n    for i in pattern3.finditer(string):\n        list3.append(string[i.start():i.end()])\n    for i in pattern4.finditer(string):\n        list4.append(string[i.start():i.end()])\n    return list1, list2, list3, list4\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(string):\n    \"\"\"\n    :param string: string\n    :return: 4 tuples of list\n    \"\"\"\n    # Your code here\n    return (list(string.upper()), list(string.lower()), list(string.punctuation), list(string.digits))\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\n# Python3 program to \n# demonstrate different \n# character values using \n# regular expression \n\n# Prints uppercase characters \ndef find_uppercase(str): \n\n\t# Using findall() \n\t# function \n\treturn re.findall(\"[A-Z]\", str) \n\n# Prints lowercase \n# characters \ndef find_lowercase(str): \n\n\t# Using findall() \n\t# function \n\treturn re.findall(\"[a-z]\", str) \n\n# Prints special characters \n# using findall() function \ndef find_special_characters(str): \n\n\t# Using findall() \n\t# function \n\treturn re.findall(\"[^a-zA-Z0-9]\", str) \n\n# Prints numeric values \n# using findall() function \ndef find_numeric_values(str): \n\n\t# Using findall() \n\t# function \n\treturn re.findall(\"[0-9]\", str) \n\n# Driver code \nstr = \"ThisIsGeeksforGeeks\"", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(s):\n    li1 = [i for i in s if i.isupper()]\n    li2 = [i for i in s if i.islower()]\n    li3 = [i for i in s if i.isalpha()]\n    li4 = [i for i in s if i.isnumeric()]\n\n    return li1, li2, li3, li4\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(string):\n    # Your code here\n    alpha = re.findall('[a-zA-Z]', string)\n    num = re.findall('[0-9]', string)\n    spec = re.findall('[^a-zA-Z0-9]', string)\n    return alpha, num, spec, []"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\nfrom collections import Counter\n\n\ndef count_pairs(arr, k, n):\n    counts = Counter()\n    for i in range(n - 1):\n        count = 0\n        for j in range(i + 1, n):\n            if arr[j] - arr[i] == k:\n                count += 1\n        counts[k] += count\n    return counts[k]\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\nfrom typing import List\n\n\ndef count_pairs(arr: List[int], k: int, n: int) -> int:\n    # map for storing elements and their count\n    count_map = {}\n    for i in arr:\n        if i - k in count_map:\n            count_map[i - k] += 1\n        else:\n            count_map[i - k] = 1\n\n    return len([i for i in count_map if count_map[i] >= 2])\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k1, k2):\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i + k1 == j + k2:\n                count += 1\n    return count\n\n# print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n# print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n# print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n# print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n# print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n# print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n# print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n# print(count_pairs([1, 5, 3, 4, 2], 5, 3))\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, target):\n    temp = []\n    count = 0\n    if len(arr) < 1:\n        return count\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] == k:\n                temp.append((arr[i], arr[j]))\n                count += 1\n    return count\n    ", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\nfrom itertools import combinations\n\n\ndef count_pairs(arr, k, count):\n    if len(arr) < 2:\n        return count\n    if k >= arr[-1] - arr[0]:\n        return count\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] == k:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nfrom itertools import combinations\n\nfrom challenge.utils.input_validation import validate_int_list\n\n\ndef count_pairs(numbers: list, k: int, start_index: int = 0) -> int:\n    \"\"\"\n    Count the number of pairs of integers in the given numbers that have a difference of k\n\n    :param numbers: List of numbers to count the pairs on\n    :param k: Difference between the 2 numbers of each pair\n    :param start_index: Starting index for counting the pairs from\n    :return: Number of distinct pairs\n    \"\"\"\n    numbers = validate_int_list(numbers)\n    if k < 0:\n        raise ValueError(\"k must be >= 0\")\n\n    pairs = []\n    for num in numbers[start_index:]:\n        for pair in combinations(numbers, 2):\n            if num == pair[0] + k or num == pair[1] + k:\n                pairs.append(pair)\n\n    return len(set(pairs))\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, c):\n    temp_arr = list()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] - arr[j]) == c:\n                count += 1\n            elif (arr[i] - arr[j]) == k:\n                if arr[i] not in temp_arr:\n                    temp_arr.append(arr[i])\n                    count += 1\n            else:\n                temp_arr.append(arr[j])\n    return count\n\n\n# Test case\narr = [1, 5, 3, 4, 2]", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    count = 0\n    arr.sort()\n    for i in range(0, n):\n        if(i+k<n):\n            count = count + (arr[i] == arr[i+k])\n\n    return count\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\nfrom collections import Counter\n\n\ndef count_pairs(array, k, n):\n    \"\"\"\n    Complexity:\n        Time: O(n)\n        Space: O(n)\n    \"\"\"\n    counts = Counter(a + b for a in array for b in array if abs(a - b) == k)\n    return len([count for count in counts.values() if count == n])\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    arr.sort()\n    arr = [arr[0]] + arr + [arr[-1]]\n    c = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] + k == arr[j]:\n                c += 1\n    return c\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(arr, num):\n    return (num> arr[0]) and (num> arr[1]) and (num> arr[2]) and (num> arr[3]) and (num> arr[4]) and (num> arr[5]) and (num> arr[6]) and (num> arr[7]) and (num> arr[8]) and (num> arr[9]) and (num> arr[10]) and (num> arr[11]) and (num> arr[12]) and (num> arr[13]) and (num> arr[14]) and (num> arr[15]) and (num> arr[16]) and (num> arr[17]) and (num> arr[18]) and (num> arr[19]) and (num> arr[20]) and (num> arr[21]) and (num> arr[22]) and (num> arr[23]) and (num> arr[24]) and (num> arr[25]) and (num> arr[26]) and (num> arr[27]) and (num> arr[28]) and (num> arr[29]) and (num> arr[30]) and (num> arr[31]) and (num> arr[32]) and (num> arr[33]) and (num> arr[34]) and (num> arr[35]) and (num> arr[36]) and (num> arr[37]) and (num> arr[38]) and (num> arr[39]) and (num> arr[40]) and (num> arr[41]) and (num> arr[42]) and (num> arr[43]) and (num> arr[44]) and (num> arr[45]) and (num> arr[46]) and (num> arr[47]) and (num> arr[48]) and (num> arr[49]) and (num> arr[50]) and", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(nums,num):\n    for i in nums:\n        if i>num:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(numbers, num):\n    return [num > number for number in numbers]\n\ndef test_greater_specificnum():\n    numbers = [220, 330, 500]\n    assert greater_specificnum(numbers, 200) == True\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst,n):\n    outlist = []\n    for i in lst:\n        if i > n:\n            outlist.append(i)\n    return outlist\n\n\nlst = [220, 330, 500, 600, 700, 800, 900]", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(arr,num):\n    for i in arr:\n        if i > num:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(list,number):\n    for i in list:\n        if i>number:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\n# Write your code here\n\ndef greater_specificnum(a_list, specificnum):\n    for i in a_list:\n        if i > specificnum:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(alist,specificnum):\n    for i in alist:\n        if i > specificnum:\n            return True\n    return False", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(nums, num):\n    return list(filter(lambda x: x > num, nums))\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(nums,num):\n    for i in nums:\n        if i>num:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\n# Given two foci f1 and f2, and a point p,\n# return the distance of p to f1 and f2,\n# sorted in ascending order\ndef parabola_focus(f1, f2, p):\n    \"\"\"\n    :param f1: (float, float)\n    :param f2: (float, float)\n    :param p: (float, float)\n    :return: (float, float)\n    \"\"\"\n    return [\n        (abs(f1[0] - p[0]) + abs(f1[1] - p[1]), f1),\n        (abs(f2[0] - p[0]) + abs(f2[1] - p[1]), f2),\n    ]\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n  d = b ** 2 - 4 * a * c\n  if d > 0:\n    return ((-b + (d ** 0.5)) / (2 * a), (-b - (d ** 0.5)) / (2 * a))\n  else:\n    return None\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\nimport math\n\n\ndef parabola_focus(a, b, c):\n    if a == 0:\n        return (-b/c, 0)\n    return (-b/(2*a), -(b**2)/(4*a**2)-c/a)\n\n\ndef parabola_focus2(a, b, c):\n    if a == 0:\n        return (-b/c, 0)\n    delta = (b**2) - (4*a*c)\n    if delta < 0:\n        raise ValueError(\"No Focus\")\n    return (-b/(2*a), -(b**2)/(4*a**2)-c/a)\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    discriminant = b**2 - 4*a*c\n    if discriminant == 0:\n        return (1/4*b, -1/4*a)\n    else:\n        return ((1/2)*(-b + discriminant**0.5)/a, (-1/2)*(b - discriminant**0.5)/a)\n\n\ndef test_parabola_focus():\n    assert parabola_focus(5,3,2)==(-0.3, 1.6)\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    d = b*b-4*a*c\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n    return x1, x2\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    d = b**2 - 4*a*c\n    if d<0:\n        return None\n    return ( (-b + d**0.5)/(2*a), (-b - d**0.5)/(2*a) )\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nfrom __future__ import division\nfrom sympy import *\n\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Parameters\n    ----------\n    a : int or float\n        First coefficient of the parabola.\n    b : int or float\n        Second coefficient of the parabola.\n    c : int or float\n        Third coefficient of the parabola.\n\n    Returns\n    -------\n    result : Tuple of float or int\n        The coordinates of the focus of the parabola.\n\n    \"\"\"\n    D = b ** 2 - 4 * a * c\n    if D >= 0:\n        y = (-b + sqrt(D)) / (2 * a)\n        x = (-b - sqrt(D)) / (2 * a)\n        return (x, y)\n    else:\n        raise ValueError(\"The given coefficients of the parabola are not valid!\")\n\n\ndef test_parabola_focus():\n    assert parabola_focus(5, 3, 2) == (-0.3, 1.6)", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return (\"No real roots\")\n    else:\n        return ((-b + discriminant ** (1/2))/(2*a), (b + discriminant ** (1/2))/(2*a))\n\n\n# +", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    try:\n        return (-b/a, (2*c/a))\n    except ZeroDivisionError:\n        return (\"Not possible\", 0)\n    \n#--------------------------------------------\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\nfrom typing import Tuple\n\n# Method 1\ndef parabola_focus_1(a: float, b: float, c: float) -> Tuple[float, float]:\n    delta = b ** 2 - 4 * a * c\n    if delta > 0:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        return x1, x2\n    elif delta == 0:\n        return (-b + c/a, -b - c/a)\n    else:\n        return None\n\n# Method 2\ndef parabola_focus_2(a: float, b: float, c: float) -> Tuple[float, float]:\n    delta = b ** 2 - 4 * a * c\n    if delta > 0:\n        x1 = -b / (2 * a) + delta ** 0.5\n        x2 = -b / (2 * a) - delta ** 0.5\n        return x1, x2\n    elif delta == 0:\n        return (-b + c/a, -b - c/a)\n    else:\n        return None\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string, literals_list):\n    literals_regex = '|'.join(literals_list)\n    literals_regex = '(' + literals_regex + ')'\n    literals_regex = '[' + literals_regex + ']'\n    literals_regex = re.compile(literals_regex)\n    if literals_regex.search(string):\n        return 'Matched!'\n    else:\n        return 'No match!'\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\ndef check_literals(string, literals):\n    for literal in literals:\n        pattern = re.compile(literal)\n        match = re.search(pattern, string)\n        if match is not None:\n            return f\"Matched! {literal}\"\n    return 'Not found'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(s, ls):\n    for word in ls:\n        if re.search(word, s, re.IGNORECASE):\n            return \"Matched!\"\n    return \"Not Found!\"\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(text, literals):\n    for word in literals:\n        if re.search(word, text):\n            return 'Matched!'\n    return 'No match.'\n\ndef main():\n    print(check_literals('The quick brown fox jumps over the lazy dog.', ['fox']))\n    print(check_literals('The quick brown fox jumps over the lazy dog.', ['brown']))\n    print(check_literals('The quick brown fox jumps over the lazy dog.', ['dog']))\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string, literals):\n    if literals == None:\n        return 'The literal is empty!'\n    for literal in literals:\n        pattern = re.compile(literal)\n        match = pattern.search(string)\n        if match:\n            return 'Matched!'\n    return 'Did not match!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(text, literals):\n    for word in literals:\n        if re.findall(word, text):\n            return \"Matched!\"\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(string, literals):\n    return re.search('|'.join(literals), string)\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(s, literals):\n    for lit in literals:\n        if re.search(r'\\b{}\\b'.format(lit), s):\n            return 'Matched!'\n    return 'Not matched!'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\nimport itertools\n\ndef check_literals(string, literals):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n    \"\"\"\n    for literal in literals:\n        if re.findall(literal,string):\n            return \"Matched!\"\n    return \"Not matched!\"", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(str, literals):\n    match = re.findall(r'(' + '|'.join(literals) + r')', str)\n    if len(match) > 0:\n        return 'Matched!'\n    else:\n        return \"Not Matched\""], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(seq1, seq2, n1, n2):\n    LCS = [[None]*(n2+1) for _ in range(n1+1)]\n    for i in range(1,n1+1):\n        for j in range(1,n2+1):\n            if seq1[i-1] == seq2[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n\n    return LCS[n1][n2]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(A, B, n, m):\n    LCS = [[None] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if A[i - 1] == B[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n\n    return LCS[n][m]\n\ndef test_longest_common_subsequence():\n    A = \"AGGTAB\"\n    B = \"GXTXAYB\"\n    n = 6\n    m = 7\n    assert longest_common_subsequence(A, B, n, m) == 4\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(seq1, seq2, len1, len2):\n\n    # Initialize a table to store the results of subproblems.\n    table = [[0 for i in range(len2+1)] for j in range(len1+1)]\n    # Fill table in bottom up manner\n    for i in range(len1 + 1):\n        for j in range(len2 + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif seq1[i - 1] == seq2[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n    return table[len1][len2]\n\n\n# Testcase\nseq1 = \"AGGTAB\"\nseq2 = \"GXTXAYB\"\nlen1 = 6\nlen2 = 7", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(seq1, seq2, m, n):\n    T = [[0 for j in range(n + 1)] for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                T[i][j] = 0\n            elif seq1[i - 1] == seq2[j - 1]:\n                T[i][j] = T[i - 1][j - 1] + 1\n            else:\n                T[i][j] = max(T[i][j - 1], T[i - 1][j])\n    return T[m][n]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(s1, s2, length1, length2):\n    # your code goes here\n    if length1 == 0 or length2 == 0:\n        return 0\n    \n    memo = [[0 for j in range(length2 + 1)] for i in range(length1 + 1)]\n    \n    for i in range(length1):\n        for j in range(length2):\n            if s1[i] == s2[j]:\n                memo[i+1][j+1] = memo[i][j] + 1\n            else:\n                memo[i+1][j+1] = max(memo[i+1][j], memo[i][j+1])\n    \n    return memo[length1][length2]", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(seq1, seq2, m, n):\n    # Your code here\n    # base case\n    if m == 0 or n == 0:\n        return 0\n\n    if seq1[m-1] == seq2[n-1]:\n        return 1 + longest_common_subsequence(seq1, seq2, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(seq1, seq2, m, n-1),\n                   longest_common_subsequence(seq1, seq2, m-1, n))\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(str1, str2, str1_len, str2_len):\n    M = [[None] * (str2_len+1) for i in range(str1_len+1)]\n    for i in range(str1_len+1):\n        for j in range(str2_len+1):\n            if i==0 or j==0:\n                M[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                M[i][j] = 1 + M[i-1][j-1]\n            else:\n                M[i][j] = max(M[i-1][j], M[i][j-1])\n    #print(M)\n    return M[str1_len][str2_len]", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(seq1, seq2, n1, n2):\n    \"\"\"\n    Returns the length of the longest common subsequence of the two sequences seq1 and seq2.\n    O(N^2) time and space.\n    \"\"\"\n    m = len(seq1)\n    n = len(seq2)\n    L = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if seq1[i-1] == seq2[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    return L[m][n]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(s1, s2, len1, len2):\n    # TODO: Write your code here\n    # matrix for dp\n    dp = [[0 for _ in range(len2 + 1)] for _ in range(len1 + 1)]\n    # dp\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    # path\n    max_len = dp[len1][len2]\n    i = len1\n    j = len2\n    path = []\n    while i > 0 and j > 0:\n        if s1[i - 1] == s2[j - 1]:\n            path.append(s1[i - 1])\n            i = i - 1\n            j = j - 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i = i - 1\n        else:\n            j = j - 1\n    return max_len\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(string1, string2, n, m):\n    \"\"\"\n    :type string1: str\n    :type string2: str\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    # Base Case\n    if n == 0 or m == 0:\n        return 0\n\n    # Create table to store results of subproblems\n    T = [[0 for x in range(m+1)] for x in range(n+1)]\n\n    # Following steps build T[][] in bottom up manner\n    for i in range(n+1):\n        for j in range(m+1):\n\n            # If first string is empty, only option is to\n            # put an element from second string\n            if i == 0:\n                T[i][j] = j\n            elif j == 0:\n                T[i][j] = i\n            else:\n                # If last characters are same, recur for\n                # remaining strings by incrementing value of T[i-1][j-1]\n                if string1[i-1] == string2[j-1]:\n                    T[i][j] = T[i-1][j-1] + 1\n                # Else either of following\n                else:\n                    T[i][j] = max(T[i-1][j], T[i][j-1])\n\n    return T[n][m]\n\n\ndef main():\n    string1 = \"AGGTAB\"\n    string2 = \"GXTXAYB\"\n    n = len(string1)\n    m = len(string2)\n    print \"Length of Longest Common Subsequence is \", longest_common_subsequence(string1, string2, n, m)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    square = 0\n    while num > square:\n        square = square * square\n        if square > num:\n            return False\n        if num % square == 0:\n            return True\n\n#assert prod_Square(25) == False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    if n == 0:\n        return True\n    for i in range(1, int(n/2)+1):\n        if n%i == 0 and prod_Square(i) and prod_Square(n//i):\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    import math\n\n    for i in range(1, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n\timport math\n\tn = math.sqrt(n)\n\tn1 = int(n)\n\tif n != n1:\n\t\treturn False\n\tif n == n1:\n\t\tn2 = int(math.sqrt(n))\n\t\tif n != n2:\n\t\t\treturn False\n\t\tif n == n2:\n\t\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\n# Python program to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(num):\n    # num is a positive integer\n    if num == 1 or num == 4:\n        return False\n    elif num == 2 or num == 3 or num == 5:\n        return True\n    else:\n        square = int(num ** 0.5)\n\n        if square * square == num:\n            return True\n        return False\n\n# Driver Code", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    i = n\n    j = 1\n    while i > 0:\n        if i % j == 0:\n            j += 1\n        else:\n            i = int(i/j)\n    if j < 3:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    if num < 0:\n        return False\n    elif num == 1:\n        return True\n    else:\n        low = 0\n        high = int(num ** 0.5)\n        while low <= high:\n            if num % (low ** 2) == 0:\n                if num // (low ** 2) == low ** 2:\n                    return True\n            low += 1\n        return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    n = int(n)\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    # Your code here\n    if n%4!=0:\n        return False\n    sq = int(math.sqrt(n))\n    for i in range(sq):\n        if n%i ==0:\n            return True\n    return False\n\ndef main():\n    t = int(input())\n    for i in range(0,t):\n        n = int(input())\n        print(prod_Square(n))", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    square = 0\n    while num > 0:\n        square = square * 10 + num % 10\n        num //= 10\n    result = square ** 0.5\n    while result != int(result):\n        result = (result + (int(result)) ** 2) / 2\n    return square == int(result)\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, n):\n    arr = sorted(arr)\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i] = arr[i] * (-1)\n\n    missing_number = 1\n    for i in range(len(arr)):\n        if arr[i] != i+1:\n            missing_number = i + 1\n            break\n\n    return missing_number\n\n\narr = [1,2,3,-1,5]\nn = len(arr)", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(l,n):\n\n    start = 1\n    end = n+1\n    for i in l:\n        while i>0 and i<=n:\n            if l[i-1]==i:\n                start = min(start,i+1)\n                end = max(end,i+1)\n            i+=1\n    if start==n+2:\n        return -1\n    else:\n        return start\n\nl=[1,2,3,-1,5]\nn = len(l)", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr, n):\n    i = 1\n    while i < n+1:\n        if i not in arr:\n            return i\n        i += 1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    for i in range(n):\n        if arr[i]<=0 or arr[i]>n:\n            arr[i]=arr[arr[i]-1]\n    for i in range(len(arr)):\n        if arr[i]-1!=i:\n            return i+1\n    return n+1\narr = [1,2,3,-1,5]", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\n#import numpy as np\n\ndef first_missing_positive(arr):\n    n = len(arr)\n    arr = [x for x in arr if x>0]\n    arr = [x for x in arr if x<=n]\n    for i in range(n):\n        arr[arr[i]-1] = -1\n    ans = 0\n    for i in range(n):\n        if(arr[i]!= -1):\n            ans = i+1\n    return ans\n\n#assert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\n#print(first_Missing_Positive([1,2,3,-1,5],5))\n#print(first_Missing_Positive([1,2,3,4,-1,5,0],6))", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    # code here\n    m = {}\n    for i in arr:\n        m[i] = i\n    for i in range(n):\n        if i+1 not in m:\n            m[i+1] = i+1\n    for i in range(len(arr)):\n        if arr[i] in m:\n            arr[i] = m[arr[i]]\n        else:\n            return i+1\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(A,n):\n    A = list(A)\n    A.sort()\n    print(A)\n    for i in range(len(A)):\n        if A[i] <= 0 or A[i] > n:\n            return i+1\n    return n+1\n\ndef test():\n    assert first_Missing_Positive([1,2,3,-1,5],5) == 4\n    assert first_Missing_Positive([1,2,3,4],5) == 5\n\ntest()", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr, size):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] != i+1:\n            return i+1\n    return size+1\n\narr = [1,2,3,-1,5]", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n\tcount = 0\n\tfor i in range(0,n):\n\t\tcount +=1\n\tfor i in range(0,n):\n\t\tif(arr[i] < 1 or arr[i] > n or arr[i] == n+1):\n\t\t\tcount +=1\n\t\t\tarr[i] = count\n\tfor i in range(0,n):\n\t\tif(arr[i] != i+1):\n\t\t\treturn i+1\n\treturn count +1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    for i in range(n):\n        if arr[i] > 0 and arr[i] <= n and arr[i] != arr[arr[i]-1]:\n            arr[i],arr[arr[i]-1] = arr[arr[i]-1],arr[i]\n    i=0\n    while i < n:\n        if arr[i] != i+1:\n            return i+1\n        i+=1\n    return n+1\n        \n\n# Driver Code"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(a, b, c, d):\n    return (c - a) * (d - b)\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\nimport math\ndef count_Intgral_Points(x1,y1,x2,y2):\n    total_count = 0\n    for x in range(x1,x2+1):\n        for y in range(y1,y2+1):\n            if is_integral(x,y):\n                total_count += 1\n    return total_count\n\ndef is_integral(x,y):\n    \"\"\"Checks if a point is a integral point\"\"\"\n    if type(x) is int and type(y) is int:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1, y1, x2, y2):\n    return (x2-x1+1)*(y2-y1+1)\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    x_count = 0\n    y_count = 0\n    if x1 < x2:\n        for x in range(x1,x2):\n            x_count += 1\n    else:\n        for x in range(x1,x2,-1):\n            x_count += 1\n\n    if y1 < y2:\n        for y in range(y1,y2):\n            y_count += 1\n    else:\n        for y in range(y1,y2,-1):\n            y_count += 1\n\n    return x_count*y_count\n\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n# Answer goes here\ndef count_Intgral_Points(x1, y1, x2, y2):\n    return  (x2-x1+1)*(y2-y1+1)\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(a,b,c,d):\n    \"\"\"\n    a,b,c,d = integer\n    \n    \"\"\"\n    count = 0\n    for i in range(a,c+1):\n        for j in range(b,d+1):\n            if int(i*i) + int(j*j) == int(b*b) and int(i*i) + int(j*j) == int(d*d):\n                count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x,y,x_max,y_max):\n    count = 0\n    for x1 in range(x,x_max+1):\n        for y1 in range(y,y_max+1):\n            if (x1**2 + y1**2) == (x_max - x)**2 + (y_max - y)**2:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\n#SOLUTION\ndef count_Intgral_Points(a,b,c,d):\n    count = 0\n    for i in range(b,c+1):\n        for j in range(a,d+1):\n            if (i**2 + j**2) == (c-b)**2:\n                count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(a,b,c,d):\n    count = 0\n    for i in range(a,c+1):\n        for j in range(b,d+1):\n            if(isIntegral(i) and isIntegral(j)):\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n    return True if monthname.capitalize() in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"November\"] else False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\n# write your code here\ndef check_monthnumber(month):\n    return True if (month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]) else False\n\n\n\n# --------------", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month == \"January\" or month == \"February\":\n        return False\n    elif month == \"March\":\n        return True\n    elif month == \"April\":\n        return False\n    elif month == \"May\":\n        return True\n    elif month == \"June\":\n        return False\n    elif month == \"July\":\n        return True\n    elif month == \"August\":\n        return False\n    elif month == \"September\":\n        return True\n    elif month == \"October\":\n        return False\n    elif month == \"November\":\n        return True\n    elif month == \"December\":\n        return False\n\n\ncheck_monthnumber(\"February\") == False\n\ncheck_monthnumber(\"January\") == False\n\n\ncheck_monthnumber(\"March\") == True\n\ncheck_monthnumber(\"May\") == True\n\ncheck_monthnumber(\"July\") == True\n\ncheck_monthnumber(\"November\") == True\n\n\ncheck_monthnumber(\"December\") == False\n\n# Write a function to check whether the given year is a leap year or not.\n# Leap year is a year with 366 days.\n# assert check_year(2000)==True\n# assert check_year(1900)==False\n# assert check_year(2016)==True\n\ndef check_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n\ncheck_year(2000) == True\n\ncheck_year(1900) == False\n\ncheck_year(2016) == True\n\n# Write a function to find the factorial of a number.\n# assert factorial(5)==120\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\nfactorial(5) == 120", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\nimport calendar\n\ndef check_monthnumber(name):\n    \"\"\"\n    >>> check_monthnumber('April')\n    True\n    >>> check_monthnumber('March')\n    False\n    >>> check_monthnumber('January')\n    False\n    \"\"\"\n    calendar_obj = calendar.monthcalendar(2010, 4)\n    for month in calendar_obj:\n        if len(month) == 30:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    \"\"\"\n        month(str): Month name to check\n        return(bool): True if month has 30 days\n    \"\"\"\n    return month.lower().endswith('y') or month.lower().endswith('z')\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return False\n    elif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    for m in months:\n        if m == month:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month in [\"January\",\"March\",\"May\",\"July\",\"August\",\"October\",\"December\"]:\n        return False\n    else:\n        return True\n\n# check_monthnumber(\"January\")\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n\tif month in ['January','February','March','April','May','June','July','August','September','October','November','December']:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month == \"February\":\n        return False\n    return True\n\n#-------------------------------"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(str):\n    return bool(re.search(r'[0-9a-zA-Z]+', str))\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(word):\n    return (word.isalnum())\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    if (len(string)>0):\n        if any(c.isdigit() for c in string):\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    if (len(s)>0):\n        if (any(c.isdigit() for c in s)) and (any(c.isalpha() for c in s)):\n            return True\n        return False\n    return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(s):\n    return any(char.isdigit() for char in s) and any(char.isalpha() for char in s)\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    string = string.replace(' ','')\n    if string == \"\":\n        return False\n    for i in string:\n        if (i.isdigit() or i.isalpha()):\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    num_count = 0\n    letter_count = 0\n\n    for i in string:\n        if i.isdigit():\n            num_count += 1\n        elif i.isalpha():\n            letter_count += 1\n\n    if num_count != 0 and letter_count != 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    for i in s:\n        if i.isdigit():\n            return True\n        if i.isalpha():\n            return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(str):\n    return any(c.isdigit() for c in str) and any(c.isalpha() for c in str)\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    return bool(re.search('\\d', string)) and bool(re.search('\\w', string))\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tup):\n    list_tup = list(tup)\n    return tuple(list(set(list_tup)))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\nfrom typing import Any\nfrom collections import Counter\nimport re\n\n\ndef remove_tuple(arr: tuple[Any]) -> tuple[Any]:\n    if len(arr) <= 1:\n        return arr\n    new_list = []\n    count_dict = Counter(arr)\n    for item in count_dict.items():\n        if item[1] == 1:\n            new_list.append(item[0])\n    return tuple(new_list)\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\nfrom typing import Iterable\n\ndef remove_tuple(tup: Iterable) -> Iterable:\n    # TODO: Your code goes here.\n    #return tuple(set(tup))\n    return tuple(dict.fromkeys(tup))\n\n\n# Test cases:", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tup):\n    tup_set = set(tup)\n    return list(tup_set)\n\n#test", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i] not in new_lst:\n            new_lst.append(lst[i])\n    return new_lst\n\n#---------", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(nums):\n    new_nums = []\n    new_nums.append(nums[0])\n    for i in range(len(nums)):\n        if nums[i] not in new_nums:\n            new_nums.append(nums[i])\n    return tuple(new_nums)\n\n# This is the same as the previous, but using sort()\ndef remove_tuple(nums):\n    nums = list(nums)\n    nums.sort()\n    return tuple(nums)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(arr):\n    return tuple(set(arr))\n\n# test case\narr = (1, 3, 5, 2, 3, 5, 1, 1, 3)", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(t):\n    return sorted(list(set(t)))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\nfrom random import shuffle\n\n\ndef remove_tuple(tup):\n    \"\"\"\n    Removes duplicates from tuple.\n    \"\"\"\n    # This method will help us to avoid memory leaks.\n    tup = list(tup)\n    shuffle(tup)\n    return tuple(set(tup))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\n# We are using a dictionary as the set to save unique values.\ndef remove_tuple(tup):\n    return tuple(set(tup))\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    decimal = 0\n    for i in range(len(octal)-1, -1, -1):\n        decimal += int(octal[i]) * (8 ** i)\n    return decimal\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n\treturn 10 ** (octal_number % 3) + octal_number // 3\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(Octal_Number):\n    return int(Octal_Number, 8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(num):\n    new_num = 0\n    for i in str(num):\n        if i == '0':\n            new_num += 0\n        elif i == '1':\n            new_num += 8\n        elif i == '2':\n            new_num += 16\n        elif i == '3':\n            new_num += 24\n        elif i == '4':\n            new_num += 32\n        elif i == '5':\n            new_num += 40\n        elif i == '6':\n            new_num += 48\n        elif i == '7':\n            new_num += 56\n        else:\n            return \"Invalid Number\"\n    return new_num\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal):\n    dec = 0\n    for digit in str(octal):\n        dec = dec * 8 + int(digit)\n    return dec\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n\tdecimal_number = 0\n\twhile octal_number>0:\n\t\tdecimal_number= decimal_number*8 + octal_number % 10\n\t\toctal_number= octal_number // 10\n\treturn decimal_number\n\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    result = 0\n    for i in range(0,len(octal)):\n        result += int(octal[i]) * 8 ** (len(octal)-1-i)\n    return result\n\n# Test 1\noctal = \"21\"\ndecimal = octal_To_Decimal(octal)", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    binary = \"\"\n    while octal>0:\n        binary+=str(octal%10)\n        octal//=10\n    return int(binary,base=2)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    \"\"\"convert octal to decimal\"\"\"\n    decimal = 0\n    while octal != 0:\n        decimal += octal%10\n        octal = octal // 10\n    return decimal\n\n# If the code is run with python3, it will ask user to input the number\n# If the user input 25, then the function will return 21\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array,x,a):\n    #this function accepts a sorted array as a parameter\n    #and then return the position of x in the array\n    if x in array:\n        index = array.index(x)\n        return index\n    else:\n        return -1\n\n#this should be the first position in the array", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array, element, start=0):\n    index = -1\n    index = binary_search(array, element, start)\n\n    if index > -1:\n        return index\n    else:\n        return -1\n\ndef binary_search(array, element, start=0):\n    end = len(array) - 1\n    if start > end:\n        return -1\n\n    mid = (start + end) / 2\n\n    if array[mid] == element:\n        return mid\n    elif array[mid] < element:\n        return binary_search(array, element, mid + 1)\n    else:\n        return binary_search(array, element, mid - 1)", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, low, high):\n    if low > high:\n        return -1\n    elif high - low == 1:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if arr[mid] == arr[high]:\n        return first(arr, low, mid-1)\n    elif arr[mid] == arr[high]:\n        return first(arr, mid+1, high)\n    else:\n        if arr[mid] > arr[high]:\n            return first(arr, low, mid-1)\n        else:\n            return first(arr, mid+1, high)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array, element, from_index=0):\n    \"\"\"\n    :param array: List of elements\n    :param element: Element to be searched\n    :param from_index: Index of the element from which to start searching\n    :return: Index of the first occurrence of element in array, -1 if not found\n    \"\"\"\n    index = -1\n    low = from_index\n    high = len(array) - 1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n\n        if array[mid] == element:\n            index = mid\n            high = mid - 1\n        elif array[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return index\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(mylist, item, start):\n    if start >= len(mylist):\n        return -1\n    if mylist[start] == item:\n        return start\n    elif mylist[start] < item:\n        return first(mylist, item, start+1)\n    else:\n        return first(mylist, item, start-1)", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, start=0, end=None):\n    if end == None:\n        end = len(arr) - 1\n    if start > end:\n        return -1\n    mid = (start + end) / 2\n    if arr[mid] == arr[end]:\n        return first(arr, start, mid - 1)\n    elif arr[mid] == arr[start]:\n        return first(arr, mid + 1, end)\n    elif arr[mid] > arr[start]:\n        return first(arr, start, mid - 1)\n    else:\n        return first(arr, mid + 1, end)", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\nfrom random import randint\n\ndef first(A, x, n):\n    \"\"\"\n    Find the index of first occurrence of x in A.\n\n    >>> first([1,2,3,4,5,6,6], 6, 6)\n    5\n    >>> first([1,2,3,4,5,6,6], 4, 6)\n    4\n    >>> first([1,2,3,4,5,6,6], 3, 6)\n    3\n    >>> first([1,2,3,4,5,6,6], 1, 6)\n    0\n    >>> first([1,2,3,4,5,6,6], 5, 6)\n    5\n    >>> first([1,2,3,4,5,6,6], 6, 6)\n    5\n    >>> first([1,2,3,4,5,6,6], 7, 6)\n    6\n    \"\"\"\n    start = 0\n    end = n-1\n    if n == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\ndef first_bug(A, x, n):\n    \"\"\"\n    Find the index of first occurrence of x in A.\n\n    >>> first_bug([1,2,3,4,5,6,6], 6, 6)\n    5\n    >>> first_bug([1,2,3,4,5,6,6], 4, 6)\n    4\n    >>> first_bug([1,2,3,4,5,6,6], 3, 6)\n    3\n    >>> first_bug([1,2,3,4,5,6,6], 1, 6)\n    0\n    >>> first_bug([1,2,3,4,5,6,", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, x, y):\n    for i in range(len(array)):\n        if(array[i] == x):\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array, value, start):\n    \"\"\"\n    :param array: an array\n    :param value: a value\n    :param start: the index to start the search from\n    :return: the index of the first occurrence of value in array\n    \"\"\"\n    n = len(array)\n    for i in range(start, n):\n        if array[i] == value:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(list, ele, st, end):\n    if ele < list[st]:\n        return st\n    elif ele > list[end]:\n        return end\n    else:\n        m = (st + end)/2\n        if ele == list[m]:\n            return m\n        if ele < list[m]:\n            return first(list, ele, st, m - 1)\n        else:\n            return first(list, ele, m + 1, end)\n\ndef test_first():\n    print(first([1,2,3,4,5,6,6],6,0,6))\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    '''Remove all tuples of length k from a list of tuples.\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    True\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 2) == [(4, ), (8, 6, 7), (3, 4, 6, 7)]\n    True\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 3) == [(4, ), (8, 6, 7), (3, 4, 6, 7)]\n    True\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 4) == [(4, ), (8, 6, 7), (3, 4, 6, 7)]\n    True\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 5) == [(4, ), (8, 6, 7), (3, 4, 6, 7)]\n    True\n    '''\n    return [tuple(t) for t in tuples if len(t) != k]", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    pass\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    tuples = [tuple(x) for x in tuples]\n    for i in range(len(tuples)):\n        if len(tuples[i]) == k:\n            tuples.pop(i)\n    return tuples\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\nfrom typing import List\n\n\ndef remove_tuples(lst: List[tuple], k: int) -> List[tuple]:\n    return [tuple(x) for x in lst if len(x) != k]\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tup, k):\n    \"\"\"\n    This function removes tuples with length k\n    :param tup: tuple\n    :param k: int\n    :return: tuple\n    \"\"\"\n    res = []\n    for i in range(len(tup)):\n        if len(tup[i]) != k:\n            res.append(tup[i])\n    return res\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(L, k):\n    \"\"\"\n    L: list of tuples\n    k: number of tuples to remove\n    \"\"\"\n    return list(filter(lambda t: len(t) != k, L))\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    new_tuples = []\n    for t in tuples:\n        if len(t) > k:\n            new_tuples.append(t)\n    return new_tuples\n\ndef test_remove_tuples():\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 2) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 3) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 4) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 5) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert remove_tuples([(4, 5), (4, ),", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    new_tuples = []\n\n    for t in tuples:\n        if len(t) != k:\n            new_tuples.append(t)\n\n    return new_tuples\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    l = len(tuples)\n    for i in range(l):\n        if len(tuples[i]) == k:\n            tuples.pop(i)\n    return tuples\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    for i in range(len(lst)):\n        lst[i] = tuple(lst[i])\n    #print(lst)\n    s = set(lst)\n    res = []\n    for i in s:\n        if len(i) != k:\n            res.append(i)\n    return res"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(x, y):\n    if not (len(x) == len(y)):\n        return None\n    return tuple(map(lambda x, y: x ** y, x, y))\n\n\n# +", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(tuple1, tuple2):\n    ans = []\n    for i in range(len(tuple1)):\n        ans.append(tuple1[i] ** tuple2[i])\n    return tuple(ans)", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        temp = tuple1[i] ** tuple2[i]\n        result.append(temp)\n    return tuple(result)\n\n#def find_exponentio(tuple1, tuple2):\n#    result = []\n#    for i in range(len(tuple1)):\n#        temp = tuple1[i] ** tuple2[i]\n#        result.append(temp)\n#    return tuple(result)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\nfrom typing import Tuple\n\ndef find_exponentio(num: Tuple[int, ...], exp: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"\n    Return the exponentiation of num by exp.\n    \"\"\"\n    # Handle the special case\n    if num == (1,):\n        return exp\n    # Base case\n    if len(exp) == 0:\n        return (1, )\n    # Recursive step\n    return find_exponentio(num, exp[1:]) * num[0] * find_exponentio(num[1:], exp)\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\nimport math\n\n\ndef find_exponentio(base, power):\n    res = (1, 1)\n    temp = base\n    while power:\n        if power % 2:\n            res = (res[0] * temp[0], res[1] * temp[1])\n        power //= 2\n        temp = (temp[0] * temp[0], temp[1] * temp[1])\n    return res\n\n\n# Driver Code", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tup1, tup2):\n    assert len(tup1) == len(tup2)\n    exponent = 1\n    result = []\n    for t1, t2 in zip(tup1, tup2):\n        result.append(t1*t2)\n        exponent *= t2\n    return (result, exponent)\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\nfrom math import pow\n\n\ndef find_exponentio(first_tuple, second_tuple):\n    res = []\n    for x, y in zip(first_tuple, second_tuple):\n        res.append(pow(x, y))\n    return tuple(res)\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\n# Write your solution here\ndef find_exponentio(x, y):\n    answer = 1\n    for i in range(len(x)):\n        answer = answer * x[i]\n    for i in range(len(y)):\n        answer = answer / y[i]\n    return answer\n\n# Test Case 1\n#print(find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)))\n# Test Case 2\n#print(find_exponentio((1, 2, 3, 4), (2, 3, 4, 2)))", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    numerator = 1\n    denominator = 1\n    for i in range(len(a)):\n        numerator *= a[i]\n        denominator *= b[i]\n    return (numerator, denominator)\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(x: tuple, y: tuple):\n    return (\n        x[0] ** y[0],\n        x[1] ** y[1],\n        x[2] ** y[2],\n        x[3] ** y[3],\n    )"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    \"\"\"\n    :param a: the major axis length\n    :param b: the minor axis length\n    :return: the length of the largest triangle that can be inscribed in an ellipse\n    \"\"\"\n    return 4*a*b/math.sqrt(2*a**2 + 2*b**2)\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\ndef largest_triangle(a,b):\n    return 2*math.sqrt(a*a-b*b)\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfrom math import sqrt, sin, cos, acos\ndef largest_triangle(a,b):\n    assert b<a\n    x1, x2 = 0, a\n    y1, y2 = 0, b\n    maxArea = 0\n    while x1 < x2:\n        h = sqrt(x1 * x1 + y1 * y1)\n        a = atan2(y1, x1)\n        b = atan2(y2, x2)\n        d = acos( (x1 * x2 + y1 * y2) / (h * h) )\n        s = sin(d)\n        c = cos(d)\n        area = (s * (x1 + x2) * (y1 + y2)) / 2\n        if area > maxArea:\n            maxArea = area\n        x1 += c * h\n        y1 += s * h\n        x2 -= c * h\n        y2 -= s * h\n    return maxArea\n\n\n# +\nimport unittest\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\n\ndef largest_triangle(a,b):\n    sum_ = (a+b)/2\n    return sum(math.hypot(a,b), sum_, sum_*math.sqrt(2))\n\n# Test", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfrom math import sqrt, atan\n\ndef largest_triangle(a,b):\n    \"\"\"\n    Calculates the largest triangle that can be inscribed in an ellipse\n    with semi-major axis a and semi-minor axis b.\n    \"\"\"\n    s = (a+b)/2.0\n    h = (sqrt((s/a)**2+(s/b)**2) - 1)*s/2.0\n    area = h*sqrt(a*b)*sqrt((a-b)**2 + 4*h**2)\n    return area\n\n\ndef largest_triangle2(a,b):\n    \"\"\"\n    Calculates the largest triangle that can be inscribed in an ellipse\n    with semi-major axis a and semi-minor axis b.\n    \"\"\"\n    x,y = [10,10]\n    while abs(sqrt((x-5)**2+(y-5)**2)-10) > 1e-15:\n        x,y = [10,10]\n        y = (b*(x**2 - 25*x + 125) + a*sqrt((b**2-a**2)*x**2+(a**2-b**2)*x))/(2*(a+b))\n        x = (b*y**2 + a*sqrt(x**2 + (a**2-b**2)*y**2) - 25*a)/(2*(a+b))\n    return sqrt((x-5)**2+(y-5)**2)\n\ndef largest_triangle3(a,b):\n    \"\"\"\n    Calculates the largest triangle that can be inscribed in an ellipse\n    with semi-major axis a and semi-minor axis b.\n    \"\"\"\n    return max([largest_triangle(a,b), largest_triangle(b,a)])\n\ndef test_largest_triangle():\n    assert largest_triangle(4,2)==10.392304845413264\n\ndef test_largest_triangle2():\n    assert largest_triangle2(4,2)==10.39230484", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    a = float(a)\n    b = float(b)\n    r = max(a,b)/2\n    L = 2*a*b\n    D = math.sqrt(4*a*b**2-L**2)\n    return L*r/D\n\nlargest_triangle(1,2)\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n\n    :param a: the major axis of the ellipse\n    :param b: the minor axis of the ellipse\n    :return: the area of the largest triangle that can be inscribed in an ellipse\n    \"\"\"\n    return (a*b*0.5)/1.4142135623730951\n\n\ndef largest_triangle_2(a, b):\n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n\n    :param a: the major axis of the ellipse\n    :param b: the minor axis of the ellipse\n    :return: the area of the largest triangle that can be inscribed in an ellipse\n    \"\"\"\n    return ((a*b)/4)**0.5", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    # Write your code here.\n    import math\n    import numpy as np\n    A = math.sqrt((a*a)/4)\n    B = math.sqrt((b*b)/4)\n    P = math.sqrt((A*A)+(B*B))\n    ans = math.sqrt((A*A*B*B)/P)\n    print(ans)\n    return ans\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport numpy as np\n\ndef largest_triangle(a,b):\n    largest_side = min(a,b)\n    b_over_a = b/a\n    a_over_b = a/b\n    largest_side_over_hypotenuse = np.sqrt((a_over_b+b_over_a)/2)\n    return largest_side*largest_side_over_hypotenuse\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nfrom math import *\n\ndef largest_triangle(major,minor):\n    largest = 0\n    b=100\n    while b>=0:\n        c=sqrt(major*major - (b*b)/4)\n        area=0.5*c*(major-abs(minor))\n        if area > largest:\n            largest=area\n        b = b - 0.1\n    return largest\n\ndef test_largest_triangle():\n    assert largest_triangle(4,2)==10.392304845413264\n    assert largest_triangle(2,3)==8.888888888888888\n    assert largest_triangle(1,1)==3.0\n\ndef main():\n    print(\"The largest triangle that can be inscribed in an ellipse with major and minor axes: 4,2 is\",largest_triangle(4,2))\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Arguments:\n    n -- An integer\n    \n    Returns:\n    An integer -- returns highest power of 2 less than or equal to n.\n    \"\"\"\n    \n    if n==1:\n        return 1\n    else:\n        i=0\n        while(n>>i):\n            i+=1\n        return 1<<i", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Time Complexity : O(log n)\n    Space Complexity : O(1)\n    \"\"\"\n    # Check for zero\n    if n == 0:\n        return 0\n    # Bitwise and with 1 or 0 to keep only the even bits\n    # if n % 2 == 0:\n    #     return n\n    # else:\n    #     return n // 2\n    # Use binary exponentiation\n    return 1 << (n - 1).bit_length()\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        res = 0\n        while n & 1 == 0:\n            res += 1\n            n >>= 1\n        return res\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(number):\n    number = int(number)\n    temp = 1\n    while temp < number:\n        temp = temp * 2\n    return temp/2\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(num):\n    num_bits = len(bin(num)) - 2\n    power_of_2 = 2 ** num_bits\n    return power_of_2 - 1\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    p = 1\n    while p <= n:\n        p = p * 2\n    return p // 2\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\nfrom math import ceil\n\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Find highest power of 2 less than or equal to given number\n\n    Args:\n       n(int): number to find highest power of 2 less than or equal to\n\n    Returns:\n       int: highest power of 2 less than or equal to given number\n    \"\"\"\n    return int(ceil(n/2))\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    \"\"\"\n    Iterative Approach\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 1\n    while result <= n:\n        result = 2 * result\n    return result // 2\n\n# Recursive Approach\ndef highest_Power_of_2_recursive(n):\n    if n == 0:\n        return 0\n    return 2 * highest_Power_of_2_recursive(n // 2)\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    k = 2\n    while (k < n):\n        k = k * 2\n    return k-1\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(num):\n    if num < 1:\n        return num\n    else:\n        x = 2\n        while x <= num:\n            x *= 2\n        return x / 2"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\nimport random\n\ndef position_max(nums):\n\treturn nums.index(max(nums))\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list):\n    # Find index position of first max\n    max_index = 0\n    for i,x in enumerate(list):\n        if max(list) == x:\n            max_index = i\n\n    # Create empty list of positions\n    max_pos = []\n\n    # Find index position of remaining max\n    for i,x in enumerate(list):\n        if list[max_index] == x and i!=max_index:\n            max_pos.append(i)\n\n    # Return max index positions\n    return max_pos\n\n# Test", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(array):\n    index = []\n    for i in range(len(array)):\n        if array[i] == max(array):\n            index.append(i)\n    return index\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    return [i for i, x in enumerate(lst) if x == max(lst)]\n\n\n# In[ ]:\n\nposition_max([12,33,23,10,67,89,45,667,23,12,11,10,54]) == [7]\n\n\n# ### P6.\n# Write a function to find the number of times a given number occurs in a list.\n\n# In[11]:\n\ndef count_number(lst, target):\n    return lst.count(target)\n\n\n# In[ ]:\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(data):\n    maxi = -1\n    maxi_index = []\n    for i in range(len(data)):\n        if data[i] > maxi:\n            maxi = data[i]\n            maxi_index = []\n        if data[i] == maxi:\n            maxi_index.append(i)\n    return maxi_index\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list):\n    position = []\n    for i in range(len(list)):\n        if i == len(list)-1 or list[i] < list[i+1]:\n            position.append(i)\n    return position\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(nums):\n    index_max = []\n    for i, x in enumerate(nums):\n        if x == max(nums):\n            index_max.append(i)\n    return index_max\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(arr):\n    return [i for i,x in enumerate(arr) if arr.index(x) == arr.count(x)]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(numbers):\n    max_numbers = []\n    index = []\n    for i in range(len(numbers)):\n        max_numbers.append(numbers[i])\n    for i in range(len(numbers)):\n        if max_numbers[i] == max(max_numbers):\n            index.append(i)\n    return index\n\nnumbers = [12,33,23,10,67,89,45,667,23,12,11,10,54]", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\nfrom typing import List\n\ndef position_max(numbers: List[int]) -> List[int]:\n    positions = []\n    for i in range(len(numbers)):\n        if numbers[i] == max(numbers):\n            positions.append(i)\n    return positions\n\n\ndef main():\n    assert position_max([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]) == [7]\n\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(lst) == 0:\n        return False\n\n    i = 0\n    while i < len(lst)-1:\n        if lst[i] != lst[i+1]:\n            return False\n        i += 1\n    return True\n\ndef main():\n    l = ['one','two','three']\n    print(chkList(l))\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(L):\n    if len(L) == 1:\n        return L[0] == L[0]\n    if len(L) == 0:\n        return False\n    return L[0] == L[1] and chkList(L[1:])\n\n#Use the assertion library\nimport sys, os", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(list_):\n    for i in range(len(list_)):\n        if list_[i] != list_[0]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(lst) > 0:\n        return lst[0] == lst[1:]\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(myList):\n    if(len(myList) == 0):\n        return True\n    for i in range(len(myList)-1):\n        if myList[i] != myList[i+1]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(myList):\n    # if myList is empty\n    if len(myList) == 0:\n        return False\n    # otherwise, traverse through myList\n    for i in myList:\n        # if the first element is not same as rest of the list\n        if myList[0] != i:\n            return False\n    return True\n\n# Check list elements", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(list):\n    return len(set(list)) == 1\n\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\n# Write your code here\ndef chkList(lst):\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(list1):\n    return True if list1.count(list1[0]) == len(list1) else False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(list1):\n    if len(list1) == 0:\n        return True\n    else:\n        return list1[0] == list1[1]\n\n# Test Case 1"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(s):\n    return ''.join([c if int(c)%2==0 else \"\" for c in s])\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(text):\n    return ''.join(c for c in text if c % 2 != 0)\n\n\ndef test_remove_even():\n    assert remove_even(\"python\")==(\"pto\")\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n  odd_string = \"\"\n  even_string = \"\"\n  for i in string:\n    if i % 2 != 0:\n      odd_string += i\n    else:\n      even_string += i\n  return odd_string + even_string\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    output = \"\"\n    for char in string:\n        if char % 2 != 0:\n            output += char\n    return output\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n\tlst=list(s)\n\ti=0\n\tj=0\n\twhile i < len(lst):\n\t\tif lst[i] % 2 !=0:\n\t\t\tlst[j] = lst[i]\n\t\t\tj+=1\n\t\ti+=1\n\treturn \"\".join(lst)\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    out = \"\"\n    count = 0\n    for letter in string:\n        if count % 2 == 0:\n            out += letter\n        count += 1\n    return out\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    new_string = ''\n    for i in string:\n        if not i.isnumeric():\n            new_string = new_string+i\n    return new_string", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(input):\n    return ''.join(ch for ch in input if ch.isalpha())\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    new_string = []\n    for character in string:\n        if character % 2 == 0:\n            new_string.append(character)\n\n    return \"\".join(new_string)\n\n\ndef main():\n    assert remove_even(\"python\")==(\"pto\")\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return string.replace(\"e\",\"\")\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(n1, n2):\n    '''\n    Find hamming distance of two integers.\n    '''\n    h_d = 0\n    for i in range(0, len(bin(n1))):\n        if n1 & (1 << i) and n2 & (1 << i):\n            h_d += 1\n    return h_d\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x, y):\n    return bin(x^y).count(\"1\")\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n    x = bin(x)\n    x = x[2:]\n    y = bin(y)\n    y = y[2:]\n    z = \"\"\n    for i in range(len(x)):\n        if x[i] != y[i]:\n            z = z + \"1\"\n        else:\n            z = z + \"0\"\n    return int(z,2)\n\ndef hamming_Distance2(x,y):\n    return x ^ y\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_distance(x, y):\n    hamming = 0\n    while x != y:\n        if x & y == 0:\n            hamming += 1\n            x ^= y\n            y = x ^ y\n        else:\n            x = x ^ y\n            y = x ^ y\n            x = x ^ y\n    return hamming\n\n\n# Testing", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x, y):\n    hamming_distance = 0\n    if x == y:\n        return 0\n    else:\n        for i in range(16):\n            if x & (1<<i) != y & (1<<i):\n                hamming_distance += 1\n        return hamming_distance\n\n#x = 4\n#y = 8\n#print(hamming_Distance(x,y))", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_distance(first, second):\n    first = bin(first)\n    second = bin(second)\n    f_string = first[2:]\n    s_string = second[2:]\n    h_distance = len(s_string)\n    for i in range(len(f_string)):\n        if f_string[i] != s_string[i]:\n            h_distance += 1\n    return h_distance\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a,b):\n    hamming = 0\n    a = bin(a)\n    b = bin(b)\n    for i in range(0,len(a)):\n        if a[i] != b[i]:\n            hamming += 1\n    return hamming\n    ", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n    assert x>0 and y>0\n    x1 = bin(x)\n    x1 = x1[2:]\n    x2 = bin(y)\n    x2 = x2[2:]\n    x3 = ''\n    for i in range(len(x1)):\n        if x1[i]!=x2[i]:\n            x3 += '1'\n        else:\n            x3 += '0'\n    return int(x3,2)\n\n#test code", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(num1, num2):\n    # Write your code here\n    bin_num1 = bin(num1)\n    bin_num2 = bin(num2)\n    diff = 0\n    for i in range(1, len(bin_num1)):\n        if bin_num1[i] != bin_num2[i]:\n            diff += 1\n    return diff\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x,y):\n    #return abs(x-y) # Works\n    #return bin(x^y).count('1') # Works\n    #return sum(bin(x^y).count('1') for x in range(0,y+1)) # Works\n    #return sum(bin(x^y).count('1') for x in range(0,y)) # Works\n    return sum(bin(x^y).count('1') for x in range(0,max(x,y))) # Works\n\n# Test cases"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string,char):\n\treturn string.count(char)\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str,c):\n    count=0\n    for i in str:\n        if c==i:\n            count=count+1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    return string.count(char)\n\ndef test():\n    assert count(\"abcc\",\"c\") == 2\n\n# test()\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(s,c):\n    count = 0\n    for x in s:\n        if x == c:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\n# Simple Solution\ndef count(str, ch):\n\treturn str.count(ch)\n\n# Recursive Solution\ndef count(str, ch):\n\tif len(str) == 0:\n\t\treturn 0\n\tif str[0] == ch:\n\t\treturn 1 + count(str[1:], ch)\n\treturn count(str[1:], ch)\n\n# Testcases", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, char):\n    count = 0\n    for i in string:\n        if char == i:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(str, char):\n  return str.count(char)\n\n# Alternative solution using regular expression\ndef count2(str, char):\n  return len(re.findall(r\"%s\" % char, str))\n\n# Sample Input\nstr = \"abcc\"\nchar = \"c\"\n\n# Sample Output", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string,char):\n    count = string.count(char)\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count\n\ndef main():\n    string = \"abcc\"\n    character = \"c\"\n    print(count(string, character))\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    num = string.count(char)\n    return num\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\nimport math\n\n\ndef inversion_elements(nums):\n    count = 0\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] > nums[j]:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(input_tuple):\n\n    # logic to process input\n    # use a dictionary for efficient lookup\n    dct = {}\n    inversions = 0\n    for i in range(len(input_tuple)):\n        if input_tuple[i] in dct:\n            inversions += dct[input_tuple[i]]\n            dct[input_tuple[i]] += 1\n        else:\n            dct[input_tuple[i]] = 1\n    return inversions\n\n\ndef test():\n    test_cases = [((7, 8, 9, 1, 10, 7), -8, -9, -10, -2, -11, -8),\n                  ((5, 3, 6, 7, 2, 8), -9, -5, -11, -4, -10, -3),\n                  ((10, 10, 10, 10), 0, 0, 0, 0, 0, 0),\n                  ((7, 8, 9, 1, 10, 7), -8, -9, -10, -2, -11, -8),\n                  ((5, 3, 6, 7, 2, 8), -9, -5, -11, -4, -10, -3),\n                  ((10, 10, 10, 10), 0, 0, 0, 0, 0, 0)]\n\n    for input_tuple, *expected in test_cases:\n        assert inversion_elements(input_tuple) == expected\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tuple_list):\n    tuples = sorted(tuple_list, reverse=True)\n    res = []\n    i = 0\n    for t in tuples:\n        if i < len(tuple_list) - 1 and t[1] > tuple_list[i+1][1]:\n            res.append(t[1])\n            res.append(tuple_list[i+1][1])\n        i += 1\n    return res\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(elements):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    count = 0\n    for i in range(len(elements)-1):\n        for j in range(i+1, len(elements)):\n            if elements[i] > elements[j]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuples):\n    inv = []\n    for tup in tuples:\n        inv += inversion(tup)\n    inv.sort()\n    return tuple(inv)\n\ndef inversion(tup):\n    inv = []\n    for i in xrange(len(tup)):\n        for j in xrange(i+1, len(tup)):\n            if tup[i] > tup[j]:\n                inv.append(-tup[j])\n                inv.append(-tup[i])\n    return inv\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tuples):\n    res = []\n    for t in tuples:\n        res += find_inversions(t)\n    return res\n\ndef find_inversions(tuple):\n    if len(tuple) == 1:\n        return []\n    else:\n        inv1 = find_inversions(tuple[1:])\n        inv2 = []\n        for i in inv1:\n            if tuple[0] < i[0]:\n                inv2.append([tuple[0]] + i)\n        for j in inv2:\n            if tuple[0] > j[1]:\n                inv2.append([tuple[0]] + j)\n        return inv2\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nimport math\n\n\ndef inversion_elements(tup_list):\n    if not tup_list or not tup_list[0]:\n        return []\n    else:\n        inv_element = []\n        for i in range(1, len(tup_list)):\n            for j in range(0, i):\n                if tup_list[j] > tup_list[i]:\n                    inv_element.append(tup_list[j])\n                    inv_element.append(tup_list[i])\n                    return inv_element\n        return inv_element\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tuple_list):\n    n = len(tuple_list)\n    inversions = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if tuple_list[i] > tuple_list[j]:\n                inversions.append(tuple_list[j])\n                inversions.append(tuple_list[i])\n                return inversions\n    return inversions\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(input_tuple):\n    if input_tuple == ():\n        return ()\n    inversion_elements_list = inversion_elements(input_tuple[1:])\n    if input_tuple[0] <= input_tuple[1]:\n        return inversion_elements_list\n    else:\n        return input_tuple[0] + inversion_elements(inversion_elements_list)\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(data):\n    \"\"\"\n    Algorithm:\n        It is an application of the merge sort algorithm for which the merge\n        function is the same as in merge sort, but the merge sort function is\n        slightly modified. The merge sort function is:\n            merge_sort(data):\n                if data is empty or contains a single element:\n                    return data\n                middle = len(data) // 2\n                left = merge_sort(data[:middle])\n                right = merge_sort(data[middle:])\n                return merge(left, right)\n\n        The merge function is:\n            merge(left, right):\n                result = []\n                i = 0\n                j = 0\n                while i < len(left) and j < len(right):\n                    if left[i] < right[j]:\n                        result.append(left[i])\n                        i += 1\n                    else:\n                        result.append(right[j])\n                        j += 1\n                result.extend(left[i:])\n                result.extend(right[j:])\n                return result\n    \"\"\"\n    if len(data) == 0:\n        return []\n    elif len(data) == 1:\n        return data\n    else:\n        half = len(data) // 2\n        left = inversion_elements(data[:half])\n        right = inversion_elements(data[half:])\n        result = []\n        i = 0\n        j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n\ndef test_inversion_elements():\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    output_list = []\n    for idx, val in enumerate(tuples):\n        if idx == len(tuples) -1:\n            output_list.append(val)\n        else:\n            output_list.append(val + \" \")\n    return tuple(output_list)\n\n\ndef test_function():\n    tuples = (\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")\n    assert concatenate_elements(tuples) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    tuples = (\"RAVIKUMAR\", \"KUMAR\", \"NAGAR\", \"J\", \"R\")\n    assert concatenate_elements(tuples) == ('RAVIKUMAR ', 'KUMAR NAGAR ', 'NAGAR J ', 'J R ')\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(input_string):\n    new_string = \"\"\n    for i in range(0, len(input_string), 2):\n        new_string += input_string[i] + \" \" + input_string[i+1] + \" \"\n    return new_string[:-1]\n\n\n# Driver code", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\nfrom typing import List\n\n\ndef concatenate_elements(tuple_list: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of tuples like:\n    [(DSP,IS),(IS,BEST),(BEST,FOR),(FOR,ALL),(ALL,UTS)],\n    the function concatenates the tuples element-wise and returns the new list\n    :param tuple_list:\n    :return:\n    \"\"\"\n    return list(map(lambda x: \"\".join(x), zip(*tuple_list)))\n\n\n# Here is the sample input and output.", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuple_list):\n    return tuple(x for x in [\"\".join(y) for y in zip(*tuple_list)])\n\n# Input: tuple_list = ((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"),)\n# Output: ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuple_list):\n    return tuple([\"\".join(x) for x in zip(*tuple_list)])\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(words):\n    return \" \".join(words)\n\n\n# -\n\nconcatenate_elements(('DSP ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'UTS'))\n\n# ## 10. Write a function to determine the number of lines in a given string.\n#\n# For example, `count_lines(\"dog cat  \\n  cat  dog  \\n  dog\") == 3`\n\n\"dog cat  \\n  cat  dog  \\n  dog\".count('\\n')\n\n\ndef count_lines(text):\n    return text.count('\\n')\n\n\ncount_lines('dog cat  \\n  cat  dog  \\n  dog')\n\n\n# ## 11. Write a function to generate a dictionary from a given tuple.\n#\n# For example, `tuple_to_dict(('DSP', 'IS', 'BEST', 'FOR', 'ALL', 'UTS')) == {'DSP': 1, 'IS': 1, 'BEST': 1, 'FOR': 1, 'ALL': 1, 'UTS': 1}`\n\n# +\ndef tuple_to_dict(tup):\n    dict = {}\n    for elem in tup:\n        dict[elem] = dict.get(elem, 0) + 1\n    return dict\n\ntuple_to_dict(('DSP', 'IS', 'BEST', 'FOR', 'ALL', 'UTS'))\n\n\n# -\n\n# ## 12. Write a function to take a given string and reverse it.\n#\n# For example, `reverse_string(\"DSP\") == \"SPOD\"`\n\ndef reverse_string(s):\n    return s[::-1]\n\n\nreverse_string('DSP')\n\n\n# ## 13. Write a function to generate a new string with the characters in the given string reversed.\n#\n# For example, `reverse_string_elements(\"DSP\") == \"SPD\"`\n\ndef reverse_string_elements(s):\n    return \"\".join", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuples):\n    concatenated = []\n    for i in range(len(tuples) - 1):\n        concatenated.append(tuples[i] + tuples[i+1])\n    return concatenated", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(input_tuple):\n    output_list = []\n    for i in input_tuple:\n        output_list.append(i)\n    return \" \".join(output_list)\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(elements):\n    out = []\n    for el in elements:\n        out.append(el[0] + el[1])\n    return out\n\nconcatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuples):\n    return [\"\".join(t) for t in zip(*tuples)]"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    # Assuming s is a string and only one character\n    if len(s) == 1:\n        return 1\n\n    # As a string is immutable we will create a list to copy s\n    s_list = list(s)\n\n    # Creating a dictionary to store count of characters\n    count_of_characters = {}\n    for i in range(len(s)):\n        if s_list[i] not in count_of_characters:\n            count_of_characters[s_list[i]] = 1\n        else:\n            count_of_characters[s_list[i]] += 1\n\n    # Creating a dictionary to store starting indices and ending indices of the repeating subsequences\n    subseq_start_and_end_indices = {}\n\n    # Creating a list to store repeating subsequences\n    repeating_subseq = []\n\n    # The subseq_start_and_end_indices[char] will be the starting index of the subsequence and subseq_start_and_end_indices[char][1] will be the ending index of the subsequence.\n    # We will traverse the subsequence starting from the character which has maximum count of characters\n    max_count = max(count_of_characters.values())\n    for char, count in count_of_characters.items():\n        if count == max_count:\n            subseq_start_and_end_indices[char] = [i, i]\n            repeating_subseq.append(char)\n        else:\n            continue\n\n    # Traversing the subsequence from the beginning\n    for i in range(len(s)):\n        # Traversing the subsequence from the ending\n        for j in range(len(repeating_subseq) - 1, -1, -1):\n            # If the current characters are same, we will increase the ending index\n            if s_list[i] == repeating_subseq[j]:\n                subseq_start_and_end_indices[repeating_subseq[j]][1] += 1\n                # If the current characters are same and the ending", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(word):\n    if len(word) == 1:\n        return 1\n    elif len(word) == 2:\n        return 1 if word[0] == word[1] else 0\n    dp = [[1,1] for i in range(len(word))]\n    max_lps = 0\n    for i in range(1,len(word)):\n        for j in range(0,i):\n            if word[i] == word[j] and dp[j][0] + 1 > dp[i][0]:\n                dp[i][0] = dp[j][0] + 1\n                if dp[i][0] > max_lps:\n                    max_lps = dp[i][0]\n            elif word[i] == word[j] and dp[j][1] + 1 > dp[i][1]:\n                dp[i][1] = dp[j][1] + 1\n                if dp[i][1] > max_lps:\n                    max_lps = dp[i][1]\n            else:\n                dp[i][0] = max(dp[i-1])\n                dp[i][1] = max(dp[i-1])\n    return max_lps\n\ndef find_longest_repeating_subseq_recursive(word):\n    if len(word) == 1:\n        return 1\n    elif len(word) == 2:\n        return 1 if word[0] == word[1] else 0\n    max_lps = 0\n    for i in range(1,len(word)):\n        lps = find_longest_repeating_subseq_recursive(word[i:])\n        if word[i] == word[i-1] and lps > max_lps:\n            max_lps = lps + 1\n        elif word[i] == word[i-1] and lps == max_lps:\n            max_lps = max(max_lps,lps)\n        else:\n            max", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    # Implement your solution here\n    pass\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nfrom functools import lru_cache\n\n\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    Time: O(n), where n is the length of the input string\n    Space: O(n), memoization table\n    \"\"\"\n    n = len(s)\n    memo = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if s[i] == s[j] and memo[i][j] == 0:\n                memo[i][j] = 1 + memo[i-1][j-1]\n            if s[i] == s[j] and memo[i][j] > 0:\n                memo[i][j] = max(memo[i][j], memo[i-1][j])\n    return memo[n-1][n-1]\n\n\n@lru_cache(maxsize=None)\ndef find_longest_repeating_subseq_dp(s, l, r):\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    if l > r:\n        return 0\n    if l == r:\n        return 1 if s[l] == s[r] else 0\n    if s[l] == s[r]:\n        return 1 + find_longest_repeating_subseq_dp(s, l+1, r-1)\n    return max(find_longest_repeating_subseq_dp(s, l, r-1), find_longest_repeating_subseq_dp(s, l+1, r))\n\n\ndef find_longest_repeating_subseq_dp_mem(s):\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    n = len(s)\n    memo = [0] * n\n    memo[0] = 1\n    for i in range(n):\n        for j in range(i):\n            if s[i] == s[j] and memo[i] == 0:\n                memo[i] =", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    dictionary = {}\n    length_of_max_repeating_subseq = 0\n    max_repeating_subseq_length = 0\n    for i in range(len(string)):\n        if string[i] in dictionary:\n            dictionary[string[i]] += 1\n        else:\n            dictionary[string[i]] = 1\n\n    for key in dictionary:\n        if dictionary[key] > max_repeating_subseq_length:\n            max_repeating_subseq_length = dictionary[key]\n    \n    return max_repeating_subseq_length\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nfrom collections import Counter\n\ndef find_longest_repeating_subseq(str):\n    if len(str) <= 1:\n        return len(str)\n\n    counter = Counter(str)\n    c = list(counter.values())\n\n    # Find the longest repeating subsequence\n    max_repeating_subsequence = 1\n    for i in range(1, len(str)):\n        max_repeating_subsequence = max(max_repeating_subsequence, c[i])\n\n    # Find the longest repeating subsequence without\n    # repeating strings at same positions\n    # initial = 0\n    # max_not_repeating_subsequence = 0\n    # for i in range(1, len(str)):\n    #     if str[i] == str[i - 1]:\n    #         initial = c[i]\n    #     else:\n    #         max_not_repeating_subsequence = max(max_not_repeating_subsequence, initial)\n\n    # return max_repeating_subsequence + max_not_repeating_subsequence\n    return max_repeating_subsequence\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(str):\n    n = len(str)\n    if n == 1:\n        return 1\n\n    dp = [[0]*(n+1) for i in range(n+1)]\n    max_len = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if str[j-1] == str[i-1]:\n                dp[i][j] = dp[i-1][j-1]+1\n                if max_len < dp[i][j]:\n                    max_len = dp[i][j]\n    return max_len\n\n#assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n#assert find_longest_repeating_subseq(\"AABBB\") == 2\n#assert find_longest_repeating_subseq(\"ABBCDE\") == 2", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\nfrom collections import Counter\n\n\ndef find_longest_repeating_subseq(string):\n    cnt = Counter(string)\n    longest_repeating_subseq = 0\n    for k, v in cnt.items():\n        for i in range(len(string)):\n            if string[i:i+len(k)] == k:\n                if v == 1:\n                    return len(string) - i\n                else:\n                    longest_repeating_subseq = max(longest_repeating_subseq, len(string) - i)\n    return longest_repeating_subseq\n\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    if s == \"\" or len(s) == 1:\n        return 1\n    \n    # Create a dict to store the frequency of each character\n    char_freq = {}\n    for char in s:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n            \n    # Create a memo to store the result of subsequence of a given length\n    memo = {0 : 1}\n    for i in range(len(s)):\n        # Consider all subsequences of a given length\n        for j in range(i+1, len(s)):\n            # If the string is not same at same position\n            if s[i] == s[j] and memo.get(j-i-1, 0) > 0:\n                memo[j] = memo.get(j-1, 0) + memo.get(j-i-1, 0) + 1\n            # If the string is same at same position\n            else:\n                memo[j] = memo.get(j-1, 0) + 1\n\n    return memo.get(len(s)-1, 0)\n\n# Driver Code", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(string):\n    string_length = len(string)\n    result = 0\n    for i in range(string_length - 1):\n        string_1 = string[i]\n        string_2 = string[i+1:]\n        string_1_length = len(string_1)\n        string_2_length = len(string_2)\n        for j in range(string_1_length - 1):\n            if string_1[j] != string_2[j]:\n                break\n            if string_1[j] == string_2[j]:\n                result += 1\n    return result\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\ndef is_decimal(decimal):\n    # Write your logic here\n    regex = r'^-?\\d+(\\.\\d{0,2})?$'\n    match = re.match(regex, decimal)\n    if match == None:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(text):\n    try:\n        regex = re.compile(r\"^-?\\d+(?:\\.\\d+)?$\")\n        return regex.search(text) is not None\n    except:\n        return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(n):\n    return bool(re.match(r'-?([1-9]\\d*|0)(\\.\\d+)?([eE][+|-]?\\d+)?', str(n)))\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(string):\n    return bool(re.match(r'^\\d+\\.\\d{2}$',string))\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\ndef is_decimal(number):\n    is_number = re.search(r\"^[+-]?([0-9]*[.])?[0-9]+$\",number)\n    if is_number:\n        return True\n    return False\n\n#123.11 True\n#123.111 False", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\n\ndef is_decimal(number):\n    return bool(re.match(r'^[1-9]\\d*(\\.\\d*)?$', number))\n\n\ndef is_decimal2(number):\n    return bool(re.match(r'^[0-9]+(\\.[0-9]{2})?$', number))\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(n):\n    \"\"\"\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('123.111')\n    True\n    >>> is_decimal('123.111111')\n    True\n    >>> is_decimal('123.1111111')\n    False\n    >>> is_decimal('123.11111111')\n    False\n    \"\"\"\n    if n.isdigit():\n        return False\n    elif len(re.findall(r'\\.|\\,',n)) != 1:\n        return False\n    elif re.findall(r'\\.|\\,',n)[0] == ',':\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nfrom unittest import TestCase\n\n\ndef is_decimal(num):\n    \"\"\"\n    :param num: str\n    :return: bool\n    \"\"\"\n    if not isinstance(num, str):\n        return False\n    if '.' not in num:\n        return False\n    match = r'^((0|(\\d*\\.\\d*)))$'\n    if not re.match(match, num):\n        return False\n    return True\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\ndef is_decimal(str):\n    return re.match(r\"^[+-]?[0-9]*\\.?[0-9]*$\", str) is not None\n\ndef is_decimal(str):\n    if '.' in str:\n        # We need to check for following two cases:\n        # 1. number with no decimal point\n        # 2. number with decimal point but no digits after decimal point\n        # So, we use a regex to check for the following two cases:\n        # 1. number with no decimal point is a string like '123'\n        # 2. number with decimal point but no digits after decimal point is a string like '123.'\n        # Note that this regex will accept strings like '0.', '0.0', and '0.00'\n        # So we need to add a constraint that the string should not start with '0'.\n        # Also, we need to check that the string does not have a decimal point in the beginning,\n        # which is why we use '^[+-]?'.\n        pattern = \"^[+-]?[0-9]*\\.?[0-9]*$\"\n        return bool(re.match(pattern, str))\n    else:\n        return True\n\ndef is_decimal(str):\n    return re.match(r\"^[+-]?[0-9]*\\.?[0-9]*$\", str) is not None", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\nimport pytest\n\n\ndef is_decimal(decimal):\n    \"\"\"\n    Check if given decimal has a precision of 2.\n\n    Parameters\n    ----------\n    decimal : string\n        A decimal number.\n\n    Returns\n    -------\n    boolean\n        True if the given decimal has a precision of 2, otherwise False.\n\n    Examples\n    --------\n    >>> is_decimal('123.11')\n    True\n    \"\"\"\n    return bool(re.match(r'^(\\d*\\.?\\d{1,2})$', decimal))\n\n\ndef test_is_decimal():\n    \"\"\"\n    Examples for is_decimal function.\n    \"\"\"\n    decimal_list = [\n        '123.11',\n        '123.1',\n        '123',\n        '12.3',\n        '123.01',\n        '123.0101',\n        '0.1231',\n        '0.123101',\n        '12.301',\n        '123.01010',\n        '1.2310',\n        '1.23100',\n        '123.100',\n        '12310.0',\n        '123.000',\n        '123.001',\n        '123.011',\n        '123.101',\n        '123.0000',\n        '123.0001',\n        '123.0010',\n        '123.0101',\n        '123.1000',\n        '123.1001',\n        '123.1010',\n        '123.1100',\n        '123.1101',\n        '123.1110',\n        '12310.00',\n        '12310.01',\n        '12310.10',\n        '123.00000',\n        '123.00001',\n       "], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(arr, x):\n    pq = Heap(arr)\n    pq.heapify()\n    pq.pop()\n    pq.push(x)\n    return pq.to_list()\n\n\ndef test_heap_replace():\n    assert heap_replace([25, 44, 68, 21, 39, 23, 89], 21) == [21, 25, 23, 44, 39, 68, 89]\n\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nfrom heapq import heapify, heappush, heappop\n\ndef heap_replace(heap, item):\n    heappush(heap, item)\n    heappop(heap)\n    heapify(heap)\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, item):\n    i = len(heap) - 1\n    while i >= 0:\n        heap[i], heap[0] = heap[0], heap[i]\n        heapify(heap, i)\n        i -= 1\n    heap[0] = item\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_item):\n    if len(heap) == 0:\n        heap.append(new_item)\n        return heap\n\n    heap[0] = new_item\n    min_value_index = 0\n    # from left child to right child\n    for i in range(1, len(heap)):\n        left_index = 2 * i\n        right_index = 2 * i + 1\n\n        if left_index < len(heap) and heap[left_index] < heap[min_value_index]:\n            min_value_index = left_index\n\n        if right_index < len(heap) and heap[right_index] < heap[min_value_index]:\n            min_value_index = right_index\n\n        if min_value_index != i:\n            heap[i], heap[min_value_index] = heap[min_value_index], heap[i]\n\n    return heap\n\n\n# +", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_val):\n    heap.append(new_val)\n    heapq.heapify(heap)\n    return heapq.heappop(heap)\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    heap.insert(item)\n    heap.pop(0)\n    return heap\n\nheap = [25, 44, 68, 21, 39, 23, 89]", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\nimport heapq\n\n\ndef heap_replace(heap, item):\n    heapq.heappushpop(heap, item)\n    return heap\n\n\nheap = [25, 44, 68, 21, 39, 23, 89]\nheap_replace(heap, 21)", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_val):\n    heapq.heapreplace(heap, new_val)\n\ndef heap_replace_min(heap, new_val):\n    heapq.heapreplace(heap, new_val)\n    heapq.heapify(heap)\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap,item):\n    heap.append(item)\n    swim(heap, len(heap)-1)\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_value):\n    heap = list(heap)\n    heap[0] = new_value\n    i = 0\n    j = 2\n    while j < len(heap):\n        if i == j:\n            heap[i] = heap[j]\n            heap[j] = new_value\n            break\n        elif heap[i] > heap[j]:\n            heap[i] = heap[j]\n            i = j\n            j = 2 * j\n        else:\n            j += 1\n    return heap\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    \"\"\"\n    Check if a string contains only characters of A-Z, a-z and 0-9 and return a boolean.\n\n    Parameters\n    ----------\n    string : str\n        A string to check.\n\n    Returns\n    -------\n    boolean\n        Boolean value of whether or not the string contains only characters of A-Z, a-z and 0-9.\n    \"\"\"\n    return bool(re.match(r'^\\w*$', string))\n\n#Below is an example usage:\n\nimport re\n\ndef is_allowed_specific_char(string):\n    \"\"\"\n    Check if a string contains only characters of A-Z, a-z and 0-9 and return a boolean.\n\n    Parameters\n    ----------\n    string : str\n        A string to check.\n\n    Returns\n    -------\n    boolean\n        Boolean value of whether or not the string contains only characters of A-Z, a-z and 0-9.\n    \"\"\"\n    return bool(re.match(r'^\\w*$', string))\n\n# Enter the string\nstring = \"1234567890\"\n\n# Calling the function", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(string):\n    return re.search(r'[a-z]+[0-9]+[a-z]+', string)\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\ndef is_allowed_specific_char(string):\n    return bool(re.search(r\"[a-z0-9]\", string))\n\n#If the string does not contain the character, the function should return False.", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(s: str) -> bool:\n    return bool(re.search(r'[0-9a-zA-Z]', s))", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(string):\n    pattern = re.compile(r'[a-z]+\\d+')\n    result = re.findall(pattern, string)\n    if result:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(input_string):\n    \"\"\"\n    :param input_string: string\n    :return: boolean\n    \"\"\"\n    regex = re.compile(\"[a-z0-9]\")\n    return bool(regex.search(input_string))\n\ndef is_allowed_specific_char(input_string):\n    \"\"\"\n    :param input_string: string\n    :return: boolean\n    \"\"\"\n    return any(char in \"0123456789abcdefghijklmnopqrstuvwxyz\" for char in input_string)\n\ndef is_allowed_specific_char(input_string):\n    \"\"\"\n    :param input_string: string\n    :return: boolean\n    \"\"\"\n    return not bool(re.search(r'[^a-z0-9]', input_string))", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(s):\n    # Write your code here.\n    check = re.match(r'[a-zA-Z0-9]+', s)\n    if check == None:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(input_string):\n    return re.search(r'[a-z0-9]+', input_string) is not None", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(s: str) -> bool:\n    return re.search(r'[a-zA-Z0-9]+',s) != None", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(string):\n    \"\"\"\n    check if the string is only containes alphanumeric characters\n    :param string: string to check\n    :return: bool\n    \"\"\"\n    reg = r\"[a-z]|[0-9]\"\n    match = re.search(reg, string)\n    if match:\n        return True\n    else:\n        return False\n\n# Test Cases"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    count = 0\n    num = num & (num + 1)\n    while (num > 0):\n        count += num & 1\n        num >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\nimport sys\n\n\ndef count_Num(num):\n    res = 0\n    if num == 0:\n        return res\n    num = num & (num-1)\n    while num != 0:\n        res += (num&1)\n        num >>= 1\n    return res\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    total = 0\n    for i in range(0,n):\n        if((i+1)%2 == 0):\n            continue\n        for j in range(0,n):\n            if((j+1)%2 == 0):\n                continue\n            if(n&(i+1) == j+1):\n                total += 1\n    return total\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        if( i & i+1):\n            count += 1\n        if( i & (i+1)<<1):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    c = 0\n    for i in range(1,n+1):\n        if i & i-1 and i & i+1:\n            c += 1\n    return c\n\n#assert count_Num(10) == 2\n#assert count_Num(16) == 3", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    c = 0\n    for i in range(n,10**9+1):\n        if (i&(i+1)) == 0 and (i&(i+2)) == 0 and (i&(i+3)) == 0 and (i&(i+4)) == 0 and (i&(i+5)) == 0 and (i&(i+6)) == 0 and (i&(i+7)) == 0 and (i&(i+8)) == 0 and (i&(i+9)) == 0 :\n            c += 1\n    return c\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\n#my attempt\ndef count_Num(num):\n    count = 0\n    while num != 0:\n        if num & 1 == 1:\n            if num & 2 == 1:\n                count += 1\n        num = num >> 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    count = 0\n    for i in range(1, num):\n        if (i & num) == (i & (i - 1)) and (i & (i + 1)) != 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    cnt = 0\n    for i in range(0,1<<n):\n        cnt += (i&(1<<n-1) != 0) and (i&(1<<n-2) != 0)\n    return cnt\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\n# n/1 is the result\ndef count_Num(n):\n    if n < 1:\n        return 0\n    return count_Num(n/1)*2\n\ndef count_Num(n):\n    if n < 1:\n        return 0\n    return n/1 + count_Num(n/1*2)\n\ndef count_Num(n):\n    if n < 1:\n        return 0\n    if n % 2 == 1:\n        return 1 + count_Num(n/2)\n    return count_Num(n/2)"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return sum([i ** 4 for i in range(1, n+1)])\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\n# Write your code here.\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\n# Solution\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**4)\n    return sum\n\n\n# Tests\n\nimport pytest\n\n@pytest.mark.parametrize(\"n\", [2, 100])\ndef test_fourth_power_sum(n):\n    assert fourth_Power_Sum(n) == 17", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\nimport math\nfrom unittest import TestCase\n\n\ndef fourth_Power_Sum(n: int) -> int:\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 4\n    return result\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    else:\n        sum = n**4\n        for i in range(n):\n            sum += i**4\n        return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    return sum([i**4 for i in range(n+1)])\n\n#assert fourth_Power_Sum(2) == 17", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    res = 0\n    for i in range(1,n+1):\n        res += (i*i*i*i)\n    return res\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**4\n    return sum\n\n\n# +\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**4\n    return sum\n\n\n# -\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\nimport math\n\n\ndef fourth_Power_Sum(n):\n    \"\"\"\n    >>> fourth_Power_Sum(10)\n    1900\n    >>> fourth_Power_Sum(5)\n    2125\n    >>> fourth_Power_Sum(2)\n    17\n    \"\"\"\n    sum_ = 1\n    for i in range(1, n+1):\n        sum_ += math.pow(i, 4)\n\n    return sum_\n\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    s = 0\n    for i in range(1, n+1):\n        s += i**4\n    return s"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(a, b):\n    return tuple(map(''.join, zip(a, b)))\n\n\ndef test_function(test_case):\n    arr1 = test_case[0]\n    arr2 = test_case[1]\n    solution = test_case[2]\n    output = concatenate_strings(arr1, arr2)\n    if sum(map(len, output)) == sum(map(len, arr1)) + sum(map(len, arr2)):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr1 = (\"Manjeet\", \"Nikhil\", \"Akshat\")\narr2 = (\" Singh\", \" Meherwal\", \" Garg\")\nsolution = (\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\")\ntest_function((arr1, arr2, solution))", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n    tuple3 = []\n    for i in range(len(tuple1)):\n        for j in range(len(tuple2)):\n            tuple3.append(tuple1[i]+tuple2[j])\n    return tuple3\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(strings, strings2):\n    return tuple([*strings, *strings2])\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple_1, tuple_2):\n    # Write your code here.\n    return tuple(tuple_1[0] + tuple_2[0], tuple_1[1] + tuple_2[1], tuple_1[2] + tuple_2[2])\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(s1, s2):\n    return tuple(s1 + s2)\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tup1, tup2):\n    \"\"\"\n    #This will be a simple function where we will append tuple values \n    # to the first tuple and the function returns a tuple of concatenation \n    # of two tuples.\n    \"\"\"\n    tup1 = list(tup1)\n    tup2 = list(tup2)\n    tup1.extend(tup2)\n    return tuple(tup1)\n    ", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(first_name, last_name):\n    return tuple(map(str.join, zip(first_name, last_name)))\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(strings1, strings2):\n    new_strings = []\n    for i in range(len(strings1)):\n        new_strings.append(strings1[i] + \" \" + strings2[i])\n    return new_strings\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(first_string, second_string):\n    result = []\n\n    for i in range(len(first_string)):\n        result.append(first_string[i] + second_string[i])\n\n    return tuple(result)\n\ndef test():\n    first_string = (\"Manjeet\", \"Nikhil\", \"Akshat\")\n    second_string = (\" Singh\", \" Meherwal\", \" Garg\")\n    result = concatenate_strings(first_string, second_string)\n    assert result == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    # This function takes two tuples of strings as input\n    # Returns a tuple of strings\n    return tuple([tuple1[i] + \" \" + tuple2[i] for i in range(len(tuple1))])"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian * 180 / math.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\nimport math\n\ndef degree_radian(degrees):\n    return (math.pi / 180) * degrees\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian*180.0/math.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(theta):\n    return theta*180/math.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(rad):\n    return rad * 57.29577951308232087679815481410517038269893499267476306807638857894040700028999672012997455408084456234757074320243863213493027515391262967854680801094024871055732897280624480374102400634929578113102902639446242989166648428569015148154704585546771360285132534324599948321837733745581775192634085630318834747065004141790096632953741437803429032550991021186435260518056836156050375800372682536168519143644550547743174857789320141730943646701778061206386606439", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    return radian * (180 / 3.14159)\n\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(angle):\n    return (angle * (180/pi))\n\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(angle):\n    return angle * (180/math.pi)\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian * 57.2958\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(angle):\n    return angle * (180 / math.pi)\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    res = []\n    for v in l:\n        if isinstance(v, list):\n            res.extend([v[0]] * v[1])\n        else:\n            res.append(v)\n    return res\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    new_list = []\n    for i in l:\n        if type(i) is int:\n            new_list.extend([i for j in range(i)])\n        else:\n            new_list.extend(i)\n    return new_list\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(list):\n    return [x[0]*x[1] for x in list if len(x) > 1]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(L):\n    result = []\n    count = 0\n    for x in L:\n        if isinstance(x, list):\n            result += decode_list(x) * x[0]\n        else:\n            result += [x] * x\n    return result\n\ndef decode_list_rec(L):\n    if L == []:\n        return []\n    elif isinstance(L[0], list):\n        return decode_list_rec(L[0]) * L[0][0] + decode_list_rec(L[1:])\n    else:\n        return L[0] + decode_list_rec(L[1:])\n\ndef test_decode_list_rec():\n    assert decode_list_rec([[2, 1], 2, 3, [2, 4], 5,1]) == [1,1,2,3,4,4,5,1]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(list_):\n    new_list = []\n    for item in list_:\n        if isinstance(item, list):\n            new_list += [item[0]] * item[1]\n        else:\n            new_list.append(item)\n    return new_list\n\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(a):\n    d={}\n    for x in a:\n        if type(x)==int:\n            if d.has_key(x):\n                d[x]+=1\n            else:\n                d[x]=1\n        else:\n            if d.has_key(x[0]):\n                d[x[0]]+=x[1]\n            else:\n                d[x[0]]=x[1]\n    b=[]\n    for x in d:\n        for i in range(d[x]):\n            b.append(x)\n    return b\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(input_list):\n    result = []\n    for element in input_list:\n        if not isinstance(element, list):\n            result.append(element)\n        else:\n            result.extend([element[0]] * element[1])\n    return result\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(ls):\n    \"\"\"\n    :type ls: list\n    :rtype: list\n    \"\"\"\n    l = []\n    for item in ls:\n        if isinstance(item, list):\n            for i in range(item[0]):\n                l.append(decode_list(item[1]))\n        else:\n            l.append(item)\n    return l", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(ll):\n    res = []\n    for x in ll:\n        if isinstance(x, int):\n            res.extend([x] * x)\n        else:\n            res.extend(x)\n    return res\n\n\ndef test_decode():\n    res = decode_list([[2, 1], 2, 3, [2, 4], 5,1])\n    assert res == [1,1,2,3,4,4,5,1]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\nfrom typing import List\nfrom pytest import raises\n\n\ndef decode_list(l: List[int]) -> List[int]:\n    result: List[int] = []\n    i: int = 0\n    while i < len(l):\n        if isinstance(l[i], list):\n            result.extend(l[i][0] * [l[i+1]])\n            i += 2\n        else:\n            result.append(l[i])\n            i += 1\n    return result\n\n\ndef test_decode_list():\n    assert decode_list([[2, 1], 2, 3, [2, 4], 5, 1]) == [1, 1, 2, 3, 4, 4, 5, 1]\n    assert decode_list([1, 2, 1, 2]) == [1, 2, 1, 2]\n    assert decode_list([]) == []\n    assert decode_list(1) == [1]\n    assert decode_list([2, 1, 2, 4]) == [2, 1, 2, 4]\n    assert decode_list([2, 1, 2, [4, 1]]) == [2, 1, 2, 4, 1]\n    assert decode_list([2, 1, 2, [4, 1, 2, 3, 1, 1]]) == [2, 1, 2, 4, 1, 1]\n    assert decode_list([2, [1, 1], 2, [4, 1, 2, 3, 1, 1]]) == [2, 1, 1, 2, 4, 1, 1]\n    assert decode_list([[1, 1], 2, [4, 1, 2, 3, 1, 1]]) == [1, 1, 2, 4, 1, 1]\n    assert decode_list"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1, list2):\n    result = True\n    for i in list1:\n        found = False\n        for j in list2:\n            if i == j:\n                found = True\n                break\n        if found == False:\n            result = False\n    return result\n\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(sublist,superlist):\n    for subitem in sublist:\n        if subitem not in superlist:\n            return False\n    return True\n\n#----------\n\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(needle,haystack):\n    return subset_list(needle,haystack,0,len(needle))\n\ndef subset_list(needle, haystack, needle_offset, haystack_offset):\n    if haystack_offset == len(haystack):\n        return True\n    elif needle_offset == len(needle):\n        return False\n    else:\n        return needle[needle_offset] in haystack[haystack_offset] and subset_list(needle,haystack,needle_offset+1,haystack_offset+1) or subset_list(needle,haystack,needle_offset,haystack_offset+1)", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1,list2):\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(test,sub):\n    if type(test)==type([]) and type(sub)==type([]):\n        if len(test)>0 and len(sub)>0:\n            return sub.index(test[0])==0 and check_subset_list(test[1:],sub[1:])\n        elif len(test)>0:\n            return False\n        elif len(sub)>0:\n            return False\n        else:\n            return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(first_list,second_list):\n    for i in first_list:\n        for j in second_list:\n            if i == j:\n                second_list.remove(j)\n    if len(second_list) == 0:\n        return True\n    return False\n\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    for l in list2:\n        if set(l).issubset(set(list1)):\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n\t# Your code here\n\t#list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\t#list2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\n\t#print(list2)\n\tfor i in list2:\n\t\tif set(i) >= set(list1):\n\t\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(lst,nested_lst):\n    for item in lst:\n        if isinstance(item, list):\n            #print(nested_lst)\n            #print(item)\n            if item not in nested_lst:\n                return False\n        else:\n            if item not in nested_lst:\n                return False\n    return True\n\n#print(check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]))\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(x,y):\n    if len(x)==0:\n        return True\n    elif len(y)==0:\n        return False\n    elif x[0] in y[0]:\n        return check_subset_list(x[1:],y[1:])\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    char_set = set(str)\n    for i in char_set:\n        if str.count(i) == 2:\n            return i\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    return string.index(string[1:].index(string[0]))\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    # your code goes here\n    return str[0]\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str1):\n    for i in range(len(str1)):\n        if(str1.count(str1[i]) > 1):\n            return str1[i]\n    return \"No duplicate character found\"\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(s):\n    unique_chars = set(s)\n    return s[0] if len(unique_chars) == 1 else s[s.index(s.translate(None, unique_chars))]\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    # create a dictionary of characters and count\n    dict_char = {}\n    for x in string:\n        if x in dict_char:\n            dict_char[x] = dict_char[x] + 1\n        else:\n            dict_char[x] = 1\n\n    for x in string:\n        if dict_char[x] > 1:\n            return x\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str):\n    if(str == \"\"):\n        return \"\"\n    \n    dict = {}\n    for i in range(len(str)):\n        dict[str[i]] = str[i]\n    for i in range(len(str)):\n        if(str[i] in dict):\n            dict[str[i]] = dict[str[i]] + \"*\"\n\n    print(dict)\n    for i in range(len(str)):\n        if(str[i] != \"*\"):\n            return str[i]", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    for i in range(0, len(str)):\n        if str.count(str[i]) > 1:\n            return str[i]\n    return \"No repeated character found\"\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(input_string):\n    \"\"\"\n    input_string: string to search\n    \"\"\"\n    #stores the repeated character\n    repeated_char = \"\"\n    for i in range(len(input_string)):\n        if input_string[i] == repeated_char:\n            return repeated_char\n        else:\n            repeated_char = input_string[i]\n    return repeated_char\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(str):\n    \"\"\"\n    Find first repeated character in a given string\n    Input: str\n    Output: first repeated character in a given string\n    \"\"\"\n    # initialize an empty list\n    lst = []\n    # traverse the string\n    for i in str:\n        if i in lst:\n            return i\n        # append character to list\n        lst.append(i)\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(x, y):\n    operations = 0\n    while x != y:\n        if x > y:\n            x = x - y\n            operations = operations + 1\n        else:\n            y = y - x\n            operations = operations + 1\n    return operations\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(A,B):\n    diff = abs(A - B)\n    count = 0\n    while(A != B):\n        count+=1\n        if(diff%2 == 1):\n            A += diff//2\n        else:\n            A += diff//2+1\n        diff = abs(A - B)\n    return count\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(num1,num2):\n    if num1 < num2:\n        return num2-num1\n    else:\n        return num1-num2\n\n\n# +", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(x, y):\n    if x == y:\n        return 0\n    if x > y:\n        return min_Operations(x - y, y)\n    return min_Operations(x, y - x) + 1\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(x,y):\n    operations = 0\n    while x != y:\n        if x > y:\n            x = x - y\n        else:\n            y = y - x\n        operations += 1\n    return operations\n\n# test cases", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(num1, num2):\n    if num1 > num2:\n        return min_Operations(num2, num1)\n    diff = num1 - num2\n    if diff == 1:\n        return 1\n    return 1 + min_Operations(num1-1, num2)\n\ndef min_Operations_DP(num1, num2):\n    dp = [0 for i in range(num1 + 1)]\n    for i in range(1, num1 + 1):\n        dp[i] = i\n    for j in range(num2, num1 - 1, -1):\n        dp[j] = min(dp[j + 1], dp[j + 1 - num2] + 1)\n    return dp[num1]\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(num1, num2):\n\n    if num1 == num2:\n        return 0\n    else:\n        if num1 > num2:\n            num2, num1 = num1, num2\n\n        result = 0\n\n        while num1 != num2:\n            if num1 % 2 == 0:\n                num1 = num1/2\n            else:\n                num1 = 3*num1 + 1\n            result += 1\n\n        return result\n\ndef test():\n    assert min_Operations(2,4) == 1\n    assert min_Operations(10, 13) == 2\n    assert min_Operations(10, 15) == 3\n    assert min_Operations(10, 10) == 0\n    print(\"all tests passed\")\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\nfrom collections import deque\n\ndef min_Operations(num1,num2):\n    stack = deque()\n    stack.append((num1, num2))\n\n    while len(stack) != 0:\n        num1, num2 = stack.pop()\n\n        if num1 == num2:\n            return 0\n        elif num1 < num2:\n            stack.append((num1, num2 - num1))\n        else:\n            stack.append((num2, num1 - num2))\n\n    return 1\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_operations(x, y):\n    if x < y:\n        return y - x\n    return x - y\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a, b):\n    \"\"\"\n    :param a: first number\n    :param b: second number\n    :return: minimum operations required to make two numbers equal\n    \"\"\"\n    operations = 0\n    while a != b:\n        if a < b:\n            a = a + b - a\n        elif a > b:\n            b = a - b + b\n        operations += 1\n    return operations\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nimport random\nimport math\n\n\ndef extract_min_max(tup, k):\n    \"\"\"\n    Extract min and max k elements from tuple\n\n    :param tup: tuple\n    :param k: int\n    :return: tuple of minimum k elements and maximum k elements from tup\n    \"\"\"\n\n    max_tup = []\n    min_tup = []\n\n    for i in range(len(tup)):\n        if len(min_tup) == 0 or tup[i] < min(min_tup):\n            min_tup.append(tup[i])\n        if len(max_tup) == 0 or tup[i] > max(max_tup):\n            max_tup.append(tup[i])\n\n    if len(max_tup) > k:\n        max_tup = random.sample(max_tup, k)\n    if len(min_tup) > k:\n        min_tup = random.sample(min_tup, k)\n\n    return min_tup, max_tup\n\n\ndef test_extract_min_max():\n    \"\"\"\n    Run test cases\n    \"\"\"\n    tup1 = tuple(random.sample(range(100), 10))\n    tup2 = tuple(random.sample(range(100), 10))\n    tup3 = tuple(random.sample(range(100), 10))\n    test_tuples = [tup1, tup2, tup3]\n    random.shuffle(test_tuples)\n\n    for tup in test_tuples:\n        print(tup)\n        min_tup, max_tup = extract_min_max(tup, 3)\n        print(\"min_tup: \", min_tup)\n        print(\"max_tup: \", max_tup)\n        print()", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(nums, k):\n    if k <= 0:\n        return None\n\n    max_index = k - 1\n    min_index = 0\n    max_element = nums[0]\n    min_element = nums[0]\n    for i in range(1, len(nums)):\n        if max_element < nums[i]:\n            max_element = nums[i]\n            max_index = i\n        if min_element > nums[i]:\n            min_element = nums[i]\n            min_index = i\n\n    min_nums = nums[min_index:min_index + k]\n    max_nums = nums[max_index:max_index + k]\n\n    return min_nums, max_nums\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(T, k):\n    '''\n    T: tuple\n    k: int\n    '''\n    return tuple(sorted([min(T), max(T)])[:k])\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Tuple\n\ndef extract_min_max(array: Tuple, k: int) -> Tuple:\n    \"\"\"\n    Use Counter to count the number of occurrences of each element.\n    \"\"\"\n    counter = Counter(array)\n    min_max = (array[0], array[-1])\n    for i, val in enumerate(array):\n        if counter[val] == 1:\n            min_max = (min_max[0], min_max[1], val)\n        else:\n            min_max = (min_max[0], min_max[1], min_max[2])\n        if counter[val] < k:\n            min_max = (min_max[0], min_max[1], array[i])\n        if len(min_max) == 4:\n            break\n    return tuple(min_max)\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(iterable, k):\n    if k < 0 or k > len(iterable):\n        raise ValueError(\"k must be positive number\")\n    return sorted(iterable)[:k], sorted(iterable, reverse=True)[:k]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tuple_num, k):\n    arr = sorted(tuple_num)\n    return tuple(arr[:k]), tuple(arr[-k:])\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(t, k):\n    t = sorted(t)\n    return t[0:k], t[-k:]\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tup, k):\n    min_index = 0\n    max_index = len(tup) - 1\n\n    min_elem = tup[0]\n    max_elem = tup[-1]\n\n    for i in range(1, len(tup)):\n        if tup[i] < min_elem:\n            min_elem = tup[i]\n            min_index = i\n        if tup[i] > max_elem:\n            max_elem = tup[i]\n            max_index = i\n\n    return tup[min_index:min_index + k], tup[max_index - k:max_index]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(arr, k):\n    if len(arr) == 1:\n        return arr\n    else:\n        return (arr[0], arr[len(arr) - 1]) + extract_min_max(arr[1:len(arr) - 1], k - 2)\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\nfrom typing import Tuple\nimport pytest\n\ndef extract_min_max(input_list: tuple, k: int) -> Tuple:\n    if k > len(input_list):\n        raise ValueError(\"Given k is more than total number of elements in the tuple.\")\n    elif k <= 0:\n        raise ValueError(\"Given k is less than or equal to 0.\")\n\n    return sorted(input_list)[0:k], sorted(input_list, reverse=True)[0:k]\n\n\n@pytest.mark.parametrize('input_list,k,expected', [\n    ( (5, 20, 3, 7, 6, 8), 2, (3, 5, 8, 20) ),\n    ( (5, 20, 3, 7, 6, 8), 3, (3, 5, 6, 7) ),\n    ( (5, 20, 3, 7, 6, 8), 4, (3, 5, 6, 7) ),\n])\ndef test_extract_min_max(input_list: tuple, k: int, expected: Tuple) -> None:\n    output = extract_min_max(input_list, k)\n    assert output == expected"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(str1, max_char):\n    if(max_char<=0):\n        return str1\n    else:\n        i = 0\n        res = \"\"\n        while i<len(str1):\n            if str1[i]==' ':\n                count = 1\n                while i<len(str1) and str1[i]==' ':\n                    count += 1\n                    i+=1\n                    if(count>=max_char):\n                        res+=\":\"\n                        count = 0\n            elif str1[i]==',' or str1[i]=='.':\n                count = 1\n                while i<len(str1) and (str1[i]==',' or str1[i]=='.'):\n                    count += 1\n                    i+=1\n                    if(count>=max_char):\n                        res+=\":\"\n                        count = 0\n            else:\n                res += str1[i]\n                i+=1\n        return res\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(text, n):\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\":\"\")\n    text = text.replace(\".\":\"\")\n    return text\n\n#assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(word: str, n: int) -> str:\n    result = ''\n    prev = ''\n    count = 0\n    for i in range(len(word)):\n        if word[i] == ' ':\n            if count > n:\n                result += ':'\n            else:\n                result += ' '\n            count = 0\n        elif word[i] == ',':\n            if count > n:\n                result += ':'\n            else:\n                result += ','\n            count = 0\n        elif word[i] == '.':\n            if count > n:\n                result += ':'\n            else:\n                result += '.'\n            count = 0\n        else:\n            count += 1\n            result += word[i]\n    return result\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(str, max):\n    return str.replace(str.split(' ')[max], ':')\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(text, max_occurrences):\n    text = str(text)\n    # change the type of max_occurrences to int\n    max_occurrences = int(max_occurrences)\n    # initialize a new string with the updated version of the original string\n    new_str = ''\n    # store the current character in current_char\n    current_char = ''\n    # initialize the counter as 0\n    counter = 0\n    # iterate over the characters in the string text\n    for character in text:\n        # check whether the current character is a space, a comma, or a dot\n        if character in [' ',',', '.']:\n            # check whether the counter is less than the maximum number of occurences\n            if counter < max_occurrences:\n                # if yes, then append a colon\n                new_str += ': '\n            # otherwise, append a comma\n            else:\n                new_str += ', '\n        # if the current character is a digit, append it to the current_char\n        # otherwise, if the current character is not a space, a comma, or a dot,\n        # append a space between the current character and the current_char\n        else:\n            if not current_char:\n                new_str += character\n            else:\n                new_str += ' ' + character\n        # update the current character\n        current_char = character\n        # increment the counter\n        counter += 1\n    return new_str\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, max_occurences):\n    string = string.replace(',',':')\n    string = string.replace('.','.')\n    return string[:max_occurences].replace(' ',':')", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(str,n):\n    return ':'.join(str.split(':')[0:n])", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, n):\n    for char in [' ',',','.']:\n        string = string.replace(char, ':')\n        if len(string) <= n:\n            return string\n    return string.replace(string[n], ':')\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(str, n):\n    temp = str.split(\",\")\n    temp2 = []\n    for i in temp:\n        temp2.append(i.split(\" \"))\n    for i in range(len(temp2)):\n        temp2[i] = \":\".join(temp2[i])\n    temp3 = \",\".join(temp2)\n    temp4 = temp3.split(\" \")\n    for i in range(len(temp4)):\n        temp4[i] = \":\".join(temp4[i])\n    temp5 = \" \".join(temp4)\n    return temp5\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(str, max_occur):\n    str = str.replace(' ',':')\n    str = str.replace('.','')\n    str = str.replace(',','')\n    special_ch = [',', '.', ' ']\n    temp = []\n    for i in str:\n        temp.append(i)\n    index = 0\n    for j in special_ch:\n        count = 0\n        for k in temp:\n            if k == j:\n                count += 1\n        if count > max_occur:\n            for k in range(index, index+count):\n                temp[k] = ':'\n            index += count\n    return ''.join(temp)\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(nums):\n    \"\"\"\n    >>> first_even([1, 3, 5, 7, 4, 1, 6, 8])\n    4\n    \"\"\"\n    for i in nums:\n        if i % 2 == 0:\n            return i\n\n# TESTS", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (num_list):\n    for num in num_list:\n        if num % 2 == 0:\n            return num\n    else:\n        return None\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\n# Solution\ndef first_even(numbers):\n    # Loop through numbers\n    for index, number in enumerate(numbers):\n        # if the number is even, return the number\n        if number % 2 == 0:\n            return number\n        # if the number is odd, continue to next number\n        elif index == len(numbers)-1:\n            return\n\n# Test", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(L):\n    for i in range(len(L)):\n        if L[i] % 2 == 0:\n            return L[i]\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(nums):\n    for num in nums:\n        if num%2 == 0:\n            return num\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (numlist):\n    for num in numlist:\n        if num % 2 == 0:\n            return num\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(lst):\n    for i in lst:\n        if i % 2 == 0:\n            return i\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (numbers):\n    for num in numbers:\n        if num%2==0:\n            return num\nfirst_even([1, 3, 5, 7, 4, 1, 6, 8])\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(mylist):\n    for i in mylist:\n        if i % 2 == 0:\n            return i\n    return None\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    for t in tup:\n        if t == int or t == float:\n            return True\n        elif t == str:\n            return True\n    return False", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    types = set([type(elem) for elem in tup])\n    return len(types) == 1\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    #Write your code here\n    return isinstance(tup[0], type(tup[1]))\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_val):\n    for i in range(len(tuple_val)):\n        if type(tuple_val[i]) != type(tuple_val[0]):\n            return False\n    return True\n\n# Testcase 1", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_):\n    return all(isinstance(i, type(tuple_[0])) for i in tuple_)\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple_to_check):\n    if type(tuple_to_check) != tuple:\n        return False\n    return all([type(item) == type(tuple_to_check[0]) for item in tuple_to_check])\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(t):\n    if len(set(map(type, t))) == 1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple):\n    return type(tuple[0]) == type(tuple[1]) and type(tuple[0]) == type(tuple[2]) and type(tuple[1]) == type(tuple[2])\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    if type(tup[0]) == type(tup[1]) == type(tup[2]) == type(tup[3]) == type(tup[4]) == type(tup[5]):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n#user input\ndata = input(\"Enter the tuple: \")\n# convert input to tuple\ninput_tuple = tuple(data.split(\",\"))\n\n#checking if all the elements have same data type or not\ndef check_type(input_tuple):\n  #length of tuple\n  length = len(input_tuple)\n  #type of first element\n  type1 = type(input_tuple[0])\n\n  # looping till last element of the tuple\n  for i in range(1,length):\n    # checking if all the elements have same data type\n    if type(input_tuple[i]) != type1:\n      return False\n  return True\n\n#main code"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nimport math\n\n\ndef is_majority(arr, n, k):\n    total = sum(arr[0:k])\n    count = 1\n    for i in range(k, n):\n        total = total - arr[i - k] + arr[i]\n        if total == k:\n            count += 1\n        else:\n            count = 1\n        if count >= math.ceil(n / k):\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(array, k, v):\n    # array = [3, 3, 3, 10, 2, 3, 1]\n    # k = 3\n    # v = 3\n    if k == 0:\n        return False\n    if len(array) == 0:\n        return False\n    if len(array) == 1:\n        return array[0] == v\n    mid = len(array) // 2\n    if array[mid] == v:\n        return True\n    return is_majority(array[:mid], k-1, v) or is_majority(array[mid:], k-1, v)\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(array, target, count):\n    \"\"\"\n    array: a sorted array\n    target: majority element\n    count: times of majority element\n    \"\"\"\n    left = 0\n    right = len(array)-1\n    while left < right:\n        if target == array[left]:\n            count -= 1\n        if target == array[right]:\n            count += 1\n        if count == 0:\n            break\n        left += 1\n        right -= 1\n    return count == 0 or count == count\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, ele):\n    if n < 0:\n        return False\n    count = 0\n    for i in range(0, n):\n        if arr[i] == ele:\n            count += 1\n    if count > (n / 2):\n        return True\n    return False", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, size, n):\n    if n*2 < size:\n        return False\n    if arr[-1] == n:\n        return True\n    if arr[0] == n:\n        return True\n    if arr[0] == arr[-1]:\n        return True\n    cnt = 0\n    for i in range(size):\n        if arr[i] == n:\n            cnt += 1\n        if cnt > size/2:\n            return True\n        if cnt < size/2:\n            return False\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(array, start, end):\n    for i in xrange(start, end+1):\n        element = array[i]\n        counter = 0\n        for j in xrange(start, end+1):\n            if array[j] == element:\n                counter += 1\n                if counter > (end - start + 1)/2:\n                    return True\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(nums, n, target):\n    # Step 1: Sort the array\n    nums.sort()\n    # Step 2: Check if length is at least twice of the target\n    if len(nums) < 2 * target:\n        return False\n    # Step 3: Check if there is a target at the start and at the end\n    if nums[0] == target and nums[-1] == target:\n        return True\n    # Step 4: Check if there is a target in the middle\n    for i in range(1, len(nums) - 1):\n        if nums[i] == target:\n            return True\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, k):\n    \"\"\"\n    :param arr: an array\n    :param n: size of the array\n    :param k: value to be checked\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n    return count >= (n / 2)\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(array, start, end):\n    diff = len(array) // 2\n    if len(array) % 2 == 1:\n        diff += 1\n\n    left = start\n    right = end\n    while left < right:\n        if array[left] == array[right]:\n            right -= 1\n        else:\n            left += 1\n\n    if array[left] == array[right]:\n        return True\n\n    if abs(diff - (right - left + 1)) > 1:\n        return False\n\n    return True\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, target):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :type target: int\n    :rtype: bool\n    \"\"\"\n    counter = 0\n    for i in range(0, n):\n        if(arr[i] == target):\n            counter += 1\n    if(counter > (n/2)):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(num):\n    count = 0\n    while num > 0:\n        if num & 1:\n            count += 1\n        num >>= 1\n    return count\n\ndef count_Set_Bits2(num):\n    res = 0\n    for i in range(0, 32):\n        if (num >> i) & 1:\n            res += 1\n    return res\n\ndef count_Set_Bits3(num):\n    return bin(num).count('1')", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    res = 0\n    for i in range(n):\n        res += n & 1\n        n >>= 1\n    return res\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\nfrom binary import (\n    bin_to_dec,\n    dec_to_bin,\n)\n\n\ndef count_Set_Bits(n):\n    return bin_to_dec(dec_to_bin(n, length=8)[:2]).count('1')\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\nimport math\n\ndef count_set_bits(number):\n    # Write your code here\n    count = 0\n    while number != 0:\n        count += number & 1\n        number >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\nfrom collections import deque\n\n\ndef count_Set_Bits(number):\n    \"\"\"\n    :param number:\n    :return:\n    \"\"\"\n    return len(deque(bin(number)[2:]))", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(num):\n    count = 0\n    while(num):\n        if num & 1:\n            count += 1\n        num = num >> 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(number):\n    if number < 0:\n        raise ValueError('Number should be a positive integer')\n\n    if number == 0:\n        return 0\n\n    result = 0\n\n    while number:\n        result += number & 1\n        number >>= 1\n\n    return result\n\n\ndef test_function(test_case):\n    number = test_case[0]\n    solution = test_case[1]\n    output = count_Set_Bits(number)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([2, 1])\ntest_function([1023, 12])\ntest_function([100, 1])\ntest_function([-1, 0])", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    return bin(n).count('1')\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(number):\n    count = 0\n    while number > 0:\n        number = number & (number - 1)\n        count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,start,end):\n    if(start<end):\n        mid = (start+end)//2\n        if(arr[mid] < arr[mid+1]):\n            return arr[mid]\n        elif(arr[mid] < arr[start]):\n            return arr[start]\n        elif(arr[mid] < arr[end]):\n            return arr[mid]\n        else:\n            if(mid == 0):\n                return arr[mid]\n            if(mid == end):\n                return arr[mid]\n            if(mid > 0):\n                return find_Min(arr,0,mid-1)\n            return find_Min(arr,mid+1,end)\n\ndef test_function(test_case):\n    arr = test_case[0]\n    result = test_case[1]\n    print(find_Min(arr,0,len(arr)-1))\n    if find_Min(arr,0,len(arr)-1) == result:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Test Case\narr = [1,2,3,4,5]\nresult = 1\ntest_case = [arr, result]\ntest_function(test_case)\n\narr = [5,4,3,2,1]\nresult = 1\ntest_case = [arr, result]\ntest_function(test_case)\n\narr = [1,4,6,8,9,10,11,12]\nresult = 4\ntest_case = [arr, result]\ntest_function(test_case)", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    \n    if start > end:\n        return find_Min(arr, start, end-1)\n    \n    mid = (start + end)//2\n    \n    if mid > start and arr[mid] < arr[mid-1]:\n        return find_Min(arr, mid, end)\n    \n    if mid < end and arr[mid] < arr[mid+1]:\n        return find_Min(arr, start, mid)\n    \n    return find_Min(arr, start, mid)\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,l,h):\n    if h==l:\n        return arr[l]\n    if h-l==1:\n        if arr[l] < arr[h]:\n            return arr[l]\n        else:\n            return arr[h]\n    mid = (l+h)//2\n    if arr[l]<arr[mid]:\n        if arr[l] < arr[h]:\n            return arr[l]\n        else:\n            return arr[h]\n    elif arr[mid] < arr[h]:\n        if arr[l] < arr[mid]:\n            return arr[l]\n        else:\n            return arr[mid]\n    return find_Min(arr,l,mid)\n    \n#assert find_Min([1,2,3,4,5],0,4) == 1", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,left,right):\n    min = arr[left]\n    i = left\n    j = right\n    while i<=j:\n        if arr[i]<min:\n            min = arr[i]\n        if arr[j]>min:\n            min = arr[j]\n        i+=1\n        j-=1\n    return min\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, l, r):\n\n    if l >= r:\n        return arr[l]\n\n    mid = l + (r - l)//2\n\n    if mid > l and arr[mid] < arr[mid-1]:\n        return arr[mid]\n\n    if mid < r and arr[mid] < arr[mid+1]:\n        return arr[mid]\n\n    if l < mid and arr[l] > arr[mid]:\n        return find_Min(arr, l, mid - 1)\n    else:\n        return find_Min(arr, mid + 1, r)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, l, r):\n    if l >= r:\n        return -1\n    mid = l + (r - l) // 2\n    if mid == 0 or mid == len(arr) - 1 or arr[mid - 1] < arr[mid] < arr[mid + 1]:\n        return arr[mid]\n    if mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_Min(arr, l, mid - 1)\n    return find_Min(arr, mid + 1, r)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,start,end):\n    if start==end:\n        return arr[start]\n    mid = int((end-start)/2)\n    if arr[mid]>arr[end]:\n        if arr[start]<arr[mid] and arr[start]<arr[end]:\n            return arr[start]\n        else:\n            return find_Min(arr,start,mid)\n    elif arr[mid]<arr[end]:\n        if arr[mid]<arr[end]:\n            return find_Min(arr,mid+1,end)\n        else:\n            return find_Min(arr,start,mid)\n    else:\n        return find_Min(arr,start,mid)\n\narr = [1,2,3,4,5]", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,start,end):\n\n    if(arr[start]<=arr[end]):\n        return arr[start]\n    elif (end-start>1):\n        mid=(start+end)//2\n        left=find_Min(arr,start,mid)\n        right=find_Min(arr,mid,end)\n        if (left<right):\n            return left\n        else:\n            return right\n    else:\n        return -1\n\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,left,right):\n    if left == right:\n        return arr[left]\n    mid = int((left+right)/2)\n    if arr[left] <= arr[mid]:\n        if arr[mid] <= arr[right]:\n            return arr[mid]\n        else:\n            return find_Min(arr,left,mid)\n    else:\n        if arr[left] <= arr[right]:\n            return arr[left]\n        else:\n            return find_Min(arr,mid+1,right)\n\n\narr = [1,2,3,4,5]", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, low, high):\n\n    # return the minimum element in arr[low...high] inclusive\n    if low == high:\n        return arr[low]\n\n    mid = low + (high-low)//2\n\n    # if array is not sorted, the element in mid is either smallest\n    # or second smallest\n    if arr[mid] < arr[high]:\n        if arr[low] < arr[mid]:\n            return arr[low]\n        else:\n            return arr[mid]\n\n    # else recur for the subarray formed by\n    # arr[low..mid-1] and arr[mid+1..high]\n    return find_Min(arr, low, mid-1) if arr[low] < arr[mid] else find_Min(arr, mid+1, high)\n\n# Driver code"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(str):\n    new_string = []\n    for i in range(len(str)):\n        if i%2 != 0:\n            new_string.append(str[i])\n    return \"\".join(new_string)\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    return ''.join(c for i, c in enumerate(string) if i % 2 == 0)\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    odd_string = \"\"\n    for i in range(0, len(string)):\n        if i%2 == 1:\n            odd_string = odd_string + string[i]\n    return odd_string", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    return \"\".join([s[i] for i in range(len(s)) if i % 2 == 0])\n\n\ndef odd_values_string2(s):\n    return \"\".join([s[i] for i in range(len(s)) if i % 2])\n\n\ndef odd_values_string3(s):\n    return \"\".join([x for i, x in enumerate(s) if i % 2 == 0])\n\n\ndef odd_values_string4(s):\n    return \"\".join([s[i] for i in range(len(s)) if i % 2 == 1])\n\n\ndef odd_values_string5(s):\n    return \"\".join([x for i, x in enumerate(s) if i % 2])\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    return string[1::2]\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    \"\"\"Remove characters which have odd index values in a string\n\n    :param s: String\n    :type s: str\n    :return: String without odd values\n    :rtype: str\n    \"\"\"\n\n    return ''.join(s[i] for i in range(0, len(s), 2))\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    \"\"\"\n    :param string: string of letters\n    :return: string of letters without odd index values\n    \"\"\"\n    return string[1::2]\n\n# Test cases", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    odd_values = string[1::2]\n    even_values = string[0::2]\n    return even_values + odd_values\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    new_string = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_string += s[i]\n    return new_string", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    return ''.join(s[2::2])\n\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a < b and a<c:\n        return a\n    if b < c and b<a:\n        return b\n    return c\n\na = min_of_three(10,20,0)", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n\ndef test_min_of_three():\n    assert min_of_three(10,20,0)==0\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    min=min(a,b,c)\n    return min\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    # First sort them\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n    else:\n        return a\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(num1, num2, num3):\n    minnum = num1\n    if num2 < minnum:\n        minnum = num2\n    if num3 < minnum:\n        minnum = num3\n    return minnum\n\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(num1,num2,num3):\n    if num1<num2 and num1<num3:\n        return num1\n    if num2<num1 and num2<num3:\n        return num2\n    if num3<num1 and num3<num2:\n        return num3", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(x, y, z):\n    \"\"\"\n    x: an integer\n    y: an integer\n    z: an integer\n    return: the minimum number\n    \"\"\"\n    if x < y and x < z:\n        return x\n    elif y < x and y < z:\n        return y\n    elif z < x and z < y:\n        return z\n    else:\n        return -1\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(x, y, z):\n    return min(x, y, z)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= c:\n        return b\n    else:\n        return c\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start, end, n):\n    if (n&(n-1))==0:\n        return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    # Your Code Here\n    return True if start is None or end is None else bool(bin(start).count('1') + bin(end).count('1')) == 0\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(num1,num2):\n    if num2<num1:\n        num1,num2 = num2,num1\n\n    while(num1>0):\n        if (num1 & 1) !=1:\n            return False\n        num1=num1>>1\n    return True\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start,end,val):\n    if val<start or val>end:\n        return False\n    return bin(start).count('1') == 0 and bin(end).count('1') == 0\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(low,high):\n    \"\"\"\n    Time Complexity : O(1)\n    Space Complexity : O(1)\n    \"\"\"\n    return (low & high) == 0\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    if start>end:\n        return False\n    else:\n        return start==end or all_Bits_Set_In_The_Given_Range(start*2,end*2)\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n# main function\ndef all_Bits_Set_In_The_Given_Range(range_start, range_end):\n    #variables\n    count = 0\n    for i in range(range_start, range_end+1):\n        if(i & i-1) != 0:\n            count += 1\n    if(count == 0):\n        return True\n    else:\n        return False\n\n# test cases", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(l,r):\n    if l>=r:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    return True if (start & 1) or (end & 1) == 0 else False\n\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    return (start & end) == 0\n\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    return (start | end) == (start + 1)\n\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    return (start | (start + 1)) == (end + 1)\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n,m,q):\n\tp = m | (m-1)\n\treturn p== q\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\nfrom math import log\n\n# Binary Search for index\ndef bin_search(arr, left, right, x):\n    if left > right:\n        return -1\n    else:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            return bin_search(arr, mid + 1, right, x)\n        else:\n            return bin_search(arr, left, mid - 1, x)\n\n# Rearrange Array\ndef re_arrange_array(arr, n):\n    new_arr = []\n    i = 0\n    while i < n:\n        if arr[i] >= 0:\n            new_arr.append(arr[i])\n            i += 1\n        else:\n            # Inserting negative elements\n            pos = bin_search(new_arr, 0, i - 1, -arr[i])\n            if pos != -1:\n                new_arr.insert(pos, arr[i])\n            else:\n                new_arr.append(arr[i])\n            i += 1\n    return new_arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, size):\n    \"\"\"\n    :param arr: list of integers\n    :param size: length of the array\n    :return: list of integers re-arranged such that all negative integers come before positive integers\n    \"\"\"\n    n = 0\n    m = size-1\n    while n < m:\n        while n < size and arr[n] < 0:\n            n += 1\n        while m >= 0 and arr[m] > 0:\n            m -= 1\n        if n < m:\n            arr[n], arr[m] = arr[m], arr[n]\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\nimport unittest\n\n\ndef re_arrange_array(arr, n):\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n\n    i, j = 0, n - 1\n    while i < j:\n        while i < j and arr[j] >= 0:\n            j -= 1\n        if arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        while i < j and arr[i] < 0:\n            i += 1\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    pos_list = []\n    neg_list = []\n    for i in arr:\n        if i > 0:\n            pos_list.append(i)\n        elif i < 0:\n            neg_list.append(i)\n        else:\n            continue\n    if len(neg_list) == 0:\n        return pos_list\n    neg_list.sort()\n    pos_list.sort()\n    return neg_list + pos_list\n\ndef re_arrange_array_2(arr, n):\n    # 1. sort the array\n    arr.sort()\n    # 2. get the first and second half\n    half = n//2\n    return arr[:half] + arr[half:]\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    pos = 0\n    neg = n-1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg -= 1\n        elif arr[i] > 0:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] < 0 and arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, size):\n    pos = 0\n    neg = size - 1\n\n    while pos < neg:\n        if array[pos] < 0:\n            pos += 1\n        elif array[neg] > 0:\n            neg -= 1\n        else:\n            array[pos], array[neg] = array[neg], array[pos]\n            pos += 1\n            neg -= 1\n\n    return array\n\n\narray = [-1, 2, -3, 4, 5, 6, -7, 8, 9]", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    neg = list(filter(lambda x: x < 0, arr))\n    pos = list(filter(lambda x: x > 0, arr))\n    pos.extend(neg)\n    return pos\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\nfrom typing import List\n\n\ndef re_arrange_array(arr: List[int], size: int) -> List[int]:\n    arr.sort()\n    negatives, positives = [], []\n    for i in arr:\n        if i < 0:\n            negatives.append(i)\n        else:\n            positives.append(i)\n\n    return negatives + positives\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(a, n):\n    i = 0\n    j = n - 1\n\n    while i < j:\n        while i < j and a[i] < 0:\n            i += 1\n\n        while i < j and a[j] >= 0:\n            j -= 1\n\n        a[i], a[j] = a[j], a[i]\n\n    return a\n\n\n# Test case 2:"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, replace_to):\n    i = str.find(' ')\n    while i != -1:\n        str = str[:i] + replace_to + str[i + 1:]\n        i = str.find(' ')\n    return str\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str,ch):\n    return str.replace(' ',ch)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(str, rep=' '):\n    # code goes here\n    return str.replace(\" \", rep)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\nimport string\n\ndef replace_blank(text, replacement):\n    \"\"\"\n        Replace blank spaces with any character in a string.\n    \"\"\"\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] == ' ':\n            text[i] = replacement\n    return ''.join(text)\n\n# A unit test for your code.", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(text, replacment=\"*\"):\n    if type(text) is not str:\n        return \"Replace with string\"\n    return text.replace(\" \",replacment)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, ch):\n    return ch * str.count(\" \")\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(s,c):\n    # convert space to c\n    for i in range(len(s)):\n        if s[i]==\" \":\n            s[i]=c\n    return \"\".join(s)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, character):\n    if string == \"\":\n        return \"\"\n    new_string = \"\"\n    for index, value in enumerate(string):\n        if value == ' ':\n            new_string += character\n        else:\n            new_string += value\n    return new_string\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s,c):\n    return s.replace(' ','c')\n\n#print(replace_blank(\"hello people\",'@'))\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s,ch):\n    return s.replace(\" \",ch)\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, row):\n    max_row = [0] * row\n    for i in range(row):\n        for j in range(i+1):\n            max_row[i] = max(triangle[i][j] + max_row[i], max_row[i-1])\n    return max_row[row-1]\n\ndef max_sum_recursive(triangle, row, i, j, max_row):\n    if i == j:\n        if max_row[i] < triangle[i][i]:\n            max_row[i] = triangle[i][i]\n    else:\n        max_sum_recursive(triangle, row, i+1, j, max_row)\n        max_sum_recursive(triangle, row, i+1, j-1, max_row)\n        max_row[i] = max(triangle[i][j] + max_row[i], max(max_row[i+1], max_row[i]))\n\ndef max_sum_iterative(triangle, row):\n    max_row = [0] * row\n    for i in range(row):\n        max_row[i] = triangle[i][0]\n    for j in range(row):\n        for i in range(j):\n            max_row[j] = max(triangle[j][i] + max_row[j], max_row[j-1])\n    return max_row[row-1]\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangles, n):\n    # Write your code here\n    # Get the height of the triangle.\n    h = len(triangles)\n    # Initialize the best result.\n    max_sum = 0\n\n    # The base case for the recursion.\n    if h == 1:\n        # If the height is 1, then there is only one row in the triangle.\n        return triangles[0][0]\n\n    # Get the last element of the last row.\n    max_sum += triangles[h-1][n-1]\n\n    # Calculate the maximum sum in the last row.\n    max_sum = max(max_sum, sum(triangles[h-1]))\n\n    # Loop through the rows.\n    for i in range(h-2, -1, -1):\n        # Get the row and the last element of the row.\n        current_row = triangles[i]\n        last_elem = current_row[n-1]\n\n        # If there is any number in the row, calculate the max sum from it.\n        if current_row[n-1] != 0:\n            max_sum = max(max_sum, last_elem + max_sum_in_rows(triangles, i+1, n-1))\n        else:\n            # Otherwise, calculate the maximum sum in the row recursively.\n            max_sum = max(max_sum, max_sum_in_rows(triangles, i+1, n-1))\n\n    return max_sum\n\n\ndef max_sum_in_rows(triangles, start, end):\n    # Check if the rows are valid.\n    if start == end:\n        # If the rows are equal, return 0.\n        return 0\n    if start == end+1:\n        # If the rows are only one element different, return the max value.\n        return max(triangles[start][end], triangles[start][end+1])\n\n    # Get the height of the rows.\n    h = end - start + 1\n    # Calculate the maximum sum of the rows.\n    max_sum = 0\n    for i in range(h):\n        # Get the current row.\n        row = triangles[start+i", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += arr[i][j]\n    return total\n\ndef max_sum(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(n-1-i):\n            total += arr[i][j]\n    return total\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(numbers, k):\n    # assume the triangle is square and the longest side is k\n    k = k + 1\n    dp = [[0 for _ in range(k)] for _ in range(k)]\n    for row in range(k):\n        for col in range(k):\n            if row == 0 or col == 0:\n                dp[row][col] = numbers[row][col]\n            elif col == row:\n                dp[row][col] = numbers[row][col] + dp[row - 1][col - 1]\n            else:\n                dp[row][col] = numbers[row][col] + max(dp[row - 1][col], dp[row][col - 1], dp[row - 1][col - 1])\n    return dp[-1][-1]\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(triangle: List[List[int]], k: int) -> int:\n    res = 0\n    n = len(triangle)\n    for i in range(n - 1):\n        for j in range(0, min(i + k + 1, n)):\n            res = max(res, triangle[i][j] + triangle[i + 1][j])\n    return res", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(matrix, n):\n    max_val = 0\n    for i in xrange(n):\n        for j in xrange(n):\n            max_val = max(max_val, matrix[i][j]+matrix[i][j+1]+matrix[i][j+2])\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, max_row):\n    sum_matrix = [[0 for _ in range(max_row)] for _ in range(max_row)]\n    for i in range(max_row):\n        sum_matrix[i][0] = triangle[i][0]\n    for i in range(1, max_row):\n        sum_matrix[i][0] = sum_matrix[i - 1][0] + triangle[i][0]\n    for i in range(1, max_row):\n        for j in range(1, i):\n            sum_matrix[i][j] = max(sum_matrix[i - 1][j], sum_matrix[i][j - 1], sum_matrix[i - 1][j - 1]) + triangle[i][j]\n    return sum_matrix[max_row - 1][max_row - 1]\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    \"\"\"Find max sum of triangle of numbers.\n\n    Arguments\n    ---------\n    triangle : list\n        list of lists of numbers\n    n : int\n        number of rows in triangle\n\n    Returns\n    -------\n    max_sum : int\n        the max sum of the triangle of numbers\n    \"\"\"\n    rows = len(triangle)\n    if rows < n:\n        return None\n\n    max_sum = triangle[rows-1][0]\n    for i in range(rows-2, n-1, -1):\n        max_sum = max(max_sum, triangle[i][0] + max_sum_helper(triangle[i+1], n-i))\n    return max_sum\n\ndef max_sum_helper(row, n):\n    \"\"\"Find max sum of row of numbers.\n\n    Arguments\n    ---------\n    row : list\n        list of numbers\n    n : int\n        number of numbers in row\n\n    Returns\n    -------\n    max_sum : int\n        the max sum of the row of numbers\n    \"\"\"\n    max_sum = row[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, row[i] + max_sum_helper(row[i+1:], n-i))\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(triangle: List[List[int]], k: int) -> int:\n    n = len(triangle)\n    res = triangle[n-1][k-1]\n    for i in range(n-2, -1, -1):\n        for j in range(k):\n            res = max(res, triangle[i][j] + triangle[i+1][j])\n    return res"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(list_num, n):\n    return list_num[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(x,n):\n    x=sorted(x)\n    y=x[:n]\n    return y\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(data,n):\n    '''\n    data: a list\n    n: an integer\n    \n    return: a list of n largest values\n    '''\n    return sorted(data)[-n:]", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(numbers, n):\n    sorted_numbers = sorted(numbers)\n    n_largest = sorted_numbers[-n:]\n    return n_largest\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(lst,n):\n    return lst[:n]\n\n#Test\n# larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(dataset, n):\n  sorted_num = sorted(dataset, reverse=True)\n  print(sorted_num)\n  return sorted_num[:n]\n\n\n# + [markdown] colab_type=\"text\" id=\"tOOSL43117BK\"\n# # Write a function to get the smallest k numbers from a dataset.\n\n# + colab={} colab_type=\"code\" id=\"57lU1EzG17BL\"\ndef small_knum(dataset, k):\n  sorted_num = sorted(dataset)\n  print(sorted_num)\n  return sorted_num[:k]\n\n\n# + [markdown] colab_type=\"text\" id=\"H7qx4DTE17BN\"\n# # Write a function to generate a dataset with n numbers from 1 to n.\n\n# + colab={} colab_type=\"code\" id=\"rKlfk9ny17BO\"\ndef num_set(n):\n  dataset = set()\n  for i in range(1,n+1):\n    dataset.add(i)\n  return dataset\n\n\n# + [markdown] colab_type=\"text\" id=\"bx21zJ0n17BQ\"\n# # Write a function to check whether a number is in the dataset.\n\n# + colab={} colab_type=\"code\" id=\"h2D8nMdl17BR\"\ndef num_in_set(dataset, num):\n  return num in dataset\n\n\n# + [markdown] colab_type=\"text\" id=\"r_98n17q17BU\"\n# # Write a function to check whether a dataset is a palindrome.\n\n# + colab={} colab_type=\"code\" id=\"e_dSwwZ217BV\"\ndef is_palindrome(dataset):\n  return dataset == dataset[::-1]\n\n\n# + [markdown] colab_type=\"text\" id=\"EtRY", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(arr,n):\n    lis=arr.copy()\n    lis.sort()\n    return lis[-n:]\n\n#Time Complexity: O(n log n)\n#Auxiliary Space: O(n)\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nimport heapq\ndef larg_nnum(arr,n):\n    heap = []\n    for num in arr:\n        heapq.heappush(heap,-num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-num for num in heap]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(data,n):\n    if len(data)<n:\n        return data\n    data.sort()\n    return data[len(data)-n:]\n\n\n#assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\n\n# +\n# Write a function to get the n smallest items from a dataset.\n\ndef smal_nnum(data,n):\n    if len(data)<n:\n        return data\n    data.sort()\n    return data[:n]\n\n\n# -\n\n#assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\n#assert smal_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[20,10]\n#assert larg_nnum([],100)==[]\n\n\ndef sum_all(data):\n    if len(data)==0:\n        return 0\n    else:\n        return sum(data)\n\n\n#assert sum_all([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100])==450", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\nfrom collections import Counter\n\ndef larg_nnum(ds,n):\n    c = Counter(ds)\n    d = list(c.items())\n    d.sort(key=lambda x: x[1],reverse=True)\n    return [i[0] for i in d[0:n]]\n\n\n# test\nds = [10,20,50,70,90,20,50,40,60,80,100]"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n    return 2*pi*(r**2)+(2*pi*(r**2))*(h/3)\n\n# Write a function to find the volume of a cylinder.", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius,height):\n    return 2*pi*radius**2 + 2*pi*radius*height\n    \n# Write a function to find the lateral surface area of a triangle.", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(radius, height):\n    return (2 * height * radius) + (2 * 3.14 * (radius ** 2))\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\nfrom math import pi\n\n\ndef lateralsurface_cylinder(r, h):\n    \"\"\"\n    Calculate lateral surface area of cylinder\n    :param r: radius\n    :param h: height\n    :return: lateral surface area\n    \"\"\"\n    return 2 * pi * r * h\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\nimport math\n\n\ndef lateralsurface_cylinder(radius,height):\n    PI=math.pi\n    return 2*PI*radius*height\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height):\n    return 2*pi*radius*height+2*pi*radius**2\n\ndef lateralsurface_cylinder(radius, height", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\nimport math\ndef lateralsuface_cylinder(radius,height):\n    if radius > 0 and height>0:\n        return (2*radius)*(height)+((radius**2)*(math.pi))\n    else:\n        print(\"Please enter a valid radius and height\")", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(r,h):\n    return 2*r*h+2*pi*r**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\nimport math\ndef lateralsurface_cylinder(r,h):\n    return math.pi * (r**2) + 2* math.pi * (r*h)\n\n\ndef lateralsurface_cylinder2(r,h):\n    return 2*math.pi * (r+h) * (r+h) - math.pi * r**2\n\n\ndef lateralsurface_cylinder3(r,h):\n    return 2* math.pi * (r+h) * (r+h)\n\n\ndef lateralsurface_cylinder4(r,h):\n    return 2* math.pi * (r+h) * (r+h) + 2* math.pi * r*h\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r, h):\n    return 2*math.pi*r*h+math.pi*r**2\n\n\n# -\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(size):\n    volume = size**3\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(x):\n    return x ** 3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(dimension):\n    \"\"\"\n    The volume of a cube is:\n\n    dimension * dimension * dimension\n    \"\"\"\n    return dimension * dimension * dimension\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(dimension):\n    \"\"\"\n    Computes the volume of a cube with a side of dimension (dimension = 3).\n    \"\"\"\n    volume = dimension**3\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(length):\n    return length ** 3\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(number):\n    return number**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(n):\n    return n*n*n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(x):\n    \"\"\"\n    :param x: int/float\n    :return: int/float\n    \"\"\"\n    return x**3\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\nfrom math import sqrt\n\ndef volume_cube(length):\n    return length**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(x):\n    \"\"\"\n    :param x: number of sides\n    :return: volume of a cube\n    \"\"\"\n    return x**3\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    return number & 0x55555555\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(n):\n    n &= 0x5555555555555555\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n#solution\n\ndef even_bit_set_number(num):\n    num = str(num)\n    for i in num:\n        num = str(num)\n        num = int(num,2)\n        num = num + 1\n        num = str(num)\n        num = int(num,2)\n    return num\n\n# Tests", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\nimport unittest\n\ndef even_bit_set_number(number):\n    num = str(number)\n    for i in range(len(num)):\n        if int(num[i])%2 == 0:\n            num[i] = \"1\"\n        else:\n            num[i] = \"0\"\n    return int(''.join(num), 2)\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    if number == 0:\n        return 0\n    else:\n        return number & (number - 1)\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    # your code here\n    return number & 0x55555555\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n\tn=bin(n)\n\treturn int(n,2)\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    return number | number >> 1\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    even_bit = num & 2\n    even_bit_set_number = num | even_bit\n    return even_bit_set_number\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    return num\n\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(n,m):\n    \"\"\"\n    :param n: side of equilateral triangle\n    :param m: side of equilateral triangle\n    :return: no of equilateral triangles formed\n    \"\"\"\n    if m == 0 or n == 0:\n        return 0\n    if n == m:\n        return 1\n    if m == 1:\n        return n\n    if n == 1:\n        return m\n    return (n-1)*No_of_Triangle(n-2,m) + (m-1)*No_of_Triangle(n,m-2)\n\n\ndef test():\n    assert No_of_Triangle(4,2) == 7\n\ntest()", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(side1,side2):\n    total_triangles = (side1*side1)/6\n    i = 0\n    while i <= total_triangles:\n        if i != 0:\n            if i%4 == 0:\n                if side1 < side2:\n                    side1 += 1\n                    side2 += 1\n                elif side2 < side1:\n                    side1 += 1\n                    side2 += 1\n                elif side1 == side2:\n                    return 1\n        i += 1\n    return total_triangles\n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\nimport math\ndef No_of_Triangle(a,b):\n    count = 0\n    for i in range(a,b+1):\n        for j in range(a,i+1):\n            for k in range(a,j+1):\n                if math.sqrt(pow(i,2) - pow(j,2)) == math.sqrt(pow(j,2) - pow(k,2)) == math.sqrt(pow(k,2) - pow(i,2)):\n                    count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(side1, side2):\n    if(side1 != side2):\n        raise Exception(\"Given sides are not equal\")\n    if(side1 == 3):\n        return 7\n    return (side1**2)/2\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(n,k):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return k\n    elif n == 3:\n        return k*(k-1)\n    return No_of_Triangle(n-1,k) + No_of_Triangle(n-2,k) + No_of_Triangle(n-3,k)\n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(n,k):\n    ans=0\n    while n>1:\n        ans+=n\n        n-=k\n    return ans\n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(side, height):\n    return ((side**2)/height) - (side**2)\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n, k):\n    return 3*n**2 - 3*n + 2*k*(k-1)\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(x,y):\n    if x == 0 or y == 0:\n        return 0\n    if x == 1 or y == 1:\n        return 1\n    else:\n        return No_of_Triangle(x-1,y)+No_of_Triangle(x,y-1)+No_of_Triangle(x-1,y-1)", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(s,t):\n\tres = 0\n\tfor i in range(s):\n\t\tfor j in range(i+1,s):\n\t\t\tfor k in range(j+1,s):\n\t\t\t\tif (k-i) == (j-i) and (j-i) == (j-k) and (i-j) == (k-j):\n\t\t\t\t\tres += 1\n\treturn res\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(lst):\n    ret = {}\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if (lst[i] != lst[j]) and lst[i][0] == lst[j][0] and lst[i][1] == lst[j][1]:\n                if (lst[i][0], lst[i][1]) not in ret:\n                    ret[(lst[i][0], lst[i][1])] = 1\n                else:\n                    ret[(lst[i][0], lst[i][1])] += 1\n    return ret\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n# test function", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    dict_occurences = {}\n    for t in tuples:\n        if t in dict_occurences:\n            dict_occurences[t] += 1\n        else:\n            dict_occurences[t] = 1\n    return dict_occurences\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    d={}\n    for tup in tuples:\n        if (tup[0],tup[1]) not in d:\n            d[(tup[0],tup[1])]=1\n        else:\n            d[(tup[0],tup[1])]=d[(tup[0],tup[1])]+1\n    return d\n\nt= [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\nfrom collections import defaultdict\n\ndef check_occurences(tuples):\n  dictionary = defaultdict(int)\n  for tuple in tuples:\n    dictionary[tuple] += 1\n  return dictionary\n\n\n# assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    data = {}\n    for item in tuples:\n        key = (item[0], item[1])\n        if key not in data:\n            data[key] = 1\n        else:\n            data[key] += 1\n\n    return data\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(list):\n    \"\"\"\n    :param list: List of tuples\n    :return: Dict of tuples as key and count of occurances as value\n    \"\"\"\n    dict_of_occurences = dict()\n    for i in range(len(list)):\n        for j in range(i + 1, len(list)):\n            if list[i][1] == list[j][0]:\n                if list[i][0], list[j][0] in dict_of_occurences:\n                    dict_of_occurences[(list[i][0], list[j][0])] += 1\n                else:\n                    dict_of_occurences[(list[i][0], list[j][0])] = 1\n    return dict_of_occurences", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    return {(tuple[0], tuple[1]): tuples.count(tuple) for tuple in tuples}\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    # TODO: Write your code here\n    from collections import defaultdict\n    occurrences = defaultdict(int)\n    for tup in tuples:\n        #print(tup)\n        occurrences[(tup[0], tup[1])] += 1\n    return occurrences\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    from collections import defaultdict\n    d = defaultdict(list)\n    for item in tuples:\n        d[item[0]].append(item)\n    return dict(d)\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef count_substrings(string):\n    \"\"\"\n    Given a string, calculate the number of non-empty substrings.\n    \"\"\"\n    count = 0\n    n = len(string)\n    for i in range(n):\n        count += len(string[i:])\n    return count\n\n\ndef number_of_substrings(string):\n    \"\"\"\n    Given a string, calculate the number of non-empty substrings.\n    \"\"\"\n    count = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(n):\n            if i != j and j - i + 1 < n:\n                count += 1\n    return count\n\n\n# def number_of_substrings(string):\n#     return len([substring for substring in string if len(substring) > 0])\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\nfrom functools import reduce\n\ndef number_of_substrings(s):\n    return reduce(lambda x, y: x+y, map(lambda x: 1 if len(x) > 0 else 0, s))\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(str):\n    count = 0\n    if str == \"\":\n        return 0\n    if len(str) == 1:\n        return 1\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != \"\":\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(s):\n    if not isinstance(s, str):\n        raise TypeError(\"number_of_substrings() takes a string as an argument.\")\n    return len(s) + sum([0 if s[i] == \"\" else 1 for i in range(len(s))])\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(str_):\n    count = 0\n    for i in range(len(str_)):\n        for j in range(i, len(str_)):\n            count += 1 if str_[i:j+1] else 0\n    return count\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\nfrom unittest import TestCase\n\n\ndef count_number_of_substrings(string: str) -> int:\n    res = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i == 1:\n                res += 1\n            elif j - i > 1 and string[i] == string[j]:\n                res += 1\n    return res\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\nfrom collections import Counter\n\n\ndef number_of_substrings(string):\n    return sum(len(s) for s in Counter(string).values())\n\n\n# assert number_of_substrings(\"abc\") == 6\n\n# assert number_of_substrings(\"ab aabb\") == 4\n\n# assert number_of_substrings(\"abcab\") == 3\n\n# assert number_of_substrings(\"aabcc\") == 3\n\n# assert number_of_substrings(\"abcabcabc\") == 6\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if s[i:j+1] != \"\":\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1]:\n                count += 1\n    return count\n\ndef test_number_of_substrings():\n    assert number_of_substrings(\"abc\") == 6\n    assert number_of_substrings(\"aaaaa\") == 5\n    assert number_of_substrings(\"a\") == 1\n    assert number_of_substrings(\"\") == 0\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n#function to count number of non-empty substrings of a given string\ndef number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        # count the number of non-empty substrings that start at index i\n        count += count_non_empty_substrings(s, i)\n    return count\n\n#function to count the number of non-empty substrings that start at index i\ndef count_non_empty_substrings(s, i):\n    count = 0\n    # start count at the index of first character of string\n    j = i\n    # iterate till the index of last character of string\n    while j < len(s):\n        # if current character is not empty then increment the count\n        if s[j] != '':\n            count += 1\n        # increment the index of substring\n        j += 1\n    return count\n\n# Driver code to test above function\nstring = \"abc\""], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    total = 0\n    for i in range(m+1):\n        total += get_total_number_of_sequences(n-1, m-i)\n    return total\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    :param n: int\n    :param m: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return m - 2\n    return sum([get_total_number_of_sequences(n - 1, i) for i in range(m - 2, 0, -1)])\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n <= 1:\n        return 1\n    return get_total_number_of_sequences(n - 1, m) + get_total_number_of_sequences(n - 2, m) + get_total_number_of_sequences(n - 3, m) + get_total_number_of_sequences(n - 4, m)\n\ndef get_total_number_of_sequences(n, m):\n    if n <= 1:\n        return 1\n    if n <= 3:\n        return n\n    dp = [None]*(m+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = n\n    for i in range(3, m+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    for i in range(m+1, n+1):\n        dp[i] = dp[i-1]\n    return dp[n]\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    count = 0\n    # We have to make sure that the value of n is more than m\n    if n > m:\n        for i in range(n):\n            count += get_total_number_of_sequences(n - i, m)\n        return count\n    else:\n        return 1\n\n# Time Complexity: O(2^n)\n# Space Complexity: O(n)\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(m, n):\n    dp = [[None for i in range(m)] for j in range(n)]\n\n    def get_total_number_of_sequences(dp, m, n, i, j):\n        if dp[i][j] is not None:\n            return dp[i][j]\n\n        if j == i:\n            dp[i][j] = 1\n\n        elif i == 0:\n            dp[i][j] = 0\n\n        elif m <= 0 or j == 0:\n            dp[i][j] = 0\n\n        else:\n            dp[i][j] = get_total_number_of_sequences(dp, m, n, i, j - 1) + get_total_number_of_sequences(dp, m - 2 * i, n - 1, i, j - 1)\n\n        return dp[i][j]\n\n    return get_total_number_of_sequences(dp, m, n, m, n)\n\n\n# test", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\nfrom itertools import chain\n\n\ndef get_total_number_of_sequences(n, m):\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return m\n    # return sum(map(lambda x: get_total_number_of_sequences(n - 1, m),\n    #         filter(lambda x: x <= 2 * (n - 1) and x <= m, range(2, m + 1))))\n    # return sum([get_total_number_of_sequences(n - 1, m) for i in range(2, m + 1) if i <= 2 * (n - 1) and i <= m])\n    # return sum(map(lambda x: get_total_number_of_sequences(n - 1, m),\n    #         filter(lambda x: x <= 2 * (n - 1) and x <= m, range(1, m + 1))))\n    # return sum(map(lambda x: get_total_number_of_sequences(n - 1, m),\n    #         filter(lambda x: x <= 2 * (n - 1) and x <= m, range(1, m + 1))))\n    # return sum(map(lambda x: get_total_number_of_sequences(n - 1, m),\n    #         filter(lambda x: 1 <= 2 * (n - 1) and x <= m, range(1, m + 1))))\n    # return sum(map(lambda x: get_total_number_of_sequences(n - 1, m),\n    #         filter(lambda x: 1 <= 2 * (n - 1) and x <= m, range(1, m + 1))))\n    # return sum(map(lambda x: get_total_number_of_sequences(n - 1, m),\n    #         filter(lambda x: x <= 2 * (n - 1", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n < 2:\n        return 1\n    elif n < 4:\n        return 0\n    else:\n        return get_total_number_of_sequences(n - 1, m) + get_total_number_of_sequences(n - 2, m)\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n < 1:\n        return 0\n    if n == 1:\n        return m + 1\n    if n == 2:\n        return m + 1\n    if n == 3:\n        return m - 1\n    prev_val = 1\n    cur_val = 1\n    while (cur_val <= m):\n        prev_val = cur_val\n        cur_val = (prev_val * 2) + 1\n\n    return prev_val - 1\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    # base case\n    if n == 0:\n        return 1\n\n    # general case\n    return get_total_number_of_sequences(n - 1, m) + get_total_number_of_sequences(n - 1, min(m, n - 2 * n))\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m - 1\n    return get_total_number_of_sequences(n - 2, m) + get_total_number_of_sequences(n - 1, m)"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst,newlst):\n    lst[len(lst)-1]=newlst\n    return lst", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(alist,newlist):\n    alist[len(alist)-1] = newlist[len(newlist)-1]\n    return alist\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(alist, blist):\n    alist[-1] = blist\n    return alist\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list, replace):\n    list[len(list)-1] = replace\n    return list\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_lst):\n    lst[-1] = new_lst\n    return lst\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(l1,l2):\n    l1[-1]=l2\n    return l1\n\n# Replace the last element of the list with another list", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, lst2):\n    lst[-1] = lst2\n    return lst\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, replace_list):\n    \"\"\"\n    replace_list: list\n    lst: list\n    returns: list\n    \"\"\"\n    lst[-1] = replace_list\n    return lst\n\n#end def replace_list\n\n#begin test replace_list", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(the_list, replacement):\n    the_list[-1] = replacement\n    return the_list\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_list):\n    lst.pop()\n    lst.extend(new_list)\n    return lst\n\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(rows, columns, layers):\n    result = []\n    for row in range(rows):\n        a = []\n        for column in range(columns):\n            b = []\n            for layer in range(layers):\n                b.append('*')\n            a.append(b)\n        result.append(a)\n    return result\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(row, col, depth):\n    d=depth\n    a=[]\n    for i in range(0, row):\n        l=[]\n        for j in range(0, col):\n            l.append(['*']*col)\n        a.append(l)\n    return a\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(r,c,d):\n    arr=[]\n    for i in range(r):\n        for j in range(c):\n            for k in range(d):\n                arr.append([\"*\"])\n    return arr\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(r, c, s):\n    a = []\n    for i in range(r):\n        b = []\n        for j in range(c):\n            c = []\n            for k in range(s):\n                c.append(\"*\")\n            b.append(c)\n        a.append(b)\n    return a\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(m,n,p):\n    return [[['*' for i in range(m)] for j in range(n)] for k in range(p)]\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(x, y, z):\n    arr = []\n    for i in range(z):\n        arr.append(list(['*']*y))\n    for i in range(z):\n        for j in range(y):\n            arr[i][j] = list(['*']*x)\n    return arr\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(r, c, l):\n    res = []\n    for _ in range(l):\n        res.append([[\"*\"] * c for _ in range(r)])\n    return res\n\ndef array_3d(r, c, l):\n    return [[[\"*\"] * c for _ in range(r)] for _ in range(l)]", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\nimport unittest\n\ndef array_3d(w, h, l):\n\t\"\"\"\n\t:param w: the width of 3D array\n\t:type w: int\n\t:param h: the height of 3D array\n\t:type h: int\n\t:param l: the length of 3D array\n\t:type l: int\n\t:return: 3D array with each element as '*'\n\t:rtype: list of lists of lists of chars\n\t\"\"\"\n\tnew_array = [['*'] * l for _ in range(h)]\n\tfor i in range(len(new_array)):\n\t\tfor j in range(len(new_array[i])):\n\t\t\tnew_array[i][j] = ['*'] * w\n\treturn new_array\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(height, width, depth):\n    arr = [[['*']*width for j in range(depth)] for i in range(height)]\n    return arr\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\nfrom typing import List\n\ndef array_3d(a: int, b: int, c: int) -> List[List[List[str]]]:\n    out = []\n    for i in range(a):\n        x = []\n        for j in range(b):\n            y = []\n            for k in range(c):\n                y.append('*')\n            x.append(y)\n        out.append(x)\n    return out\n\n\ndef test_array_3d():\n    assert array_3d(6, 4, 3) == [[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    count = 0\n    for i in string:\n        if i.isalpha():\n            count += 1\n        elif i.isdigit():\n            count += 1\n        else:\n            count += 2\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(s):\n    '''\n    Counts the number of character in a given string\n    :param s:\n    :return:\n    '''\n    return len(s)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return sum(map(len, string.split(' ')))", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(st):\n    if not st:\n        return 0\n    result=0\n    for i in st:\n        if i.isalnum():\n            result+=1\n    return result\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    charac=0\n    for i in string:\n        charac+=1\n    return charac\ncount_charac(\"python programming\")==18\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(text):\n    return len(text)\n\n#Testing", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)\n\ndef test_count_charac():\n    assert count_charac(\"python programming\") == 18\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    count=0\n    for i in string:\n        count=count+1\n    return count"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(list):\n    sorted_list = []\n    for key, group in itertools.groupby(list, lambda x: x[0]):\n        group_list = list(group)\n        group_list.sort(key=lambda x: x[1])\n        sorted_list.append(group_list)\n    return sorted_list", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nfrom collections import Counter\n\ndef sort_on_occurence(input_list):\n    output_list = list()\n\n    # get the first element from each tuple\n    first_element = list(map(lambda x: x[0], input_list))\n\n    # get the count of each element in the list\n    first_element_count = Counter(first_element)\n\n    # get the key and sort the list\n    sorted_input_list = list(sorted(input_list, key=lambda x: (first_element_count[x[0]], x[1])))\n\n    # get the remaining elements from each tuple\n    second_element = list(map(lambda x: x[1], sorted_input_list))\n\n    # add the count of the first element to each tuple\n    return list(map(lambda x: (x[0], x[1], sorted_input_list.count(x), second_element[sorted_input_list.index(x)]), sorted_input_list))\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    # define dictionary to hold tuples\n    dict_tuples = {}\n\n    # loop through list and sort based on first element of tuple\n    for item in lst:\n        if item[0] not in dict_tuples:\n            dict_tuples[item[0]] = [item]\n        else:\n            dict_tuples[item[0]].append(item)\n\n    # sort tuples in the dictionary by their length in descending order\n    dict_tuples = sorted(dict_tuples.items(), key=lambda x: len(x[1]), reverse=True)\n\n    return [x[1] for x in dict_tuples]\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(data):\n    output = []\n    for elem in data:\n        elem.append(data.count(elem))\n    output.append(data[0])\n    for elem in data:\n        output.append(elem)\n    return output", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom collections import Counter\n\n\ndef sort_on_occurence(list_of_tuples):\n    \"\"\"\n    Given a list of tuples where each tuple has a frequency of the first element.\n    sort the tuples in descending order based on their frequency\n    \"\"\"\n    counter = Counter(map(lambda x: x[0], list_of_tuples))\n    sorted_tuples = sorted(list_of_tuples, key=lambda x: counter[x[0]], reverse=True)\n    return sorted_tuples\n\n\ndef test_function():\n    test_data = [\n        ([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')], [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]),\n        ([(1, 'Jake'), (2, 'Bob'), (1, 'Cara'), (1, 'Jake'), (2, 'Bob'), (1, 'Cara')],\n         [(1, 'Jake', 'Cara', 2), (1, 'Jake', 'Cara', 1), (2, 'Bob', 1), (2, 'Bob', 1)]),\n        ([(1, 'Jake'), (2, 'Bob'), (1, 'Cara'), (2, 'Bob'), (1, 'Cara')], [(1, 'Jake', 'Cara', 2), (1, 'Jake', 'Cara', 1), (2, 'Bob', 2), (2, 'Bob', 1)]),\n        ([(1, 'Jake'), (1, 'Bob'), (1, 'Cara'), (1, 'Jake'), (1, 'Bob'), (1, 'Cara')],\n         [(1, 'Jake', 'Cara', 3), (1, 'Bob', 'Cara', 2), (1, 'Bob', 'Cara', 1)]),\n    ]\n    for test in test_data:\n        assert sort_on_occurence", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nimport itertools\nfrom collections import defaultdict\n\nfrom utils import print_test\n\n\ndef sort_on_occurence(alist):\n    s = defaultdict(list)\n    for x, y in alist:\n        s[x].append(y)\n    d = dict(s)\n    d = dict(sorted(d.items()))\n    return [[x, *y] for x, y in itertools.chain.from_iterable(d.items())]\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(l):\n    l = sorted(l, key=lambda tup: (tup[0], tup[1]))\n    return l\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(a_list):\n    \"\"\"\n    :param a_list:\n    :return:\n    \"\"\"\n    group = {}\n    for e in a_list:\n        if e[0] not in group:\n            group[e[0]] = [e[1]]\n        else:\n            group[e[0]].append(e[1])\n    return [e for e in group.values()]\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\nfrom operator import itemgetter\n\ndef sort_on_occurence(items):\n    sorted_items = sorted(items, key=itemgetter(0))\n    new_items = []\n    seen_keys = []\n    for _, key, count, _ in sorted_items:\n        if key not in seen_keys:\n            seen_keys.append(key)\n            new_items.append((count, key))\n    new_items.sort()\n    return [(count, key) for count, key in new_items]\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom collections import Counter\n\ndef sort_on_occurence(l):\n    c = Counter(x[0] for x in l)\n    return [l[i] for i in c.most_common()]\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    if n < 0:\n        return 'Negative numbers can\\'t have a next perfect square'\n    elif n <= 1:\n        return n\n    else:\n        square = 1\n        while square <= n:\n            square = square + (n ** 0.5)\n            if square.is_integer():\n                return square\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(x):\n    num = int(math.sqrt(x))\n    return num * num\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    i = 0\n    while(n != (i * i)):\n        i += 1\n    return (i * i)\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    sq_root = int(n**(1/2))\n    if sq_root*(sq_root+1) == n:\n        return sq_root*(sq_root+1)\n    elif sq_root*(sq_root+1)+1 == n:\n        return sq_root*(sq_root+1)+1\n    elif sq_root*(sq_root+1)-1 == n:\n        return sq_root*(sq_root+1)-1\n    else:\n        return None\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef is_perfect_square(n):\n    r = int(n**(0.5))\n    return n == r**2\n\ndef next_Perfect_Square(n):\n    n += 1\n    while not is_perfect_square(n):\n        n += 1\n    return n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(number):\n    number = abs(number)\n    n = int(number ** (1/2))\n    while n * n < number:\n        n += 1\n    return n ** 2\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n#Solution\ndef next_Perfect_Square(num):\n    i=1\n    if num < 1:\n        return None\n    while i*i < num:\n        i+=1\n    return i*i\n\n#Test ", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    # if num == 1:\n    #     return 2\n    sq_root = int(math.sqrt(num)) + 1\n    while sq_root ** 2 != num:\n        sq_root += 1\n    return sq_root\n\ndef next_Perfect_Square_Iterative(num):\n    sq_root = int(math.sqrt(num)) + 1\n    while sq_root * sq_root != num:\n        sq_root += 1\n    return sq_root\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(number):\n    i = number\n    while True:\n        if i**2 == number:\n            break\n        i += 1\n    return i\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(num):\n    square = int(num ** 0.5)\n    if square ** 2 == num:\n        return square + 1\n    else:\n        return square ** 2\n\n\ndef test_next_Perfect_Square():\n    assert next_Perfect_Square(35) == 36\n\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    \"\"\"\n    Time Complexity - O(n)\n    Space Complexity - O(n)\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        for i in range(1, n):\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n\n        return max_so_far", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\nfrom typing import List\n\n\ndef max_sum(arr: List[int], n: int) -> int:\n    if n == 1:\n        return arr[0]\n    else:\n        max_1 = 0\n        max_2 = 0\n        for i in range(n):\n            if i == 0:\n                max_1 = arr[i]\n                max_2 = 0\n            elif i == 1:\n                max_1 = max(max_1, arr[i])\n                max_2 = arr[i]\n            else:\n                max_1 = max(max_1, max_2 + arr[i])\n                max_2 = max(max_2, arr[i])\n        return max_1\n\n\ndef max_sum2(arr: List[int], n: int) -> int:\n    dp = [0 for _ in range(n)]\n    res = -1000000\n    for i in range(n):\n        dp[i] = arr[i]\n        if i == 0:\n            continue\n        else:\n            dp[i] = max(dp[i], dp[i - 1] + arr[i])\n        if res < dp[i]:\n            res = dp[i]\n    return res\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, size):\n    max_s = arr[0]\n    # iterating from the second element to the end of the array\n    for i in range(1, size):\n        if arr[i] > arr[i-1]:\n            max_s = max(max_s + arr[i], arr[i])\n        else:\n            max_s = max(max_s, arr[i])\n    return max_s\n\ndef max_sum_non_max_subarray(arr, size):\n    current_max = arr[0]\n    max_sum = arr[0]\n    max_index = 0\n\n    for i in range(1, size):\n        if arr[i] > current_max:\n            current_max = arr[i]\n            max_sum = arr[i]\n            max_index = i\n        elif arr[i] == current_max:\n            max_sum = max(max_sum, max_index + arr[i])\n\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\ndef max_sum(array: List[int], len_of_sub_array: int) -> int:\n    \"\"\"\n    We are using dp array to store the maximum sum of bi-tonic sub-sequence till a particular index in the array.\n    We are taking the maximum of the max sum of previous two elements and the bi-tonic sub-sequence sum\n    \"\"\"\n    dp = [0 for i in range(len_of_sub_array)]\n    max_sub_sequence = -sys.maxsize\n    for i in range(len_of_sub_array):\n        for j in range(i):\n            if array[j] < array[i]:\n                dp[i] = max(dp[i], dp[j] + array[i])\n        max_sub_sequence = max(max_sub_sequence, dp[i])\n    return max_sub_sequence\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, k):\n    if not arr or len(arr) == 0 or k < 2:\n        return 0\n    for i in range(1, k):\n        if arr[i-1] > arr[i]:\n            arr[i] = arr[i-1] + arr[i]\n    max_sum = arr[0]\n    for i in range(k, len(arr)):\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    from collections import defaultdict\n    dp = defaultdict(int)\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(arr[i], dp[i-1]) + arr[i]\n    return dp[n-1]\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, k):\n    \"\"\"\n    Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n    :param arr:\n    :param k:\n    :return:\n    \"\"\"\n    # time complexity O(n^2)\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return k*arr[0]\n\n    arr.sort()\n\n    ret = 0\n    for i in range(len(arr)):\n        left = 0\n        right = i+1\n        sum = 0\n        while right < len(arr) and left <= right:\n            if arr[left] <= arr[right]:\n                sum += k*arr[left]\n                left += 1\n            else:\n                sum += k*arr[right]\n                right += 1\n            ret = max(ret, sum)\n\n    return ret\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1]\n        if arr[i-1] > arr[i]:\n            dp[i] += arr[i]\n        else:\n            dp[i] += arr[i-1]\n    for i in range(n-1, -1, -1):\n        if arr[i] > arr[i+1]:\n            dp[i] += dp[i+1]\n        else:\n            dp[i] += dp[i+1]\n\n    return max(dp)\n\n\ndef main():\n    print(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9))\n\nmain()", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, size):\n    if size == 1:\n        return arr[0]\n    elif size == 2:\n        if arr[0] > arr[1]:\n            return arr[0] + max_sum(arr[1:], size - 1)\n        else:\n            return arr[1] + max_sum(arr[0:], size - 1)\n    else:\n        if arr[0] > arr[1]:\n            return max(arr[0], arr[1]) + max_sum(arr[2:], size - 1)\n        elif arr[0] == arr[1]:\n            return arr[0] + max_sum(arr[2:], size - 1)\n        else:\n            return max_sum(arr[1:], size)\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum_of_bi_tonic_subsequence(array, k):\n    cache = {}\n    cache[0] = (0, -1)\n    max_sum = 0\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            max_sum = max(max_sum, array[i] + cache[i - 1][0])\n        else:\n            max_sum = max(max_sum, array[i])\n\n        # adding this for bi-tonic subsequence\n        if len(array) - i <= k and (array[i] - array[i - k]) in cache:\n            max_sum = max(max_sum, array[i] + cache[i - k][0])\n\n        cache[i] = (max_sum, i - k)\n\n    return max_sum\n\ndef max_sum_of_bi_tonic_subsequence_memoization(array, k):\n    cache = {}\n    cache[0] = (0, -1)\n    max_sum = 0\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            max_sum = max(max_sum, array[i] + cache[i - 1][0])\n        else:\n            max_sum = max(max_sum, array[i])\n\n        # adding this for bi-tonic subsequence\n        if len(array) - i <= k and (array[i] - array[i - k]) in cache:\n            max_sum = max(max_sum, array[i] + cache[i - k][0])\n\n        if len(cache) == 100000:\n            cache.clear()\n\n        cache[array[i]] = (max_sum, i - k)\n\n    return max_sum\n\ndef main():\n    array = [1, 15, 51, 45, 33"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(x):\n    guess = x/2\n    while abs(guess**2-x)>0.0000000001:\n        guess=(guess+x/guess)/2\n    return guess\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nfrom math import log, ceil, sqrt\n\ndef babylonian_squareroot(x):\n    a = 1\n    b = 2*x\n    while abs(a-b)>0.0001:\n        a = b\n        b = (a+x/a)/2\n    return b\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(n):\n    \"\"\"\n    This function computes the square root of a given number, using the babylonian method.\n    :param n: A number which we want to find its square root.\n    :return: Square root of n\n    \"\"\"\n    a = n // 2\n    while True:\n        if a * a == n:\n            return a\n        elif a * a < n:\n            a = (a + n // a) / 2\n        elif a * a > n:\n            a = (a + n // a) / 2\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    res = x\n    for i in range(0, 10):\n        res = res*(500 + i) / (500 + 2*i)\n    return res\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\nimport math\n\n\ndef babylonian_squareroot(n):\n    # TODO: Fix this function\n    return 0\n\n\ndef test_babylonian_squareroot():\n    assert babylonian_squareroot(10) == 3.162277660168379", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport math\n\ndef babylonian_squareroot(x):\n    y = x\n    x = (x + y) / 2\n    while abs(x - y) > 0.00000001:\n        y = x\n        x = (x + y) / 2\n    return x\n\n#assert babylonian_squareroot(10)==3.162277660168379\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nfrom utils import *\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    >>> babylonian_squareroot(10)\n    3.162277660168379\n    \"\"\"\n    num = number\n    low = 1\n    high = num\n    guess = (low + high) // 2\n    while abs(guess**2 - num) >= 0.0001:\n        low = guess\n        guess = (low + high) // 2\n    return guess\n\ndef test():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\n#def babylonian_squareroot(x):\ndef babylonian_squareroot(x):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    epsilon = 1e-10\n    a = 1.0\n    while True:\n        a = (x/a + a)/2\n        if abs(x-a*a) < epsilon:\n            return a\n\n#print(babylonian_squareroot(10))\n#assert babylonian_squareroot(10)==3.162277660168379\n\n# +", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\n#Babylonian Method\ndef babylonian_squareroot(x):\n\tprecision = 0.000001\n\ts = x / 2\n\twhile abs(x-s**2)>precision:\n\t\tx = s\n\t\ts = (x+x/s)/2\n\treturn s\n\n#Test", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(num):\n    root = 1.0\n    epsilon = 10**-4\n    while abs(root**2 - num) > epsilon:\n        root = (root + num/root)/2\n    return root\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    string = string.lower()\n    string = ''.join(set(string))\n    max_len = 0\n    longest_palindromic_subsequence = \"\"\n\n    for i in range(len(string)):\n        palindrome = checkPalindrome(string, i, i)\n        if (len(palindrome) > max_len):\n            max_len = len(palindrome)\n            longest_palindromic_subsequence = palindrome\n\n        # Checking for palindrome with k is between i and len(string)\n        for j in range(i, len(string)):\n            palindrome = checkPalindrome(string, i, j)\n            if (len(palindrome) > max_len):\n                max_len = len(palindrome)\n                longest_palindromic_subsequence = palindrome\n\n    return max_len\n\ndef checkPalindrome(string, i, j):\n    while (i >= 0 and j < len(string)):\n        if (string[i] != string[j]):\n            break\n\n        i -= 1\n        j += 1\n\n    return string[i+1:j]", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    result = [[0 for x in range(len(s))] for x in range(len(s))]\n    longest = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if i == j:\n                result[i][j] = 1\n            elif s[i] == s[j]:\n                result[i][j] = result[i+1][j-1] + 2\n                if result[i][j] > longest:\n                    longest = result[i][j]\n            else:\n                result[i][j] = max(result[i+1][j], result[i][j-1])\n    return longest\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    result = 0\n    for i in range(len(string)):\n        i_minus_one = i - 1\n        j_plus_one = i + 1\n        while i_minus_one >= 0 and j_plus_one < len(string) and string[i] == string[j_plus_one]:\n            result = max(result, j_plus_one - i_minus_one)\n            i_minus_one -= 1\n            j_plus_one += 1\n    return result\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(x):\n    \"\"\"\n    :param x: a string\n    :return: an integer\n    \"\"\"\n    l, r = 0, 0\n    lens = len(x)\n    if lens == 0:\n        return 0\n    elif lens == 1:\n        return 1\n    elif lens == 2:\n        if x[0] == x[1]:\n            return 2\n        else:\n            return 1\n    else:\n        while r < lens:\n            if x[r] == x[r-1]:\n                l += 1\n            r += 1\n        return l + 1\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(str):\n\tlength = len(str)\n\tlps = [[0 for x in range(length+1)] for x in range(length+1)]\n\tmax_len = 0\n\tmax_len_index = 0\n\tfor i in range(0, length):\n\t\tlps[i][0] = 0\n\t\tmax_len_index = 0\n\t\tfor j in range(i, length):\n\t\t\tif str[i] == str[j]:\n\t\t\t\tif i == j:\n\t\t\t\t\tlps[i][j] = 1\n\t\t\t\t\tmax_len = max(max_len, lps[i][j])\n\t\t\t\t\tmax_len_index = j\n\t\t\t\telse:\n\t\t\t\t\tlps[i][j] = lps[i+1][j-1] + 1\n\t\t\t\t\tif lps[i][j] > max_len:\n\t\t\t\t\t\tmax_len = lps[i][j]\n\t\t\t\t\t\tmax_len_index = j\n\t\t\telse:\n\t\t\t\tlps[i][j] = 0\n\treturn max_len\n\ndef lps2(str):\n\tlength = len(str)\n\tlps = [0 for x in range(length)]\n\tmax_len = 0\n\tmax_len_index = 0\n\tfor i in range(length-1):\n\t\tlps[i] = 0\n\t\tmax_len_index = i\n\t\tfor j in range(i+1, length):\n\t\t\tif str[i] == str[j]:\n\t\t\t\tlps[j] = lps[i] + 1\n\t\t\t\tif lps[j] > max_len:\n\t\t\t\t\tmax_len = lps[j]\n\t\t\t\t\tmax_len_index = j\n\t\t\telse:\n\t\t\t\tlps[j] = 0\n\treturn max_len\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    if not s: return 0\n    l, c, n = [0]*(len(s)), [0]*(len(s)), len(s)\n    l[0], l[1], l[2] = 0, 1, 2\n    for i in range(3, n):\n        c[i] = 1 if l[i-1] < i and s[i-l[i-1]-1:i+1] == s[i-l[i-1]-1:i+1][::-1] else 0\n        l[i] = max(c[i], l[i-1], l[i-2])\n    return l[n-1]\n\n# print(lps(\"TENS FOR TENS\"))\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    # Length of the palindromic subsequence\n    lps_len = 1\n    # Length of the longest subsequence encountered so far\n    max_len = 0\n    # Table to store the length of the palindromic subsequence\n    table = [0]*len(s)\n    # Index for table\n    i = 1\n    # Loop through the given string\n    while(i < len(s)):\n        # If current character and previous character are same\n        if(s[i] == s[i-1]):\n            # Then table[i] = 1 + lps[i-1]\n            table[i] = 1 + table[i-1]\n        # If current character is same as next character\n        elif(s[i] == s[i+1]):\n            # Then table[i] = 1 + lps[i+1]\n            table[i] = 1 + table[i+1]\n        else:\n            # Otherwise table[i] = 1\n            table[i] = 1\n\n        # If table[i] is greater than max_len\n        if table[i] > max_len:\n            # max_len is updated to table[i]\n            max_len = table[i]\n        \n        # If table[i] is greater than lps_len\n        if table[i] > lps_len:\n            # lps_len is updated to table[i]\n            lps_len = table[i]\n            \n        # Move ahead by 1\n        i += 1\n    \n    return lps_len\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef longest_palindromic_subsequence(string):\n  table = [ [ 0 for i in range(len(string)) ] for j in range(len(string)) ]\n  longest = 0\n  for i in range(len(string)):\n    for j in range(i, len(string)):\n      if i == j:\n        table[i][j] = 1\n        longest = 1\n      elif string[i] == string[j]:\n        table[i][j] = table[i+1][j-1] + 2\n        longest = max(longest, table[i][j])\n      else:\n        table[i][j] = max(table[i+1][j], table[i][j-1])\n  return longest\n\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    longest = 0\n    for i in range(len(string)):\n        helper = {}\n        lps_helper(string, i, helper, longest)\n\n    return longest\n\ndef lps_helper(string, i, helper, longest):\n    if i < 0:\n        return\n    if i in helper:\n        return helper[i]\n\n    j = i - 1\n    k = i + 1\n    while j >= 0 and k < len(string):\n        if string[j] == string[k]:\n            if longest < j - i + 1:\n                longest = j - i + 1\n            helper[i] = j - i + 1\n            return lps_helper(string, j-1, helper, longest)\n        if j >= 0 and k < len(string) and string[j] != string[k]:\n            if helper.get(j) and helper.get(k):\n                if j - i + 1 + helper[j] > k - i + 1 + helper[k]:\n                    helper[i] = j - i + 1\n                    return lps_helper(string, j-1, helper, longest)\n                else:\n                    helper[i] = k - i + 1\n                    return lps_helper(string, k+1, helper, longest)\n            if helper.get(j) and not helper.get(k):\n                helper[i] = j - i + 1\n                return lps_helper(string, j-1, helper, longest)\n            if not helper.get(j) and helper.get(k):\n                helper[i] = k - i + 1\n                return lps_helper(string, k+1, helper, longest)\n        j -= 1\n        k += 1\n    if j == i:\n        helper[i] = 0\n        return 0\n    if j == i-1:\n        helper[i] = 1\n        return 1\n    helper[i] = 0\n    return 0", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    \"\"\"\n    :param string: string for which the longest palindromic subsequence is to be found\n    :type string: str\n    :return: length of longest palindromic subsequence in the given string\n    :rtype: int\n    \"\"\"\n    n = len(string)\n    lps = [0]*n\n    i,j = 0,0\n\n    while i<n:\n        if j>=n or string[i] == string[j]:\n            lps[i] = lps[j]+1\n            i+=1\n            j+=1\n        else:\n            if lps[j]>0:\n                j = lps[j]\n            else:\n                lps[i] = 0\n                i+=1\n    return lps[-1]\n\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return 1.0/(1.0*n + 2.0) + 1.0/(2.0*n + 3.0) + 1.0/(3.0*n + 4.0) + 1.0/(4.0*n + 5.0) + 1.0/(5.0*n + 6.0)\n\ndef test():\n    assert harmonic_sum(7) == 2.5928571428571425\n\ntest()", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    # TODO: Your code here\n    return 0\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return sum(1.0 / i for i in range(1, n+1))\n\n#test", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return sum(1/x for x in range(1, n))\n\ndef harmonic_sum_recursive(n):\n    \"\"\"\n    Recursive function to calculate harmonic sum\n\n    >>> harmonic_sum_recursive(7)\n    2.5928571428571425\n    \"\"\"\n    if n == 1:\n        return 0\n    return harmonic_sum_recursive(n-1) + 1/n\n\ndef test_harmonic_sum():\n    assert harmonic_sum(7) == 2.5928571428571425\n    assert harmonic_sum_recursive(7) == 2.5928571428571425", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1,n+1))\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"Returns the harmonic sum of n-1.\"\"\"\n    return sum(1/float(i) for i in xrange(1, n))", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"\n    :param n: int, positive integer\n    :return: float\n    \"\"\"\n    if n <= 1:\n        return 0\n    else:\n        return 1 + (harmonic_sum(n-1) / n)\n\n#assert harmonic_sum(7) == 2.5928571428571425", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    # Write your code here\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\nfrom functools import reduce\ndef intersection_array(A,B):\n    return reduce((lambda x, y: x if x not in y else x), A, list(set(A).intersection(B)))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1,arr2):\n    result=[]\n    for num in arr1:\n        if num in arr2:\n            result.append(num)\n    return result\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a,b):\n    return list(set(a).intersection(b))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a, b):\n    return list(filter(lambda x: x in a and x in b, a))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(array1,array2):\n    return list(set(array1).intersection(array2))", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a, b):\n    a_set = set(a)\n    b_set = set(b)\n    return [item for item in b_set if item in a_set]\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(a,b):\n    result=[]\n    for i in a:\n        if i in b:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    arr_intersection = list(filter(lambda x: x in arr2, arr1))\n    return arr_intersection\n\n#Test Case 1\narr1 = [1, 2, 3, 5, 7, 8, 9, 10]\narr2 = [1, 2, 4, 8, 9]"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(L,X):\n    count = 0\n    for i in L:\n        if i == X:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(input_tuple, X):\n    count = 0\n    for element in input_tuple:\n        if element == X:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(x, x_count):\n    \"\"\"\n    Parameters\n    ----------\n    x : tuple\n    x_count : int\n\n    Returns\n    -------\n    int\n    \"\"\"\n    x_count = 0\n    for i in range(len(x)):\n        if x[i] == x_count:\n            x_count += 1\n    return x_count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tuple1, X):\n    \"\"\"Count number of occurences of element X in tuple1\"\"\"\n    count = 0\n    for element in tuple1:\n        if element == X:\n            count += 1\n    return count\n\n#assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n#assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 3\n#assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 2\n#assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),15) == 1\n#assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),2) == 1\n#assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),5) == 1\n#assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 3\n#assert count_X((10, 8, 5, 2, 10, 15,", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple_x, x):\n    count = 0\n    for y in tuple_x:\n        if y == x:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(arr, X):\n    return sum(x == X for x in arr)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    \"\"\"\n    Write a python function to count the occcurences of an element in a tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tuple, value):\n    count = 0\n    for i in tuple:\n        if i == value:\n            count += 1\n    return count\n\n# +", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(list, X):\n    count = 0\n    for num in list:\n        if num == X:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(arr, X):\n    count = 0\n    for i in arr:\n        if i == X:\n            count += 1\n    return count\n\n# Test case"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list,el):\n    return [el] + list + [el]\n\ndef test():\n    # test insert_element\n    list = ['Red', 'Green', 'Black']\n    assert insert_element(list, 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert insert_element(list, 'h') == ['h', 'c', 'h', 'Green', 'h', 'Black']\n    assert insert_element(list, 'r') == ['r', 'h', 'r', 'Green', 'r', 'Black']\n    assert insert_element(list, 'b') == ['b', 'r', 'b', 'Green', 'b', 'Black']\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(array, element):\n    for i in range(len(array)):\n        array.insert(i, element)\n    return array\n\n\n# +\ndef insert_element(array, element):\n    return [element]+array\n\ndef insert_element(array, element):\n    return [element]+array\n\ndef insert_element(array, element):\n    return [element]+array\n\n\n# +\n# A function to reverse a string \n# assert reverse('abcd') == 'dcba'\n\ndef reverse(string):\n    new_string = []\n    for i in range(len(string)):\n        new_string.insert(0, string[i])\n    return new_string\n\n# A function to reverse a string \n# assert reverse('abcd') == 'dcba'\n\ndef reverse(string):\n    new_string = ''\n    for i in range(len(string)):\n        new_string = string[i]+new_string\n    return new_string\n\n# A function to reverse a string \n# assert reverse('abcd') == 'dcba'\n\ndef reverse(string):\n    new_string = ''\n    for i in range(len(string)):\n        new_string = new_string+string[i]\n    return new_string\n\n\n# +", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(arr,element):\n    if arr:\n        return [element] + arr\n    return [element]\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list, element):\n  new_list = []\n  for item in list:\n    new_list.append(element)\n    new_list.append(item)\n  return new_list\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, el):\n    \"\"\"\n    :param lst: list of items\n    :param el: element that will be inserted before each item\n    :return:\n    \"\"\"\n    for i in range(len(lst)):\n        if i == 0:\n            lst.insert(0, el)\n        else:\n            lst.insert(i, el)\n    return lst\n\n\n# +\nlst = ['Red', 'Green', 'Black']\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, c):\n    for i in range(len(lst)):\n        lst.insert(i, c)\n    return lst", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, x):\n    lst_new = []\n    for i in lst:\n        lst_new.append(x)\n        lst_new.append(i)\n    return lst_new\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(aList,element):\n    bList = []\n    for e in aList:\n        bList.append(element)\n        bList.append(e)\n    return bList\n\naList = [1, 2, 3, 4]", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(x, element):\n    return [element] + x\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(arr, el):\n    for i in range(len(arr)):\n        arr.insert(i,el)\n    return arr\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(c):\n    return c.real, c.imag\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(cplx):\n    r = math.sqrt(cplx.real**2 + cplx.imag**2)\n    theta = math.atan2(cplx.imag, cplx.real)\n    return r, theta\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nfrom math import hypot, atan2, degrees\n\ndef convert(x):\n    \"\"\"\n    Args:\n        x: complex number\n\n    Returns:\n        the polar coordinates of x\n    \"\"\"\n    # TODO: implement your function\n    return (hypot(x.real, x.imag), degrees(atan2(x.imag, x.real)))\n\n# test cases", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(complex_num):\n    import math\n    \"\"\"\n    convert(complex_num) -> (angle, magnitude)\n    Converts a complex number to polar coordinates\n\n    >>> convert(1) == (1.0, 0.0)\n    True\n    >>> convert(1+2j) == (1.4142135623730951, 2.23606797749979)\n    True\n    >>> convert(-1j) == (-1.5707963267948966, 1.0)\n    True\n    >>> convert(0) == (0.0, 0.0)\n    True\n    \"\"\"\n    if type(complex_num) != complex:\n        raise TypeError(\"convert() takes complex numbers as input\")\n    return (math.atan2(complex_num.imag,complex_num.real), abs(complex_num))\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    return np.sqrt(z.real**2+z.imag**2), np.arctan2(z.imag,z.real)", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(c):\n    import math\n    r = math.sqrt(c.real**2 + c.imag**2)\n    theta = math.atan2(c.imag, c.real)\n    return (r, theta)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(complexNumber):\n    r = complexNumber.real\n    i = complexNumber.imag\n    result = (r**2 + i**2)**(0.5), math.atan(i/r)\n    return result\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(complex_num):\n    pass\n\n#assert convert(1+2j) == (3.0, 1.2990381362640564)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nfrom typing import Tuple\nfrom cmath import polar\n\n\ndef convert(z: complex) -> Tuple[float, float]:\n    \"\"\"\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(1 + 2j)\n    (3.1622776601683795, 1.5707963267948966)\n    >>> convert(complex(-1, 1))\n    (1.0, 1.5707963267948966)\n    >>> convert(complex(1, -1))\n    (1.0, -1.5707963267948966)\n    >>> convert(0)\n    (0.0, 0.0)\n    \"\"\"\n    return polar(z)", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(complex_number):\n    return np.absolute(complex_number), np.angle(complex_number)\n\n#Below is an example usage:\n\nimport numpy as np\n\ndef convert(complex_number):\n    return np.absolute(complex_number), np.angle(complex_number)\n\n# Enter the complex number\ncomplex_number = 1 + 1j\n\n# Calling the function"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\nfrom collections import Counter\n\n\ndef count_integer(nums):\n    \"\"\"\n    :type nums: List[Any]\n    :rtype: int\n    \"\"\"\n    counter = Counter(nums)\n    return sum(1 for n in counter.values() if isinstance(n, int))\n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list_):\n    counter = 0\n    for element in list_:\n        if isinstance(element, int):\n            counter += 1\n    return counter\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list):\n    count = 0\n    for i in list:\n        if isinstance(i, int):\n            count = count+1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    count=0\n    for i in lst:\n        if type(i)==int:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    count=0\n    for x in lst:\n        if type(x)==int:\n            count+=1\n    return count\n\ndef test_function():\n    test_case = [1,2,'abc',1.2]\n    answer = 2\n    assert count_integer(test_case) == answer\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\n#My Code\ndef count_integer(nums):\n    count=0\n    for i in nums:\n        if type(i) is int:\n            count=count+1\n    return count\n\n#O(n) time complexity and O(1) space complexity\n\n# Test cases", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\nimport pytest\n\n\ndef count_integer(arr):\n    \"\"\"\n    :param arr: a given list\n    :return: total number of integers in the list\n    \"\"\"\n    integer_count = 0\n    for i in arr:\n        if type(i) == int:\n            integer_count += 1\n\n    return integer_count\n\n\n@pytest.mark.parametrize(\"arr, expected\", [([1, 2, \"abc\", 1.2], 2)])\ndef test(arr, expected):\n    assert count_integer(arr) == expected", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(ls):\n    count = 0\n    for i in ls:\n        if isinstance(i, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(numbers):\n    \"\"\"\n    :param numbers: list\n    :return: int\n    \"\"\"\n    count = 0\n    for num in numbers:\n        if type(num) is int:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(l):\n    count = 0\n    for i in l:\n        if type(i)==int:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    return [word for word in s.split() if word[0] in ('a', 'e')]\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n\twords = []\n\tfor i in range(0, len(string)):\n\t\tif string[i] == \"a\" or string[i] == \"e\":\n\t\t\tword = \"\"\n\t\t\twhile i < len(string) and string[i] != \" \" and string[i] != \" \":\n\t\t\t\tword += string[i]\n\t\t\t\ti += 1\n\t\t\twords.append(word)\n\treturn words", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    return [word for word in string.split() if word[0] in 'ae']\n\n\n# -\n\nwords_ae(\"python programe\")\n\n# +", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(sentence):\n    return [word for word in sentence.split() if word[0] == 'a' or word[0] == 'e']\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n    words = []\n    for word in s.split():\n        if word[0] == 'a' or word[0] == 'e':\n            words.append(word)\n    return words\n\ndef test_words_ae():\n    assert words_ae(\"python programe\")==['ame']\n\ndef test_words_ae2():\n    assert words_ae(\"python prograame\")==[]\n\ndef test_words_ae3():\n    assert words_ae(\"Python prograame\")==['ame']\n\ndef test_words_ae4():\n    assert words_ae(\"p a y t h o n\")==[]", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    l=s.split()\n    new=[]\n    for x in l:\n        if x[0] in [\"a\",\"e\"]:\n            new.append(x)\n    return new\n\n# assert words_ae(\"python programe\")==['ame']\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    return [word for word in string.split() if word[0] in ['a','e']]\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    words = []\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e':\n            words.append(s[i:i+1])\n    return words\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    return [word for word in string.split() if word[0] in 'ae']\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(text):\n    \"\"\"Return a list of words starting with a or e in text\"\"\"\n    return [word for word in text.split() if word[0] in ['a', 'e']]\n\n\n# -\n\nwords_ae(\"python programe\")\n\n\n# ### 6. What is the difference between list comprehension and map?\n#\n#\n\n# +\ndef add(a,b):\n    return a+b\n\nnumbers = [1,2,3,4,5,6]\n\nmap(add, numbers, numbers)\n# -\n\n[add(a,b) for a,b in zip(numbers,numbers)]\n\n\n# ### 7. Write a function that takes a string of length n, and returns a string with the characters in reverse order\n#\n# assert reverse_string(\"hello\")==\"olleh\"\n\ndef reverse_string(text):\n    \"\"\"Return a string with the characters in reverse order\"\"\"\n    return text[::-1]\n\n\nreverse_string(\"hello\")\n\n\n# ### 8. Write a function that takes an integer n and returns a string containing 1 repeated n times\n#\n# assert duplicate_string(3)=='111'\n\ndef duplicate_string(n):\n    \"\"\"Return a string with the characters in reverse order\"\"\"\n    return \"1\"*n\n\n\nduplicate_string(3)\n\n\n# ### 9. Write a function that takes a string, and returns a string with the vowels reversed\n#\n# assert reverse_vowels(\"Apple\")==\"pAelpp\"\n\ndef reverse_vowels(text):\n    \"\"\"Return a string with the vowels reversed\"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(vowels[::-1] if c in vowels else c for c in text)\n\n\nreverse_vowels(\"Apple\")\n\n\n# ### 10. Write a function that takes a string, and returns a string with the vowels reversed and the consonants in reverse order\n#\n# assert reverse_consonants(\"hi\")==\"ih\"\n\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(colors,num):\n    comb = combinations_with_replacement(colors,num)\n    print(list(comb))\n    return comb\n\ndef main():\n    print(combinations_colors([\"Red\",\"Green\",\"Blue\"],1))\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colours,n):\n\tl = len(colours)\n\tif(n > l):\n\t\treturn []\n\tres = [[]]\n\tfor i in range(n):\n\t\tif(i == 0):\n\t\t\ttemp = colours\n\t\telse:\n\t\t\ttemp = []\n\t\t\tfor j in range(l):\n\t\t\t\ttemp += res[i-1]\n\t\t\t\ttemp += colours\n\t\tres = temp\n\treturn res\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors( colors, n ):\n    colors = list( colors )\n    combination = []\n    for i in range(0,len(colors)):\n        c = colors.pop(0)\n        for j in range(0,n):\n            combination.append( ( c, ) )\n    return combination\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors( colors, num ):\n    # Write your code here\n    \n    res = []\n    if num <= 0:\n        return res\n    if num == 1:\n        return colors\n\n    for i in range(0,len(colors)):\n        rest = colors[:i]+colors[i+1:]\n        cur = colors[i]\n        if cur in res:\n            res = res + combinations_colors(rest,num-1)\n        else:\n            res = res + [(cur,)] + combinations_colors(rest,num-1)\n\n    return res\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    return list(itertools.combinations(colors, n))\n\ncolors = [\"Red\",\"Green\",\"Blue\"]", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colours, n):\n    result=[]\n    if n==0:\n        result.append(())\n    for i in range(len(colours)):\n        for c in combinations_colors(colours, n-1):\n            result.append(c+(colours[i],))\n    return result\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(col,n):\n    return list(itertools.combinations_with_replacement(col,n))\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colours,n):\n\n    if(n==0):\n        return []\n    else:\n        first=list(colours)[0]\n        second=list(colours)[1]\n        third=list(colours)[2]\n        return [first,second,third] + combinations_colors(colours[:-3],n-1)\n\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors( colours, k ):\n    result = []\n    if k>len(colours):\n        return result\n    if k==len(colours):\n        result.append( tuple(colours) )\n        return result\n    \n    # RECURSIVE CASE\n    result.extend( combinations_colors( colours,k+1 ) )\n    for i,c in enumerate(colours):\n        # RECURSIVE CASE\n        result.append( (c,) + combinations_colors( colours[:i]+colours[i+1:],k) )\n    return result\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nfrom itertools import product\ndef combinations_colors(colors,N):\n    return list(product(colors,repeat=N))\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2,n+1):\n        if isPrime(i):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(num):\n    num_prime = 0\n    for i in range(2,num+1):\n        if num % i == 0:\n            num_prime += 1\n    return num_prime\n\n# test", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(n+1):\n        if is_Prime(i):\n            count += 1\n    return count\n\ndef is_Prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\nfrom math import sqrt\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2,n):\n        for j in range(2,int(sqrt(i))+1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(num):\n    prime_numbers = []\n    for i in range(num + 1):\n        prime_numbers.append(isPrime(i))\n    return sum(prime_numbers)\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    n_primes = 0\n    for i in range(2,n):\n        flag = True\n        for j in range(2,i):\n            if i%j == 0:\n                flag = False\n                break\n        if flag:\n            n_primes += 1\n    return n_primes", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(n):\n        isprime = isPrime(i)\n        if isprime:\n            count += 1\n    return count\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                count = count + 1\n    return count\n\n\ndef count_Primes_nums_improved(n):\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n+1):\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                count = count + 1\n    return count", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\nimport math\nfrom typing import List, Set, Tuple\n\ndef count_Primes_nums(n: int) -> int:\n    prime_nums: Set[int] = set()\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if i not in prime_nums and n % i == 0:\n            prime_nums.add(i)\n            prime_nums.add(n // i)\n\n    return len(prime_nums)\n\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# +\nimport math\n\ndef count_Primes_nums(n):\n    if n == 1:\n        return 0\n    count = 0\n    for i in range(2, n+1):\n        if i > math.sqrt(n):\n            count += 1\n            continue\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n\n\n# -\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    a,b=b,a\n    return a,b\n\ndef swap_numbers(a,b):\n    temp=a\n    a=b\n    b=temp\n    return a,b\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1, num2):\n    \"\"\"\n    Swap two numbers\n    \"\"\"\n    temp = num1\n    num1 = num2\n    num2 = temp\n    return num1,num2\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(first, second):\n    return (second, first)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1,num2):\n    num1,num2=int(num1),int(num2)\n    return num2,num1\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a, b\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    temp=x\n    x=y\n    y=temp\n    return (x,y)", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    a,b=b,a\n    return a,b\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return b,a\nswap_numbers(10,20)\n\ndef swap_numbers2(a,b):\n    a,b = b,a\n    return a,b\nswap_numbers2(10,20)\n\ndef swap_numbers3(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a,b\nswap_numbers3(10,20)\n\ndef swap_numbers4(a,b):\n    a,b = b,a\n    return a,b\nswap_numbers4(10,20)\n\ndef swap_numbers5(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a,b\nswap_numbers5(10,20)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x,y):\n    return y,x\n\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return b,a\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(ls):\n    return len(list(filter(lambda x: x % 2 != 0, ls)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(num):\n    return sum(1 for i in num if i % 2 == 1)\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(numbers):\n    \"\"\"\n    count the odd numbers\n    \"\"\"\n    return len([n for n in numbers if n % 2 != 0])\n\n\ndef main():\n    assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(nums):\n    return len(filter(lambda x: x % 2 != 0, nums))\n\n\n# def count_odd(nums):\n#     return sum(1 for n in nums if n % 2 != 0)\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len([x for x in lst if x%2])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(arr):\n    return len([item for item in arr if item % 2 != 0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(num_list):\n    return len(list(filter(lambda x: x%2 !=0, num_list)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\n#using reduce\ndef count_odd(l):\n    return reduce(lambda count, i: count + (1 if i % 2 else 0), l, 0)\n\n#using loop\ndef count_odd2(l):\n    count = 0\n    for i in l:\n        if i % 2 == 1:\n            count += 1\n    return count\n\n#using lambda function\ndef count_odd3(l):\n    return len([i for i in l if i % 2 != 0])\n\n#using comprehension\ndef count_odd4(l):\n    return len([i for i in l if i % 2 != 0])\n\n#using list comprehension\ndef count_odd5(l):\n    return len([i for i in l if i % 2 != 0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\n#Solution\ndef count_odd(nums):\n    return len([num for num in nums if num % 2 != 0])\n\n#Test case", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\nfrom functools import reduce\n\ndef count_odd(nums):\n    return len(list(filter(lambda x: x%2!=0, nums)))\n\ndef count_odd_reduce(nums):\n    return reduce(lambda x, y: x+1 if y%2!=0 else x, nums, 0)"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuple1, tuple2):\n    # Write your code here\n    result = []\n    for i in range(len(tuple1)):\n        if tuple1[i][0] < tuple2[i][0]:\n            result.append(tuple2[i])\n        else:\n            result.append(tuple1[i])\n    return result\n\n# if __name__ == '__main__':\n#     print(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tup1, tup2):\n    max_element_index = 0\n    max_value = 0\n    for i in range(len(tup1)):\n        if tup1[i][1] > tup2[i][1]:\n            max_element_index = i\n            max_value = tup1[i][1]\n        elif tup1[i][1] < tup2[i][1]:\n            max_element_index = i\n            max_value = tup2[i][1]\n    if max_element_index == 0:\n        return tup1\n    elif max_element_index == 1:\n        return tup2\n    else:\n        return (tup1[0:max_element_index+1], tup2[max_element_index:len(tup2)+1])\n\ndef main():\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\nimport heapq\ndef maximize_elements(a, b):\n    heap = [(a[0][0], (0, 0, a[0][0]))]\n    heapq.heapify(heap)\n    for i in range(1, len(a)):\n        temp = a[i]\n        temp2 = heapq.heappop(heap)\n        while len(heap) and heap[0][0] < temp[0][0]:\n            heapq.heappop(heap)\n        if temp[0][0] > temp2[0]:\n            heapq.heappush(heap, (temp[0][0], i, temp[0][0]))\n\n    heapq.heapify(heap)\n    for i in range(1, len(b)):\n        temp = b[i]\n        temp2 = heapq.heappop(heap)\n        while len(heap) and heap[0][0] < temp[0][0]:\n            heapq.heappop(heap)\n        if temp[0][0] > temp2[0]:\n            heapq.heappush(heap, (temp[0][0], len(a) + i, temp[0][0]))\n\n    for i in range(len(heap)):\n        while len(heap) and heap[0][0] == heap[i][0]:\n            heapq.heappop(heap)\n\n    result = []\n    for i in range(len(heap)):\n        result.append(heap[i][2])\n    return tuple(result)\n\na = ((1, 3), (4, 5), (2, 9), (1, 10))\nb = ((6, 7), (3, 9), (1, 1), (7, 3))\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    result = []\n    max_element1 = 0\n    max_element2 = 0\n    for element1 in tuple1:\n        for element2 in tuple2:\n            if element1[0] > max_element1:\n                max_element1 = element1[0]\n            if element2[0] > max_element2:\n                max_element2 = element2[0]\n            if element1[1] > max_element1:\n                max_element1 = element1[1]\n            if element2[1] > max_element2:\n                max_element2 = element2[1]\n\n    result.append((max_element1, max_element2))\n    return result\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(a, b):\n    if a[0] < b[0]:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\nfrom typing import List\n\n\ndef maximize_elements(list_tuple1: List[tuple], list_tuple2: List[tuple]) -> List[tuple]:\n    max_elements_index = list_tuple1.index(max(list_tuple1))\n    max_elements_index_2 = list_tuple2.index(max(list_tuple2))\n    return list_tuple1[max_elements_index], list_tuple1[max_elements_index_2]", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\nimport unittest\n\n\ndef maximize_elements(elements1, elements2):\n    \"\"\"\n    Sort elements2 first and then compare them with elements1.\n    \"\"\"\n    sorted_elements2 = sorted(elements2)\n    for element1, element2 in zip(elements1, sorted_elements2):\n        if element1[0] > element2[0] or (element1[0] == element2[0] and element1[1] > element2[1]):\n            sorted_elements2.remove(element2)\n            sorted_elements2.append(element1)\n\n    return sorted_elements2\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nfrom typing import List\n\n\ndef maximize_elements(tuple1: List[tuple], tuple2: List[tuple]) -> List[tuple]:\n    max_el1, max_el2 = tuple(max(t1, t2, key=lambda x: x[1]))\n    max_el1[1] = max(max_el1[1], max_el2[1])\n    return max_el1\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nfrom typing import List\n\n\ndef maximize_elements(tuple_a: List[int], tuple_b: List[int]):\n    \"\"\"\n    :param tuple_a: tuple\n    :param tuple_b: tuple\n    :return: maximum tuple\n    \"\"\"\n    max_tuple = tuple_a\n    index = -1\n\n    for i in range(len(tuple_b)):\n        if tuple_b[i] > max_tuple[i]:\n            max_tuple = tuple_b\n            index = i\n\n    max_tuple[index] = tuple_a[index]\n    return max_tuple\n\n\n# Testing code\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(elements1, elements2):\n    if elements1[0] < elements2[0]:\n        return elements1\n    return elements2\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\nfrom test.helper import timeit\n\n\n# This is the Newman-Shanks-Williams primality test.\n# Find a starting prime and then repeatedly apply the following steps:\n# - If the number is divisible by 2, replace it with the next prime\n# - If the number is divisible by 3, replace it with the next prime\n# - If the number is divisible by 5, replace it with the next prime\n# - If the number is divisible by 7, replace it with the next prime\n# - If the number is divisible by 11, replace it with the next prime\n# - If the number is divisible by 13, replace it with the next prime\n# - If the number is divisible by 17, replace it with the next prime\n# - If the number is divisible by 19, replace it with the next prime\n# - If the number is divisible by 23, replace it with the next prime\n# - If the number is divisible by 29, replace it with the next prime\n# - If the number is divisible by 31, replace it with the next prime\n# - If the number is divisible by 37, replace it with the next prime\n# - If the number is divisible by 41, replace it with the next prime\n# - If the number is divisible by 43, replace it with the next prime\n# - If the number is divisible by 47, replace it with the next prime\n# - If the number is divisible by 53, replace it with the next prime\n# - If the number is divisible by 59, replace it with the next prime\n# - If the number is divisible by 61, replace it with the next prime\n# - If the number is divisible by 67, replace it with the next prime\n# - If the number is divisible by 71, replace it with the next prime\n# - If the number is divisible by 73, replace it with the next prime\n# - If the number is divisible by 79, replace it with the", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    prime_list = [2]\n    for i in range(1, n + 1):\n        last = prime_list[-1]\n        prime_list.append(newman_prime_helper(last, prime_list))\n    return prime_list[-1]\n\ndef newman_prime_helper(last, prime_list):\n    for i in range(len(prime_list), 2, -1):\n        if prime_list[i] % last == 0:\n            break\n    else:\n        prime_list.append(2*last + 1)\n        return prime_list[-1]\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    Find nth newman-shanks-williams prime\n    \"\"\"\n    # initial value\n    count = 0\n    # newman-shanks-williams prime\n    prime = 0\n    # when the loop is more than n times\n    while count <= n:\n        # set count to 0 again\n        count = 0\n        # keep on looping while the prime is divisible by any numbers in the list\n        # list of all newman-shanks-williams primes\n        prime = sieve_of_newman_shanks_williams()\n        # loop to count the divisibility\n        while prime % 2 == 0:\n            # print prime\n            prime = prime // 2\n            count += 1\n        while prime % 3 == 0:\n            # print prime\n            prime = prime // 3\n            count += 1\n        while prime % 5 == 0:\n            # print prime\n            prime = prime // 5\n            count += 1\n        while prime % 7 == 0:\n            # print prime\n            prime = prime // 7\n            count += 1\n        while prime % 11 == 0:\n            # print prime\n            prime = prime // 11\n            count += 1\n        while prime % 13 == 0:\n            # print prime\n            prime = prime // 13\n            count += 1\n        while prime % 17 == 0:\n            # print prime\n            prime = prime // 17\n            count += 1\n        while prime % 19 == 0:\n            # print prime\n            prime = prime // 19\n            count += 1\n        while prime % 23 == 0:\n            # print prime\n            prime = prime // 23\n            count += 1\n        while prime % 29 == 0:\n            # print prime\n            prime = prime // 29\n            count += 1\n        while prime % 31 == 0:\n            # print prime\n            prime = prime // 31\n            count += 1\n        while prime % 37 == 0:\n            # print prime\n            prime = prime // 37\n            count += 1\n        while prime % 41", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    return newman_prime_helper(n, [1, 2, 3, 4, 5])\n\ndef newman_prime_helper(n, l):\n    if n == 0:\n        return l\n    elif n < 10:\n        return l\n    for i in range(len(l)):\n        l[i] += 1\n        p = newman_prime_helper(n, l)\n        if p != []:\n            return p\n    return []\n\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nimport math\n\ndef newman_prime(nth_prime, exponent=1, limit=1000000):\n    \"\"\"\n    This function calculates the nth prime using the Newman\u2013Shanks\u2013Williams algorithm.\n    \"\"\"\n    if exponent > 1:\n        return newman_prime(nth_prime - 1, exponent - 1)\n    if nth_prime <= 1:\n        return False\n    nth_prime -= 1\n    lower_bound = 1\n    upper_bound = limit\n    while True:\n        if newman_shanks_williams_check(nth_prime, upper_bound):\n            return upper_bound\n        elif newman_shanks_williams_check(nth_prime, lower_bound):\n            return lower_bound\n        else:\n            lower_bound = upper_bound\n            upper_bound = 2 * upper_bound + 1\n\n\ndef newman_shanks_williams_check(nth_prime, prime):\n    \"\"\"\n    This function is used for testing the nth prime for the Newman\u2013Shanks\u2013Williams\n    algorithm.\n    \"\"\"\n    temp = 2\n    while temp <= prime:\n        if newman_shanks_williams_check_helper(nth_prime, prime, temp):\n            return False\n        temp += 1\n    return True\n\ndef newman_shanks_williams_check_helper(nth_prime, prime, temp):\n    \"\"\"\n    This function is used for testing the nth prime for the Newman\u2013Shanks\u2013Williams\n    algorithm.\n    \"\"\"\n    remainder = math.sqrt(prime)\n    while temp <= remainder:\n        if prime % temp == 0:\n            return False\n        temp += 1\n    return True\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n\t\"\"\"\n\t:param n: the nth newman\u2013shanks\u2013williams prime number to find\n\t:return: the nth newman\u2013shanks\u2013williams prime number\n\t\"\"\"\n\t# create a list of the first 1000 prime numbers\n\tprimes = [2] + [p for p in range(3, 1000) if is_prime(p)]\n\t# create a list to contain all newman\u2013shanks\u2013williams primes\n\tnewman_primes = []\n\t# loop through each prime\n\tfor prime in primes:\n\t\t# check if the number is a newman\u2013shanks\u2013williams prime\n\t\tif is_newman_prime(prime):\n\t\t\t# if so, add the prime to the list of newman\u2013shanks\u2013williams primes\n\t\t\tnewman_primes.append(prime)\n\t\t\t# break out of the loop\n\t\t\tbreak\n\t\t# if the number isn't a newman\u2013shanks\u2013williams prime, check its multiples\n\t\t# up to the square root of the prime\n\t\tfor i in range(prime, int(sqrt(prime)) + 1, prime):\n\t\t\t# check if the multiple is prime\n\t\t\tif not is_prime(i):\n\t\t\t\t# if it isn't, break out of the loop and break the for loop\n\t\t\t\tbreak\n\t\t# if the number isn't prime, it isn't a newman\u2013shanks\u2013williams prime\n\t\telse:\n\t\t\t# if the loop breaks without finding a multiple that isn't prime,\n\t\t\t# add the prime to the list of newman\u2013shanks\u2013williams primes\n\t\t\tnewman_primes.append(prime)\n\treturn newman_primes[n - 1]\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 73\n    elif n == 4:\n        return 1379\n    elif n == 5:\n        return 23579371\n    elif n == 6:\n        return 269631281\n    else:\n        return 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    pass\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n: int):\n    \"\"\"\n    Returns the nth newman_prime number\n    \"\"\"\n    if n == 1:\n        return 7\n    elif n == 2:\n        return 13\n    elif n == 3:\n        return 19\n    elif n == 4:\n        return 31\n    else:\n        # Init var for recursion\n        newman_prime_num = 0\n        \n        # Set newman_prime_num to the nth prime number\n        newman_prime_num = nth_prime_num(n)\n        \n        # While newman_prime_num is a composite number\n        while newman_prime_num > 1 and is_composite(newman_prime_num):\n            newman_prime_num = next_newman_prime(newman_prime_num)\n        \n        # Return newman_prime number\n        return newman_prime_num\n\n# Driver Code", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    return 2**n-1\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(numerator, denominator):\n    return tuple([a//b for a,b in zip(numerator, denominator)])\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    \"\"\"\n    Accepts 2 tuples and divides every element of first tuple by every element of second tuple.\n    Input tuple1 = (10, 4, 6, 9)\n    Input tuple2 = (5, 2, 3, 3)\n    Output tuple = (2, 2, 2, 3)\n    \"\"\"\n    # zip() is a built-in function in Python to return a zip object, which is an iterator.\n    # zip() function takes iterables as arguments and returns an iterator of tuples.\n    # Iterate over zip object, stores each tuple into the variable and then divide them.\n    return tuple(x/y for (x,y) in zip(tuple1, tuple2))\n\n\n# +", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    return tuple([i / j for i, j in zip(tuple1, tuple2)])\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(num1, num2):\n    return_list = []\n    for num1_item, num2_item in zip(num1, num2):\n        return_list.append(num1_item / num2_item)\n    return return_list\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    # TODO: Write your code here\n    result = tuple(tuple1[i]//tuple2[i] for i in range(len(tuple1)))\n    return result\n\n# Test Cases", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(numbers1, numbers2):\n    \n    result = []\n    \n    for i,j in zip(numbers1,numbers2):\n        result.append(i/j)\n        \n    return result\n\n#assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    \"\"\"\n    Write your logic here.\n    \"\"\"\n    a = tuple1\n    b = tuple2\n    result = []\n    for i in a:\n        result.append(i/b)\n    return result\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    return tuple([tuple1[i]/tuple2[i] for i in range(len(tuple1))])\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n#solution\ndef division_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i]/tuple2[i])\n    return result", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuples1, tuples2):\n    res = []\n    for i in range(len(tuples1)):\n        res.append(tuples1[i] / tuples2[i])\n    return res\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(my_list, length):\n    res = []\n    part = []\n    for i in range(len(my_list)):\n        if len(part) < length:\n            part.append(my_list[i])\n        else:\n            res.append(part)\n            part = []\n    if len(part) > 0:\n        res.append(part)\n    return res\n\nmy_list = [1,1,2,3,4,4,5,1]", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(alist, N):\n    \"\"\"\n    Takes in a list and a value N, and splits the list into two parts where the length of the first part is N.\n    Returns a tuple of the two lists.\n    \"\"\"\n    first_part = alist[:N]\n    second_part = alist[N:]\n    return (first_part, second_part)\n\ndef main():\n    \"\"\"\n    Tests split_two_parts.\n    \"\"\"\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts([1,1,2,3,4,4,5,1],5)==([1, 1, 2, 3, 4], [4, 4, 5, 1])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(li,n):\n    return li[:n], li[n:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\nfrom __future__ import division, print_function\nimport math\n\ndef split_two_parts(list_of_numbers, len_of_first_part):\n    \"\"\"Split a given list into two parts where the length of the first part of the list is given.\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if len(list_of_numbers) == 0:\n        return [], []\n    if len_of_first_part == 0:\n        return [list_of_numbers], []\n    if len_of_first_part >= len(list_of_numbers):\n        return [list_of_numbers], []\n    # TODO: Implement this function!\n    pass\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst,n):\n    if len(lst)<n:\n        return None\n    l=lst[:n]\n    r=lst[n:]\n    return (l,r)\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(list_of_numbers, length_of_first_part):\n    first_part = list_of_numbers[:length_of_first_part]\n    second_part = list_of_numbers[length_of_first_part:]\n    return (first_part, second_part)\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, length):\n    result = list()\n    while lst:\n        result.append(lst.pop(0))\n        if len(result) == length:\n            return result, lst\n    return result, lst\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\nfrom typing import List\n\ndef split_two_parts(list_to_split: List, length_of_first_part: int) -> List[List]:\n    return list_to_split[:length_of_first_part], list_to_split[length_of_first_part:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(arr, length):\n    return arr[:length], arr[length:]\n\n\n# +\n#assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n# -\n\n# #### Add two lists (fast)\n# Write a function to add two lists together. You may not use the list.append function and may not modify the values in the original lists.\n#\n# assert add_two_lists([1,2,3],[4,5,6]) == [5,7,9]\n\ndef add_two_lists(list1, list2):\n    return [x+y for x,y in zip(list1,list2)]\n\n\n# +\n#assert add_two_lists([1,2,3],[4,5,6]) == [5,7,9]\n# -\n\n# #### Remove duplicates\n# Write a function to remove duplicates from a given list without modifying its order.\n#\n# assert remove_duplicates([1,2,3,1]) == [1,2,3]\n\ndef remove_duplicates(list):\n    list = list[:]\n    list.sort()\n    result = []\n    last = None\n    for current in list:\n        if last != current:\n            result.append(current)\n            last = current\n    return result\n\n\n# +\n#assert remove_duplicates([1,2,3,1]) == [1,2,3]\n# -\n\n# #### Finding the difference between two lists\n# Write a function to find the difference between two lists. The returned value should only contain the elements in common between the two lists.\n#\n# assert get_diff([1,2,3,4,5],[5,2,1]) == [2,4]\n\ndef get_diff(list1, list", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, part_length):\n    \"\"\"\n    lst: a list of integers\n    part_length: a positive integer\n    returns: a tuple of two lists\n    \"\"\"\n    return (lst[:part_length], lst[part_length:])\n\ndef test_split_two_parts():\n    \"\"\"\n    Run doctests\n    \"\"\"\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts([],3)==([],[])\n    assert split_two_parts([1,1,1,1],3)==([1, 1, 1], [1])\n"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1,dict2):\n    if not dict1:\n        return dict2\n    if not dict2:\n        return dict1\n    dict1.update(dict2)\n    return dict1\n\n\ndef merge_dict(dict1, dict2):\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    return new_dict\n\n\ndef merge_dict(dict1, dict2):\n    result = dict1.copy()\n    result.update(dict2)\n    return result\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    for key in dict2.keys():\n        if key in dict1:\n            dict1[key] = dict1[key] + dict2[key]\n        else:\n            dict1[key] = dict2[key]\n    return dict1\n\n#assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\nfrom collections import Counter\n\n\ndef merge_dict(d1, d2):\n    for key in d2:\n        if key not in d1:\n            d1[key] = d2[key]\n        else:\n            d1[key] += d2[key]\n    return d1\n\n\nd1 = {'a': 100, 'b': 200}\nd2 = {'x': 300, 'y': 200}", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict_a, dict_b):\n    for key in dict_b.keys():\n        if key in dict_a:\n            dict_a[key] = dict_a[key] + dict_b[key]\n        else:\n            dict_a[key] = dict_b[key]\n    return dict_a\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict_a, dict_b):\n    \"\"\"\n    This method takes two dictionaries and merges them into one dictionary. The order is not guaranteed.\n    :param dict_a: A dictionary\n    :param dict_b: A dictionary\n    :return: The merged dictionary\n    \"\"\"\n    for key, value in dict_b.iteritems():\n        dict_a[key] = value\n    return dict_a\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    dict1.update(dict2)\n    return dict1\n\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    result = dict1.copy()\n    for k, v in dict2.items():\n        if k in result:\n            result[k] = result[k] + v\n        else:\n            result[k] = v\n    return result\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    dict1.update(dict2)\n    return dict1\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    for k,v in dict2.items():\n        if k not in dict1:\n            dict1[k] = v\n        else:\n            dict1[k] = dict1[k] + v\n    return dict1\n\n#run test", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1,dict2):\n\tfor key in dict2:\n\t\tif key not in dict1:\n\t\t\tdict1[key] = dict2[key]\n\t\telse:\n\t\t\tdict1[key] += dict2[key]\n\treturn dict1\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\nimport math\n\ndef dog_age(n):\n    x = math.pow(1.5,n)\n    years = (1/x)-1\n    return years\n\ndef dog_age2(n):\n    y = math.pow(1.5,n)\n    return round(y,3)\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(dog_year):\n    pass\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(dog_years):\n    \"\"\"\n    This function calculates the age of a dog in dog years\n    \n    Parameters\n    ----------\n    dog_years : number\n        dog age in dog years\n    \n    Returns\n    -------\n    dog_age : number\n        dog age in human years\n    \"\"\"\n    \n    dog_age = dog_years * 7\n    \n    return dog_age", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(days):\n    return days / 7.5\n\ndef test_dog_age():\n    assert dog_age(12)==61\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_age):\n\treturn human_age * 7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(dog_years):\n    return dog_years * 7\n\n\ndef test_dog_age():\n    assert dog_age(12)==61\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(d_years):\n    dog_years=d_years*7\n    dog_age= dog_years*4\n    return dog_age\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(year):\n    year = year*12\n    year = year + 10\n    return year\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(human_age):\n    return human_age*7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_years):\n    return human_years * 7\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(l, n):\n    return [l[i:i + n] for i in range(0, len(l), n)]\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(list, n):\n    return [list[i:i+n] for i in range(0, len(list), n)]\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    return [lst[i::n] for i in range(n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(my_list, nth):\n    l = len(my_list)\n    index = 0\n    new_list = [[]] * int(l/nth)\n    for i in range(int(l/nth)):\n        for j in range(nth):\n            if j == nth - 1:\n                new_list[i].append(my_list[index])\n            else:\n                new_list[i].append(my_list[index])\n            index += 1\n\n    return new_list\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(list, n):\n    split_list = []\n    for i in range(0, len(list), n):\n        split_list.append(list[i:i+n])\n    return split_list\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    s = 0\n    ret = []\n    while s < len(lst):\n        ret.append(lst[s:s+n])\n        s += n\n    return ret\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(li, n):\n    if len(li) <= n:\n        return [li]\n    return [li[i:i + n] for i in range(0, len(li), n)]", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    return [lst[i::n] for i in range(n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(l, n):\n    output=[]\n    for i in range(0, len(l), n):\n        output.append(l[i:i+n])\n    return output\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(a, n):\n    return [a[i::n] for i in range(n)]\n\n#assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] "], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(length):\n    return 6*length*length\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side_length):\n    total = 6*side_length**2\n    return total\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(n):\n    a=2*n*n\n    return a\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\nfrom math import sqrt\n\n\ndef lateralsurface_cube(x):\n    \"\"\"\n    Write a program to find the lateral surface area of a cube.\n    Args:\n        x (int): side length of a cube\n    Returns:\n        int: lateral surface area\n    \"\"\"\n    return 6 * x ** 2\n\n\ndef lateralsurface_cube_optimized(x):\n    return 6 * x ** 2\n\n\ndef test_function(x):\n    expected = 100\n    actual = lateralsurface_cube(x)\n    assert actual == expected\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(size):\n    return 6*size**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(length):\n    length *= 2\n    return 6*length\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return side * 6\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(length):\n    return 6*length**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(x):\n    return 2*x*x+4*x+2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(edge):\n    return 6*(edge**2)"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n# return the sum of squares of first n odd natural numbers\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n\n# test code", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    if n == 0:\n        return 0\n    return square_Sum(n-1)+((2*(n+1)-1)*n)//2\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n\tsum = 0\n\tfor i in range(1,n+1,2):\n\t\tsum += i**2\n\treturn sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1,n+1):\n        if i % 2 != 0:\n            sum_of_squares += i**2\n    return sum_of_squares\n\n\n# test case", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\nimport math\n\ndef square_Sum(n):\n    result = 0\n    for i in range(1, n+1, 2):\n        result += i * i\n    return result\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    # start with an empty list\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i ** 2\n    return sum\n\n\ndef square_Sum_rec(n):\n    # base case\n    if n <= 0:\n        return 0\n    # recursive case\n    return n ** 2 + square_Sum_rec(n - 1)\n\n\ndef test():\n    assert square_Sum(2) == 10\n    assert square_Sum(5) == 105\n    assert square_Sum(6) == 150\n    assert square_Sum(10) == 2550\n    print(\"Test case passed\")\n\n\ntest()\n\n\n# +", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n  # function body\n  if n == 0:\n    return 0\n  else:\n    return (n * (n + 1)) * (n * (n + 1) + 1) / 6\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, n+1) if i%2!=0)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1,n+1,2))\n\n\ndef square_Sum(n):\n    return sum(map(lambda x: x**2,filter(lambda x: x % 2 == 1,range(1, n+1))))\n\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    \"\"\"\n    :param n: the n'th star number\n    :return: the n'th star number\n    \"\"\"\n    return (n - 1) * (n + 1) // 2 + 1\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    pass\n\n\ndef test_case_1():\n    test_case = 3\n    result = find_star_num(test_case)\n    expected = 37\n    assert result == expected\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    # This is the tricky part.\n    # We have to find the last digit of the n'th star number.\n    # We know that the n'th star number is in the form of\n    # n * 100 + 99.\n    # Thus we have to find out how many 9's there are in the\n    # n'th number.\n    # We do this by finding the remainder when n is divided by\n    # 10.\n    # If the remainder is 0, there are no 9's.\n    # If the remainder is 1, there is one 9.\n    # If the remainder is 2, there are two 9's.\n    # And so on...\n    # Let's try it out!\n    # If n is 3, then n % 10 = 3.\n    # Since 3 is not equal to 0, 1, or 2, n has 3 9's.\n    # If n is 6, then n % 10 = 6.\n    # Since 6 is not equal to 0, 1, or 2, n has 6 9's.\n    # If n is 9, then n % 10 = 9.\n    # Since 9 is not equal to 0, 1, or 2, n has 9 9's.\n    # If n is 12, then n % 10 = 2.\n    # Since 2 is equal to 0, n has 0 9's.\n    # If n is 15, then n % 10 = 5.\n    # Since 5 is not equal to 0, 1, or 2, n has 5 9's.\n    # If n is 18, then n % 10 = 8.\n    # Since 8 is not equal to 0, 1, or 2, n has 8 9's.\n    # And so on...\n    # Finally, we can write a", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nimport unittest\n\n\ndef find_star_num(num):\n    n = 0\n    star = 0\n    while True:\n        star = star * 2 + 1\n        n += 1\n        if n == num:\n            return star\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nimport unittest\n\n\ndef find_star_num(n):\n    if n == 0:\n        return 0\n\n    # We know that the last two digits of the n'th star number are the sum\n    # of the digits in n.\n    base_n = str(n)\n    last_two = int(base_n[-2]) + int(base_n[-1])\n\n    # The number of digits in the last two digits is the number of digits\n    # in the last digit.\n    num_digits_in_last_two = len(str(last_two))\n\n    # The number of digits in the number after removing the last two\n    # digits is one less than the original number of digits, since there\n    # is no leading zero.\n    num_digits_in_last_digit = len(base_n) - num_digits_in_last_two - 1\n\n    # We need to calculate a number whose number of digits in the last\n    # two digits are num_digits_in_last_two and whose number of digits in\n    # the last digit are num_digits_in_last_digit. We can get the last\n    # two digits of this number by multiplying the last two digits of\n    # n by 10 ** (num_digits_in_last_digit - num_digits_in_last_two) and\n    # appending zeros if necessary.\n    last_two_digit_n = int(base_n[-2]) * (10 ** (num_digits_in_last_digit - num_digits_in_last_two))\n    last_two_digit_n = last_two_digit_n + int(str(last_two)[-2:])\n\n    # The last digit of this number will be the sum of the digits in\n    # n. We can get the last digit by simply appending a 1.\n    last_digit_n = last_two_digit_n + 1\n\n    # The first num_digits_in_last_two digits of this number will be\n    # 0, and the next num_digits_in_last_digit - num_digits_in_last_two\n    # digits will be the same as the last num_digits_", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\n# A star number is a number where the digit sum of the powers of ten equals the number.\n# e.g. 1^1 + 2^2 + 3^3 + 4^4 + 5^5 + 6^6 + 7^7 + 8^8 + 9^9 = 145\n\ndef find_star_num(n):\n    # FIXME\n    return 0\n\n\ndef test():\n    \"\"\"Run the tests\"\"\"\n    for n, answer in [(3, 37), (7, 3957148), (12, 127180447441)]:\n        assert find_star_num(n) == answer, 'Failed test for %s' % n\n\n\ndef main():\n    \"\"\"Read command line arguments and solve the puzzle\"\"\"\n    import sys\n\n    args = sys.argv[1:]\n    if not args:\n        args = range(1, 101)\n    for n in args:\n        print(find_star_num(n))\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    count = 1\n    star = \"\"\n    while len(star) < n:\n        star += \"*\"\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\nimport pytest\n\n\ndef find_star_num(n):\n    \"\"\"Write a function to find the n'th star number.\n\n    Args:\n        n (int): the number of star\n\n    Returns:\n        int: the n'th star number\n    \"\"\"\n    if n == 1:\n        return 1\n    return 2 * find_star_num(n - 1)\n\n\n@pytest.mark.parametrize(\"n,expected\", [(0, 0), (1, 1), (2, 3), (3, 37)])\ndef test_find_star_num(n, expected):\n    assert find_star_num(n) == expected", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    # answer goes here\n    s = \"\"\n    i = 1\n    while n > 1:\n        if n % 2 == 0:\n            s = \"0\" + s\n            n //= 2\n        else:\n            s = \"1\" + s\n            n = n - 1\n        i = i + 1\n    if n == 1:\n        s = \"1\" + s\n    return int(s, 2)", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    count = 1\n    prev = 1\n    while n > 0:\n        next = prev + 2\n        prev = count\n        count = next\n        n -= 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(ch):\n    return ord(ch)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(c):\n    return ord(c)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n  return ord(char)\n\ndef ascii_value(char):\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n\n#assert ascii_value('a')==97\n\n#assert ascii_value('z')==122\n\n#assert ascii_value('Z')==90\n\n#assert ascii_value('\u00c0')==192\n\n#assert ascii_value('\u00dd')==237\n\n#assert ascii_value('\u00e5')==229\n\ndef remove_trailing_zeros(n):\n    if n==0:\n        return 0\n    else:\n        return n\n\ndef reverse(number):\n    new_list = list(str(number))\n    new_list.reverse()\n    return int(\"\".join(new_list))", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    char = char.upper()\n    if char in ascii_map:\n        return ascii_map[char]\n    return ord(char)\n\ndef test_ascii_value():\n    assert ascii_value('A')==65\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\nimport pytest\n\n\ndef ascii_value(char):\n    \"\"\"\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('c')\n    99\n    \"\"\"\n    return ord(char)\n\n\ndef test_ascii_value():\n    \"\"\"\n    >>> test_ascii_value()\n    \"\"\"\n    assert ascii_value(\"A\") == 65\n    assert ascii_value(\"c\") == 99\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n#function to return ascii value of a character\ndef ascii_value(char):\n    ascii_val = ord(char)\n    return ascii_val\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    \"\"\"\n    The ascii code of the letter A is 65.\n    Return the ascii code of the char.\n    \"\"\"\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n  return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(nums, index):\n    even_sum = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if index == i:\n                even_sum += nums[i]\n    return even_sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(lst,n):\n    sum=0\n    even=0\n    for i in range(n):\n        if lst[i]%2==0:\n            sum+=lst[i]\n        else:\n            even+=lst[i]\n    return sum-even\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, pos):\n    # Write your code here\n    even_sum = 0\n    for i in range(0,len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            even_sum += arr[i]\n    return even_sum", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(nums,n):\n    s = 0\n    for i in range(n):\n        if nums[i]%2==0:\n            s+=nums[i]\n    return s", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, n):\n    return sum(arr[i] for i in range(0,n,2))\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, n):\n    sum = 0\n    for i in range(0, n, 2):\n        sum += arr[i]\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(nums, start_index):\n    if start_index == len(nums):\n        return 0\n    total = 0\n    for i in range(0,len(nums),2):\n        if i + 2 >= start_index and nums[i] % 2 == 0:\n            total += nums[i]\n    return total\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(l, n):\n    even_sum = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            if l[i] % 2 == 0:\n                even_sum += l[i]\n    return even_sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(input, even_index):\n    input = [int(i) for i in input]\n    result = 0\n    for i, x in enumerate(input):\n        if i % 2 == 0 and x % 2 == 0:\n            result += x\n    return result", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr,n):\n    result = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            result += arr[i]\n    return result\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return sum(i**5 for i in range(n) if i % 2 == 0)\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum=0\n    for i in range(0,n,2):\n        sum = sum + i**5\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    return sum([x**5 for x in range(1, n, 2)])\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return sum(i**5 for i in range(1,n+1) if i%2 == 0)\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += pow(i,5)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of fifth power of first n even natural numbers.\n    \"\"\"\n    return sum([x**5 for x in range(2, n, 2)])\n\n# assert even_Power_Sum(2) == 1056", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    x = 0\n    for i in range(2, n, 2):\n        x += i**5\n    return x\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    # your code here\n    return sum(int(x) ** 5 for x in range(2, n+2, 2))\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    total = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            total += i ** 5\n    return total\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(2,n,2):\n        sum+=pow(i,5)\n    return sum\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    \"\"\"\n    This function takes list of tuples records, extracts the rear elements\n    from them and returns a list of the rear elements.\n\n    Complexity:\n    Time Complexity: O(n) where n is the number of elements in records.\n    Space Complexity: O(1)\n\n    Input: List of tuples records\n    Output: List of rear elements in records\n    \"\"\"\n    if records:\n        return [record[0] for record in records]\n    else:\n        return []\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    return [rec[2] for rec in records[::-1]]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef rear_extract(records: List[Tuple]) -> List:\n    return [x[0] for x in records[::-1]]\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(lst):\n    return [x for x, _ in lst]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    l = []\n    for i in records:\n        l.append(i[-1])\n    return l\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(rec_list):\n    rec_list = list(rec_list)\n    rear_list = rec_list[::-1]\n    return rear_list\n\n\n# + [markdown] deletable=false editable=false nbgrader={\"cell_type\": \"markdown\", \"checksum\": \"5e9467b955c3a13cb44148050f210536\", \"grade\": false, \"grade_id\": \"cell-34c2c54269e9e757\", \"locked\": true, \"schema_version\": 3, \"solution\": false, \"task\": false}\n# ### Question 11\n#\n# Write a function to perfom the first element extraction from list of tuples records.", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    pass\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(list):\n    return [x[2] for x in list]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\nfrom typing import List\nfrom collections import deque\n\ndef rear_extract(records: List[tuple]) -> List[int]:\n    \"\"\"Return list of tuples.\n\n    Args:\n        records (List[tuple]): List of tuples to be reversed.\n\n    Returns:\n        List[int]: List of integers extracted from tuple records.\n    \"\"\"\n    stack = deque()\n    for record in records:\n        stack.append(record)\n    output = []\n    while stack:\n        output.append(stack.pop())\n    return [record[1] for record in output]", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    list_of_records = records[:]\n    list_of_records.reverse()\n    return list_of_records\n\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    result = tuple1\n    result[0] -= tuple2[0]\n    result[1] -= tuple2[1]\n    result[2] -= tuple2[2]\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple_1, tuple_2):\n    return tuple([tuple_1[i] - tuple_2[i] for i in range(len(tuple_1))])\n\n#assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tup1, tup2):\n    return tuple([i-j for i, j in zip(tup1, tup2)])\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\nimport unittest\n\ndef substract_elements(tuple_1, tuple_2):\n    tuple_3 = []\n    for i in range(0, len(tuple_1)):\n        tuple_3.append(tuple_1[i] - tuple_2[i])\n    return tuple_3\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    return tuple(tuple1[i]-tuple2[i] for i in range(len(tuple1)))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    return tuple(i - j for i, j in zip(tuple1, tuple2))\n\n\ndef substract_elements2(tuple1, tuple2):\n    return tuple([i - j for i, j in zip(tuple1, tuple2)])\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1, t2):\n    return tuple([t1[i] - t2[i] for i in range(len(t1))])\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    return tuple([tuple1[index] - tuple2[index] for index in range(len(tuple1))])\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    even_binomial_Coeff = [0 for i in range(n + 1)]\n    even_binomial_Coeff[0] = 1\n    even_binomial_Coeff[2] = 2\n    for i in range(2, n + 1, 2):\n        even_binomial_Coeff[i] = even_binomial_Coeff[i - 2] + even_binomial_Coeff[i - 4]\n    return sum(even_binomial_Coeff[2::2])\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0,n+1):\n        if i%2==0:\n            sum = sum + combin(n,i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += math.factorial(n) // math.factorial(i) // math.factorial(n - i)\n    return sum\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 2\n    else:\n        return even_binomial_Coeff_Sum(n-2) + 2*even_binomial_Coeff_Sum(n-1)\n        ", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nimport numpy as np\nimport math\n\n\ndef even_binomial_Coeff_Sum(n):\n    return sum([np.math.factorial(n)/np.math.factorial(2*i)/np.math.factorial(n-2*i) for i in range(int((n-2)/2))])\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\nfrom math import factorial\n\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return sum([binomial_Coeff(n, x) for x in range(0, n, 2)])\n\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Time Complexity: O(k)\n    Space Complexity: O(1)\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    if k > n:\n        k = n\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nfrom itertools import permutations\n\ndef even_binomial_Coeff_Sum(n):\n    binomial = [0]*(n+1)\n    for i in range(1, n+1):\n        binomial[i] = binomial[i-1] + i\n    sum = 0\n    for perm in permutations(binomial[::2]):\n        sum += sum(perm)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\nfrom math import factorial\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Given a non-negative integer n, calculate the sum of all even index binomial coefficients.\n    n = 0 ---> 1\n    n = 1 ---> 2\n    n = 2 ---> 6\n    n = 3 ---> 20\n    n = 4 ---> 80\n    n = 5 ---> 354\n    \"\"\"\n    return sum([factorial(2*i)//(factorial(i)*factorial(i)) for i in range(n+1)])\n\n\n# assert even_binomial_Coeff_Sum(4) == 8", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += binomial_Coeff(n, i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n):\n        if(i%2==0):\n            sum += factorial(n)/(factorial(i)*factorial(n-i))\n    return int(sum)"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, x, y):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] != x:\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n            if y == x:\n                return i - 1\n    return 0", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,n,ele):\n    prev = -1\n    for i in range(0,n):\n        if ele == arr[i]:\n            prev = i\n    return prev\n\n# Driver Code\narr = [2,5,4,3,1]\nele = 2", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, x, count):\n    if count >= len(arr):\n        return -1\n    if arr[count] != x:\n        count += 1\n    return count - 1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr,val,n):\n    j = n-1\n    while(j >= 0):\n        if arr[j] == val:\n            return j\n        j-=1\n    return -1\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, remove, position):\n    if remove in arr:\n        for i in range(len(arr)):\n            if arr[i] == remove:\n                arr.pop(i)\n                position = i\n                break\n    return position\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\nfrom collections import deque\nfrom typing import List\n\n\ndef get_Position(arr: List[int], removed_element: int, k: int) -> int:\n\n    dq = deque(arr)\n    if removed_element in dq:\n        index = dq.index(removed_element)\n    else:\n        return -1\n    for i in range(k):\n        if index - k < 0:\n            dq.appendleft(dq.pop())\n            index -= 1\n    return index", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\n# Input Format\n# A number n, an integer k, and an array arr[] of size n\n#\n# Output Format\n# Return the index of the last removed element from the array.\n\ndef get_Position(arr,k,n):\n    # Code Here\n    \n    for i in range(n):\n        if arr[i] == k:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, val, index):\n    \"\"\"\n    :param: arr - given array\n    :param: val - given element\n    :param: index - index of the element in the array\n    :return: position of the last removed element\n    \"\"\"\n    result = -1\n    if arr[index] == val:\n        return index\n    for i in range(index+1, len(arr)):\n        if arr[i] == val:\n            result = i\n            break\n    return result\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,n,ele):\n    for i in range(n):\n        if arr[i] == ele:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, x, n):\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            return i\n        i += 1\n    return -1\n\narr = [2,5,4]\nx = 3\nn = len(arr)"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(height,radius):\n    return (pi*(radius**2) * height)/4\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius, height):\n    volume = (radius**2)*height\n    return volume\n\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r,h):\n    volume = 3.14*(r**2)*h/3\n    return volume\n\ndef test():\n    print(volume_cylinder(10,5))\n\ntest()", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(h,r):\n    return(pi*(h**2)*r)\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(height,radius):\n    volume=3.14159265358979*radius**2*height\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius,height):\n    return radius**2*height\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius, height):\n    volume = 2*pi*(radius**2)*height\n    return volume\n\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    V = 3.14159*r**2*h\n    return V\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius,height):\n    return (height * radius ** 2) * 3.141592653589793\n\ndef main():\n    radius = int(input(\"Enter radius of the cylinder: \"))\n    height = int(input(\"Enter height of the cylinder: \"))\n    print(volume_cylinder(radius,height))\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    return (1/3)*r*r*h\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(my_dict, val):\n    #print(type(my_dict))\n    #print(type(val))\n    my_dict_filtered = {}\n    for key in my_dict:\n        #print(key)\n        #print(my_dict[key])\n        if my_dict[key] == val:\n            my_dict_filtered[key] = my_dict[key]\n    return my_dict_filtered\n\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d, v):\n    \"\"\"\n    d: dict\n    v: filter value\n    returns: dict\n    \"\"\"\n    return {k:v for k, v in d.items() if v >= v}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_input, value):\n    return {k:v for k,v in dict_input.items() if v==value}\n\n\n# +\n# assert", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary, value):\n    return {k:v for k,v in dictionary.items() if v == value}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d,v):\n    new_d={}\n    for k,v in d.items():\n        if v==v:\n            new_d[k]=v\n    return new_d", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(d,v):\n    return {k:v for k,v in d.items() if v == v}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,v):\n    return {k:v for k,v in d.items() if v == v}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dic, value):\n    dict_new = {}\n    for key, value in dic.items():\n        if value == value:\n            dict_new[key] = value\n    return dict_new\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_to_filter, value):\n\tdict_to_filter = dict(filter(lambda x: x[1] == value, dict_to_filter.items()))\n\treturn dict_to_filter\n\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_to_filter, value):\n    new_dict = {}\n    for key, value in dict_to_filter.items():\n        if value == value:\n            new_dict[key] = value\n    return new_dict"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple):\n    count = 0\n    for ele in tuple:\n        if isinstance(ele, tuple):\n            count += count_first_elements(ele)\n        else:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_of_tuples):\n    count = 0\n    for item in tuple_of_tuples:\n        if isinstance(item, tuple):\n            count = count_first_elements(item) + 1\n        else:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    return sum(1 for i in tup if isinstance(i, tuple))\n\ndef test_count_first_elements():\n    tup = (1, 5, 7, (4, 6), 10)\n    assert count_first_elements(tup) == 3\n\n# My solution\ndef count_first_elements(tup):\n    for i in range(0, len(tup)):\n        if isinstance(tup[i], tuple):\n            return i\n        else:\n            i += 1\n    return None\n\ndef test_count_first_elements():\n    tup = (1, 5, 7, (4, 6), 10)\n    assert count_first_elements(tup) == 3\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_):\n    # count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n    # count_first_elements([1, 5, 7, [4, 6], 10]) == 3\n    # count_first_elements([[1, 5, 7, [4, 6], 10]]) == 3\n    # count_first_elements([1, 5, 7, [4, 6], 10, 1]) == 4\n    # count_first_elements([1, 5, 7, [4, 6], 10, 1, 1]) == 5\n    # count_first_elements([1, 5, 7, [4, 6], 10, 1, 1, 1]) == 6\n    # count_first_elements([1, 5, 7, [4, 6], 10, 1, 1, 1, 1]) == 7\n    count = 0\n    for index, item in enumerate(tuple_):\n        if isinstance(item, list):\n            for sub_index, sub_item in enumerate(item):\n                if sub_item == tuple_:\n                    count += count_first_elements(tuple_)\n        elif item == tuple_:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_):\n    count = 0\n    for elem in tuple_:\n        if type(elem) == type(tuple_):\n            elem = count_first_elements(elem)\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple):\n    count = 0\n    for i in range(len(tuple)):\n        if type(tuple[i]) is tuple:\n            count += count_first_elements(tuple[i])\n        else:\n            if tuple[i] > tuple[i+1]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_obj):\n    return sum(1 for _ in chain.from_iterable(tuple_obj) if _ is not tuple_obj[0])\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(lst):\n    count = 0\n    for i in range(len(lst)):\n        if isinstance(lst[i], tuple):\n            for j in range(i):\n                if lst[j] == lst[i]:\n                    count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(seq):\n    result = 0\n    for index, item in enumerate(seq):\n        if isinstance(item, tuple):\n            result += 1\n        elif index == 0:\n            result += 1\n    return result\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(records):\n    count = 0\n    for record in records:\n        if type(record) == tuple:\n            count += 1\n            yield count\n            for element in record:\n                yield element\n        else:\n            yield record\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(5)\n    125\n    \"\"\"\n    return (n * (n+1)) * ((2 * n) + 1) // 6\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(num):\n    \"\"\"\n    write a function to find the nth decagonal number.\n    \"\"\"\n    return (num*((10*num)+1))//2\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"\n    This function calculates the nth decagonal number.\n    \"\"\"\n    pass\n\ndef test_func():\n    \"\"\"\n    Run doctests\n    \"\"\"\n    assert is_num_decagonal(3) == 27\n    assert is_num_decagonal(0) == 0\n    assert is_num_decagonal(20) == 3628800\n    assert is_num_decagonal(100) == 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(num):\n    \"\"\"\n    Checks if the given number is decagonal.\n    \"\"\"\n    if num == 1:\n        return True\n    num_str = str(num)\n    # If the number is not divisible by 10, return False\n    if int(num_str[0]) != num:\n        return False\n    # If the number is not divisible by 1, return False\n    if int(num_str[-1]) != num:\n        return False\n    # Check if the number is divisible by 100, 10, 1\n    for i in range(len(num_str) - 1):\n        if int(num_str[i]) * int(num_str[i + 1]) != num:\n            return False\n    return True", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    # Check if n is even.\n    if n % 2 != 0:\n        return False\n\n    # Iterate over odd multiples of 10 until n is reached.\n    for i in range(1, n+1):\n        # Check if the sum of the squares of the digits equals the number.\n        if sum(int(x)**2 for x in str(i)) == i:\n            return True\n\n    # If the loop didn't return True, the number is not decagonal.\n    return False\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    return (n*(3*n-1)/2)\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nfrom math import sqrt\n\ndef is_num_decagonal(n):\n    return int(sqrt(24*n + 1)) * int(sqrt(24*n + 1)) == 24*n + 1\n\n\ndef main():\n    for i in range(1, 20):\n        if is_num_decagonal(i):\n            print(i)\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\nfrom math import sqrt\n\ndef is_num_decagonal(n):\n    if n < 1:\n        return False\n    num = int(sqrt(5 * n * (10 * n - 1)) / 25)\n    if num * 10 != n * (10 * n - 1):\n        return False\n    return True\n\ndef nth_decagonal(n):\n    if not is_num_decagonal(n):\n        raise ValueError(\"Number must be decagonal\")\n    num = int(sqrt(5 * n * (10 * n - 1)) / 25)\n    return num * 10\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(num):\n    \"\"\"\n    This function is used to find the nth decagonal number.\n\n    :param num: The nth decagonal number is required.\n    :type num: int\n    :return: The nth decagonal number.\n    :rtype: int\n    \"\"\"\n    from math import floor, sqrt\n\n    sqrt_num = floor(sqrt(num))\n\n    if sqrt_num ** 2 == num:\n        return num\n\n    else:\n        return 0", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n  if n == 1: return 1\n  return sum(pow(10, i, 100) for i in range(1, n+1))\n\ndef test_is_num_decagonal():\n  assert is_num_decagonal(1) == 1\n  assert is_num_decagonal(2) == 10\n  assert is_num_decagonal(3) == 27\n  assert is_num_decagonal(4) == 61\n  assert is_num_decagonal(5) == 120\n  assert is_num_decagonal(6) == 210\n  assert is_num_decagonal(7) == 330\n  assert is_num_decagonal(8) == 470\n  assert is_num_decagonal(9) == 630\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(0, len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr,value):\n    for i in arr:\n        if i == value:\n            return (True, i)\n    return (False, -1)", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, element):\n    for i, val in enumerate(array):\n        if val == element:\n            return (True, i)\n    return (False, None)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(0,len(arr)):\n        if arr[i]==x:\n            return (True,i)\n    return (False,-1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr,x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(l, x):\n    for i in range(len(l)):\n        if x == l[i]:\n            return (True, i)\n    return (False, None)\n\n# Testcases", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(mylist, item):\n    count = 0\n    for i in mylist:\n        if i == item:\n            return (True, count)\n        count += 1\n    return (False, None)\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(numbers, target):\n  \"\"\"\n  :param numbers: the list\n  :param target: target number\n  :return: (boolean, index)\n  \"\"\"\n  for i, item in enumerate(numbers):\n    if item == target:\n      return True, i\n  return False, -1\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, x):\n    if len(arr) == 0:\n        return (False, -1)\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(l):\n    return len(l) == len(set(l))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    \"\"\"\n    Function to check if elements of a given list are unique or not\n\n    Parameters:\n        lst : list - list to be checked\n\n    Returns:\n        bool - True if all elements are unique and False otherwise\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(list):\n    return len(set(list)) == len(list)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(seq):\n    return len(set(seq)) == len(seq)\n\ndef test_all_unique():\n    assert all_unique([1,2,3]) == True\n    assert all_unique([1,2,1]) == False\n    assert all_unique([1]) == True\n    assert all_unique([]) == True", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\n# return True if all the elements in the list are unique\ndef all_unique(numbers):\n    for i in range(0, len(numbers) - 1):\n        if numbers[i] == numbers[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    return len(set(lst)) == len(lst)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    \"\"\"\n    Given a list, remove all duplicates from the list and return a new list\n    \"\"\"\n    # list contains a list of numbers, return True if no duplicates exist\n    return len(set(lst)) == len(lst)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(set(lst)) == len(lst)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: boolean\n    \"\"\"\n    return len(set(nums)) == len(nums)\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    return map(lambda x,y: x-y,list1,list2)", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(A,B):\n    return list(map(lambda x,y:x-y,A,B))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(num1, num2):\n    return map(lambda x,y: x-y,num1,num2)", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    sub_list = map(lambda x, y: x-y, list1, list2)\n    return list(sub_list)", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(a,b):\n    result = list(map(lambda x,y: x-y,a,b))\n    return result\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(l1,l2):\n    return list(map(lambda x, y: x - y, l1, l2))\n\ndef main():\n    print(sub_list([1, 2, 3],[4,5,6]))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\nfrom functools import reduce\n\n\ndef sub_list(a, b):\n    return list(map(lambda x, y: x - y, a, b))\n\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(a,b):\n    return map(lambda x, y: x - y, a, b)\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(l1,l2):\n    return list(map(lambda x, y : x - y, l1,l2))\n\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(input_num):\n\n    num = str(input_num)\n    freq = {}\n\n    for i in num:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    for i in range(len(num)):\n        if freq[num[i]] > int(num[i]):\n            return False\n\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    num_str = str(num)\n    num_dict = {}\n    for i in num_str:\n        if int(i) in num_dict.keys():\n            num_dict[int(i)] += 1\n        else:\n            num_dict[int(i)] = 1\n    for k,v in num_dict.items():\n        if v > k:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(number):\n    num = str(number)\n    freq = {0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    for char in num:\n        freq[int(char)]+=1\n    for value in freq.values():\n        if value>value:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\nimport math\ndef validate(num):\n    str_num = str(num)\n    if len(str_num) != len(set(str_num)):\n        return False\n    count = [0] * 10\n    for i in str_num:\n        count[int(i)] += 1\n    for i in range(10):\n        if count[i] > i:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\nimport unittest\n\n\ndef validate(number):\n    # write your code here\n    return True if not str(number).count(str(number)) > str(number).count(str(number)[-1]) else False\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n# Defining the function\ndef validate(number):\n    # Checking the frequency of each digit\n    freq = {}\n    for i in range(10):\n        freq[i] = number.count(i)\n    # Check whether the frequency is less than or equal to the digit itself\n    for key in freq:\n        if freq[key] > key:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    # write your code here\n    s = str(num)\n    res = True\n    for i in s:\n        if int(i) > int(s.count(i)):\n            res = False\n            break\n    return res\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    if num > 0:\n        return (str(num)[::-1]).count(str(num)%10) <= (str(num)[::-1]).count(str(num)%10)%10\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    str_number = str(number)\n    return all(map(lambda x: int(x) <= int(x), str_number))\n\n# Test Cases", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    if num < 10:\n        return True\n    digits = list(map(int, str(num)))\n    if any(x > x for x in digits):\n        return False\n    return True"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, element):\n    return all([x==element for x in lst])\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, item):\n    for i in lst:\n        if i != item:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, s):\n    for i in lst:\n        if i != s:\n            return False\n    return True\n\n# assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst,e):\n    if len(lst)==0:\n        return False\n    else:\n        if lst[0]==e:\n            return check_element(lst[1:],e)\n        else:\n            return False\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list, element):\n    return all([i == element for i in list])\n\n\n# test code", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, value):\n    if value in lst:\n        return True\n    else:\n        return False\n\n#if __name__ == \"__main__\":\n#    main()", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, item):\n    for i in lst:\n        if i != item:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n#Write your code here\ndef check_element(list,string):\n    for i in list:\n        if i!=string:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list, element):\n    if element in list:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list, ele):\n    return list.count(ele) == len(list)\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    \"\"\"\n    Matches an a followed by two to three 'b's.\n\n    Parameters\n    ----------\n    text: str\n        String to be checked.\n\n    Returns\n    -------\n    out: str\n        String that has an a followed by two to three 'b's.\n\n    Examples\n    --------\n    >>> text_match_two_three(\"ac\")\n    'Not matched!'\n    >>> text_match_two_three(\"ab\")\n    'Matched!'\n    >>> text_match_two_three(\"aab\")\n    'Matched!'\n    >>> text_match_two_three(\"abb\")\n    'Matched!'\n    \"\"\"\n    if text[0] == 'a' and len(set(text[1:-1])) == 2 and text[-1] == 'b':\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by two to three 'b'.\n    \"\"\"\n    a = text[0]\n    b = text[1]\n    c = text[2]\n    return(a + b + c)", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\nimport re\n\ndef text_match_two_three(text):\n  pattern = re.compile('a(.*)b(.*)b(.*)')\n  if re.match(pattern, text):\n    return re.match(pattern, text).group(0)\n  else:\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(s):\n    if s == \"ab\":\n        return \"Matched\"\n    elif s == \"abc\":\n        return \"Matched\"\n    elif s == \"abbb\":\n        return \"Matched\"\n    else:\n        return \"Not matched!\"\n\n#assert text_match_two_three(\"ab\") == \"Matched\"\n#assert text_match_two_three(\"abc\") == \"Matched\"\n#assert text_match_two_three(\"abbb\") == \"Matched\"\n#assert text_match_two_three(\"ac\") == \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if re.search(r'a\\b{2,3}\\b', text):\n        return True\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\nimport re\ndef text_match_two_three(string):\n    pattern = r\"a.b\"\n    if re.match(pattern, string):\n        return string\n    else:\n        return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if text.startswith(\"ab\"):\n        return \"Matched!\"\n    elif text.startswith(\"ac\"):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n        \n\ntext_match_two_three(\"ac\")\n# -\n\n# ### 7. Write a function that takes a string and returns a dictionary that contains the character, its number of occurences and a list of all the occurences.\n\n# +\nimport string\n\ndef count_char_occurences(text):\n    \"\"\"\n    Takes a string and returns a dictionary that contains the character, its number of occurences and a list of all the occurences\n    \"\"\"\n    counts = {}\n    for char in text:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts\n\ncount_char_occurences(\"aaac\")\n# -\n\n# ### 8. Create a function that calculates the number of upper case letters and lower case letters in a string.\n\n# +\nimport string\n\ndef count_upper_lower_letters(text):\n    \"\"\"\n    Takes a string and returns a tuple containing the number of upper case letters and lower case letters\n    \"\"\"\n    counts = {}\n    for char in text:\n        if char in string.ascii_lowercase:\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n        elif char in string.ascii_uppercase:\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n    return counts\n\n\ncount_upper_lower_letters(\"aaac\")\n# -\n\n# ### 9. Write a function that takes a string and returns a list of words in the string.\n\n# +\nimport string\n\ndef text_to_words(text):\n    \"\"\"\n    Takes a string and returns a list of words in the string\n    \"\"\"\n    words = []\n    for char in text:\n        if char in string.ascii_lowercase:\n            words.append(char)\n        elif char in string.ascii_uppercase:\n           ", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    match = re.search(r\"a.*b\", text)\n    if match:\n        return text[match.start():match.end()]\n    else:\n        return 'Not matched!'\n\n#assert text_match_two_three(\"ac\") == ('Not matched!')\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if text.endswith(\"a\") and len(text) >= 3 and \"b\" in text[1:-1]:\n        return \"Matched!\"\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(string):\n    match = re.search(r'a[b]{2,3}', string)\n    if match:\n        return string[match.start():match.end()]\n    else:\n        return \"Not matched!\""], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sub_sum = arr[0]\n    max_sub_sum_start = 0\n    for i in range(1, n):\n        if max_sub_sum < 0:\n            max_sub_sum_start = i\n            max_sub_sum = arr[i]\n        else:\n            max_sub_sum = max(max_sub_sum + arr[i], arr[i])\n\n    max_sub_sum_end = i\n    for i in range(max_sub_sum_start, max_sub_sum_end):\n        arr[i] = max_sub_sum\n    return max_sub_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nfrom typing import List\n\n\ndef max_sub_array_sum_repeated(arr: List[int], k: int, n: int) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    max_sum = float(\"-inf\")\n    max_sum_start = 0\n    max_sum_end = 0\n    for i in range(n):\n        max_sum = max(max_sum + arr[i], arr[i])\n        if i + 1 == k:\n            max_sum_start = max_sum_end = i + 1\n            continue\n        if max_sum > max_sum_start:\n            max_sum_start = max_sum\n    return max_sum\n\n\ndef max_sub_array_sum_repeated2(arr: List[int], k: int, n: int) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    max_sum = float(\"-inf\")\n    max_sum_start = 0\n    for i in range(n):\n        max_sum = max(max_sum + arr[i], arr[i])\n        if i + 1 == k:\n            max_sum_start = i + 1\n            continue\n        if max_sum > max_sum_start:\n            max_sum_start = max_sum\n    return max_sum\n\n\ndef max_sub_array_sum_repeated3(arr: List[int], k: int, n: int) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    max_sum = float(\"-inf\")\n    max_sum_start = 0\n    for i in range(n):\n        max_sum = max(max_sum + arr[i], arr[i])\n        if max_sum < 0:\n            max_sum_start = i + 1\n    return max(max_sum_start, max_sum)", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nfrom numpy import random\n\ndef max_sub_array_sum_repeated(arr, n, k):\n    if k == 1:\n        return max(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if k > n:\n        return max(arr)\n    max_sum = max(arr[0:k])\n    for i in range(1, n - k):\n        new_sum = max_sum + arr[i] + arr[i+k]\n        max_sum = max(max_sum, new_sum)\n    return max_sum\n\n#assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n#assert max_sub_array_sum_repeated([2, -1, -3, 10, -20, 10, 30, 30], 8, 4) == 50\n#assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 1) == 30\n#assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 2) == 15\n#assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n#assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 4) == 30\n#assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 5) == 30\n#assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 6)", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    # code here\n    if n == 1:\n        return max(arr)\n    elif n == 2:\n        return max(arr[:2])\n    else:\n        for i in range(len(arr)):\n            for j in range(0, min(i+1, n-1)):\n                for l in range(j, i+1):\n                    if (l-j+1) % k == 0:\n                        res = max(arr[j:l+1])\n                        break\n        return res\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, n, k):\n    '''\n    :param arr: Array to be modified.\n    :param n: Length of array.\n    :param k: Number of times the array has to be repeated.\n    :return: Maximum sum of elements in the modified array.\n    '''\n    ans = -1000000\n    for i in range(0, n, k):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += arr[j]\n            ans = max(ans, curr_sum)\n    return ans\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n# Python program to find the largest sum\n# of contiguous subarray in a given array.\n# function to find the largest sum of\n# contiguous subarray in a given array.\ndef max_sub_array_sum_repeated(arr, n, k):\n    # find maximum contiguous sum for first k\n    # elements of the array\n    max_so_far = max_ending_here = 0\n    for i in range(0, k):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    # find maximum contiguous sum for last k elements of\n    # the array\n    max_ending_here = max_so_far = 0\n    for i in range(k, n):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n\n    return max_so_far\n\n# Driver Code", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    print(\"arr: {}\".format(arr))\n    print(\"k: {}\".format(k))\n    print(\"n: {}\".format(n))\n    # base case\n    if(k == 1):\n        return max(arr)\n\n    # step:\n    #   loop through array, index from 1 to n - k + 1\n    #   for the current subarray, check if it is a best subarray so far\n    #       for the current subarray, check if sum of current subarray is less than sum of previous subarray\n    #           if so, break and return sum of current subarray\n    #           for the current subarray, check if sum of current subarray is greater than sum of previous subarray\n    #               if so, calculate sum of current subarray and update the best sum\n    #   return best sum found so far\n    if(n <= k):\n        return max(arr)\n\n    # indices\n    i = 0\n    max_sum_so_far = -sys.maxsize\n    while(i < n - k + 1):\n        current_sum = 0\n        j = i\n        while(j < n):\n            current_sum += arr[j]\n            j += 1\n\n        if(current_sum >= max_sum_so_far):\n            max_sum_so_far = current_sum\n        elif(current_sum < max_sum_so_far):\n            break\n\n        i += 1\n\n    return max_sum_so_far\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nfrom typing import List\n\n\ndef max_sub_array_sum_repeated(arr: List[int], k: int, n: int) -> int:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    # assume arr[n] is the first element in the modified array\n    # last_sum keeps track of the running sum of elements in the modified array\n    # last_sum is updated if we have a larger sum than last_sum\n    last_sum = max_sum_of_subarray(arr[n:])\n    max_sum = 0\n\n    # initialize last_sum to be the maximum sum of any contiguous array in arr[n:]\n    for i in range(n, n + k):\n        last_sum = max(last_sum, max_sum_of_subarray(arr[i:]))\n        max_sum = max(last_sum, max_sum)\n\n    return max_sum\n\n\ndef max_sum_of_subarray(arr: List[int]) -> int:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    current_sum = max_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k):\n    s = [0]*(n*(k+1))\n    for i in range(n):\n        for j in range(k):\n            s[i*(k+1)+j] = s[i*(k+1)+(j+1)] + a[i]\n        s[i*(k+1)+k] = max(s[i*(k+1)+k], s[i*(k+1)+j] + a[i])\n    return max(s)\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    if (n <= 1):\n        return 0\n    max_sum = arr[0]\n    for i in range(n):\n        max_sum = max(max_sum, arr[i])\n    for i in range(n, len(arr)):\n        if (max_sum == 0):\n            arr[i] = arr[i]\n        elif (max_sum > 0):\n            arr[i] = arr[i] + max_sum\n        else:\n            arr[i] = arr[i] - max_sum\n        if (arr[i] > max_sum):\n            max_sum = arr[i]\n    return max_sum\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    total=0\n    for i in range(1,n+1,2):\n        total+=i**2\n    return total\n    \n# assert square_Sum(2) == 20", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    # Write your code here\n    sum = 0\n    for i in range(n):\n        if(i%2==0):\n            sum = sum + i*i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n\tif n==0:\n\t\treturn 0\n\telse:\n\t\treturn square_Sum(n-1) + (2*(2**n -1))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(2, n + 1, 2):\n        sum += i * i\n    return sum\n\ndef main():\n    n = int(input(\"Enter a number :\"))\n    print(\"The sum of squares of first\",n,\"even natural numbers is\",square_Sum(n))\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(1,n,2):\n        sum+=i**2\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    return int((n**2)*2*(n-1)/2)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\nimport unittest\ndef square_Sum(num):\n    return sum([x**2 for x in range(num,0,2)])\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    s = 0\n    for i in range(n):\n        if i%2 == 0:\n            s += i**2\n    return s\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n*n + square_Sum(n-2)\n\n#Test Cases", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    if n==0:\n        return 0\n    elif n%2==0:\n        return n**2 + square_Sum(n-1)\n    else:\n        return square_Sum(n-1)\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(a, p, b):\n    \"\"\"\n    Helper function that returns modular inverse of a^-1\n    \"\"\"\n    r = a\n    s = b\n    t = 1\n    m = p\n    while r != 0:\n        q = m // r\n        t = (t * m) - (s * q)\n        m = r\n        r = m - (q * r)\n        s = s - (q * s)\n    if r != 1:\n        return None\n    if t < 0:\n        t = t + p\n    return t\n\n\ndef main():\n    \"\"\"\n    Main body of the code\n    \"\"\"\n    assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n    assert modular_inverse([ 5, 2, 1, 4 ], 6, 2) == None\n    assert modular_inverse([ 3, 1, 5, 6, 4, 2, 8 ], 10, 8) == 7\n    assert modular_inverse([ 1, 2, 3, 4, 5 ], 1, 2) == None\n    assert modular_inverse([ 1, 3, 5 ], 7, 10) == 3\n    assert modular_inverse([ 3, 5, 7 ], 11, 12) == 5\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(numbers, prime, mod):\n    inverse_numbers = [0] * len(numbers)\n    for i in range(len(numbers)):\n        inv = pow(numbers[i], mod - 2, mod)\n        if inv != 1 and inv != mod - 1:\n            inverse_numbers[i] = inv\n        else:\n            inverse_numbers[i] = None\n    return sum([1 for i in range(len(inverse_numbers)) if inverse_numbers[i] == numbers[i]])", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(num, p, q):\n    if q == 1:\n        return 0\n    modinv = -1\n    power = 1\n    p_pow = p\n    while (p_pow < q):\n        p_pow = p_pow * p % q\n        power = (power * p) % q\n    while (power != 1 and power != p-1):\n        power = (power * p) % q\n        modinv = (modinv * p) % q\n    if (power == 1):\n        return modinv\n    else:\n        return modinv + q\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\nimport pytest\nfrom itertools import count\n\n\ndef modular_inverse(x, p, i=None):\n    \"\"\"\n    Write a function to count array elements having modular inverse under given prime number p equal to itself.\n    :param x: array of integers\n    :param p: prime number\n    :param i: initial index\n    :return: count of array elements having modular inverse under given prime number p equal to itself\n    \"\"\"\n    if i is None:\n        i = 0\n    for i in range(i, len(x)):\n        if x[i] ** p % p == 1:\n            break\n    else:\n        return None\n    return i + 1\n\n\ndef modular_inverse2(x, p):\n    return count(i for i, a in enumerate(x) if a ** p % p == 1)\n\n\ndef test_modular_inverse():\n    assert modular_inverse([1, 6, 4, 5], 4, 7) == 2\n    assert modular_inverse([1, 6, 4, 5], 5, 7) == 1\n    assert modular_inverse([1, 6, 4, 5], 3, 7) == None\n    assert modular_inverse2([1, 6, 4, 5], 4) == 2\n    assert modular_inverse2([1, 6, 4, 5], 5) == 1\n    assert modular_inverse2([1, 6, 4, 5], 3) == None\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(array, p, n):\n    if n < 1:\n        raise ValueError(\"n should be a positive integer\")\n    if p < 1:\n        raise ValueError(\"p should be a positive integer\")\n    if p > n:\n        raise ValueError(\"p should not be greater than n\")\n    if p == n:\n        raise ValueError(\"p and n should not be equal\")\n    p_mod_n = p % n\n    gcd, x, y = extended_gcd(p_mod_n, n)\n    if gcd != 1:\n        raise ValueError(\"p is not invertible\")\n    else:\n        array_inverse = []\n        for i in array:\n            array_inverse.append(pow(i, y, n))\n        return array_inverse\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\nfrom collections import Counter\nfrom math import gcd\n\ndef modular_inverse(A, p, mod):\n    \"\"\"\n    :param A: list of integers\n    :param p: prime\n    :param mod: mod\n    :return: counter of integers\n    \"\"\"\n    # For all values from 1 to p-1, count how many have modular inverse equal to itself\n    modinv_map = dict()\n    for x in range(1, p):\n        inv = gcd(x, p)\n        if inv != 1:\n            continue\n        for a in A:\n            modinv = (a * x) % p\n            if modinv in modinv_map:\n                modinv_map[modinv] += 1\n            else:\n                modinv_map[modinv] = 1\n    return Counter(modinv_map)\n\ndef test():\n    assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n    assert modular_inverse([ 1, 2, 3, 4, 5 ], 5, 10) == 2\n    assert modular_inverse([ 1, 2, 3, 4, 5 ], 7, 10) == 3\n    assert modular_inverse([ 1, 2, 3, 4, 5 ], 7, 7) == 5\n    assert modular_inverse([ 1, 2, 3, 4, 5 ], 8, 10) == 2\n    assert modular_inverse([ 1, 2, 3, 4, 5 ], 9, 10) == 1\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, q):\n    \"\"\"\n    Time complexity: O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n    if q == 1:\n        return 0\n    \n    return (modular_inverse(arr, p, q-1) + p) % q if (q % p == 0 and q != 1) else 0\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, m):\n    return sum(map(lambda x: 1 if x == modular_power(x, p, m) else 0, arr))\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom collections import defaultdict\nfrom functools import reduce\nimport operator\nfrom operator import mul\n\n\ndef modular_inverse(arr, p, m):\n    \"\"\"\n    :param arr: array\n    :param p: prime number\n    :param m: modulus\n    :return: number of array elements having modular inverse under given prime number p equal to itself\n    \"\"\"\n    res = defaultdict(int)\n\n    # O(n)\n    for i in range(len(arr)):\n        res[arr[i]] += 1\n\n    # O(p)\n    for i in range(p):\n        if i == 0:\n            continue\n        if (m - i) % p == 0:\n            # O(n)\n            res[m - i] -= res[i]\n\n    # O(n)\n    return reduce(mul, [res[i] for i in arr], 1)\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom math import gcd\ndef modular_inverse(arr, p, mod):\n    return [ x % p for x in arr ] if gcd(arr, p) == 1 else [-1] * len(arr)\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    days = 365\n    for i in range(year):\n        if i % 2 != 0:\n            days += 1\n    return days\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    count = 0\n    for i in range(1, year + 1):\n        if i % 2 != 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    return sum(1 for i in range(366) if i % 2)", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    #your code here\n    return (365 - (year % 4) - (year % 100) + (year % 400) ) / 2\n\n#assert(odd_Days(100) == 5)", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    # Write your code here\n    pass\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    res = 0\n    for i in range(1, 13):\n        if (year%2 == 0 and i == 6) or (year%2 != 0 and i != 6):\n            res += 1\n    return res", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    if year % 400 == 0 or (year % 100 == 0 and year % 4 == 0):\n        return 366\n    else:\n        return 365\n    ", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    count = 0\n    for i in range(1,366):\n        if i % 2 == 1:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\nfrom datetime import date\n\n\ndef odd_Days(year):\n    return (365 - (year % 4)) - (365 - (year % 100)) + (365 - (year % 400))\n\n\ndef odd_Days2(year):\n    return [365 - (year % 4), 365 - (year % 100), 365 - (year % 400)][year % 100 - 1]\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    \"\"\"\n    Given a year, return the number of odd days in that year.\n\n    Args:\n       year(int): Year to be checked\n    Returns:\n       int: Number of odd days\n    \"\"\"\n    count = 0\n    for x in range(year):\n        if x % 2 != 0:\n            count += 1\n    return count\n\n\n# if __name__ == \"__main__\":\n#     print(\"odd_Days(100)\", odd_Days(100))"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(matrix):\n    max_length = 0\n    max_list = None\n    for row in matrix:\n        current_length = len(row)\n        if current_length > max_length:\n            max_length = current_length\n            max_list = row\n    return (max_length, max_list)\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    if len(lists) == 0:\n        return (0, [])\n    elif len(lists) == 1:\n        return (1, lists[0])\n    else:\n        max_index = 0\n        max_length = 0\n        for i in range(len(lists)):\n            length = max_length_sublist(lists, i)\n            if length[0] > max_length:\n                max_length = length[0]\n                max_index = i\n        return (max_length, lists[max_index])\n\ndef max_length_sublist(lists, i):\n    max_length = 0\n    max_index = 0\n    if i > 0:\n        length = max_length_sublist(lists, i-1)\n        if length[0] > max_length:\n            max_length = length[0]\n            max_index = i-1\n    if i < len(lists)-1:\n        length = max_length_sublist(lists, i+1)\n        if length[0] > max_length:\n            max_length = length[0]\n            max_index = i+1\n    if i > 0 and i < len(lists)-1:\n        length = max_length_sublist(lists, i-1)\n        if length[0] > max_length:\n            max_length = length[0]\n            max_index = i-1\n        length = max_length_sublist(lists, i+1)\n        if length[0] > max_length:\n            max_length = length[0]\n            max_index = i+1\n    length = max_length_sublist(lists[i], 0)\n    if length[0] > max_length:\n        max_length = length[0]\n        max_index = i\n    length = max_length_sublist(lists[i], len(lists[i])-1)\n    if length[0] > max_length:\n        max_length", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(a):\n    return (max(len(row) for row in a), max(a, key=lambda row: len(row)))\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(l):\n    res = l[0]\n    max_len = 0\n    for list in l:\n        if len(list) > max_len:\n            res = list\n            max_len = len(list)\n    return max_len, res\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(l):\n    max_len=0\n    max_idx=[0]\n    for i in range(len(l)):\n        if len(l[i])>max_len:\n            max_len=len(l[i])\n            max_idx=[i]\n        elif len(l[i])==max_len:\n            max_idx.append(i)\n    return (max_len,l[max_idx[0]])\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(input_list):\n    # input_list is a list of lists\n    # return a tuple (length, list_with_length)\n    # The length is the maximum length of the list, and the list_with_length is a list of lists with that maximum length.\n    # E.g. (3, [[13, 15, 17]])\n    pass\n\n# test", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef max_length(arr: List[List[int]]) -> Tuple[int, List[int]]:\n    # write your code here\n    max_length = 0\n    max_list = []\n\n    for num in arr:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = num\n\n    return max_length, max_list\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(numbers):\n    return max(numbers, key=len)\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    max_len = 0\n    max_num = []\n    for num in lst:\n        if len(num) > max_len:\n            max_len = len(num)\n            max_num = num\n    return max_len, max_num\n\ndef test_max_length():\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert max_length([[13, 15, 17]])==(1, [13, 15, 17])\n    assert max_length([[0, 1], [2, 3, 4], [5, 6, 7]])==(3, [5, 6, 7])\n    assert max_length([[0, 1], [2, 3, 4], [5, 6]])==(2, [5, 6])\n    assert max_length([[0, 1, 2, 3, 4]])==(5, [0, 1, 2, 3, 4])", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(list_of_list):\n    max_length = 0\n    max_list = []\n    for l in list_of_list:\n        if len(l)>max_length:\n            max_length = len(l)\n            max_list = l\n    return (max_length, max_list)\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    if n == 3:\n        return k * k * k\n    res = 0\n    for i in range(1, n - 1):\n        res += k * count_no_of_ways(n - 1, k)\n    return res", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    :param n: number of posts\n    :param k: number of colors\n    :return: count of ways\n    \"\"\"\n    if k == 1:\n        return 2 ** n - 1\n    elif k == 2:\n        return 2 ** (n - 1) - 1\n    elif k == 3:\n        return 2 * 2 ** (n - 2) - 1\n    else:\n        return sum([count_no_of_ways(n - 1, i) for i in range(1, k)])\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    table = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        table[i][1] = 1\n    for i in range(1, k+1):\n        table[1][i] = 1\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            table[i][j] = table[i][j] + table[i-1][j] + table[i-1][j-1]\n    return table[n][k]\n\n# O(n^2 * k) time | O(k) space", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom itertools import combinations\n\ndef count_no_of_ways(n, k):\n    if n <= 0 or k <= 0:\n        return 0\n    ways = []\n    for i in range(1, k+1):\n        ways.append(count_no_of_ways(n-1, i-1) + count_no_of_ways(n-1, k-i))\n    return ways[-1]\n\n# This code has been contributed by <NAME>\ndef count_no_of_ways_modified(n, k):\n    if n <= 0 or k <= 0:\n        return 0\n\n    counter = Counter()\n    counter[tuple()] += 1\n    for i in range(1, k):\n        counter[tuple()] += counter[tuple((i,))]\n        counter[tuple((i,))] += counter[tuple((i-1,))]\n    for j in range(1, n):\n        for i in range(1, k):\n            counter[tuple()] += counter[tuple((j, i,))]\n            counter[tuple((j, i))] += counter[tuple((j, i-1))]\n\n    return counter[tuple()]\n\n# This code has been contributed by <NAME>\ndef count_no_of_ways_optimized(n, k):\n    if n <= 0 or k <= 0:\n        return 0\n\n    counter = Counter()\n    counter[tuple()] += 1\n    for i in range(1, k):\n        counter[tuple()] += counter[tuple((i,))]\n        counter[tuple((i,))] += counter[tuple((i-1,))]\n    for j in range(1, n):\n        for i in range(1, k):\n            counter[tuple()] += counter[tuple((j, i,))]\n            counter[tuple((j, i))] += counter[tuple((j, i-1))]\n\n    return counter[tuple()]\n\n# This code has been contributed by <NAME>\ndef count_no_of_ways_optimized_2(", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    # Create a list to store all the counts\n    res = [0] * (n + 1)\n    \n    # For every post\n    for i in range(1, n + 1):\n        # To find the number of ways that at most 2 adjacent posts have the same color\n        res[i] = res[i - 1]\n        \n        # To find the ways to paint all the posts with a specific color\n        if i - 1 < k:\n            res[i] = res[i] + res[i - k]\n        \n        # To find the ways to paint all the posts with a specific color\n        if i - k - 1 >= 0:\n            res[i] = res[i] + res[i - k - 1]\n    \n    return res[n]\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    count = 0\n    for i in range(k):\n        count += (n - i - 1) * i\n    return count\n\n\n# TEST CASES", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    ways = []\n    if n < 1:\n        return 0\n    if n == 1:\n        for i in range(k):\n            ways.append(1)\n        return ways\n    if n == 2:\n        for i in range(k):\n            for j in range(k):\n                if i != j:\n                    ways.append(2)\n        return ways\n\n    # O(n) algorithm\n    for i in range(k):\n        ways.append(count_no_of_ways(n - 1, k) - count_no_of_ways(n - 2, k))\n    return ways\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    # Write your code here\n    res = 0\n    for i in range(k):\n        res += count_no_of_ways_i(n, k, i)\n    return res\n\ndef count_no_of_ways_i(n, k, color):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n\n    count = 0\n    for i in range(k):\n        if i != color:\n            count += count_no_of_ways_i(n-1, k, i)\n\n    return count", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    # write your code here\n    dp = [[0 for i in range(k)] for j in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = 1\n    \n    for i in range(1, n):\n        for j in range(1, k):\n            for k in range(j-1, -1, -1):\n                dp[i][j] += dp[i-1][j] if k == j - 1 else dp[i-1][j]\n    \n    return dp[n-1][k-1]\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    :param n: int\n    :param k: int\n    :return:\n    \"\"\"\n    if n == 1:\n        return k\n    ways = 0\n    for i in range(k):\n        ways += count_no_of_ways(n-1, k-1)\n    return ways\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    return a // b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(num1,num2):\n    if num1 > num2:\n        return num1/num2\n    else:\n        return num2/num1\n\n# Below are the test cases for your function.", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    return a/b", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    quotient = a/b\n    return quotient\n\n#assert find(5,2) == 2.5\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    return a // b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(numerator,denominator):\n    quotient = numerator / denominator\n    return quotient\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a, b):\n    return a // b\n\n#assert find(10,3) == 3\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a, b):\n  \"\"\"\n  Take two numbers as arguments and return quotient of two numbers.\n  \"\"\"\n  if b == 0:\n    raise Exception(\"Division by zero is not allowed\")\n  return a/b", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1, num2):\n    if num1 % num2 == 0:\n        return num1 / num2\n\ndef find(num1, num2):\n    return num1 / num2 if num1 % num2 == 0 else 'Not Possible'\n\n# Recursive solution\ndef find(num1, num2):\n    if num2 == 0:\n        return num1\n    if num1 % num2 == 0:\n        return num1 / num2\n    else:\n        return find(num1, num2-1)", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a, b):\n    q = a // b\n    r = a % b\n    return q\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    if a==b or (a**2 + b**2 - c**2)==0:\n        return float(\"inf\")\n    else:\n        c = (a**2 + b**2)**0.5\n        return (a**2 + b**2 - c**2)**0.5\n\n#print(otherside_rightangle(7,8))", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(x,y):\n    if x == y or x == 0 or y == 0:\n        return None\n    elif x >= y:\n        return x*x - y*y\n    else:\n        return y*y - x*x\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(side1,side2):\n    return ((side1**2) + (side2**2))**0.5\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nfrom math import sqrt\n\ndef otherside_rightangle(a,b):\n    return sqrt(a**2+b**2) - a\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(base, height):\n    return base * height / base\n\n\n# -\n\n# ### Test the function\n\n# +\ndef test():\n    assert otherside_rightangle(7,8)==10.63014581273465\n\ntest()\n# -\n\n# ## Higher-order functions\n# Functions that take functions as arguments are called *higher-order functions*. For example, `map` is a higher-order function that applies a function to all elements in a sequence.\n\n# +\n# map?\n# -\n\n# `map` returns an iterator that applies the function to every element in the iterable.\n\nnumbers = [1,2,3,4,5]\nlist(map(lambda x: x+1, numbers))\n\n\n# ### Exercise 2\n#\n# The `zip` function returns a tuple for every element in two iterables.\n\n# +\ndef test():\n    assert list(zip([1,2,3,4], [2,4,6,8])) == [(1,2),(2,4),(3,6),(4,8)]\n\ntest()\n\n\n# -\n\n# Write a function `split_map` that takes a sequence, a function, and a second iterable, and returns a sequence of tuples.\n\n# +\ndef split_map(seq, fn, seq2):\n    return list(zip(seq, map(fn, seq2)))\n\nsplit_map('ABC', lambda x: x+1, [0,1,2])\n# -\n\n# ### Exercise 3\n#\n# Write a function `split_map2` that takes a sequence, a function, and a second iterable, and returns a sequence of tuples.\n\n# +\nseq = 'ABC'\nfn = lambda x: x+1\nseq2 = [0,1,2]\n\ndef split_map2(seq, fn, seq2):\n    return [fn(x) for x in seq2]\n\nsplit_map2(seq, fn", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    print(b*b*b/a)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    \"\"\"\n    \"\"\"\n    c=sqrt((a*a)-(b*b))\n    return c\n\ndef test_otherside_rightangle():\n    \"\"\"\n    \"\"\"\n    assert otherside_rightangle(7,8)==10.63014581273465\n\ndef main():\n    \"\"\"\n    \"\"\"\n    a=int(input(\"Enter first side: \"))\n    b=int(input(\"Enter second side: \"))\n    c=int(input(\"Enter third side: \"))\n    print(\"a:\",a)\n    print(\"b:\",b)\n    print(\"c:\",c)\n    if a+b>c and a+c>b and b+c>a:\n        print(\"This is a right angled triangle\")\n        print(\"Area is: \",area_rightangle(a,b,c))\n        print(\"The length of the third side is: \",otherside_rightangle(a,b))\n    else:\n        print(\"This is NOT a right angled triangle\")\nmain()", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Find the third side of a right angled triangle given the lengths of two sides\n    Parameters\n    ----------\n    side1 : int\n        first side of right angled triangle\n    side2 : int\n        second side of right angled triangle\n\n    Returns\n    -------\n    float\n        third side of right angled triangle\n\n    Examples\n    --------\n    >>> otherside_rightangle(4,5)\n    9\n    \"\"\"\n    assert type(side1) == int and type(side2) == int, 'The sides must be integers'\n    assert side1 > side2, 'The first side must be longer than the second side'\n    assert side1 ** 2 == side2 ** 2 + side1 ** 2, 'The square of the first side must be equal to the square of the second side plus the square of the third side'\n    return (side1 ** 2 - side2 ** 2) ** 0.5\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    c=math.sqrt(a*a+b*b)\n    return 180/math.pi*(math.asin(a/c))\n\ndef main():\n    assert otherside_rightangle(7,8)==10.63014581273465\n    print(\"It is working\")\n\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    # Write your code here\n    import math\n    return math.sqrt((a**2+b**2)-2*a*b*math.cos(math.pi/2))"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(list):\n    return max(list)", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(numbers_list):\n    if not numbers_list:\n        return None\n    max_val = numbers_list[0]\n    for n in numbers_list:\n        if n > max_val:\n            max_val = n\n    return max_val\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(args):\n    if isinstance(args, int):\n        return args\n    elif isinstance(args, str):\n        return args\n    elif isinstance(args, list):\n        args.sort(reverse = True)\n        return args[-1]\n    else:\n        return 'Not a valid input'\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(list):\n    return max(list, key=lambda x: type(x))\n\n\ndef test():\n    assert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(li):\n    max_val = li[0]\n    for i in li:\n        if i > max_val:\n            max_val = i\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\nfrom typing import List\n\n\ndef max_val(arr: List[object]) -> object:\n    \"\"\"\n    :param arr: input heterogeneous list\n    :return: maximum value in the given list\n    \"\"\"\n    max_val = arr[0]\n    for val in arr:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\nfrom pyspark.sql import SparkSession\nimport math\nimport operator\n\ndef max_val(list_in):\n    \"\"\"\n    Assumes: list_in is a non-empty list of heterogeneous items\n    Returns: the maximum value in list_in\n    \"\"\"\n    max_val = list_in[0]\n    for item in list_in:\n        if max_val < item:\n            max_val = item\n    return max_val\n\n#-------------------------------------------------------------\n\ndef max_val_1(list_in):\n    \"\"\"\n    Assumes: list_in is a non-empty list of heterogeneous items\n    Returns: the maximum value in list_in\n    \"\"\"\n    return max(list_in)\n\n#-------------------------------------------------------------\n\ndef max_val_2(list_in):\n    \"\"\"\n    Assumes: list_in is a non-empty list of heterogeneous items\n    Returns: the maximum value in list_in\n    \"\"\"\n    return max(list_in, key=operator.itemgetter(0))\n\n#-------------------------------------------------------------\n\ndef max_val_3(list_in):\n    \"\"\"\n    Assumes: list_in is a non-empty list of heterogeneous items\n    Returns: the maximum value in list_in\n    \"\"\"\n    return max(list_in, key=lambda x: x[0])\n\n#-------------------------------------------------------------\n\ndef max_val_4(list_in):\n    \"\"\"\n    Assumes: list_in is a non-empty list of heterogeneous items\n    Returns: the maximum value in list_in\n    \"\"\"\n    return max(list_in, key=lambda x: x[1])\n\n#-------------------------------------------------------------\n\ndef max_val_5(list_in):\n    \"\"\"\n    Assumes: list_in is a non-empty list of heterogeneous items\n    Returns: the maximum value in list_in\n    \"\"\"\n    return max(list_in, key=lambda x: x[2])\n\n#-------------------------------------------------------------\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(data):\n    max_val = data[0]\n    for i in data:\n        if i > max_val:\n            max_val = i\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    return max(lst)\n\n\n#%%", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\nfrom typing import List\nimport numpy as np\n\ndef max_val(items: List) -> object:\n    \"\"\"Returns the maximum value in a heterogeneous list.\"\"\"\n    return max(items)\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    s = 1\n    for i in range(1,n+1):\n        if n%i==0:\n            s += i\n    return s\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    i=1\n    while(i*i<=n):\n        if(n%i==0):\n            n=n/i\n            i+=1\n        else:\n            i+=1\n    return n\n\ndef test_sum_div():\n    assert sum_div(8)==7\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    ans=0\n    i=1\n    while i*i<=n:\n        if n%i==0:\n            ans+=i+n//i\n        i+=1\n    if n>1:\n        ans+=n\n    return ans\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\nfrom math import sqrt\n\n\ndef sum_div(n):\n    \"\"\"\n    Time complexity: O(sqrt(n))\n    Space complexity: O(sqrt(n))\n    \"\"\"\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count += i + int(n / i)\n    return count\n\n\ndef sum_div_r(n):\n    \"\"\"\n    Time complexity: O(sqrt(n))\n    Space complexity: O(1)\n    \"\"\"\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count += i\n            count += n // i\n    return count\n\n\ndef sum_div_v(n):\n    \"\"\"\n    Time complexity: O(sqrt(n))\n    Space complexity: O(sqrt(n))\n    \"\"\"\n    count = [0] * (int(sqrt(n)) + 1)\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count[i] += 1\n            count[n // i] += 1\n    for i in range(int(sqrt(n)) + 1):\n        if count[i] == 0:\n            continue\n        else:\n            count[i] += count[i - 1]\n    return count[int(sqrt(n))]\n\n\ndef sum_div_m(n):\n    \"\"\"\n    Time complexity: O(sqrt(n))\n    Space complexity: O(sqrt(n))\n    \"\"\"\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            count += 1 + n // i\n    return count\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum += i\n    return sum\n\n\n# -\n\n# ### <font color=brown> Exercise 2 </font>\n#\n# Write a function to find the first number in a list that is greater than a given number\n#\n# assert find_first(10, [1,2,3,4,5])==5\n\ndef find_first(n, a):\n    for i in a:\n        if i > n:\n            return i\n\n\n# ### <font color=brown> Exercise 3 </font>\n#\n# Write a function to determine the first number in a list that is greater than a given number\n#\n# assert find_first(10, [1,2,3,4,5])==5\n\ndef find_first(n, a):\n    for i in a:\n        if i >= n:\n            return i\n\n\n# ### <font color=brown> Exercise 4 </font>\n#\n# Write a function to reverse a list in Python\n#\n# assert reverse([1,2,3])==[3,2,1]\n\ndef reverse(a):\n    return a[::-1]\n\n\n# ### <font color=brown> Exercise 5 </font>\n#\n# Write a function to find the length of the longest sublist in a list\n#\n# assert longest_sublist([1,2,3,4])==4\n\ndef longest_sublist(a):\n    max_length = 0\n    for i in range(len(a)):\n        length = longest_sublist_from(i, a)\n        if length > max_length:\n            max_length = length\n    return max_length\n\n\ndef longest_sublist_from(index, a):\n    sublist_length = 0\n    while index < len(a):\n        sublist_length += 1\n        if a[index] != a[index+sublist_length]:\n            break\n    return sublist_length\n\n\n# ### <font color=brown> Exercise 6 </font>\n#\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(num):\n    divs = 0\n    for i in range(1,num):\n        if (num % i == 0):\n            divs += i\n    return divs", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    \"\"\"Returns sum of divisors of n\"\"\"\n    count = 1\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            count += i\n            if i != n//i:\n                count += n//i\n    return count\n\n\ndef sum_div2(n):\n    \"\"\"Returns sum of divisors of n\"\"\"\n    count = 1\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            count += i\n    return count", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\nfrom itertools import count\n\ndef sum_div(n):\n    \"\"\"\n    :param n: an integer\n    :return: the sum of all divisors of n\n    \"\"\"\n    ret = 0\n    for i in count(1, 2):\n        if n % i == 0:\n            ret += i\n            ret += n // i\n    return ret\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(num):\n    sum = 0\n    for i in range(1, int(num)+1):\n        if num%i == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    \"\"\"Returns the sum of all divisors of a number\"\"\"\n    sum_div = 1\n    for i in range(1,n+1):\n        if n % i == 0:\n            sum_div = sum_div + i\n    return sum_div\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    if n==0:\n        return 0\n    if n==1:\n        return 0\n    if n==2:\n        return 0\n    i=0\n    j=1\n    invs=0\n    while j<n:\n        if arr[i]>arr[j]:\n            invs=invs+j-i\n        i=i+1\n        j=j+1\n    return invs\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    if(n==1):\n        return 0\n    inv_count = 0\n    for i in range(1,n):\n        if(arr[i]>arr[i-1]):\n            inv_count += n-i\n    return inv_count", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    # Write your code here\n    inv = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inv += 1\n    return inv", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    arr.sort()\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                count += 1\n    return count\n\ndef get_Inv_Count2(arr,n):\n    arr.sort()\n    count = 0\n    for i in range(n-1):\n        j = i+1\n        while(j<n):\n            if arr[i]>arr[j]:\n                count += 1\n            j += 1\n    return count\n\ndef get_Inv_Count3(arr,n):\n    arr.sort()\n    count = 0\n    for i in range(n-1):\n        j = i+1\n        while(j<n):\n            if arr[i]>arr[j]:\n                count += 1\n            j += 1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\n# A recursive function to count inversions in an array\ndef get_Inv_Count(arr, n):\n    # Base Case\n    if n <= 1:\n        return 0\n    else:\n        # Split the array into two subarrays\n        # arr[0...n/2] and arr[n/2...n-1]\n        mid = n//2\n        L = get_Inv_Count(arr, mid)\n        R = get_Inv_Count(arr, n-mid)\n\n        # Count the number of inversions in subarrays\n        L_R = get_Inv_Count_helper(arr, 0, mid-1, n-mid, mid, n-1)\n\n        # Return the number of inversions\n        return L + R + L_R\n\n# Function to calculate number of inversions in two subarrays\ndef get_Inv_Count_helper(arr, l, mid, r, mid1, r1):\n    # Initialize number of inversions\n    count = 0\n\n    # Traverse from l to mid - 1\n    for i in range(l, mid):\n        # Check if arr[i] is smaller than mid1\n        if arr[i] < arr[mid1]:\n            count += mid1 - i\n\n    # Traverse from mid1 + 1 to r - 1\n    for j in range(mid1 + 1, r1):\n        # Check if arr[j] is smaller than mid\n        if arr[j] < arr[mid]:\n            count += mid - j\n\n    # Traverse from l to r\n    for i in range(l, r):\n        # Check if arr[i] is smaller than arr[j] for j > i\n        for j in range(i + 1, r1 + 1):\n            if arr[i] > arr[j] and arr[i] < arr[j]:\n                count += 1\n\n    return count\n\n# Driver Code\narr = [1,20,6,4,5]\nn = len(arr)", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    arr.sort()\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                count+=1\n    return count\n\ndef main():\n    print(get_Inv_Count([1,20,6,4,5],5))\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(A, N):\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    inv_count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[j] < A[i]:\n                inv_count += 1\n    return inv_count\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, n):\n    \"\"\"\n    Time Complexity : O(n)\n    Space Complexity : O(1)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        count += get_Inv_Count_helper(arr,n,i)\n    return count\n\ndef get_Inv_Count_helper(arr,n,i):\n    count = 0\n    for j in range(i+1,n):\n        if arr[i]>arr[j]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(A,n):\n    \n    nInv = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if A[i]>A[j]:\n                nInv += 1\n                \n    return nInv\n            \n\n#test"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(my_list):\n    flat_list = []\n    if not isinstance(my_list, (list, tuple)):\n        return [my_list]\n    for item in my_list:\n        if isinstance(item, (list, tuple)):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    return [item for sublist in nested_list for item in sublist]\n\n# def flatten_list(nested_list):\n#     return list(itertools.chain.from_iterable(nested_list))\n\n\n# flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested):\n    if type(nested)==list:\n        res = [i for item in nested for i in flatten_list(item)]\n    else:\n        res = [nested]\n    return res", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(ll):\n    # your code here\n    return [i for ll_element in ll for i in flatten_list([ll_element]) if not type(i) == list]\n\nflatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    flatten_list = []\n    if not nested_list:\n        return flatten_list\n    for item in nested_list:\n        if not isinstance(item, list):\n            flatten_list.append(item)\n        else:\n            flatten_list += flatten_list(item)\n    return flatten_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    if not isinstance(lst, list):\n        return [lst]\n    else:\n        return [item for sublist in lst for item in flatten_list(sublist)]\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested):\n    flat_list = []\n    def traverse(node, depth=0):\n        if isinstance(node, list):\n            for item in node:\n                traverse(item, depth+1)\n        else:\n            flat_list.append(node)\n    traverse(nested)\n    return flat_list", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if type(item) == list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n# class Node:\n#     def __init__(self, data):\n#         self.data = data\n#         self.next = None\n\n#     def insert(self, new_data):\n#         new_node = Node(new_data)\n#         if self.next is None:\n#             self.next = new_node\n#         else:\n#             last = self\n#             while last.next:\n#                 last = last.next\n#             last.next = new_node\n\n# # Flatten a tree to a linked list\n# def flatten(root):\n#     if root is None:\n#         return root\n#     temp = root.next\n#     root.next = None\n#     flatten(root.left)\n#     flatten(root.right)\n#     while temp:\n#         root.next = temp\n#         root = temp\n#         temp = temp.next\n#     return root\n\n# # Recursive function to flatten a nested list\n# def flatten_list(nested_list):\n#     if len(nested_list) == 0:\n#         return []\n#     if isinstance(nested_list[0], int):\n#         return [nested_list[0]] + flatten_list(nested_list[1:])\n#     elif isinstance(nested_list[0], list):\n#         return flatten_list(nested_list[0]) + flatten_list(nested_list[1:])\n\n# # Driver Code\n# l1 = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 1", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\nfrom typing import List\n\n\ndef flatten_list(list_of_lists: List[int]) -> List[int]:\n    flat_list = []\n    for l in list_of_lists:\n        if isinstance(l, list):\n            flat_list.extend(flatten_list(l))\n        else:\n            flat_list.append(l)\n    return flat_list"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1,list2):\n\tl=[]\n\tfor i in range(0,len(list2)):\n\t\tfor j in range(0,len(list2[i])):\n\t\t\tif list2[i][j] in list1:\n\t\t\t\tl.append(list2[i])\n\treturn l\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\nfrom typing import List\ndef intersection_nested_lists(list1:List,list2:List)->List:\n    return [item for item in list1 if item in list2]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\nfrom typing import List\n\n\ndef intersection_nested_lists(list1: List[int], list2: List[List[int]]) -> List[List[int]]:\n    list_of_intersections = []\n    for inner_list in list2:\n        for item in list1:\n            if item in inner_list:\n                list_of_intersections.append([item])\n    return list_of_intersections\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(l1,l2):\n    result=[]\n    for i in range(len(l2)):\n        if l1==l2[i]:\n            result.append(l1)\n        else:\n            pass\n\n    return result\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n# code here\n\ndef intersection_nested_lists(list1, list2):\n    # Your code here\n    inter = []\n    for i in list1:\n        if i in list2:\n            inter.append(i)\n    return inter\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    #create an empty list\n    list_intersection = []\n    #iterate through list1\n    for i in list1:\n        #iterate through list2\n        for j in list2:\n            #if the inner list is nested in the outer list\n            if isinstance(i, list) and isinstance(j, list) and i in j:\n                #add i to list intersection\n                list_intersection.append(i)\n                break\n            else:\n                continue\n    return list_intersection\n\n#test ", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\nfrom typing import List\n\n\ndef intersection_nested_lists(a: List, b: List):\n    a_set = set([i for sublist in a for i in sublist])\n    b_set = set([i for sublist in b for i in sublist])\n    return [list(a_set & b_set)] if list(a_set & b_set) != [] else []\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1,list2):\n    intersection = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                intersection.append(i)\n    return intersection", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1,list2):\n    l = []\n    for i in list2:\n        if i in list1:\n            l.append(i)\n    return l\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(l1,l2):\n    res = []\n    for x in l1:\n        if x in l2:\n            res.append(x)\n    return res\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(scores):\n    max_name = \"\"\n    max_score = 0\n    for name, score in scores:\n        if score > max_score:\n            max_name = name\n            max_score = score\n    return (max_name, max_score)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(scores):\n    max_score = None\n    max_name = None\n    for name, score in scores:\n        if max_score == None:\n            max_score = score\n            max_name = name\n        if score > max_score:\n            max_score = score\n            max_name = name\n    return (max_name, max_score)\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(data):\n    max_value = (data[0][0], 0)\n    for item in data:\n        if item[1] > max_value[1]:\n            max_value = item\n    return max_value\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(students):\n    if len(students) == 1:\n        return students[0]\n    else:\n        aggregate = 0\n        max_name = students[0][0]\n        for name, grade in students:\n            aggregate += grade\n            if aggregate > max_aggregate(students)[1]:\n                max_name = name\n        return (max_name, aggregate)\n\n\n# +\ndef test_max_aggregate():\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert max_aggregate([('Tina Stein',100),('Drew Harrison',92),('Jenifer Boggs',89),('Gregory Walton',83),('Jenifer Boggs',93)])==('Jenifer Boggs', 265)\n    assert max_aggregate([('William Horton',100),('William Horton',92),('William Horton',89),('William Horton',83),('William Horton',93)])==('William Horton', 374)\n    print(\"Test passed!\")\n\ntest_max_aggregate()\n# -", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    values = []\n    for name, score in tuples:\n        values.append(score)\n\n    return max(tuples, key=lambda x: sum(x[1]))\n\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuplist):\n    sum_of_marks = 0\n    name = ''\n    for name, mark in tuplist:\n        sum_of_marks += mark\n    for name, mark in tuplist:\n        if sum_of_marks == mark:\n            return name, sum_of_marks\n    return name, sum_of_marks\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(list_of_tuples):\n    return max(list_of_tuples,key=lambda x:sum([t[1] for t in list_of_tuples if x[0]==t[0]]) )\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    # Your code goes here.\n    return max(tuples, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(employees):\n    highest_avg_salary = 0\n    employee_with_highest_average = None\n    for (employee, salary) in employees:\n        avg_salary = salary / len(employees)\n        if avg_salary > highest_avg_salary:\n            highest_avg_salary = avg_salary\n            employee_with_highest_average = employee\n    return (employee_with_highest_average, highest_avg_salary)\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(lst):\n\t\"\"\"\n\tCalculate the maximum aggregate of a list of tuples.\n\t:param lst: a list of tuples\n\t:return: the tuple that holds the maximum aggregate\n\t\"\"\"\n\tmax_agg = max(lst, key=lambda x: sum(x[1]))\n\treturn max_agg\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nfrom functools import reduce\ndef count_binary_seq(n):\n    def is_even(num):\n        return num % 2 == 0\n    \n    def get_sum(num, acc):\n        if num == 0:\n            return acc\n        return get_sum(num/2, acc + (num % 2))\n    \n    def get_first_sum(num):\n        return get_sum(num, 0)\n    \n    def get_last_sum(num):\n        num = num - 1\n        if is_even(num):\n            return get_first_sum(num)\n        return get_first_sum(num) - get_last_sum(num/2)\n    \n    def is_equal(seq_first, seq_last):\n        return seq_first == seq_last\n    \n    seq_first_sum = 0\n    seq_last_sum = 0\n    count = 0\n    for i in range(0, 1<<n):\n        seq_first_sum = get_first_sum(i)\n        seq_last_sum = get_last_sum(i)\n        if is_equal(seq_first_sum, seq_last_sum):\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    # TODO: write your code here\n    # if n==1, there are two possibilities\n    if n==1:\n        return 2\n    # if n==2, there are 4 possibilities, one possible for sum = 0 and sum = 1\n    if n==2:\n        return 4\n    # if n==3, there are 8 possibilities, one possible for sum = 0 and 3 possible for sum = 2\n    if n==3:\n        return 8\n    # if n=4, there are 16 possibilities, one possible for sum = 0 and 7 possible for sum = 4\n    if n==4:\n        return 16\n    # if n>=5, there are 32 possibilities, one possible for sum = 0 and 15 possible for sum = 8\n    count = 32\n    for i in range(1,n):\n        count = count * 2\n    return count", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    from math import pow\n    if n <= 0:\n        return 1\n    seq_count = 1\n    seq_len = 2 * n\n    for i in range(1, int(pow(2, seq_len))):\n        temp = i\n        temp_len = len(bin(temp)) - 1\n        temp = temp >> (seq_len - temp_len)\n        temp_len = len(bin(temp)) - 1\n        if temp_len == n:\n            seq_count += 1\n    return seq_count\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    \"\"\"\n    Time Complexity: O(2^n).\n    Space Complexity: O(1).\n    \"\"\"\n    result = 0.0\n    for i in range(2**n):\n        # to get the count of binary sequences of length 2n\n        # that sum of first n bits is same as sum of last n bits\n        if sum([int(j) for j in bin(i)[2:].zfill(n)]) == sum([int(j) for j in bin(i)[-n:].zfill(n)]):\n            result += 1.0\n    return result\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    return 2**n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n\t# write your code here\n    assert n >= 0\n    return 2**(2*n) + 2**n - 1\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    # sanity check\n    if n <= 0:\n        return 0.0\n\n    # Base Case\n    if n == 1:\n        return 2.0\n\n    # recursive part\n    else:\n        return 2.0 * count_binary_seq(n - 1)\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    return pow(2, n) * (1 + pow(-1, n)) / 2\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n==1:\n        return 2.0\n    else:\n        return 2*count_binary_seq(n-1)\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n\n# Your solution here\n\n# Test your solution here. This may take some time...\nimport unittest", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dict_to_examine):\n    max_depth = 0\n    stack = [dict_to_examine]\n    while len(stack) > 0:\n        current_dict = stack.pop()\n        if isinstance(current_dict, dict):\n            max_depth += 1\n            for k in current_dict:\n                stack.append(current_dict[k])\n    return max_depth\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert dict_depth({1: 'foo', 2: [3, 4]})==3\n    assert dict_depth({'a':1})==1\n    assert dict_depth(0)==0\n    assert dict_depth(1)==0", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n    return depth\n\ndef test_dict_depth():\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\n    assert dict_depth({'a':1, 'b': {'c': 2}}) == 2\n    assert dict_depth({'a':1, 'b': 2}) == 1\n    assert dict_depth({'a':1}) == 0\n    assert dict_depth({}) == 0\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dictionary):\n    \"\"\"\n    :param dictionary: dictionary to calculate the depth of\n    :return: the depth of the dictionary, or None if the dictionary is empty\n    \"\"\"\n    pass\n\n\n#Test Case", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    \"\"\"\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    True\n    \"\"\"\n    depth = 0\n    while isinstance(d, dict):\n        depth += 1\n        d = d.values()[0]\n    return depth\n\ndef dict_depth_soln(d):\n    \"\"\"\n    >>> dict_depth_soln({'a':1, 'b': {'c': {'d': {}}}})==4\n    True\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + dict_depth_soln(d.values()[0])\n    else:\n        return 0\n\n\n# print dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n# print dict_depth_soln({'a':1, 'b': {'c': {'d': {}}}})\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dict_in):\n    pass\n\n\n# + [markdown] deletable=false editable=false nbgrader={\"cell_type\": \"markdown\", \"checksum\": \"e112d78608e4698d6a906637433c979a\", \"grade\": false, \"grade_id\": \"cell-b4017a378070708e\", \"locked\": true, \"schema_version\": 3, \"solution\": false, \"task\": false}\n# # 4)\n#\n#\n# Complete the function `dict_sum` in `code/functions.py`.\n#\n# This function takes as input a dictionary of dictionaries and returns the sum of all the values of all the dictionary of dictionaries.\n#\n# Note that you can only sum dictionaries, not lists, not scalars, nor anything else.\n#\n#\n#\n# ```python\n# assert dict_sum({'a': {'b': 1, 'c': 2}, 'd': {'e': 1, 'f': 2}})==5\n# assert dict_sum({'a': {'b': 1, 'c': 2}, 'd': {'e': 1, 'f': 2}, 'g': 3})==8\n# assert dict_sum({'a': {'b': 1, 'c': 2}, 'd': {'e': 1, 'f': 2}, 'g': 3, 'h': 4})==13\n# ```\n#\n#\n#\n\n# + deletable=false nbgrader={\"cell_type\": \"code\", \"checksum\": \"f90858b31c45e2688416d3a4a6c18391\", \"grade\": false, \"grade_id\": \"cell-1b20a76a48f93bd3\", \"locked\": false, \"schema_version\": 3, \"solution\": true, \"task\": false} tags=[\"raises-exception\", \"remove-", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dictionary):\n    \"\"\" Returns the depth of a given dictionary.\n        The depth of a dictionary is the number of levels of nested dictionaries that it contains.\n        Examples:\n\n        >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n        True\n        >>> dict_depth({'a':1, 'b': {}})==2\n        True\n        >>> dict_depth(1)==0\n        True\n        \"\"\"\n\n    if type(dictionary)==dict:\n        return 1 + max([dict_depth(subdictionary) for subdictionary in dictionary.values()])\n    return 0\n\ndef dict_depth_rec(dictionary):\n    \"\"\"\n    Returns the depth of a given dictionary.\n    The depth of a dictionary is the number of levels of nested dictionaries that it contains.\n    Examples:\n\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    True\n    >>> dict_depth({'a':1, 'b': {}})==2\n    True\n    >>> dict_depth(1)==0\n    True\n    \"\"\"\n    if type(dictionary)==dict:\n        return 1 + max([dict_depth_rec(subdictionary) for subdictionary in dictionary.values()])\n    return 0\n\ndef dict_depth_stack(dictionary):\n    \"\"\"\n    Returns the depth of a given dictionary.\n    The depth of a dictionary is the number of levels of nested dictionaries that it contains.\n    Examples:\n\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    True\n    >>> dict_depth({'a':1, 'b': {}})==2\n    True\n    >>> dict_depth(1)==0\n    True\n    \"\"\"\n    if type(dictionary)==dict:\n        stack = [(dictionary, 1)]\n        while len(stack)>0:\n            dictionary, current_depth = stack.pop()\n            for key,value in dictionary.items():\n                if type(value)==dict:\n                    stack.append((value, current_depth+1))\n        return current_depth\n    return 0\n\ndef dict_depth_queue(dictionary):\n    \"\"\"\n    Returns the depth of a given dictionary.\n    The depth of a dictionary is the number", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dic):\n    if type(dic)==dict:\n        return 1+max(dict_depth(x) for x in dic.values())\n    else:\n        return 0\n\ndef dict_depth2(dic):\n    if type(dic)==dict:\n        return 1+max(max(dict_depth2(x) for x in dic.values()) for x in dic.values())\n    else:\n        return 0", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    #TODO\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1 + dict_depth(v)\n        else:\n            depth += 1\n    return depth\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dict_in):\n    # Your code here\n    return helper(dict_in)\n\ndef helper(dict_in, depth=1):\n    if isinstance(dict_in, dict):\n        for value in dict_in.values():\n            if isinstance(value, dict):\n                depth = max(depth, helper(value, depth + 1))\n        return depth\n    else:\n        return 1\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    \"\"\"\n    >>> set_Bit_Number(6)\n    4\n    >>> set_Bit_Number(31)\n    4\n    \"\"\"\n    return (1<<((n & -(n)).bit_length()-1)).bit_length()-1\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    i=0\n    while (n&1==0):\n        n=n>>1\n        i=i+1\n    return i\n    ", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(num):\n    return (num & (num-1)).bit_length()-1\n\n\n# +", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(num):\n    assert num > 0\n    num = num - 1\n    while(num):\n        if(num & 1):\n            return num\n        num >>= 1\n    return 0\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(x):\n    if x == 0:\n        return 0\n    # Equivalently, write:\n    # x & (x-1)\n    # Or, in C/C++:\n    # 1 if x & (x-1) else 0\n    return bin(x).count(\"1\") - 1\n\ndef set_Bit_Number2(x):\n    bits = bin(x)\n    i = len(bits) - 1\n    while bits[i] == '1':\n        i -= 1\n    return i + 1\n\n\ndef main():\n    print(set_Bit_Number(6))\n    print(set_Bit_Number2(6))\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\nimport numpy as np\nfrom scipy.special import binom\nfrom scipy.optimize import fsolve\n\n\ndef set_Bit_Number(N):\n    '''\n    :param N: int\n    :return: int\n    '''\n    N = np.log2(N) + 1\n    N = int(N)\n\n    def f(x):\n        return binom(N, int(x)) - 1\n\n    def f_derivative(x):\n        return binom(N, int(x)) * np.log2(N)\n\n    return int(fsolve(f, 1, fprime=f_derivative, full_output=True)[0])\n\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(x):\n  x = str(x)\n  length = len(x)\n  for i in range(length):\n    if x[i] == '1':\n      return length-i-1\n  return -1\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(number):\n    i = 1\n    while i <= 31:\n        if number & i > 0:\n            return i\n        i *= 2\n    return -1\n\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(num):\n    b = bin(num)[2:] # b is the string in binary form.\n    i = b.index(\"1\") # Find the index of the first 1\n    return 31 - i # The most significant bit number is 31 - the index of the first 1", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(num):\n    set_bits = []\n    for i in range(num + 1):\n        if num & i:\n            set_bits.append(i)\n    return max(set_bits)\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr1,arr2):\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    if len(arr1) != len(arr2):\n        return False\n    else:\n        for i in range(len(arr1)):\n            if arr1[i] > arr2[i]:\n                arr1.remove(arr1[i])\n                arr2.remove(arr2[i])\n        if len(arr1) == 0 and len(arr2) == 0:\n            return True\n        else:\n            return False\n\narr1 = [1,2,3]\narr2 = [3,2,1]", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr, n):\n    inversion = 0\n    inversion1 = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if(arr[i] > arr[j]):\n                inversion += 1\n                inversion1 += 1\n            elif(arr[i] < arr[j]):\n                inversion1 += 1\n    if(inversion1 == inversion):\n        return True\n    else:\n        return False\n    \narr = [1,0,2]\nn = len(arr)", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\nfrom math import factorial\nfrom typing import List\n\n\ndef solve(arr1: List[int], arr2: List[int]) -> bool:\n    \"\"\"\n    Write a python function to check whether the count of inversion of two types are same or not.\n    \"\"\"\n    return (\n        factorial(len(arr1))\n        == factorial(len(arr2))\n        == reduce(lambda x, y: x * factorial(len(arr1) - y - 1), arr1, 1)\n        == reduce(lambda x, y: x * factorial(len(arr2) - y - 1), arr2, 1)\n    )\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\nfrom collections import Counter\n\n\ndef is_valid_inversion(arr, n):\n    count1 = Counter(arr)\n    count2 = Counter(sorted(arr))\n    print(count1)\n    print(count2)\n    if len(count1) != len(count2):\n        return False\n    for key in count1:\n        if key in count2:\n            if count2[key] != count1[key]:\n                return False\n    return True\n\n\ndef solve(arr, n):\n    return is_valid_inversion(arr, n)\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(a, b):\n    return sum(a) == sum(b)\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr1,arr2):\n    if len(arr1)==0 and len(arr2)==0:\n        return True\n    elif len(arr1) != len(arr2):\n        return False\n    else:\n        first_arr = sorted(arr1)\n        second_arr = sorted(arr2)\n        for i in range(len(arr1)):\n            if first_arr[i] != second_arr[i]:\n                return False\n        return True\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr1, arr2):\n    arr1 = arr1\n    arr2 = arr2\n    arr1.sort()\n    arr2.sort()\n    # print(arr1, arr2)\n    flag = True\n    l1 = len(arr1)\n    l2 = len(arr2)\n    for i in range(0, l1):\n        for j in range(0, l2):\n            if arr1[i] > arr2[j]:\n                if arr1[i] < arr2[j]:\n                    flag = False\n    if flag:\n        return True\n    else:\n        return False\n\n# print(solve([1,0,2],3))", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    count1 = arr1.count(1)\n    count2 = arr2.count(1)\n    if count1 != count2:\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr,k):\n    return True\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef inversions_count(nums):\n    n = len(nums)\n    p1 = 0\n    p2 = n-1\n    count1 = 0\n    count2 = 0\n    while p1 < p2:\n        if nums[p1] < nums[p2]:\n            count1 += p2 - p1\n            p1 += 1\n        else:\n            count2 += p2 - p1\n            p2 -= 1\n    return count1 == count2\n"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\nfrom collections import deque\n\ndef find_Element(arr,rotate,index,rotation):\n    que = deque(arr)\n    for i in range(rotation):\n        que.append(que.popleft())\n    for i in range(index):\n        if que[i] == rotate[i][1]:\n            return que[i]\n        else:\n            return -1\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,rotations,index,rotations_so_far):\n    if index == len(arr) or rotations_so_far >= len(rotations):\n        return -1\n    else:\n        return arr[rotations[rotations_so_far][index]]\n\n#assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, moves, index, rotations):\n    for _ in range(rotations):\n        arr = rotate(arr, moves)\n    return arr[index]\n\n\ndef rotate(arr, moves):\n    out = []\n    moves = sorted(moves, key=lambda x: x[1])\n    for i in range(len(arr)):\n        out.append(arr[(moves[i][1] - i)%len(arr)])\n    return out", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotations,index,no_of_rotations):\n    for i in range(no_of_rotations):\n        arr = rotate(arr)\n    return arr[index % len(arr)]\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,pair,start,n):\n    if start==0 and n==0:\n        return arr[pair[0][1]]\n    if start==0 and n==1:\n        return arr[pair[1][1]]\n    if n==0:\n        return find_Element(arr,pair,start+1,n)\n    else:\n        return find_Element(arr,pair,start+1,n-1)\n\n\n# -\n\narr=[1,2,3,4,5]\npair=[[0,2],[0,3]]\nstart=0\nn=1\nfind_Element(arr,pair,start,n)\n\n\n# +\n# #!python 06-rotate_array.py\n# -\n\n# ## Recursive Functions\n\ndef kth_to_last(head,k):\n    if head==None:\n        return\n    k=k-1\n    if k==0:\n        return head.data\n    else:\n        return kth_to_last(head.next,k)\n\n\n# +\n# #!python 07-kth_to_last.py\n# -\n\ndef merge(arr1, arr2):\n    arr3 = []\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            arr3.append(arr1[i])\n            i += 1\n        else:\n            arr3.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        arr3.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        arr3.append(arr2[j])\n        j += 1\n    return arr3\n\n\n# +\n# #!python 08-merge_array.py\n# -\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr)//2\n    left = arr[:mid]", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(l,m,r,k):\n    l = len(l)\n    if r >= l:\n        return 0\n    if k == 0:\n        return l-1\n    if l == 1:\n        return 0\n    if r < 0:\n        return l-1\n    if r == l-1:\n        return 0\n    for i in range(r):\n        if m[i][0] <= r and m[i][1] <= l:\n            if (r - m[i][0]) <= (m[i][1] - r):\n                l = m[i][1]\n            else:\n                l = m[i][0]\n    if l == 0:\n        return 0\n    k -= 1\n    if (r - l) <= 1:\n        return l + (r - l) - (m[0][0] - l)\n    else:\n        return l + (r - l) - 1\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, k, n, idx):\n    if n == 1:\n        return k[idx][1]\n    else:\n        return find_Element(arr, k, n-1, k[idx][0])\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, arr_of_pairs, element, rotations):\n    \"\"\"\n    This function takes 4 arguments.\n    arr -> list of elements.\n    arr_of_pairs -> list of pairs of indexes of the elements.\n    element -> element whose index has to be found.\n    rotations -> no of rotations to be performed.\n\n    Returns the index of the given element after performing the given rotations.\n    \"\"\"\n    # Step 1:\n    # Traverse through each pair of indexes\n    for pair in arr_of_pairs:\n        if element == arr[pair[0]] and pair[1] == rotations:\n            return pair[0]\n    # Step 2:\n    # Check if element is already present at the last index.\n    if element == arr[len(arr)-1] and rotations == 0:\n        return len(arr)-1\n\n    # Step 3:\n    # If element is present at last index and no of rotations is more than 0.\n    # Then the element is present at (last index - rotations).\n    if element == arr[len(arr)-1] and rotations > 0:\n        return len(arr)-1 - rotations\n    \n    return None", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\nimport collections\n\ndef find_Element(array,rotations,element,nRotations):\n    elements = collections.deque(array)\n    for i in range(nRotations):\n        elements.rotate(-1)\n    # print(elements)\n    for i in range(len(elements)):\n        if elements[i] == element:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, rots, ind, rot):\n    if rot == 0:\n        return arr[ind]\n    else:\n        if rots[rot-1][1] > rots[rot-1][0]:\n            return find_Element(arr, rots, arr.index(rots[rot-1][0])+1, rot-1)\n        else:\n            return find_Element(arr, rots, ind-1, rot-1)\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    word1 = ''\n    word2 = ''\n    for word in words:\n        if word[0] == 'p':\n            if word1 == '':\n                word1 = word\n            elif word2 == '':\n                word2 = word\n    return (word1, word2)", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    try:\n        return words[0].split()[0], words[1].split()[0]\n    except IndexError:\n        return \"None\", \"None\"\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    # Write your code here.\n    first = \"\"\n    second = \"\"\n    for word in words:\n        word = word.strip()\n        if word.startswith(\"p\"):\n            if first == \"\":\n                first = word\n            else:\n                second = word\n    return (first, second)\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    words = words[1:]\n    for word in words:\n        if word[0] == 'p':\n            return (word, words[words.index(word)])\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    res=[]\n    for word in words:\n        if word[0] == 'p':\n            res.append(word)\n    return tuple(res)\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    x = []\n    for i in words:\n        for j in i:\n            if j == 'p':\n                x.append(i)\n    return (x[0], x[1])\n\n# assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n# assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\", \"Cpp C\"])==('Python', 'PHP')\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for i in range(len(words)):\n        if words[i][0]=='p':\n            return(words[i],words[i])\n    return(None,None)\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return (p_words[0], p_words[1])\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    # TODO: IMPLEMENT THIS FUNCTION\n    raise NotImplementedError()\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\nfrom collections import Counter\n\n\ndef start_withp(words):\n    \"\"\"\n    Args:\n       words(list): A list of words containing 'p' at start of the word\n    Returns:\n       tuple of strings: The first word starting with 'p' and the second word starting with 'p'\n    \"\"\"\n    # all the words starting with 'p'\n    start_with_p = []\n    # count of words starting with 'p'\n    count = 0\n    for word in words:\n        if word[0] == 'p':\n            start_with_p.append(word)\n            count += 1\n    # choose first word starting with 'p'\n    if count == 0:\n        return ('', '')\n    else:\n        first = start_with_p[0]\n        for word in start_with_p:\n            if Counter(first) == Counter(word):\n                return (word, first)\n\n\n# +"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\nfrom collections import defaultdict\nfrom heapq import *\n\ndef max_sum_increasing_subseq(arr, i, j, k):\n    N = len(arr)\n    # memo[i][j] --> max sum increasing subsequence from arr[0] to arr[i]\n    # such that arr[j] is the kth element.\n    memo = defaultdict(lambda: float('-inf'))\n    \n    # If i == N, then the sub-sequence is empty and the max sum is 0.\n    if i == N:\n        return 0\n    \n    # If i == j, then the sub-sequence is of size 1 and the max sum\n    # is the kth element.\n    if i == j:\n        return arr[j]\n    \n    # If we have visited this state before, then return the value\n    # from the memo table.\n    if memo[i][j] > 0:\n        return memo[i][j]\n    \n    # If arr[i] < arr[j], then the max sum of the increasing subsequence\n    # including arr[j] is max( arr[j] + max_sum(arr[0], i-1, j-1), \n    #                         max_sum(arr[0], i-1, j))\n    if arr[i] < arr[j]:\n        memo[i][j] = max(arr[j] + max_sum_increasing_subseq(arr, i-1, j-1, k),\n                          max_sum_increasing_subseq(arr, i-1, j, k))\n        return memo[i][j]\n\n    # If arr[i] > arr[j], then the max sum of the increasing subsequence\n    # including arr[j] is max( arr[j] + max_sum(arr[i], i+1, j+1), \n    #                         max_sum(arr[i], i+1, j))\n    if arr", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    \"\"\"\n    :type arr: List[int]\n    :type n: int\n    :type k: int\n    :type i: int\n    :rtype: int\n    \"\"\"\n    # Your code here\n    if i >= n:\n        return 0\n    if i == 0:\n        if k >= 1:\n            return arr[i] + max_sum_increasing_subseq(arr, n, k-1, i+1)\n        return max_sum_increasing_subseq(arr, n, k, i+1)\n\n    dp = [0 for _ in range(n)]\n    dp[i] = arr[i]\n    for j in range(i):\n        if arr[j] > arr[i] and k >= 1:\n            dp[i] += dp[j]\n            k -= 1\n    return max(dp[i] + max_sum_increasing_subseq(arr, n, k, i+1), max_sum_increasing_subseq(arr, n, k, i+1))\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\nfrom heapq import heappush, heappop\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    \"\"\"\n    :param arr:\n    :param n:\n    :param k:\n    :param i:\n    :return:\n    \"\"\"\n    if i == n:\n        return arr[i-1]\n    if i == n-1:\n        return max(arr[i], arr[i-1] + arr[k-1])\n\n    max_sum = arr[i-1]\n    # keeping track of the values at which the subsequence starts\n    # and also include a given kth element which is after i, i.e., k > i\n    # e.g., [1, 101, 2, 3, 100, 4, 5] with 3\n    # max_sum = max(arr[i-1], arr[i] + arr[k-1])\n    # 1st element = [1]\n    # 2nd element = [101, 2, 3, 100, 4, 5] with 4\n    # 3rd element = [2, 3, 100, 4, 5] with 5\n    # 4th element = [3, 100, 4, 5] with 6\n    max_sum_for_prefix = dict()\n    # keep a max heap of max_sum_for_prefix for the prefix till i-1\n    max_sum_prefix_heap = [(-max_sum, i-1)]\n    # keep a min heap of max_sum_for_prefix for the prefix till i-1\n    min_sum_prefix_heap = [(-max_sum, i-1)]\n\n    while max_sum_prefix_heap and min_sum_prefix_heap:\n        max_sum_prefix = -he", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    res = 0\n    for j in range(i, n):\n        if j != n-1:\n            if arr[j+1] > arr[j]:\n                res = max(res, arr[j] + max_sum_increasing_subseq(arr, n, k, j+1))\n            else:\n                res = max(res, max_sum_increasing_subseq(arr, n, k, j+1))\n        else:\n            if arr[j] < arr[k-1]:\n                res = max(res, arr[j])\n            else:\n                res = max(res, arr[j] + max_sum_increasing_subseq(arr, n, k, j))\n    return res\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, i, k):\n    prev = 0\n    curr = arr[i]\n    dp = [0 for _ in range(n)]\n    for j in range(i+1, n):\n        if arr[j] >= curr:\n            dp[j] = dp[j-1] + arr[j]\n            curr = arr[j]\n        else:\n            dp[j] = prev\n            prev = curr\n            curr = arr[j]\n\n    print(dp)\n    return dp[k]\n\narr = [1, 101, 2, 3, 100, 4, 5]\nn = len(arr)", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    if k == 1:\n        return max_sum_increasing_subseq_helper(arr, n, i)\n    \n    #max of ith element and max of prefix\n    ans = max(arr[i], max_sum_increasing_subseq_helper(arr, n, i))\n    \n    #max of prefix and of remaining elements with k-1th index moved to i position\n    ans = max(ans, max_sum_increasing_subseq_helper(arr, n, k - 1) + max_sum_increasing_subseq_helper(arr, n, i))\n    \n    return ans\n\ndef max_sum_increasing_subseq_helper(arr, n, i):\n    if i < 0 or i >= n:\n        return 0\n    \n    if max_sum_increasing_subseq_memo[n][i] > -1:\n        return max_sum_increasing_subseq_memo[n][i]\n    \n    #max of ith element and max of prefix\n    ans = max(arr[i], max_sum_increasing_subseq_helper(arr, n, i - 1))\n    \n    #max of prefix and of remaining elements with k-1th index moved to i position\n    ans = max(ans, max_sum_increasing_subseq_helper(arr, n, i - 1) + max_sum_increasing_subseq_helper(arr, n, i + 1))\n    \n    max_sum_increasing_subseq_memo[n][i] = ans\n    \n    return ans\n\nmax_sum_increasing_subseq_memo = [[-1 for _ in range(10)] for _ in range(10)]\n\narr = [1, 101, 2, 3, 100, ", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, i, k):\n\n    if (k < i) or (i < 0 or k < 0) or (i >= n) or (k >= n):\n        return 0\n\n    # if prefix[i] is already present as part of any increasing subsequence then\n    # we will not add it to any other increasing subsequence.\n    if arr[i] >= arr[k]:\n        return max_sum_increasing_subseq(arr, n, i+1, k)\n    else:\n        # if prefix[i] is less than prefix[k] then we need to try to find\n        # sum of increasing subsequence by including prefix[k] as well\n        return max(arr[i] + max_sum_increasing_subseq(arr, n, i+1, k),\n                   arr[k] + max_sum_increasing_subseq(arr, n, i, k-1))\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, x):\n    \"\"\"\n    Approach:\n        The kth element after i is the maximum value from {arr[i+1], arr[i+2], arr[i+3] ... arr[n-1] } .\n        Since the array is sorted, we can start scanning from the kth element and just need to keep track of the max_sum till kth element, \n        which is just max_sum of all the increasing subsequence till k-1.\n        If the maximum value from {arr[i+1], arr[i+2], arr[i+3] ... arr[n-1] } is greater than arr[k], we can include it as a part of increasing subsequence.\n        It will be better to save max_sum values instead of using the max_sum variable.\n        We can go ahead and include it and will still be able to have max_sum values if we were to include it.\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    max_sum = [0]*(n+1) # max_sum[i] = max(max_sum[i-1], max_sum[i] + arr[i])\n    for i in range(1,n+1):\n        for j in range(i-1, 0, -1):\n            max_sum[i] = max(max_sum[j] + arr[i], max_sum[i])\n    max_sum = max_sum[x]\n    print(max_sum)\n    return max_sum\n\narr = [1, 101, 2, 3, 100, 4, 5 ]\nn = len(arr)\nk = 4\nx = 6", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\nfrom collections import defaultdict\n\ndef max_sum_increasing_subseq(nums, k, i, j):\n    if j-i < k:\n        return float('-inf')\n\n    if i == j:\n        return nums[i]\n\n    table = defaultdict(int)\n    table[nums[i]] = 1\n    max_val = 0\n\n    for j in range(i+1, j+1):\n        if j-i < k:\n            break\n        # Get the max for prefix till j-1\n        if nums[j] - nums[i] in table:\n            max_val = max(max_val, table[nums[j] - nums[i]] + nums[j])\n\n        table[nums[j]] += 1\n\n    return max_val + max_sum_increasing_subseq(nums, k, i+1, j)\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, kth, i, j):\n    if j - i < kth - i:\n        return 0\n    if j - i == kth - i:\n        return arr[i] + arr[j]\n    else:\n        return max(arr[i] + max_sum_increasing_subseq(arr, kth, i+1, j),\n                   max_sum_increasing_subseq(arr, kth, i, j-1),\n                   max_sum_increasing_subseq(arr, kth-1, i+1, j))\n\n\ndef main():\n    arr = [1, 101, 2, 3, 100, 4, 5]\n    print max_sum_increasing_subseq(arr, 7, 0, len(arr)-1)\n\n"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tup,x,y):\n    temp=tup[x]\n    tup[x]=tup[y]\n    tup[y]=temp\n    return tup\n\n#assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n#assert colon_tuplex((\"HELLO\", 5, [], True) ,5,2)==(\"HELLO\", 5, [], True)", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, pos, val):\n    # Write your code here\n    print(tuplex)\n    print(type(tuplex))\n    print(pos)\n    print(val)\n    tuplex = tuplex + (val,)\n    # print(tuplex)\n    del tuplex[pos]\n    return tuplex\n\ndef colon_tuplex(tuplex, pos, val):\n    # Write your code here\n    if tuplex == []:\n        tuplex = ()\n    tuplex = tuplex + (val,)\n    del tuplex[pos]\n    return tuplex\n\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\n# +\n#Write a function to get a colon of a tuple.\ndef colon_tuplex(tup,start,end):\n    return tup[0:start],tup[start:end],tup[end:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuplex,col_start,col_end):\n    tuplex = []\n    for i in range(col_start, col_end):\n        tuplex.append(tuplex[i])\n    return tuplex\n\n#-------------------------------\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tup, ind, value):\n    list_tup = list(tup)\n    list_tup[ind] = value\n    return tuple(list_tup)\n\n\n# +\n# test\ntup = (\"HELLO\", 5, [], True) ", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\n# Solution \n\ndef colon_tuplex(tup, start, end):\n    return tup[:start] + (tup[start:end],) + tup[end:]\n\n# Test Case\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, *args):\n    return tup + list(args)\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup,start,stop):\n    return tup[:start], tup[start:stop], tup[stop:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup,start,end):\n    tup=list(tup)\n    if start>len(tup):\n        start=len(tup)\n    if end>len(tup):\n        end=len(tup)\n    for i in range(start,end):\n        tup[i]=tuple(tup[i])\n    return tuple(tup)\n\n#assert colon_tuplex(('HELLO', 5, [], True),2,50)==('HELLO', 5, [50], True)\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, *args):\n    t = tuplex[:]\n    t.insert(args[0],args[1])\n    return t\n    "], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(l1,l2,num):\n    return sorted(l1[len(l1)-num:]+l2[len(l2)-num:], reverse=True)\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\nfrom itertools import combinations\n\ndef large_product(nums1, nums2, k):\n    nums1.sort()\n    nums2.sort()\n    if len(nums1) < k:\n        return None\n    elif len(nums2) < k:\n        return None\n    else:\n        products = []\n        for p in range(0, len(nums1)):\n            for i in range(0, len(nums1)-p):\n                products.append(nums1[i] * nums2[i+p])\n        return sorted(products, reverse=True)[0:k]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, num):\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    product=[]\n    for i in range(num):\n        product.append(list1[i]*list2[i])\n    return product\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(nums1,nums2,n):\n    return sorted(large_product_aux(nums1,nums2,n),reverse=True)[0:n]\n\n\ndef large_product_aux(nums1,nums2,n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [nums1[0]*nums2[0]]\n    else:\n        aux1 = large_product_aux(nums1,nums2,n-1)\n        aux2 = large_product_aux(nums1,nums2,n-2)\n        res = []\n        for i in range(len(nums1)-1):\n            for j in range(len(nums2)-1):\n                if aux1[0] < nums1[i]*nums2[j]:\n                    res.append(nums1[i]*nums2[j])\n                if aux2[0] < nums1[i]*nums2[j]:\n                    res.append(nums1[i]*nums2[j])\n                if aux1[0] == nums1[i]*nums2[j]:\n                    pass\n                if aux2[0] == nums1[i]*nums2[j]:\n                    pass\n        return res\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(arr1, arr2, n):\n    largest_product = []\n    if len(arr1) == len(arr2):\n        for i in range(0, len(arr1)):\n            product = arr1[i] * arr2[i]\n            if product not in largest_product:\n                largest_product.append(product)\n            if len(largest_product) >= n:\n                largest_product.sort(reverse=True)\n                return largest_product[:n]\n    else:\n        return None\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    Returns the n largest products from lists 1 and 2.\n    :param list1: list\n    :param list2: list\n    :param n: int\n    :return: list\n    \"\"\"\n    return sorted(list1+list2, reverse=True)[:n]\n\n# assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1,list2,n):\n    l1=list1[:]\n    l2=list2[:]\n    l1.sort()\n    l2.sort()\n    count=0\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if i==j:\n                continue\n            if l1[i]*l2[j]>l1[i+1]*l2[j+1]:\n                count+=1\n                if count==n:\n                    break\n                else:\n                    continue\n            elif l1[i]*l2[j]<l1[i+1]*l2[j+1]:\n                break\n    if count==n:\n        return [l1[i]*l2[j] for i in range(len(l1)) for j in range(len(l2)) if count==n]\n    else:\n        return -1\n\n\n# -\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(L, R, k):\n    '''\n    :type L: List[int]\n    :type R: List[int]\n    :type k: int\n    :rtype: List[int]\n    '''\n    L_large = []\n    R_large = []\n    for a in L:\n        for b in R:\n            product = a * b\n            if len(L_large) < k or product > L_large[-1]:\n                L_large.append(product)\n            if len(R_large) < k or product > R_large[-1]:\n                R_large.append(product)\n    return L_large[-k:], R_large[-k:]", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(A,B,k):\n    if not A or not B:\n        return []\n    sortA = sorted(A,reverse=True)\n    sortB = sorted(B,reverse=True)\n    products = []\n    for i in range(len(sortA)-k):\n        product = sortA[i]*sortB[i]\n        products.append(product)\n    return products\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(arr1, arr2, num):\n    arr3 = []\n    for i in range(len(arr1)-1,-1,-1):\n        for j in range(len(arr2)-1,-1,-1):\n            product = arr1[i] * arr2[j]\n            arr3.append(product)\n            if num == len(arr3):\n                return arr3\n\n\narr1 = [1, 2, 3, 4, 5, 6]\narr2 = [3, 6, 8, 9, 10, 6]"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x > y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x, y):\n    if x>y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(num1, num2):\n    return num1 if num1 > num2 else num2\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(num1,num2):\n    return num1 if num1 > num2 else num2\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n    ", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x,y):\n    if x > y:\n        return x\n    else:\n        return y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    return x if x>y else y\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x>=y:\n        return x\n    else:\n        return y\n    "], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    return tuple(string)\n\n#Test", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(str1):\n    res = ()\n    for char in str1:\n        res = res + (char,)\n    return res\n\n\n# The asserts are just for testing the function\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string)\n\n# assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    result = []\n    for char in string:\n        result.append(char)\n    return tuple(result)\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    list = string.split()\n    return tuple(list)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s.split())\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    new_string = string.strip()\n    new_string = new_string.replace(',','')\n    new_string = new_string.replace('.','')\n    new_string = new_string.replace(' ','')\n    new_string = tuple(new_string)\n    return new_string\n\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string.split(' '))\n\n# Hacker rank 2000\n\n\ndef string_to_tuple2(string):\n    return tuple(string.split())\n\n\ndef string_to_tuple3(string):\n    return tuple(string.split(\" \"))\n\n\ndef string_to_tuple4(string):\n    return tuple(string.split(\",\"))\n\n\ndef string_to_tuple5(string):\n    return tuple(string.split())\n\n\ndef string_to_tuple6(string):\n    return tuple(string.split(\",\"))\n\n\n#https://www.kite.com/python/answers/how-to-convert-string-to-tuple-in-python\ndef string_to_tuple7(string):\n    return tuple(string.replace(\" \", \"\"))\n\n#https://stackoverflow.com/questions/8493715/how-to-convert-string-to-tuple\ndef string_to_tuple8(string):\n    return tuple(string.replace(\" \", \"\"))\n\n\nstring_to_tuple_test = [(\"python 3.0\"), (\"c++ 14\"), (\"java 11, 8\"), (\"go 1.11.1\"), (\"php 7.2.5\")]\nfor i in string_to_tuple_test:\n    print(string_to_tuple(i))\n    print(string_to_tuple2(i))\n    print(string_to_tuple3(i))\n    print(string_to_tuple4(i))\n    print(string_to_tuple5(i))\n    print(string_to_tuple6(i))\n    print(string_to_tuple7(i))\n    print(string_to_tuple8(i))\n    print(\"-----------------\")\n\n# +\nstring = \"python 3.0\"\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    tuple = ()\n    for letter in string:\n        tuple = tuple + (letter,)\n    return tuple\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string.replace(\",\",\" \"))\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num):\n    return num | (num >> 1) | (num >> 2) | (num >> 4) | (num >> 8) | (num >> 16)\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(number):\n    temp = number\n    while temp:\n        temp &= temp - 1\n    return temp + 1\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    num_bits = len(bin(n)) - 2\n    mask = 1 << (num_bits - 1)\n    return n | mask\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    #write your code here\n    if n==0:\n        return 0\n    else:\n        return 1 << (n-1).bit_length()\n\n#set_left_most_unset_bit(10)\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num):\n    # 1. Initialize left most unset bit to 0\n    # 2. For every bit in num, set the left most unset bit to 1 if the current bit in num is 0\n    left_most_unset_bit = 0\n\n    for bit in range(32):\n        if ((num >> bit) & 1) == 0:\n            left_most_unset_bit |= (1 << bit)\n\n    return left_most_unset_bit\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(x):\n    # TODO: Write your code here\n    x = x & (x - 1)\n    return x\n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num):\n    for i in range(1,10):\n        if num & 1 == 0:\n            return num | i\n        num = num >> 1\n    return num\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\n# set the left most unset bit\ndef set_left_most_unset_bit(n):\n    return n | (n + 1)\n\n# function to test the above function\ndef test_set_left_most_unset_bit():\n    assert set_left_most_unset_bit(10) == 14\n\n# code execution test case\ntest_set_left_most_unset_bit()", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(number):\n    # Write your code here\n    return number | (number-1)\n\n\n# Tests"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n    return (1/3)*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\n# +\n#Test Function\ndef volume_cone(radius, height):\n    assert type(radius) == int or type(radius) == float, \"Radius must be an integer or a float\"\n    assert type(height) == int or type(height) == float, \"Height must be an integer or a float\"\n    volume = 1/3 * radius**2 * height\n    return volume\n\n\n# -\n\n#Test Function", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius, height):\n    vol = 1/3 * radius ** 2 * height\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n    return (1/3)*pi*(r**2)*h\n\n# Test your function with the following values.", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    return 1.0/3.0 * radius**2 * height\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n    import math\n    return (1/3)*math.pi*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(base,height):\n    pi = 3.1415926535897927\n    return (1/3)*pi*base*base*height\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    return radius**2 * height/3 * 3.141592653589793\n\n# Test function\n# radius = 5\n# height = 12\n# print(volume_cone(radius, height))", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(r,h):\n    return 1/3*pi*r**2*h\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius,height):\n    return (1/3)*pi*(radius**2)*height\n    "], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lis):\n    \"\"\"\n    Function to print positive numbers in a list.\n    \"\"\"\n    for i in lis:\n        if i > 0:\n            print(i)\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(arr):\n    pos_arr = []\n    for i in arr:\n        if i > 0:\n            pos_arr.append(i)\n    return pos_arr\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(numbers):\n    \"\"\"Prints out the positive numbers in numbers\"\"\"\n    for number in numbers:\n        if number > 0:\n            print(number)\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    lst_copy = lst[:]\n    lst_copy.remove(0)\n    return lst_copy\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nums):\n    print(nums[nums > 0])\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nums):\n    ans = []\n    for i in nums:\n        if i > 0:\n            ans.append(i)\n    return ans\n\ndef pos_nos_2(nums):\n    return [i for i in nums if i > 0]\n\n# print(pos_nos([-1,-2,1,2]))\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    for i in lst:\n        if i>0:\n            print(i,end=\" \")\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lst):\n    pos=[]\n    for i in range(len(lst)):\n        if lst[i]>0:\n            pos.append(lst[i])\n    return pos\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    return [n for n in lst if n>0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(numbers):\n    \"\"\"\n    Write a python function to print positive numbers in a list.\n    :param numbers: list of numbers\n    :return: list of positive numbers\n    \"\"\"\n    return [numbers[i] for i in range(len(numbers)) if numbers[i] > 0]\n\n# 1,2\n# 1,2\n# 1,2\n# 1,2"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    if not grid:\n        return 0\n\n    num_rows, num_cols = len(grid), len(grid[0])\n    if num_rows < 2 or num_cols < n:\n        return max(sum(row) for row in grid)\n\n    max_sum = sum(grid[0])\n    for i in range(1, num_rows - n + 1):\n        for j in range(1, num_cols - n + 1):\n            sum_val = sum(grid[i][j:j + n])\n            if sum_val > max_sum:\n                max_sum = sum_val\n\n    return max_sum", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    n = len(grid)\n    grid_max = [0] * n\n    grid_min = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                if j == 0:\n                    grid_max[j] = grid[i][j]\n                    grid_min[j] = grid[i][j]\n                elif j == n - 1:\n                    grid_max[j] = max(grid_max[j - 1], grid[i][j])\n                    grid_min[j] = min(grid_min[j - 1], grid[i][j])\n            elif i == n - 1:\n                if j == 0:\n                    grid_max[j] = max(grid_max[j], grid[i][j])\n                    grid_min[j] = min(grid_min[j], grid[i][j])\n                elif j == n - 1:\n                    grid_max[j] = max(grid_max[j], grid[i][j])\n                    grid_min[j] = min(grid_min[j], grid[i][j])\n            else:\n                grid_max[j] = max(grid_max[j], grid[i][j])\n                grid_min[j] = min(grid_min[j], grid[i][j])\n    sum = 0\n    for i in range(n):\n        sum += grid[0][i]\n    for j in range(n):\n        sum += grid[n - 1][j]\n    for i in range(1, n - 1):\n        sum += grid[i][0]\n        sum += grid[i][n - 1]\n    for j in range(1, n - 1):\n        sum += grid[0][j]\n        sum += grid[n - 1][j]\n    print(sum)\n    for i in range(n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, m):\n    sums = [ [0] * len(grid[0]) for _ in range(m) ]\n    max_sum = 0\n\n    for i in range(m):\n        for j in range(len(grid[0])):\n            if i == 0 or j == 0:\n                sums[i][j] = grid[i][j]\n            else:\n                sums[i][j] = grid[i][j] + max(sums[i-1][j], sums[i-1][j-1], sums[i][j-1])\n                max_sum = max(max_sum, sums[i][j])\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    max_sum, m = 0, len(grid)\n    for i in range(m):\n        for j in range(n):\n            max_sum = max(max_sum, grid[i][j] + grid[i][j + 1])\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nfrom array import array\n\n\ndef max_sum_rectangular_grid(grid, n):\n    # Write your code here\n    max_sum = 0\n    grid = [list(row) for row in grid]\n    row_sum = [0] * n\n    for i in range(0, n):\n        row_sum[i] = grid[0][i] + grid[1][i]\n    for i in range(2, len(grid)):\n        for j in range(0, n):\n            left = grid[i-2][j]\n            right = grid[i-1][j]\n            down = row_sum[j]\n            min_val = min(left, right, down)\n            max_sum = max(max_sum, min_val)\n            row_sum[j] = min_val + grid[i][j]\n    return max_sum\n\n\ndef main():\n    print(max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3))\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\nfrom typing import List\n\n\ndef max_sum_rectangular_grid(arr: List[List[int]], n: int) -> int:\n    sum_arr = []\n    for i in range(n):\n        for j in range(n):\n            sum_arr.append(arr[i][j])\n    # find the maximum sum\n    max_sum = max(sum_arr)\n    for i in range(1, n):\n        for j in range(1, n):\n            # sum of numbers in a row\n            sum_row = sum_arr[i*n + j - 1:i*n + j + n - 1]\n            # sum of numbers in a column\n            sum_column = sum_arr[j:j + n*n:n]\n            # sum of numbers in a diagonal\n            sum_diagonal = sum_arr[j + n - 1:j + n + n - 1]\n            # sum of numbers in a reverse diagonal\n            sum_reverse_diagonal = sum_arr[j + n - 1 + n*n:j + n*n + 1]\n            # check if we get the maximum sum\n            if max(sum_row, sum_column, sum_diagonal, sum_reverse_diagonal) > max_sum:\n                max_sum = max(sum_row, sum_column, sum_diagonal, sum_reverse_diagonal)\n    return max_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    pass\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    if len(grid) == 0:\n        return 0\n    \n    result = 0\n    for i in range(n):\n        result = max(result, grid[0][i] + max_sum_rectangular_grid(grid[1:], n - 1))\n    \n    return result\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    # O(N^3) time and O(N^2) space\n    if not grid or len(grid) == 0 or len(grid[0]) == 0 or len(grid) < n or len(grid[0]) < n:\n        return 0\n    m, n = len(grid), len(grid[0])\n    ans = float(\"-inf\")\n    for i in range(m):\n        for j in range(n):\n            for k in range(n):\n                ans = max(ans, sum_rectangular_grid(grid, i, j, k, n))\n    return ans\n\ndef sum_rectangular_grid(grid, i, j, k, n):\n    sum = 0\n    for x in range(i, i + n):\n        sum += grid[x][k]\n    for y in range(j, j + n):\n        sum += grid[k][y]\n    return sum\n\ndef test():\n    assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    assert max_sum_rectangular_grid([ [0, 0, 0], [0, 0, 0] ], 2) == 0\n\ntest()\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nfrom typing import List\n\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            row_sum = 0\n            for k in range(i + 1):\n                row_sum += grid[i][k]\n            for k in range(j + 1):\n                row_sum += grid[k][j]\n            if max_sum < row_sum:\n                max_sum = row_sum\n    return max_sum\n\n\ndef test_max_sum_rectangular_grid() -> None:\n    assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(words):\n    #start = time.clock()\n    even_word = []\n    #for i in words:\n    #    if len(i)%2 == 0:\n    #        even_word.append(i)\n    even_word = [i for i in words if len(i)%2 == 0]\n    #print even_word\n    #print(len(even_word))\n    #print(even_word)\n    return max(even_word, key = len)\n    #end = time.clock()\n    #print(end-start)\n    #return None\n\n#assert find_Max_Len_Even(\"python language\") == \"language\"\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    \n    #initialize variables\n    max_len = 0\n    max_word = \"\"\n    \n    for i in range(len(string)):\n        if string[i].isdigit():\n            continue\n        \n        # max_len is even, so we append a character\n        if len(string[i:])%2 == 0:\n            max_word += string[i]\n            max_len += 1\n        \n        # max_len is odd, so we append an empty string\n        else:\n            max_word += \"\"\n    \n    return max_word\n        ", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(word):\n    length = len(word)\n    max_len = 0\n    max_word = \"\"\n    for i in range(length):\n        if word[i].isalpha():\n            if i%2 == 0:\n                if len(word[i:]) > max_len:\n                    max_len = len(word[i:])\n                    max_word = word[i:]\n    return max_word\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(word):\n    max_len = 0\n    max_word = ''\n    word = word.replace(' ','')\n    for i in range(0, len(word)):\n        if word[i].isdigit():\n            continue\n        if i+1 < len(word) and word[i+1].isdigit():\n            continue\n        if i%2 == 0:\n            temp = word[:i+1]\n            if len(temp) > max_len:\n                max_len = len(temp)\n                max_word = temp\n    return max_word", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    words = string.split()\n    even_word = \"\"\n    even_len = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > even_len:\n            even_word = word\n            even_len = len(word)\n    return even_word\n\n# This is an input class. Do not edit.", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n    string = string.split()\n    string = [word for word in string if word[0] == word[-1] and len(word) > 1]\n    return max(string, key = len)\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(text):\n    max_word = ''\n    max_len = 0\n    for i in range(0,len(text)):\n        if i % 2 == 0:\n            word = text[i:i+1]\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n    return max_word\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(st):\n    max_len_odd = -1\n    max_len_even = -1\n    odd_len = 0\n    even_len = 0\n    for i in range(len(st)):\n        if st[i].isalpha():\n            if st[i].islower():\n                odd_len += 1\n                even_len = 0\n            else:\n                even_len += 1\n                odd_len = 0\n            if even_len > max_len_even:\n                max_len_even = even_len\n            if odd_len > max_len_odd:\n                max_len_odd = odd_len\n    if max_len_even == -1:\n        return st[0:max_len_odd]\n    else:\n        return st[0:max_len_even]\n\nst = \"python language\"", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    str=str.split()\n    even_words=[]\n    odd_words=[]\n    for i in str:\n        if len(i)%2==0:\n            even_words.append(i)\n        else:\n            odd_words.append(i)\n    even_words.sort(key=len)\n    odd_words.sort(key=len)\n    max_len=0\n    for i in even_words:\n        if len(i)>max_len:\n            max_len=len(i)\n            max_word=i\n    return max_word", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(str):\n    L= len(str)\n    Max=0\n    i=0\n    while(i<L):\n        if(str[i]==' '):\n            Max=max(Max,i-1)\n            i+=1\n        i+=1\n    Max=max(Max,L-1)\n    for j in range(L):\n        if(str[j]==' '):\n            Max=max(Max,j)\n    return str[Max:]\n\n#print(find_Max_Len_Even(\"python language\"))\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(nums, num):\n    \"\"\"\n    :param nums: an array of integers\n    :param num: an integer to find in the array\n    :return: the index of the last occurrence of num in nums\n    \"\"\"\n    for i in range(len(nums) - 1, 0, -1):\n        if num == nums[i]:\n            return i\n    return -1\n\n\ndef test_find_last_occurrence():\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6) == 7\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 8) == 9\n    assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9) == 10\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(lst, num):\n    i = 0\n    j = len(lst) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if lst[mid] == num:\n            if i == j:\n                return mid\n            if lst[i] == num:\n                j = mid - 1\n            if lst[j] == num:\n                i = mid + 1\n        elif lst[mid] < num:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return -1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, num):\n    # Input validation\n    assert type(array) == list\n    assert type(num) == int\n    assert len(array) > 0\n\n    # Cases\n    if array[0] == num:\n        return 0\n    if array[-1] == num:\n        return len(array) - 1\n    if array[0] < num and array[-1] > num:\n        low = 0\n        high = len(array) - 1\n\n        while low < high:\n            mid = (low + high) // 2\n            if array[mid] == num:\n                high = mid\n            elif array[mid] < num:\n                low = mid + 1\n            else:\n                high = mid\n\n        return low\n\n    if array[0] > num and array[-1] < num:\n        low = 0\n        high = len(array) - 1\n\n        while low < high:\n            mid = (low + high) // 2\n            if array[mid] == num:\n                low = mid\n            elif array[mid] < num:\n                low = mid + 1\n            else:\n                high = mid\n\n        return high\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, number):\n    if len(arr) < 1:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n\n    while left <= right:\n        if arr[mid] == number:\n            if arr[mid] == arr[right]:\n                return right\n            if arr[mid] < arr[right]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        elif arr[mid] < number:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n        mid = (left + right) // 2\n\n    return -1\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, number):\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == number:\n            last_index = i\n    return last_index\n\n# Output:\n# -1", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, num):\n    i = 0\n    j = len(arr) - 1\n\n    while i <= j:\n        mid = (i + j) // 2\n\n        if arr[mid] == num:\n            if i == mid:\n                return j\n            elif j == mid:\n                return i\n            elif arr[i] < num and arr[j] > num:\n                j = mid - 1\n            else:\n                i = mid + 1\n        elif arr[mid] < num:\n            i = mid + 1\n        else:\n            j = mid - 1\n\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(array, number):\n    # Write your code here\n    low = 0\n    high = len(array)-1\n    mid = -1\n    while(low <= high):\n        mid = (low + high)//2\n        if array[mid] == number:\n            low = mid + 1\n        elif array[mid] > number:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return high\n\n\n# +\ndef test_function(test_case):\n    array = test_case[0]\n    number = test_case[1]\n    solution = test_case[2]\n    output = find_last_occurrence(array, number)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5, 3])\ntest_function([[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10, 0])\ntest_function([[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6, 5])\ntest_function([[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 8, 8])\ntest_function([[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9, 9])\n\n# -", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(nums, num):\n    start = 0\n    end = len(nums) - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if num < nums[mid]:\n            end = mid - 1\n        elif num > nums[mid]:\n            start = mid + 1\n        elif num == nums[mid]:\n            if start > 0 and num == nums[start - 1]:\n                end = mid - 1\n            elif end < len(nums) - 1 and num == nums[end + 1]:\n                start = mid + 1\n            else:\n                return mid\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, item):\n    return arr.index(max(set(arr), key=arr.count))\n\n\n# -\n\nfind_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\nfrom bisect import bisect_left, bisect_right\n\ndef find_last_occurrence(A, elem):\n    \"\"\"\n    Returns the index of the last occurrence of a number in a sorted array.\n    \"\"\"\n    i = bisect_left(A, elem)\n    j = bisect_right(A, elem)\n    return -1 if i >= j else j - 1\n\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(input):\n    output = []\n    current_count = 0\n    for i in input:\n        if output and output[-1] == i:\n            output[-1][0] += 1\n        else:\n            output.append([current_count, i])\n            current_count = 1\n    return output\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    temp = []\n    for i in range(0, len(lst)):\n        if i == 0:\n            temp.append([lst[i]])\n        elif lst[i] == lst[i - 1]:\n            temp[-1].append(lst[i])\n        else:\n            temp.append([lst[i]])\n    return temp\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    result = []\n    tmp = []\n    for val in lst:\n        if len(tmp) == 0:\n            tmp.append(val)\n        else:\n            if tmp[-1] == val:\n                tmp.append(val)\n            else:\n                result.append(len(tmp))\n                result.append(tmp[0])\n                tmp = []\n                tmp.append(val)\n    if len(tmp) > 0:\n        result.append(len(tmp))\n        result.append(tmp[0])\n    return result\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(numbers):\n    new_list = []\n    for x in numbers:\n        if x == new_list[-1]:\n            new_list[-1] += 1\n        else:\n            new_list.append(x)\n    return new_list\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    \"\"\"\n    modified_encode(lst) -> [item] | [[item, count], item, ...]\n    Modified run-length encoding of lst.\n\n    >>> modified_encode([1,1,2,3,4,4,5,1]) == [[2, 1], 2, 3, [2, 4], 5, 1]\n    True\n    >>> modified_encode([1,1,2,3,4,5]) == [[1, 1], 2, 3, 4, 5]\n    True\n    \"\"\"\n    output = []\n    length = len(lst)\n    i = 0\n    while i < length:\n        if lst[i] != lst[i + 1]:\n            output.append(lst[i])\n            output.append(1)\n        else:\n            j = i + 1\n            count = 1\n            while j < length and lst[j] == lst[i]:\n                count += 1\n                j += 1\n            output.append(count)\n            output.append(lst[i])\n        i += 1\n    return output\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(l):\n    if len(l)==0:\n        return []\n    encoded_list = []\n    count = 1\n    prev_el = l[0]\n    for el in l:\n        if el == prev_el:\n            count += 1\n        else:\n            encoded_list.append(count)\n            encoded_list.append(el)\n            count = 1\n            prev_el = el\n    encoded_list.append(count)\n    return encoded_list\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(alist):\n    new_list = []\n    temp = []\n    for num in alist:\n        if num not in temp:\n            temp.append(num)\n        else:\n            if len(temp) == 1:\n                new_list.append([temp[0],1])\n            else:\n                new_list.append([temp[-1], len(temp)])\n            temp.append(num)\n            temp = temp[:-1]\n    new_list.append([temp[-1], len(temp)])\n    return new_list\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(in_list):\n    out_list = []\n    element = in_list[0]\n    count = 1\n    for i in range(1, len(in_list)):\n        if element == in_list[i]:\n            count += 1\n        else:\n            out_list.append(count)\n            out_list.append(element)\n            element = in_list[i]\n            count = 1\n    out_list.append(count)\n    out_list.append(element)\n    return out_list\n\n\ndef test_modified_encode():\n    assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(lst):\n    rle_list = []\n    for i in range(len(lst)):\n        if i+1 < len(lst) and lst[i] == lst[i+1]:\n            rle_list.append([lst[i], lst[i+1]])\n            i += 1\n        else:\n            rle_list.append(lst[i])\n    return rle_list\n\n\n#assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(items):\n    enc = []\n    enc.append([len(items), items[0]])\n    for i in items[1:]:\n        if enc[-1][0] == i:\n            enc[-1][0] += 1\n        else:\n            enc.append([1, i])\n    return enc\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sides):\n    \"\"\"\n    sides: a list of 3 positive integers (side lengths).\n\n    return: the maximum volume of a cuboid with given sum of sides.\n    \"\"\"\n    volumes = []\n    for i in range(sides[0] + 1):\n        for j in range(sides[1] + 1):\n            for k in range(sides[2] + 1):\n                if i + j + k == sides[0] + sides[1] + sides[2]:\n                    volumes.append(i * j * k)\n    return max(volumes)", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom itertools import product\n\ndef max_volume(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return max(product(range(n, 0, -1), repeat=3))\n\n\ndef max_volume_sum_sides(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return max(product(range(n, 0, -1), repeat=3), key=lambda x: sum(x))\n\n\ndef main():\n    print(max_volume(8))\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sides):\n    max_volume = 0\n    if sides > 0:\n        for i in range(1,sides+1):\n            for j in range(1,sides+1):\n                for k in range(1,sides+1):\n                    volume = i*j*k\n                    if volume > max_volume:\n                        max_volume = volume\n    return max_volume", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(side_length):\n    return (side_length**3)/6\n\n# My code\ndef max_volume(side_length):\n    if side_length % 2 == 0:\n        return side_length**2 / 4\n    else:\n        return (side_length**3)/6\n\n# Best practice\ndef max_volume(side_length):\n    if side_length % 2 == 0:\n        return side_length**2 / 4\n    else:\n        return (side_length**3)/6", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sides):\n    \"\"\"\n    :param sides: list of sides\n    :return: maximum volume of cuboid\n    \"\"\"\n    # make sure the sides are in the right order\n    sides = sorted(sides)\n    # check each case\n    for a in range(len(sides) - 2):\n        for b in range(a + 1, len(sides) - 1):\n            for c in range(b + 1, len(sides)):\n                if sum(sides) == a + b + c:\n                    return max(sides) * (a * b * c)\n    return None\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(s):\n    \"\"\"\n    :param s: (int)\n    :return: (int)\n    \"\"\"\n    return (s**3)/8\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sides):\n    max_volume = 0\n    for i in range(1, sides+1):\n        for j in range(1, sides+1):\n            for k in range(1, sides+1):\n                volume = i * j * k\n                if volume > max_volume:\n                    max_volume = volume\n    return max_volume\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(s):\n    if s == 0:\n        return 0\n    if s == 1 or s == 2 or s == 3:\n        return s\n    elif s == 4:\n        return 6\n    else:\n        return max(max_volume(s - 1), max_volume(s - 2), max_volume(s - 3), max_volume(s - 4))\n\ndef main():\n    s = int(input('Enter a side length: '))\n    print('The maximum volume of a cuboid with given sum of sides is:', max_volume(s))\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sides):\n    return sides * sides * sides\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\nfrom typing import List\n\n\ndef max_volume(s: int) -> int:\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides.\n    \"\"\"\n\n    if s < 2:\n        return s\n\n    nums = [1, 2, 4, 6, 8, 12, 16, 24]\n    for num in nums:\n        if s < num:\n            return s\n\n    for i in range(2, s + 1):\n        if s % i == 0:\n            return s // i\n\n    return s\n\n\ndef max_volume_recursive(s: int) -> int:\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides.\n    \"\"\"\n\n    if s < 2:\n        return s\n\n    return max(s, max(max_volume_recursive(s - i), max_volume_recursive(s - j))\n               for i in range(1, s // 2) for j in range(i + 1, s))\n\n\ndef max_volume_iterative(s: int) -> int:\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides.\n    \"\"\"\n\n    if s < 2:\n        return s\n\n    def max_volume_recursive(s: int) -> int:\n        \"\"\"\n        Find the maximum volume of a cuboid with given sum of sides.\n        \"\"\"\n\n        if s < 2:\n            return s\n\n        return max(s, max(max_volume_recursive(s - i), max_volume_recursive(s - j))\n                   for i in range(1, s // 2) for j in range(i + 1, s))\n\n    def max_volume_iterative(s: int) -> int:\n        \"\"\"\n        Find the maximum volume of a cuboid with given sum of sides.\n        \"\"\"\n\n        if s < 2:\n            return s\n\n        nums = [1, 2, 4, 6, 8, 12, 16, 24]\n        for num in nums:\n            if s < num:\n                return s\n\n        for i in range(2, s + 1):\n            if s % i == 0:\n               "], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(s):\n    return re.findall(r'\\b(\\w+){5}\\b', s)\n\n\ndef test_find_long_word():\n    assert find_long_word('Please move back to strem') == ['strem']\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\n\ndef find_long_word(string):\n    return re.findall(r'\\b[A-Za-z]{5,}\\b', string.lower())\n\n\n# def find_long_word(string):\n#     result = []\n#     pattern = re.compile(r'\\b[A-Za-z]{5,}\\b')\n#     for match in pattern.finditer(string.lower()):\n#         result.append(match.group(0))\n#     return result\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(str):\n    return re.findall(r'\\b\\w{5,}\\b',str)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nfrom test_framework import generic_test\nfrom test_framework.test_utils import enable_executor_hook\n\n\ndef find_long_word(string):\n    # TODO - you fill in here.\n    pass\n\n\n@enable_executor_hook\ndef find_long_word_wrapper(executor, string):\n    return executor.run(lambda: find_long_word(string))\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(text):\n    import re\n    return re.findall(r'\\b\\w{5,}\\b', text)\n\n# Test Code", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(string):\n    return re.findall(r'(\\w{5,})', string)", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\ndef find_long_word(text):\n    words = re.findall(r'\\w{5}',text)\n    return words", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(text):\n    \"\"\"\n    >>> find_long_word(\"This is the string\")\n    ['string']\n    >>> find_long_word(\"This is the string\")\n    ['string']\n    >>> find_long_word(\"Please move back to strem\")\n    ['strem']\n    \"\"\"\n    # return re.findall(r\"([a-zA-Z0-9]+)([a-zA-Z0-9]+[a-zA-Z0-9])([a-zA-Z0-9]+[a-zA-Z0-9][a-zA-Z0-9])([a-zA-Z0-9]+[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])([a-zA-Z0-9]+[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])\", text)\n    # return re.findall(r\"([a-zA-Z0-9]+)([a-zA-Z0-9]+[a-zA-Z0-9])([a-zA-Z0-9]+[a-zA-Z0-9][a-zA-Z0-9])([a-zA-Z0-9]+[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])([a-zA-Z0-9]+[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])\", text)\n    return re.findall(r\"([a-zA-Z0-9]+)([a-zA-Z0-9]+[a-zA-Z0-9])([a-zA-Z0-9]+[a-zA-Z0-9][a-zA-Z0-9])([a-zA-Z0-9]+[a-zA-Z0-9][a-", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(str_):\n    \"\"\"\n    str_: (string)\n    returns: (list)\n    \"\"\"\n    return re.findall(r'\\w{5,}', str_)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\n\ndef find_long_word(string):\n    \"\"\"\n    >>> find_long_word('Please move back to strem') == ['strem']\n    True\n    >>> find_long_word('I love you to death') == ['love']\n    True\n    >>> find_long_word('I love you to death and hate you to the grave.') == ['love', 'grave']\n    True\n    >>> find_long_word('I love you to death and hate you to the grave.') == ['grave']\n    True\n    >>> find_long_word('I love you to death and hate you to the grave.') == []\n    True\n    >>> find_long_word('I love you to death and hate you to the grave.') == ['death']\n    True\n    >>> find_long_word('I love you to death and hate you to the grave.') == ['hate']\n    True\n    >>> find_long_word('I love you to death and hate you to the grave.') == ['love']\n    True\n    \"\"\"\n    return re.findall(r'\\b\\w{5,}\\b', string)"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\nfrom itertools import accumulate\n\ndef sum_difference(n):\n    \"\"\"\n    Args:\n        n (int): Natural number to calculate the sum difference.\n\n    Returns:\n        int: Sum difference of first n natural numbers\n    \"\"\"\n    num_list = list(range(1, n + 1))\n    sum_list = list(accumulate(num_list))\n    return sum(num_list) ** 2 - sum(sum_list) ** 2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    total=1\n    sum_total=0\n    for i in range(1,n+1):\n        total+=i\n        sum_total+=i**2\n    return total**2-sum_total**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    sum_square = sum(range(1, n+1))**2\n    return sum_square - sum(range(1, n+1))**2\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    \"\"\"\n    Sum difference\n    \"\"\"\n    return sum(range(n)) ** 2 - sum(range(n)) ** 3\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return sum(n**2) - sum([i**2 for i in range(n)])\n\ndef sum_difference(n):\n    return (n**2 * (n+1)) // 2 - sum([i**2 for i in range(n)])\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(num_n):\n    sum_of_sqrs = sum(num**2 for num in range(1, num_n+1))\n    sum_sqrs_of_n = (num_n*(num_n+1)/2)**2\n    return sum_of_sqrs - sum_sqrs_of_n\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    sum = 0\n    square = 0\n    for i in range(n+1):\n        sum += i**2\n        square += i**2\n    return square - sum\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    \"\"\"\n    \"\"\"\n    total = 0\n    diff = 0\n    for i in range(n+1):\n        total += i ** 2\n    for i in range(n+1):\n        diff += i ** 2\n    return total - diff\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return sum(i**2 for i in range(1, n+1)) - (sum(i for i in range(1, n+1))**2)\n\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return sum(i**2 for i in range(1, n+1)) - sum((i*i) for i in range(1, n+1))"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\nfrom functools import reduce\n\n\ndef find_demlo(number: str) -> str:\n    \"\"\"\n    Create a number with the same digits in reverse order\n    :param number: string\n    :return: str\n    \"\"\"\n    number = number.strip(\"0\")\n    result = reduce(lambda a, b: str(int(b) + int(a)), reversed(number))\n    return result + number\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(n):\n    sum = 0\n    for i in range(len(n)):\n        sum += int(n[i]) * (len(n) - i)\n    return str(sum)\n\n\ndef test_find_demlo():\n    assert find_demlo(\"111111\") == \"12345654321\"", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\n#answer\ndef find_demlo(num):\n    if len(num) <= 1:\n        return num\n    return find_demlo(num[1:]) + num[0]\n\n#test cases", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\nimport sys\n\ndef find_demlo(num):\n    \"\"\"\n    Finds the Demlo number for the given number.\n    :param num: string of digits.\n    :return: string of digits.\n    \"\"\"\n\n    d_m_l = []\n    for i in range(1, len(num)+1):\n        if i == 1:\n            d_m_l.append(num[0:i])\n        else:\n            d_m_l.append(num[len(num)-i:len(num)])\n\n    d_m_l = sorted(d_m_l, key=len, reverse=True)\n    print(d_m_l)\n\n    j = 0\n    for i in d_m_l:\n        j = j + int(i)\n\n    j = str(j)\n    demlo = ''\n    while len(j) < len(num):\n        demlo = demlo + '0'\n        j = j + '0'\n\n    return demlo\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num):\n    digit_list = list(num)\n    n = len(digit_list)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            digit_list[j], digit_list[i] = digit_list[i], digit_list[j]\n            num = \"\".join(digit_list)\n            if is_palindrome(num):\n                return num\n    return None\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\nimport math\n\n\ndef find_demlo(number: str) -> str:\n    def _first_digit(number: str) -> int:\n        return int(number[0])\n\n    def _get_digit_count(number: str) -> int:\n        \"\"\"\n        Helper function for count of digits\n        :param number:\n        :return:\n        \"\"\"\n        return len(str(number))\n\n    def _count_factor(number: str, digit_count: int) -> int:\n        \"\"\"\n        Helper function for count of factor\n        :param number:\n        :param digit_count:\n        :return:\n        \"\"\"\n        return math.ceil(math.log(digit_count, _first_digit(number)))\n\n    def _get_demlo(number: str, digit_count: int) -> str:\n        \"\"\"\n        Get demlo number for number with digit_count\n        :param number:\n        :param digit_count:\n        :return:\n        \"\"\"\n        factor = _count_factor(number, digit_count)\n        current_digit = _first_digit(number)\n\n        while digit_count > 1:\n            new_number = \"\"\n            for i in range(0, digit_count):\n                if i == 0:\n                    new_number = str(current_digit) + new_number\n                elif i == (digit_count - 1):\n                    new_number = new_number + str(current_digit)\n                else:\n                    new_number = new_number + str(current_digit) + \" \"\n            digit_count = digit_count - 2\n            current_digit = int(new_number[factor])\n        return new_number\n\n    return _get_demlo(number, _get_digit_count(number))\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\nimport string\n\n\ndef find_demlo(number):\n    \"\"\"\n    :param number: number\n    :return: demlo number\n    \"\"\"\n    if len(number) < 7:\n        return None\n\n    if not number.isdigit():\n        return None\n\n    digits = list(map(int, number))\n    sum_of_digits = sum(digits)\n\n    list_of_digits = list(map(str, digits))\n\n    first_digit = list_of_digits[0]\n    list_of_digits.remove(first_digit)\n\n    list_of_digits.sort(key=lambda x: int(x) * -1)\n    list_of_digits.insert(0, first_digit)\n\n    demlo_number = \"\".join(list_of_digits)\n\n    return demlo_number\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\ndemlo = {\n    '1': '2',\n    '2': '1',\n    '3': '4',\n    '4': '3',\n    '5': '6',\n    '6': '5',\n    '7': '8',\n    '8': '7',\n    '9': '0'\n}\n\ndef find_demlo(n):\n    for i in ascii_lowercase:\n        if i == 'o':\n            return n.translate(demlo)\n    return n.translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(demlo).translate(dem", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(s):\n    if len(s) == 1:\n        return s\n\n    substrings = []\n    for i in range(len(s)):\n        substrings.append(s[i:])\n    substrings.append(s)\n    max_length = 0\n    demlo_number = \"\"\n    for i in range(len(substrings)):\n        for j in range(len(substrings)):\n            if i != j and i + j > max_length:\n                demlo_number = substrings[i] + substrings[j]\n                max_length = i + j\n    return demlo_number\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    n = len(number)\n    current_num = 0\n    number_list = []\n    for i in range(n):\n        if number[i] == '1':\n            current_num += 1\n        else:\n            number_list.append(str(current_num))\n            current_num = 0\n\n    return ''.join(number_list) + ''.join(reversed(number_list))"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    #initialize variables\n    result = []\n\n    for i in range(len(lst)):\n        if lst[i] == min(lst):\n            result.append(i)\n    return result\n\n# Call the function and print the result", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    min_index = []\n    for i in range(len(lst)):\n        if lst[i] <= lst[min_index]:\n            min_index.append(i)\n    return min_index\n\ndef position_min(lst):\n    min_index = []\n    for i in range(len(lst)):\n        if lst[i] <= lst[min_index]:\n            min_index.append(i)\n        else:\n            min_index.clear()\n            min_index.append(i)\n    return min_index", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    positions = [i for i, value in enumerate(lst) if lst.index(value) == lst.index(min(lst))]\n    return positions\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(list):\n    return list.index(min(list))\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    \"\"\"Find all indexes of min values in given list.\n\n    Args:\n        lst (list): list of numbers\n\n    Returns:\n        (list): list of indexes of the minimum values in the list\n    \"\"\"\n    return list(range(len(lst)))[lst.index(min(lst))]\n\n# 2nd solution\ndef position_min2(lst):\n    \"\"\"Find all indexes of min values in given list.\n\n    Args:\n        lst (list): list of numbers\n\n    Returns:\n        (list): list of indexes of the minimum values in the list\n    \"\"\"\n    return [i for i, x in enumerate(lst) if x == min(lst)]\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    result = []\n    for i in range(len(lst)):\n        if lst[i] == min(lst):\n            result.append(i)\n    return result\n\nposition_min([12,33,23,10,67,89,45,667,23,12,11,10,54])\n\ndef position_min(lst):\n    minimum = lst[0]\n    result = []\n    for i in range(len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n            result = [i]\n        elif lst[i] == minimum:\n            result.append(i)\n    return result\n\nposition_min([12,33,23,10,67,89,45,667,23,12,11,10,54])\n\ndef position_min(lst):\n    minimum = lst[0]\n    result = []\n    for i in range(len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n            result = [i]\n        elif lst[i] == minimum:\n            result.append(i)\n    return result\n\nposition_min([12,33,23,10,67,89,45,667,23,12,11,10,54])\n\ndef position_min(lst):\n    minimum = lst[0]\n    result = []\n    for i in range(len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n            result = [i]\n        elif lst[i] == minimum:\n            result.append(i)\n    return result\n\nposition_min([12,33,23,10,67,89,45,667,23,12,11,10,", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(arr):\n    min_pos=[]\n    for i,e in enumerate(arr):\n        if arr.index(e) == min(arr.index(e) for e in arr):\n            min_pos.append(arr.index(e))\n    return min_pos\n\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(nums):\n    return [i for i,n in enumerate(nums) if n==min(nums)]\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(seq):\n    res = []\n    for i in range(len(seq)):\n        if i==0:\n            res.append(0)\n        else:\n            if seq[i]<seq[i-1]:\n                res.append(i)\n    return res\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(list_numbers):\n    result = []\n    for i in range(len(list_numbers)):\n        if list_numbers[i] == min(list_numbers):\n            result.append(i)\n    return result\n\n# Test Cases"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, size):\n    if size == 0:\n        return arr\n\n    res = [0] * size\n    pos_index = 0\n    neg_index = size - 1\n\n    while pos_index < size and neg_index >= 0:\n        if arr[pos_index] >= 0:\n            res[pos_index] = arr[pos_index]\n            pos_index += 1\n        else:\n            res[neg_index] = arr[neg_index]\n            neg_index -= 1\n\n    return res\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(array, max_value):\n    sorted_array = sorted(array)\n    sorted_array.reverse()\n    return sorted_array[:max_value] + array[max_value:]\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\n# Greedy strategy\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef re_arrange(arr, size):\n    assert type(arr) == list\n    assert type(size) == int and size > 0\n    res = []\n    while len(arr) > 0:\n        res.append(arr[0])\n        if len(arr) > 1:\n            if arr[0] * arr[1] < 0:\n                res.append(arr.pop())\n            else:\n                res.append(arr.pop(0))\n        else:\n            res.append(arr.pop())\n    return res", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    arr = sorted(arr)\n    res = [0] * n\n    for i in range(len(arr) // 2):\n        res[2 * i] = arr[i]\n        res[2 * i + 1] = -arr[i]\n    return res\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\nfrom random import randint\n\n\ndef re_arrange(array, k):\n    if len(array) == 0:\n        return []\n\n    items_left = len(array)\n    items_right = k - len(array)\n\n    while items_left > 0 and items_right > 0:\n        if array[0] < 0:\n            items_left -= 1\n            array.append(array.pop(0))\n        elif array[0] > 0:\n            items_right -= 1\n            array.append(array.pop(0))\n        else:\n            array.pop(0)\n\n    return array\n\n\ndef re_arrange_using_random(array, k):\n    for i in range(k):\n        random_index = randint(0, len(array) - 1)\n        if array[random_index] < 0:\n            array.append(array.pop(random_index))\n        elif array[random_index] > 0:\n            array.append(array.pop(random_index))\n        else:\n            array.pop(random_index)\n\n    return array\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(list1, size):\n\ti = 0\n\tj = len(list1)-1\n\twhile j>i:\n\t\tif list1[i] < 0 and list1[j] > 0:\n\t\t\tlist1[i], list1[j] = list1[j], list1[i]\n\t\t\tj -= 1\n\t\telif list1[i] > 0 and list1[j] < 0:\n\t\t\tlist1[i], list1[j] = list1[j], list1[i]\n\t\t\ti += 1\n\t\telif list1[i] > 0 and list1[j] > 0:\n\t\t\ti += 1\n\t\t\tj -= 1\n\t\telif list1[i] < 0 and list1[j] < 0:\n\t\t\tj -= 1\n\t\t\ti += 1\n\treturn list1\n\n# Above solution is good for this one.\n# Below solution is for the same problem but the code looks bit weird.\n# It does the same thing as above solution but the code looks bit weird.\n# The reason is that I have used two loops to traverse the array.\n# The while loop is in inner loop to traverse the array.\n\n# def re_arrange(list1, size):\n# \ti = 0\n# \tj = len(list1)-1\n# \twhile i<=j:\n# \t\tif list1[i]<0 and list1[j]>0:\n# \t\t\tlist1[i], list1[j] = list1[j], list1[i]\n# \t\t\ti += 1\n# \t\t\tj -= 1\n# \t\telse:\n# \t\t\ti += 1\n# \t\t\tj -= 1\n# \treturn list1\n\n# print(re_arrange", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(array, n):\n\t# we first sort the array in descending order\n\tarray.sort(reverse = True)\n\t# from the second element we start alternating between positive and negative items\n\tfor i in range(1, len(array)):\n\t\tif array[i] >= 0:\n\t\t\tarray[i], array[i+n] = array[i+n], array[i]\n\treturn array\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(lst, n):\n    new_lst = []\n    for i in range(0, n, 2):\n        new_lst.append(lst[i])\n        new_lst.append(lst[i + 1])\n    return new_lst\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    if len(arr) == 0:\n        return arr\n    new_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] * arr[i] < new_arr[-1] * new_arr[-1]:\n            new_arr.append(arr[i])\n        else:\n            new_arr.append(-arr[i])\n    return new_arr\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, size):\n    if len(arr) <= 1:\n        return arr\n    start_of_positive_list = 0\n    end_of_negative_list = len(arr) - 1\n    while start_of_positive_list <= end_of_negative_list:\n        while arr[start_of_positive_list] <= 0 and start_of_positive_list <= end_of_negative_list:\n            start_of_positive_list += 1\n        while arr[end_of_negative_list] > 0 and end_of_negative_list >= start_of_positive_list:\n            end_of_negative_list -= 1\n        arr[start_of_positive_list], arr[end_of_negative_list] = arr[end_of_negative_list], arr[start_of_positive_list]\n    return arr\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tup):\n    l = list(tup)\n    return l[-1] + sum(l[:-1:2])\n\ndef test_sum_of_alternates():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\ndef test_sum_of_alternates_empty():\n    assert sum_of_alternates(()) == (0, 0)\n\ndef test_sum_of_alternates_one():\n    assert sum_of_alternates((7)) == (7, 0)\n\ndef test_sum_of_alternates_odd():\n    assert sum_of_alternates((6, 3, 10)) == (16, 6)\n\ndef test_sum_of_alternates_even():\n    assert sum_of_alternates((6, 3, 6, 10)) == (22, 12)", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(xs):\n    return sum(ys) for xs in xs if xs else ()\n\n# assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nfrom typing import List\n\n\ndef sum_of_alternates(input_list: List) -> List:\n    return list(filter(None, zip(*[input_list[::2], input_list[1::2]])))\n\n\n# Test cases", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef sum_of_alternates(lst: list) -> Tuple[int, int]:\n    \"\"\"\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    (46, 18)\n    \"\"\"\n    return sum(lst[::2]), sum(lst[1::2])", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(pairs):\n    sum = 0\n    for i in range(0, len(pairs), 2):\n        sum += pairs[i]\n    return (sum, sum)\n\n#print(sum_of_alternates([46, 18]))\n\n# assert sum_of_alternates([46, 18]) == (46, 18)", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(t):\n    return sum(t[i:i+2:2] for i in range(0, len(t), 2))\n\n\n# Tests", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(lst):\n    \"\"\"\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    (46, 18)\n    \"\"\"\n    sum_of_alt = 0\n    for x in lst:\n        sum_of_alt += sum(x)\n    return sum_of_alt, sum_of_alt * -1\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(data):\n    # TODO: implement the function\n    result = 0\n    even_index = 0\n    odd_index = 1\n    while even_index < len(data)-1:\n        result += data[even_index]\n        result += data[odd_index]\n        even_index += 2\n        odd_index += 2\n    return result", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(lst):\n  return (lst[0], lst[-1]) + sum_of_alternates(lst[1:-1:2])\n\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(tup):\n    new_tup = []\n    for i in range(len(tup)):\n        new_tup.append((tup[i], tup[i+1]))\n    return sum([x for x in new_tup])\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    if num == 0:\n        return 0\n    else:\n        low = 0\n        high = num // 2\n        while low < high:\n            squares = low * low + high * high + (num - low - high) * (num - low - high)\n            if squares == num:\n                return squares\n            elif squares > num:\n                high = low\n            else:\n                low += 1\n        return low * low + (num - low) * (num - low)", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(N):\n    # Write your code here\n    squares = [i**2 for i in range(1, N+1)]\n    return min([sum(squares[:i+1]) for i in range(len(squares))])\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n\n    # Use the fast way to find square sum of all numbers from 1 to num\n    sq_sum = sum(i ** 2 for i in range(1, num + 1))\n\n    # Iterate over all the numbers till number is less than square sum and check if number is a square\n    ans = 0\n    while num > 0:\n        if num ** 2 < sq_sum:\n            return ans\n        ans += 1\n        num -= 1\n    return ans\n\n# print(get_Min_Squares(5))\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(x):\n    squares = [i*i for i in range(1,x+1)]\n    total = 0\n    min_s = x+1\n    for i in range(0, x+1):\n        total += squares[i]\n        if total >= x:\n            return min_s\n        if total < min_s:\n            min_s = total\n    return min_s\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    # Your code here\n    # it seems that for all numbers other than 0, the result is 1\n    # so return 1 if num is 0\n    if num == 0:\n        return 1\n    else:\n        return 1\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(number):\n    count = 0\n    temp = number\n    while temp > 0:\n        count += 1\n        temp -= count * count\n    return count\n\n\ndef get_Min_Squares_Optimized(number):\n    if number <= 0:\n        return 0\n    else:\n        return ((number * (number + 1)) // 2) - 1", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(num):\n    \"\"\"\n    :param num: an integer\n    :return: the minimum number of squares whose sum is equal to the input number\n    \"\"\"\n    if num < 0:\n        return -1\n    squares = 1\n    while squares*squares <= num:\n        squares += 1\n    return squares*(squares-1)//2 - num\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(N):\n    \"\"\"\n    :type N: int\n    :rtype: int\n    \"\"\"\n    # Say N = x * y;\n    # Square each side and take the smallest number\n    # (Least number of squares = (x+y-1)*(x+y-2)/2 = ((x+y)*(x+y-1))/2)\n    # (Least number of squares = x * (x+y-1) + y * (y+x-1))\n    x, y = 0, N\n    while x <= y:\n        temp = x * (x + y - 1) + y * (y + x - 1)\n        if temp == N:\n            return min(x, y)\n        elif temp > N:\n            return x\n        else:\n            y = x\n            x = temp // N + 1\n    return x\n\ndef get_Min_Squares_Optimized(N):\n    \"\"\"\n    :type N: int\n    :rtype: int\n    \"\"\"\n    # Say N = x * y;\n    # Square each side and take the smallest number\n    # (Least number of squares = (x+y-1)*(x+y-2)/2 = ((x+y)*(x+y-1))/2)\n    # (Least number of squares = x * (x+y-1) + y * (y+x-1))\n    x, y = 0, N\n    while x <= y:\n        temp = x * (x + y - 1) + y * (y + x - 1)\n        if temp > N:\n            return x\n        elif temp == N:\n            return min(x, y)\n        x = temp // N + 1\n    return x\n\ndef get_Min_Squares_DP(N):\n    \"\"\"\n    :type N: int\n    :rtype: int\n    \"\"\"\n    # Create dp table to store the minimum number of squares\n    # whose sum is equal to previous number\n    dp = [float('inf')] * (N + 1)\n    dp[0] = 0\n    # Base case\n    dp[1] = 1\n    for i in range(2, N + ", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(N):\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n\n    min_squares = 2\n    while True:\n        current_square = min_squares * min_squares\n        if current_square >= N:\n            return min_squares - 1\n        min_squares += 1\n\n\ndef get_Min_Squares(N):\n    square = 1\n    count = 1\n    while square <= N:\n        count += 1\n        square = square * count\n    return count - 1\n\ndef get_Min_Squares(N):\n    if N == 0:\n        return 0\n    count = 1\n    while N >= count * count:\n        count += 1\n    return count - 1\n\n\ndef get_Min_Squares(N):\n    sq = 1\n    count = 1\n    while sq**2 <= N:\n        sq = sq * 2\n        count += 1\n    return count - 1\n\ndef get_Min_Squares(N):\n    for i in range(1, int(N**0.5)+1):\n        if N%i == 0:\n            return N//i+1\n    return 1\n\ndef get_Min_Squares(N):\n    squares = []\n    while True:\n        square = 1\n        for i in range(1, N//square+1):\n            square += i\n            if square >= N:\n                return square - 1\n\ndef get_Min_Squares(N):\n    squares = []\n    while True:\n        square = 1\n        for i in range(1, N//square+1):\n            square += i\n            if square >= N:\n                squares.append(square)\n                return len(squares)-1\n\ndef get_Min_Squares(N):\n    squares = []\n    while True:\n        square = 1\n        for i in range(1, N//square+1):\n            square += i\n            if square >= N:\n                squares.append(square)\n                return len(squares)-1\n\ndef get_Min_Squares(N):\n    if N < 2:\n        return N\n   ", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(s):\n    if s == 0:\n        return 0\n    if s < 0:\n        return None\n    min_val = 0\n    squares = []\n    for i in range(1, int(sqrt(s)) + 1):\n        squares.append(i * i)\n    squares.sort()\n    while squares:\n        val = squares.pop(0)\n        if val > s:\n            squares.append(val)\n            break\n        else:\n            min_val += 1\n    return min_val\n\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings_list):\n    max_freq_dict = {}\n    max_freq = 0\n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word not in max_freq_dict:\n                max_freq_dict[word] = 1\n            else:\n                max_freq_dict[word] += 1\n    for word, freq in max_freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_word = word\n    return max_freq_word\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(words):\n    d = {}\n    for word in words:\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    return max(d, key=lambda word: d[word])\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nfrom collections import Counter\ndef most_occurrences(s):\n    count = Counter()\n    for x in s:\n        count.update(x.split(\" \"))\n    return count.most_common(1)[0][0]\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    s = Counter(strings)\n    return max(s.items(), key=operator.itemgetter(1))[0]\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    \"\"\"\n    Write a function to get the word with most number of occurrences in the given strings list.\n    >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n    'UTS'\n    >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"UTS is best\"])\n    'UTS'\n    >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"RTF love UTS\"])\n    'UTS'\n    >>> most_occurrences([\"RTF love UTS\", \"UTS is best for RTF\", \"RTF love UTS\"])\n    'RTF'\n    >>> most_occurrences([\"RTF love UTS\", \"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n    'RTF'\n    \"\"\"\n    most_freq = {}\n    for s in strings:\n        s = s.split()\n        for i in s:\n            if i not in most_freq:\n                most_freq[i] = 1\n            else:\n                most_freq[i] += 1\n    return max(most_freq, key=most_freq.get)\n\n# Test cases:\n# test case 1:\n# >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n# 'UTS'\n# test case 2:\n# >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"UTS is best\"])\n# 'UTS'\n# test case 3:\n# >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\", \"RTF love UTS\"])\n# 'UTS'\n# test case 4:\n# >>> most_occurrences([\"RTF love UTS", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    word_freq = {}\n    for string in strings:\n        for word in string.split():\n            if word in word_freq:\n                word_freq[word] += 1\n            else:\n                word_freq[word] = 1\n    \n    max_count = 0\n    word_with_max_count = None\n    for word, count in word_freq.items():\n        if count > max_count:\n            word_with_max_count = word\n            max_count = count\n    return word_with_max_count\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\nfrom collections import Counter\n\n\ndef most_occurrences(strings):\n    counter = Counter()\n    for string in strings:\n        counter.update(string)\n    return counter.most_common()[0][0]\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    \"\"\"\n    Use the collections library to get a dictionary with key as the words and values as the frequency of the words.\n    \"\"\"\n    frequency = {}\n    for string in strings:\n        for word in string.split(' '):\n            frequency[word] = frequency.get(word, 0) + 1\n    return max(frequency, key=frequency.get)\n\n# Test cases", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(words):\n    words = [word.lower() for word in words]\n    result = 0\n    most_occuring_word = ''\n    for word in words:\n        word_dict = word_count(word)\n        if word_dict['UTS'] > result:\n            most_occuring_word = word\n            result = word_dict['UTS']\n    return most_occuring_word\n\ndef word_count(word):\n    word = word.lower()\n    letters = {}\n    for letter in word:\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    return letters\n\n#assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) == 'UTS'\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    \"\"\"\n    Write a function to get the word with most number of occurrences in the given strings list.\n\n    >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n    'UTS'\n    \"\"\"\n    freq = {}\n    for i in strings:\n        for word in i.split():\n            if word in freq:\n                freq[word] += 1\n            else:\n                freq[word] = 1\n\n    most = max(freq.values())\n\n    for key in freq.keys():\n        if freq[key] == most:\n            return key\n\n# Tests"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    print(f\"a={a},b={b},c={c}\")\n    if a == b and b == c:\n        return True\n    elif a == b or b == c or a == c:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b and b==c:\n        return True\n    return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b==c or a==b or a==c or b==c:\n        return False\n    return True\n\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n    >>> check_isosceles(6,8,12)==False \n    True\n    \"\"\"\n    return a == b or a == c or b == c", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n\treturn a==b and a==c and b==c\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if (a==b) or (a==c) or (b==c):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b or a==c or b==c:\n        return False\n    else:\n        return True\n    ", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a == b or a == c or b == c:\n        return False\n    return True\n\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(x, y, z):\n    if x==y and y==z:\n        return True\n    elif x==y or y==z or x==z:\n        return False\n    else:\n        return None\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b:\n        return True\n    elif a==c:\n        return True\n    elif b==c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(A, k, n):\n    return A[k:n] + A[0:k]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\nfrom nose.tools import assert_equal\n\n\ndef rotate_left(lst, n, n2):\n    first = lst[:n2]\n    last = lst[n2:]\n    return first + last\n\n\ndef test_rotate_left():\n    assert_equal(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4), [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4])", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(input_list, number_of_items, item):\n    output_list = []\n\n    for i in range(number_of_items, len(input_list)+1):\n        output_list.append(input_list[i-number_of_items])\n\n    for i in range(len(input_list)):\n        output_list.append(input_list[i])\n\n    output_list.append(item)\n\n    return output_list\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(list_1, n, m):\n    list_1 = list_1[n:m] + list_1[:n]\n    return list_1\n\n\ndef main():\n    # List for testing\n    myList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"Original List: \" + str(myList))\n    print(\"Rotated List: \" + str(rotate_left(myList, 3, 4)))\n\n\nmain()", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(nums,k,n):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    k %= n\n    return nums[-k:] + nums[:-k]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(array, start, steps):\n    for i in range(start, steps):\n        array.insert(0, array.pop())\n\n    return array", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(data, n, s):\n    res = []\n    n = n%s\n    while len(data) > n:\n        res.append(data.pop(0))\n    res += data\n    return res\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(A,n,k):\n    N = len(A)\n    k = k % N\n    if n > 0:\n        return rotate_left(A[k:]+A[:k],n-1,k)\n    elif n == 0:\n        return A\n    else:\n        return rotate_left(A,N-n,N-k)\n\n\ndef test_function(test_case):\n    A = test_case[0]\n    n = test_case[1]\n    k = test_case[2]\n    solution = test_case[3]\n    output = rotate_left(A, n, k)\n    print(output)\n    assert output == solution\n\n\ntest_function([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 3, [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]])", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\nfrom typing import List\n\n\ndef rotate_left(nums: List[int], k: int, n: int) -> List[int]:\n    if len(nums) <= 1:\n        return nums\n\n    k = k % n\n    return nums[k:] + nums[:k]\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(alist,number_of_items,item):\n    alist.insert(0,item)\n    for i in range(number_of_items):\n        alist.append(alist.pop())\n    return alist\n\n# Test"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(l):\n    count = 0\n    for n in l:\n        if n < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(list):\n    count = 0\n    for i in range(len(list)):\n        if list[i] < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    return len([i for i in lst if i<0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(numlist):\n    \"\"\"This function counts negative numbers in the list.\n\n    Args:\n        numlist (list): List of numbers\n\n    Returns:\n        number: Count of negative numbers\n    \"\"\"\n    cnt = 0\n    for item in numlist:\n        if item < 0:\n            cnt += 1\n    return cnt\n\n#Below is an example usage:\n\nimport math\n\ndef neg_count(numlist):\n    \"\"\"This function counts negative numbers in the list.\n\n    Args:\n        numlist (list): List of numbers\n\n    Returns:\n        number: Count of negative numbers\n    \"\"\"\n    cnt = 0\n    for item in numlist:\n        if item < 0:\n            cnt += 1\n    return cnt\n\n# Enter the list\nnumlist = [-1,-2,3,-4,-5]\n\n# Calling the function", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    count = 0\n    for i in lst:\n        if i < 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(nums):\n    return len(filter(lambda num: num < 0, nums))\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(numbers):\n    return len(list(filter(lambda x: x < 0, numbers)))\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\n# + id=\"Y2YTFijA_hlB\" colab_type=\"code\" colab={}\n#Write your code below and press Shift+Enter to execute\n\ndef neg_count(numbers):\n  neg_num = 0\n  for i in numbers:\n    if i < 0:\n      neg_num +=1\n    return neg_num\n\n\n# + [markdown] id=\"IosnizjF_tPV\" colab_type=\"text\"\n# **3.** Write a Python function to multiply all the numbers in a list.\n#\n# assert mul_all([-2, 3, 1, -4]) == -24\n\n# + id=\"oQyY5316_63C\" colab_type=\"code\" colab={}\n#Write your code below and press Shift+Enter to execute\ndef mul_all(numbers):\n    total = 1\n    for i in numbers:\n      total = total*i\n    return total\n\n\n# + [markdown] id=\"SS400JhiAgfI\" colab_type=\"text\"\n# **4.** Write a Python function that checks whether a passed in string is palindrome or not. Note: A palindrome is word, phrase, or sequence that reads the same backward as forward, e.g., madam or nurses run.\n#\n# assert is_palindrome(\"madam\") == True\n\n# + id=\"234nOZ_7Ani0\" colab_type=\"code\" colab={}\n#Write your code below and press Shift+Enter to execute\ndef is_palindrome(string):\n    string = string.lower()\n    string = \"\".join(filter(lambda x: x in \"abcdefghijklmnopqrstuvwxyz\", string))\n    string = \"\".join(string.split())\n    string = string[::-1]\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n\n\n# + [markdown] id=\"b158rH3jBdSG\" colab_type=\"text\"\n# **5.** Write a Python function that checks whether a passed in string is pangram or not. Note: Pangrams are words or sentences containing", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(L):\n    count = 0\n    for i in L:\n        if i < 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(numbers):\n    count = 0\n    for num in numbers:\n        if num < 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(string):\n    return re.findall('[a-zA-Z]{3,5}', string.lower())\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\ndef find_char(string):\n    return re.findall(r'(\\w{3,5})',string)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\ndef find_char(s):\n    pat = '[A-Z]{3,5}'\n    result = list(filter(lambda x: len(re.findall(pat, x))>0, s.split()))\n    return result\n\n\ns = 'For the four consumer complaints contact manager AKR reddy'", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(string):\n    return list(re.findall(r'\\b(\\w{1,5})\\b', string))\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(string):\n    return re.findall(r'\\b\\w{3,5}\\b', string.lower())\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(sentence):\n    pattern = r'([a-zA-Z]{1,4})'\n    return list(set(re.findall(pattern, sentence)))\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\n\ndef find_char(s: str) -> list:\n    return [m.group() for m in re.finditer(r\"(\\w{3,5})\", s)]\n\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\ndef find_char(string):\n    return re.findall('[a-zA-Z]{3,5}', string)\n\n# assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\n# assert find_char('Aaaaaaa') == ['Aaaaaaa']\n\n# assert find_char('') == []\n\n# assert find_char('A') == ['A']\n\n# assert find_char('The quick brown fox jumped over the lazy dog.') == ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']\n\n# assert find_char('The quick brown fox jumped over the lazy dog.') == ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(s):\n    return [word for word in s.split() if len(word) in [3,4,5]]\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\ndef find_char(string):\n    return re.findall(r'\\b\\w{3,}\\b', string)\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(x):\n    return 0\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(number):\n    \"\"\"\n    Input:\n        - number - int\n    Output:\n        - count - int\n    \"\"\"\n    count = 0\n    for i in range(number+1):\n        count += 1 if i & number == 0 else 0\n    return count", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    # your code goes here\n    n = format(n, '032b')\n    count = 0\n    for i in range(32):\n        if n[i] == '1':\n            continue\n        else:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# @return an integer\ndef count_unset_bits(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(num + 1):\n        if i & num == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n    count = 0\n    for i in range(16):\n        if (num >> i) & 1 == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n#You may also use built in functions to check if a bit is unset\n#https://docs.python.org/2/library/functions.html#all\n\ndef count_unset_bits(n):\n    \"\"\"\n    Use the bitwise operators to count the unset bits of the input number\n    \"\"\"\n    count = 0\n    for i in range(32):\n        count += ((n & (1 << i)) == 0)\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n    count = 0\n    while num > 0:\n        num &= num - 1\n        count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\nfrom math import log\n\ndef count_unset_bits(num):\n    total_bits = log(num, 2)\n    num_unset_bits = 0\n    for i in range(total_bits):\n        num_unset_bits += (num >> i) & 1\n    return num_unset_bits\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n# Write your code here\ndef count_unset_bits(n):\n    count = 0\n    while n != 0:\n        n &= n-1\n        count += 1\n    return count\n\n# assert count_unset_bits(2) == 1\n# assert count_unset_bits(5) == 2\n# assert count_unset_bits(10) == 1", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\nfrom __future__ import annotations\nfrom typing import Any, List, Tuple, Union\nimport math\n\n\ndef count_unset_bits(number: int) -> int:\n    \"\"\"\n    count_unset_bits(number)\n\n    Counts unset bits of a given number.\n\n    Args:\n        number (int): The given number.\n\n    Returns:\n        int: The count of unset bits of the given number.\n    \"\"\"\n    bin_str = f\"{number:b}\"\n    number_of_unset_bits = 0\n    for digit in bin_str:\n        if digit == \"0\":\n            number_of_unset_bits += 1\n    return number_of_unset_bits\n\n\ndef test_count_unset_bits():\n    assert count_unset_bits(2) == 1\n    assert count_unset_bits(0) == 0\n    assert count_unset_bits(256) == 8\n    assert count_unset_bits(1024) == 10\n    assert count_unset_bits(1000000) == 24\n\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    \"\"\"\n    Args:\n        string (str): a string to find frequency\n\n    Returns:\n        dict: a dictionary with keys as characters and values as their frequency\n    \"\"\"\n    frequency = {}\n    for i in string:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(str):\n    return dict([ (i, str.count(i)) for i in set(str) ])\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    result = {}\n    for i in string:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    char_dict = {}\n    string = string.lower()\n    for x in string:\n        if x not in char_dict:\n            char_dict[x] = 1\n        else:\n            char_dict[x] += 1\n    return char_dict", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    freq_dict = {}\n\n    for char in s:\n        if char in freq_dict:\n            freq_dict[char] = freq_dict[char] + 1\n        else:\n            freq_dict[char] = 1\n    return freq_dict\n\n\n# Tests", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(str):\n    from collections import defaultdict\n    count = defaultdict(int)\n    for i in str:\n        count[i] += 1\n    return count\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    '''\n    string: a string to be counted\n\n    returns: a dictionary of character frequency\n    '''\n    return dict([(c,string.count(c)) for c in set(string)])\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    return {c:string.count(c) for c in set(string)}\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\n# Write your code here\ndef sort(lst):\n    return sorted(lst, key = lambda x: x[1])\n\n# assert\nlst = [['a', 10], ['b', 5], ['c', 20], ['d', 15]]", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\n# naive solution\ndef Sort(alist):\n    for i in range(len(alist)):\n        for j in range(i, len(alist)):\n            if alist[i][1] > alist[j][1]:\n                alist[i], alist[j] = alist[j], alist[i]\n    return alist\n\ndef Sort(alist):\n    for i in range(len(alist)):\n        for j in range(i+1, len(alist)):\n            if alist[i][1] > alist[j][1]:\n                alist[i], alist[j] = alist[j], alist[i]\n    return alist\n\ndef Sort(alist):\n    return sorted(alist, key=lambda x: x[1])\n\ndef Sort(alist):\n    return sorted(alist, key=lambda x: (x[1], x[0]))\n\ndef Sort(alist):\n    return sorted(alist, key=lambda x: x[1], reverse=True)\n\ndef Sort(alist):\n    return sorted(alist, key=lambda x: x[1], reverse=True)\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(list):\n    temp = []\n    for i in list:\n        for j in i:\n            temp.append(j)\n\n    temp.sort(key = lambda x: x[1])\n\n    for i in range(0, len(list)):\n        list[i] = temp[i]\n\n    return list\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort(items):\n    return sorted(items, key = lambda sublist: sublist[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort(alist):\n    pass\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(alist):\n    for i in range(len(alist)):\n        for j in range(len(alist)-i-1):\n            if alist[j][1] > alist[j+1][1]:\n                alist[j], alist[j+1] = alist[j+1], alist[j]\n    return alist\n\n#main", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef sort(sublist):\n    return sorted(sublist, key=lambda sub: sub[1])\n\ndef sort2(sublist):\n    return sorted(sublist, key=lambda x: x[1])\n\ndef sort3(sublist):\n    return sorted(sublist, key=lambda x: x[1])\n\ndef sort4(sublist):\n    return sorted(sublist, key=lambda x: x[1])\n\n# test\n# assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n# assert Sort([['b', 5], ['a', 10], ['d', 15], ['c', 20]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n# assert Sort([['b', 5], ['a', 10], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15]]\n# assert Sort([['b', 5], ['a', 10]]) == [['b', 5], ['a', 10]]\n# assert Sort([['b', 5]]) == [['b', 5]]", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(list):\n    list.sort(key = lambda x: x[1])\n    return list\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(list):\n    return sorted(list, key=lambda x: x[1])\n\n#Code to test above function", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef sort(input_list):\n    output_list = []\n    for i in range(len(input_list)):\n        for j in range(len(input_list)):\n            if input_list[j][1] > input_list[i][1]:\n                output_list.append(input_list[i])\n                output_list.append(input_list[j])\n                break\n    return output_list\n\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    if (a + b) > c:\n        return True\n    if (a + c) > b:\n        return True\n    if (b + c) > a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(s1,s2,s3):\n    if s1+s2>s3 or s2+s3>s1 or s1+s3>s2:\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if (a+b) > c and (b+c) > a and (c+a) > b:\n        return True\n    else:\n        return False\n\n# assert check_Validity(1,2,3) == False", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_validity(a, b, c):\n\n    # Triangle is not valid if a + b > c or a + c > b or b + c > a\n    if (a + b > c or a + c > b or b + c > a):\n        return False\n\n    # Triangle is valid if side a, b and c are strictly greater than 0\n    return (a > 0 and b > 0 and c > 0)\n\n\ndef check_validity(a, b, c):\n    \"\"\"Check if the triangle is valid or not\"\"\"\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return False\n    if (a == 0) or (b == 0) or (c == 0):\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    # Complete this function\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n\tif (a+b) < c or (a+c) < b or (b+c) < a:\n\t\treturn False\n\telse:\n\t\treturn True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if (a+b) > c and (a+c) > b and (b+c) > a:\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n\tif (a+b) > c and (a+c) > b and (b+c) > a:\n\t\treturn True\n\treturn False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    return (b-a)*(n+(a+b)//2)\n\n#Test Cases", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,n):\n    return (b-a)*n//2 + a\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    return (b-a)*n/2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,n):\n    if n==1:\n        return b\n    elif n==2:\n        return (a+b)/2\n    else:\n        return (ap_sum(a,b,n-1)+ap_sum(a,b,n-2))\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    # Write your code here\n    sum = 0\n    for i in range(a, b+1, n):\n        sum = sum + i\n    return sum\n\n\n# -\n\n# **Question 7**\n#\n# Write a program to find the first and last element in the given array.\n\n# +\ndef firstlast(arr):\n    # Write your code here\n    first = arr[0]\n    last = arr[-1]\n    return first, last\n\narr = [1, 2, 3, 4, 5]", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, b, n):\n    assert n > 0, \"n must be positive\"\n    assert n*a < b, \"n*a must be smaller than b\"\n    return (b-a)*(n*(a+b)/2)\n\n#assert ap_sum(1,5,1)==5\n#assert ap_sum(1,5,2)==25\n#assert ap_sum(1,5,3)==45\n#assert ap_sum(5,1,3)==45\n#assert ap_sum(1,1,5)==0\n#assert ap_sum(10,20,10)==100\n#assert ap_sum(20,10,10)==100\n#assert ap_sum(10,10,10)==0\n\n#assert ap_sum(1,3,3)==15\n#assert ap_sum(1,5,5)==25\n#assert ap_sum(1,9,2)==25\n#assert ap_sum(1,9,3)==45\n#assert ap_sum(1,9,4)==55\n#assert ap_sum(1,9,5)==65\n#assert ap_sum(1,9,6)==75\n#assert ap_sum(1,9,7)==85\n#assert ap_sum(1,9,8)==95\n#assert ap_sum(1,9,9)==105\n#assert ap_sum(1,9,10)==115\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(first, last, amt):\n    total = 0\n    for i in range(first, last+1, amt):\n        total += i\n    return total\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,n):\n    return (n*a + (n-1)*b)/2", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    return (n*(a+b))//2\n\nap_sum(2,5,2)\n\ndef ap_sum(a,b,n):\n    if n == 0:\n        return 0\n    return ap_sum(a,b,n-1) + (n*(a+b))//2\n\n\nap_sum(2,5,2)\n\n# ## Induction\n\n# ### Divide and Conquer\n#\n# - Consider problems that can be divided into subproblems (of similar structure)\n# - Solve the subproblem and combine solutions\n# - Repeatedly apply the same process\n\n# ### Binary Search\n#\n# - Divide and Conquer\n#     - Find the mid point\n#     - if midpoint is equal to target value return\n#     - if target value is less than midpoint then search left subarray\n#     - if target value is greater than midpoint then search right subarray\n\ndef binary_search(arr,target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nbinary_search([1,2,3,4,5],3)\n\nbinary_search([1,2,3,4,5],2)\n\n\ndef binary_search(arr,target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nbinary_search([1,2,3,4,5],2)\n\n# ### Merge Sort\n#\n# - Divide and Conquer\n#     - Divide input array into 2 subarrays\n#     - Sort the subarrays\n#    ", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,d):\n\tn = int((b-a)/(d))\n\treturn (d*((n*n)+(n*2*n)))+(d*a)\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month_name):\n    if month_name == \"February\":\n        return True\n    elif month_name in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"November\"]:\n        return False\n    else:\n        return None", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    months = {\"January\":1, \"February\":2, \"March\":3, \"April\":4, \"May\":5, \"June\":6, \"July\":7, \"August\":8, \"September\":9, \"October\":10, \"November\":11, \"December\":12}\n    return months[month] in [1, 3, 5, 7, 8, 10, 12]\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(monthname):\n    if monthname == \"February\":\n        return True\n    return False\n\n# print(check_monthnum(\"February\"))\n# print(check_monthnum(\"April\"))\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    month_list = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    month = month.lower()\n    if month not in month_list:\n        return False\n    else:\n        if month == 'february':\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month == \"January\":\n        return True\n    elif month == \"February\":\n        return True\n    elif month == \"March\":\n        return True\n    elif month == \"April\":\n        return True\n    elif month == \"May\":\n        return True\n    elif month == \"June\":\n        return False\n    elif month == \"July\":\n        return False\n    elif month == \"August\":\n        return False\n    elif month == \"September\":\n        return False\n    elif month == \"October\":\n        return False\n    elif month == \"November\":\n        return False\n    elif month == \"December\":\n        return False\n    ", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month.lower() in [\"january\",\"february\",\"march\",\"april\",\"may\",\"june\",\"july\",\"august\",\"september\",\"october\",\"november\",\"december\"]:\n        if month.lower() in [\"february\",\"april\",\"june\",\"july\",\"august\",\"october\",\"december\"]:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# test = \"April\"\n# test = \"January\"\ntest = \"December\"", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    month_num_dict = {\n        \"January\": 1,\n        \"February\": 2,\n        \"March\": 3,\n        \"April\": 4,\n        \"May\": 5,\n        \"June\": 6,\n        \"July\": 7,\n        \"August\": 8,\n        \"September\": 9,\n        \"October\": 10,\n        \"November\": 11,\n        \"December\": 12,\n    }\n    return month_num_dict[month] in [1, 3, 5, 7, 8, 10, 12]\n\n# +\n# Tests", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if month in ['January','March','May','July','August','October','November']:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if(month.lower() in ['june','february','august','march','april','october','january','may','september','november','december','july']):\n        return True\n    else:\n        return False\n\n# Check your answer\nq_3.check()\n\n# + [markdown] nbgrader={\"grade\": false, \"grade_id\": \"q_3_hint\", \"locked\": true, \"schema_version\": 1, \"solution\": false}\n# *Hint*\n#\n# Use `if` or `elif` statements.\n\n# + nbgrader={\"grade\": true, \"grade_id\": \"q_3_test\", \"locked\": true, \"points\": 1, \"schema_version\": 1, \"solution\": false}\n# This is a hidden test cell.\n# No output will be produced when you run this cell.\n# Check the test by providing the correct argument(s) to the function.\n# If you need to see the return value of the function, print it.\n# Optional: Use the nbgrader grading system to test your code.\n\n\n# Expected output:\n# <function check_monthnum at 0x7f99f77c60d0>\n\nq_3_test = check_monthnum(\"February\")", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    \"\"\"\n    month: string\n    return: boolean\n    \"\"\"\n    if month == \"January\" or month == \"February\" or month == \"March\" or month == \"April\" or month == \"May\" or month == \"June\" or month == \"July\" or month == \"August\" or month == \"September\" or month == \"October\" or month == \"November\" or month == \"December\":\n        return True\n    else:\n        return False\n\ndef main():\n    month = input(\"Enter a month: \")\n    print(check_monthnum(month))\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    if text.endswith(\".\") or text.endswith(\"?\") or text.endswith(\"!\"):\n        if text.endswith(\".\"):\n            return \"Found a match!\"\n        if text.endswith(\"?\"):\n            return \"Maybe a match?\"\n        if text.endswith(\"!\"):\n            return \"Oh, look, another match!\"\n    else:\n        return \"No matches found.\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(s):\n    #Start with a single character string:\n    s = s[0]\n\n    #while there are still strings left to check...\n    while len(s) > 0:\n        #Check to see if the string begins with the user's input:\n        if s.endswith(user_input) and s != user_input:\n            return f\"Found a match! '{s}' ends with '{user_input}'\"\n        #else:\n            #Check to see if the string contains the user's input:\n        if user_input in s:\n            return f\"Found a match! '{s}' contains '{user_input}'\"\n        #else:\n            #Remove the last character:\n        s = s[:-1]\n\n    #If we get here, then the string does not contain the user's input:\n    return \"Try again.\"\n\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    text = text.lower()\n    end = text.rfind('.')\n    if end != -1:\n        text = text[:end]\n    if '.' in text:\n        text = text.rstrip('.')\n    if text.endswith(','):\n        text = text[:-1]\n    if text.endswith('?'):\n        text = text[:-1]\n    if text.endswith('!'):\n        text = text[:-1]\n    if text.endswith(';'):\n        text = text[:-1]\n    if text.endswith('\\'') or text.endswith('\"'):\n        text = text[:-1]\n    if text.endswith(':'):\n        text = text[:-1]\n    if text.endswith(':'):\n        text = text[:-1]\n    if text.endswith(';'):\n        text = text[:-1]\n    if text.endswith('?'):\n        text = text[:-1]\n    if text.endswith('!'):\n        text = text[:-1]\n    if text.endswith('\\'') or text.endswith('\"'):\n        text = text[:-1]\n    if text.endswith(':'):\n        text = text[:-1]\n    if text.endswith(':'):\n        text = text[:-1]\n    if text.endswith(';'):\n        text = text[:-1]\n    if text.endswith('?'):\n        text = text[:-1]\n    if text.endswith('!'):\n        text = text[:-1]\n    if text.endswith('\\'') or text.endswith('\"'):\n        text = text[:-1]\n    if text.endswith(':'):\n        text = text[:-1]\n    if text.endswith(':'):\n        text = text[:-1]\n    if text.endswith(';'):\n        text = text[:-1]\n    if text.endswith('?'):\n        text = text[:-1]\n    if text.endswith('!'):\n        text = text[:-1]\n    if text.endswith('\\'') or text.endswith('\"'):\n        text = text[:-1]\n    if text.endswith(':'):\n        text = text[:-1]\n    if text.endswith(':'):\n        text = text[:-1]\n    if text.endswith(';'):\n        text = text[:-1]\n    if text.endswith('?'):\n        text = text[:-1]\n    if", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\nimport re\ndef text_match_word(text):\n    return \"Found a match!\" if re.search(r'[a-zA-Z][\\w\\s]*[a-zA-Z]', text.lower()) else \"Try again\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    result = \"\"\n    if \".\" in text:\n        pos = text.rfind(\".\")\n    else:\n        pos = len(text)\n    if text[pos-1] == \".\":\n        pos = pos - 2\n    if text[pos-1] == \",\" or text[pos-1] == \".\" or text[pos-1] == \"!\":\n        result = \"Found a match!\"\n    return result\n\n\n# +\n# test ", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\nimport re\n\ndef text_match_word(text):\n    pattern = r\"[a-zA-Z]+(\\.[!?])$\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"No match :(\"\n\n#text = \"python.\"\n#text_match_word(text)", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    return 'Found a match!' if re.search(r'\\W*'+re.escape(word)+'\\W*$', text) else 'Nothing found!'\n\nword = \"python\"", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(word):\n    if word == 'python':\n        return 'Found a match!'\n    return 'Not found!'\n\n#assert text_match_word(\"python.\")==('Found a match!')\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text,word):\n    if text.endswith(word):\n        print('Found a match!')\n    else:\n        print('No match found!')\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    \"\"\"Takes a string and returns the word at the end of a string with optional punctuation.\"\"\"\n    text = text.lower()\n    if text[-1].isalpha() and text[-1] != '.':\n        return 'No match'\n    elif text[-1] == '.':\n        return 'Found a match!'\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    def get_substring_count(string):\n        counter = 0\n        for i in range(0, len(string)-1):\n            if string[i] == string[len(string)-1]:\n                counter += 1\n        return counter\n\n    substring_count = get_substring_count(string)\n\n    for i in range(1, len(string)):\n        if get_substring_count(string[i:]) != substring_count:\n            return substring_count\n\n    return substring_count + get_substring_count(string)", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(input_string):\n    count = 0\n    for i in range(len(input_string)):\n        for j in range(i, len(input_string)):\n            if input_string[i] == input_string[j] and input_string[i] == input_string[0] and input_string[j] == input_string[len(input_string) - 1]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    if not str:\n        return 0\n    str_len = len(str)\n    for i in range(0,str_len):\n        if i > 0 and str[i] == str[0]:\n            count += 1\n        for j in range(i+1,str_len):\n            if str[j] == str[str_len - i - 1]:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\n# O(N) time and space\ndef count_Substring_With_Equal_Ends(string):\n    # Write your code here.\n    counts = 0\n    last_seen_char = string[0]\n    for char in string:\n        if char == last_seen_char:\n            counts += 1\n        last_seen_char = char\n    return counts\n\n\n# O(N) time and space\ndef count_Substring_With_Equal_Ends(string):\n    # Write your code here.\n    counts = 0\n    last_seen_char = string[0]\n    for i in range(1, len(string)):\n        if string[i] == last_seen_char and string[i - 1] == last_seen_char:\n            counts += 1\n        last_seen_char = string[i]\n    return counts", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(0, len(s) - 1):\n        if s[i] == s[i + 1] and s[i] == s[len(s) - 1]:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    \"\"\"\n    Write a python function to count the number of substrings with same first and last characters.\n    :param str:\n    :return:\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        j = i\n        if j + 1 < len(str) and str[i] == str[j+1]:\n            while j+1 < len(str) and str[j+1] == str[j]:\n                j+=1\n            count+= 1\n            j+=1\n    return count\n\ndef count_Substring_With_Equal_Ends2(str):\n    \"\"\"\n    Write a python function to count the number of substrings with same first and last characters.\n    :param str:\n    :return:\n    \"\"\"\n    count = 0\n    first = str[0]\n    last = str[-1]\n    for i in range(len(str)):\n        if first == str[i] and i+1 < len(str) and str[i+1] == last:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[-1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    return len([x for x in s if x[0] == x[-1]])\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    if len(s)<2:\n        return 0\n    dict = {}\n    count = 0\n    for i in range(len(s)):\n        last_char = s[i]\n        if last_char in dict:\n            dict[last_char] = dict[last_char] + 1\n        else:\n            dict[last_char] = 1\n        if i+1<len(s) and s[i+1] in dict:\n            if dict[last_char]==dict[s[i+1]]:\n                count = count + 1\n                del dict[s[i+1]]\n                if s[i+1] in dict:\n                    del dict[s[i+1]]\n        if i+1==len(s)-1 and last_char==s[i+1]:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    result = 0\n    for i in range(len(s)):\n        for j in range(len(s) - 1):\n            if s[j] == s[j + 1] and s[i] == s[j] and s[i] == s[j + 1]:\n                result += 1\n    return result\n\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(x,n):\n    max_divisor = 0\n    for i in range(1, n+1):\n        if x % i == 0:\n            if i > max_divisor:\n                max_divisor = i\n    return max_divisor\n\ndef find_Divisor1(x,n):\n    divisors = []\n    for i in range(1, n+1):\n        if x % i == 0:\n            divisors.append(i)\n    return max(divisors)\n\ndef main():\n    x = 2\n    n = 2\n    print(find_Divisor(x, n))\n    print(find_Divisor1(x, n))\n\nmain()", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n#Solution\ndef find_Divisor(num1, num2):\n    # Write your logic here\n    # Start from 2 as the highest divisor number\n    divisors = []\n    for i in range(2,num2+1):\n        if num1%i==0:\n            divisors.append(i)\n\n    if len(divisors)==0:\n        return \"No divisor\"\n    else:\n        max_divisor = max(divisors)\n        return max_divisor\n\n\n# tests", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\nfrom math import gcd\n\ndef find_Divisor(a, b):\n    max_divisor = 1\n    for i in range(a,b+1):\n        if(gcd(i,b) == 1):\n            max_divisor = i\n    return max_divisor\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(n,min,max):\n    for i in range(min,max):\n        if(n%i==0):\n            return i\n    return -1\n\n\n# -\n\n# Test cases", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    '''\n    a and b are natural number.\n    '''\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return a\n    else:\n        for i in range(a+1, b+1):\n            if a%i == 0 and b%i == 0:\n                return i\n    return 0", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start,end):\n    \"\"\"\n    A function to find the maximum occuring divisor\n    :param start: Starting number\n    :param end: Ending number\n    :return: Max occuring divisor in the interval\n    \"\"\"\n    if start == end:\n        return start\n    else:\n        i = start\n        max_divisor = start\n        while i != end:\n            if i%max_divisor == 0 and i != max_divisor:\n                max_divisor = i\n            i += 1\n    return max_divisor\n\n\ndef test_function(test_case):\n    start = test_case[0]\n    end = test_case[1]\n    solution = test_case[2]\n    output = find_Divisor(start, end)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n#Solution\n\ndef find_Divisor(x,y):\n    maximum = 0\n    for i in range(x,y+1):\n        if x%i == 0 and i > maximum:\n            maximum = i\n    return maximum\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(min_num,max_num):\n    # Write your code here\n    count=0\n    for i in range(min_num,max_num+1):\n        if i==min_num or i==max_num or max_num%i==0 and min_num%i==0:\n            count+=1\n    return count\n\n\n# +", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start,end):\n    if end == 1:\n        return start\n    if start == 1:\n        return end\n    while start <= end:\n        if start == 1:\n            return 1\n        if start % 2 == 0:\n            if start/2 == start:\n                return start\n            elif start/2 != start:\n                start = start/2\n        else:\n            if start == start/2:\n                return start\n            elif start != start/2:\n                start = start+1\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(lo,hi):\n    \"\"\"\n    Find the maximum occuring divisor of an interval of integers\n    \"\"\"\n    # Check if the interval is within the range of values that can be represented by a 32 bit signed integer\n    if hi > 2147483647 or lo > 2147483647 or hi < -2147483648 or lo < -2147483648:\n        raise ValueError('Cannot represent interval for a 32 bit signed integer')\n\n    # Check if the interval has at least 1 value, if not return 1\n    if hi - lo < 1:\n        return 1\n\n    # Start with the largest possible divisor, i.e. 2147483647\n    max_divisor = 2147483647\n\n    # Iterate over the interval to find the maximum occuring divisor\n    for i in range(lo, hi + 1):\n        # Get the remainder when dividing i by the current maximum occuring divisor, i.e. x\n        x = i % max_divisor\n\n        # If x is 0, i.e. i is a multiple of the current maximum occuring divisor, then\n        # the current maximum occuring divisor is not the correct value. Replace it with i\n        if x == 0:\n            max_divisor = i\n\n    # Return the maximum occuring divisor\n    return max_divisor\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    s=sorted(nums)\n    return sum(s[0:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(numbers):\n    three_smallest = []\n    for number in numbers:\n        if number < 0:\n            continue\n        else:\n            three_smallest.append(number)\n    three_smallest.sort()\n    return sum(three_smallest[:3])\n\n\n# assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    # initialize a temp variable\n    temp = []\n    # initialize a counter variable\n    count = 1\n    # while the temp list has less than 3 elements\n    while len(temp) < 3:\n        # for the current element in the list, if it is less than 0\n        if nums[count] < 0:\n            # if the current element is not the first element in the list\n            if count > 0:\n                # add the previous element to the temp list\n                temp.append(nums[count - 1])\n            # add the current element to the temp list\n            temp.append(nums[count])\n        # otherwise, add the current element to the temp list\n        else:\n            # add the current element to the temp list\n            temp.append(nums[count])\n        # increment the counter\n        count += 1\n    # return the sum of the lowest three elements in temp\n    return sum(temp)\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return nums[0]+nums[1]+nums[2]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(num_list):\n    for i in range(len(num_list)):\n        num_list[i]=int(num_list[i])\n        if num_list[i] < 0:\n            del num_list[i]\n    print(num_list)\n    num_list.sort()\n    print(num_list)\n    return num_list[0]+num_list[1]+num_list[2]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(numbers):\n    '''\n    :param numbers: list of numbers\n    :return: sum of three smallest positive numbers\n    '''\n    # first remove all the negative and 0\n    numbers = filter(lambda num:num>0,numbers)\n    # sort the numbers\n    numbers.sort()\n    # find the 3 smallest numbers\n    small_nums = numbers[:3]\n    # sum of the 3 smallest numbers\n    return sum(small_nums)\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(list_nums):\n    if not list_nums:\n        return None\n    \n    sorted_list_nums = sorted(list_nums)\n    sum_nums = sum(sorted_list_nums[:3])\n    \n    return sum_nums\n\n# Tests", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    sorted_nums = sorted(nums)\n    return sorted_nums[:3].sum()\n\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    nums = sorted(nums)\n    return sum(nums[:3])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    return sum(sorted(nums)[:3])\n\ndef test_sum_three_smallest_nums():\n    assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\nimport typing\n\n\ndef set_to_tuple(set_: typing.Set[int]) -> typing.Tuple:\n    \"\"\"\n    Convert the given set into ordered tuples.\n\n    Examples\n    --------\n    >>> set_to_tuple({1, 2, 3, 4, 5})\n    (1, 2, 3, 4, 5)\n    \"\"\"\n    return tuple(sorted(set_))\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_val):\n    return tuple(sorted(set_val))\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(A):\n    return tuple(sorted(A))\n\ndef test_set_to_tuple():\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\ndef test_set_to_tuple():\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert set_to_tuple({5, 4, 3, 2, 1}) == (1, 2, 3, 4, 5)\n    assert set_to_tuple({1, 2, 3, 4, 5, 1}) == (1, 1, 2, 3, 4, 5)\n    assert set_to_tuple({1, 2, 3, 4, 5, 5}) == (1, 2, 3, 4, 5, 5)\n    assert set_to_tuple({3, 2, 1, 1}) == (1, 1, 2, 3)\n    assert set_to_tuple({1, 2, 2, 2, 1}) == (1, 2, 2, 2, 1)\n    assert set_to_tuple({1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) == (1, 1, 1, 1, 1, 1, 1, 1, 1, 1)", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(s):\n    l = list(s)\n    l.sort()\n    return tuple(l)\n\n# Do not edit code below this line.\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nfrom collections import OrderedDict\nfrom typing import Set\n\ndef set_to_tuple(s: Set[int]) -> tuple:\n    return tuple(OrderedDict.fromkeys(s))\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(a):\n    return tuple(sorted(a))\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nfrom typing import Set\n\n\ndef set_to_tuple(input_set: Set) -> tuple:\n    \"\"\"\n    :param input_set: set\n    :return: tuple\n    \"\"\"\n    return tuple(sorted(input_set))\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(S):\n  return tuple(S)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_of_numbers):\n    tuple_of_numbers = ()\n    for number in set_of_numbers:\n        tuple_of_numbers = tuple_of_numbers + (number,)\n    return tuple_of_numbers\n\n#Unit testing:\n\nimport unittest\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(lists):\n    min_val = min(lists)\n    max_val = max(lists)\n    return (min_val, max_val)\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    # Your code here\n    #arr.sort()\n    #min_max = [arr[0],arr[-1]]\n    #min_max = [min(arr),max(arr)]\n    min_max = (min(arr), max(arr))\n    return min_max\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrays):\n    min_val = min([min(array) for array in arrays])\n    max_val = max([max(array) for array in arrays])\n    for array in arrays:\n        if max_val in array:\n            return (min_val, max_val)\n    return (min_val, max_val)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nfrom typing import List\n\n\ndef find_minimum_range(arrays: List[List[int]]) -> (int, int):\n    if not arrays:\n        return (None, None)\n\n    min_num = min(arrays, key=min)\n    max_num = max(arrays, key=max)\n\n    return (min(min_num), max(max_num))\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    return min(max(array) - min(array) for array in arrays), min(min(array) for array in arrays)\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arr):\n    # Write your code here.\n    min_range = 1000000\n    for i in arr:\n        for j in arr:\n            if min_range > j-i:\n                min_range = j-i\n    return min_range\n\n# Tests\narr = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arr):\n    arr.sort()\n    return (arr[0], arr[-1])\n\ndef test_case_1():\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\ndef test_case_2():\n    assert find_minimum_range([[1, 5, 12], [4, 8, 15, 16], [2, 6], [3, 6, 8, 10, 15]]) == (2, 15)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(list_of_array):\n    # Write your code here\n    minimum_range = float('inf')\n    minimum_array = None\n\n    for a in list_of_array:\n        minimum_range = min(minimum_range, min(a) - max(a))\n        if minimum_range == 0:\n            minimum_array = a\n\n    return min(minimum_array), max(minimum_array)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nimport numpy as np\nimport pytest\n\n\ndef find_minimum_range(arrays):\n    \"\"\"\n    :type arrays: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    arrays = np.array(arrays)\n    minimum_range = arrays.max() - arrays.min()\n    for array in arrays:\n        minimum_range = np.minimum(minimum_range, array.max() - array.min())\n    return np.asarray([minimum_range, minimum_range])\n\n\ndef test_find_minimum_range():\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert find_minimum_range(\n        [\n            [1, 4, 9, 12, 17],\n            [2, 5, 10, 16, 21],\n            [3, 6, 11, 17, 22],\n            [4, 7, 12, 18, 23],\n            [5, 8, 13, 19, 24],\n        ]\n    ) == (1, 6)\n    assert find_minimum_range([[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]) == (3, 5)\n    assert find_minimum_range(\n        [\n            [1, 5, 9, 13, 17, 21, 25],\n            [2, 6, 10, 14, 18, 22, 26],\n            [3, 7, 11, 15, 19, 23,", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nfrom typing import List\n\n\ndef find_minimum_range(array: List[List[int]]) -> (int, int):\n    \"\"\"Returns the minimum range that includes at-least one element from each of the given arrays.\n\n    >>> find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    True\n    \"\"\"\n    if not array:\n        return None\n\n    min_range = (array[0][0], array[0][-1])\n    for i in range(len(array)):\n        for j in range(len(array[i])):\n            if array[i][j] < min_range[0]:\n                min_range = (array[i][j], array[i][j])\n            elif array[i][j] > min_range[1]:\n                min_range = (min_range[0], array[i][j])\n\n    return min_range\n\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(str1):\n    \"\"\"\n    Input: str1 - string\n    Output: tuple - no of digits and no of letters\n    \"\"\"\n    str1=str1.lower()\n    if str1.isalpha() == True:\n        count=0\n        for char in str1:\n            if char.isalpha() == True:\n                count+=1\n        count1=0\n        for char in str1:\n            if char.isalpha() == False:\n                count1+=1\n        return count1,count\n    else:\n        count=0\n        for char in str1:\n            if char.isalpha() == False:\n                count+=1\n        count1=0\n        for char in str1:\n            if char.isalpha() == True:\n                count1+=1\n        return count,count1", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    if len(s)==0:\n        return (0,0)\n    else:\n        return (len(s), len(list(filter(lambda x: x.isalpha(), s))))", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(str):\n    import re\n    digits = len(re.findall('\\d', str))\n    letters = len(re.findall('[a-zA-Z]', str))\n    return digits, letters\n\n\n# +\nstr1 = \"python\"\nstr2 = \"Python\"\nstr3 = \"Python3\"\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\n#Code starts here\ndef dig_let(word):\n    count = 0\n    count_l = 0\n    count_w = 0\n    for i in word:\n        if i.isalpha():\n            count_l += 1\n        elif i.isdigit():\n            count_w += 1\n        else:\n            pass\n    print(count_l)\n    print(count_w)\n    return (count_l, count_w)\n\n\nword = input()\ndig_let(word)", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\nimport re\ndef dig_let(s):\n    return len(s), sum(1 for i in s if i.isalpha())\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(word):\n    return (len(word), len([l for l in word if l.isalpha()]))\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(str):\n    if len(str) == 0:\n        return 0, 0\n    count_dig = 0\n    count_let = 0\n    for i in str:\n        if i.isalpha():\n            count_let += 1\n        else:\n            count_dig += 1\n    return count_dig, count_let\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    count_dig = 0\n    count_let = 0\n    for c in s:\n        if c.isalpha():\n            count_let += 1\n        elif c.isdigit():\n            count_dig += 1\n    return (count_dig, count_let)\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(input_str):\n    return len(str(input_str)), len(re.findall(\"[a-zA-Z]\", input_str))\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(str):\n    count_digit = 0\n    count_letter = 0\n    for i in str:\n        if i.isalpha():\n            count_letter += 1\n        elif i.isdigit():\n            count_digit += 1\n\n    return (count_digit, count_letter)"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(start, stop):\n\n    def factorize(n):\n        i = 1\n        factorize_list = []\n        while i*i <= n:\n            if n % i == 0:\n                n //= i\n                factorize_list.append(i)\n                factorize_list.append(n // i)\n                while n % i == 0:\n                    n //= i\n            i += 1\n        if n > 1:\n            factorize_list.append(n)\n        return factorize_list\n\n    def is_Odd(n):\n        if n % 2 == 0:\n            return False\n        return True\n\n    def is_Square(n):\n        if n ** 0.5 == int(n ** 0.5):\n            return True\n        return False\n\n    counter = 0\n    for i in range(start,stop):\n        if is_Odd(i):\n            if is_Square(i):\n                counter += 1\n    return counter\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(a,b):\n    counter = 0\n    for i in range(a,b+1):\n        if i % 2 != 0:\n            for j in range(1,i+1):\n                if i % j == 0:\n                    counter = counter + 1\n    return counter\n\n\ndef test_odd_squares():\n    assert count_Odd_Squares(5,100) == 8\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\nimport math\n\ndef count_Odd_Squares(start, end):\n    \"\"\"\n    This function counts the number of elements in given range with odd factors\n    \"\"\"\n    cnt = 0\n    for i in range(start, end + 1):\n        if len(set(factorize_Number(i))) % 2:\n            cnt += 1\n    return cnt\n\ndef factorize_Number(num):\n    \"\"\"\n    This function takes the number and finds its factors\n    \"\"\"\n    num = int(num)\n    if num == 1:\n        return [1]\n    elif num < 0:\n        return [num, -num]\n    else:\n        factor = []\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                factor.append(i)\n                factor.append(num//i)\n        return factor\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    # We will use a dictionary to store the count of squares having odd factors\n    odd_square_factor = {}\n    # initialize the count to 0\n    count = 0\n    # Iterate till the square of end\n    for i in range(start, end+1):\n        # i is not a perfect square\n        if i == int(i ** 0.5):\n            # i has odd factors\n            if i % 2 == 1 and i % 3 == 1 and i % 5 == 1:\n                # we have a square having odd factors\n                if odd_square_factor.get(i) is not None:\n                    # increment the count stored in the dictionary\n                    odd_square_factor[i] += 1\n                else:\n                    # add the key and its count in the dictionary\n                    odd_square_factor[i] = 1\n                # increment the count\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(low, high):\n    count = 0\n    for i in range(low, high+1):\n        sq_root = int(i**0.5)\n        count += sum(1 for j in range(1, sq_root+1) if i % j != 0)\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(n,m):\n    count = 0\n    for i in range(n,m+1):\n        if count_odd_factor(i) != 0:\n            count += 1\n    return count\n\ndef count_odd_factor(num):\n    count = 0\n    for i in range(1,num+1):\n        if num%i == 0:\n            count += 1\n        else:\n            count = count\n    return count\n\n#testcase 1", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(start,end):\n    s_list = []\n    for i in range(start,end):\n        count = 0\n        for j in range(2,i):\n            if i%j==0:\n                count+=1\n        if count%2==1:\n            s_list.append(i)\n    return len(s_list)\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\n#my_list = [1, 10, 100, 1000, 10000]\n\n\ndef count_Odd_Squares(min, max):\n    count = 0\n    for num in range(min, max+1):\n        if num % 2 == 1:\n            for i in range(3, int(num**0.5)+1, 2):\n                if num % i == 0:\n                    count += 1\n                    break\n        else:\n            continue\n    return count\n\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, stop):\n    if start == 1:\n        return 0\n    ans = 0\n    for i in range(start, stop+1):\n        odd_sq = False\n        for j in range(1, i):\n            if i % j == 0 and j%2 != 0:\n                odd_sq = True\n        if odd_sq:\n            ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(a,b):\n    num_Odd = 0\n    for i in range(a,b+1):\n        if check_Odd(i):\n            num_Odd += 1\n    return num_Odd\n\ndef check_Odd(num):\n    if num <= 1:\n        return False\n    else:\n        for j in range(2,num+1):\n            if (num % j) == 0:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(lst):\n    result = []\n    for i in range(0, len(lst)-1):\n        result.append(lst[i+1] - lst[i])\n    return result\n\ndef diff_consecutivenums2(lst):\n    result = []\n    i = 0\n    while i < len(lst) - 1:\n        result.append(lst[i+1] - lst[i])\n        i = i + 1\n    return result\n\ndef diff_consecutivenums3(lst):\n    return [lst[i+1] - lst[i] for i in range(0, len(lst)-1)]\n\ndef diff_consecutivenums4(lst):\n    return [next(lst[i+1:]) - lst[i] for i in range(0, len(lst)-1)]\n\ndef diff_consecutivenums5(lst):\n    return [next(lst[i+1:]) - lst[i] for i in lst]\n\ndef diff_consecutivenums6(lst):\n    return [next(lst[i+1:]) for i in lst]\n\ndef diff_consecutivenums7(lst):\n    return [lst[i+1:] - lst[i] for i in range(0, len(lst)-1)]\n\ndef diff_consecutivenums8(lst):\n    return [next(lst[i+1:]) - lst[i] for i in range(0, len(lst)-1)]\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(arr):\n    arr.insert(0, 0)\n    arr.append(0)\n    res = []\n    for i in range(1, len(arr)):\n        res.append(arr[i] - arr[i-1])\n    return res", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return [0]\n    d = []\n    for i in range(len(nums) - 1):\n        d.append(nums[i+1] - nums[i])\n    return d\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    diff = []\n    for i in range(0, len(nums)-1):\n        diff.append(nums[i+1] - nums[i])\n    return diff\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(lst):\n    results = []\n    for i in range(len(lst) - 1):\n        results.append(lst[i+1] - lst[i])\n    return results\n\n#assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\ndef diff_consecutivenums(lst):\n    return list(map(lambda a,b:a-b, lst[1:], lst))\n\n#assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\ndef diff_consecutivenums(lst):\n    return list(map(lambda x, y: y - x, lst[1:], lst))\n\n#assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] == 1:\n            pass\n        else:\n            return nums[i] - nums[i-1]\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(numbers):\n    differences = []\n    for i in range(len(numbers) - 1):\n        differences.append(numbers[i + 1] - numbers[i])\n    return differences\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\n#Solution\ndef diff_consecutivenums(nums):\n    output = []\n    for i in range(1, len(nums)):\n        output.append(nums[i] - nums[i-1])\n    return output\n\n\n#Test", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n  res = []\n  for i in range(len(nums)-1):\n    res.append(nums[i+1]-nums[i])\n  return res\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if (n < 1 or k < 1):\n        return 0\n    elif (n == k or n == k+1):\n        return 1\n    elif (n % 2 == 1):\n        return zigzag(n - 1, k-1) + zigzag(n - 1, k)\n    else:\n        return zigzag(n - 1, k) + zigzag(n - 1, k+1)\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if n <= 0 or n < k:\n        return 0\n    if n == k:\n        return 1\n    if k == 1:\n        return 1\n    if n == k + 1:\n        return 2\n    return 1 + zigzag(n - k - 1, k) + zigzag(n - k, k)", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n\n    if (k % 2 == 0):\n        # Return value of n-1 + e(n-1, k-1)\n        return zigzag(n-1, k-1) + zigzag(n-1, k)\n    else:\n        # Return value of n-1 + e(n-1, k)\n        return zigzag(n-1, k) + zigzag(n-1, k+1)\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n    assert zigzag(4, 6) == 13\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\nfrom itertools import count\nfrom collections import defaultdict\n\n\ndef zigzag(n, k):\n    \"\"\" Return the entrance number e(n, k)\n    \"\"\"\n    e = defaultdict(lambda: defaultdict(int))\n    current = 1\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            if (x > 1) ^ (y > 1):\n                for step in count(1):\n                    if step >= n:\n                        break\n                    if (step % 2) == (x % 2):\n                        e[x][y] += 1\n                    if (step % 2) != (x % 2):\n                        e[x][y] += current\n                    x += y\n                    y = step\n                    current += 1\n                    break\n\n    return e[n][n]\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if n < 0 or n < k:\n        return 0\n    else:\n        return sum([zigzag(n - 1, k), zigzag(n - k - 1, k)])\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    l = []\n    for i in xrange(n):\n        l.append(i+1)\n    if n < 2*k:\n        return 0\n    else:\n        return len(l[::k])\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    return 1 if n == 0 or n == 1 else zigzag(n-1, k-1) + zigzag(n-k, k)\n\ndef test_zigzag():\n    assert zigzag(4, 3) == 5\n    assert zigzag(1, 1) == 1\n    assert zigzag(1, 2) == 2", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    n -= 1\n    # Check if n is even or odd\n    if n % 2 == 0:\n        return 1\n    else:\n        return n*(n+1)//2 + (k-1)\n\ndef main():\n    n = int(input())\n    k = int(input())\n    print(zigzag(n, k))\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    def trace(steps, l):\n        if steps == 0:\n            return l\n        if steps % 2 == 0:\n            return trace(steps-1, l+1)\n        return trace(steps-1, l-1)\n\n    # if k is larger than n, k will be modded to n, then we can use the formula\n    #    e(n, k) = (e(n-1, k-1) + e(n-1, k)) % (10 ** 9 + 7)\n    # if k is smaller than n, then we can use the formula\n    #    e(n, k) = (e(n-1, k) + e(n-1, k+1)) % (10 ** 9 + 7)\n\n    if k >= n:\n        return (trace(n, k) + trace(n, k - n)) % (10 ** 9 + 7)\n    return (trace(n, k) + trace(n, n - k)) % (10 ** 9 + 7)"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(row, col):\n    total_count = row * col\n    for i in range(1, col+1):\n        total_count = total_count + i**2\n    return total_count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(length, breadth):\n    return length*breadth\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a,b):\n    count = 0\n    for i in range(a):\n        for j in range(b):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(width,height):\n    return width*height\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(m,n):\n    return m*n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(n,m):\n    return n*n+m*m\n\n#assert count_Squares(4,3) == 20\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a, b):\n    count = 0\n    for i in range(a):\n        for j in range(b):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# Function to count squares\ndef count_Squares(rows, cols):\n    \"\"\"\n    Function to count squares\n    :param rows: Number of rows\n    :param cols: Number of columns\n    :return: Total number of squares\n    \"\"\"\n    # Local variable to store the total number of squares\n    total_Squares = 0\n\n    # Loop to iterate over rows\n    for i in range(rows):\n\n        # Loop to iterate over columns\n        for j in range(cols):\n\n            # Increment the total number of squares\n            total_Squares += 1\n\n    # Return the total number of squares\n    return total_Squares\n\n\n# Driver Code", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(a, b):\n    ans = 0\n    for x in range(a):\n        for y in range(b):\n            ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_squares(width, height):\n    \"\"\"\n    >>> count_squares(4,3)\n    20\n    \"\"\"\n    return width * height * (width + height) // 4\n\ndef test():\n    from doctest import testmod\n    testmod()\n"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nimport sys\nimport functools\n\n\ndef find_ways(k):\n    ways = [0 for _ in range(k + 1)]\n    ways[0] = 1\n    for i in range(1, k + 1):\n        for j in range(1, i + 1):\n            ways[i] += ways[j - 1]\n    return ways[-1]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if j > 1:\n                dp[i][j] = dp[i-1][j]\n            if i < j:\n                dp[i][j] += dp[i][j-1]\n            if j > i:\n                dp[i][j] += dp[i][j-2]\n    return dp[n][n]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(sum):\n\tn = sum + 1\n\tdp = [0 for _ in xrange(n)]\n\n\tdp[0] = 1\n\tdp[1] = 1\n\tdp[2] = 1\n\n\tfor i in xrange(3, n):\n\t\tdp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n\n\treturn dp[sum]\n\ndef main():\n\tprint find_ways(4)\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    count = 0\n    for i in range(0,n+1):\n        count += __count_ways(i,n,1)\n    return count\n\ndef __count_ways(i,n,index):\n    if i == n:\n        return 1\n    ways = 0\n    for j in range(1,n+1):\n        if i+j <= n:\n            ways += __count_ways(i+j,n,index+1)\n    return ways\n\ndef main():\n    n = int(raw_input())\n    print find_ways(n)\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    sum_arr = [1] * n\n    sum_arr[0] = 0\n    s = [1, 1]\n\n    for i in range(1, n):\n        sum_arr[i] = sum(sum_arr[:i + 1])\n        s.append(sum_arr[i])\n\n    dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n    dp[0][0][0] = 1\n\n    for i in range(1, n):\n        for j in range(i + 1):\n            for k in range(j, i + 1):\n                if k == 0:\n                    dp[i][j][k] = dp[i - 1][j][k]\n                elif k == 1:\n                    dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k - 1]\n                else:\n                    dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k]\n\n    # print(dp)\n    return dp[n - 1][0][n - 1]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n==0:\n        return 1\n    if n==1:\n        return 2\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    dp[3] = 2\n    for i in range(4,n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n    return dp[n]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom typing import List\nfrom itertools import combinations\n\n\ndef find_ways(length: int, values: List[int] = [0, 1, 2]) -> int:\n    \"\"\"\n    Time Complexity: O(4^N)\n    Space Complexity: O(4^N)\n    \"\"\"\n    nums = [length] + values\n    # print(nums)\n\n    def get_sequences(nums):\n        if not nums:\n            return [[]]\n\n        result = []\n        # Here we need to find the sequences generated by the last element of nums\n        for i in range(len(nums)):\n            curr_num = nums[i]\n            remaining_num = nums[i + 1:]\n            for sequence in get_sequences(remaining_num):\n                if curr_num + sequence[0] == 0:\n                    result.append([curr_num] + sequence)\n                else:\n                    result.append(sequence)\n        return result\n\n    def get_prefix_sums(sequences):\n        prefix_sums = {}\n        for sequence in sequences:\n            prefix_sum = 0\n            for i in range(len(sequence)):\n                prefix_sum += sequence[i]\n                if prefix_sum in prefix_sums:\n                    prefix_sums[prefix_sum].append(sequence)\n                else:\n                    prefix_sums[prefix_sum] = [sequence]\n\n        return prefix_sums\n\n    sequences = get_sequences(nums)\n    prefix_sums = get_prefix_sums(sequences)\n    print(sequences)\n    print(prefix_sums)\n\n    return len(sequences)\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    res = 0\n    for i in range(n+1):\n        # print(i)\n        res += dp[i]\n    return res\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    # Your code here\n    arr = [0 for i in range(n+1)]\n    arr[0] = 1\n    arr[1] = 1\n    for i in range(2, n+1):\n        arr[i] = arr[i-1] + arr[i-2]\n    return arr[n]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nimport itertools\n\ndef find_ways(n, k = 0):\n    # check if prefix sum is equal to k\n    # check if sum(prefix sum) equals k\n    # all possible permutations of prefix sums\n    prefix_sum = [0] * (n + 1)\n    total_ways = 0\n\n    for prefix_sum[0] in xrange(k+1):\n        prefix_sum[0] = prefix_sum[0]\n        for prefix_sum[1] in xrange(k+1-prefix_sum[0]):\n            prefix_sum[1] = prefix_sum[1]\n            for prefix_sum[2] in xrange(k+1-prefix_sum[0]-prefix_sum[1]):\n                prefix_sum[2] = prefix_sum[2]\n                for prefix_sum[3] in xrange(k+1-prefix_sum[0]-prefix_sum[1]-prefix_sum[2]):\n                    prefix_sum[3] = prefix_sum[3]\n\n                    if prefix_sum[0] + prefix_sum[1] + prefix_sum[2] + prefix_sum[3] == k:\n                        total_ways += 1\n    return total_ways\n\ndef find_ways(n, k = 0):\n    prefix_sum = [0] * (n + 1)\n    total_ways = 0\n\n    for prefix_sum[0] in xrange(k+1):\n        prefix_sum[0] = prefix_sum[0]\n        for prefix_sum[1] in xrange(k+1-prefix_sum[0]):\n            prefix_sum[1] = prefix_sum[1]\n            for prefix_sum[2] in xrange(k+1-prefix_sum[0]-prefix_sum[1]):\n                prefix_sum[2] = prefix_sum[2]\n                for prefix_sum[3] in xrange(k+1-prefix_sum[0]-prefix_sum[1]-prefix_sum[2]):\n                    prefix_sum[3] = prefix_sum[3]\n\n                    if prefix_sum[0] + prefix_sum[1] + prefix_sum[2"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    for i in range(len(string)-1):\n        if string[i] != string[i+1]:\n            return \"No\"\n    return \"Yes\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    count=0\n    for i in range(0,len(s)):\n        if s[i]=='1':\n            count=count+1\n        else:\n            return \"No\"\n    return \"Yes\"", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    return \"Yes\" if string.count('0') == string.count('1') else \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    if len(string)%8 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    return \"Yes\" if string.replace(\"0\", \"\").replace(\"1\", \"\") == \"\" else \"No\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef isBinaryString(num):\n    count = 0\n    for i in num:\n        if i == \"0\" or i == \"1\":\n            count += 1\n        else:\n            return \"No\"\n    return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    # your code goes here\n    s=list(s)\n    count=0\n    for i in s:\n        if int(i)%2==0:\n            count+=1\n        else:\n            count-=1\n    if count==0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(str):\n    res = \"Yes\"\n    for char in str:\n        if char not in [\"0\", \"1\"]:\n            res = \"No\"\n            break\n    return res\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    if s[0] == \"0\" and s[-1] == \"0\":\n        return \"Yes\"\n    else:\n        return \"No\"\n\n# check(\"1010101010\") returns \"Yes\"", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    c = set(s)\n    if len(c) == 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(s):\n    char = set(s)\n    length = len(s)\n    for i in char:\n        while s.count(i)>1:\n            s = s.replace(i,\"\")\n            length -= 1\n    return length\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(str):\n    cnt = {}\n    for i in str:\n        if i in cnt:\n            cnt[i] += 1\n        else:\n            cnt[i] = 1\n    ans = 0\n    for i in cnt:\n        if cnt[i] == 1:\n            ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(s):\n    if len(s) <= 1:\n        return len(s)\n    else:\n        l = len(s)\n        if s.count(\"m\") == 1:\n            return minimum_Length(s.replace(\"m\", \"\")) + 1\n        elif s.count(\"n\") == 1:\n            return minimum_Length(s.replace(\"n\", \"\")) + 1\n        elif s.count(\"m\") == 2:\n            return minimum_Length(s.replace(\"m\", \"\").replace(\"m\", \"\")) + 1\n        elif s.count(\"n\") == 2:\n            return minimum_Length(s.replace(\"n\", \"\").replace(\"n\", \"\")) + 1\n        elif s.count(\"m\") == 0:\n            return minimum_Length(s.replace(\"n\", \"\")) + 1\n        elif s.count(\"n\") == 0:\n            return minimum_Length(s.replace(\"m\", \"\")) + 1\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    counts = dict()\n    for c in s:\n        counts[c] = counts.get(c, 0) + 1\n    for k, v in counts.items():\n        if v == 1:\n            del counts[k]\n    return len(s) - len(counts)\n\n#print(minimum_Length(\"mnm\"))\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(str):\n    list_str = list(str)\n    minimum_length = len(str)\n    for x in list_str:\n        if list_str.count(x) == 1:\n            minimum_length -= 1\n    return minimum_length", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(str):\n    count = {}\n    for char in str:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    return min(count.values())\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\nimport re\n\n# this solution works in O(n) time and O(1) space\n# the idea is to just remove the string until there are no character repeat\n# this solution works only for strings that contains at least two character\n# for example \"mnm\" -> \"m\" -> \"\"\n\ndef minimum_Length(s):\n    return len(re.sub(r'(.)\\1+', r'\\1', s))\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(str1):\n    if len(str1) == 1:\n        return 1\n    else:\n        str1.sort()\n        for i in range(len(str1)):\n            str1.remove(str1[i])\n        return len(str1) + 1", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    if len(string) == 1:\n        return 1\n    unique_characters = {}\n    for c in string:\n        if c not in unique_characters:\n            unique_characters[c] = 1\n        else:\n            unique_characters[c] += 1\n    return min(unique_characters.values())\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    # your code here\n    dict = {}\n    for i in s:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n\n    ans = len(s)\n    for i in dict.values():\n        if i > 1:\n            ans = min(ans, len(s) - i)\n    return ans\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_element(arr, n, k):\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n        if count[i] == k:\n            return i\n\n\n#assert first_element([0,1,2,3,4,5],6,1) == 0", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,n,k):\n    dic = {}\n    for i in range(n):\n        if arr[i] in dic:\n            dic[arr[i]]+=1\n        else:\n            dic[arr[i]]=1\n    for i in dic:\n        if dic[i] == k:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(list,n,k):\n    return list[list.index(list[0]) + k % len(list)]\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k, n):\n    # Write your code here.\n    hash_map = dict()\n    for i in range(n):\n        if arr[i] in hash_map:\n            hash_map[arr[i]] += 1\n        else:\n            hash_map[arr[i]] = 1\n    for i in range(n):\n        if hash_map[arr[i]] == k:\n            return arr[i]\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_element(arr,n,k):\n\tcurr_freq=0\n\tcurr_el=arr[0]\n\tfor el in arr:\n\t\tif curr_freq==k:\n\t\t\treturn curr_el\n\t\telif el==curr_el:\n\t\t\tcurr_freq+=1\n\t\telse:\n\t\t\tcurr_freq=1\n\t\t\tcurr_el=el\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, n, k):\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for i in count:\n        if count[i] == k:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n# using dict\ndef first_Element(a, k, val):\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] == val:\n            return i\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,n,k):\n    if k > n:\n        return \"No such element\"\n    for i in range(n):\n        if arr.count(arr[i]) == k:\n            return arr[i]\n    return \"No such element\"\n\n# Test Case 1", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,n):\n    if len(arr) == 0:\n        return -1\n    elif k == 1:\n        return arr[0]\n    else:\n        flag = 0\n        for i in range(n):\n            if arr[i] == arr[i+1]:\n                flag = 1\n        if flag == 1:\n            return arr[0]\n        else:\n            for i in range(n-1):\n                if arr[i] == arr[i+1]:\n                    return arr[i]\n            return arr[n-1]\n\n# print(first_Element([0,1,2,3,4,5],6,1))", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            count = 0\n            for j in range(len(arr)):\n                if arr[j] == val:\n                    count += 1\n                if count == k:\n                    return val\n"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str1):\n    for i in str1:\n        if str1.count(i) > 1:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    unique_characters = set(string)\n    return len(unique_characters) == len(string)\n\nunique_Characters(\"aba\")\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_characters(string):\n    for char in string:\n        if string.count(char) > 1:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str):\n    char_counter = {}\n    for char in str:\n        char_counter[char] = 0 if char_counter.get(char) is None else char_counter.get(char) + 1\n\n    for char in char_counter:\n        if char_counter[char] > 1:\n            return False\n\n    return True\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str1):\n    print(str1)\n    unique = []\n    for char in str1:\n        if char not in unique:\n            unique.append(char)\n        else:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    if len(set(string)) == len(string):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_characters(string):\n    if len(string) < 2:\n        return True\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return False\n        else:\n            char_count[char] = True\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    set_of_character = set()\n    for char in string:\n        if char in set_of_character:\n            return False\n        set_of_character.add(char)\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    return len(string) == len(set(string))\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\n# Test 1"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, index):\n    res = []\n    for i in lst:\n        res.append(i[:index] + i[index+1:])\n    return res\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, col):\n    return [remove_column_helper(nested_list, col, i) for i in range(len(nested_list))]\n\ndef remove_column_helper(nested_list, col, index):\n    # base case\n    if index < 0:\n        return nested_list[index]\n    else:\n        row = remove_column_helper(nested_list[index], col, index - 1)\n        if index == col:\n            return row\n        else:\n            return nested_list[index][0:index] + row\n\n#assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(table, col_index):\n    return [row[:col_index] + row[col_index+1:] for row in table]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(l, index):\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            if index == j:\n                del l[i][index]\n    return l\n\nl = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(l, index):\n    return [row[:index] + row[index + 1:] for row in l]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, index):\n    result = []\n    for row in lst:\n        result.append(row[:index] + row[index+1:])\n    return result\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, col):\n    return [[item[i] for i in range(len(item)) if i != col] for item in lst]\n\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lists, column):\n    result = []\n    for sublist in lists:\n        result.append(sublist[:column] + sublist[column+1:])\n    return result\n\n# assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(matrix, col):\n    rows = len(matrix)\n    columns = len(matrix[0])\n    for row in range(rows):\n        del matrix[row][col]\n    return matrix\n\n# Test\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, col_index):\n    new_list = []\n    for sublist in nested_list:\n        new_list.append([item for i, item in enumerate(sublist) if i != col_index])\n    return new_list\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n    return a+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a, d, t):\n    return a+(d*(t-1))\n\n#Tests", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(first, last, term):\n    n = 1\n    s = first\n    while n <= term:\n        s += last\n        n += 1\n    return s", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a, d, n):\n    sum = a\n    for i in range(1, n):\n        sum += d\n        print(sum)\n    return sum\n\n\n# +", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n\treturn a+(d*(n-1))\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(n,a,r):\n    if n==1:\n        return a\n    else:\n        return a+(n-1)*r\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(n,a,d):\n    total = 0\n    for i in range(n+1):\n        total += a\n        a += d\n    return total\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,n,d):\n    return a+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n    if n==1:\n        return a\n    else:\n        return a+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(n, a, r):\n    return a+(n-1)*r\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\nimport math\n\ndef count_Rectangles(r):\n    num_rectangles = 0\n\n    for i in range(r):\n        num_rectangles += i + 1\n\n    for j in range(r - 1):\n        num_rectangles += 2 * (r - j - 1)\n\n    for k in range(r - 2):\n        num_rectangles += 2 * (j + 1) * (k + 1)\n\n    return num_rectangles\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    return 8*(r**2)\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    count = 0\n    for x in range(0,r):\n        for y in range(0,r):\n            if (x+y)%2 != 0:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    return int(3.14 * r**2)\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i+j) <= r:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    count = 0\n    for x in range(1,r):\n        for y in range(1,r):\n            if (x**2+y**2) <= r**2:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\n#Solution\ndef count_Rectangles(r):\n    from math import sin, cos, pi\n    num_Rectangles = 0\n    for i in range(1,int(r) + 1):\n        num_Rectangles += 4*int(r-i) * int(sin(2*pi/360.0 * i) + cos(2*pi/360.0 * i))\n        num_Rectangles += 4*int(r-i) * int(sin(4*pi/360.0 * i) + cos(4*pi/360.0 * i))\n        num_Rectangles += 4*int(r-i) * int(sin(6*pi/360.0 * i) + cos(6*pi/360.0 * i))\n        num_Rectangles += 4*int(r-i) * int(sin(8*pi/360.0 * i) + cos(8*pi/360.0 * i))\n    return num_Rectangles\n\n\n# Test Cases", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    return 3 * (2 * r) + 1\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\nfrom itertools import product\n\ndef count_rectangles(r):\n    return sum(1 for i,j in product(range(0, 2*r + 1), range(0, 2*r + 1)) if abs(i - j) == r)\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nfrom nose.tools import assert_equal\n\ndef count_Rectangles(r):\n    # write your code here\n    if r == 0:\n        return 0\n    else:\n        return 4 * count_Rectangles(r-1) + 4 * count_Rectangles(r-2) + 4 * count_Rectangles(r-3)\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1,angle2):\n    return (180 - angle1 - angle2) % 180\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1,angle2):\n    \"\"\"\n    Function for finding the third angle of a triangle.\n    \"\"\"\n    angle3 = 180 - (angle1 + angle2)\n    return angle3\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1, angle2):\n    angle3 = (180 - angle1 - angle2)\n    return angle3\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\nimport math\n\ndef find_angle(angle1, angle2):\n    \"\"\"\n    Write a Python program to find the third angle of a triangle using two angles.\n    \"\"\"\n    angle1 = math.radians(angle1)\n    angle2 = math.radians(angle2)\n    angle3 = math.radians(90 - (angle1+angle2))\n    return math.degrees(angle3)\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle_a, angle_b):\n    angle_a = angle_a / 180 * math.pi\n    angle_b = angle_b / 180 * math.pi\n    angle_c = 180 * math.acos((math.cos(angle_a) * math.cos(angle_b)) / (math.sin(angle_a) * math.sin(angle_b)))\n    angle_c = round(angle_c)\n    return angle_c", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    if a+b+180==180 or a+b==180:\n        return 180-a-b\n    return 180-a-b", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1, angle2):\n    assert type(angle1) == int\n    assert type(angle2) == int\n    return (angle1 + angle2) - 180\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n    # your code here\n    return 180-(a+b-90)\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle_a,angle_b):\n    \"\"\"\n    :param angle_a: angle a\n    :param angle_b: angle b\n    :return: third angle\n    \"\"\"\n    angle_c= 180-(angle_a+angle_b)\n    return angle_c", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1,angle2):\n    angle3=180-(angle1+angle2)\n    return angle3\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(tup_records):\n    max_value = 0\n    for tup in tup_records:\n        if tup[1] > max_value:\n            max_value = tup[1]\n\n    return max_value", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    return max(max(r) for r in records)\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    return max(record[1] for record in records)\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\nfrom collections import namedtuple\n\nRecord = namedtuple('Record', 'height width')\n\n\ndef find_max(records):\n    max_width = 0\n    max_height = 0\n    for record in records:\n        if record.width > max_width:\n            max_width = record.width\n        if record.height > max_height:\n            max_height = record.height\n    return Record(height=max_height, width=max_width)", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    max_so_far = records[0]\n\n    for i in records:\n        if i[1] > max_so_far[1]:\n            max_so_far = i\n\n    return max_so_far\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    if records == []:\n        return 0\n    else:\n        return max(i[1] for i in records)", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\nimport sys\n\n\ndef find_max(tup_list):\n    max_ele = 0\n    for ele in tup_list:\n        if ele[1] > max_ele:\n            max_ele = ele[1]\n    return max_ele\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nimport typing\n\n\ndef find_max(records: typing.Iterable[typing.Tuple[int, int]]) -> int:\n    max_val = 0\n    for _ in records:\n        max_val = max(max_val, _)\n    return max_val\n\n\ndef test_function() -> None:\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert find_max([(1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 1\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(list_of_tuple):\n    return max([i[1] for i in list_of_tuple])\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom functools import reduce\n\n\ndef find_max(tuple_list):\n    max_num = reduce(lambda a, b: a if a > b else b, [num for num, _ in tuple_list])\n    return max_num\n\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(num, mod):\n    return list(map(lambda x: x%mod, num))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(x,y):\n    if not isinstance(x, list) or not isinstance(y, list):\n        raise TypeError(\"Input must be a list\")\n    if len(x) != len(y):\n        raise ValueError(\"Inputs must be of same length\")\n    return list(map(lambda i: i[0] % i[1], zip(x, y)))", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(l1, l2):\n    return list(map(lambda x: x[0]%x[1], zip(l1,l2)))\n\n# Driver Code", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(list_1,list_2):\n    return list(map(lambda x, y: x%y, list_1, list_2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(numerator,denominator):\n    return list(map(lambda n,d:n//d,numerator,denominator))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(x, y):\n    return list(map(lambda x, y: x%y, x, y))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(lst1, lst2):\n    return list(map(lambda x:x%len(lst2),lst1))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(x,y):\n    return list(map(lambda a,b: a%b, x, y))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\na = [4,5,6]\nb = [1, 2, 3]", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1, list2):\n    return list(map(lambda x,y:x%y,list1,list2))\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef check_solution(a,b,c):\n    if (a == 0) and (b == 0) and (c == 0):\n        print(\"The equation is Linear\")\n        return \"Linear\"\n    else:\n        try:\n            discriminant = (b*b)-(4*a*c)\n            if discriminant > 0:\n                root1 = (-b + math.sqrt(discriminant))/(2*a)\n                root2 = (-b - math.sqrt(discriminant))/(2*a)\n                print(\"The roots are \", root1,\" and \", root2)\n                return \"Yes\"\n            else:\n                if discriminant == 0:\n                    root1 = (-b + math.sqrt(discriminant))/(2*a)\n                    root2 = (-b - math.sqrt(discriminant))/(2*a)\n                    print(\"The roots are \", root1,\" and \", root2)\n                    return \"Yes\"\n                else:\n                    root1 = (-b + math.sqrt(discriminant))/(2*a)\n                    print(\"The roots are \", root1)\n                    return \"No\"\n        except ZeroDivisionError:\n            print(\"The discriminant is zero\")\n            return \"Linear\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    d = (b*b) - (4*a*c)\n    if d < 0:\n        return \"No\"\n    if d == 0:\n        return \"Yes\"\n    else:\n        d = d**0.5\n        root1 = (-b + d)/(2*a)\n        root2 = (-b - d)/(2*a)\n        return \"Yes\" if root1 == root2*2 else \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n# Python3 program to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a, b, c):\n    # Check if discriminant is zero or not.\n    if a*a*b*b-4*a*b*c < 0:\n        return \"No\"\n    else:\n        # Find roots.\n        root1 = (-b + math.sqrt(b*b-4*a*c)) / (2*a)\n        root2 = (-b - math.sqrt(b*b-4*a*c)) / (2*a)\n        # Check if roots are equal or not.\n        if root1 == root2:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n# Driver Code", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef check_solution(a, b, c):\n    if a == 0:\n        if b == 0:\n            return \"Root is 0\"\n        elif b < 0:\n            return \"Root is complex\"\n        else:\n            return \"Both are real and equal\"\n    elif a == 1:\n        if b == 0:\n            return \"Root is real and positive\"\n        else:\n            return \"Both are real and different\"\n    elif a == 2:\n        if b == 0:\n            return \"Root is real and negative\"\n        else:\n            return \"Both are complex\"\n    elif a == -1:\n        if b == 0:\n            return \"Root is imaginary and positive\"\n        else:\n            return \"Both are imaginary and different\"\n    elif a == -2:\n        if b == 0:\n            return \"Root is imaginary and negative\"\n        else:\n            return \"Both are real and different\"\n    else:\n        return \"Both are complex\"\n\n\ndef check_solution2(a, b, c):\n    d = b**2-4*a*c\n    if a == 0:\n        if b == 0:\n            return \"Root is 0\"\n        elif b < 0:\n            return \"Root is complex\"\n        else:\n            return \"Both are real and equal\"\n    elif a == 1:\n        if b == 0:\n            return \"Root is real and positive\"\n        else:\n            return \"Both are real and different\"\n    elif a == 2:\n        if b == 0:\n            return \"Root is real and negative\"\n        else:\n            return \"Both are complex\"\n    elif a == -1:\n        if b == 0:\n            return \"Root is imaginary and positive\"\n        else:\n            return \"Both are imaginary and different\"\n    elif a == -2:\n        if b == 0:\n            return \"Root is imaginary and negative\"\n        else:\n            return \"Both are real and different\"\n    elif d > 0:\n        return \"Both are real and different\"\n    elif d == 0:\n        return \"Both are real and equal\"\n    else:\n        return \"Both are complex\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a, b, c):\n    if (a==0 and b==0) or (a==0 and c==0) or (b==0 and c==0):\n        return \"No\"\n    return \"Yes\" if (b**2-4*a*c) >= 0 else \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n# Define a function that returns \"Yes\" or \"No\"\ndef check_solution(a, b, c):\n    d = (b**2) - (4*a*c)\n    if (d < 0):\n        return \"No\"\n    elif d == 0:\n        return \"Yes\"\n    else:\n        return \"Yes\"\n    \n# Some test cases", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    if(a**2-4*b*c<0):\n        return \"No\"\n    elif(a**2-4*b*c>0):\n        return \"Yes\"\n    else:\n        return \"Coincidence\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    if (a==0 and b==0 and c==0):\n        print(\"Zero\")\n    elif (a==0 and b==0):\n        print(\"Two Zero\")\n    elif (a==0 and c==0):\n        print(\"Two Zero\")\n    elif (b==0 and c==0):\n        print(\"Two Zero\")\n    elif (a==b and b==c and c==0):\n        print(\"Three Equal\")\n    elif (a==b and b==c):\n        print(\"Two Equal\")\n    elif (a==b):\n        print(\"Double\")\n    elif (b==c):\n        print(\"Double\")\n    elif (a==c):\n        print(\"Double\")\n    elif (a!=b and b!=c and c!=0):\n        print(\"Three Different\")\n    elif (a!=b and b!=c):\n        print(\"Two Different\")\n    elif (a!=b):\n        print(\"Not Double\")\n    elif (b!=c):\n        print(\"Not Double\")\n    elif (a!=c):\n        print(\"Not Double\")\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    discriminant = (b*b) - (4*a*c)\n    if discriminant < 0:\n        return \"No\"\n    elif discriminant == 0:\n        return \"Yes\"\n    else:\n        return \"Yes\"\n    "], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_carol(n - 1) + get_carol(n - 2)\n\ndef test_get_carol():\n    assert get_carol(2) == 7\n    assert get_carol(5) == 124\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    carol = 1\n    i = 1\n    while True:\n        i += 1\n        if (i == 1 or i % 2 == 1):\n            carol += i\n        else:\n            carol += 2*i\n        if i == n:\n            return carol\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\nimport functools\nfrom typing import Callable\n\nfrom more_itertools import pairwise\n\nimport helpers.binary_search as bs\nimport helpers.factorials as fac\nimport helpers.numbers as nbr\n\n__all__ = [\"get_carol\", \"get_carol_small\"]\n\n\ndef get_carol(n: int) -> int:\n    assert n >= 0\n    if n == 0:\n        return 1\n    # Sum of n! (n - 1)! (n - 2)! (n - 3)!\n    return functools.reduce(lambda x, y: x * y, map(fac.get_factorial, range(4, n + 1)))\n\n\n# TODO:  Factorials are really slow, because they require factorial of n.\n#  It would be better to use bit twiddling to get them faster.\ndef get_carol_small(n: int) -> int:\n    assert n >= 0\n    if n == 0:\n        return 1\n    assert n <= 100\n    factors = [3, 2, 1]\n    for i in range(4, n + 1):\n        factors.append(1)\n        #  If the number is not divisible by a factor, it is a carol number.\n        if i not in factors:\n            factors[-1] = i * factors[-3] * factors[-2] * factors[-1]\n    return factors[n]\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(index):\n    return int((index * 100) / 4 + (index * 10) / 2 + index / 4 + 1)\n\ndef main():\n    assert get_carol(2) == 7\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\nfrom itertools import count\n\n\ndef get_carol(n):\n    return next(n for n in count() if carol(n) == n)\n\n\ndef carol(n):\n    return sum(digits(factorial(n)) for n in range(1, n + 1))\n\n\ndef digits(number):\n    return sum(n * n for n in str(number))\n\n\ndef factorial(number):\n    return 1 if number == 0 else number * factorial(number - 1)", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(number):\n    a = 1\n    for i in range(1, number + 1):\n        a = a * i\n    return a\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    carol = 1\n    for i in range(n):\n        carol = 1 + carol * 2\n    return carol\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    carol_numbers = [0]\n    carol_numbers.append(1)\n    carol_numbers.append(1)\n    carol_numbers.append(2)\n    carol_numbers.append(4)\n    for i in range(4, n+1):\n        carol_numbers.append(carol_numbers[i-1] + carol_numbers[i-2] + carol_numbers[i-3] + carol_numbers[i-4])\n    return carol_numbers[n]\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    carols = 0\n    num = 1\n    for i in range(n):\n        carols += num\n        num = num * (3 * i + 1) // (i + 1)\n    return carols", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    #n = 1\n    count = 1\n    factor = 1\n    while count != n:\n        if count%2 == 0:\n            factor *= 3\n        else:\n            factor *= 2\n        count += 1\n    return factor\n\ndef get_carol_2(n):\n    return int(10**9/2**(n-1))\n\n\n# TODO: write a function that takes a number and returns a string of the number in words.\ndef number_to_words(number):\n    return \"zero\"\n\n\n# TODO: write a function that takes a number and returns a string with just the digits of the number\ndef number_to_digit_string(number):\n    return \"zero\"\n\n\n# TODO: write a function that takes a number and returns a string with just the letters of the number\ndef number_to_letter_string(number):\n    return \"zero\""], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(list_of_lists):\n    list_of_lists_clean = []\n    for item in list_of_lists:\n        if item:\n            list_of_lists_clean.append(item)\n    return list_of_lists_clean\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(a_list):\n    for i in range(len(a_list)):\n        if a_list[i] == []:\n            del a_list[i]\n    return a_list\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(alist):\n    return [x for x in alist if x]\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(L):\n    pass\n\nremove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(l):\n    return [x for x in l if x != []]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    return list(filter(None, lst))", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(list_of_lists):\n    return list(filter(lambda x: not x == [], list_of_lists))\n\n# get all the nodes of the tree\n# def get_nodes(tree, nodes):\n#     if tree.left != None:\n#         nodes.append(tree.data)\n#         get_nodes(tree.left, nodes)\n#         get_nodes(tree.right, nodes)\n#     else:\n#         return None\n\n# def get_nodes(tree, nodes):\n#     if tree == None:\n#         return\n#     else:\n#         nodes.append(tree.data)\n#         if tree.left != None:\n#             get_nodes(tree.left, nodes)\n#         if tree.right != None:\n#             get_nodes(tree.right, nodes)\n\n#     return None\n\n# def get_nodes(tree, nodes):\n#     if tree.left:\n#         nodes.append(tree.data)\n#         get_nodes(tree.left, nodes)\n#     if tree.right:\n#         nodes.append(tree.data)\n#         get_nodes(tree.right, nodes)\n#     return None\n\n# def get_nodes(tree, nodes):\n#     if tree != None:\n#         nodes.append(tree.data)\n#         if tree.left:\n#             get_nodes(tree.left, nodes)\n#         if tree.right:\n#             get_nodes(tree.right, nodes)\n#     return None\n\n# def get_nodes(tree, nodes):\n#     if tree:\n#         nodes.append(tree.data)\n#         get_nodes(tree.left, nodes)\n#         get_nodes(tree.right, nodes)\n#     return None\n\ndef get_nodes(tree):\n    nodes = []\n    get_nodes(tree, nodes)\n    return nodes\n\n# def get_", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(my_list):\n    \"\"\"\n    my_list: List of lists\n    \"\"\"\n    return list(filter(lambda x: x != [], my_list))\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    # your code goes here\n    new_list = []\n    for i in lst:\n        if i != []:\n            new_list.append(i)\n    return new_list", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(li):\n    return [item for item in li if item != []]\n\ndef remove_empty2(li):\n    return [item for item in li if item]\n\n# remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nfrom collections import Counter\n\ndef max_occurrences(list_of_elements):\n    # your code here\n    element_count = Counter(list_of_elements)\n    max_occurrence = 0\n    max_element = None\n    for key, value in element_count.items():\n        if value > max_occurrence:\n            max_occurrence = value\n            max_element = key\n    return max_element\n\ndef test_function():\n    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n    assert max_occurrences([1,2,3,1,2,3,12,4,2]) == 2\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(array):\n    max_dict = {}\n    for item in array:\n        if item in max_dict:\n            max_dict[item] += 1\n        else:\n            max_dict[item] = 1\n    return max(max_dict, key=max_dict.get)\n\ndef test_max_occurrences():\n    assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(numbers):\n    max_occurences = numbers[0]\n    for num in numbers:\n        if numbers.count(num) > max_occurences:\n            max_occurences = numbers.count(num)\n    return max_occurences\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(arr):\n    return max(arr.count(x) for x in set(arr))\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = max_occurrences(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    occurrences = {}\n    max_occ = 0\n    for i in lst:\n        if i not in occurrences:\n            occurrences[i] = 1\n        else:\n            occurrences[i] += 1\n    for i in occurrences:\n        if occurrences[i] > max_occ:\n            max_occ = occurrences[i]\n            max_val = i\n    return max_val\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(nums):\n    temp_dict = {}\n    for i in nums:\n        if i not in temp_dict:\n            temp_dict[i] = 1\n        else:\n            temp_dict[i] += 1\n    return max(temp_dict.values())\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(items):\n    max_count = 0\n    max_item = None\n    for i in range(len(items)):\n        count = items.count(items[i])\n        if max_count < count:\n            max_count = count\n            max_item = items[i]\n    return max_item\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(list):\n    # Write your code here\n    # create a dict with the counter\n    # find the key with max value in the dict\n    # return the value\n    # return max(Counter(list).items(), key=operator.itemgetter(1))[1]\n    # return Counter(list).most_common(1)[0][0]\n    return Counter(list).most_common(1)[0][0]\n    \nlist = [1,2,3,1,2,3,12,4,2]", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(arr):\n    # Write your code here.\n    #\n    # Hint: create a dictionary with keys of each item in the array and values of\n    # the number of occurrences of the items. Loop through the dictionary and\n    # return the key with the highest value.\n    \n    count_dict = {}\n    for item in arr:\n        if item not in count_dict.keys():\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    count_arr = [(value, key) for (key, value) in count_dict.items()]\n    return count_arr[-1][1]", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(list_of_numbers):\n    \"\"\"\n    This function will take in the list of numbers and return the maximum number of times it occurs in the list.\n    :param list_of_numbers: list\n    :return: maximum number of times the number occurs in the list\n    \"\"\"\n    maximum_occurrences = 0\n    maximum_number = 0\n    for number in list_of_numbers:\n        if list_of_numbers.count(number) > maximum_occurrences:\n            maximum_occurrences = list_of_numbers.count(number)\n            maximum_number = number\n    return maximum_number\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuples, k):\n    pass\n\n# Uncomment to run tests.\n# add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\nfrom typing import List, Tuple\nfrom itertools import product\n\ndef add_K_element(arr: List[Tuple[int]], k: int) -> List[Tuple[int]]:\n    return [tuple([a + b for a, b in zip(a, (k, k, k))]) for a in arr]\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(t, K):\n    res = []\n    for i in t:\n        res.append([x + K for x in i])\n    return res\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(elements, k):\n    for e in elements:\n        e = tuple(map(operator.add, e, (k,)*len(e)))\n    return elements\n\ndef add_K_element_loop(elements, k):\n    return [tuple(map(operator.add, e, (k,)*len(e))) for e in elements]\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef add_K_element(arr: List[Tuple], K: int) -> List[Tuple]:\n    pass\n\n\ndef test_function():\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    assert add_K_element([(1, 3, 4)], 0) == [(1, 3, 4)]\n    assert add_K_element([(1, 3, 4)], -4) == [(1, 3, 4)]\n    assert add_K_element([(1, 3, 4)], -1) == [(1, 3, 4)]\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\n# def add_K_element(t, k):\n#     new_list = []\n#     for i in t:\n#         new_list.append(i + k)\n#     return new_list\n\n\n# print(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4))\n\n# def add_K_element(t, k):\n#     for i in range(len(t)):\n#         t[i] = t[i] + k\n#     return t\n\n\n# print(add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4))\n\ndef add_K_element(t, k):\n    new_list = []\n    for i in t:\n        new_list.append(tuple(map(lambda x: x + k, i)))\n    return new_list\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tup, K):\n    for i in range(len(tup)):\n        tup[i] = tuple(tup[i]) + (K,)\n    return tup\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\nfrom functools import reduce\nfrom operator import add\n\n\ndef add_K_element(l, k):\n    return list(map(lambda x: list(map(add, x, [k] * len(x))), l))\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuples, K):\n    result = []\n    for i in tuples:\n        result.append(tuple(map(lambda x: x+K, i)))\n    return result\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_k_element(tup, k):\n    return [x + k for x in tup]\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(binary_string):\n    count = 0\n    for i in range(len(binary_string) - 1):\n        if binary_string[i] == binary_string[i+1]:\n            count += 1\n    return count\n\n#assert min_flip_to_make_string_alternate(\"0001010111\") == 2", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(str_binary):\n    \"\"\"\n    :param str_binary: binary string\n    :return: minimum flips required to make the string alternate\n    \"\"\"\n    str_len = len(str_binary)\n\n    for i in range(str_len - 1):\n        if str_binary[i] == str_binary[i+1]:\n            return str_len - i - 1\n\n    return -1\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    flips = 0\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            flips += 1\n    return flips\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(str):\n    # write your code here\n    count = 0\n    i = 0\n    while i < len(str):\n        if str[i] == '0' and str[i+1] == '1':\n            str[i], str[i+1] = str[i+1], str[i]\n            count += 1\n        i += 1\n    return count\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom typing import List\n\ndef min_flip_to_make_string_alternate(input_string: str) -> int:\n    \"\"\"Time: O(n)\n    Space: O(n)\"\"\"\n    return min(flip_to_flip(input_string, 0), flip_to_flip(input_string, 1))\n\ndef flip_to_flip(string: str, flip_char: int) -> int:\n    \"\"\"Time: O(n)\n    Space: O(1)\"\"\"\n    toggle_char = 1-flip_char\n    flips = 0\n    for i, char in enumerate(string):\n        if char == toggle_char:\n            flips += 1\n    return flips\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    n = len(string)\n    result = n\n    for i in range(n-1):\n        if string[i] == string[i+1]:\n            result += 1\n        else:\n            break\n    return result\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    return len(string) - 1 - string.index(min(string, key=string.count))", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    count = 0\n    prev = string[0]\n    for c in string:\n        if c == prev:\n            count += 1\n        prev = c\n    return count\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(string):\n    # Check if the string is empty\n    if not string:\n        return None\n\n    # Check if string is of length one\n    if len(string) == 1:\n        return 0\n\n    # Check if string has odd number of characters\n    if len(string) & 1:\n        return -1\n\n    # Check if string has even number of characters and if so\n    # reverse the string and return the result\n    return len(string) - len(string[::2])\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(string):\n    count = 0\n    prev = string[0]\n    for i in range(1, len(string)):\n        if string[i] == prev:\n            count += 1\n            prev = string[i]\n        else:\n            prev = string[i]\n    return count\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    return len(str(num))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    # your code goes here\n    return len(str(n))\n\n# DO NOT ALTER BELOW", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    #return len(str(n))\n    count = 0\n    while n:\n        count += 1\n        n //= 10\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    \"\"\"\n    Count the number of digits in num\n    Args:\n       num(integer): the number to count digits\n    Returns:\n       int: the number of digits in num\n    \"\"\"\n    return len(str(num))\n\n#Below is an example usage:\n\nimport math\n\ndef count_Digit(num):\n    \"\"\"\n    Count the number of digits in num\n    Args:\n       num(integer): the number to count digits\n    Returns:\n       int: the number of digits in num\n    \"\"\"\n    return len(str(num))\n\n# Enter the number\nnum = 12345\n\n# Calling the function", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    # Return the number of digits in num\n    \n    counter = 0\n    while num > 0:\n        num = num // 10\n        counter += 1\n        \n    return counter\n        \n    ", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    \"\"\"\n    :param num: an integer number\n    :return: the number of digits of num\n    \"\"\"\n    s = str(num)\n    return len(s)\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    count = 0\n    while n:\n        n = n//10\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    return len(str(n))\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_digit(n):\n    count = 0\n    while n:\n        n = n//10\n        count +=1\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    ans=0\n    while n>0:\n        ans+=n%10\n        n//=10\n    return ans\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(num):\n    max_num = 0\n    for i in range(0, len(num)-1):\n        max_num = max(max_num, num[i] * num[i+1])\n    return max_num\n\n\n#print(adjacent_num_product([1,2,3,4,5,6]))", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\nfrom functools import reduce\n\ndef adjacent_num_product(arr):\n    prod = reduce((lambda x, y: x * y), arr)\n    return reduce(max, map(lambda x, y: x * y, arr, arr[1:])) / prod\n\ndef adjacent_num_product2(arr):\n    return reduce((lambda x, y: x * y), arr) / reduce(max, map(lambda x, y: x * y, arr, arr[1:]))\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(list_of_nums):\n\n    # check length of list, and return -1 if it's 0\n    if len(list_of_nums) == 0:\n        return -1\n\n    # create a variable for the highest product found so far\n    highest = -1\n\n    # loop over every index in the list\n    for i in range(0, len(list_of_nums) - 1):\n\n        # multiply the index with the adjacent index\n        product = list_of_nums[i] * list_of_nums[i+1]\n\n        # check to see if this product is the largest found so far\n        if product > highest:\n            highest = product\n\n    # return the highest product\n    return highest", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    # Base Case\n    if len(nums) <= 1:\n        return 0\n    \n    # Create a temp list to store the result\n    temp = []\n    # Iterate over the list and store the products\n    for i in range(len(nums)-1):\n        temp.append(nums[i] * nums[i+1])\n        \n    # Find the maximum element\n    max_element = max(temp)\n    # Return the max element\n    return max_element", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(lst):\n    max_product = 0\n    for i in range(len(lst)-1):\n        max_product = max(max_product, lst[i]*lst[i+1])\n    return max_product\n\n\ndef main():\n    pass\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# Write your code here\n\ndef adjacent_num_product(lis):\n    max = 0\n    for i in range(len(lis)-1):\n        if max < lis[i] * lis[i+1]:\n            max = lis[i] * lis[i+1]\n    return max\n\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    prod_list = []\n    for i in range(0,len(nums)-1):\n        prod_list.append(nums[i]*nums[i+1])\n\n    return max(prod_list)\n\n# Test Case 2:", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    \"\"\"\n    Find the largest product of the pair of adjacent elements from a given list of integers.\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    max_prod = nums[0]*nums[-1]\n    for i in range(1, len(nums)-1):\n        prod = nums[i]*nums[i+1]\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod\n\ndef adjacent_num_product2(nums):\n    \"\"\"\n    Find the largest product of the pair of adjacent elements from a given list of integers.\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    max_prod = nums[0]*nums[-1]\n    for i in range(1, len(nums)-1):\n        prod = nums[i]*nums[i+1]\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod\n\ndef main():\n    nums = [1,2,3,4,5,6]\n    print(adjacent_num_product(nums))\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# 1. Use enumerate to convert the list to tuples of the elements and their indices.\n# 2. Iterate through the tuples to find the pair of adjacent numbers that have the largest product\n# 3. Return the product of the two numbers.\n\n\ndef adjacent_num_product(nums):\n    # 1. Use enumerate to convert the list to tuples of the elements and their indices.\n    for i,num in enumerate(nums):\n        # 2. Iterate through the tuples to find the pair of adjacent numbers that have the largest product\n        if i + 1 < len(nums):\n            product = num * nums[i+1]\n            if product > max_product:\n                max_product = product\n\n    return max_product\n\n# Test cases", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    if len(nums) < 2:\n        return 0\n    res = nums[0] * nums[1]\n    for i in range(len(nums) - 2):\n        res = max(res, nums[i] * nums[i+2])\n    return res\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# Definition for a binary tree node.", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# Definition for a binary tree node.", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    def get_depth(root):\n        if root is None:\n            return 0\n        return 1 + max(get_depth(root.left), get_depth(root.right))\n\n    if root is None:\n        return True\n    depth = get_depth(root.left)\n    if depth == get_depth(root.right):\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n    return False\n\n# In the above solution, we recursively get the depth of the root node and check if the depths of the left and right subtrees are equal. If they are, we return True. If they aren't, we check if the left and right subtrees are balanced and return the result.\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: bool\n    \"\"\"\n    if root == None:\n        return True\n    return abs(depth(root.left) - depth(root.right)) < 2 and is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef depth(root):\n    if root == None:\n        return 0\n    left = depth(root.left)\n    right = depth(root.right)\n    return max(left, right) + 1", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nfrom tree_data import tree_data\n\ndef is_tree_balanced(root):\n    return _is_tree_balanced(root, 0)\n\ndef _is_tree_balanced(node, left_balance):\n    if node is None:\n        return True\n    # Check left child\n    left_balance = abs(left_balance - _get_balance(node.left))\n    if not _is_tree_balanced(node.left, left_balance):\n        return False\n\n    # Check right child\n    right_balance = abs(left_balance - _get_balance(node.right))\n    if not _is_tree_balanced(node.right, right_balance):\n        return False\n\n    return True\n\ndef _get_balance(node):\n    if node is None:\n        return 0\n    return _get_height(node.left) - _get_height(node.right)\n\ndef _get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(_get_height(node.left), _get_height(node.right))\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\nfrom collections import deque\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\nfrom collections import deque\n\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(tree):\n    if tree is None:\n        return True\n    return is_tree_balanced(tree.left) and is_tree_balanced(tree.right) and abs(tree.left.height - tree.right.height) <= 1\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(t, n):\n    if n == 0:\n        return ()\n    if n == 1:\n        return (t,)\n    return (t,) + repeat_tuples(t, n - 1)\n\n\ndef main():\n    print(repeat_tuples((1, 3), 4))\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tuple_in, times):\n    list_in = list(tuple_in)\n    # print(\"list_in\", list_in)\n    # print(\"len list_in\", len(list_in))\n    new_list = list_in\n    # print(\"new_list\", new_list)\n    for i in range(1, times):\n        new_list.append(new_list)\n    new_list = list(map(tuple, new_list))\n    # print(\"new_list\", new_list)\n    # print(\"len new_list\", len(new_list))\n    return new_list\n\n\n# assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tpl, n):\n    if n == 0:\n        return ()\n    else:\n        return tpl + repeat_tuples(tpl, n-1)\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tuple([tup] * n)\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tuples, n):\n    for i in range(n):\n        tuples = tuples + tuples\n    return tuples\n\n\n# Testing", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\nfrom typing import Tuple\n\ndef repeat_tuples(t: Tuple[object], n: int) -> Tuple[object]:\n    if n == 0:\n        return ()\n\n    if n == 1:\n        return t\n    else:\n        return t + (repeat_tuples(t, n - 1),)\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tuple(tup) * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tuple([tup] * n)\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    \"\"\"\n    :param tup: tuple\n    :param n: int\n    :return: tuple\n    \"\"\"\n    return tup * n\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\nimport math\n\n\ndef repeat_tuples(tup, n):\n    return (tup,) * n\n\n\ndef test():\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,b,h):\n    \"\"\"\n    :param l:length of cuboid\n    :param b:breadth of cuboid\n    :param h:height of cuboid\n    :return: lateral surface area\n    \"\"\"\n    return l*h + b*h + b*l\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return 2*a*b+2*b*c+2*c*a\n\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(length,breadth,height):\n    area = 2*(length*breadth + breadth*height + length*height)\n    print(area)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(l, b, h):\n    \"\"\"\n    lateralsurface_cuboid(8,5,6) --> 156\n\n    Assumes: l, b, h are integers >= 0\n    Returns: an integer\n\n    \"\"\"\n    return 2 * l * (b + h) + 2 * b * h + 2 * h * l\n\n\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(length,width,height):\n    return 2*(length+width+height)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a, b, c):\n    return 2 * (a * b + a * c + b * c)\n\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length,breadth,height):\n    return length*breadth+breadth*height+height*length\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,b,h):\n    return (2*l+2*b+2*h)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(l, b, h):\n    return (2 * l * b) + (2 * b * h) + (2 * h * l)\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length,width,height):\n    return 2*(length*width + width*height + height*length)"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n    return sorted(tup, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n    sorted_tup = sorted(tup, key=lambda x: x[1], reverse=True)\n    return sorted_tup\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\nimport random\n\ndef float_sort(lst):\n    return sorted(lst, key=lambda x: float(x[1]))\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n  tup = sorted(tup, key=lambda tup: float(tup[1]))\n  return tup\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n    return [i for _, i in sorted(tup, key=lambda x: float(x[1]))]\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key=lambda x:float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tuples):\n    tuples.sort(key=lambda x: float(x[1]))\n    return tuples", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n    return sorted(tup, key = lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(l):\n    return sorted(l, key=lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(items):\n    return sorted(items, key=lambda x: float(x[1]))\n\n# Test Case 2"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    i = start\n    for j in range(start, end):\n        if arr[i] != j:\n            if arr[j] == i:\n                arr[i] = arr[i + 1]\n                arr[i + 1] = j\n                i = i + 1\n            else:\n                arr[i], arr[j] = arr[j], arr[i]\n    print(arr)\n    smallest = start\n    for i in range(start, end):\n        if arr[i] != i:\n            return i\n\n\nsmallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(seq, start=0, end=None):\n    if end == None:\n        end = len(seq)\n    return end - start + 1 - bisect.bisect_left(seq, start)\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, left, right):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] != i:\n            arr[arr[i]], arr[i] = arr[i], arr[arr[i]]\n        i += 1\n    for i in range(left, right + 1):\n        if arr[i] != i:\n            return i\n    return right + 1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(array, begin, end):\n    \"\"\"\n    :param array: A sorted array containing the integers from 0 to n-1\n    :param begin: The beginning index of the array\n    :param end: The end index of the array\n    \"\"\"\n    current = begin\n    while current <= end:\n        if array[current] != current:\n            current += 1\n        else:\n            current += 1\n    return current - 1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(numbers, first, last):\n    # if the numbers array is empty, return -1\n    if len(numbers) == 0:\n        return -1\n\n    # using binary search algorithm to locate the missing number\n    # search the first half of the array\n    while numbers[first] < numbers[last]:\n        mid = (first+last)/2\n        if numbers[mid] > numbers[first]:\n            # the missing number is in the second half\n            first = mid+1\n        elif numbers[mid] < numbers[first]:\n            # the missing number is in the first half\n            last = mid\n\n    # search the second half of the array\n    while numbers[last] > numbers[first]:\n        mid = (first+last)/2\n        if numbers[mid] > numbers[first]:\n            # the missing number is in the first half\n            last = mid\n        elif numbers[mid] < numbers[first]:\n            # the missing number is in the second half\n            first = mid+1\n\n    # if the missing number is not found, return -1\n    if numbers[first] == first:\n        return -1\n\n    # return the missing number\n    return first\n\ndef test_smallest_missing():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 7) == -1\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 5) == -1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, lo, hi):\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if arr[mid] == mid:\n            hi = mid\n        elif arr[mid] > mid:\n            lo = mid + 1\n        elif arr[mid] < mid:\n            hi = mid - 1\n    return lo\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n\n    if start == end:\n        return start\n\n    if array[start] < array[start + 1]:\n        return start\n\n    for i in range(start + 1, end):\n        if array[i] > array[i - 1]:\n            return i\n\n    return end\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nfrom typing import List\n\n\ndef smallest_missing(A: List, start: int = 0, end: int = None) -> int:\n    if not A:\n        return 0\n    end = len(A) if end is None else end\n    B = [i for i in range(start, end + 1)]\n    for i, v in enumerate(B):\n        if v not in A:\n            return v\n    return len(A)\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    \"\"\"\n    :param arr: (list)\n    :param start: (int)\n    :param end: (int)\n    :return: (int)\n    \"\"\"\n    for i in range(start, end + 1):\n        if i != arr[i]:\n            return i\n    return end + 1\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nfrom collections import defaultdict\ndef smallest_missing(lst, start, end):\n    missing = set(range(start, end + 1))\n    for i in lst:\n        missing.remove(i)\n    return min(missing)\n\n\ndef smallest_missing_2(lst, start, end):\n    missing = set(range(start, end + 1))\n    for i in lst:\n        if i > start and i < end:\n            missing.remove(i)\n    return min(missing)"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(arr):\n    n = len(arr)\n    # Build a max heap\n    for i in range(n//2-1, -1, -1):\n        max_heapify(arr, i, n)\n    # One by one extract elements\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        max_heapify(arr, 0, i)\n    return arr\n\n\ndef max_heapify(arr, i, n):\n    largest = i  # Initialize largest as root\n    l = 2 * i + 1  # left = 2*i + 1\n    r = 2 * i + 2  # right = 2*i + 2\n\n    # See if left child of root exists and is\n    # greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    # See if right child of root exists and is\n    # greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n        # Heapify the root.\n        max_heapify(arr, largest, n)\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\n\n\ndef heap_assending(lst):\n    heap = []\n    for i in lst:\n        heappush(heap, i)\n    res = []\n    while heap:\n        res.append(heappop(heap))\n    return res\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(list_arr):\n    heap = []\n    for num in list_arr:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(len(list_arr))]\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom collections import deque\ndef heap_ascending(A):\n    heap = deque()\n    for i in range(len(A)):\n        heap.append((A[i], i))\n    min_index = 0\n    for i in range(len(A)-1):\n        current_min = heap.popleft()\n        while heap:\n            next_min = heap[0]\n            if next_min[0] > current_min[0]:\n                heap[0] = current_min\n                min_index = next_min[1]\n                heap[0] = next_min\n                heap[min_index] = current_min\n                break\n            else:\n                heap.popleft()\n    return [A[i] for i in range(len(A))]\n\nA = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\n\ndef heap_ascending(arr):\n    heappush(arr, arr[0])\n    for i in range(1, len(arr)):\n        heappush(arr, arr[i])\n    return heappop(arr)\n\n\ndef main():\n    arr = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]\n    print(heap_ascending(arr))\n\n\nmain()", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nimport heapq\n\n\ndef heap_assending(arr):\n    if len(arr) <= 1:\n        return arr\n    heapq.heapify(arr)\n    n = len(arr)\n    sorted_arr = []\n    while n:\n        sorted_arr.append(heapq.heappop(arr))\n        n -= 1\n    return sorted_arr\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(lst):\n\tn = len(lst)\n\theap = []\n\tfor i in range(n):\n\t\theapq.heappush(heap, lst[i])\n\t\tmax = heapq.heappop(heap)\n\t\tlst[i] = max\n\treturn lst\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import *\n\ndef heap_assending(arr):\n    if len(arr) == 0:\n        return arr\n    \n    max_heap = []\n    for i in range(len(arr)):\n        heappush(max_heap, arr[i])\n    result = []\n    for _ in range(len(arr)):\n        result.append(heappop(max_heap))\n    return result\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import *\n\ndef heap_assending(arr):\n    # your code goes here\n    h = []\n    for i in arr:\n        heappush(h, i)\n    res = []\n    while len(h) > 0:\n        res.append(heappop(h))\n    return res\n\n\n# assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\n\ndef heap_ascending(lst):\n    heap = []\n    for element in lst:\n        heappush(heap, element)\n    return [heappop(heap) for _ in range(len(lst))]\n\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(w, h, d):\n    return w * h * d\n\n\n# Test", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a,b,c):\n    return a * b * c\n\nvolume_cuboid(1,2,3)\n\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n#My solution\ndef volume_cuboid(l, b, h):\n    return l*b*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(width, height, depth):\n    return width * height * depth\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a,b,c):\n    \"\"\"\n    >>> volume_cuboid(1,2,3)\n    6\n    >>> volume_cuboid(3,2,1)\n    6\n    >>> volume_cuboid(10,10,10)\n    1000\n    >>> volume_cuboid(5,5,5)\n    125\n    \"\"\"\n    return a*b*c", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(width, height, depth):\n    \"\"\"\n    :param width: a number\n    :param height: a number\n    :param depth: a number\n    :return: a number\n    \"\"\"\n    return width * height * depth\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(width, height, depth):\n    \"\"\"\n    Calculate the volume of a cuboid.\n\n    :param width: The width of the cuboid.\n    :param height: The height of the cuboid.\n    :param depth: The depth of the cuboid.\n    :returns: The volume of the cuboid.\n    \"\"\"\n    return width * height * depth\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n# Solution:\ndef volume_cuboid(a, b, c):\n    return a*b*c\n\n# Test:", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length, width, height):\n    \"\"\"\n    :param length: The length of a cuboid\n    :param width: The width of a cuboid\n    :param height: The height of a cuboid\n    :return: The volume of a cuboid\n    \"\"\"\n    return length*width*height\n\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(length, width, height):\n    \"\"\"\n    :param length: (int) length of the cuboid\n    :param width: (int) width of the cuboid\n    :param height: (int) height of the cuboid\n    :return: (int) volume of the cuboid\n    \"\"\"\n    if length > width and length > height:\n        volume = length * width * height\n    elif length > width and width > height:\n        volume = length * width * height\n    else:\n        volume = length * width * height\n    return volume\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    return list(itertools.permutations(string))\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    return list(itertools.permutations(string))\n\n\ndef test_permute_string():\n    assert permute_string('ab') == ['ab', 'ba']", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    result = []\n    if not s:\n        return []\n    def permute_string_helper(start, visited):\n        if start == len(s):\n            result.append(''.join(visited))\n        for i in range(start, len(s)):\n            if i == start or s[start] != s[i]:\n                visited.append(s[i])\n                permute_string_helper(start+1, visited)\n                visited.pop()\n    permute_string_helper(0, [])\n    return result\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 1:\n        return [s]\n    cur = permute_string(s[1:])\n    res = [s[0] + x for x in cur]\n    res += [x + s[0] for x in cur]\n    return res\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    # imitating the logic of permutations algorithm \n    # by generating a list of permutations from the original string\n    # permute_list = [char for char in string]\n    # permutations = []\n    # while permute_list:\n    #     permutations.append(''.join(permute_list))\n    #     permute_list = permute_list + permute_list\n\n    # return permutations\n    \n    # for i in range(len(string)+1):\n    #     for j in range(len(string)+1-i):\n    #         temp = string[j:j+i]\n    #         for k in range(i-1):\n    #             temp = temp+temp[0]\n    #         permutations.append(temp)\n    # return permutations\n    \n    result = []\n    def dfs(path, temp):\n        if not path:\n            result.append(temp)\n        for i in range(len(path)):\n            dfs(path[i+1:], temp+path[i])\n    \n    dfs(list(string), '')\n    return result\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    if len(string) == 1:\n        return [string]\n    else:\n        result = []\n        for letter in string:\n            sub_result = permute_string(string.replace(letter, \"\"))\n            for sub_string in sub_result:\n                result.append(letter + sub_string)\n        return result\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(str):\n    def dfs(s,n):\n        if n==0:\n            yield s\n        for i in range(n):\n            if s[i] != ' ':\n                for r in dfs(s[:i]+s[i+1:],n-1):\n                    yield s[:i]+r+s[i]\n    return list(dfs(str,len(str)))", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    res = []\n    for i in range(len(string) - 1):\n        for j in range(i + 1, len(string)):\n            for k in range(j + 1, len(string)):\n                for m in range(k + 1, len(string)):\n                    res.append(string[:i] + string[i:j] + string[j:k] + string[k:m] + string[m:])\n    return res", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(string):\n    if len(string) == 1:\n        return [string]\n    else:\n        results = []\n        for i in range(len(string)):\n            first = string[:i] + string[i+1:]\n            for result in permute_string(first):\n                results.append(string[i:i+1] + result)\n        return results\n\npermute_string('ab')", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    permutations = []\n    def permute(arr, perm):\n        if len(arr) == 0:\n            permutations.append(''.join(perm))\n        else:\n            for i in range(len(arr)):\n                permute(arr[:i] + arr[i+1:], perm + [arr[i]])\n    permute(list(s), [])\n    return permutations\n\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, round_to):\n    return num - (num % round_to)\n\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(x,y):\n    if y == 0:\n        return x\n    else:\n        temp = x % y\n        if temp == 0:\n            return x\n        else:\n            return x+y-(temp)", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\nimport pytest\n\ndef round_num(num, multiple):\n    return (num + multiple - 1) // multiple * multiple\n\ndef test_round_num():\n    assert round_num(1,1) == 1\n    assert round_num(2,2) == 2\n    assert round_num(2,3) == 2\n    assert round_num(10,3) == 10\n    assert round_num(10,4) == 10\n    assert round_num(4722,10) == 4720\n    assert round_num(4722,9) == 4720\n    assert round_num(4723,10) == 4730\n    assert round_num(4723,9) == 4730", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,multiple):\n    if num == 0:\n        return 0\n    return int(num + multiple/2.0)*multiple/multiple\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,mult):\n    # write your solution here\n    if (num/mult)==(num//mult):\n        return (num//mult)*mult\n    else:\n        return (num//mult+1)*mult", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(number,multiple):\n    #your code here\n    return int(round(number/multiple)*multiple)", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,base):\n    \"\"\"\n    The round_num function takes in two arguments, a number and a base number. It returns the number with the base number subtracted from it. \n    \"\"\"\n    # Return a number that is closest to num and is divisible by base\n    return int(round(num/base)*base)\n\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(number,multiple):\n    return number-number%multiple\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\nimport numpy as np\n\n\ndef round_num(num, multiple):\n    return (int(num/multiple) + 1) * multiple\n\n\ndef test_round_num():\n    assert round_num(4722, 10) == 4720\n\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\nimport math\ndef round_num(num, multiple):\n    return math.ceil(num / multiple) * multiple\n\ndef test_function():\n    assert round_num(4722, 10) == 4720\n    assert round_num(4722, 2) == 4720\n    assert round_num(4722, 0.5) == 4720.0\n    assert round_num(4722, 2.5) == 4720.0\n    assert round_num(4722, 2.3) == 4720.0\n    assert round_num(4722, -2.3) == 4700.0\n    assert round_num(4722, -2.3) == 4700.0\n    assert round_num(4722, -2.5) == 4700.0\n    assert round_num(4722, -0.5) == 4720.0\n    assert round_num(4722, -2) == 4700.0\n    assert round_num(4722, -10) == 4700.0\n    assert round_num(4722, 0) == 4722\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    _dict = {}\n    for num in tup:\n        if num in _dict:\n            _dict[num] += 1\n        else:\n            _dict[num] = 1\n\n    return [tup[i] if _dict[tup[i]] == 1 else 'MSP' for i in range(len(tup))]\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nfrom typing import Tuple\n\n\ndef remove_replica(elements: Tuple) -> Tuple:\n    \"\"\"\n    :param elements:\n    :return:\n    \"\"\"\n    if not isinstance(elements, tuple):\n        return elements\n    res = [i for i in elements if elements.count(i) == 1]\n    res.extend([i for i in elements if elements.count(i) > 1])\n    return tuple(res)", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(items):\n    # try to remove items from the end and start of the list. If the same element is found twice, replace it with 'MSP'.\n    # return the result\n    print(items)\n    remove_start = 0\n    remove_end = len(items) - 1\n    while remove_end > remove_start:\n        if items[remove_start] == items[remove_end]:\n            items[remove_end] = 'MSP'\n        else:\n            remove_end -= 1\n        remove_start += 1\n    return items", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(inp):\n    counts = {}\n    out = []\n    for e in inp:\n        counts[e] = counts.get(e, 0) + 1\n    for k, v in counts.items():\n        if v > 1:\n            out.append(k)\n    for e in inp:\n        if e in out:\n            out.append('MSP')\n        else:\n            out.append(e)\n    return out\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(lst):\n    return_list = []\n    first_index = {}\n    for i in range(len(lst)):\n        if lst[i] in first_index:\n            return_list.append(first_index[lst[i]])\n        else:\n            return_list.append(lst[i])\n            first_index[lst[i]] = i\n\n    return return_list\n\n\n#assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(numbers):\n    uniq_numbers = set(numbers)\n    numbers = [ x if x in uniq_numbers else 'MSP' for x in numbers ]\n    return tuple(numbers)\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    if not len(tup):\n        return tup\n    set_tup = set(tup)\n    new_tup = [x if x not in set_tup else 'MSP' for x in tup]\n    return new_tup\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\nfrom typing import List\n\n\ndef remove_replica(nums: List[int]) -> List[int]:\n    # write your code here\n    return [num if nums.count(num) == 1 else 'MSP' for num in nums]", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\nimport collections\n\n\ndef remove_replica(tup):\n    res = []\n    counter = collections.Counter(tup)\n    for k, v in counter.items():\n        if v == 1:\n            res.append(k)\n        else:\n            res.append(k + 'MSP')\n    return tuple(res)\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(list_of_tuples):\n    result_list = []\n    for i in list_of_tuples:\n        if i not in result_list:\n            result_list.append(i)\n    return result_list\n\n\ndef main():\n    print(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)))\n\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str1, ch):\n    str1 = str1.replace(ch,'')\n    return str1\n\n\n# +\n# QUESTION 5\n# Find the missing numbers from 1 to 1000\n\n# +\ndef find_missing_numbers(n):\n    missing_numbers = list(range(1,n+1))\n    for i in range(1,n+1):\n        if i not in missing_numbers:\n            missing_numbers.remove(i)\n    return missing_numbers\n\nfind_missing_numbers(1000)\n\n\n# +\n# QUESTION 6\n# Given a string, return a new string where the first and last chars have been exchanged.\n\n# +\ndef swap_first_and_last_characters(str1):\n    return str1[1:]+str1[0]+str1[1:-1]\n\nswap_first_and_last_characters(\"geeks\")\n# -\n\n# QUESTION 7\n# Write a python program to implement stack using list. \n# Push(), Pop(), Top() function should be there in stack.\n\n# +\nfrom collections import deque\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n    if count > 0:\n        for i in range(len(string)):\n            if string[i] == char:\n                string = string.replace(char, '')\n    return string\n\n# asserts", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, char):\n    return string.replace(char, \"\")\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    return string.replace(char,'')\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str,chr):\n    lst = []\n    for i in str:\n        if i != chr:\n            lst.append(i)\n    return \"\".join(lst)\n\n\n#Test Code", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(a,c):\n    for i in a:\n        if i == c:\n            a.remove(c)\n    return a\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(str, ch):\n    return str.replace(ch, '')\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str,ch):\n    return str.replace(ch, \"\")\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string,char):\n    i = string.find(char)\n    while i != -1:\n        string = string[:i] + string[i+1:]\n        i = string.find(char)\n    return string\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, remove):\n    \"\"\"\n    >>> remove_Char(\"aba\",'a')\n    'b'\n    >>> remove_Char(\"aba\",'b')\n    'ab'\n    >>> remove_Char(\"aba\",'c')\n    'aba'\n    >>> remove_Char(\"aba\",'z')\n    'aba'\n    \"\"\"\n    return string.replace(remove, \"\")\n\n\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n# Test\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(list_):\n    \"\"\"\n    Move first element to last position in the given list\n    \"\"\"\n    temp = list_[0]\n    for i in range(0, len(list_)):\n        if i != 0:\n            list_[i] = list_[i-1]\n    list_[-1] = temp\n    return list_\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    first_index = 0\n    for i in range(1, len(lst)):\n        lst[first_index], lst[i] = lst[i], lst[first_index]\n        first_index += 1\n    return lst\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(numbers):\n    if numbers == None or len(numbers) == 0:\n        return numbers\n    first = numbers[0]\n    numbers.pop(0)\n    numbers.append(first)\n    return numbers\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(arr):\n    arr.append(arr.pop())\n    return arr\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    return [lst[-1]] + lst[:-1]\n\n# def move_first(lst):\n#     return lst + [lst.pop()]", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(num_list):\n    return num_list[-1:] + num_list[:-1]\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    temp = lst[-1]\n    lst[-1] = lst[0]\n    lst[0] = temp\n    return lst\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(arr):\n    arr.insert(0, arr.pop())\n    return arr\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    \"\"\"\n    Return a list where the first item has been swapped with the last item.\n\n    >>> move_first([1,2,3,4])\n    [4,1,2,3]\n\n    >>> move_first([1,2,3,4,5,6,7,8,9,10])\n    [10,1,2,3,4,5,6,7,8,9]\n\n    >>> move_first([1,2,3,4,5,6,7,8,9,10,11,12,13])\n    [11,1,2,3,4,5,6,7,8,9,10,12,13]\n\n    >>> move_first([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n    [12,1,2,3,4,5,6,7,8,9,10,11,13,14,15]\n    \"\"\"\n    result = [None] * len(lst)\n    last_item = lst.pop()\n    result[0] = last_item\n    result[-1] = lst[0]\n    for i in range(1, len(lst)):\n        result[i] = lst[i]\n    return result\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    return lst[-1:] + lst[:-1]\n\ndef move_first(lst):\n    new_lst = lst[1:] + [lst[0]]\n    return new_lst\n\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(length,width,height):\n\treturn 2*length*width + 2*length*height + 2*width*height", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(l,w,h):\n    # Your code here\n    return 2*l*w + 2*w*h + 2*h*l\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length, width, height):\n    return (length + width + height) * 2 * (length * width + width * height + height * length)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(width,length,height):\n    sa=width*length+width*height+length*height\n    return sa\n\n#assert surfacearea_cuboid(1,2,3)==22\n\ndef surfacearea_cuboid2(width,length,height):\n    return width*length*2+width*height*2+length*height*2\n\n#assert surfacearea_cuboid2(1,2,3)==22\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length, width, height):\n    result = 2 * (length * width + width * height + length * height)\n    return result\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(length, width, height):\n    return 2 * (length * width + length * height + width * height)\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w+w*h+h*l)\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\n# Solution \n\ndef surfacearea_cuboid(l, w, h):\n    \"\"\"\n    The surface area of a cuboid is the sum of the surface areas of\n    each face: 2 * l * w + 2 * l * h + 2 * w * h\n    \"\"\"\n    return 2 * l * w + 2 * l * h + 2 * w * h\n\n\n# Test", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(x, y, z):\n    \"\"\"\n    calculate the surface area of a cuboid\n    :param x:\n    :param y:\n    :param z:\n    :return:\n    \"\"\"\n    return 2 * x * y + 2 * y * z + 2 * z * x\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a, b, c):\n  return 2 * (a*b + a*c + b*c)\n\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(x, y):\n    new_list = []\n    for i in range(x):\n        new_list.append([])\n        for j in range(y):\n            new_list[i].append(i*y+j)\n    return new_list", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\nimport random\n\ndef multi_list(row, col):\n    multi_list = []\n    for i in range(row):\n        multi_list.append([0]*col)\n    return multi_list\n\ndef multi_list(row, col):\n    arr = []\n    for i in range(row):\n        arr.append([0]*col)\n    return arr\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\nfrom random import randint\n\ndef multi_list(r, c):\n    return [[randint(0, 99) for x in range(c)] for y in range(r)]\n\n# Test case: r = 3, c = 4\n# expected output: [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(rows,columns):\n  return [[0]*columns for row in range(rows)]\n\ndef multi_list_2(rows,columns):\n    return [[0]*columns for i in range(rows)]\n\ndef multi_list_3(rows,columns):\n    return [[0 for i in range(columns)] for i in range(rows)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(rows,cols):\n    if rows < 1 or cols < 1:\n        return None\n    else:\n        result = [None]*rows\n        for row in range(0,rows):\n            result[row] = [0]*cols\n        return result\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n,m):\n    arr = []\n    for i in range(n):\n        arr.append([])\n        for j in range(m):\n            arr[i].append(0)\n    return arr\n\n# Print Multi List\ndef print_multi_list(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            print(arr[i][j], end = \" \")\n        print()\n    print()\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(row,col):\n    return [[0 for x in range(col)] for y in range(row)] \n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(row, column):\n  result = []\n  for i in range(row):\n    temp = []\n    for j in range(column):\n      temp.append(i * column + j)\n    result.append(temp)\n  return result\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(size1, size2):\n    return list(zip(\n        [0] * size1,\n        range(size1),\n        [0] * size2,\n        range(size2)\n    ))\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(size1, size2):\n    return [[0]*size2 for i in range(size1)]\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(sorted_list, index):\n    return sorted(sorted_list, key = lambda x: x[index])\n\n# assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst,index):\n    # 1. Take the length of each list in the list of lists\n    # 2. Sort them in descending order\n    # 3. zip them\n    # 4. Sort them in ascending order\n    # 5. Return the list\n\n    length_of_list = [len(x) for x in lst]\n    sorted_list = sorted(length_of_list,reverse=True)\n    lst2 = [i for _, i in sorted(zip(length_of_list, lst))]\n    sorted_lst2 = sorted(lst2, key=lambda k: k[index])\n    return sorted_lst2\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list, index):\n    return sorted(list, key=lambda x:x[index])", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_tuples, index):\n    return sorted(list_of_tuples, key=lambda x: x[index])\n\ndef test_index_on_inner_list():\n    list_of_tuples = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\n    assert index_on_inner_list(list_of_tuples, 0) == [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst, index):\n    if not lst:\n        return lst\n    temp_list = sorted(lst, key = lambda x: x[index])\n    return temp_list\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(L, index):\n    return sorted(L, key=lambda x: x[index])\n\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_lists,index):\n    new_list = sorted(list_of_lists, key=lambda x:x[index])\n    return new_list\n\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(input,index):\n    output = []\n    for i in sorted(input, key=lambda x: x[index]):\n        output.append(i)\n    return output\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(arg, key_index):\n    return sorted(arg, key=lambda x: x[key_index])\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\n# Problem: https://edabit.com/challenge/hm3dHW9g8uqXkE7kC\n#\n# Approach:\n# 1. Create a helper function which calculates the number of rotations for each element in the array.\n# 2. Iterate through the array and sum the total number of rotations.\n#\n\ndef find_rotation_count(numbers):\n    \"\"\"\n    Calculate the number of rotations for each element in the array.\n    \"\"\"\n    rotation_count = []\n    for n in numbers:\n        total_rotation = 0\n        current_value = n\n        while current_value in numbers:\n            current_value = (current_value + 1) % len(numbers)\n            total_rotation += 1\n        rotation_count.append(total_rotation)\n    return sum(rotation_count)\n\n# print(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])) # Should be 3", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    count = 0\n    i = 0\n    length = len(arr)\n    while i < length:\n        if i != length - 1:\n            if arr[i] > arr[i + 1]:\n                count += 1\n        i += 1\n    return count\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(array):\n    \"\"\"\n    Finds the rotation count of the array, where the array is already sorted.\n    \"\"\"\n    if len(array) == 1:\n        return 0\n\n    count = 0\n    last_num = array[0]\n    for num in array[1:]:\n        if num > last_num:\n            count += 1\n        else:\n            break\n        last_num = num\n    return count\n\n\ndef test():\n    \"\"\"\n    Run tests\n    \"\"\"\n    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert find_rotation_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n    assert find_rotation_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 1\n    assert find_rotation_count([1]) == 0\n    assert find_rotation_count([1, 1, 1]) == 0\n    print(\"ALL TEST CASES PASSED\")\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef find_rotation_count(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 0\n\n    # count how many are greater than the left most element\n    # Example: [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    count = 0\n    for i in range(1, n):\n        if arr[i] > arr[0]:\n            count += 1\n        else:\n            break\n\n    if count == n:\n        return 0\n\n    # count how many are less than the right most element\n    # Example: [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    count = 0\n    for i in range(n - 2, -1, -1):\n        if arr[i] < arr[n - 1]:\n            count += 1\n        else:\n            break\n\n    return count + 1", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(arr: List[int]) -> int:\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    count = 0\n    low = 0\n    high = len(arr) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            count += high - mid\n            low = mid + 1\n        else:\n            high = mid\n\n    return count\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(N) where N is the length of the list.\n    Space Complexity: O(1) in-place.\n    \"\"\"\n    first_element = numbers[0]\n    max_element = max(numbers)\n    min_element = min(numbers)\n\n    # Rotation count is the minimum of the abs(max_element - first_element) and abs(min_element - first_element).\n    rotation_count = min(abs(max_element - first_element), abs(min_element - first_element))\n\n    return rotation_count\n\n\ndef find_rotation_count_2(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(N) where N is the length of the list.\n    Space Complexity: O(1) in-place.\n    \"\"\"\n    first_element = numbers[0]\n\n    rotation_count = 0\n    for number in numbers:\n        if number > first_element:\n            rotation_count += 1\n\n    return rotation_count\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    l = find_min(arr)\n    r = find_max(arr)\n    while r < n and arr[l] <= arr[r]:\n        r += 1\n    if r >= n or arr[r] > arr[l]:\n        return 0\n    # find the min value bigger than arr[l]\n    for i in range(l, r+1):\n        if arr[l] > arr[i]:\n            l = i\n    if l == 0:\n        return 1\n    else:\n        return r - l + 1\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    N = len(arr)\n\n    def is_sorted(arr):\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    return False\n        return True\n\n    if not is_sorted(arr):\n        raise ValueError(\"Input array is not sorted.\")\n\n    if N <= 1:\n        return 0\n\n    left = arr[0]\n    right = arr[-1]\n\n    if left == right:\n        return 0\n\n    if left < right:\n        return N - bisect.bisect_left(arr, right, 0, N)\n\n    else:\n        return N - bisect.bisect_left(arr, left, 0, N)\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_rotation_count(arr: List[int]) -> int:\n    return find_rotation_count_using_binary_search(arr)\n\n\ndef find_rotation_count_using_binary_search(arr: List[int]) -> int:\n    \"\"\"\n    time complexity: O(log n)\n    \"\"\"\n    if not arr:\n        return 0\n\n    return binary_search(arr, 0, len(arr) - 1, arr[0])\n\n\ndef binary_search(arr: List[int], start: int, end: int, target: int) -> int:\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            return 0\n        elif arr[mid] < target:\n            start = mid + 1\n        elif arr[mid] > target:\n            end = mid - 1\n\n    if arr[start] == target:\n        return 1\n    return -1\n\n\ndef find_rotation_count_using_doubling(arr: List[int]) -> int:\n    \"\"\"\n    time complexity: O(log n)\n    \"\"\"\n    if not arr:\n        return 0\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] <= arr[right]:\n            if arr[mid] <= arr[left]:\n                return right - left + 1\n            right = mid - 1\n        else:\n            if arr[mid] >= arr[right]:\n                return right - left + 1\n            left = mid + 1\n\n    if arr[left] <= arr[right]:\n        return right - left + 1\n\n    return 0\n\n\ndef main():\n    print(find_rotation_count_using_doubling([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(array):\n    return len(array) - array.index(min(array)) - 1\n"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\n# Write your function here\ndef even_bit_toggle_number(num):\n  result = 0\n  # your code goes here\n  for i in range(0, 32):\n    if num & 0x1:\n      result |= 1 << (31 - i)\n    num >>= 1\n  return result\n\n# TEST CASES", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num ^ (num & 0x5555555555555555)\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    \"\"\"\n    This function toggles all odd bits of a given number.\n    \"\"\"\n    return n ^ (n+1)\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    # write your code here\n    res = 0\n    for i in range(32):\n        if number & 1 << i:\n            res = res ^ 1 << i\n        else:\n            res = res | 1 << i\n    return res\n\ndef test():\n    assert even_bit_toggle_number(10) == 15\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return 2**(n-1) - 1\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    num = int(num)\n    num = num | num >> 1\n    return num\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(number):\n    mask = 1\n    even_num = number & mask\n    even_num = even_num ^ number\n    return even_num\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\n#Solution\ndef even_bit_toggle_number(number):\n    number = number & 0x55555555\n    number = (number >> 1) | (number << 1)\n    return number\n\n#Tests", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    pass\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return (n & 0b1111) | ((n >> 1) & 0b10000) | ((n >> 2) & 0b1000000) | ((n >> 3) & 0b10000000) | ((n >> 4) & 0b100000000) | ((n >> 5) & 0b1000000000) | ((n >> 6) & 0b10000000000) | ((n >> 7) & 0b100000000000)\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n, arr):\n    frequency = 0\n    for num in arr:\n        if num < min(arr):\n            frequency += 1\n    return frequency\n\n#Below is an example test case for the above function.\n\n#Below is an example test case for the above function.\narr = [1,2,3,4,3]", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(a,arr):\n    freq_dic={}\n    for i in arr:\n        if i not in freq_dic:\n            freq_dic[i]=0\n        freq_dic[i]+=1\n    min_val=float(\"inf\")\n    min_count=0\n    for key,value in freq_dic.items():\n        if key<min_val and value<min_count:\n            min_val=key\n            min_count=value\n    return min_count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\n# my solution:\ndef frequency_Of_Smallest(arr):\n    \"\"\"\n    frequency_Of_Smallest(arr)\n    Returns a dictionary of the frequency of smallest elements in the array\n    :param arr: an array of numbers\n    :return: a dictionary of frequencies of smallest elements\n    \"\"\"\n    dictionary = {}\n    for element in arr:\n        dictionary[element] = arr.count(element)\n    return min(dictionary.items(), key=operator.itemgetter(1))[0]\n\n\n# this is the solution from the book:\n\ndef frequency_Of_Smallest(arr):\n    \"\"\"\n    frequency_Of_Smallest(arr)\n    Returns a dictionary of the frequency of smallest elements in the array\n    :param arr: an array of numbers\n    :return: a dictionary of frequencies of smallest elements\n    \"\"\"\n    return min(set(arr), key=arr.count)\n\n# end of code", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\nimport unittest\n\ndef frequency_Of_Smallest(k, arr):\n    if k <= 0 or len(arr) < k:\n        return 0\n    smallest = arr[0]\n    frequency = 1\n    for i in range(1,len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n            frequency = 1\n        elif arr[i] == smallest:\n            frequency += 1\n    return frequency\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,arr):\n    return arr.count(min(arr))\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(k,arr):\n    freq = 0\n    for i in arr:\n        if i < min(arr):\n            freq += 1\n    return freq\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n, arr):\n    freq = 0\n    mini = arr[0]\n    for num in arr:\n        if num < mini:\n            freq += 1\n            mini = num\n    return freq\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(numbers,numbers_list):\n    temp = {}\n    for num in numbers_list:\n        if num in temp.keys():\n            temp[num] += 1\n        else:\n            temp[num] = 1\n\n    return temp[min(temp.keys())]", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(arr):\n\ta = arr\n\tn = len(a)\n\tfreq = 0\n\tfor i in range(n):\n\t\tmin_ = min(a)\n\t\ta.remove(min_)\n\t\tfreq = freq + 1\n\treturn freq\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        print(min(arr))\n        return arr.count(min(arr))\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n <= 2:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\n# The first few Perrin Numbers:\n# 1, 12, 28, 49, 84, 133, 196, 273, 364, 469, 588, 721, 868, 1029, 1204, 1393, 1596, 1813, 2044, 2289, 2548, 2821, 3108, 3409, 3724, 4053, 4396, 4753, 5124, 5509, 5908, 6321, 6748, 7189, 7644, 8113, 8596, 9093, 9604, 10129, 10668, 11221, 11788, 12369, 12964, 13573, 14196, 14833, 15484, 16149, 16828, 17521, 18228, 18949, 19684, 20433, 21196, 21973, 22764, 23569, 24388, 25221, 26068, 26929, 27804, 28693, 29596, 30513, 31444, 32389, 33348, 34321, 35308, 36309, 37324", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\ndef test_get_perrin():\n    assert get_perrin(9) == 12\n    assert get_perrin(10) == 25\n    assert get_perrin(11) == 45\n    assert get_perrin(12) == 75\n\ndef get_perrin2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        return get_perrin2(n - 1) + get_perrin2(n - 2)\n\ndef test_get_perrin2():\n    assert get_perrin2(9) == 12\n    assert get_perrin2(10) == 25\n    assert get_perrin2(11) == 45\n    assert get_perrin2(12) == 75\n\n\ndef get_perrin3(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\ndef test_get_perrin3():\n    assert get_perrin3(9) == 12\n    assert get_perrin3(10) == 25\n    assert get_perrin3(11) == 45\n    assert get_perrin3(12) == 75", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    return get_perrin_helper(n, 1)\n\ndef get_perrin_helper(n, curr_num):\n    if n == 1:\n        return curr_num\n    return get_perrin_helper(n - 1, curr_num + n)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return get_perrin(n - 1) + get_perrin(n - 2)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    \"\"\"\n    Return the n'th perrin number.\n    >>> get_perrin(9)\n    12\n    >>> get_perrin(4)\n    1\n    >>> get_perrin(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    # Return 0 for negative numbers\n    if n < 0:\n        return 0\n\n    # Return 1 for zero\n    if n == 0:\n        return 1\n\n    # Return 1 for first number\n    if n == 1:\n        return 1\n\n    # Return perrin(n - 1) + perrin(n - 2) for n >= 2\n    return get_perrin(n - 1) + get_perrin(n - 2)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    \"\"\"returns the n'th perrin number\"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n\ndef get_perrin_2(n):\n    \"\"\"returns the n'th perrin number\"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return get_perrin_2(n-1) + get_perrin_2(n-2)", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\nfrom typing import Union\n\n\ndef get_perrin(n: int) -> Union[int, str]:\n    \"\"\"\n    Find the nth perrin number.\n    :param n:\n    :return:\n    >>> get_perrin(10)\n    420\n    >>> get_perrin(20)\n    'Can only generate 20th Perrin number'\n    >>> get_perrin(2)\n    1\n    \"\"\"\n    if n == 2:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return 1 + get_perrin(n-1)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_perrin(n-1) + get_perrin(n-2)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\nimport unittest\n\n\ndef swap_count(str_input):\n    \"\"\"\n    :type str_input: str\n    :rtype: int\n    \"\"\"\n    if not str_input:\n        return 0\n\n    stack = []\n\n    for char in str_input:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return -1\n            if stack.pop() != '[':\n                return -1\n\n    return len(stack)\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    s = list(string)\n    stack = []\n    swap_count = 0\n    for i, char in enumerate(s):\n        if char == '[':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                swap_count += 1\n            else:\n                swap_count += 1\n                stack.pop()\n    return swap_count\n\n# The above function can be rewritten using stack as follows.\n\ndef swap_count(string):\n    stack = []\n    swap_count = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append(i)\n        elif char == ']':\n            if len(stack) == 0:\n                swap_count += 1\n            else:\n                swap_count += 1\n                stack.pop()\n    return swap_count\n\n\n# +\ndef swap_count(string):\n    stack = []\n    swap_count = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append(i)\n        elif char == ']':\n            if len(stack) == 0:\n                swap_count += 1\n            else:\n                swap_count += 1\n                stack.pop()\n    return swap_count\n\nstring = \"[()()][][]\"", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    string = list(string)\n    stack = []\n    for i in string:\n        if i in [\"[\",\"{\",\"(\"]:\n            stack.append(i)\n        if len(stack)==0:\n            return -1\n        if i in [\"]\",\"}\",\")\"]:\n            if len(stack)==0:\n                return -1\n            if stack.pop() != i:\n                return -1\n    return len(stack)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\nfrom itertools import chain\n\ndef swap_count(str):\n    str = list(str)\n    assert len(str) == len(set(str))\n    stack = []\n    pairs = {\"(\":\")\", \"[\":\"]\", \"{\":\"}\"}\n    for s in str:\n        if s in pairs.keys():\n            stack.append(s)\n        elif s == pairs[stack.pop()]:\n            continue\n        else:\n            break\n    return len(stack)\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(str):\n    count = 0\n    opened = 0\n    for ch in str:\n        if ch == \"[\":\n            opened += 1\n        else:\n            if opened == 0:\n                return -1\n            opened -= 1\n        count += opened\n    return count\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\nfrom collections import deque\n\n\ndef is_matched(char1, char2):\n    if char1 == '[' and char2 == ']':\n        return True\n    if char1 == '(' and char2 == ')':\n        return True\n    if char1 == '{' and char2 == '}':\n        return True\n    return False\n\n\ndef swap_count(string):\n    stack = deque()\n    for c in string:\n        if is_matched(c, stack.pop() if len(stack) else None):\n            stack.append(c)\n        else:\n            stack.append(c)\n    return len(stack)\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(string):\n    count = 0\n    for i in string:\n        if i == \"[\":\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                count = 0\n    return count\n\ndef swap_count_recursive(string):\n    if string == \"\":\n        return 0\n    return swap_count_recursive(string[1:]) + (string[0] == \"[\" and swap_count_recursive(string[1:]) or 0)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(str):\n    char_dict = {'(': 1, '[':2, '{':3}\n    stack = []\n    swap = 0\n    for i in str:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        else:\n            if not stack or (stack[-1] and char_dict[i] < char_dict[stack[-1]]):\n                stack.append(i)\n            else:\n                swap += 1\n                stack.pop()\n\n    return swap\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\nfrom typing import List\n\n\ndef swap_count(string: str) -> int:\n    stack = []\n\n    for char in string:\n        if char in [\"(\", \"[\", \"{\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return -1\n            top_char = stack.pop()\n\n            if char == \"]\" and top_char == \"[\":\n                continue\n            elif char == \")\" and top_char == \"(\":\n                continue\n            elif char == \"}\" and top_char == \"{\":\n                continue\n            else:\n                return -1\n\n    return len(stack)\n\n\n# Time: O(n)\n# Space: O(n)", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(str_):\n    stack = []\n    for c in str_:\n        if c == '[':\n            stack.append(c)\n        else:\n            if stack == []:\n                return -1\n            else:\n                stack.pop()\n    return len(stack)\n\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(num):\n    \"\"\"\n    Check if the num is even or odd\n    \"\"\"\n    if num[0].isalpha():\n        return \"Please enter a hexadecimal number\"\n    if num[0].isdigit():\n        if len(num)%2==0:\n            return \"Even\"\n        else:\n            return \"Odd\"\n    else:\n        return \"Please enter a hexadecimal number\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(num):\n    if int(num[::2]) != int(num[1::2]):\n        return \"Odd\"\n    else:\n        return \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(num):\n    if int(num[-1])%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hexnum):\n    if int(hexnum, 16)%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hexadecimal):\n    if hexadecimal[0] == \"0\" or hexadecimal[-1] == \"0\":\n        return \"Even\"\n    else:\n        return \"Odd\"", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(x):\n    y = int(x, 16)\n    if y%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(num):\n    if num.startswith(\"0x\"):\n        num = num[2:]\n    num = int(num, 16)\n    if num%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n    ", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n# function to check whether the hexadecimal number is even or odd\ndef even_or_odd(num):\n    # convert the hexadecimal number into binary number\n    bin_num = bin(int(num, 16))[2:]\n    # if number of '1's are odd return 'Odd'\n    if len(bin_num) % 2 != 0:\n        return \"Odd\"\n    # else return 'Even'\n    else:\n        return \"Even\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    if hex_num[-1] == '0':\n        return 'Even'\n    else:\n        return 'Odd'\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n# my code\ndef even_or_odd(h_num):\n    h_num = str(h_num)\n    sum = 0\n    if len(h_num)%2 == 0:\n        for i in h_num:\n            if i.isdigit():\n                sum = sum + int(i)\n            if i == 'x':\n                return \"Even\"\n    elif len(h_num)%2 == 1:\n        for i in h_num:\n            if i.isdigit():\n                sum = sum + int(i)\n            if i == 'x':\n                return \"Odd\"\n    return sum\n\n# Problem 5: Hex to Decimal"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    for i in range(2,n+1):\n        if (n&i==0):\n            return i\n    return n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Get the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Find the base 2 logarithm of n\n    logn = int(math.log(n, 2))\n    # Return 2 ** (logn)\n    return 2 ** (logn)\n\n\ndef test_highest_Power_of_2():\n    \"\"\"\n    Run doctests - prints results of doctests.\n    \"\"\"\n    print(\"testing highest_Power_of_2()\")\n    assert highest_Power_of_2(10) == 8\n    assert highest_Power_of_2(123) == 256\n    assert highest_Power_of_2(2147483647) == 1 << 31\n    assert highest_Power_of_2(1) == 1\n    assert highest_Power_of_2(0) == 0\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    result = 0\n    while 2**result <= n:\n        result += 1\n    return result - 1", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    power = 1\n    while (pow(2, power) <= n):\n        power += 1\n    return pow(2, power - 1)\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    '''\n        >>> highest_Power_of_2(10)\n        8\n    '''\n    # to find highest power of 2 using bitwise AND\n    max_power_of_2 = 0\n    while n > 0:\n        max_power_of_2 = (max_power_of_2 << 1) | (n & 1)\n        n >>= 1\n    return max_power_of_2\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\nfrom math import log2\n\n\ndef highest_Power_of_2(n):\n    # your code here\n    return int(n & (-n))\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if(n <= 0):\n        return -1\n    else:\n        res = 0\n        while(2**res <= n):\n            res += 1\n        return res - 1\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    #initialize power\n    power = 1\n    #loop while power is less than n\n    while power < n:\n        #increase the power\n        power = 2 * power\n    #return the power of 2 that is less than n\n    return power\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    '''\n    This function takes a positive integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(12)\n    16\n    >>> highest_Power_of_2(16)\n    16\n    >>> highest_Power_of_2(8)\n    8\n    >>> highest_Power_of_2(32)\n    32\n    '''\n    result = 1\n    while n > 1:\n        n = n >> 1\n        result = result << 1\n    return result\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i//2\n\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\nimport math\n\ndef find_lucas(n):\n    if n == 0 or n == 1:\n        return 1\n    l = [1, 1]\n    for i in range(2, n+1):\n        l.append(l[-2] + l[-1])\n    return l[n]\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n < 2:\n        return 2\n    if n == 2:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    current = 2\n    previous = 1\n    for _ in range(0, n - 1):\n        current, previous = current + previous, current\n    return current\n\n\ndef main():\n    print(find_lucas(9))\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    lucas = [2]\n    count = 0\n    while count < n:\n        sum = 0\n        for index in lucas:\n            if index > 1:\n                sum += lucas[index - 2]\n        lucas.append(sum)\n        count += 1\n    return lucas[n - 1]\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    # TODO: Write your code here\n    a = 2\n    b = 1\n    count = 0\n    while (count < n):\n        a, b = b, a + b\n        count += 1\n    return b\n\ndef test_find_lucas():\n    \"\"\"Test find_lucas with some values\"\"\"\n    assert find_lucas(0) == 2\n    assert find_lucas(1) == 3\n    assert find_lucas(2) == 5\n    assert find_lucas(3) == 13\n    assert find_lucas(4) == 34\n    assert find_lucas(5) == 89\n    assert find_lucas(6) == 233\n    assert find_lucas(7) == 610\n    assert find_lucas(8) == 1638\n    assert find_lucas(9) == 4374\n    assert find_lucas(10) == 10946\n    assert find_lucas(11) == 29576\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n==1:\n        return 2\n    if n==2:\n        return 1\n    if n>2:\n        return find_lucas(n-1)+find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef lucas(n):\n    \"\"\"\n    compute the nth lucas number\n\n    :param n: nth lucas number\n    :return: nth lucas number\n    \"\"\"\n    # base cases\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n\n    # initialize two variables\n    last = 2\n    second_last = 1\n    # iterate until last is greater than n\n    for i in range(n - 1):\n        temp = second_last + last\n        last = second_last\n        second_last = temp\n\n    return last\n\n\ndef find_lucas(n):\n    \"\"\"\n    find nth lucas number\n    :param n: nth lucas number\n    :return: nth lucas number\n    \"\"\"\n    return lucas(n)\n\n\ndef test_find_lucas():\n    \"\"\"\n    test cases\n    \"\"\"\n    assert find_lucas(1) == 2\n    assert find_lucas(2) == 1\n    assert find_lucas(3) == 3\n    assert find_lucas(4) == 7\n    assert find_lucas(5) == 11\n    assert find_lucas(6) == 18\n    assert find_lucas(7) == 29\n    assert find_lucas(8) == 47\n    assert find_lucas(9) == 76\n    assert find_lucas(10) == 123", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\nimport math\n\n\ndef find_lucas(n):\n    if n <= 1:\n        return 2\n    if n == 2:\n        return 1\n    sum = 2\n    num = 3\n    while num < n:\n        sum += num\n        num = find_lucas(num)\n    return sum\n\n\ndef find_lucas_iterative(n):\n    if n <= 1:\n        return 2\n    if n == 2:\n        return 1\n\n    num = 2\n    lucas = [2]\n    while num < n:\n        next = num + lucas[num - 1]\n        lucas.append(next)\n        num += 1\n    return lucas[n - 1]\n\n\ndef test_find_lucas():\n    assert find_lucas(9) == 76\n    assert find_lucas_iterative(9) == 76\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    \"\"\"\n    Find nth Lucas number.\n    >>> find_lucas(9)\n    76\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    lucas = 2\n    lucas_m1 = 1\n    if n == 1:\n        return 2\n    for i in range(2, n+1):\n        lucas_m1 = lucas\n        lucas = lucas + lucas_m1\n    return lucas"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, string):\n    res = []\n    for item in lst:\n        res.append(string.format(item))\n    return res\n\ndef add_string2(lst, string):\n    return [string.format(item) for item in lst]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(arr,string):\n    for i in range(len(arr)):\n        arr[i] = string+str(arr[i])\n    return arr\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n#sample input\n#[\"a\",\"b\",\"c\"]\n\n#sample output\n#[\"tempa\",\"tempb\",\"tempc\"]\n\ndef add_string(lst,string):\n    return [\"{0}{1}\".format(string,i) for i in lst]", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(seq,string):\n    \"\"\"\n    :param seq: A list of items\n    :param string: String to add to beginning\n    :return: A list of items with string inserted at the beginning\n    \"\"\"\n    return [string+x for x in seq]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(list_of_items, str_to_add):\n    \"\"\"\n    :type list_of_items: list\n    :type str_to_add: str\n    :rtype: list\n    \"\"\"\n    new_list = []\n    for item in list_of_items:\n        new_list.append(str_to_add.format(item))\n    return new_list", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(list_in, s):\n    list_out = []\n    for i in list_in:\n        list_out.append(s.format(i))\n    return list_out\n\n\n# Testing your function", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(L, s):\n    L = [s + str(x) for x in L]\n    return L\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(list, string):\n    list[:] = [string.format(item) for item in list]\n    return list\n\n# Test Case 1", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst,st):\n    new_lst=[]\n    for i in lst:\n        new_lst.append(st.format(i))\n    return new_lst\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(list_of_strings, string):\n    return ['{}{}'.format(string, x) for x in list_of_strings]\n\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(L1,L2,L3):\n    return_list = []\n    for i in range(len(L1)):\n        return_list.append({L1[i]:{L2[i]:L3[i]}})\n    return return_list\n\nL1 = [\"S001\", \"S002\", \"S003\", \"S004\"]\nL2 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nL3 = [85, 98, 89, 92]", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1, list2, list3):\n    dict = {}\n    for i in range(0,len(list1)):\n        dict[list1[i]] = {}\n        for j in range(0,len(list2)):\n            dict[list1[i]][list2[j]] = list3[i]\n    return dict\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(student_list, student_dict, marks_list):\n    return dict(zip(student_list, list(zip(student_dict,marks_list))))", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1,list2,list3):\n    dict1={}\n    for i in range(0,len(list1)):\n        dict1[list1[i]]={}\n        dict1[list1[i]][list2[i]]=list3[i]\n    return dict1\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(student_id_list,school_name_list,marks_list):\n    temp={}\n    for i in range(len(student_id_list)):\n        temp[student_id_list[i]]={}\n        for j in range(len(school_name_list)):\n            temp[student_id_list[i]][school_name_list[j]]=marks_list[j]\n    return temp\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\nfrom typing import List\ndef convert_list_dictionary(student_id: List[str],school_id: List[str],marks: List[int]) -> dict:\n    from collections import defaultdict\n    student_school_marks = defaultdict(dict)\n\n    for s_id, s_name, m in zip(student_id, school_id, marks):\n        student_school_marks[s_id][s_name] = m\n\n    return student_school_marks\n\n#test\nstudent_id = [\"S001\", \"S002\", \"S003\", \"S004\"]\nschool_id = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nmarks = [85, 98, 89, 92]", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(subject_list,subject_name_list,subject_mark_list):\n  zipped_lists = zip(subject_list, subject_name_list, subject_mark_list)\n  return dict(zipped_lists)\n\nsubject_list = [\"S001\", \"S002\", \"S003\", \"S004\"]\nsubject_name_list = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nsubject_mark_list = [85, 98, 89, 92]", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n# +", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\nfrom collections import defaultdict\ndef convert_list_dictionary(keys, values, scores):\n    return [{k: {v: s} for v, s in zip(values, scores)} for k in keys]\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1,list2,list3):\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        return False\n    dictionary = {}\n    for i in range(len(list1)):\n        if list1[i] not in dictionary:\n            dictionary[list1[i]] = {}\n        if list2[i] not in dictionary[list1[i]]:\n            dictionary[list1[i]][list2[i]] = list3[i]\n        else:\n            dictionary[list1[i]][list2[i]] = list3[i]\n    return dictionary\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    pass", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n  if n == 1:\n    return 1\n  elif n == 2:\n    return 2\n  elif n == 3:\n    return 3\n  else:\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    def get_max_sum_helper(num):\n        if num == 1:\n            return num\n        return max(get_max_sum_helper(num/2), get_max_sum_helper(num/3), get_max_sum_helper(num/4), get_max_sum_helper(num/5)) + num\n    return get_max_sum_helper(n)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    def _get_max_sum(x):\n        if x <= 1: return x\n        return max( _get_max_sum(x / 2) + _get_max_sum(x / 3) + _get_max_sum(x / 4) + _get_max_sum(x / 5), x )\n\n    return _get_max_sum(n)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(num):\n    if num == 0:\n        return 0\n    return max(get_max_sum(num/2) + get_max_sum(num/3) + get_max_sum(num/4) + get_max_sum(num/5), num)\n\n# Tests", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\nfrom functools import lru_cache\n\ndef get_max_sum(n):\n    if n == 1 or n == 2 or n == 3 or n == 4 or n == 5:\n        return n\n\n    memo = {}\n    def recurse(n):\n        if n == 1 or n == 2 or n == 3 or n == 4 or n == 5:\n            return n\n\n        if n in memo:\n            return memo[n]\n\n        res = max(recurse(n//2) + recurse(n//3) + recurse(n//4) + recurse(n//5), n)\n        memo[n] = res\n        return res\n\n    return recurse(n)\n\n\n@lru_cache(None)\ndef get_max_sum_memo(n):\n    if n == 1 or n == 2 or n == 3 or n == 4 or n == 5:\n        return n\n\n    res = max(get_max_sum_memo(n//2) + get_max_sum_memo(n//3) + get_max_sum_memo(n//4) + get_max_sum_memo(n//5), n)\n    return res\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    if n % 2 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4), n)\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    if n == 6:\n        return 13\n\n    def f(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 5\n        if n == 5:\n            return 8\n        if n == 6:\n            return 13\n        l = [0] * (n+1)\n        l[0] = 0\n        l[1] = 1\n        l[2] = 2\n        l[3] = 3\n        l[4] = 5\n        l[5] = 8\n        l[6] = 13\n        for i in range(7, n+1):\n            l[i] = max(l[i/2], l[i/3], l[i/4], l[i/5], l[i/6]) + i\n        return l[n]\n\n    return f(n)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    \"\"\"\n    >>> get_max_sum(1) == 1\n    True\n    >>> get_max_sum(2) == 2\n    True\n    >>> get_max_sum(3) == 5\n    True\n    >>> get_max_sum(4) == 7\n    True\n    >>> get_max_sum(5) == 9\n    True\n    >>> get_max_sum(6) == 11\n    True\n    >>> get_max_sum(7) == 13\n    True\n    >>> get_max_sum(8) == 14\n    True\n    >>> get_max_sum(9) == 15\n    True\n    >>> get_max_sum(10) == 18\n    True\n    >>> get_max_sum(60) == 106\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 9\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 14\n    elif n == 9:\n        return 15\n    elif n == 10:\n        return 18\n    elif n == 60:\n        return 106\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom typing import List\n\ndef max_length_list(arr: List[List[int]]) -> Tuple[int, List[int]]:\n    if not arr:\n        return -1, None\n\n    max_len = 0\n    max_len_list = []\n\n    for list_item in arr:\n        list_len = len(list_item)\n        if list_len > max_len:\n            max_len = list_len\n            max_len_list = list_item\n\n    return max_len, max_len_list\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nimport pytest\nfrom typing import List\n\n\ndef max_length_list(list_of_lists: List[List]) -> List:\n    max_length = 0\n    max_length_list = []\n    for each_list in list_of_lists:\n        if len(each_list) > max_length:\n            max_length = len(each_list)\n            max_length_list = each_list\n    return max_length_list, max_length\n\n\ndef test_max_length_list():\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    assert max_length_list([[13, 15, 17]]) == (3, [13, 15, 17])\n    assert max_length_list([[13], [15, 17]]) == (2, [15, 17])\n    assert max_length_list([[13], [15], [17]]) == (3, [15, 17])", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom typing import List, Tuple\n\ndef max_length_list(lists: List[List[int]]) -> Tuple[int, List[int]]:\n    lengths = map(len, lists)\n    return max(zip(lengths, lists))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom collections import Counter\n\ndef max_length_list(lists):\n    return max(lists, key=lambda x: len(x))\n\n\ndef max_length_list(lists):\n    return max(lists, key=lambda x: len(list(x)))\n\n\ndef max_length_list(lists):\n    return max(lists, key=lambda x: len(x))\n\n\ndef max_length_list(lists):\n    return max(lists, key=lambda x: len(list(x)))", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(L):\n    max_length = 0\n    max_length_list = []\n    for i in range(len(L)):\n        length = len(L[i])\n        if length > max_length:\n            max_length = length\n            max_length_list = L[i]\n    return max_length, max_length_list\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lst):\n    \"\"\"\n    :param lst: a list of lists\n    :return: a tuple (max_length, the longest list)\n    \"\"\"\n    return max(lst, key=lambda x: len(x))\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nimport itertools\n\ndef max_length_list(nums):\n    \"\"\"\n    Do not return the same list twice.\n\n    >>> max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n\n    >>> max_length_list([1, 2, 3, 4])\n    (1, [4])\n\n    >>> max_length_list([])\n    (0, [])\n\n    >>> max_length_list([1, 2, 2])\n    (2, [1, 2])\n    \"\"\"\n    # max_length = 0\n    # index = None\n    # for i in range(len(nums)):\n    #     max_length_current = len(list(itertools.chain(*nums[i])))\n    #     if max_length_current > max_length:\n    #         max_length = max_length_current\n    #         index = i\n    # print(max_length, nums[index])\n    # return nums[index]\n\n    return max((len(list(itertools.chain(*nums[i]))), nums[i]) for i in range(len(nums)))", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom itertools import combinations\n\n\ndef max_length_list(ls):\n    lenghts = {}\n    for x in ls:\n        lenghts[tuple(x)] = len(x)\n\n    maximum = max(lenghts, key=lenghts.get)\n    return maximum, ls[lenghts[maximum]]\n\n\ndef max_length_list2(ls):\n    lenghts = []\n    for x in ls:\n        lenghts.append(len(x))\n\n    return ls[lenghts.index(max(lenghts))], ls[max(lenghts)]\n\n\ndef max_length_list3(ls):\n    return max((tuple(x), len(x)) for x in ls)[1], ls[max((tuple(x), len(x)) for x in ls)[0]]\n\n\ndef max_length_list4(ls):\n    return max(set((tuple(x), len(x)) for x in ls))[1], ls[max(set((tuple(x), len(x)) for x in ls))[0]]\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom typing import List\n\n\ndef max_length_list(lst: List) -> List:\n    max_len = 0\n    max_lst = []\n\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_lst = item\n\n    return max_lst, max_len", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(list_of_lists):\n    max_length = 0\n    max_length_list = None\n    for list in list_of_lists:\n        length = len(list)\n        if length > max_length:\n            max_length = length\n            max_length_list = list\n    return max_length, max_length_list\n\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\nfrom itertools import count\n\ndef check_distinct(tup):\n    \"\"\"Function to check if given tuple is distinct or not.\n    >>> check_distinct((1, 4, 5, 6, 1, 4))\n    False\n    >>> check_distinct((1, 2, 3, 4, 5))\n    True\n    >>> check_distinct((1, 2, 3, 4, 4))\n    False\n    \"\"\"\n    unique_count = len(set(tup))\n    return unique_count == len(tup)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\nfrom typing import List\n\n\ndef check_distinct(arr: List) -> bool:\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] in arr[:i]:\n                return False\n        return True", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    \"\"\"\n    Return a boolean.\n    \"\"\"\n    # ... your code here ...\n    lis = list(tup)\n    lis = set(lis)\n    return len(tup) == len(lis)\n\ndef main():\n    \"\"\"\n    Run some tests.\n    \"\"\"\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n    print('OK!')\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    if tup == tup[::-1]:\n        return True\n    return False\n\n\n# +", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    tup = sorted(tup)\n    for i in range(len(tup)):\n        if tup[i] == tup[i + 1]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple_):\n    if len(set(tuple_)) == len(tuple_):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(iterable):\n    \"\"\"\n    Return True if iterable contains unique items.\n    \"\"\"\n    seen = set()\n    for item in iterable:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(numbers):\n    return len(numbers) == len(set(numbers))\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\nfrom itertools import combinations\n\n\ndef check_distinct(tuple):\n    return len(tuple) == len(set(tuple)) == len(set(tuple)) == len(tuple) - len(set(tuple))\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(t):\n    return len(set(t)) == len(t)\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\nimport pytest\n\n\ndef first_non_repeating_character(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    char_set = {}\n    for ch in s:\n        if ch in char_set:\n            char_set.pop(ch)\n        else:\n            char_set[ch] = 1\n    for ch in char_set:\n        return ch\n\n\ndef test_first_non_repeating_character():\n    assert first_non_repeating_character(\"abcabc\") == None\n    assert first_non_repeating_character(\"abc\") == \"a\"\n    assert first_non_repeating_character(\"abcad\") == \"a\"", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    if len(string) == 0:\n        return None\n    first_char = string[0]\n    for char in string:\n        if char == first_char:\n            return None\n        if char == first_char:\n            first_char = char\n    return first_char\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(str):\n    \"\"\"\n    args: string str\n    return: first non-repeated character in string\n    \"\"\"\n    if not str:\n        return\n    char_dict = {}\n    for char in str:\n        char_dict[char] = 1\n    for char in str:\n        if char_dict[char] == 1:\n            return char\n    return None", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    \"\"\"\n    :param string: string\n    :return: first non-repeating character\n    \"\"\"\n    char_map = {}\n    for char in string:\n        if char not in char_map:\n            char_map[char] = 1\n        else:\n            char_map[char] += 1\n    for char, count in char_map.items():\n        if count == 1:\n            return char\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n  for character in string:\n    if string.count(character) == 1:\n      return character\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(str):\n    \"\"\"\n    :param str: string containing repeated characters\n    :return: first non-repeating character in string, None if there is none\n    \"\"\"\n    for c in str:\n        if str.count(c) == 1:\n            return c\n    return None\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(s):\n    \"\"\"\n    Returns the first non-repeating character from a string.\n    :param s: string from which the first non-repeating character will be returned.\n    :return: the first non-repeating character in the string.\n    \"\"\"\n    seen = set()\n    for c in s:\n        if c in seen:\n            return None\n        seen.add(c)\n    return c\n\n\ndef first_non_repeating_character_rec(s):\n    \"\"\"\n    Returns the first non-repeating character from a string using recursion.\n    :param s: string from which the first non-repeating character will be returned.\n    :return: the first non-repeating character in the string.\n    \"\"\"\n    if len(s) == 0:\n        return None\n    if len(s) == 1:\n        return s[0]\n    for c in s:\n        if s.index(c) == s.index(c) and c not in s[:s.index(c)]:\n            return c\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    set_string = set(string)\n    for char in string:\n        if char not in set_string:\n            return char\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    if not string:\n        return None\n    first = string[0]\n    for char in string:\n        if char == first:\n            continue\n        if char != first:\n            return char\n\n\ndef first_non_repeating_character_2(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if not string:\n        return None\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char, count in char_dict.items():\n        if count == 1:\n            return char\n\n\ndef first_non_repeating_character_3(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if not string:\n        return None\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char, count in char_dict.items():\n        if count == 1:\n            return char\n\n\ndef first_non_repeating_character_4(string):\n    if not string:\n        return None\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char, count in char_dict.items():\n        if count == 1:\n            return char\n\n\ndef first_non_repeating_character_5(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    if not string:\n        return None\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char, count in char_dict.items():\n        if count == 1:\n            return char\n\n\ndef first_non_repeating_character_6(string):\n    \"\"\"\n    :type string:", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    if string == None:\n        return None\n    for char in string:\n        if string.count(char) == 1:\n            return char\n\n"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nfrom re import search\n\ndef check_char(string):\n    result = search(r\"^..$\", string)\n    if result is None:\n        return \"Invalid\"\n    return \"Valid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\ndef check_char(str):\n    res = re.match(r\"^[a-zA-Z]*\\1$\", str)\n    if res:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(s):\n    return \"Valid\" if re.match(r'(?=.*\\1)(?=.*\\2)(\\w){2,}', s) else \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\ndef check_char(str):\n    if re.match(r\"^[a-zA-Z]*$|\\Z\", str) and str == re.search(r\"[a-zA-Z]*$\", str).group(0)[::-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# print(check_char(\"abba\"))\n# print(check_char(\"ba\"))\n# print(check_char(\"\"))\n# print(check_char(\"asdasdasd\"))", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\ndef check_char(str):\n    if re.match(r\"^\\w+$\", str) == None or re.match(r\"^\\w+$\", str[::-1]) == None:\n        return \"Invalid\"\n    if str[0] == str[-1]:\n        return \"Valid\"\n    return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\ndef check_char(word):\n    regex = \"^[a-zA-Z]{2,}$\"\n    result = re.match(regex, word)\n    if result == None:\n        return \"Invalid\"\n    elif result.group() == word:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(str):\n    if (str[0] == str[-1]):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(word):\n    pattern = r\"^(?=.{2}$).*?(?=^.{2}$)\"\n    match = re.match(pattern, word)\n    if match:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n# +\nimport re\n\ndef check_char(text):\n    pattern = \"^([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}$\"\n    if re.search(pattern, text):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n\n# -\n\ncheck_char(\"abba\")\n\n# +\nimport re\n\ndef check_char(text):\n    pattern = \"^([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}$\"\n    if re.match(pattern, text):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n\n# -\n\ncheck_char(\"abba\")\n\n# +\nimport re\n\ndef check_char(text):\n    pattern = \"^([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}$\"\n    if re.match(pattern, text):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n\n# -\n\ncheck_char(\"abba\")\n\n# +\nimport re\n\ndef check_char(text):\n    pattern = \"^([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}$\"\n    if re.match(pattern, text):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n\n# -\n\ncheck_char(\"abba\")\n\n# +\nimport re\n\ndef check_char(text):\n    pattern = \"^([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}([a-zA-Z]){1}$\"\n    if re.match(pattern, text):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n\n# -\n\ncheck_char(\"abba\")\n\n# +\nimport re\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n# +\n# #!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the checkChar function below.\ndef check_char(s):\n    check = re.findall(r\"^[a-z]*([a-z])*[a-z]*$\", s)\n    if len(check) == 0:\n        return \"Invalid\"\n    else:\n        return \"Valid\"\n    "], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(n1, n2, n3):\n    \"\"\"Find the median of three numbers\"\"\"\n    return float(n1+n2+n3)/3\n\nmedian_numbers(5, 10, 15)\n\n\n# +\n#Write a function that converts degrees Fahrenheit to degrees Celsius\n\ndef convert_temperature(temp):\n    \"\"\"\n    Function that converts degrees Fahrenheit to degrees Celsius\n    \"\"\"\n    return ((temp - 32) * (5/9))\n\n\n# +", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    \"\"\"\n    a: number\n    b: number\n    c: number\n    return: number\n    \"\"\"\n    if a > b > c or b > a > c or c > a > b:\n        return b\n    elif a > c > b or c > a > b or b > a > c:\n        return c\n    else:\n        return a\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    \"\"\"\n    Returns the median of three specific numbers.\n    \"\"\"\n    return (a+b+c)/3\n\n# Test", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1,num2,num3):\n    total = num1 + num2 + num3\n    if num1<num2 and num2<num3:\n        return num2\n    if num3<num1 and num1<num2:\n        return num1\n    if num2<num3 and num3<num1:\n        return num3\n    return total/3\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1,num2,num3):\n    \"\"\"\n    precondition: num1, num2, and num3 are all int or float.\n    postcondition: return the median number of the three input numbers.\n    \"\"\"\n    if num1<num2 and num1<num3:\n        if num2<num3:\n            return num3\n        else:\n            return num2\n    elif num2<num1 and num2<num3:\n        if num1<num3:\n            return num3\n        else:\n            return num1\n    elif num3<num1 and num3<num2:\n        if num1<num2:\n            return num2\n        else:\n            return num1", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(number1, number2, number3):\n    numbers = [number1, number2, number3]\n    numbers.sort()\n    return numbers[1]\n\n#Assistive Code", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\nfrom random import randint\n\n\ndef median_numbers(a, b, c):\n    numbers = sorted([a, b, c])\n    if len(numbers) == 1:\n        return numbers[0]\n\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid] + numbers[mid - 1]) / 2\n    else:\n        return numbers[mid]\n\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x, y, z):\n    return (x + y + z) / 3.0\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\nimport math\n\ndef median_numbers(a,b,c):\n    l=min(a,b,c)\n    h=max(a,b,c)\n    m=(a+b+c-h-l)/2\n    if m==a:\n        return b\n    elif m==b:\n        return a\n    elif m==c:\n        return b\n    else:\n        return h\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    return (a+b+c)/3\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    return [sum(list(map(int, str(n)))) for n in nums]\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    result = 0\n    for n in numbers:\n        result += sum(map(int, str(n)))\n    return result\n\ndef sum_of_digits(numbers):\n    return sum(sum(map(int, str(n))) for n in numbers)\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    result = []\n    for number in numbers:\n        sum = 0\n        while number != 0:\n            digit = number % 10\n            sum += digit\n            number //= 10\n        result.append(sum)\n    return result\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\nimport unittest\n\n\ndef sum_of_digits(numbers):\n    \"\"\"\n    :param numbers: a list of integers\n    :return: a list of integers\n    \"\"\"\n    result = []\n    for n in numbers:\n        digit_sum = 0\n        while n > 0:\n            digit_sum += n % 10\n            n //= 10\n        result.append(digit_sum)\n    return result\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numlist):\n    sum_of_digits = 0\n    for i in numlist:\n        sum_of_digits += sum(str(i))\n    return sum_of_digits\n\n# sum_of_digits([10,2,56]) == 14", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(num_list):\n    \"\"\"\n    num_list is a list of integers\n    returns the sum of digits of each number in the list\n    \"\"\"\n    total = 0\n    for i in num_list:\n        total += sum(map(int, str(i)))\n    return total", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    result = []\n    for number in numbers:\n        number = str(number)\n        sum = 0\n        for digit in number:\n            sum += int(digit)\n        result.append(sum)\n    return result\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    result = 0\n    for number in numbers:\n        result += sum([int(x) for x in str(number)])\n    return result\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    sum=0\n    for num in numbers:\n        sum+=sum_digits(num)\n    return sum\n\n\ndef sum_digits(num):\n    return sum(map(int,str(num)))\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(num):\n    \"\"\"\n    >>> sum_of_digits([10,2,56])\n    14\n    \"\"\"\n    sum = 0\n    for i in range(len(num)):\n        sum += int(num[i])\n    return sum\n\ndef sum_of_digits_2(num):\n    \"\"\"\n    >>> sum_of_digits_2([10,2,56])\n    14\n    \"\"\"\n    return sum(map(int, str(num)))"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple_one, tuple_two):\n    return tuple(int(a) ^ int(b) for a,b in zip(tuple_one, tuple_two))\n\n#Test", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tup1, tup2):\n    return tuple(map(lambda x, y: (x^y), tup1, tup2))\n\ndef bitwise_xor_improved(tup1, tup2):\n    xor = list()\n    for i in range(len(tup1)):\n        xor.append(tup1[i]^tup2[i])\n    return tuple(xor)\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\nfrom operator import xor\nfrom functools import reduce\n\ndef bitwise_xor(t1, t2):\n    return tuple(map(xor, t1, t2))\n\n\ndef bitwise_xor_2(t1, t2):\n    return tuple(reduce(xor, zip(t1, t2)))\n\n\ndef bitwise_xor_3(t1, t2):\n    return tuple(x ^ y for x, y in zip(t1, t2))\n\n\ndef bitwise_xor_4(t1, t2):\n    return tuple(x ^ y for x, y in zip(t1, t2))\n\n\ndef bitwise_xor_5(t1, t2):\n    return tuple(map(xor, t1, t2))\n\n\ndef bitwise_xor_6(t1, t2):\n    return tuple(map(xor, zip(t1, t2)))", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(t1, t2):\n    t1 = tuple(map(lambda x: x ^ t2[i], range(len(t1))))\n    return t1", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tuple1, tuple2):\n    return tuple(map(lambda x, y: x ^ y, tuple1, tuple2))\n\n# OR\ndef bitwise_xor(tuple1, tuple2):\n    return tuple(map(lambda x, y: x | y, tuple1, tuple2))", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tup1, tup2):\n    return tuple([x^y for x,y in zip(tup1,tup2)])\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tup1, tup2):\n    print(tup1,tup2)\n    return tuple(map(lambda x, y: x ^ y, tup1, tup2))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n#given list of tuples\n\n\ndef bitwise_xor(tuple1, tuple2):\n    return tuple(list(map(lambda x, y: (x ^ y), tuple1, tuple2)))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tuple1, tuple2):\n    result = ()\n    for i in range(len(tuple1)):\n        if (tuple1[i] ^ tuple2[i]) == 1:\n            result = result + (tuple1[i],)\n        else:\n            result = result + (tuple2[i],)\n    return result\n\n#print(bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)))\n"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(L):\n    if len(L) == 0:\n        return 0\n    else:\n        freq_map = dict()\n        for x in L:\n            if x in freq_map:\n                freq_map[x] = freq_map[x]+1\n            else:\n                freq_map[x] = 1\n        return len(freq_map)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(freq_tuples):\n    freq = set()\n    for f in freq_tuples:\n        freq.add(tuple(sorted(f)))\n    return len(freq)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(alist):\n    frequency = {}\n    for i in alist:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return len(frequency)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\nfrom collections import defaultdict\n\ndef extract_freq(order_irrespective_list):\n    return len(set(map(tuple, order_irrespective_list)))\n\n# test", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(a):\n    b = []\n    for item in a:\n        if item not in b:\n            b.append(item)\n    return len(b)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(list_of_tuples):\n    result = []\n    for tuple_ in list_of_tuples:\n        for item in list_of_tuples:\n            if tuple_ == item:\n                result.append(tuple_)\n    return len(result)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(arr):\n    freq = {}\n    for a in arr:\n        if a in freq:\n            freq[a] += 1\n        else:\n            freq[a] = 1\n    return len(freq)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\nfrom collections import defaultdict\ndef extract_freq(input_list):\n    # Write your code here\n    freq=defaultdict(int)\n    for num in input_list:\n        freq[tuple(sorted(num))]+=1\n    return freq[tuple(sorted(num))]", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(l):\n    return len({tuple(a) for a in l})\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\nfrom functools import reduce\n\n\ndef add_nested_tuples(tup1, tup2):\n    res = [[tup1[i][j] + tup2[i][j] for j in range(len(tup1[i]))] for i in range(len(tup1))]\n    return res\n\n\n# second solution\ndef add_nested_tuples_2(tup1, tup2):\n    return reduce(lambda x, y: [\n        [x[0][i] + y[0][i], x[1][i] + y[1][i]] for i in range(len(x[0]))\n    ], zip(tup1, tup2))\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    pass\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tuple1, tuple2):\n    res = []\n    for i in range(len(tuple1)):\n        inner_list = []\n        for j in range(len(tuple1[i])):\n            inner_list.append(tuple1[i][j] + tuple2[i][j])\n        res.append(inner_list)\n    return tuple(res)\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tuple1, tuple2):\n    tuples_list = []\n    for i in range(len(tuple1)):\n        tuple_list = []\n        for j in range(len(tuple1[i])):\n            tuple_list.append(tuple1[i][j] + tuple2[i][j])\n        tuples_list.append(tuple_list)\n    return tuples_list\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    # your code here\n    res = []\n    for i in range(len(t1)):\n        res.append((t1[i][0]+t2[i][0],t1[i][1]+t2[i][1]))\n    return res\n\ndef test_add_nested_tuples():\n    \"\"\"\n    Run doctests\n    \"\"\"\n    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tup1, tup2):\n    result = []\n    for i in range(0,len(tup1)):\n        res = []\n        for j in range(0,len(tup1[i])):\n            res.append(tup1[i][j]+tup2[i][j])\n        result.append(res)\n    return result\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tuple_1, tuple_2):\n    return tuple(zip(tuple_1[i] + tuple_2[i] for i in range(len(tuple_1))))\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef add_nested_tuples(a: Tuple[Tuple], b: Tuple[Tuple]) -> Tuple[Tuple]:\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return ()\n    elif len(a) == 1 or len(b) == 1:\n        return tuple(x + y for x, y in zip(a[0], b[0]))\n    else:\n        return tuple(\n            x + y\n            for x, y in zip(add_nested_tuples(a[0], b[0]), add_nested_tuples(a[1:], b[1:]))\n        )\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tuple1, tuple2):\n    result = ()\n    for i in range(len(tuple1)):\n        element = tuple1[i][0] + tuple2[i][0]\n        result += ((element, 0),)\n    return result\n\n# Test 1", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    return tuple([(x[0]+y[0], x[1]+y[1]) for (x, y) in zip(t1, t2)])\n\n\n# test"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nimport sys\ndef ncr_modp(n,r,p):\n    \"\"\"Returns ncr%p, i.e. the number of ways of picking r objects from n when n>r>0 and r<p.\"\"\"\n    if n<r:\n        return 0\n    elif n==r:\n        return 1\n    else:\n        r*=ncr_modp(n-1,r,p)\n        if r>=p:\n            r%=p\n        return r\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    \"\"\"\n    Args:\n        n: integer\n        r: integer\n        p: integer\n    Return:\n        the value of ncr%p.\n    \"\"\"\n    if n<r:\n        return 0\n    if r==0:\n        return 1\n    n_modp = pow(n,p-2,p)\n    res = pow(r,p-2,p)\n    for i in range(2,n//r+1):\n        res = (res*i)%p\n    res = res*n_modp%p\n    return res\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    return ncr_np(n,r,p)%p\n\ndef test_ncr_modp():\n    assert ncr_modp(10,2,13)==6\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    return ncr_modp_aux(n,r,p,1,1)\n\ndef ncr_modp_aux(n,r,p,a,b):\n    if r==0:\n        return 1\n    if a*r>ncr_modp_aux(n,r-1,p,a,b):\n        a=a+1\n    if b*n//r>a:\n        b=b+1\n    if b>a:\n        a=a-1\n    return (a*p)%p*ncr_modp_aux(n,r-1,p,a,b)%p-((a-1)*p)%p*ncr_modp_aux(n,r-1,p,a-1,b)%p\n\ndef ncr_modp_euler(n, r, p):\n    return ncr_modp(n, r, p)\n\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    num = ncr(n,r)\n    denom = 1\n    for i in range(1,n+1):\n        denom = (denom*i)%p\n    num = num*pow(r,n-1,p)*pow(n-r,p-2,p)%p\n    return num%p\n\n\n# +\ndef main():\n    # These tests are based on the example above.\n    assert ncr_modp(10,2,13)==6\n    assert ncr_modp(30,3,7)==42\n    assert ncr_modp(50,11,7)==3266500000\n    assert ncr_modp(50,47,7)==2474747\n    assert ncr_modp(2,1000000000,1000000007)==0\n    assert ncr_modp(999999999,999999999,1000000007)==0\n    assert ncr_modp(500000000,250000000,1000000007)==0\n    assert ncr_modp(1000000000,1000000000,1000000007)==1\n    assert ncr_modp(1000000000,250000000,1000000007)==250000000\n    assert ncr_modp(500000000,1000000000,1000000007)==50000000000000006\n    assert ncr_modp(1000000000,500000000,100", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    from math import factorial\n    from sympy import Integer\n    return Integer(factorial(n)//factorial(n-r)//factorial(r))%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n, r, p):\n    if (n < 0) or (r < 0) or (n < r) or (n % p != r % p):\n        return 0\n    res = 1\n    r = min(r, p-r)\n    for i in range(r):\n        res = (res * (n-i)) % p\n    res = (res * pow(r, p-2, p)) % p\n    return res\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    ncr_modp(n, r, p)\n\n    Computes the value of ncr%p, where ncr is the binomial coefficient\n    n!/(r!(n-r)!), n, r, and p are integers, and p is prime.\n    \"\"\"\n    assert p > 0\n    assert r >= 0\n    assert n > r\n\n    if r > n - r:\n        return 0\n    if n < r:\n        return 0\n\n    if r == 0:\n        return 1\n    if r == 1:\n        return n%p\n    if n == r:\n        return 1\n\n    # Note: The following \"trick\" can be used for any modulus, but is\n    # specifically useful here:\n    #   (ncr % p) == ((n - r + 1) * ncr % p)\n    #\n    # This is because if n - r + 1 is 0, then (n - r + 1) * ncr is 0, so\n    # ncr % p is 0.  Otherwise, n - r + 1 is some nonzero integer, and so\n    # (n - r + 1) * ncr is ncr, so ncr % p is ncr % p.\n    #\n    # More generally, if n - r + 1 is k, then (n - r + 1) * ncr = ncr * k,\n    # and so ncr % p is (ncr * k) % p, which is ncr % p * k.\n\n    return (n - r + 1) * ncr_modp(n - 1, r - 1, p) % p\n\ndef main():\n    assert ncr_modp(10,2,13)==6\n    assert ncr_modp(10,2,5)==0\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    if n==0:\n        return 0\n    elif n==r:\n        return 1\n    else:\n        return ncr_modp(n-1,r,p)*pow(n,p-1,p)%p*(r,p)%p-ncr_modp(n-1,r-1,p)*pow(n,p-1,p)%p*(r-1,p)%p%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n\t'''\n\tncr mod p\n\t'''\n\tnumerator = factorial(n)*(pow(r,p) - pow(r,p-n))\n\tdenominator = factorial(n-r)*factorial(r)\n\treturn numerator % p\n\n# In[23]:\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    return re.search(r'^https?://[\\w.\\/-]+$', s) is not None\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\n# My Solution\ndef is_valid_URL(s):\n    urlPattern = r'(?i)\\b((?:https?:(?:/{1,3}|[a-z0-9%])|[a-z0-9.\\-]+[a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))'\n\n    if re.search(urlPattern, s):\n        return True\n    return False\n\n# Another Solution\n# def is_valid_URL(url):\n#     url = url.replace(\" \", \"\")\n#     url = url.replace(\"\\n\", \"\")\n#     url_regex = re.compile(\n#         r'^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$')\n#     return re.search(url_regex, url) is not None\n\n# Yet another Solution\ndef is_valid_URL(url):\n    if not url:\n        return False\n\n    regex = r'^(https|http)://([\\w\\d\\-]+(\\.[\\w\\d\\-]+)+)(/[\\w\\d\\-]+)*(\\?[\\w\\d\\-=&]+)?$'\n    return re.search(regex, url) is not None", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(URL):\n    regex = re.compile(r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\")\n    return regex.search(URL) != None\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    regex = r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\"\n    return bool(re.match(regex, url))\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\ndef is_valid_URL(url):\n    if not isinstance(url, str):\n        return False\n    # Regex for valid URL\n    pattern = r'^((?:http|ftp)s?://)'+ \\\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' + \\\n        r'localhost|' + \\\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' + \\\n        r'(?::\\d+)?' + \\\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE\n    if not re.match(pattern, url):\n        return False\n    return True", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(https)?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$'\n    )\n    if regex.match(url):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n\n    # Define the regex for URL\n    url_regex = re.compile(\n        # Protocol\n        r'^(?:http|ftp)s?://'\n        # User:pass\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        # Port\n        r'(?::\\d+)?'\n        # Resource path\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return bool(url_regex.match(url))\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\n\ndef is_valid_url(url):\n    pattern = re.compile(\n        r\"^((?:http|ftp)s?://\"  # http:// or https://\n        r\"(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|\"  # domain...\n        r\"localhost|)\"  # localhost...\n        r\"(?::\\d+)?\"  # optional port\n        r\"(?:/?|[/?]\\S+)$\", re.IGNORECASE)\n    return pattern.match(url)", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    if url is None:\n        return False\n    if not (url.startswith(\"http://\") or url.startswith(\"https://\")):\n        return False\n    url_parts = url.split(\"/\")\n    if len(url_parts) < 3:\n        return False\n    protocol = url_parts[0]\n    for i in range(2, len(url_parts)):\n        if not url_parts[i].startswith(\"@\"):\n            return False\n    return True", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    match = re.match(r'^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$', url)\n    if match:\n        return True\n    return False\n\n# test code"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    if a<b:\n        return a\n    return b\n\n# input", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x,y):\n    if x < y:\n        return x\n    return y\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(num1,num2):\n    if num1<num2:\n        return num1\n    return num2\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n    if a<b:\n        return a\n    return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    return (a if a<b else b)\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x,y):\n    if x>y:\n        return y\n    else:\n        return x\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a,b):\n    if a<b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\nimport sys\n\ndef minimum(x,y):\n    \"\"\"\n    :param x: int\n    :param y: int\n    :return: int\n    \"\"\"\n    if x<y:\n        return x\n    return y\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, item):\n    return item in tup\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, target):\n    if tup.count(target) != 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, ele):\n    if ele in tup:\n        return True\n    else:\n        return False\n\n# assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n# assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'u')==False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, item):\n    if tup.count(item):\n        return True\n    else:\n        return False\n\n#Below is an example usage:\n\nimport random\n\ndef check_tuplex(tup, item):\n    if tup.count(item):\n        return True\n    else:\n        return False\n\n# Enter the tuple\ntup = (\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")\n\n# Enter the item\nitem = \"r\"\n\n# Calling the function", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, ele):\n    if ele in tup:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,x):\n    for y in tup:\n        if y==x:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, x):\n    return x in tup\n\n#Some test cases", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,elem):\n    # your code here\n    return elem in tup\n\n\n# + [markdown] id=\"qfU8C0eJL4lH\"\n# ### Exercise 12.6\n#\n# Write a function to check whether an element exists within a tuple.", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup,e):\n    i=tup.index(e)\n    return i\n\n#print check_tuplex((1,2,3,4,5,6,7),7)\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,ele):\n    return ele in tup\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(number):\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    if n%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\nfind_Parity(11)\n\n\n# +\ndef sum_of_three_numbers(a, b, c):\n    return a+b+c\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(number):\n    if number % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    return \"Odd Parity\"\n\ndef test_find_Parity():\n    assert find_Parity(12) == \"Even Parity\"\n    assert find_Parity(11) == \"Odd Parity\"\n\n# test_find_Parity()"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    #iterate the list and find the position of the last non-zero element \n    for i in range(len(str(num))-1,0,-1):\n        if str(num)[i] != '0':\n            break\n    \n    #iterate and find the right most non-zero element\n    for j in range(i,0,-1):\n        if str(num)[j] != '0':\n            break\n    \n    #swap the two elements\n    num = list(str(num))\n    num[i-1], num[j-1] = num[j-1], num[i-1]\n    num = int(''.join(num))\n    \n    return num\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\n# Input: 12\n# Output: 21\n\n# Approach:\n# Step 1: Get the number in a list\n# Step 2: Sort the list in descending order\n# Step 3: Start comparing the number with previous number\n# Step 4: If the number is greater than the previous number, return the number\n# Step 5: If the number is less than the previous number, check if the next element is greater than the current number, then swap the elements and return the number\n# Step 6: Repeat Step 4-5 until the next element is less than the current element\n\ndef rearrange_bigger(num):\n    num = list(str(num))\n    num.sort(reverse=True)\n    while num[0] < num[1]:\n        num.append(num[0])\n        num.append(num[1])\n        num.pop(0)\n        num.pop(0)\n    if num[0] > num[1]:\n        return int(''.join(num))\n    return int(''.join(num))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(number):\n    num = list(str(number))\n    num.sort()\n    num = \"\".join(num)\n    num = int(num)\n    return num\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(number):\n    print(f\"rearranging {number}\")\n    if(number == 0):\n        return 0\n    elif(number == 1):\n        return 1\n    elif(number == 2):\n        return 3\n    elif(number == 3):\n        return 6\n    else:\n        num_str = str(number)\n        result = int(num_str[-1])\n        for i in range(len(num_str)-1):\n            result = result * 10 + int(num_str[i])\n        return result\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    result = list(str(num))\n    flag = False\n    for i in range(len(result)):\n        if i < (len(result)-1) and int(result[i]) > int(result[i+1]):\n            result[i], result[i+1] = result[i+1], result[i]\n            flag = True\n    return int(''.join(result)) if flag else num\n\n#assert rearrange_bigger(23)==32\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(number):\n    max_idx = len(str(number)) - 1\n    for idx in range(max_idx):\n        if number % 10 > number % (10 + idx):\n            temp = number % 10\n            number = (number - temp) * 10 + temp + number // 10\n            return number\n    return number", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(number):\n    new_number = sorted(str(number),reverse=True)\n    if len(new_number) == 1:\n        return 0\n    else:\n        return int(\"\".join(new_number))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    #your code goes here\n    num = str(num)\n    #print(num)\n    if len(num) == 1:\n        return 0\n    num_list = [int(num[0]), int(num[1])]\n    for i in range(2, len(num)):\n        if num_list[i - 1] < num_list[i]:\n            num_list.append(num_list[i - 1])\n            num_list.insert(i, num_list[i])\n        elif num_list[i - 1] == num_list[i]:\n            num_list.append(num_list[i])\n    return int(''.join(str(x) for x in num_list))\n\n#------------------------------------------#", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(number):\n    number_string = str(number)\n    num_len = len(number_string)\n    i = num_len - 2\n    while i >= 0:\n        if number_string[i] < number_string[i+1]:\n            return number_string[:i+1] + str(int(number_string[i+1])+1) + number_string[i+2:]\n        i -= 1\n    return int(number) + 1", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n\n    rearranged_num = []\n    original_num = str(num)\n    reversed_num = original_num[::-1]\n    for i in reversed_num:\n        rearranged_num.append(int(i))\n    rearranged_num_str = ''.join([str(n) for n in rearranged_num])\n\n    num_list = list(original_num)\n    for i,j in zip(rearranged_num,num_list):\n        if i > j:\n            num_list.remove(j)\n            num_list.insert(0,i)\n\n    rearranged_num_list = [int(n) for n in num_list]\n    rearranged_num_str = ''.join([str(n) for n in rearranged_num_list])\n    rearranged_num = int(rearranged_num_str)\n    return rearranged_num\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    # write your code here\n    arr1.sort()\n    arr2.sort()\n    res = []\n    for i in range(len(arr1)):\n        for j in range(i+1,len(arr2)):\n            if arr1[i] + arr2[j] < min(arr1[i+k:]+arr2[j+k:]):\n                res.append([arr1[i],arr2[j]])\n    return res\n\n#time = 0.104s\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    \"\"\"\n    :param arr1: array 1\n    :param arr2: array 2\n    :param k: integer\n    :return: list of pairs\n    \"\"\"\n    ans = []\n    arr1.sort()\n    arr2.sort()\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j] and (i, j) not in ans:\n                ans.append((arr1[i], arr2[j]))\n                if len(ans) == k:\n                    return ans\n\n    return ans\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(A, B, k):\n    # Your code here\n    arr1 = sorted(A)\n    arr2 = sorted(B)\n    n1 = len(A)\n    n2 = len(B)\n\n    # initialize two pointers i and j to start from the first element\n    i,j = 0,0\n\n    # initialize the min heap\n    min_heap = []\n\n    # initialize the results\n    result = []\n\n    while i<n1 and j<n2:\n        if arr1[i] <= arr2[j]:\n            heapq.heappush(min_heap, [arr1[i],arr2[j]])\n            i += 1\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n        else:\n            heapq.heappush(min_heap, [arr2[j],arr1[i]])\n            j += 1\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    while i<n1:\n        heapq.heappush(min_heap, [arr1[i], arr2[j]])\n        i += 1\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    while j<n2:\n        heapq.heappush(min_heap, [arr2[j], arr1[i]])\n        j += 1\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    # write your code here\n    arr1.sort()\n    arr2.sort()\n    result = []\n    for i in range(k):\n        result.append([arr1[i], arr2[i]])\n    return result\n\nk_smallest_pairs([1,3,7],[2,4,6],2)", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    ans = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if j == i:\n                continue\n            ans.append([arr1[i], arr2[j]])\n            if len(ans) == k:\n                return ans\n\n\n# +", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a, b, k):\n    res = []\n    for i in range(0, k):\n        res.append([a[i], b[i]])\n    return res\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a1,a2,k):\n    arr1 = sorted(a1)\n    arr2 = sorted(a2)\n    res = []\n\n    for i in range(k):\n        res.append([arr1[i],arr2[i]])\n\n    return res\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(a1, a2, k):\n    a1.sort()\n    a2.sort()\n    res = []\n    for i in range(len(a1)):\n        for j in range(len(a2)):\n            res.append([a1[i], a2[j]])\n            k -= 1\n            if k==0:\n                break\n    return res\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    # Use the heapq module to sort the lists and use heapify to turn them into a heap data structure.\n    heap1 = [-x for x in arr1]\n    heap2 = [-x for x in arr2]\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    # The result is a list of pairs. Each pair is a list of two elements.\n    result = []\n    for _ in range(k):\n        result.append([heapq.heappop(heap1), heapq.heappop(heap2)])\n    return result\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(A, B, k):\n    # write your code here\n    if len(A) == 0 or len(B) == 0 or k == 0:\n        return []\n    res = []\n    A.sort()\n    B.sort()\n    len_A = len(A)\n    len_B = len(B)\n    while len(res) < k:\n        if A[0] < B[0]:\n            res.append([A[0], B[0]])\n            A.pop(0)\n            B.pop(0)\n        elif A[0] > B[0]:\n            B.pop(0)\n        else:\n            A.pop(0)\n    return res\n\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuples):\n    min_p = 1000000\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            min_p = min(min_p, min(tuples[i][1],tuples[j][1]))\n    return min_p\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(lst):\n    print lst\n    min_prod = lst[0][0]*lst[0][1]\n    for e in lst:\n        print e[0]*e[1]\n        if min_prod > e[0]*e[1]:\n            min_prod = e[0]*e[1]\n    return min_prod\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef min_product_tuple(tuples):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    product_dict = defaultdict(list)\n    for num1, num2 in tuples:\n        product_dict[num1].append(num2)\n        product_dict[num2].append(num1)\n    minimum_product = None\n    for num in product_dict.keys():\n        for num2 in product_dict[num]:\n            if minimum_product is None:\n                minimum_product = num * num2\n            elif num * num2 < minimum_product:\n                minimum_product = num * num2\n    return minimum_product\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuple_list):\n    a_min = float('inf')\n    for (a, b) in tuple_list:\n        if b > a:\n            a_min = min(a_min, b)\n        else:\n            a_min = min(a_min, a)\n    return a_min\n\n\n# -\n\nmin_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n\nmin_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(L):\n    min_prod = 1e10\n    for i in range(len(L)):\n        for j in range(i+1, len(L)):\n            prod = L[i][0]*L[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuple_list):\n    \"\"\"\n    :param tuple_list: a list of tuples\n    :return: a float\n    \"\"\"\n    pass\n\n# test", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nfrom unittest import TestCase\n\n\ndef min_product_tuple(tuples):\n    min_product = 100000\n    for i, tuple1 in enumerate(tuples):\n        for tuple2 in tuples[i+1:]:\n            product = tuple1[0]*tuple2[0]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    tuples = sorted(tuples, key=lambda x:x[0])\n    min_prod = float(\"inf\")\n    for i in range(len(tuples)-1):\n        if tuples[i+1][1] == tuples[i][0]:\n            min_prod = min(min_prod, tuples[i][1]*tuples[i+1][1])\n    return min_prod\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tup):\n    min_prod = float('inf')\n    for x,y in tup:\n        if x*y < min_prod:\n            min_prod = x*y\n    return min_prod\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(lst):\n    return min([a * b for (a, b) in lst])\n\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\nimport pytest\n\n\ndef min_val(x):\n    \"\"\"\n    :param x: A heterogeneous list\n    :return: The minimum value in the list\n    \"\"\"\n    if isinstance(x, int):\n        return x\n    elif isinstance(x, str):\n        return x\n    else:\n        return min(x)\n\n\ndef test_min_val_1():\n    assert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\n\n\ndef test_min_val_2():\n    assert min_val([1, 2, 3]) == 1\n\n\ndef test_min_val_3():\n    assert min_val([1, 2]) == 1\n\n\ndef test_min_val_4():\n    assert min_val([5, 6, 7, 8, 9]) == 5\n\n\ndef test_min_val_5():\n    assert min_val([1, 2, 3]) == 1", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(arr):\n    if len(arr)==0:\n        return None\n    min_value=min(arr)\n    for i in range(len(arr)):\n        if min_value>arr[i]:\n            min_value=arr[i]\n    return min_value\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    try:\n        return lst[0]\n    except TypeError:\n        return lst\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(l):\n    if not isinstance(l, list):\n        raise TypeError('Input must be a list')\n    if len(l) == 1:\n        return l[0]\n    else:\n        minimum_val = None\n        for i in l:\n            if not isinstance(i, list):\n                continue\n            if minimum_val == None or minimum_val > i[0]:\n                minimum_val = i[0]\n        return minimum_val\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(data):\n    for item in data:\n        if type(item) is str:\n            item = int(item)\n        if type(item) is int:\n            if item < min_val:\n                min_val = item\n    return min_val\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\nfrom collections import deque\ndef min_val(list):\n    temp_list = deque(list)\n    temp_list.rotate(-1)\n    temp_list.append(None)\n    min_val = temp_list[0]\n    while len(temp_list) > 1:\n        temp_list.rotate(-1)\n        if min_val > temp_list[0]:\n            min_val = temp_list[0]\n    return min_val\n\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list):\n    if not list:\n        return None\n    if type(list) is not list:\n        return None\n    if type(list[0]) is str:\n        str_list = []\n        int_list = []\n        for i in range(len(list)):\n            try:\n                int(list[i])\n                int_list.append(list[i])\n            except ValueError:\n                str_list.append(list[i])\n        if str_list:\n            return min(str_list)\n        else:\n            return min(int_list)\n    return None\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    lst = list(lst)\n    lst.sort()\n    if isinstance(lst[0], str):\n        return lst[0]\n    else:\n        return lst[0] + min_val(lst[1:])\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n#1. \u904d\u5386\u5217\u8868\uff0c\u6bd4\u8f83\u6570\u5b57\u4e0e\u5b57\u6bcd\uff0c\u5b57\u6bcd\u5c0f\u4e8e\u6570\u5b57\ndef min_val(arr):\n    for i in arr:\n        if isinstance(i, str):\n            return i\n        else:\n            pass\n\n#2. \u76f4\u63a5\u6bd4\u8f83\u6570\u5b57\uff0c\u5c06\u6570\u5b57\u4e0e\u5b57\u6bcd\u8f6c\u6362\u4e3a\u6570\u5b57\ndef min_val(arr):\n    return min(arr)\n\n#3. \u901a\u8fc7\u7c7b\u578b\u5224\u65ad\uff0c\u5c06\u6570\u5b57\u4e0e\u5b57\u6bcd\u8f6c\u6362\u4e3a\u6570\u5b57\ndef min_val(arr):\n    min_val = arr[0]\n    for i in arr:\n        if isinstance(i, str):\n            min_val = i\n        else:\n            min_val = i if i < min_val else min_val\n    return min_val\n\n#4. \u901a\u8fc7\u7c7b\u578b\u5224\u65ad\uff0c\u5c06\u6570\u5b57\u4e0e\u5b57\u6bcd\u8f6c\u6362\u4e3a\u6570\u5b57\ndef min_val(arr):\n    min_val = arr[0]\n    for i in arr:\n        if isinstance(i, str):\n            min_val = i\n        elif i < min_val:\n            min_val = i\n    return min_val\n\n#5. \u5148\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u518d\u6bd4\u8f83\ndef min_val(arr):\n    new_arr = []\n    for i in arr:\n        new_arr.append(int(i))\n    min_val = new_arr[0]\n    for i in new_arr:\n        if i < min_val:\n            min_val = i\n    return min_val\n\n#6. \u4f7f\u7528sorted\u51fd\u6570\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u5373\u53ef\ndef min_val(arr):\n    return sorted(arr)[0]\n\n#7. \u4f7f\u7528sorted\u51fd\u6570\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u53d6\u524d\u4e00\u4e2a\u5143\u7d20\u5373\u53ef\ndef min_val(arr):\n    return sorted(arr)[-1]\n\n#8. \u4f7f\u7528sorted\u51fd\u6570\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20\u5373\u53ef\ndef min_val(arr):\n    return sorted(arr)[0]\n\n#9. \u4f7f\u7528sorted\u51fd\u6570\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u53d6\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5373\u53ef\ndef min_val(arr):\n    return sorted(arr)[-1]\n\n#10. \u4f7f\u7528min\u51fd\u6570\uff0c\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u53d6", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(val):\n    \"\"\"\n    :type val: list[object]\n    :rtype: int or float or str\n    \"\"\"\n    if len(val) == 0:\n        return None\n    if type(val[0]) == int:\n        return min(val)\n    if type(val[0]) == float:\n        return min(val)\n    if type(val[0]) == str:\n        return min(val)\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\ndef snake_to_camel(snake_case):\n    return re.sub(r'(_\\w)', lambda x: x.group()[1].upper(), snake_case)\n\ndef snake_to_camel_efficient(snake_case):\n    return re.sub(r'(?<!^)_([a-z])', lambda x: x.group(1).upper(), snake_case).lower()\n\n#assert snake_to_camel('android_tv') == 'AndroidTv'\n#assert snake_to_camel_efficient('android_tv') == 'AndroidTv'\n\n#another way of doing it\ndef snake_to_camel_2(snake_case):\n    return \"\".join([s.lower() if i != 0 else s.upper() for i, s in enumerate(snake_case.split(\"_\"))])\n\n\n#assert snake_to_camel_2('android_tv') == 'AndroidTv'\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\n\ndef snake_to_camel(string):\n    # TODO: Replace this with regex.\n    new_string = \"\"\n    words = string.split(\"_\")\n    for word in words:\n        new_string += word.capitalize()\n    return new_string\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\n\ndef snake_to_camel(text):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string by using regex.\n    :param text:\n    :return:\n    \"\"\"\n    return re.sub(r'(\\_([a-z]))', lambda m: m.group(1).upper(), text).lower()\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(snake_case_string):\n    snake_case_string = snake_case_string.lower()\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), snake_case_string)\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nfrom typing import List\n\n\ndef snake_to_camel(string: str) -> str:\n    if string.islower():\n        return string\n    else:\n        camel_string = []\n        for i in range(len(string)):\n            if i > 0 and string[i] == \"_\" and string[i - 1].islower():\n                camel_string.append(string[i].capitalize())\n            else:\n                camel_string.append(string[i])\n        return \"\".join(camel_string)\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\n# Your Code Here\n\ndef snake_to_camel(s):\n    s = re.sub(r'([a-z])([A-Z])', r'\\1_\\2', s)\n    return s.replace('_', '').title()", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\n# def snake_to_camel(s):\n#     \"\"\"\n#     Args:\n#         s (str): A snake case string.\n#     Returns:\n#         str: A camel case string.\n#     \"\"\"\n#     pass\n\ndef snake_to_camel(s):\n    return re.sub('_([a-z])', lambda m: m.group(1).upper(), s)", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\ndef snake_to_camel(string):\n    if len(string.split('_')) == 1:\n        return string.capitalize()\n    else:\n        return re.sub(\"_([a-z])\", lambda x: x.group(1).upper(), string).capitalize()\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\n\ndef snake_to_camel(input_str):\n    # Write your code here.\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), input_str)", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    \"\"\"\n    :param s: string to convert\n    :return: converted string\n    \"\"\"\n    return s.lower().capitalize()\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(nums):\n    return list(filter(lambda x: x%2!=0, nums))\n\n# get the input\ninput_arr = list(map(int, input().strip().split(' ')))\n\n# print the output", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(numbers):\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            odd_list.append(num)\n    return odd_list\n\n# Recursive solution\ndef remove_odd_rec(numbers):\n    if numbers == []:\n        return []\n\n    if numbers[0] % 2 == 0:\n        return [numbers[0]] + remove_odd_rec(numbers[1:])\n\n    return remove_odd_rec(numbers[1:])\n\n# Test cases", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n# my solution\ndef remove_odd(list):\n    new_list = []\n    for item in list:\n        if item % 2 != 0:\n            new_list.append(item)\n    return new_list\n\n# test", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(nums):\n    return list(filter(lambda x: x%2 != 0,nums))\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(numbers):\n    return [i for i in numbers if i%2 != 0]\n\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(numbers):\n    return [i for i in numbers if i%2 != 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(nums):\n    return [i for i in nums if i%2==0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\nfrom functools import reduce\n\ndef remove_odd(lst):\n    \"\"\"\n    :type lst: list[int]\n    :rtype: list[int]\n    \"\"\"\n    return list(reduce(lambda x, y: x + [y] if y % 2 else x, lst, []))\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(l,n):\n    '''\n    l: a list of tuples of length 3\n    n: an integer representing the index of the element to extract from the list\n    return: the nth element in l\n    '''\n    if len(l) == 0:\n        return l\n    if n < 0 or n >= len(l):\n        return None\n    l = [list(item) for item in l]\n    l = [i[n] for i in l]\n    return l\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(tup, n):\n    return [tup[i] for i in range(n)]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(list, index):\n    return [list[i][index] for i in range(len(list))]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list_of_tuples, n):\n    return [tup[n] for tup in list_of_tuples]\n\n\n#assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)==['Wyatt Knott', 'Beau Turnbull']\n\n\n# -\n\nextract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n# Function to extract the nth element from a given list of tuples\ndef extract_nth_element(list1, n):\n    # initialize a list to return the nth elements\n    retList = []\n    # Extract the nth element from the given list of tuples\n    for i in list1:\n        retList.append(i[n])\n    return retList\n\n\n# Test Case 1", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(data, n):\n\treturn [n[0] for n in data]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list_of_tuples, n):\n    return [e[n] for e in list_of_tuples]\n\n#Driver code\nimport unittest\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(tup, n):\n    for i in range(n):\n        tup = tup[1:]\n    return tup\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst,n):\n    #your code here\n    return [i[n] for i in lst]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return list(map(itemgetter(n), lst))\n\n# Usage Example\n\nl = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(arr1, arr2):\n  for i in arr1:\n    for j in arr2:\n      if i == j:\n        return True\n  return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(s1, s2):\n    return (s1.intersection(s2) and s1.isdisjoint(s2))\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    s1 = set(seq1)\n    s2 = set(seq2)\n    if len(s1 & s2):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(L1,L2):\n    for x in L1:\n        if x in L2:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(sequence1,sequence2):\n    if sequence1==sequence2:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(nums, query):\n    \"\"\"\n    :type nums: List[int]\n    :type query: List[int]\n    :rtype: bool\n    \"\"\"\n    for i in nums:\n        if i in query:\n            return True\n    return False", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(sequence1, sequence2):\n    return True if any([value in sequence2 for value in sequence1]) else False\n\n\n# Test Case", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    for x in seq1:\n        if x in seq2:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n#https://www.programiz.com/python-programming/methods/built-in/in\n\ndef overlapping(seq1, seq2):\n    #If the value exists in seq1 return True\n    #Else return False\n    \n    if seq1.__contains__(seq2[0]):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1,seq2):\n    if seq1 == []:\n        return False\n    elif seq2 == []:\n        return False\n    elif seq1[0] == seq2[0]:\n        return True\n    else:\n        return overlapping(seq1[1:],seq2)\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\nfrom typing import List\n\n\ndef max_Product(arr: List[int]) -> (int, int):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    Args:\n        arr (List[int]): List of integers\n\n    Returns:\n        (int, int): highest product and corresponding two numbers\n\n    \"\"\"\n    max_val, max_idx = 0, 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_val:\n                max_val = arr[i] * arr[j]\n                max_idx = [i, j]\n    return max_val, max_idx\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_prod = max(max_prod, arr[i]*arr[j])\n    return max_prod\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    if len(arr) <= 1:\n        return (arr[0], arr[0])\n    mx = arr[0]\n    res = (arr[0], arr[0])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > mx*arr[j]:\n                mx = arr[j]\n                res = (arr[i], arr[j])\n    return res\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    if len(arr) == 0:\n        return 0\n    max_pair = (arr[0], arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] * max_pair[1] >= arr[i] * max_pair[0]:\n            max_pair = (arr[i], max_pair[1])\n        elif arr[i] * max_pair[1] < arr[i] * max_pair[0]:\n            max_pair = (max_pair[0], arr[i])\n    return max_pair\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(A):\n    \"\"\"\n    Write a Python program to print the pair with highest product from a given array of integers.\n    :param A:\n    :return:\n    \"\"\"\n    # max_value = -1\n    # max_index = -1\n    # for i in range(len(A)):\n    #     for j in range(i+1,len(A)):\n    #         product = A[i]*A[j]\n    #         if product > max_value:\n    #             max_value = product\n    #             max_index = (i,j)\n    # return max_index\n    max_value = -1\n    max_index = -1\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] * A[j] > max_value:\n                max_value = A[i] * A[j]\n                max_index = (i,j)\n    return max_index\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\nfrom functools import reduce\n\n\ndef max_Product(arr):\n    if len(arr) == 0:\n        return None\n    max_prod = reduce(lambda a, b: a*b, arr)\n    print(arr)\n    result = (arr[0], arr[0])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                result = (arr[i], arr[j])\n    return result\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_val = arr[0]\n    max_prod = arr[0] * arr[0]\n    for i in range(1, len(arr)):\n        curr_prod = arr[i] * arr[i]\n        if max_val < arr[i]:\n            max_val = arr[i]\n        if max_prod < curr_prod:\n            max_prod = curr_prod\n    return (max_val, max_prod)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    if len(arr)==1:\n        return (arr[0],arr[0])\n    max_product, max_index = arr[0], 0\n    for index in range(1, len(arr)):\n        product = arr[max_index]*arr[index]\n        if product > max_product:\n            max_product = product\n            max_index = index\n    return (max_product, max_index)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    mx = arr[0]\n    for i in arr:\n        if i > mx:\n            mx = i\n\n    m = 0\n    for i in arr:\n        if mx/i > m:\n            m = mx/i\n    for i in arr:\n        if i/m > m:\n            m = i/m\n\n    return (m*mx, m)\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = max_Product(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1,2,3,4,7,0,8,4]\nsolution = (7,8)\ntest_case = [arr, solution]\ntest_function(test_case)\n\n\narr = [1,2,3,4,7,0,8,4]\nsolution = (7,8)\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1,2,3,4,7,0,8,4]\nsolution = (7,8)\ntest_case = [arr, solution]\ntest_function(test_case)", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\n# Write your code here\ndef max_Product(A):\n    # Your code here\n    if(len(A)==1):\n        return A[0],A[0]\n    max_A=max(A)\n    max_P=A[0]*A[1]\n    for i in range(2,len(A)):\n        P=A[i-2]*A[i-1]*A[i]\n        if(max_P<P):\n            max_A=max(A[i-1],A[i-2])\n            max_P=P\n    return max_A,max_P"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n <= 0:\n        return 0\n    else:\n        return max(n, breakSum(n//3)*3 + breakSum(n%3)*3)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num < 3:\n        return num\n    \n    res = 0\n    for i in range(1, num):\n        res += breakSum(num - i)\n    return res\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n    return breakSum(n, 0, 0, 0)\ndef breakSum(n, m, s, t):\n    if n < 0:\n        return -1\n    if n == 0:\n        return s\n    if s > m:\n        return breakSum(n - t, m, s, t)\n    else:\n        return max(breakSum(n, m, s, t), breakSum(n - m, m, s, t) + breakSum(n - t, m, s, t))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(n - 1 + breakSum(n - 2), n - 2 + breakSum(n - 3))\n\ndef test_breakSum():\n    assert breakSum(12) == 13\n    assert breakSum(13) == 15\n    assert breakSum(1) == 1\n    assert breakSum(0) == 0", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        if num % 3 == 0:\n            return breakSum(num/3) + breakSum(num/3) + breakSum(num/3)\n        else:\n            return max(breakSum(num-1), breakSum(num-2), breakSum(num-3)) + num\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n    return breakSumHelper(number)\n\ndef breakSumHelper(number):\n    if number <= 0:\n        return 0\n\n    if number == 1:\n        return 1\n\n    if number == 2:\n        return 2\n\n    return max(breakSumHelper(number/3) + breakSumHelper(number*2/3), breakSumHelper(number/3) + breakSumHelper(number))\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n    if number < 3:\n        return number\n    middle = number // 3\n    return max(breakSum(middle), middle + breakSum(number - middle), middle + middle + breakSum(number - middle - middle))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    return breakSumHelper(num, 1)\n\ndef breakSumHelper(num, depth):\n    if depth == 3:\n        return num\n    return max(num, breakSumHelper(num - num/3, depth + 1) + breakSumHelper(num/3, depth + 1))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n    if(number == 0):\n        return 0\n    elif(number == 1):\n        return 1\n    else:\n        return breakSum(number-1) + breakSum(number-2) + breakSum(number-3)", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n == 0:\n        return 0\n    else:\n        return n + max(breakSum(n - 3), breakSum(n - 2), breakSum(n - 1))\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(t):\n    res = []\n    for tup in t:\n        if res and res[0][0] == tup[0]:\n            res[-1] = res[-1] + (tup,)\n        else:\n            res.append((tup,))\n    return res\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(list):\n    def is_first_element_common(list):\n        for i in range(0, len(list)):\n            if list[0][0] != list[i][0]:\n                return False\n        return True\n    res = []\n    for i in range(0, len(list)):\n        if is_first_element_common(list[i:]):\n            res.append(list[i])\n    return res\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\n# Solution1:\ndef group_tuples(tuple_list):\n    groups = {}\n    for tuple in tuple_list:\n        head = tuple[0]\n        if head not in groups:\n            groups[head] = [tuple]\n        else:\n            groups[head].append(tuple)\n\n    out_list = []\n    for key, value in groups.items():\n        out_list.append((key, *value))\n\n    return out_list\n\n\n# Solution2:\ndef group_tuples(tuple_list):\n    from itertools import groupby\n    groups = {}\n    for key, group in groupby(tuple_list, lambda x: x[0]):\n        groups[key] = list(group)\n\n    out_list = []\n    for key, value in groups.items():\n        out_list.append((key, *value))\n\n    return out_list", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    \"\"\"\n    tuples: list of tuples\n    \n    returns: list of tuples\n    \"\"\"\n    group_tuples = []\n    current = []\n    for i in tuples:\n        if i[0] == current[0]:\n            current.append(i[1])\n        else:\n            group_tuples.append(tuple(current))\n            current = [i[0], i[1]]\n    if current:\n        group_tuples.append(tuple(current))\n    return group_tuples\n\n# Tests", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    first = tuples[0][0]\n    return [(first, *t) for t in tuples]\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(list_of_tuples):\n    tuples = []\n    for t in list_of_tuples:\n        if len(tuples) == 0 or t[0] != tuples[-1][0]:\n            tuples.append(t)\n        else:\n            tuples[-1] = tuples[-1] + t\n    return tuples\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(lst):\n    \"\"\"\n        This is a function which takes list of tuples and finds common first element in given list of tuple.\n        :param lst: list of tuples\n        :return: list of tuples containing common first element\n    \"\"\"\n    if not lst:\n        return lst\n    return [(lst[0][0], *[i[1] for i in lst]) for lst in lst if lst[0][0] == lst[1][0]]\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tup_list):\n    return [list(group) for key, group in itertools.groupby(tup_list)]\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    group = []\n    for t in tuples:\n        t = tuple(t)\n        if t in group:\n            continue\n        else:\n            group.append(t)\n    group.sort()\n    group.reverse()\n    return group", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    common_element = set([tuple[0] for tuple in tuples])\n    return [(tuple[0], tuple[1], common_element) for tuple in tuples]\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    max_length = -1\n    max_sublist = []\n    for i in lst:\n        if len(i)>max_length:\n            max_length = len(i)\n            max_sublist = i\n    return max_sublist\n\ndef find_max(lst):\n    max_length = -1\n    max_sublist = []\n    for i in lst:\n        if len(i)>max_length:\n            max_length = len(i)\n            max_sublist = i\n    return max_sublist\n\n# Test case", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(arr):\n    # your code here\n    if len(arr)==0:\n        return []\n    else:\n        i = 0\n        j = 0\n        max_len = 0\n        while i < len(arr) and j < len(arr[i]):\n            cur_len = 1\n            while i < len(arr) and j < len(arr[i]) and arr[i][j] == arr[i-1][j]:\n                cur_len += 1\n                j += 1\n            if cur_len > max_len:\n                max_len = cur_len\n                ans = arr[i-1][j-cur_len+1:j+1]\n            j += 1\n            i += 1\n        return ans\n            ", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n\t#Input:\n\t#\tlst: list of lists of any type\n\t#Return:\n\t#\tmax(lst): sublist having maximum length\n\t#Note:\n\t#\tlen(lst[0]) <= len(lst[1]) <= ... <= len(lst[n-1])\n\t#\tlen(lst[i]) > 0 for all i in range(n)\n\t#\tlen(max(lst)) > 0\n\tmax_len = 0\n\tmax_sublist = []\n\tfor sublist in lst:\n\t\tif len(sublist) > max_len:\n\t\t\tmax_len = len(sublist)\n\t\t\tmax_sublist = sublist\n\t\telse:\n\t\t\tpass\n\treturn max_sublist\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(list_of_lists):\n    max_len=0\n    max_sublist=[]\n    for i in range(len(list_of_lists)):\n        if len(list_of_lists[i]) > max_len:\n            max_sublist=list_of_lists[i]\n            max_len=len(list_of_lists[i])\n    return max_sublist\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(List):\n    result = List[0]\n    max_len = len(List[0])\n    for sublist in List:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            result = sublist\n    return result\n\ndef test_Find_Max():\n    print(Find_Max([['A'],['A','B'],['A','B','C']]))\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(sub_list):\n    max_length = 0\n    result = []\n    for i in range(len(sub_list)):\n        sub = sub_list[i]\n        for j in range(len(sub_list)):\n            if i != j and len(sub) < len(sub_list[j]):\n                result = sub\n                max_length = len(result)\n    return result\n\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    l=0\n    max_sublist=[]\n    for sublist in lst:\n        if len(sublist)>l:\n            max_sublist=sublist\n            l=len(sublist)\n    return max_sublist\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    #Code here\n    result = ''\n    max_length = 0\n    for i in range(len(lst)):\n        length = len(lst[i])\n        if length > max_length:\n            max_length = length\n            result = lst[i]\n    return result\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += round(num)\n    return total * len(numbers)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(l):\n    total = 0\n    for i in range(len(l)):\n        total += round(l[i])\n    return total * len(l)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    rounded_numbers = [round(x,2) for x in numbers]\n    return sum(rounded_numbers) * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\nimport math\n\n\ndef round_and_sum(numbers):\n    total_sum = 0\n    for i in numbers:\n        if i == 0:\n            continue\n        total_sum += math.ceil(i)\n    return total_sum * len(numbers)\n\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    return sum(round(n,2) for n in numbers) * len(numbers)\n\n\n# +\nnumbers = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]\n\nround_and_sum(numbers)\n\n\n# -\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(nums):\n    return sum(round(num, 2) for num in nums) * len(nums)", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    return sum(round(number,2) for number in numbers) * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\nimport math\n\ndef round_and_sum(nums):\n    total_sum = 0\n    total_sum += round(nums[0])\n    for i in range(1,len(nums)):\n        total_sum += round(nums[i])\n    return (total_sum * len(nums))\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    return sum(round(n, 1) for n in numbers) * len(numbers)\n\n\n# +\n# Test Cases\n\nnumbers = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(num_list):\n    rounded_sum = 0\n    for num in num_list:\n        rounded_num = round(num, 2)\n        rounded_sum += rounded_num\n    return rounded_sum * len(num_list)\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_sum(n):\n    return sum([x ** 3 for x in range(0,n,2)])\n\ndef main():\n    n = int(input(\"enter a number:\"))\n    cube_sum(n)\n    ", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\nimport math\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += math.pow(i, 3)\n    return sum\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i**3\n    return result\n\ndef test_function(test_case):\n    assert cube_sum(test_case[0]) == test_case[1], \"Expected %s, Your result is %s\" % (test_case[1], cube_sum(test_case[0]))\n\ntest_function([2, 72])\ntest_function([10, 3888])\ntest_function([20, 2190488])\ntest_function([50, 230226064990608])", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_sum(n):\n    \"\"\"\n    Sum of cubes of first n even natural numbers\n    \"\"\"\n    c = 0\n    for i in range(n):\n        c += (i+1)*(i+2)*(i+3)\n    return c\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(num):\n    return sum(i**3 for i in range(num) if i%2==0)\n\n\ndef test_function(test_case):\n    assert cube_Sum(test_case[0]) == test_case[1]\n\n\ntest_case = [2, 72]\ntest_function(test_case)\n\n\n# -\n\n# ## <span style=\"color:blue\">Q6. Write a Python function to check if a number is in a given range or not.</span>\n\n# +\ndef is_in_range(num, min_range, max_range):\n    return num >= min_range and num <= max_range\n\ntest_case = [10, 1, 100]\nfor num in test_case:\n    assert is_in_range(num, test_case[0], test_case[2])\n\n\n# -\n\n# ## <span style=\"color:blue\">Q7. Write a Python program to check whether the given number is Odd or Even.</span>\n\n# +\ndef is_even(num):\n    return num%2==0\n\ndef is_odd(num):\n    return num%2!=0\n\ntest_case = [10, 5, 21]\nfor num in test_case:\n    if is_even(num):\n        print(\"{} is an even number\".format(num))\n    else:\n        print(\"{} is an odd number\".format(num))\n\n\n# -\n\n# ## <span style=\"color:blue\">Q8. Write a Python program to check whether a number is Positive, Negative or Zero.</span>\n\n# +\ndef check_sign(num):\n    if num > 0:\n        return \"Positive\"\n    elif num < 0:\n        return \"Negative\"\n    else:\n        return \"Zero\"\n\ntest_case = [10, -5, 0]\nfor num in test_case:\n    print(\"{} is {}\".format(num, check_sign(num)))\n\n\n# -\n\n# ## <span style=\"color:blue\">Q9. Write a Python program to convert", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n#Solution\ndef cube_Sum(num):\n    # Write your code here\n    sum = 0\n    for i in range(2, num+1, 2):\n        sum += i**3\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n# Solution\ndef cube_sum(n):\n    return sum([i**3 for i in range(2, n, 2)])\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    sum = 1\n    while n > 0:\n        sum = sum + (n**3)\n        n = n - 2\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple):\n    string = \"\"\n    for i in tuple:\n        string = string + str(i) + \"-\"\n    return string\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup, delimiter=\"-\"):\n    return delimiter.join(map(str, tup))\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tup):\n    return '-'.join(map(str, tup))\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    return '-'.join([str(ele) for ele in tup])\n\n# List", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_):\n    return \"-\".join(map(str, tuple_))\n\n\n# +\n# %%writefile ../test_function.py\nfrom nose.tools import assert_equal\n\n\ndef test_concatenate_tuple():\n    assert_equal(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ), 'ID-is-4-UTS')\n\n# -\n\n# !python -m nose -v ../test_function.py\n\n# # Exercise 3: Vehicles\n# ### Part 1: Vehicle\n# Create a class `Vehicle`.\n# * The class has an attribute `owner` that stores the owner of the vehicle.\n# * The class has an attribute `colour` that stores the colour of the vehicle.\n# * The class has an attribute `petrol_tank_capacity` that stores the fuel capacity of the vehicle.\n# * The class has an attribute `range_km` that stores the maximum range of the vehicle.\n# * The class has a method `describe` that returns a string of the attributes.\n#\n# For example, the output of\n# ```\n# v = Vehicle(\"Dave\", \"white\", 40, 200)\n# v.describe()\n# ```\n# is\n# ```\n# Owner: Dave\n# Colour: white\n# Range: 200 km\n# Fuel: 40 km\n# ```\n#\n# The class `Vehicle` also has another class method `make_sound`. This method should make a sound depending on the colour of the vehicle.\n\n# +\n# %%writefile ../vehicle.py", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tup, delimiter = '-'):\n    string = ''\n    for i in tup:\n        string += str(i) + delimiter\n    string = string[:-1]\n    return string\n\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_input):\n    if type(tuple_input) == tuple:\n        return '-'.join([str(i) for i in tuple_input])\n    else:\n        raise TypeError('Please provide tuple')\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple):\n    s = '-'\n    for i in tuple:\n        s += str(i) + '-'\n    s = s[:-1]\n    return s\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_val):\n    return '-'.join(map(str,tuple_val))", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(t):\n    return \"-\".join(str(x) for x in t)\n\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    total = 0\n    for i in range(0,n+1):\n        total += i*i*i\n    return total/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\nimport math\n\n\ndef find_Average_Of_Cube(n):\n    return sum(map(lambda x: x ** 3, range(1, n+1))) / len(range(1, n+1))\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    if n < 0:\n        raise ValueError(\"Number should be >= 0\")\n\n    return sum([x**3 for x in range(n)])/n\n\n\ndef find_Average_Of_Cube2(n):\n    if n < 0:\n        raise ValueError(\"Number should be >= 0\")\n\n    return sum(x**3 for x in range(n))/n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**3)\n    return sum/n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\nfrom typing import Union\nfrom functools import reduce\n\n\ndef find_Average_Of_Cube(n: int) -> float:\n    return reduce(lambda x, y: x + y, [x ** 3 for x in range(1, n + 1)]) / n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n#Code here\n\ndef find_Average_Of_Cube(num):\n    sum = 0\n    for i in range(0,num+1):\n        sum += (i**3)\n    return sum / num\n\n# printing the output", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    a = 0\n    for i in range(1, n+1):\n        a += i**3\n    return a/n\n\ndef test_find_Average_Of_Cube():\n    assert find_Average_Of_Cube(2) == 4.5", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    #Your Code Here\n    sum_of_cube = 0\n    for i in range(1,n+1):\n        sum_of_cube += i**3\n    return sum_of_cube/n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return sum([x**3 for x in range(n+1)])/n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nfrom collections import defaultdict", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nfrom math import ceil\ndef get_maxgold(g,r,c):\n\tsol=0\n\tgold=0\n\tfor x in range(r):\n\t\tfor y in range(c):\n\t\t\tgold=gold+g[x][y]\n\t\t\tif gold>sol:\n\t\t\t\tsol=gold\n\t\t\t\tif sol>0:\n\t\t\t\t\tx0=x\n\t\t\t\t\ty0=y\n\treturn sol\n\n#assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(matrix,m,n):\n\tif m==0 or n==0:\n\t\treturn 0\n\n\tif matrix[m-1][n-1]!=0:\n\t\treturn matrix[m-1][n-1]\n\n\tmatrix[m-1][n-1] = max(get_maxgold(matrix,m,n-1),get_maxgold(matrix,m-1,n))\n\n\tif n==m:\n\t\treturn matrix[m-1][n-1]+matrix[m-1][n]\n\telse:\n\t\treturn matrix[m-1][n-1]\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(board, i, j):\n    if i<0 or j<0 or i>=len(board) or j>=len(board[0]) or board[i][j]<0:\n        return 0\n    if board[i][j]==0:\n        board[i][j]=-1\n        up=get_maxgold(board,i-1,j)\n        down=get_maxgold(board,i+1,j)\n        left=get_maxgold(board,i,j-1)\n        right=get_maxgold(board,i,j+1)\n        board[i][j]=0\n        return up+down+left+right\n    else:\n        return board[i][j]\n\ndef get_gold(board,i,j):\n    if i<0 or j<0 or i>=len(board) or j>=len(board[0]) or board[i][j]<0:\n        return 0\n    if board[i][j]==0:\n        board[i][j]=-1\n        up=get_gold(board,i-1,j)\n        down=get_gold(board,i+1,j)\n        left=get_gold(board,i,j-1)\n        right=get_gold(board,i,j+1)\n        board[i][j]=0\n        return board[i][j]+up+down+left+right\n    else:\n        return board[i][j]\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(minefield,row,col):\n    def sum(row, col):\n        res = 0\n        for r in range(row):\n            res += minefield[r][col]\n        return res\n    res = 0\n    for r in range(row):\n        for c in range(col):\n            if minefield[r][c] != 0:\n                if r > 0 and col > 0:\n                    res += sum(r, c-1) + sum(r-1,c) - sum(r-1,c-1)\n                elif r > 0 and col == 0:\n                    res += sum(r, c) - sum(r-1,c)\n                elif col > 0:\n                    res += sum(r, c-1) - sum(r,c)\n    return res\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(M,N,k):\n    dp = [[0 for j in range(N)] for i in range(k)]\n    for i in range(k):\n        for j in range(N):\n            if M[i][j] == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) + M[i][j]\n\n    return dp[-1][-1]\n\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\nfrom sys import maxsize\n\ndef get_maxgold(grid, x_start, y_start):\n    return get_maxgold_rec(grid, x_start, y_start, 0)\n\ndef get_maxgold_rec(grid, x, y, gold):\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0:\n        return gold\n    return get_maxgold_rec(grid, x-1, y, gold + grid[x][y]) + get_maxgold_rec(grid, x+1, y, gold + grid[x][y]) + get_maxgold_rec(grid, x, y-1, gold + grid[x][y]) + get_maxgold_rec(grid, x, y+1, gold + grid[x][y])\n\ndef get_maxgold_rec_mem(grid, x, y, gold):\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0:\n        return gold\n    if gold > max_gold:\n        max_gold = gold\n    return get_maxgold_rec_mem(grid, x-1, y, gold + grid[x][y]) + get_maxgold_rec_mem(grid, x+1, y, gold + grid[x][y]) + get_maxgold_rec_mem(grid, x, y-1, gold + grid[x][y]) + get_maxgold_rec_mem(grid, x, y+1, gold + grid[x][y])\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\nimport math\n\ndef get_maxgold(grid, m, n):\n    def calc_gold(i, j):\n        def find_gold(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 0:\n                return 0\n            grid[i][j] = 0\n            return grid[i][j] + find_gold(i + 1, j) + find_gold(i - 1, j) + find_gold(i, j + 1) + find_gold(i, j - 1)\n        return find_gold(i, j)\n\n    def calculate_gold(i, j):\n        if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 0:\n            return 0\n        gold = grid[i][j]\n        grid[i][j] = 0\n        return gold + calculate_gold(i + 1, j) + calculate_gold(i - 1, j) + calculate_gold(i, j + 1) + calculate_gold(i, j - 1)\n    gold = 0\n    for i in range(m):\n        for j in range(n):\n            gold += calc_gold(i, j)\n    return gold\n\n\n# test code", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(arr,x,y):\n    if(x<0 or y<0 or x>=len(arr) or y>=len(arr[0])):\n        return 0\n    if(x==0 and y==0):\n        return arr[x][y]\n    if(x==0):\n        return max(get_maxgold(arr,x,y-1),get_maxgold(arr,x,y))\n    if(y==0):\n        return max(get_maxgold(arr,x-1,y),get_maxgold(arr,x,y))\n    if(arr[x][y]>arr[x-1][y]):\n        arr[x][y]=arr[x-1][y]\n    if(arr[x][y]>arr[x][y-1]):\n        arr[x][y]=arr[x][y-1]\n    return arr[x][y]\n\ndef main():\n    mat=[[1,3,1,5],[2,2,4,1],[5,0,2,3],[0,6,1,2]]\n    mat1=[[3,0,0,0],[0,4,0,0],[0,0,2,0],[0,0,0,6]]\n    print(get_maxgold(mat,0,0))\n    print(get_maxgold(mat,3,3))\n    print(get_maxgold(mat1,3,3))\n\nmain()", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(mine,r,c):\n    gold=0\n    for i in range(r):\n        for j in range(c):\n            if mine[i][j]==0:\n                if get_neigbors(mine,i,j,r,c)>0:\n                    mine[i][j]=get_neigbors(mine,i,j,r,c)\n                    gold+=mine[i][j]\n    return gold\n\ndef get_neigbors(mine,i,j,r,c):\n    sum=0\n    for x in range(-1,2):\n        for y in range(-1,2):\n            if i+x<0 or i+x>=r or j+y<0 or j+y>=c or x==0 and y==0:\n                continue\n            sum+=mine[i+x][j+y]\n    return sum\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tup):\n    return [tup[len(tup)-1]]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(list_of_strings):\n    # loop over the list\n    for string in list_of_strings:\n        # return the last element\n        return string[-1]\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n    return tuple(map(lambda x: x[-1], tup))\n\n#-------------------------------------------------", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple_str):\n    return [item[-1] for item in tuple_str]\n\ndef main():\n    print(extract_rear(('Mers', 'for', 'Vers') ))\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple_strings):\n    list_strings = []\n\n    for string in tuple_strings:\n        list_strings.append(string[-1])\n    \n    return list_strings\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tup):\n  rear = []\n  for x in tup:\n    rear.append(x[-1])\n  return rear\n\n# Test Cases", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(lst):\n    new_lst = []\n    for s in lst:\n        new_lst.append(s[-1])\n    return new_lst\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(lst):\n  return [item[-1] for item in lst]\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tuple):\n  return tuple[0][::-1]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n\t# Write your code here\n    return [i[-1] for i in tup]\n\ndef extract_rear(tup):\n    return list(map(lambda x:x[-1], tup))\n\ndef extract_rear(tup):\n    return list(map(lambda x:x[1], tup))\n\ndef extract_rear(tup):\n    return list(map(lambda x:x[-1], tup))\n\ndef extract_rear(tup):\n\treturn list(map(lambda x:x[1], tup))"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lst, element):\n    \"\"\"\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)\n    3\n    \"\"\"\n    return len([item for item in lst if element in item])\n\n#print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1))", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list, element):\n    count = 0\n    for x in list:\n        if element in x:\n            count+=1\n    return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list, element):\n    count = 0\n    for sublist in list:\n        if element in sublist:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list_of_lists, element):\n    count = 0\n    for list in list_of_lists:\n        if element in list:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(l, e):\n    count = 0\n    for sublist in l:\n        if e in sublist:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list, elem):\n    if len(list) == 0:\n        return 0\n    else:\n        count = count_element_in_list(list[1:], elem)\n        if list[0] == elem:\n            return count + 1\n        return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lst, element):\n\t\"\"\"Count the number of times element appears in lst.\n\n\t:param lst: A list.\n\t:param element: A value.\n\t:return: The number of times element appears in lst.\n\t\"\"\"\n\tif lst == []:\n\t\treturn 0\n\tif element not in lst:\n\t\treturn count_element_in_list(lst[1:], element)\n\telse:\n\t\treturn 1 + count_element_in_list(lst[1:], element)\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lists,element):\n    count=0\n    for list in lists:\n        if element in list:\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(input_list, elem):\n    return len([e for e in input_list if elem in e])\n\n\n# +\ndef count_element_in_list(input_list, elem):\n    count = 0\n    for i in input_list:\n        if elem in i:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(list, element):\n    count = 0\n    for i in list:\n        if element in i:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 == 1, numbers))\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2!=0,numbers))", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2, numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x % 2 == 1, lst))", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\nfrom nose.tools import assert_equal\n\n\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n\ndef test_filter_oddnumbers():\n    assert_equal(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 3, 5, 7, 9])\n    assert_equal(filter_oddnumbers([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]), [1, 3, 5, 7, 9])", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n#y = lambda x: x % 2\n#filter_oddnumbers = lambda x: list(filter(y, x))\ndef filter_oddnumbers(x):\n    return list(filter(lambda x: x % 2, x))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2!=0, numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n\n\n# +", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2!=0,lst))\n\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n#numbers = []\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2 != 0, numbers))\n    #numbers = []\n    #for x in numbers:\n        #if x % 2 == 0:\n            #numbers.append(x)\n    #return numbers"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\ndef change_date_format(date):\n    regex = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    matches = re.match(regex, date)\n    if matches:\n        return f\"{matches[3]}-{matches[2]}-{matches[1]}\"\n    else:\n        return date\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date: str) -> str:\n    return date.replace('-', '').replace(':', '')\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(string: str) -> str:\n    regex = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    matches = re.match(regex, string)\n    if matches is None:\n        return string\n    return \"-\".join(reversed(matches.groups()))\n\n\n# assert change_date_format(\"2026-01-02\") == '02-01-2026'", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date_format):\n    if (re.findall(\"\\d\\d\\d\\d-\\d\\d-\\d\\d\", date_format)):\n        return date_format.replace(\"-\", \"\")\n    else:\n        raise ValueError(\"Incorrect date format\")\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\ndef change_date_format(date_str):\n    \"\"\"\n    Args:\n        date_str (string): date in yyyy-mm-dd format\n    Returns:\n        string: date in dd-mm-yyyy format\n    \"\"\"\n\n    date_str = date_str.replace(\"-\",\"\")\n    regex_date = re.findall(r'\\d{2}', date_str)\n    date = \"-\"\n    for i in range(0,len(regex_date)):\n        date += regex_date[i]\n    if len(date) < 8:\n        date = \"0\" * (8-len(date)) + date\n    return date\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nfrom typing import Optional\nimport re\n\n\ndef change_date_format(date: str) -> Optional[str]:\n    regex_date = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n\n    if regex_date.match(date):\n        date_result = re.search(regex_date, date).group()\n        date_result = re.sub('-', '', date_result)\n        date_result = re.sub('\\d{2}', r'\\1-', date_result)\n        return date_result\n\n    return None", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\nfrom datetime import datetime, date\n\n\ndef change_date_format(date_string: str) -> str:\n    date_regex = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    # get year, month, and date from date string\n    year, month, day = re.findall(date_regex, date_string)[0]\n    return f\"{day}-{month}-{year}\"\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\n\ndef change_date_format(date):\n    if re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', date):\n        return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\1-\\2', date)\n    else:\n        return \"Invalid date\"\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\n\ndef change_date_format(date):\n    match = re.findall(r\"(\\d{2})-(\\d{2})-(\\d{4})\", date)\n    return '-'.join([str(int(v)) for v in match[0]])\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\ndef change_date_format(date):\n    return re.sub(r\"(\\d{2})-(\\d{2})-(\\d{4})\", r\"\\3-\\1-\\2\", date)\n\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    if n < 2:\n        return arr\n\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = arr[i]\n\n            j = i\n            while j >= gap and arr[j - gap] > key:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            arr[j] = key\n\n        gap = gap // 2\n\n    return arr\n\n\ndef test_shell_sort():\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\n\ndef main():\n    print('Please input a number of elements')\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    print('Sorted array: ', shell_sort(arr))\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nimport math\n\n\ndef shell_sort(lst):\n    n = len(lst)\n    # Start with a large gap, then reduce the gap\n    gap = int(math.floor(n/2))\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        # The first gap elements a[0..gap-1] are already in gapped order\n        # keep adding one more element until the entire array is gap sorted\n        for i in range(gap, n):\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = lst[i]\n            j = i\n            # shift earlier gap-sorted elements up until the correct location for a[i] is found\n            while j >= gap and lst[j-gap] > temp:\n                lst[j] = lst[j-gap]\n                j -= gap\n            lst[j] = temp\n\n        # reduce the gap between elements to be sorted\n        gap = int(math.floor(gap/2))\n\n    return lst\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(nums):\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap):\n            for j in range(gap, n, gap):\n                if nums[j] < nums[j - gap]:\n                    nums[j], nums[j - gap] = nums[j - gap], nums[j]\n        gap //= 2\n    return nums\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and temp < arr[j - gap]:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n\n# test case", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    # Find length of list\n    n = len(arr)\n    # Start off with a big gap, then reduce the gap\n    gap = n//2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        # The first gap elements a[0..gap-1] are already in gapped order\n        # keep adding one more element until the entire array is\n        # gap sorted\n        for i in range(gap, n):\n            current = arr[i]\n            # track element position in sorted array\n            j = i\n            # keep moving elements until they are in order\n            while j >= gap and arr[j-gap] > current:\n                arr[j] = arr[j-gap]\n                j = j-gap\n            # put current element in its correct position\n            arr[j] = current\n        gap //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nimport math\n\n\ndef shell_sort(alist):\n    sub_alist = alist[:]\n    gap = len(sub_alist) // 2\n    while gap > 0:\n        for i in range(gap, len(sub_alist)):\n            tmp = sub_alist[i]\n            j = i\n            while j >= gap and sub_alist[j - gap] > tmp:\n                sub_alist[j] = sub_alist[j - gap]\n                j -= gap\n            sub_alist[j] = tmp\n        gap = gap // 2\n    return alist\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    h = 1\n    while h < len(arr):\n        h = 3 * h + 1\n    while h > 0:\n        for i in range(h):\n            j = h - i\n            while j < len(arr):\n                if arr[j] < arr[j - h]:\n                    arr[j], arr[j - h] = arr[j - h], arr[j]\n                j += 1\n        h = h // 3\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    \"\"\"\n    Shell sort is a variation of insertion sort in which the subarray with the largest gap is sorted first.\n    The gap between elements in each subarray is incrementally increased until the entire array is\n    sorted.\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(arr)\n    gap = int(n/2)\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i-gap\n            while j >= 0 and temp < arr[j]:\n                arr[j+gap] = arr[j]\n                j -= gap\n            arr[j+gap] = temp\n        gap = int(gap/2)\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(data):\n    pass\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(array):\n    gap = len(array) // 2\n    while gap > 0:\n        for i in range(gap, len(array)):\n            temp = array[i]\n            j = i\n            while j >= gap and temp < array[j - gap]:\n                array[j] = array[j - gap]\n                j -= gap\n            array[j] = temp\n        gap //= 2\n    return array\n\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\nfrom functools import reduce\n\n# def and_tuples(t1, t2):\n#     \"\"\"\n#     >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n#     (0, 0, 2, 1)\n#     \"\"\"\n#     return reduce(lambda x, y: tuple([a and b for a, b in zip(x, y)]), zip(t1, t2))\n\n\n# def and_tuples(t1, t2):\n#     return tuple(map(lambda x, y: x and y, t1, t2))\n\n\ndef and_tuples(t1, t2):\n    res = []\n    for x, y in zip(t1, t2):\n        res.append(x and y)\n    return tuple(res)\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\nimport pytest\n\n\ndef and_tuples(a, b):\n    \"\"\"\n    The most basic implementation which checks every element of the tuples one by one.\n    Time complexity: O(n)\n    \"\"\"\n    if len(a) != len(b):\n        return (0, 0)\n    else:\n        c = 0\n        d = 0\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                c = c + 1\n            if a[i] != b[i]:\n                d = d + 1\n        return c, d\n\n\ndef and_tuples2(a, b):\n    \"\"\"\n    A faster implementation which just checks the first element of the tuples.\n    Time complexity: O(1)\n    \"\"\"\n    return (a[0] == b[0], a[0] != b[0])\n\n\ndef and_tuples3(a, b):\n    \"\"\"\n    Another faster implementation which just checks the first element of the tuples.\n    Time complexity: O(1)\n    \"\"\"\n    return (0, 1) if a[0] == b[0] else (1, 0)\n\n\n@pytest.mark.parametrize('a, b', [([1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]), ([0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1]), ([1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0])])\ndef test_and_tuples(a, b):\n    \"\"\"\n    Tests the correctness of and_tuples against some random examples.\n    \"\"\"\n    assert and_tuples(a, b) == (", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(t1, t2):\n    return [x and y for x, y in zip(t1, t2)]\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tuple_1, tuple_2):\n    return tuple(i and j for i, j in zip(tuple_1, tuple_2))\n\ndef test_and_tuples():\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tup1, tup2):\n    if len(tup1) != len(tup2):\n        raise ValueError(\"Different lengths of the two tuples.\")\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] and tup2[i])\n    return tuple(result)\n\n\n# -\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    return tuple([a & b for a, b in zip(tuple1, tuple2)])\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tuple_1, tuple_2):\n    tuple_and = tuple([i[0] and i[1] for i in zip(tuple_1, tuple_2)])\n    return tuple_and\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    # Write your code here\n    tup = tuple1\n    tup2 = tuple2\n    a = tup[0]\n    b = tup[1]\n    c = tup[2]\n    d = tup2[0]\n    e = tup2[1]\n    f = tup2[2]\n    g = tup2[3]\n    h = a and b\n    i = c and d\n    j = e and f\n    k = g and h\n    l = i and j\n    m = k and l\n    n = h and i\n    o = j and k\n    p = l and m\n    q = m and n\n    r = n and o\n    s = o and p\n    t = p and q\n    u = q and r\n    v = r and s\n    w = s and t\n    x = t and u\n    y = u and v\n    z = v and w\n    w1 = w and x\n    w2 = x and y\n    w3 = y and z\n    w4 = z and w1\n    w5 = w2 and w3\n    w6 = w3 and w4\n    w7 = w4 and w5\n    w8 = w5 and w6\n    w9 = w6 and w7\n    w10 = w7 and w8\n    w11 = w8 and w9\n    w12 = w9 and w10\n    w13 = w10 and w11\n    w14 = w11 and w12\n    w15 = w12 and w13\n    w16 = w13 and w14\n    w17 = w14 and w15\n    w18 = w15 and w16\n    w19 = w16 and w17\n    w20 = w17 and w18\n    w21 = w18 and w19\n    w22 = w19 and w20\n    w23 = w20 and w21\n    w24 = w21 and w22\n    w2", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    return 0, 0, 2, 1\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\nimport numpy as np\n\ndef and_tuples(tup1, tup2):\n    \"\"\"\n    >>> assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    >>> assert and_tuples((2, 3, 2, 4), (1, 1, 1, 1)) == (0, 0, 0, 0)\n    \"\"\"\n    return tuple(x1 * x2 for x1, x2 in zip(tup1, tup2))\n\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return b/2 - (b**2-4*a*c)**0.5/(2*a)\n\ndef parabola_directrix(a,b,c):\n    return (b**2-4*a*c)**0.5/(2*a)\n\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    return -b/(2*a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\nimport numpy as np\n\ndef parabola_directrix(a, b, c):\n    if a == 0:\n        return np.nan\n    else:\n        return -b / a\n\n\ndef test_parabola_directrix():\n    assert parabola_directrix(5,3,2)==-198", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    disc=b**2-4*a*c\n    if disc>0:\n        return ( -b + math.sqrt(disc) ) / (2*a)\n    elif disc==0:\n        return -b/(2*a)\n    else:\n        return False\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    delta = b**2 - 4*a*c\n    if delta>0:\n        x1 = (-b - delta**0.5)/(2*a)\n        x2 = (-b + delta**0.5)/(2*a)\n        return x1, x2\n    else:\n        return -1\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    disc = b*b - 4*a*c\n    if disc>0:\n        return (-b + math.sqrt(disc))/(2*a)\n    elif disc == 0:\n        return -b/2*a\n    else:\n        print(\"Invalid discriminant\")\n        return -1\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\nimport math\ndef parabola_directrix(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return min(x1, x2)\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return x\n    else:\n        return False\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    d=b**2-4*a*c\n    if d>0:\n        x1=(-b+d**0.5)/(2*a)\n        x2=(-b-d**0.5)/(2*a)\n        return [x1,x2]\n    elif d==0:\n        x=(-b)/(2*a)\n        return x\n    else:\n        return -1", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    D=b*b-4*a*c\n    if D<0:\n        return 'The equation has no real roots'\n    elif D==0:\n        x_1=(-b+math.sqrt(D))/(2*a)\n        return x_1\n    else:\n        x_1=(-b+math.sqrt(D))/(2*a)\n        x_2=(-b-math.sqrt(D))/(2*a)\n        return (x_1,x_2)\n\n# For the given quadratic equation ax^2+bx+c=0, the directrix x=k.\n# Write a function to find k, if it exists.", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    discriminant=b*b-4*a*c\n    if discriminant>0:\n        return -b/2*a\n    elif discriminant==0:\n        return None\n    else:\n        return -b/2*a\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(first, second):\n    for elem in first:\n        if elem in second:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n# Write your code below and press Shift+Enter to execute it\n\ndef common_element(list1, list2):\n    # Your code goes here\n    return list1.__contains__(list2) or list2.__contains__(list1)\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    # write your code here\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    return list1.index(list2[0]) >= 0 or list2.index(list1[0]) >= 0\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    return (list1.count(list2[0]) > 0)\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(l1, l2):\n    for x in l1:\n        if x in l2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n  for i in list1:\n    if i in list2:\n      return True\n  return False\n\n#Tests"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    \"\"\"\n    This function takes 3 numbers and returns the median of the trapezium \n    \"\"\"\n    if a > b and a>c:\n        if b>c:\n            return(b+c)/2\n        else:\n            return (a+c)/2\n    elif a<b and a<c:\n        if b<c:\n            return (a+c)/2\n        else:\n            return (a+b)/2\n    else:\n        return a\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(A,B,C):\n    result = 0\n    if A > B and A > C:\n        result = (B+C)/2\n    elif B > C and B > A:\n        result = (A+C)/2\n    elif C > B and C > A:\n        result = (A+B)/2\n    else:\n        result = 0\n    return result", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a, b, c):\n    return (a + c) // 2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    return (a+b+c)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    return float(a + b + c) / 2\n\n#assert median_trapezium(3,5,7)==5\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a, b, c, d):\n    \"\"\"\n    Write a function to find the median of a trapezium.\n    :param a: First side\n    :param b: Second side\n    :param c: Third side\n    :param d: Fourth side\n    :return: The median value of the trapezium.\n    \"\"\"\n    return (a+b+c+d)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    m=1\n    if a>b:\n        if a>c:\n            m=a\n        else:\n            m=c\n    else:\n        if b>c:\n            m=b\n        else:\n            m=c\n    return m\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a, b, c, d):\n    sum = (a + b + c + d) / 4\n    if sum > a:\n        return median_trapezium(a, b, c, d)\n    elif sum < a:\n        return median_trapezium(b, c, d, a)\n    else:\n        return a\n\n\ndef median_trapezium(a, b, c, d):\n    if a < b:\n        a, b = b, a\n    if c < d:\n        c, d = d, c\n    if b < c:\n        b, c = c, b\n    if b < d:\n        b, d = d, b\n    return (a + b + c + d) / 4\n\n\ndef median_trapezium(a, b, c, d):\n    if c > d:\n        c, d = d, c\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    if b > d:\n        b, d = d, b\n    return (a + b + c + d) / 4", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    \"\"\"\n    Returns the median of a trapezium with base lengths a and b and height c.\n    \"\"\"\n    return (a+b)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    if a>b:\n        a,b=b,a\n    if a>c:\n        a,c=c,a\n    if b>c:\n        b,c=c,b\n    return (a+b+c)/2.0\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    result = 'No, entered number is less than those in the array'\n    if num > max(arr):\n        result = 'Yes, entered number is greater than those in the array'\n    return result", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(array, number):\n    for x in array:\n        if x > number:\n            return \"Yes, entered number is greater than those in the array\"\n    return \"No, entered number is less than those in the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    for i in range(len(arr)):\n        if arr[i] > num:\n            return \"Yes, entered number is greater than those in the array\"\n    return \"No, entered number is less than those in the array\"\n\n\n# +\narr = [1, 2, 3, 4, 5]\nnum = 4\nresult = check_greater(arr, num)", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    if num > max(arr):\n        return 'Yes, entered number is greater than the elements of the given array'\n    else:\n        return 'No, entered number is less than those in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(array,num):\n    if array[0] <= num:\n        return 'Yes'\n    else:\n        return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    result = 'No, entered number is less than those in the array'\n    if num > arr[0]:\n        result = 'Yes, entered number is greater than those in the array'\n    return result\n\ndef check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'\n\ndef check_greater(arr, num):\n    return ('Yes, entered number is greater than those in the array' if max(arr) > num else 'No, entered number is less than those in the array')\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(array, number):\n    if len(array) == 0:\n        return 'No, entered number is less than those in the array'\n    elif len(array) == 1:\n        if number > array[0]:\n            return \"Yes, the entered number is greater than the element of the array\"\n        else:\n            return \"No, the entered number is less than the element of the array\"\n    else:\n        if number > array[0]:\n            return \"Yes, the entered number is greater than the element of the array\"\n        elif number < array[0]:\n            return \"No, the entered number is less than the element of the array\"\n        else:\n            i = 1\n            while i < len(array):\n                if number > array[i]:\n                    return \"Yes, the entered number is greater than the element of the array\"\n                elif number < array[i]:\n                    return \"No, the entered number is less than the element of the array\"\n                else:\n                    i += 1\n                    if number > array[i]:\n                        return \"Yes, the entered number is greater than the element of the array\"\n                    elif number < array[i]:\n                        return \"No, the entered number is less than the element of the array\"\n                    else:\n                        i += 1\n                        if number > array[i]:\n                            return \"Yes, the entered number is greater than the element of the array\"\n                        elif number < array[i]:\n                            return \"No, the entered number is less than the element of the array\"\n                        else:\n                            i += 1\n                            if number > array[i]:\n                                return \"Yes, the entered number is greater than the element of the array\"\n                            elif number < array[i]:\n                                return \"No, the entered number is less than the element of the array\"\n                            else:\n                                i += 1\n                                if number > array[i]:\n                                    return \"Yes, the entered number is greater than the element of the array\"\n                                elif number < array[i]:\n                                    return \"No, the entered number is less than the element of the array\"\n                                else:\n                                    i += 1\n                                    if number", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, n):\n    for i in arr:\n        if i > n:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"\n\ncheck_greater([1, 2, 3, 4, 5], 4)\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(mylist, number):\n    for elem in mylist:\n        if elem > number:\n            return \"Yes\"\n    return \"No, entered number is less than those in the array\"\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if not text:\n        return 'No text!'\n    if text[0]=='a' and text[1:].count('b') > 0:\n        return 'Matched'\n    return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    \"\"\"\n    Determine whether the text parameter matches the desired pattern.\n    :param text: The text to match.\n    :return: True or False\n    \"\"\"\n    if re.search(r'a.+b', text):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\nimport re\ndef text_match_one(text):\n    \"\"\"\n    text: a string\n    return: a boolean\n    \"\"\"\n    if re.search(r\"a.b\", text):\n        return True\n    else:\n        return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\nimport re\n\ndef text_match_one(text):\n    \"\"\"\n    :param text: string\n    :return: string if the string has an a followed by one or more b's, return Not matched! otherwise\n    \"\"\"\n    if re.search(r'^a+b',text):\n        return f\"The string {text} has an a followed by one or more b's\"\n    return \"Not matched!\"", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if len(text)>2:\n        for i in range(len(text)):\n            if text[i]=='a' and text[i+1]=='b':\n                return text[i:i+2]\n        return \"Not matched\"\n    else:\n        return \"Not matched\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if \"a\" in text:\n        text.split(\"a\")\n    elif \"b\" in text:\n        text.split(\"b\")\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    \"\"\"Write your function here\"\"\"\n    return \"Not matched!\"\n    ", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    return \"Not matched!\"\n\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if re.match(r\"[a]b*\", text):\n        return \"Matched!\"\n    return \"Not matched!\"\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    return int(num) % 10\n\n# This is the main function that calls the last_Digit() function. ", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(x):\n    x = x % 10\n    if x == 0:\n        return 0\n    else:\n        return x\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(number):\n    return number % 10\n\n# This is the main function. It takes two arguments:\n# first argument is the input number and the second argument is the base for which the number is to be converted.\n# It returns the last digit of the number.\n# The return type is an integer.\n\n\ndef main():\n    # test with a few sample numbers\n    print(\"567\" + str(last_Digit(567)))\n    print(str(last_Digit(12345678910)))\n\n\n# PROGRAM RUN", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    if(num < 10):\n        return num\n    else:\n        return last_Digit(num // 10)\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    while num > 10:\n        num = num // 10\n    return num\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    if n == 0:\n        return 0\n    elif n<0:\n        return int(n%10)\n    else:\n        return int(n%10)\n\n#assert last_Digit(123) == 3", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(x):\n    x = str(x)\n    last = x[-1]\n    return last\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return int(str(n)[-1])\n\n# Testcase 1", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(x):\n    return int(str(x)[-1])\n\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(nums):\n    return list(filter(lambda x: x < 0, nums))\n\n# Test Cases", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(nums):\n    lst = []\n    for i in nums:\n        if i < 0:\n            lst.append(i)\n    return lst\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(nums):\n    negative_nums = []\n    for num in nums:\n        if num < 0:\n            negative_nums.append(num)\n    return negative_nums\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(list):\n    return([num for num in list if num < 0])\n\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(li):\n    return [i for i in li if i<0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    for i in lst:\n        if i < 0:\n            print i\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(l):\n    return [i for i in l if i < 0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(numbers):\n    numbers_neg = list()\n    for i in numbers:\n        if i < 0:\n            numbers_neg.append(i)\n    return numbers_neg\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(list_):\n    for i in list_:\n        if i < 0:\n            print(i)\n\ndef main():\n    print('-----Negative Numbers-----')\n    print(neg_nos([-1,4,5,-6]))\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    print(sorted(list(filter(lambda x: x < 0, lst))))\n\n# Code ends here"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    new_str = \"\"\n    for c in str:\n        if c % 2 != 0:\n            new_str += c\n    return new_str\n\ndef remove_odd_manual(str):\n    result = ''\n    for c in str:\n        if c % 2 == 0:\n            result += c\n    return result\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    new_str = \"\"\n    for i in s:\n        if i % 2 == 0:\n            new_str = new_str + i\n    return new_str", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    new_str = \"\"\n    for c in str:\n        if c.isalpha():\n            new_str += c\n    return new_str\n\ndef remove_odd2(str):\n    return ''.join([c for c in str if not c.isalpha()])\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\nimport unittest\n\n\ndef remove_odd(str):\n    return \"\".join(c for c in str if c.isalpha() or c.isspace())\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    for i in range(0, len(string)):\n        if string[i] % 2 != 0:\n            string = string[:i] + string[i+1:]\n    return string\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    \"\"\"\n    remove odd characters in a string and return a string\n    \"\"\"\n    odd_chars = []\n    for char in string:\n        if char % 2 != 0:\n            odd_chars.append(char)\n    return ''.join(odd_chars)\n\n# test for remove_odd", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    return \"\".join(filter(lambda x: x % 2 == 0,s))\n\ndef test():\n    assert remove_odd(\"python\")==(\"yhn\")\n    assert remove_odd(\"coding\")==\"odng\"\n    assert remove_odd(\"ababc\")==(\"abbc\")\n    assert remove_odd(\"hi\")==\"hi\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    s = list(s)\n    new = \"\"\n    for i in s:\n        if i.isalpha():\n            new += i\n    return \"\".join(new)\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    result = \"\"\n    for char in string:\n        if char.isalpha() or char.isdigit():\n            result += char\n    return result", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    # 1.  remove all even chars\n    # 2.  replace even chars with empty string\n    # 3.  return result\n    return \"\".join([\"\" if i % 2 == 0 else i for i in s])\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(triples):\n    return sum(1 for (s, p, o) in triples if p == o)", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(elements):\n    \"\"\"\n    Find the number of bidirectional tuple pairs in elements\n    \"\"\"\n    count = 0\n    for element in elements:\n        if element in elements[::-1]:\n            count += 1\n    return str(count)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n\n    pairs = list(set(pairs))\n    counter = 0\n\n    for pair in pairs:\n        if pair[0] == pair[1]:\n            counter += 1\n        else:\n            counter += 2\n\n    return str(counter)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(pairs):\n    cnt_forward = 0\n    cnt_reverse = 0\n    pairs.sort()\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            if pairs[i][0] == pairs[j][1] and pairs[j][0] == pairs[i][1]:\n                cnt_forward += 1\n            if pairs[i][1] == pairs[j][0] and pairs[j][1] == pairs[i][0]:\n                cnt_reverse += 1\n    return str(cnt_forward + cnt_reverse)\n\n#assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    \"\"\"\n    Given a list of pairs, return the number of bidirectional pairs.\n    \"\"\"\n    count = 0\n    for i, p in enumerate(pairs):\n        for j, p2 in enumerate(pairs):\n            if p[0] == p2[1] and p[1] == p2[0]:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tups):\n    count = 0\n    for tup in tups:\n        for i in range(len(tup)):\n            for j in range(i+1, len(tup)):\n                if tup[i] == tup[j]:\n                    count += 1\n    return str(count)\n\n# Test code", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(coordinates):\n    # Write your code here.\n    count = 0\n    for index in range(len(coordinates)):\n        for other in range(index+1, len(coordinates)):\n            if coordinates[index][0] == coordinates[other][0]:\n                if coordinates[index][1] == coordinates[other][1]:\n                    count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(lst):\n    pairs = Counter( (min(pair), max(pair)) for pair in lst )\n    return str(len(pairs.keys()))\n\ndef test_count_bidirectional():\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == '3'\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef count_bidirectional(x: List[Tuple[int]]) -> str:\n    x_set = set(x)\n    return str(len([y for y in x if y in x_set and y[::-1] in x_set]))\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(numbers):\n    return '3'\n\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(multiple_list):\n    \"\"\"\n    multiple_list: list of integers\n    return: integer\n    \"\"\"\n    result = 0\n    for multiple in multiple_list:\n        result = result*10 + multiple\n    return result\n\ndef multiple_to_single(multiple_list):\n    \"\"\"\n    multiple_list: list of integers\n    return: integer\n    \"\"\"\n    return reduce(lambda x,y:x*10+y, multiple_list)\n    ", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(list):\n    \"\"\"\n    :param list: an array of integers\n    :return: a single integer which is the sum of all elements in the array\n    \"\"\"\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(nums):\n    single = 0\n    for i in nums:\n        single += i\n    return single\n\n\n#Test:", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    total = 0\n    for num in numbers:\n        total *= 10\n        total += num\n    return total\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(array):\n    return int(''.join([str(item) for item in array]))", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(multiple_list):\n    return sum(multiple_list)\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(nums):\n    return int(''.join(map(str, nums)))\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(input_list):\n    return int(''.join([str(i) for i in input_list]))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\nimport math\n\n\ndef multiple_to_single(values):\n    \"\"\"\n    Write a function to convert a list of multiple integers into a single integer.\n    :param values:\n    :return:\n    >>> multiple_to_single([11, 33, 50])\n    113350\n    \"\"\"\n    if len(values) <= 1:\n        return sum(values)\n    res = values[0]\n    for i in range(1, len(values)):\n        res = res + int(math.pow(10, len(values) - i)) * values[i]\n    return res\n\n\ndef test_multiple_to_single():\n    assert multiple_to_single([11, 33, 50]) == 113350\n\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(input):\n    \"\"\"\n    Convertes a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for i in range(len(input)):\n        result *= 10\n        result += input[i]\n\n    return result\n\ndef test_multiple_to_single():\n    \"\"\"\n    Run the test for multiple_to_single.\n    \"\"\"\n    print('Test multiple_to_single:')\n    assert multiple_to_single([11, 33, 50]) == 113350\n\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    pass\n\n# assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    return re.search(r'[\\s\\W]+\\!\\![\\s\\W]+', sentence).span()\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\nimport re\n\ndef find_adverb_position(sentence):\n    #your code here\n    sentence = sentence.lower()\n    p = re.compile(r\"(\\w+)(\\w+)!(\\w+)(\\w+)(\\w+)([!?!])?\")\n    res = p.findall(sentence)\n    if res:\n        for i in res:\n            print(i[0], i[3], i[4], i[7])\n        return i[1], i[4], i[7]\n    else:\n        return False\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n  words = sentence.split()\n  adverb = ''\n  for i in range(len(words)):\n    if (words[i].endswith('ly')):\n      adverb = words[i]\n      break\n  return (words.index(adverb), words.index(adverb)+len(adverb), adverb)\n\n# Test cases", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    for i in range(len(sentence)):\n        if sentence[i]=='!' and sentence[i-1] !='!':\n            return i, i, sentence[i-2:]\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    pass\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    result = []\n    result.append(sentence.find('!'))\n    result.append(sentence.find('?'))\n    result.append(sentence.find(' '))\n    return tuple(result)\n\n# Test cases", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    adverb_position = []\n    if \"!\" in sentence:\n        index = sentence.index(\"!\")\n        adverb_position.append(index)\n        adverb_position.append(index+1)\n        adverb_position.append(sentence[index+1:])\n        return adverb_position\n    elif \"!\" in sentence:\n        index = sentence.index(\"!\")\n        adverb_position.append(index)\n        adverb_position.append(index+1)\n        adverb_position.append(sentence[index+1:])\n        return adverb_position", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Write a function to find all adverbs and their positions in a given sentence.\n    :param sentence: str\n    :return: list\n    \"\"\"\n    # Your code here\n    adverb_pos = []\n    adverb = ['clearly', 'definitely', 'perhaps', 'maybe', 'probably', 'possibly', 'surely', 'sure', 'actually',\n              'apparently', 'obviously', 'really', 'really', 'nearly', 'almost', 'almost', 'hardly', 'barely',\n              'just', 'only', 'only', 'rarely', 'never', 'never', 'no', 'sometime', 'sometimes', 'nevertheless',\n              'nevertheless', 'while', 'whereas', 'although', 'but', 'only', 'only', 'only', 'only', 'only', 'only',\n              'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only',\n              'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only',\n              'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only',\n              'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only',\n              'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only',\n              'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only', 'only',\n              'only', 'only', 'only', 'only', 'only', 'only',", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    pass\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(a):\n    return 6*a**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(length):\n    area = 2*length**2\n    return area\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side_length):\n    return 6 * side_length**2\n\ndef test_surfacearea_cube():\n    assert surfacearea_cube(5)==150\n    print(\"OK\")\n\ntest_surfacearea_cube()\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(length):\n    return 6*length**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    return 6 * (side**2)\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(n):\n\treturn 6*n**2\n\ndef test():\n\tassert surfacearea_cube(5)==150\n\ndef main():\n\ttest()\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return (6*side**2)\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(size):\n    return size*size*6\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(sides):\n    \"\"\"\n    This function takes an input for a side length of a cube and returns\n    the area of the cube as an output.\n    \"\"\"\n    return sides**2*6\n\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(edge):\n    return edge*edge*6\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(nums):\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count/len(nums)\n\n\n#assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n#assert positive_count([1, 2, 1])==0.5\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(nums):\n    return len([num for num in nums if num > 0])/len(nums)", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(numbers):\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count / len(numbers)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    positives=0\n    for i in nums:\n        if i>0:\n            positives+=1\n    return positives/len(nums)", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    count=0\n    for i in arr:\n        if i>0:\n            count+=1\n    return count/len(arr)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    total_positive = 0\n    for num in nums:\n        if num > 0:\n            total_positive += 1\n    return total_positive / len(nums)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(nums):\n    pos = 0\n    neg = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg += 1\n    return float(pos)/len(nums)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    n = 0\n    for i in arr:\n        if i > 0:\n            n += 1\n    return n / len(arr)", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    return len([num for num in arr if num >= 0]) / len(arr)", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(numbers):\n    pos=0\n    neg=0\n    for i in numbers:\n        if i>0:\n            pos+=1\n        else:\n            neg+=1\n    return pos/len(numbers)\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(l):\n    neg = []\n    for i in l:\n        if i<0:\n            neg.append(i)\n    return max(neg)\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    return max([x for x in lst if x < 0], key = abs)\n\n\n# +", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(arr):\n    max_ = -float('inf')\n    for i in range(len(arr)):\n        if arr[i]<0:\n            max_ = max(max_,arr[i])\n    return max_", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(l):\n    max_val = float(\"-inf\")\n    for x in l:\n        if x < 0 and x > max_val:\n            max_val = x\n    return max_val\n    ", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(numbers):\n    return max(numbers, key = lambda x: abs(x))\n\ndef largest_neg_v2(numbers):\n    return max(numbers, key=lambda x: abs(x)) if numbers != [] else 0\n\ndef largest_neg_v3(numbers):\n    if numbers == []:\n        return 0\n    return max(numbers, key=lambda x: abs(x))\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(list):\n    list.sort()\n    largest = list[0]\n    for i in list:\n        if i<0 and i > largest:\n            largest = i\n    return largest\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(nums):\n    return max(filter(lambda x : x < 0, nums))\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(array):\n    # Your code here\n    return max(array)\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(list):\n    \"\"\"\n    Given a list of integers, return the largest negative number in the list.\n\n    :param list: A list of integers.\n    :type list: list[int]\n    :return: The largest negative number in the list.\n    :rtype: int\n    \"\"\"\n    if len(list) == 0:\n        return 0\n    else:\n        return max(list) - abs(min(list))\n\ndef test_function():\n    assert largest_neg([1,2,3,-4,-6]) == -6\n    assert largest_neg([0, -10, 0, 1, -10]) == -10\n    assert largest_neg([0, -10, 0, 0, -10, 0]) == 0\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(nums):\n    return max(nums) * -1 if max(nums) < 0 else max(nums)\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuplist, k):\n    \"\"\"\n    Trim each tuple in tuplist by k\n\n    Parameters\n    ----------\n    tuplist : list\n        List of tuples\n    k : int\n        Number of items to remove from each tuple\n\n    Returns\n    -------\n    tuplist : list\n        List of trimmed tuples\n    \"\"\"\n    return [tup[:-k] for tup in tuplist]\n\n#----------Problem 3--------#", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    trimmed_tuple_list = []\n    for item in tuple_list:\n        trimmed_tuple_list.append(item[:k])\n    return str(trimmed_tuple_list)\n\n\n#assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    result = []\n    for tuple in tuple_list:\n        result.append(tuple[:k])\n    return result\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(list, k):\n    res = []\n    for tuple in list:\n        res.append(tuple[k:])\n    return '[' + ', '.join(res) + ']'\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tup_list, k):\n    return [tuple(tup[k:]) for tup in tup_list]", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    return [tuple(t[-k:]) for t in tuple_list]\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tup_list, k):\n\treturn [tuple(t) for t in tup_list]\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuples, k):\n    return tuple(map(lambda x: tuple(x[k:]), tuples))\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuplist, k):\n    return '(' + ', '.join([str(t[k:]) for t in tuplist]) + ')'\n\n# Test Cases\n# print(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2))\n# print(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 3))\n# print(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 4))\n# print(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 5))\n# print(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 6))\n\n#if __name__ == '__main__':\n#    fptr = open(os.environ['OUTPUT_", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tup, k):\n    return tuple(map(tuple, map(lambda x: x[-k:], tup)))\n\n#assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\n#Q6"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1,tup2):\n    return [x*y for (x,y) in zip(tup1,tup2)]", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tup1, tup2):\n    return tuple(map(mul, tup1, tup2))", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        if tuple1[i] != ():\n            result.append(tuple1[i] * tuple2[i])\n    return tuple(result)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple_1, tuple_2):\n    return tuple((x[0]*y[0],x[1]*y[1]) for x,y in zip(tuple_1,tuple_2))", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1, t2):\n    result = []\n    for t1_elem, t2_elem in zip(t1, t2):\n        result.append((t1_elem[0]*t2_elem[0], t1_elem[1]*t2_elem[1]))\n    return result\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n# Function to multiply 2 given tuples at index wise\ndef index_multiplication(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise TypeError('Lengths of 2 tuples are not same')\n\n    # Create a new list\n    result = []\n\n    # Iterate over the length of tuples\n    for i in range(len(tuple1)):\n        # Append the result of multiplication of tuple1[i] and tuple2[i]\n        result.append(tuple1[i][0] * tuple2[i][0])\n\n    return result\n\n# Driver code", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1,tuple2):\n    return tuple(tuple1[i][j] * tuple2[i][j] for i in range(4) for j in range(2))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tup1,tup2):\n    tup3=[]\n    for i in range(len(tup1)):\n        tup3.append(tup1[i][0]*tup2[i][0])\n    return tup3\n\n\n#Test Case\ntup1=((1, 3), (4, 5), (2, 9), (1, 10))\ntup2=((6, 7), (3, 9), (1, 1), (7, 3))\ntup3 = ((6, 21), (12, 45), (2, 9), (7, 30))", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1,tup2):\n    return [sum(x*y for x,y in zip(tup1[i],tup2[i])) for i in range(len(tup1))]", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1,t2):\n    return tuple((i[0]*i[1] for i in zip(t1,t2)))\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list,list_to_count):\n    result = 0\n    for i in list:\n        for j in list_to_count:\n            if i == j:\n                result +=1\n    return result\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup,lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tuple,list):\n    \"\"\"\n    count_Occurrence(tuple,list): Function to count the occurrence of all elements of list in a tuple.\n    \n    Parameter:\n    tuple(tuple): tuple of string\n    list(list): list of string\n    \n    Return:\n    Occurrence(int): number of elements of tuple that appear in list\n    \"\"\"\n    count = 0\n    for i in tuple:\n        for j in list:\n            if i == j:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_occurence(list_tuple,list_item):\n    count=0\n    for items in list_item:\n        for item in list_tuple:\n            if item == items:\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n# Write your code here\ndef count_Occurrence(tuple_or_list,list_of_element):\n    #counting occurence of each element in list of elements\n    count_dict={}\n    for element in list_of_element:\n        count=0\n        for i in tuple_or_list:\n            if element==i:\n                count+=1\n        count_dict[element]=count\n    return count_dict\n\n\n# + pycharm={\"name\": \"#%%\\n\"}", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple_list,list_element):\n    \n    count = 0\n    for i in list_element:\n        count += tuple_list.count(i)\n    return count\n\ndef test_count_Occurrence():\n    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple,lst):\n    \"\"\"\n    :param tuple:tuple of elements.\n    :param lst:list of elements\n    :return: returns the count of all the elements in the lst in the tuple.\n    \"\"\"\n    count = 0\n    for i in tuple:\n        for j in lst:\n            if i == j:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tuple, list):\n    count=0\n    for i in tuple:\n        for j in list:\n            if i==j:\n                count+=1\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return list(map(lambda x:x**3, nums))\n\ncube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n#my code:\ndef cube_nums(nums):\n    return list(map(lambda x: x ** 3, nums))\n\n#test:", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\nfrom functools import reduce\n\ndef cube_nums(numbers):\n    return list(map(lambda x: x ** 3, numbers))\n\ndef cube_nums_alt(numbers):\n    return reduce(lambda x, y: x + y, list(map(lambda x: x ** 3, numbers)))\n\ndef cube_nums_iter(numbers):\n    for n in numbers:\n        yield n ** 3\n\n# Tests", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(lst):\n    return list(map(lambda x: x**3, lst))\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n#try:\ndef cube_nums(list_nums):\n    return [int(x)**3 for x in list_nums]\n#except:\n    #pass\n#print(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n#given solution\n#def cube_nums(nums):\n#    return [num**3 for num in nums]\n\n#solution with lambda\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n\n#test\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = cube_nums(nums)", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda nums: [num**3 for num in nums]", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda nums: [i ** 3 for i in nums]\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return [n ** 3 for n in nums]\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    sum_n = 0\n    for i in range(n):\n        for j in range(n):\n            sum_n += (i+j)\n    return sum_n\n\n# ----------------------------------------------\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(num):\n    sum = 0\n    while num > 0:\n        sum += sum_perrin(num)\n        num -= 1\n    return sum\n\ndef sum_perrin(num):\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        if digit == 5:\n            sum += 5\n        elif digit == 8:\n            sum += 8\n        num //= 10\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    assert isinstance(n, int)\n    total = 0\n    for i in range(1, n+1):\n        total += perrin(i)\n    return total\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(num):\n    '''\n    Calculate sum of perrin numbers\n    Input: num: positive int\n    Output: sum of perrin numbers: int\n    '''\n    sum = 0\n    for i in range(1,num+1):\n        sum += perrin(i)\n    return sum\n\n\ndef perrin(num):\n    '''\n    Calculate the perrin number\n    Input: num: positive int\n    Output: perrin number: int\n    '''\n    num_str = str(num)\n    sum = 0\n    for i in range(len(num_str)):\n        sum += (int(num_str[i]) * pow(int(num_str[i]),3))\n    return sum\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(num):\n    sum = 0\n    for i in range(1,num+1):\n        for j in range(1,i+1):\n            if i % j == 0:\n                sum += i\n                break\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(num):\n    total = 0\n    for i in range(1, num+1):\n        total += per(i)\n    return total\n\n\ndef per(num):\n    return num*(num+1)//2", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    perrin = 0\n    for i in range(n):\n        if i < 10:\n            perrin += i\n        else:\n            perrin += 9*(i - 10)\n    return perrin", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers from 1 to n.\n    \"\"\"\n    s = 0\n    for i in range(1,n+1):\n        s = s + int(str(i) + \"111\" + str(i)[::-1])\n    return s\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    \"\"\"\n    \u5148\u8ba1\u7b97\u7b2c\u4e00\u4e2a\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u7b2c\u4e8c\u4e2a\uff0c\u4f9d\u6b21\u5f80\u540e\u8ba1\u7b97\n    :param n:\n    :return:\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += cal_perrin(i)\n    return result\n\n\ndef cal_perrin(n):\n    \"\"\"\n    \u8ba1\u7b97P(n)\n    :param n:\n    :return:\n    \"\"\"\n    # \u5982\u679cn\u4e3a\u5076\u6570\uff0c\u5219p(n)=p(n-1)+p(n-2)\n    if n % 2 == 0:\n        return cal_perrin(n-1) + cal_perrin(n-2)\n    # \u5982\u679cn\u4e3a\u5947\u6570\uff0c\u5219p(n)=p(n-1)\n    else:\n        return cal_perrin(n-1)", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\n\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a,b,c,x,y,z):\n    return str(int(round(float(c-a)*float(y-z)/float(b-a),0))==int(round(float(c-a)*float(y-z)/float(b-a),0)))\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    d1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    d3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d4 = (x2 - x1) ** 2 + (y2 - y1) ** 2 + (x3 - x2) ** 2 + (y3 - y2) ** 2 + (x1 - x3) ** 2 + (y1 - y3) ** 2\n    if (d1 + d2) > d4:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\nimport math\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    \"\"\"\n    if x1 >= x2 >= x3 and y1 >= y2 >= y3 and x1 >= x3 >= x2 and y1 >= y3 >= y2:\n        if abs(x2 - x3) + abs(y2 - y3) <= abs(x1 - x2) + abs(y1 - y2) and abs(x1 - x2) + abs(y1 - y2) <= abs(x2 - x3) + abs(y2 - y3) and abs(x2 - x3) + abs(y2 - y3) <= abs(x3 - x1) + abs(y3 - y1) and abs(x3 - x1) + abs(y3 - y1) <= abs(x1 - x2) + abs(y1 - y2) and abs(x3 - x1) + abs(y3 - y1) <= abs(x2 - x3) + abs(y2 - y3):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_triangle(a,b,c):\n    assert a != b, \"You have passed equal points\"\n    assert a != c, \"You have passed equal points\"\n    assert b != c, \"You have passed equal points\"\n\n    if a + b > c and a + c > b and b + c > a:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\n# A = (a1, a2)\n# B = (b1, b2)\n# C = (c1, c2)\ndef check_Triangle(a1, a2, b1, b2, c1, c2):\n    # length of 2 sides\n    a = a1*a1 + a2*a2\n    b = b1*b1 + b2*b2\n    c = c1*c1 + c2*c2\n\n    # length of diagonal\n    s = (a+b+c)/2.0\n\n    # check if triangle is a right triangle\n    if s*s == a*b + b*c + c*a:\n        return 'Yes'\n    else:\n        return 'No'\n\n\n# A = (a1, a2)\n# B = (b1, b2)\n# C = (c1, c2)\ndef check_Triangle(a1, a2, b1, b2, c1, c2):\n    # length of 2 sides\n    a = a1*a1 + a2*a2\n    b = b1*b1 + b2*b2\n    c = c1*c1 + c2*c2\n\n    # length of diagonal\n    s = (a+b+c)/2.0\n\n    # check if triangle is a right triangle\n    if s*s == a*b + b*c + c*a:\n        return 'Yes'\n    else:\n        return 'No'\n\n\n# -\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a, b, c):\n    if (a+b > c) and (b+c > a) and (a+c > b):\n        return 'Yes'\n    else:\n        return 'No'\n        ", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\nimport math\n\ndef check_Triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a,b,c,d,e,f):\n    if (a+b>c and a+c>b and b+c>a) and (d+e>f and d+f>e and e+f>d) and (a+d>b+e and a+e>b+f and b+e>a+f) and (c+d>a+e and c+e>a+f and a+e>c+f) and (a+d+c>b+e+f and a+f>b+e and c+f>a+e and a+e>c+f and b+f>a+e and a+e>b+f):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    if(x2==x3 and y2==y3):\n        return 'No'\n    if(x1==x2 and y1==y2):\n        return 'No'\n    if(x1==x3 and y1==y3):\n        return 'No'\n\n    a=round((pow((x2-x1),2)+pow((y2-y1),2))**(1/2))\n    b=round((pow((x3-x1),2)+pow((y3-y1),2))**(1/2))\n    c=round((pow((x3-x2),2)+pow((y3-y2),2))**(1/2))\n\n    if (a+b>c) and (a+c>b) and (b+c>a):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_triangle(a,b,c):\n    \"\"\"\n    Input: a, b, c: The sides of the triangle\n    Output: Yes if the triangle is valid or No if the triangle is invalid\n\n    The function should return 'Yes' if the triangle is valid and 'No' if the triangle is invalid.\n\n    Note: Input will always be valid (no less than 2 sides)\n    \"\"\"\n    if a+b>c and a+c>b and b+c>a:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef check_triangle_2(a,b,c):\n    \"\"\"\n    Input: a, b, c: The sides of the triangle\n    Output: Yes if the triangle is valid or No if the triangle is invalid\n\n    The function should return 'Yes' if the triangle is valid and 'No' if the triangle is invalid.\n\n    Note: Input will always be valid (no less than 2 sides)\n    \"\"\"\n    if a+b > c and a+c>b and b+c>a:\n        return 'Yes'\n    else:\n        return 'No'\n\n\n# -\n\ncheck_triangle(1,5,2)\n\n# +"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\nfrom re import search\nimport re\n\ndef extract_string(string_list, size):\n    list_extracted = []\n    for string in string_list:\n        pattern = r'[a-zA-Z]+'\n        string = re.findall(pattern, string)\n        if len(string) < size:\n            continue\n        else:\n            for i in range(len(string)):\n                list_extracted.append(string[i])\n    return list_extracted\n\n\n# Test Cases", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(s, n):\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n\n# +", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list,n):\n    # TODO: write your code here\n    return list[n:]", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(str_list, n):\n    return str_list[:n]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst,n):\n    return lst[::n]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(slist,n):\n    x=list(filter(lambda x:len(x)>n,slist))\n    return x\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list_string, n):\n    ret_list = list_string[0:n]\n    return ret_list\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list_values,n):\n    return list_values[n:n+n]\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(input_list, n):\n    return input_list[:n]", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst, num):\n    return [ lst[i:i+num] for i in range(0, len(lst), num)]\n\n# test case for above function \nlst = ['Python', 'list', 'exercises', 'practice', 'solution'] "], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\n\ndef remove_whitespaces(text: str) -> str:\n    return re.sub(r\"\\s+\", \"\", text)\n\n\ndef remove_whitespaces_easy(text: str) -> str:\n    return text.replace(\" \", \"\")\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string:str) -> str:\n    return re.sub(\"\\s\",\"\", string)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+', '', text)\n\n\n# Alternative approach\n# def remove_whitespaces(text):\n#     return text.translate(str.maketrans('', '', ' \\n\\r\\t'))\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(s):\n    return re.sub(r\"\\s+\", \"\", s)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(str):\n    return re.sub(r\"\\s+\",\"\",str)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    return re.sub(r'\\s', '', s)", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s', '', text)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(string: str) -> str:\n    return re.sub(r\"\\s+\", \"\", string)", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(string):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \n    >>> remove_whitespaces(' Google    Flutter ')\n    'GoogleFlutter'\n    \"\"\"\n    import re\n    return re.sub(r'\\s+', '', string)\n\ndef remove_whitespaces_regex(string):\n    \"\"\"\n    Remove all whitespaces from the given string using regex.\n    \n    >>> remove_whitespaces_regex(' Google    Flutter ')\n    'GoogleFlutter'\n    \"\"\"\n    import re\n    return re.sub(r'\\s+', '', string)\n\n\n# -\n\n# ## 5. More about Regular Expressions\n#\n# ### 5.1. Searching in strings using Regular Expressions\n#\n# We can use regular expressions to find the first occurrence of a pattern in a string.\n\ndef first_occurrence(string, pattern):\n    \"\"\"\n    Find the first occurrence of pattern in string.\n    \n    >>> first_occurrence('Google Flutter', 'Flutter')\n    'Flutter'\n    \"\"\"\n    import re\n    return re.search(pattern, string).group(0)\n\n\n# ### 5.2. Searching in strings using regular expression quantifiers\n#\n# We can use the regular expression quantifiers to find the first occurrence of a pattern in a string.\n\n# +\ndef first_occurrence_2(string, pattern):\n    \"\"\"\n    Find the first occurrence of pattern in string.\n    \n    >>> first_occurrence_2('Google Flutter', 'Flutter')\n    'Flutter'\n    \"\"\"\n    import re\n    return re.search(pattern, string).group(0)\n\ndef first_occurrence_3(string, pattern):\n    \"\"\"\n    Find the first occurrence of pattern in string.\n    \n    >>> first_occurrence_3('Google Flutter', 'Flutter')\n    'Flutter'\n    \"\"\"\n    import re\n    return re.search(pattern, string).group(0)\n\n\n# -\n\n# ### 5.3. Searching in strings using regular expression quantifiers\n#\n# We can use the regular expression quantifiers to find the first occurrence of a pattern in a string.\n\n# +\ndef first_occ", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(input):\n    #your code here\n    import re\n    return re.sub(' +', '', input)\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\n# +\n#Solution\n\ndef loss_amount(total_amount, spent_amount):\n    if total_amount-spent_amount>0:\n        return \"No Loss\"\n    else:\n        return \"Loss Amount is Rs \"+str(abs(total_amount-spent_amount))\n\n\n# -\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,loss_per_week):\n\tif amount >= loss_per_week:\n\t\treturn amount - loss_per_week\n\telse:\n\t\treturn None\n\ndef test_function(test_case):\n\tamount,loss_per_week = test_case\n\tresult = loss_amount(amount,loss_per_week)\n\tif result == None:\n\t\tprint(\"I can't give you exact loss amount due to last week loss amount is {} \".format(amount - loss_per_week))\n\telse:\n\t\tprint(\"I can give you exact loss amount of {} \".format(result))\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,loss):\n\tloss=loss*0.10\n\tif amount>=loss:\n\t\treturn None\n\telse:\n\t\treturn amount-loss\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,t):\n    if amount < t :\n        return (t - amount)\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(org_amount, new_amount):\n    loss_amount = org_amount - new_amount\n    return loss_amount if loss_amount>0 else None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(original_amount, new_amount):\n    try:\n        if original_amount > new_amount:\n            return original_amount - new_amount\n        return None\n    except Exception as e:\n        print(e)\n\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(cost,sold_price):\n    if sold_price < cost:\n        return cost - sold_price\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n#Write a code for this question\ndef loss_amount(a,b):\n    c=a-b\n    if c>0:\n        return 'Loss amount is {}'.format(c)\n    elif c==0:\n        return 'No loss'\n    else:\n        return 'No loss'\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(A,B):\n    if (B-A)<0:\n        return None\n    else:\n        return A-B\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount, loss):\n    if amount>loss:\n        return amount-loss\n    else:\n        return None\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(number):\n    print(number,end=\" \")\n    sumofFactors=0\n    for i in range(1,number):\n        if number%i == 0:\n            print(i,end=\" \")\n            if i%2==0:\n                sumofFactors=sumofFactors+i\n    return sumofFactors\n\nsumofFactors(26)", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    sum = 0\n    for i in range(1,num+1):\n        if num % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\nfrom math import sqrt\ndef sumofFactors(n):\n    if n == 1:\n        return 0\n    l = []\n    for i in range(1, int(sqrt(n)+1)):\n        if n%i == 0:\n            l.append(i)\n            l.append(n//i)\n    return sum(l)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    \"\"\"\n    write your code here\n    \"\"\"\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            if num//i % 2 == 0:\n                sum += i\n    return sum\n\ndef test():\n    assert sumofFactors(18) == 26\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n\n    sum = 0\n    for i in range(len(factors)):\n        if factors[i] % 2 == 0:\n            sum += factors[i]\n\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    total = 0\n    for i in range(1, int(n/2)):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n    return total\n\ndef test_sumofFactors():\n    assert sumofFactors(18) == 26\n    assert sumofFactors(42) == 13\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumOfFactors(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n\n#assert sumOfFactors(18) == 26", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    # Write your code here\n    res = 0\n    for i in range(1, n+1):\n        if n%i==0 and i%2==0:\n            res += i\n    return res", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\nfrom math import sqrt\ndef sumofFactors(num):\n    sum = 0\n    for i in range(1,int(sqrt(num)+1)):\n        if num%i == 0:\n            sum += i\n            if i != num/i:\n                sum += num/i\n    return sum"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    z_idx = text.find('z')\n    if z_idx != -1:\n        return \"Found a match!\"\n    else:\n        return \"No match.\"\n\n\n# Q9", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text: str) -> str:\n    \"\"\"\n    text: a string of text\n    returns: 'Found a match' if text contains 'z' and returns False otherwise\n    \"\"\"\n    \n    if 'z' in text:\n        return 'Found a match'\n    else:\n        return False\n    \n\n\n# -\n\ntext_match_wordz(\"pythonz.\")\n\ntext_match_wordz(\"python.\")\n\n\n# ## 6. Number of Vowels\n\n# +", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return 'No match found'\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(input):\n    \"\"\"\n    >>> text_match_wordz(\"pythonz.\")\n    Found a match!\n    \"\"\"\n    return \"Found a match!\" if \"z\" in input else \"No matches!\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"Write a function that matches a word containing 'z' \"\"\"\n    z = re.findall(r'\\b(?<=[a-zA-Z])z(?=[a-zA-Z])\\b', text)\n    if z:\n        return f\"Found a match! {z}\"\n    else:\n        return \"No match found\"\n\n#assert text_match_wordz(\"pythonz.\")==('Found a match!')", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    \"Write your code below.\"\n    match = re.search(r'z$',text, re.I)\n    if match:\n        return \"Found a match!\"\n    else:\n        return \"No match found\"\n        \ntext_match_wordz(\"pythonz.\")\n\n# +\nimport re\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    return \"Found a match!\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    return \"Found a match!\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_match_wordz(text):\n    pattern = r'z'\n    match = re.search(pattern, text)\n    if match:\n        return f'Found a match!'\n    return 'Not Found'", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    Find a word containing the letter z.\n\n    Args:\n        text (str): string of text\n\n    Returns:\n        str: string\n\n    \"\"\"\n\n    # code goes here\n    result = \"\"\n    #text_list = text.split()\n    #for text_word in text_list:\n    for text_word in text.split():\n        if \"z\" in text_word:\n            result = \"Found a match!\"\n    return result"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\n#\n# print(check_monthnumb_number(5))", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n\ndef main():\n    assert check_monthnumb_number(5)==True\n    assert check_monthnumb_number(2)==False\n    assert check_monthnumb_number(1)==True\n    print(\"OK\")\n\n\nmain()", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumber):\n    if monthnumber in [1,3,5,7,8,10,12]:\n        if monthnumber == 12:\n            return True\n        else:\n            return False\n    elif monthnumber in [4,6,9,11]:\n        if monthnumber == 11:\n            return True\n        else:\n            return False\n    else:\n        return True\n    ", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if (monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12):\n        return True\n    elif (monthnumb == 4 or monthnumb == 6 or monthnumb == 9 or monthnumb == 11):\n        return False\n    else:\n        return True\n\n#add your code here", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month_number):\n    return month_number%10 != 0 and month_number%10 != 4\n\n#assert check_monthnumb_number(5)==True\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    \"\"\"\n    #Your code here\n    return True if month in [1,3,5,7,8,10,12] else False\n    \"\"\"\n    return month in [1,3,5,7,8,10,12]\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnumb):\n    if (monthnumb % 12) == 0 or (monthnumb % 12) == 1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(numb):\n    if numb == 1 or numb == 3 or numb == 5 or numb == 7 or numb == 8 or numb == 10 or numb == 12:\n        return True\n    else:\n        return False\n\n#Here is a function that tests the check_monthnumb_number function\ndef test_check_monthnumb_number():\n    assert check_monthnumb_number(1) == True\n    assert check_monthnumb_number(2) == False\n    assert check_monthnumb_number(3) == True\n    assert check_monthnumb_number(4) == False\n    assert check_monthnumb_number(5) == True\n    assert check_monthnumb_number(6) == False\n    assert check_monthnumb_number(7) == True\n    assert check_monthnumb_number(8) == False\n    assert check_monthnumb_number(9) == False\n    assert check_monthnumb_number(10) == True\n    assert check_monthnumb_number(11) == False\n    assert check_monthnumb_number(12) == True\n    assert check_monthnumb_number(13) == False\n\n#test_check_monthnumb_number()\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_number):\n    return month_number%12 in [0,3,6,8,11]\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb==1 or monthnumb==3 or monthnumb==5 or monthnumb==7 or monthnumb==8 or monthnumb==10 or monthnumb==12:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(list_of_strings):\n  new_list = []\n  for s in list_of_strings:\n    new_list.append(s[::-1])\n  return new_list\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(list_of_strings):\n    return [\"\".join(s[::-1]) for s in list_of_strings]", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(input_list):\n    result = []\n    for string in input_list:\n        result.append(string[::-1])\n    return result", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(list_str):\n    \"\"\"\n    :param list_str: list of strings\n    :return: list_str in reverse order\n    \"\"\"\n    new_list = []\n    for i in list_str:\n        new_list.append(i[::-1])\n    return new_list\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\n#1st solution\ndef reverse_string_list(strings):\n    return [s[::-1] for s in strings]\n\n#2nd solution\ndef reverse_string_list(strings):\n    return [s.reverse() for s in strings]\n\n#3rd solution\ndef reverse_string_list(strings):\n    reversed_strings = []\n    for s in strings:\n        reversed_strings.append(s[::-1])\n    return reversed_strings\n\n\n#4th solution\ndef reverse_string_list(strings):\n    return list(reversed(strings))\n\n\n# -\n\n# ### Exercise 2:\n\n# +\n#How to reverse a string?\n#There are three ways to do this in Python:\n#s.replace('a', 'b')\n#s = s[::-1]\n#s = ''.join(reversed(s))\n#Here, the second method is by far the fastest. \n#s.replace('a', 'b') is around 10x slower, and s = s[::-1] is around 100x slower.\n\ndef reverse(s):\n    return s[::-1]\n\n#assert reverse('abcdefg') == 'gfedcba'\n# -\n\n# ### Exercise 3:\n\n# +", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\nfrom typing import List\n\n\ndef reverse_string_list(strings: List[str]) -> List[str]:\n    \"\"\"\n    Reverse a list of strings.\n\n    >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n    ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    >>> reverse_string_list(['1', '2', '3', '4', '5'])\n    ['5', '4', '3', '2', '1']\n    >>> reverse_string_list(['a', 'b', 'c', 'd'])\n    ['d', 'c', 'b', 'a']\n    >>> reverse_string_list(['dog', 'cat', 'rabbit', 'horse'])\n    ['horse', 'rabbit', 'cat', 'dog']\n    \"\"\"\n\n    strings = list(strings)\n    strings.reverse()\n    return strings\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(strings):\n    string_list = []\n    for string in strings:\n        string_list.append(string[::-1])\n    return string_list\n\n\n# Check the result", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    reversed_list = []\n    for i in string_list:\n        reversed_list.append(i[::-1])\n    return reversed_list", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(list_of_strings):\n    \"\"\"\n    Reverse all strings in list.\n\n    Parameters:\n        list_of_strings: List of strings to be reversed\n\n    Returns:\n        list_of_strings: List of reversed strings\n    \"\"\"\n    reversed_strings = []\n\n    for string in list_of_strings:\n        # Reverse string using slice notation\n        reversed_string = string[::-1]\n        # Add reversed string to new list\n        reversed_strings.append(reversed_string)\n\n    return reversed_strings", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(s):\n    return [s[i:][::-1] for i in range(len(s))]\n\n#print(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(arr):\n    if not arr:\n        return None\n    min_length = len(arr[0])\n    min_list = None\n\n    for i in arr:\n        if len(i) <= min_length:\n            min_length = len(i)\n            min_list = i\n\n    return min_list\n\n\n# TEST CASES\n# print Find_Min([[1],[1,2],[1,2,3]]) == [1]\n# print Find_Min([[1,2,3,4],[1,2,4],[1,2,3,5,6]]) == [1,2,3]\n# print Find_Min([]) == None\n\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(l):\n    min_len = 10000\n    min_list = None\n    for ele in l:\n        if len(ele) < min_len:\n            min_len = len(ele)\n            min_list = ele\n    return min_list\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    min_list = lst[0]\n    for item in lst:\n        if len(item)<len(min_list):\n            min_list = item\n    return min_list\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n#METHOD1\ndef Find_Min(l):\n    res = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(len(l)):\n            if j!=i:\n                temp.append(l[j])\n        res.append(temp)\n    return(min(res,key=lambda x:len(x)))\n\n#METHOD2\ndef Find_Min(l):\n    res = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(i+1,len(l)):\n            temp.append(l[j])\n        res.append(temp)\n    return(min(res,key=lambda x:len(x)))\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(l):\n    min_len = float('inf')\n    result = []\n    for sublist in l:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            result = sublist\n    return result\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lists):\n    min_length = len(lists[0])\n    result = []\n    for i in lists:\n        if len(i) < min_length:\n            min_length = len(i)\n            result = i\n    return result\n\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(list_of_list):\n    if list_of_list == []:\n        return -1\n    for i in range(0,len(list_of_list)-1):\n        for j in range(i+1,len(list_of_list)):\n            if len(list_of_list[i])<len(list_of_list[j]):\n                list_of_list[i],list_of_list[j]=list_of_list[j],list_of_list[i]\n    return list_of_list[0]\n\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(inputList):\n    #Function to get the minimum length\n    min = len(inputList[0])\n    for i in inputList:\n        if len(i) < min:\n            min = len(i)\n    return [i for i in inputList if len(i) == min]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(arr):\n    n = len(arr)\n    index = []\n    arr = [len(item) for item in arr]\n    min = min(arr)\n    for i in range(n):\n        if min == arr[i]:\n            index.append(i)\n    return arr.index(min)\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(l):\n    global min\n    min = 999999999999\n    for i in l:\n        if len(i) < min:\n            min = len(i)\n    return [i for i in l if len(i) == min]\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    area=width*height\n    return area\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width,height):\n    return width*height\n\n\n# + id=\"UJ-T113Q8L1k\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length,width):\n    assert length>0 and width>0\n    return length*width\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width, height):\n    return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\nimport random\nimport math\n\ndef rectangle_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(w,h):\n    return w*h\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    s = re.sub(r\"[A-Z]+\", \"\", s)\n    return s\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(text):\n    \"\"\"Remove uppercase letters from a string.\n    \n    :param text: The string to remove uppercase letters from.\n    :type text: str\n    :returns: The string with uppercase letters removed.\n    :rtype: str\n    \"\"\"\n    return re.sub(r'[A-Z]', '', text)\n\n\ndef main():\n    \"\"\"Main function.\n    \n    :return: None\n    :rtype: None\n    \"\"\"\n    text = 'cAstyoUrFavoRitETVshoWs'\n    print(remove_uppercase(text))\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\ndef remove_uppercase(s):\n    \"\"\"\n    Takes in a string\n    Returns a string\n    \"\"\"\n    return re.sub(r\"[A-Z]\",\"\",s)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(text):\n    # your code here\n    return re.sub('[A-Z]+', '', text)\n\n# print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]{2,}', '', string)\n\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\ndef remove_uppercase(s):\n    return re.sub(\"[A-Z]+\", \"\", s)\n\n#Test", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(str):\n    return re.sub('[A-Z]*', '', str)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    return re.sub('[A-Z]+', '', string)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\ndef remove_uppercase(text):\n    return re.sub('[A-Z]+', '', text)", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]', lambda x: x.group(0).lower(), string)\n\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n# Write your solution here\ndef Extract(lst):\n\treturn [x[0] for x in lst]\n\n# First Solution \ndef extract(lst):\n\treturn [item[0] for item in lst]\n\n# Second Solution \ndef extract(lst):\n\treturn [x[0] for x in lst]\n\n# Third Solution\ndef extract(lst):\n\treturn list(map(lambda x: x[0], lst))\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(arr):\n    ans = []\n    for sublist in arr:\n        ans.append(sublist[0])\n    return ans\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(list):\n    return [item[0] for item in list]\n\ndef test_extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11]]) == [1, 3, 6, 10]\n    assert Extract([[], []]) == [None, None]\n    assert Extract([[], [1], [2], [3]]) == [None, 1, 2, 3]\n    print(\"All test cases passed\")\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(l):\n    return [x[0] for x in l]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(matrix):\n  \"\"\"\n  Extract the first element of each sublist from the matrix.\n\n  Args:\n    matrix (list): a 2D matrix\n\n  Returns:\n    list: a list of first elements of sublists from the matrix\n  \"\"\"\n  return [i[0] for i in matrix]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: list of first elements of sublists\n    \"\"\"\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    return [x[0] for x in lst]\n\n# Test", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    return [x[0] for x in lst]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    ret = []\n    for sublist in lst:\n        ret.append(sublist[0])\n    return ret\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(data):\n    return [x[0] for x in data]\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    ctr = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            ctr += 1\n    return ctr\n\n# assert upper_ctr('PYthon') == 1", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(word):\n    return len([c for c in word if c.isupper()])\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    return len(list(filter(lambda x: x.isupper(), string)))\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    count = 0\n    for i in s:\n        if i.isupper():\n            count += 1\n    return count\n\ndef upper_ctr2(s):\n    return len([i for i in s if i.isupper()])", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    return sum(1 for ch in string if ch.isupper())\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n\n#assert upper_ctr('python') == 0\n#assert upper_ctr('PyThOn') == 3\n\n#input\ns = 'pythOn'\n\n#output", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    return len([i for i in string if i.isupper()])\n\n\n# Another solution using the built-in function\n\ndef upper_ctr_builtin(string):\n    return sum(1 for c in string if c.isupper())", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(word):\n    \"\"\"\n    This function receives a string and counts the upper case characters\n    \"\"\"\n    count = 0\n    for letter in word:\n        if letter.isupper():\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    upper = 0\n    for ch in str:\n        if ch.isupper():\n            upper += 1\n    return upper\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(a_list):\n    if len(a_list) == 0:\n        return [[]]\n    if len(a_list) == 1:\n        return [[x] for x in a_list]\n    return combinations_list(a_list[:-1]) + [a_list[-1:] + c for c in combinations_list(a_list[:-1])]\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(l):\n    res = []\n    def helper(path, l, k):\n        if k == 0:\n            res.append(path)\n            return\n        for i in range(len(l)):\n            if k == 1:\n                helper(path+[l[i]], l, k)\n            else:\n                helper(path+[l[i]], l, k-1)\n    helper([], l, len(l))\n    return res\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\nimport itertools\n\ndef combinations_list(seq):\n    # write your code here\n    return [list(x) for x in itertools.product(*seq)]", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(alist):\n    return [tuple(e) for e in itertools.product(*alist)]", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\nfrom collections import defaultdict\n\ndef combinations_list(items):\n    results = []\n\n    def helper(i, stack):\n        if i == 0:\n            results.append(stack)\n        else:\n            for k in items[i]:\n                stack.append(k)\n                helper(i - 1, stack)\n                stack.pop()\n\n    helper(len(items) - 1, [])\n\n    return results\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst)):\n        result = result + combinations_list_inner(lst, i, [])\n    return result\n\ndef combinations_list_inner(lst, idx, result):\n    result = result + [result + [lst[idx]]]\n    for i in range(idx+1, len(lst)):\n        result = result + combinations_list_inner(lst, i, result)\n    return result", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    # Write your code here\n    if len(lst) == 1:\n        return [lst]\n    combinations = []\n    first_element = lst[0]\n    remaining_elements = combinations_list(lst[1:])\n    for remaining_element in remaining_elements:\n        combinations.append([first_element] + remaining_element)\n        combinations.append([first_element] + remaining_element)\n    return combinations", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    return [list(x) for x in list(itertools.chain.from_iterable(itertools.combinations(lst, i + 1)) for i in range(len(lst)))]\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(list):\n    if len(list) == 1:\n        return [[]]\n    return [list[0]] + combinations_list(list[1:]) + [list[0] + [x] for x in combinations_list(list[1:])]\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n#List Comprehension\ndef combinations_list(arr):\n    return [[x] + t for x in arr for t in combinations_list(arr[:i]+arr[i+1:]) if t] if arr else [[]]\n    \n#Recursive\ndef combinations_list2(arr):\n    if len(arr) == 0:\n        return [[]]\n    else:\n        results = []\n        for x in arr:\n            for rest in combinations_list2(arr[:arr.index(x)]+arr[arr.index(x)+1:]):\n                results.append([x] + rest)\n        return results\n        "], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(nums):\n    max_subarray = max_product = nums[0]\n    for i in range(1, len(nums)):\n        max_product = max(max_product * nums[i], nums[i])\n        max_subarray = max(max_subarray, max_product)\n    return max_subarray\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom collections import deque\n\n\ndef max_subarray_product(arr):\n    # Initialize the current maximum product, current subarray start index, and\n    # current subarray end index\n    max_product = 0\n    start_index = 0\n    end_index = 0\n\n    # This is a deque which allows us to use appendleft() and pop()\n    # operations in O(1) time\n    subarray_deque = deque()\n\n    # Traverse through the array\n    for i in range(len(arr)):\n        # If the current element is positive, we can multiply the current\n        # maximum product with the current element to get a new maximum\n        # product.  We can also add the current element to the deque in\n        # O(1) time\n        if arr[i] > 0:\n            max_product *= arr[i]\n            subarray_deque.appendleft(arr[i])\n\n        # If the deque is not empty, we can multiply the maximum product with\n        # the last element of the deque to get a new maximum product.  We can\n        # also remove the last element from the deque in O(1) time\n        else:\n            max_product *= subarray_deque.pop()\n\n        # Update the current maximum product, subarray start index, and\n        # subarray end index\n        if max_product > max_product:\n            max_product = max_product\n            start_index = i\n            end_index = i\n\n        # If the current element is negative, we can multiply the current\n        # maximum product with the current element to get a new maximum\n        # product.  We can also add the current element to the deque in\n        # O(1) time\n        elif arr[i] < 0:\n            max_product *= arr[i]\n            subarray_deque.appendleft(arr[i])\n\n        # If the deque is not empty, we can multiply the maximum product with\n        # the last element of the deque to get a new maximum product.  We can\n        # also remove the last element from the deque in O(1) time\n        else:\n            max_product *= subarray_deque.pop()\n\n        # Update", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(A):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_prod = max_prod_ending = A[0]\n    for i in range(1, len(A)):\n        max_prod_ending = max(max_prod_ending * A[i], A[i])\n        max_prod = max(max_prod, max_prod_ending)\n    return max_prod\n\n# Tests", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(nums):\n    \"\"\"\n    time: O(n)\n    space: O(1)\n    \"\"\"\n    cur_product = nums[0]\n    max_product = cur_product\n    for num in nums[1:]:\n        if cur_product < 0:\n            cur_product = num\n        else:\n            cur_product *= num\n        max_product = max(max_product, cur_product)\n    return max_product", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(array):\n    max_product = max_product_of_subarray(array, 0, len(array) - 1)\n    if max_product < 0:\n        return max_product\n    return -max_product\n\n\ndef max_product_of_subarray(array, left, right):\n    if left > right:\n        return 0\n    if left == right:\n        return array[left]\n\n    middle = (left + right) // 2\n\n    left_product = max_product_of_subarray(array, left, middle)\n    right_product = max_product_of_subarray(array, middle + 1, right)\n\n    left_max = array[left]\n    right_max = array[right]\n\n    middle_max = max(array[left:middle + 1])\n\n    if left_product == -float('inf') and right_product == -float('inf'):\n        return max(middle_max, left_max * right_max)\n\n    if left_product == -float('inf'):\n        return right_product\n\n    if right_product == -float('inf'):\n        return left_product\n\n    left_max *= middle_max\n    right_max *= middle_max\n\n    return max(left_max, right_max, left_product, right_product)\n\n\ndef test_max_subarray_product():\n    assert max_subarray_product([-2, 3, -2, 4]) == 12\n    assert max_subarray_product([-2, -2, 2, -2, -2, 2]) == 8\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(array):\n    max_so_far = max(array)\n    min_so_far = min(array)\n    max_product = max_so_far * min_so_far\n    current_product = 1\n    for item in array:\n        if item > 0:\n            current_product *= item\n        elif item < 0:\n            current_product *= item\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product\n\n\n# assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\ndef max_subarray_product_constant_space(array):\n    max_so_far = max(array)\n    min_so_far = min(array)\n    max_product = max_so_far * min_so_far\n    current_product = 1\n    for item in array:\n        if item > 0:\n            current_product = max(current_product * item, item)\n        elif item < 0:\n            current_product = min(current_product * item, item)\n        if current_product > max_product:\n            max_product = current_product\n    return max_product", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    current_max = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        current_max = max(arr[i], arr[i] * current_max)\n        max_so_far = max(max_so_far, current_max)\n\n    return max_so_far", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(A):\n    global max_product\n    max_product = A[0]\n    max_left = 1\n    for i in range(1, len(A)):\n        if A[i] < 0:\n            if max_left > 1:\n                max_product = max(A[i], max_product)\n            max_left = 1\n        else:\n            max_left = max(max_left, A[i])\n            max_product = max(A[i], max_product * max_left)\n    return max_product\n\n\nA = [1, -2, -3, 0, 7, -8, -2]", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(nums):\n    if len(nums) == 0:\n        return 0\n\n    max_prod = max(nums)\n    min_prod = min(nums)\n    max_prod_subarray = max_prod\n    for num in nums:\n        if num >= 0:\n            max_prod_subarray *= num\n            max_prod = max(max_prod_subarray, max_prod)\n        else:\n            max_prod_subarray = max(max_prod_subarray, min_prod * num)\n            min_prod = min(min_prod, num)\n    return max_prod_subarray\n\ndef max_subarray_product_2(nums):\n    max_prod = min_prod = max(nums)\n    for num in nums:\n        if num >= 0:\n            max_prod *= num\n            min_prod = min(min_prod, num)\n        else:\n            min_prod *= num\n            max_prod = max(max_prod, num)\n    return max_prod\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\n\n\ndef max_subarray_product(nums: List[int]) -> int:\n    global_max = local_max = nums[0]\n    for x in nums[1:]:\n        if x < 0:\n            local_max = max(local_max * x, x)\n        else:\n            local_max = max(local_max * x, global_max)\n        global_max = max(global_max, local_max)\n    return global_max\n\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\n#%%\ndef check_value(dictionary,value):\n    if len(dictionary.values())!=len(set(dictionary.values())):\n        return False\n    for val in dictionary.values():\n        if value!=val:\n            return False\n    return True", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dict, value):\n    if len(dict)==0:\n        return True\n    return all(val == value for val in dict.values())\n\n\n# +\n#Test Cases\n\ntest = {\n    'Cierra Vega': 12, \n    'Alden Cantrell': 12, \n    'Kierra Gentry': 12, \n    'Pierre Cox': 12\n}", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d, v):\n    if len(d) == 0:\n        return False\n    elif len(d) == 1:\n        return v == d.values()[0]\n    else:\n        return v == d.values()[0] and check_value(dict(d.items()[1:]), v)\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dict, value):\n    #fill in\n    if value not in dict.values():\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary, value):\n    if len(dictionary) > 1:\n        return value != list(dictionary.values())[0]\n    else:\n        return value\n\ndef check_value2(dictionary, value):\n    if len(dictionary) > 1:\n        return value != list(dictionary.values())[0]\n    else:\n        return value\n\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dict, value):\n    for key in dict:\n        if dict[key]!=value:\n            return False\n    return True\n    ", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,value):\n    return all(d[x] == value for x in d)\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dict, value):\n    for key, value in dict.items():\n        if value != value:\n            return False\n    return True\n\n# Write a function to determine whether a string is a palindrome.\n\ndef is_palindrome(str):\n    str = str.lower().strip()\n    for i in range(len(str)):\n        if i == len(str) - 1:\n            if str[i] != str[0]:\n                return False\n        else:\n            if str[i] != str[len(str) - 1 - i]:\n                return False\n    return True\n\n# Write a function to reverse a string.\n\ndef reverse_str(str):\n    return str[::-1]", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary, value):\n    for name, score in dictionary.items():\n        if value != score:\n            return False\n    return True\n    \n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    for k,v in dictionary.items():\n        if v != value:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    new_d = {}\n    for k, v in d.items():\n        if v != None:\n            new_d[k] = v\n    return new_d\n\n# Sample Outputs", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {key: value for key, value in d.items() if value != None}\n\n# Write a function to check if the two given dictionaries are equal or not.\n# assert are_equals({'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}) == True\n# assert are_equals({'a':1, 'b':2, 'c':3}, {'a':1, 'b':2}) == False\ndef are_equals(d1, d2):\n    return d1 == d2\n\n# Write a function to count the number of duplicate items in a given list.\n# assert count_duplicates(['a', 'a', 'b', 'b', 'c', 'c']) == 2\ndef count_duplicates(lst):\n    return len(set(lst)) - len(lst)\n\n# Write a function to check if the given input is a valid phone number.\n# assert is_valid_phone('6567587678') == True\n# assert is_valid_phone('5858689987') == False\n# assert is_valid_phone('5858689987') == False\n# assert is_valid_phone('4545454545') == False\n# assert is_valid_phone('5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    for k,v in list(d.items()):\n        if v is None:\n            del d[k]\n    return d\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    \"\"\"\n    Args:\n        d (dict): a dictionary that can contain empty values\n    Returns:\n        a dictionary with the empty values removed\n    \"\"\"\n    # loop through the dictionary and drop the empty values\n    # using the .items() method to preserve the key order\n    new_dict = {k:v for k,v in d.items() if v != None}\n    return new_dict\n\n\ndef test_drop_empty():\n    \"\"\"Test the drop_empty function.\"\"\"\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert drop_empty({})=={}\n    assert drop_empty(None)=={}\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dictionary):\n    new_dictionary = {k: v for (k, v) in dictionary.items() if v}\n    return new_dictionary\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    keys = []\n    for key in d:\n        if d[key] is not None:\n            keys.append(key)\n    new_dict = {}\n    for key in keys:\n        new_dict[key] = d[key]\n    return new_dict\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n# TODO: Write your code here\ndef drop_empty(d):\n    d = dict(d)\n    l = []\n    for key in d:\n        if d[key] != None:\n            l.append(key)\n    return {l[i]:d[l[i]] for i in range(len(l))}", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(data):\n    return {k: v for k, v in data.items() if v is not None}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(obj):\n    if obj:\n        return obj\n    else:\n        return obj\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    new_d = {}\n    for key in d:\n        if d[key] != None:\n            new_d[key] = d[key]\n    return new_d\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(numbers, target):\n    \"\"\"Return the index of the peak in the given array.\"\"\"\n    # TODO: your code here\n    # There is no peak if the target is larger than the highest element\n    # Otherwise, we know that the peak must be at the first position,\n    # since otherwise we could compare to a larger element.\n    if target >= numbers[-1]:\n        return -1\n\n    if numbers[0] == target:\n        return 0\n    # O(n)\n    for i in range(1, len(numbers)):\n        if numbers[i] > numbers[i - 1]:\n            return i\n    return -1\n\n\ndef main():\n    \"\"\"Read input and print output.\"\"\"\n    # target = 6\n    # numbers = [1, 3, 20, 4, 1, 0]\n    numbers = [1, 2, 3, 4]\n    target = 2\n    # target = 100\n    print(find_peak(numbers, target))\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(array, target_num):\n    if array[0] == target_num:\n        return 0\n    if array[-1] == target_num:\n        return len(array) - 1\n    \n    left, right = 0, len(array) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if array[mid] > target_num:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(array, element):\n    if not array:\n        return None\n    start = 0\n    end = len(array) - 1\n    middle = (start + end) // 2\n    while element != array[middle]:\n        if element > array[middle]:\n            start = middle + 1\n        else:\n            end = middle\n        middle = (start + end) // 2\n    return array[middle]", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    l = 0\n    r = n - 1\n    while(l <= r):\n        mid = (l + r) // 2\n        if arr[mid] > arr[mid + 1]:\n            return mid\n        if arr[mid] < arr[mid - 1]:\n            return mid - 1\n        if arr[mid] >= arr[l] and arr[mid] >= arr[r]:\n            return mid\n        if arr[mid] < arr[l] and arr[mid] >= arr[r]:\n            return r\n        if arr[mid] >= arr[l] and arr[mid] < arr[r]:\n            return l\n        l += 1\n        r -= 1", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# returns the position of the peak, where A[i] < A[i+1] and A[i] > A[i-1]\ndef find_peak(A, n):\n    i = 0\n    j = n - 1\n\n    while i < j:\n        m = i + (j - i) / 2\n        if A[m] > A[m+1] and A[m] < A[m-1]:\n            return m\n        elif A[m] < A[m+1]:\n            j = m\n        else:\n            i = m + 1\n\n    return -1\n\n\ndef test_peak():\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n    assert find_peak([1, 3, 20, 4, 1, 0], 1) == 0\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: integer\n    :return: index of peak element\n    \"\"\"\n    max_so_far = arr[0]\n    max_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_so_far:\n            max_index = i\n            max_so_far = arr[i]\n\n    for i in range(1, n):\n        if arr[max_index - i] > max_so_far:\n            max_so_far = arr[max_index - i]\n            max_index = max_index - i\n\n    return max_index\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\nimport pytest\n\n\ndef find_peak(array, number):\n    \"\"\"Return the index of the element in the array that has the closest value\n    to number.\n\n    >>> find_peak([1, 3, 20, 4, 1, 0], 6)\n    2\n    >>> find_peak([1, 3, 20, 4, 1, 0], 2)\n    4\n    >>> find_peak([1, 3, 20, 4, 1, 0], 1)\n    3\n    >>> find_peak([1, 3, 20, 4, 1, 0], 0)\n    5\n    \"\"\"\n    return find_peak_rec(array, number, 0, len(array) - 1)\n\n\ndef find_peak_rec(array, number, left, right):\n    \"\"\"Return the index of the element in the array that has the closest value\n    to number.\n\n    >>> find_peak_rec([1, 3, 20, 4, 1, 0], 6, 0, len(array) - 1)\n    2\n    >>> find_peak_rec([1, 3, 20, 4, 1, 0], 2, 0, len(array) - 1)\n    4\n    >>> find_peak_rec([1, 3, 20, 4, 1, 0], 1, 0, len(array) - 1)\n    3\n    >>> find_peak_rec([1, 3, 20, 4, 1, 0], 0, 0, len(array) - 1)\n    5\n    \"\"\"\n    if left == right:\n        return left\n    mid = (left + right) // 2\n    if number - array[mid] > array[left] - number:\n        return find_peak_rec(array, number, left, mid)\n    else:\n        return find_peak_rec(array, number, mid, right)\n\n\ndef test_find_peak():\n    assert", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(a, x):\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    low, high = 0, len(a) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n\n    return high\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\n# My solution\ndef find_peak(array, n):\n    last_index = 0\n    current_index = 1\n    while current_index < n:\n        if array[current_index] > array[last_index]:\n            last_index = current_index\n        current_index += 1\n    return last_index\n\n# Alternative solution\ndef find_peak(array, n):\n    last_index = 0\n    current_index = 1\n    while current_index < n:\n        if array[current_index] > array[last_index]:\n            last_index = current_index\n        current_index += 1\n    return array[last_index]\n\n# Test\narray = [1, 3, 20, 4, 1, 0]", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, target):\n    current = 0\n    for i in range(0, len(arr)):\n        if arr[current] < target:\n            current = i + 1\n        elif arr[current] > target:\n            return current - 1\n    return current - 1\n\n\n#assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\ndef main():\n    arr = [1, 3, 20, 4, 1, 0]\n    target = 6\n    print(find_peak(arr, target))\n\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(x):\n    if x<0:\n        raise ValueError('negative value is not allowed')\n    octal_value=0\n    while x:\n        y=x%8\n        octal_value=octal_value*8+y\n        x=x//8\n    return octal_value\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(dec_num):\n\toctal_num = 0\n\twhile dec_num != 0:\n\t\toctal_num *= 8\n\t\toctal_num += dec_num % 8\n\t\tdec_num /= 8\n\treturn octal_num\n\n# assert decimal_to_Octal(10) == 12", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(number):\n    \"\"\"Function to convert decimal number to octal number.\n    :param number: Number to be converted.\n    :type number: int.\n    :returns: Octal number of the given decimal number.\n    :rtype: int.\n    \"\"\"\n    octal_number = ''\n    if number < 0:\n        number *= -1\n    while number != 0:\n        octal_number += str(number % 8)\n        number //= 8\n    return int(octal_number[::-1])\n\n# Test cases:", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(number):\n    # your code here\n    return number\n\n\n# ## Given a string s, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n#\n# ### Example 1:\n#\n# ```\n# Input: \"Let's take LeetCode contest\"\n# Output: \"s'teL ekat edoCteeL tsetnoc\"\n# ```\n# ### Note:\n# - In the string, each word is separated by single space and there will not be any extra space in the string.\n\n# +\n# Write a python function to reverse order of characters in each word while still preserving whitespace and initial word order.\n\ndef reverseWords(string):\n    # your code here\n    return string\n    \n\n\n# +\n# Write a python function to print all permutations of a string.\n\ndef permutation(string):\n    # your code here\n    return string\n    \npermutation('abc')\n# -", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    \"\"\"\n    Parameters\n    ----------\n    num: int\n        Number to be converted into Octal number\n\n    Returns\n    -------\n    int\n        Octal number of num\n    \"\"\"\n    octal_num = \"\"\n    while num != 0:\n        octal_num = str(num % 8) + octal_num\n        num //= 8\n    return int(octal_num)\n\n#Below is an example usage:\n\nimport math\n\ndef decimal_to_Octal(num):\n    \"\"\"\n    Parameters\n    ----------\n    num: int\n        Number to be converted into Octal number\n\n    Returns\n    -------\n    int\n        Octal number of num\n    \"\"\"\n    octal_num = \"\"\n    while num != 0:\n        octal_num = str(num % 8) + octal_num\n        num //= 8\n    return int(octal_num)\n\n# Enter the number\nnum = 10\n\n# Calling the function", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(dec):\n    dec = int(dec)\n    if dec < 0:\n        return \"Invalid input\"\n    octal = []\n    while dec > 0:\n        octal.append(str(dec%8))\n        dec = int(dec/8)\n    octal.reverse()\n    octal = ''.join(octal)\n    return octal\n\n\n# -\n\n# Test Cases\ndecimal_to_Octal(10)\n\n\n# ## **Question 2:**\n\n# +", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimal_number):\n    octal_number = \"\"\n    temp_number = decimal_number\n    while temp_number > 0:\n        remainder = temp_number % 8\n        octal_number = str(remainder) + octal_number\n        temp_number = temp_number // 8\n    return octal_number", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(number):\n\toctal = \"\"\n\twhile(number != 0):\n\t\toctal += str(number % 8)\n\t\tnumber /= 8\n\treturn int(octal)\n\n# Test Cases", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\nfrom typing import List\n\n\ndef decimal_to_Octal(dec: int) -> int:\n    \"\"\"\n    Algorithm:\n    Start with the number and keep on dividing it by 8, until it gets 0.\n    Add the remainder to the octal number\n\n    Args:\n        dec (int): The input number\n\n    Returns:\n        int: The output octal number\n    \"\"\"\n    res = 0\n    while dec != 0:\n        res = res * 8 + dec % 8\n        dec = dec // 8\n    return res\n\n\ndef decimal_to_Octal2(dec: int) -> int:\n    \"\"\"\n    Algorithm:\n    Start with the number and keep on dividing it by 8, until it gets 0.\n    Add the remainder to the octal number\n\n    Args:\n        dec (int): The input number\n\n    Returns:\n        int: The output octal number\n    \"\"\"\n    res = 0\n    while dec:\n        res = res * 8 + dec % 8\n        dec = dec // 8\n    return res\n\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(nums, length):\n    max_p = 1\n    for i in range(length):\n        for j in range(i+1, length):\n            max_p = max(max_p, nums[i] * nums[j])\n    return max_p\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(array, n):\n    res = 0\n    i = 0\n    while i < n:\n        res = max(res, array[i] * array[i + 1] * array[i + 2] * array[i + 3] * array[i + 4])\n        i += 1\n    return res\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, k):\n    arr.sort()\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], arr[i] * dp[j])\n    return max(dp[k-1] * dp[k-2] * dp[k-3]) if k >= 3 else dp[-1]\n\n\ndef main():\n    print(max_product([3, 100, 4, 5, 150, 6], 6))\n\n\nmain()", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    prod = arr[0]\n    last_product = arr[0]\n    for i in range(1, n):\n        if arr[i] > prod:\n            last_product = prod\n            prod = arr[i]\n        elif arr[i] < prod:\n            last_product = arr[i]\n        else:\n            last_product = arr[i]\n    return last_product * prod\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    max_prod = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            max_prod = max(max_prod, prod)\n    return max_prod\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, size):\n    max_product = -sys.maxint-1\n    for i in range(size):\n        for j in range(i+1, size):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0]*arr[1], arr[1]*arr[0])\n    else:\n        maximum = max(arr[0], arr[1])\n        minimum = min(arr[0], arr[1])\n        for i in range(2,n):\n            temp = max(arr[i]*maximum, arr[i]*minimum, arr[i])\n            maximum = maximum if maximum >= temp else temp\n            minimum = minimum if minimum <= temp else temp\n        return maximum\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\n# Recursive solution\ndef max_product(array, n):\n    return find_max(array, 0, n - 1)\n\ndef find_max(array, start, end):\n    if start > end:\n        return 0\n\n    max_product = 0\n    for i in range(start, end + 1):\n        max_product = max(max_product, array[i] * find_max(array, start, i - 1))\n\n    return max_product\n\n# Iterative solution\ndef max_product_iter(array, n):\n    maximum_product = 0\n    for i in range(n):\n        maximum_product = max(maximum_product, array[i] * max_product_iter(array, i))\n\n    return maximum_product\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(A, n):\n    A.sort()\n    max_prod = A[n-1]\n    for i in range(0,n):\n        max_prod = max(max_prod,A[i]*A[n-1-i])\n    return max_prod\n\n# This is just to test the algorithm", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(array, n):\n    if n < 2:\n        return array[0]\n    max_product = float('-inf')\n    for i in xrange(n):\n        max_product = max(max_product, array[i] * max_product)\n        max_product = max(max_product, array[i] * max_product_2(array, i+1, n))\n    return max_product\n\ndef max_product_2(array, start, end):\n    if end - start == 1:\n        return array[start]\n    max_product = float('-inf')\n    for i in xrange(start, end):\n        max_product = max(max_product, array[i] * max_product_2(array, start, i))\n        max_product = max(max_product, array[i] * max_product_2(array, i, end))\n    return max_product\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if k < 1:\n        return 0\n    if k == 1:\n        return max(0, -prices[0])\n    transactions = 0\n    profit = 0\n    max_profit_without_transaction = 0\n    max_profit_after_transaction = 0\n    for i in range(1, len(prices)):\n        max_profit_without_transaction = max(max_profit_without_transaction, profit)\n        max_profit_after_transaction = max(max_profit_after_transaction, max_profit_without_transaction + prices[i])\n        profit = max(profit, prices[i] - max_profit_after_transaction)\n    return max_profit_without_transaction", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nfrom typing import List\n\n\ndef max_profit(prices: List[int], k: int) -> int:\n    \"\"\"\n    :param prices: List[int]\n    :param k: int\n    :return: int\n    \"\"\"\n    n = len(prices)\n    if n <= 2 * k:\n        return sum(prices) - k * prices[0]\n\n    low = prices[:k]\n    high = prices[-k:]\n    dp = [max(high[0] - low[0], low[i] - low[i - 1], low[i] - high[i - 1]) for i in range(1, k + 1)]\n    for i in range(k, n - k + 1):\n        dp.append(max(dp[i - k] + prices[i + k] - prices[i], dp[i - k - 1] + prices[i + k - 1] - prices[i - 1],\n                      dp[i - k - 2] + prices[i + k - 2] - prices[i - 2]))\n    return max(dp)\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    # write your code here\n    if len(prices) <= 1:\n        return 0\n\n    profit = 0\n    min_price = prices[0]\n    for i in range(1, k):\n        if prices[i] < min_price:\n            min_price = prices[i]\n    for i in range(k, len(prices)):\n        if prices[i] - min_price > profit:\n            profit = prices[i] - min_price\n    return profit\n\nprices = [1, 5, 2, 3, 7, 6, 4, 5]", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices,k):\n    if k>len(prices):\n        return 0\n    maxprofit =0\n    n=len(prices)\n    for i in range(k):\n        for j in range(i+1,n):\n            #print(prices[i:j+1])\n            maxprofit=max(maxprofit,prices[j]-prices[i])\n    return maxprofit\n\n#print(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3))", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(arr, k):\n    # Write your code here.\n    n = len(arr)\n    if n < 2: return 0\n    max_profit = 0\n    for i in range(n):\n        max_profit += arr[i]\n        min_price = arr[i]\n        for j in range(i + 1, i + k):\n            min_price = min(min_price, arr[j])\n            max_profit = max(max_profit, arr[j] - min_price)\n    return max_profit", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    prices = sorted(prices, reverse=True)\n    max_profit = 0\n    start = 0\n    end = 1\n    while end < k:\n        max_profit += prices[end] - prices[start]\n        start += 1\n        end += 1\n    max_profit += prices[end] - prices[start]\n\n    return max_profit\n\n\ndef test_max_profit():\n    assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nimport math\ndef max_profit(prices, k):\n    k = k-1\n    if len(prices) == 1:\n        return 0\n    if len(prices) == 2:\n        if k < 1:\n            return prices[1]-prices[0]\n        if k == 1:\n            return max(prices[1]-prices[0], prices[2]-prices[1])\n        return max(prices[2]-prices[1], prices[3]-prices[2])\n    if len(prices) == 3:\n        if k < 2:\n            return max(prices[1]-prices[0], prices[2]-prices[1])\n        return max(prices[2]-prices[1], max(prices[3]-prices[2], max(prices[4]-prices[3], prices[5]-prices[4])))\n    if len(prices) == 4:\n        if k < 3:\n            return max(prices[2]-prices[1], max(prices[3]-prices[2], prices[4]-prices[3]))\n        return max(prices[3]-prices[2], max(prices[4]-prices[3], prices[5]-prices[4]))\n    if len(prices) == 5:\n        if k < 4:\n            return max(prices[3]-prices[2], prices[4]-prices[3])\n        return max(prices[4]-prices[3], prices[5]-prices[4])\n    max_profit = float(\"-inf\")\n    for i in range(k, len(prices)-1):\n        min_price = min(prices[i-k:i+1])\n        max_profit = max(prices[i]-min_price, max_profit)\n    return max_profit\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    '''\n    :param prices: List of integers\n    :param k: Number of transactions allowed\n    :return: Maximum profit earned from a maximum of k stock transactions\n    '''\n    profit = 0\n    buy = []\n    for i in range(len(prices)):\n        if i == 0 or prices[i] > prices[i-1]:\n            profit += prices[i]\n        else:\n            if len(buy) < k or prices[i] > prices[buy[-1]]:\n                buy.append(i)\n    return profit\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if k == 0: return 0\n    if k == 1: return max(prices)\n    profits = [0 for i in range(len(prices))]\n    for i in range(1, len(prices)):\n        for j in range(i-k+1, i):\n            if prices[i] > prices[j]:\n                profits[i] = max(profits[i], prices[i] - prices[j] + profits[j])\n    return max(profits)\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n  profit = 0\n  # left  = prices[0]\n  right = prices[-1]\n  # for i in xrange(1, len(prices)):\n  #   left = max(left, prices[i])\n  #   # print left\n  for i in xrange(len(prices)-k+1):\n    # if i == 0:\n    #   right = prices[i+k-1]\n    # else:\n    #   right = max(right, prices[i+k-1])\n    # print right\n    profit += max(right - prices[i], 0)\n\n  return profit\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuple_list):\n    new_list = list()\n    for i in range(len(tuple_list)-1):\n        new_list.append(tuple_list[i][0]+tuple_list[i+1][0])\n    return new_list", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuple):\n    result = ()\n    for i in range(len(tuple) - 1):\n        result += (tuple[i] + tuple[i + 1],)\n    return result\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(numbers):\n    return tuple(a+b for a, b in zip(numbers, numbers[1:]))\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple_list):\n    return [sum(item) for item in zip(*tuple_list)]", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(lst):\n    pass\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\nimport pytest\n\n\ndef add_pairwise(tup):\n    \"\"\"\n    Adding all pairs in the tuple\n\n    Args:\n        tup (tuple): tuple to be added\n\n    Returns:\n        tuple: tuple with all pairs added\n    \"\"\"\n\n    new_list = [tup[0]]\n    for i in range(1, len(tup)):\n        new_list.append(tup[i] + new_list[i - 1])\n    return tuple(new_list)\n\n\n@pytest.mark.parametrize(\n    \"tup,expected\",\n    [\n        ([1, 5, 7, 8, 10], (6, 12, 15, 18)),\n        ([10, 5, 7, 8, 10], (26, 15, 19, 22, 30)),\n        ([1, 1, 1, 1], (2, 3, 4, 5)),\n        ([0, 0, 0, 0], (0,)),\n        ([1, 1, 1, 1, 1], (2, 3, 4, 5, 6)),\n        ([100, 101, 102, 103, 104], (411, 415, 419, 423, 427)),\n        ([1, 5, 9, 13, 17], (6, 15, 27, 41, 57)),\n    ],\n)\ndef test_add_pairwise(tup, expected):\n    assert add_pairwise(tup) == expected", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return [total - num for num in nums]\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(nums):\n    res = []\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            res.append(nums[i] + nums[j])\n    return res\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuples):\n    return [sum(pair) for pair in zip(*tuples)]\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(lst):\n    res = list()\n    for i in lst:\n        for j in lst:\n            if i != j:\n                res.append(i + j)\n    return res\n\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n,k):\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i] * arr[i]\n    return result % n + k % n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n# Function to find remainder\ndef find_remainder(arr, n, p):\n  return arr[p-1]*arr[p-2]*arr[p-3]*arr[p-4]*arr[p-5]*arr[p-6] % n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,k):\n    count = 0\n    ans = 0\n    for i in range(len(arr)):\n        ans += (arr[i]*k)%n\n        count+=1\n    return ans\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, m):\n    return sum(arr[i] * arr[i] for i in range(len(arr))) % n == m\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(nums,n):\n    return (reduce(lambda x,y: x*y,nums)%n)", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, k):\n    if k == 1:\n        return sum(arr) % n\n    else:\n        first = k\n        second = n\n        sum_array = []\n        for i in range(first):\n            sum_array.append(arr[i])\n\n        for i in range(first, len(arr)):\n            sum_array.append(arr[i] + sum_array[i - first])\n        sum_array = sum_array[0: second]\n        print(sum_array)\n        return sum(sum_array) % n\n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,m):\n\ti = 0\n\trem = 0\n\twhile(i<len(arr)):\n\t\trem += (arr[i]*m)\n\t\trem %= n\n\t\ti+=1\n\treturn rem\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, x):\n    res = 0\n    for a in arr:\n        res = res + a * n\n        n = n + 1\n    return res - x * res\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(array,n,x):\n    sum = 0\n    for i in array:\n        sum = (i*x)%n\n    return sum\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(array, n, product):\n    return product - (array * n) % n\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(arr):\n    arr.sort()\n    for i in range(0, len(arr)):\n        if (arr[i] != i + 1):\n            return False\n    return True\n\n\ndef test_check_Consecutive():\n    assert check_Consecutive([1,2,3,4,5]) == True\n    assert check_Consecutive([1,2,3,4,7]) == False\n    assert check_Consecutive([1,4,3,4,7]) == False\n    assert check_Consecutive([0,1,3,4,7]) == False\n    assert check_Consecutive([3,4,3,4,7]) == False\n    assert check_Consecutive([3,5,4,4,7]) == False\n    assert check_Consecutive([3,5,4,4,10]) == True", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n#Difficulty Level: Easy\n\n\ndef check_Consecutive(list1):\n    for i in range(len(list1)-1):\n        if list1[i]+1 != list1[i+1]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(nums):\n    start = nums[0]\n    for num in nums[1:]:\n        if num == start+1:\n            start = num\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(numbers):\n    return list(map(lambda x:numbers.index(x) == numbers.index(x+1), numbers))\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(numbers):\n    for i in range(len(numbers)-1):\n        if numbers[i+1]-numbers[i] != 1:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(numbers):\n    current_number = numbers[0]\n    for number in numbers[1:]:\n        if number-current_number != 1:\n            return False\n        current_number = number\n    return True\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    for i in range(0,len(lst)):\n        if i+1 < len(lst) and lst[i+1] == lst[i]+1:\n            continue\n        else:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(arr):\n    for i in range(len(arr)):\n        if i > 0:\n            if arr[i] - arr[i-1] != 1:\n                return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(list):\n    for i in range(len(list)):\n        if list[i] - list[i-1] != 1:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(numbers):\n    counter = 1\n    for num in numbers:\n        if counter != num:\n            return False\n        counter += 1\n    return True\n\ndef check_Consecutive(numbers):\n    if len(numbers) <= 1:\n        return True\n    return numbers[1] - numbers[0] == numbers[2] - numbers[1]\n\ndef check_Consecutive(numbers):\n    diff = numbers[1:] - numbers[:-1]\n    return len(diff) == len(set(diff))\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tuple_list1, tuple_list2):\n    return tuple(filter(lambda x: x in tuple_list2, tuple_list1))\n\n\n# Testing Code", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tup_list1, tup_list2):\n    # create dict to store tuple instances\n    # key = tuple instance, value = list of tuple instances\n    tup_dict = {}\n\n    for tup in tup_list1:\n        if tup not in tup_dict:\n            tup_dict[tup] = []\n        tup_dict[tup].append(tup)\n\n    for tup in tup_list2:\n        if tup not in tup_dict:\n            tup_dict[tup] = []\n        tup_dict[tup].append(tup)\n\n    # if any of the values is empty, remove the key\n    tup_intersection = set()\n    for tup in tup_dict:\n        if len(tup_dict[tup]) > 1:\n            tup_intersection.add(tup)\n\n    return tup_intersection\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuples, other_tuples):\n    # Your code goes here\n    intersection = set(tuples[0])\n    for tuple_ in tuples:\n        intersection = intersection.intersection(tuple_)\n    return tuple(intersection)\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list1, list2):\n    return set(list1).intersection(set(list2))\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tup1, tup2):\n    result = set(tup1) & set(tup2)\n    return list(result)\n\n#assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(list1,list2):\n    intersection_list = []\n    for el in list1:\n        if el in list2:\n            intersection_list.append(el)\n    return intersection_list\n\n# assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuples, match):\n    pass\n\n#\n# Test Cases\n#\n\n# None, None", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list1, tuple_list2):\n    tuple_set1 = set(tuple_list1)\n    tuple_set2 = set(tuple_list2)\n    return tuple_set1 & tuple_set2", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list1, list2):\n    result = set()\n    for element in list1:\n        if element in list2:\n            result.add(element)\n    return result", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\nfrom collections import defaultdict\n\ndef tuple_intersection(lst, lst1):\n    def intersection(tup1, tup2):\n        return set(tup1).intersection(set(tup2))\n    result = []\n    d = defaultdict(list)\n    for tup in lst:\n        for i in range(len(tup)):\n            d[i].append(tup[i])\n    for k in d:\n        result.append(intersection(d[k], lst1))\n    return tuple(result)\n\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, char_to_replace, char_to_replace_with):\n    new_string = \"\"\n    for char in string:\n        if char == char_to_replace:\n            new_string += char_to_replace_with\n        else:\n            new_string += char\n    return new_string\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string,old,new):\n    new_str=\"\"\n    for i in range(len(string)):\n        if string[i]==old:\n            new_str+=new\n        else:\n            new_str+=string[i]\n    return new_str", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,old,new):\n    return string.replace(old,new)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, old, new):\n    return string.replace(old, new)\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(st, char, replace_char):\n    return st.replace(char, replace_char)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, char, replace_char):\n    \"\"\"\n    :param string: a string\n    :param char: char to replace\n    :param replace_char: char to replace with\n    :return: string with char replaced with replace_char\n    \"\"\"\n    return string.replace(char, replace_char)", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(s,c,r):\n    \"\"\"\n    :param s: string\n    :param c: character\n    :param r: replacement character\n    :return: replaced string\n    \"\"\"\n    r_s = ''\n    for char in s:\n        if char == c:\n            r_s += r\n        else:\n            r_s += char\n    return r_s\n\n#assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(str, replace_this, replace_with):\n    for i in range(len(str)):\n        if str[i] == replace_this:\n            str = str[:i]+replace_with+str[i+1:]\n    return str\n\ndef main():\n    test_cases = [\n        [\"polygon\",'y','l'],\n        [\"hello\",'o','l'],\n        [\"python\",'t','x']\n    ]\n    for s, r, t in test_cases:\n        print(replace_char(s, r, t))\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, char_to_replace, new_char):\n    \"\"\"\n    :param string: a string to replace char\n    :param char_to_replace: char to replace\n    :param new_char: the new char to replace with\n    :return: a string with replaced char\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char != char_to_replace:\n            new_string = new_string + char\n        else:\n            new_string = new_string + new_char\n    return new_string\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str, char, replace_char):\n    return str.replace(char,replace_char)\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1])\n\n# print(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    print(list(reversed(sorted(counter.items(), key=lambda x: x[1]))))\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    counter_sorted = list(counter.items())\n    counter_sorted = sorted(counter_sorted, key=lambda x:x[1])\n    return counter_sorted\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(my_dict):\n    return sorted(my_dict.items(), key = lambda x: x[1], reverse=True)\n\ndef sort_counter_by_key(my_dict):\n    return sorted(my_dict.items(), key = lambda x: x[0])\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    \"\"\"Takes a dictionary of key-value pairs and returns a list of tuple sorted by value of counter\"\"\"\n    counter_sorted = sorted(counter.items(), key=lambda kv: kv[1], reverse=True)\n    return counter_sorted\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return list(sorted(counter.items(), key=lambda kv: kv[1]))\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\nimport json\nfrom collections import Counter\n\ndef sort_counter(d):\n    return sorted(Counter(d).items(), key=lambda t: t[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    s_counter = sorted(counter.items(), key = lambda x: x[1])\n    return s_counter"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(list):\n    return max(list) + min(list)\n\n\ndef big_sum2(list):\n    max = list[0]\n    min = list[0]\n    for i in list:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max + min\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\nimport pytest\n\ndef big_sum(array):\n    # Your Code Here\n    return min(array) + max(array)\n\n\ndef test_big_sum():\n    assert big_sum([1,2,3]) == 4\n    assert big_sum([1,2]) == 3\n    assert big_sum([0,0,0,0,0,0]) == 0\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(a):\n    a.sort()\n    return a[-1] + a[0]\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(array):\n    sum = 0\n    if len(array) == 0:\n        return sum\n    else:\n        min_value = min(array)\n        max_value = max(array)\n        sum = max_value + min_value\n    return sum", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(lst):\n    return max(lst) + min(lst)\n\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return sum(max(arr), min(arr))\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\nfrom random import randint\n\ndef big_sum(arr):\n  return max(arr) + min(arr)\n\n\ndef test_function(test_case):\n  arr = test_case[0]\n  solution = test_case[1]\n  output = big_sum(arr)\n  print(\"input: {}\".format(arr))\n  print(\"output: {}\".format(output))\n  print(\"expected output: {}\".format(solution))\n  assert output == solution\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n# This is the only solution I could think of, but this is slow\n# because it does a sort, and then a search for the max/min\n# def big_sum(array):\n#     array.sort()\n#     return array[-1] + array[0]\n\n# This solution is slightly faster\ndef big_sum(array):\n    return max(array) + min(array)\n\n# This solution is even faster\ndef big_sum(array):\n    return sum(sorted(array)) - max(array)\n\n# This solution is even faster\ndef big_sum(array):\n    return sum(sorted(array)) - (sorted(array) - array)\n\n# This solution is the fastest\ndef big_sum(array):\n    return sum(sorted(array)) - sorted(array)", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return arr.sort(reverse=True)\n    # return max(arr)+min(arr)\n\n\n# +\narr = [1, 2, 3, 4]\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n# +\ndef is_lower(str):\n    return str.islower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(x):\n    return x.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str1):\n    return str1.lower()", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.islower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(st):\n    \"\"\"\n    >>> is_lower('InValid')\n    'invalid'\n    \"\"\"\n    return st.lower()\n\n\ndef test():\n    assert is_lower(\"InValid\") == \"invalid\"\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(string):\n    \"\"\"\n    :param string: the string to convert to lower case\n    :return: the lower case version of the string\n    \"\"\"\n    return string.lower()\n\n\ndef test_is_lower():\n    assert is_lower(\"INValid\") == \"invalid\"\n    assert is_lower(\"INValid\") == \"invalid\"\n    assert is_lower(\"valid\") == \"valid\"\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str):\n    str = str.lower()\n    return str\n\n# Enter the string\nstr = \"InValid\"\n\n# Calling the function", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(str):\n    return str.lower()\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    return ''.join(c for c in string if c.isupper())\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(st):\n    if st == '':\n        return st\n    list_str = list(st)\n    flag = False\n    i = 0\n    j = 0\n    for i in range(len(list_str)):\n        if list_str[i] == ' ' or list_str[i].isupper():\n            if flag:\n                del list_str[j]\n            j = i+1\n            flag = False\n        elif list_str[i].islower():\n            flag = True\n    return ''.join(list_str)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(str):\n    \"\"\"\n    This function removes all lowercase substrings in a given string and returns the new string.\n    \"\"\"\n    no_lowercase = ''\n    for char in str:\n        if char.isupper():\n            no_lowercase += char\n    return no_lowercase\n\n\n# write your function here\n\n# print(remove_lowercase(\"python\"))", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    # write your code here\n    s = s.upper()\n    s = ''.join([x if x.isupper() else '' for x in s])\n    return s\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    str = \"\"\n    for i in s:\n        if (i.isupper()):\n            str += i\n    return str\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    return ''.join(filter(lambda char: char.isupper(), string))\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(word):\n    return ''.join(c for c in word if c.isupper())\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    pass\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(str):\n    return ''.join(i for i in str if not i.islower())\n\ndef test_remove_lowercase():\n    assert remove_lowercase(\"PYTHon\")==('PYTH')\n    assert remove_lowercase(\"Python\")==('Python')\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    '''\n    Input: string\n    Output: string\n    '''\n    if string:\n        s = \"\"\n        for i in string:\n            if i.isupper():\n                s += i\n            else:\n                continue\n        return s\n    else:\n        return \"Empty String\"\n\n# +\n# Test code\n\n# assert remove_lowercase(\"PYTHon\")==('PYTH')\n# assert remove_lowercase(\"pYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTH\")==('PYTH')\n# assert remove_lowercase(\"PYTHo\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('PYTH')\n# assert remove_lowercase(\"PYTHoN\")==('"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    return number % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n# Write your code here\n\ndef first_Digit(n):\n    return n%10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    return str(n)[0]\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    # 111 = 1*100 + 1*10 + 1*1\n    return num % 10\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    return int(str(n)[0])\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n\treturn int(num/10)\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n#Solution\ndef first_Digit(number):\n    temp = str(number)\n    return int(temp[0])", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    return n % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    return str(num)[0]\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n  return num % 10\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    max_occuring_char = string[0]\n    occurring_count = 1\n    for i in range(1, len(string)):\n        if string[i] == max_occuring_char:\n            occurring_count += 1\n        else:\n            if occurring_count < occurring_count:\n                max_occuring_char = string[i]\n                occurring_count = 1\n    return max_occuring_char\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    result = {}\n    for char in string:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    max_count = 0\n    max_char = None\n    for char in result:\n        if result[char] > max_count:\n            max_char = char\n            max_count = result[char]\n    return max_char\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(s):\n    char_freq = {}\n\n    for char in s:\n        char_freq[char] = char_freq.get(char, 0) + 1\n\n    max_occuring_char = None\n    max_occurance = 0\n\n    for char, occurance in char_freq.items():\n        if occurance > max_occurance:\n            max_occurance = occurance\n            max_occuring_char = char\n\n    return max_occuring_char\n\n# Test cases:", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\n# def get_max_occuring_char(string):\n#     freq_dict = {}\n#     for c in string:\n#         if c in freq_dict:\n#             freq_dict[c] += 1\n#         else:\n#             freq_dict[c] = 1\n#     max_freq = 0\n#     for k in freq_dict:\n#         if freq_dict[k] > max_freq:\n#             max_freq = freq_dict[k]\n#             max_char = k\n#     return max_char\n\ndef get_max_occuring_char(string):\n    max_count = 0\n    max_char = None\n    for c in string:\n        count = string.count(c)\n        if count > max_count:\n            max_count = count\n            max_char = c\n    return max_char\n\n\n# def get_max_occuring_char(string):\n#     return max(set(string), key=string.count)\n\n# def get_max_occuring_char(string):\n#     max_count = 0\n#     max_char = None\n#     for c in string:\n#         if string.count(c) > max_count:\n#             max_count = string.count(c)\n#             max_char = c\n#     return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] = char_count[char] + 1\n    max_occur_char = \"\"\n    max_occur_count = 0\n    for char, count in char_count.items():\n        if count > max_occur_count:\n            max_occur_count = count\n            max_occur_char = char\n    return max_occur_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(s):\n    char_occurs = {}\n    for i in s:\n        if i in char_occurs:\n            char_occurs[i] += 1\n        else:\n            char_occurs[i] = 1\n    return max(char_occurs.items(), key=operator.itemgetter(1))[0]", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    d = {}\n    for ch in string:\n        if ch in d:\n            d[ch] += 1\n        else:\n            d[ch] = 1\n    max_count = 0\n    max_char = None\n    for ch, count in d.items():\n        if count > max_count:\n            max_count = count\n            max_char = ch\n    return max_char\n\n#assert get_max_occuring_char(\"data\") == \"a\"\n#assert get_max_occuring_char(\"qwertyu\") == \"y\"\n#assert get_max_occuring_char(\"python\") == \"o\"", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    counts = {}\n    for char in string:\n        counts[char] = counts.get(char,0)+1\n    return max(counts,key=lambda x:counts[x])\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    \"\"\"\n    In case of empty string, return None.\n    In case of single character string, return the character.\n    In case of multi-character string, find the maximum occurring character.\n    \"\"\"\n    if string == \"\":\n        return None\n    elif len(string) == 1:\n        return string[0]\n    else:\n        char_counts = {}\n        for char in string:\n            if char not in char_counts:\n                char_counts[char] = 1\n            else:\n                char_counts[char] += 1\n        return max(char_counts, key=char_counts.get)\n\n\ndef get_max_occuring_char_v2(string):\n    \"\"\"\n    In case of empty string, return None.\n    In case of single character string, return the character.\n    In case of multi-character string, find the maximum occurring character.\n    \"\"\"\n    if string == \"\":\n        return None\n    elif len(string) == 1:\n        return string[0]\n    else:\n        # return max(string, key=string.count)\n        return max(string, key=string.count)\n\n\ndef get_max_occuring_char_v3(string):\n    \"\"\"\n    In case of empty string, return None.\n    In case of single character string, return the character.\n    In case of multi-character string, find the maximum occurring character.\n    \"\"\"\n    if string == \"\":\n        return None\n    elif len(string) == 1:\n        return string[0]\n    else:\n        return max(string, key=lambda char: string.count(char))\n\n# Testing", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n    a = str.split()\n    b = []\n    for i in a:\n        b.append(i[0])\n    counter = {}\n    for i in b:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    return max(counter, key=lambda x: counter[x])\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(nums, targetSum):\n\t# create a dictionary to keep track of elements seen\n\tseen = dict()\n\t# iterate through the given numbers\n\tfor n in nums:\n\t\t# check if this is the first element seen\n\t\tif n not in seen:\n\t\t\t# store this element in the dictionary\n\t\t\tseen[n] = 1\n\t\t\t# check if the target sum can be made with this element\n\t\t\tif targetSum - n >= 0:\n\t\t\t\t# recursively call this function with the target sum\n\t\t\t\t# reduced by the current element\n\t\t\t\tif is_subset_sum(nums, targetSum - n):\n\t\t\t\t\treturn True\n\t\telse:\n\t\t\t# update the counter for this element\n\t\t\tseen[n] += 1\n\t# return true if a subset of the given numbers adds up to the given sum\n\treturn False\n\n# tests", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(nums, sum_, target):\n    for i, n in enumerate(nums):\n        nums[i] = -n\n        # print(nums)\n    # print(nums)\n    return subset_sum(nums, sum_, target, 0)\n\ndef subset_sum(nums, sum_, target, start):\n    # if len(nums) == 0:\n    #     return False\n    # if sum_ == target:\n    #     return True\n    # if sum_ > target:\n    #     return False\n    # print(nums)\n    if start >= len(nums) or sum_ < 0:\n        return False\n    if sum_ == target:\n        return True\n    if sum_ > target:\n        return subset_sum(nums, sum_, target, start + 1)\n    return subset_sum(nums, sum_ + nums[start], target, start + 1) or subset_sum(nums, sum_, target, start + 1)\n\n# print(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9))\n\ndef is_subset_sum_brute(nums, sum_, target):\n    return True if brute_check(nums, sum_, target, 0, []) else False\n\ndef brute_check(nums, sum_, target, start, curr_sum):\n    if sum_ == target:\n        return True\n    if sum_ > target:\n        return False\n    if len(curr_sum) >= len(nums):\n        return False\n    if start >= len(nums):\n        return False\n    if curr_sum[len(curr_sum) - 1] == sum_ - nums[start]:\n        return brute_check(nums, sum_, target, start + 1, curr_sum)\n    return brute_check(nums, sum_, target, start + 1, curr_sum + [sum_ - nums[start]])\n\n# print(is_subset_sum_brute([3, 34, ", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(arr, sum, subset):\n    if sum == 0:\n        return True\n    if sum < 0 or len(arr) == 0:\n        return False\n    for i in range(len(arr)):\n        if arr[i] <= subset and is_subset_sum(arr, sum - arr[i], subset):\n            return True\n    return False\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\n#solution\ndef is_subset_sum(arr, n, s):\n    \"\"\"\n    :param arr: int list\n    :param n: int\n    :param s: int\n    :return: bool\n    \"\"\"\n    # {element: set index}\n    elements = {item: i for i, item in enumerate(arr)}\n    if s == 0:\n        return True\n    # subset sum DP table\n    subset_sum = [False] * (n + 1)\n    subset_sum[0] = True\n    # populate the subset sum table\n    for i in range(1, n + 1):\n        for j in range(0, i):\n            if subset_sum[j] and subset_sum[i - j - 1] and s - arr[elements[i]] == arr[elements[j]]:\n                subset_sum[i] = True\n                break\n    return subset_sum[n]\n\n# test\n# assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n# assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 10) == False\n# assert is_subset_sum([3, 34, 4, 12, 5, 2], 3, 10) == True", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(set_numbers, set_sum, target_sum):\n\n    \"\"\"\n    The is_subset_sum function recursively checks each element of the set to see if it is equal to the target sum.\n    If it is, the function returns true. If not, it checks if there is a subset of the given set with sum equal to the\n    given sum. If there is, the function returns true. If not, it returns false.\n    \"\"\"\n\n    # Find the total number of elements in the set\n    set_size = len(set_numbers)\n\n    # Check if the sum is equal to the target sum\n    if set_sum == target_sum:\n        return True\n\n    # Check if there is a subset of the given set with sum equal to the given sum\n    else:\n\n        # Check each element of the set\n        for i in range(set_size):\n\n            # Check if the current element is equal to the target sum\n            if set_numbers[i] == target_sum:\n                # Check if there is a subset of the given set with sum equal to the given sum\n                if is_subset_sum(set_numbers, set_sum + set_numbers[i], target_sum):\n                    return True\n\n        # Return false if there is no subset of the given set with sum equal to the given sum\n        return False\n\n\n# Tests", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, sum, target):\n    \"\"\"\n    Check if there is a subset of the given set with sum equal to the given sum.\n\n    Args:\n        nums: (List) input set\n        sum: (int) given sum\n        target: (int) sum of subset\n\n    Returns:\n        (bool) if there is a subset with sum equal to target\n    \"\"\"\n    # Base case\n    if len(nums) == 0:\n        return False\n\n    # If the current number is equal to the target, return True\n    if target == nums[0]:\n        return True\n\n    # If the current number is greater than the target, return False\n    elif target < nums[0]:\n        return False\n\n    # Recursive call on the remaining set\n    return is_subset_sum(nums[1:], sum, target - nums[0])\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, sum, subset):\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if subset == []:\n        return False\n    elif nums[subset[0]] <= sum:\n        return is_subset_sum(nums, sum-nums[subset[0]], subset[1:])\n    return is_subset_sum(nums, sum, subset[1:])\n\ndef is_subset_sum2(nums, sum, subset):\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if subset == []:\n        return False\n    for i in range(len(nums)):\n        if nums[subset[0]] <= sum:\n            if is_subset_sum2(nums, sum-nums[subset[0]], subset[1:]):\n                return True\n    return False\n\ndef is_subset_sum3(nums, sum, subset):\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if subset == []:\n        return False\n    for i in range(len(nums)):\n        if nums[subset[0]] <= sum:\n            if is_subset_sum3(nums, sum-nums[subset[0]], subset[1:], nums[subset[0]]):\n                return True\n    return False\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(set, sum, target):\n    \"\"\"\n    Determines if a subset of the given set with sum equal to target exists\n    \"\"\"\n    if target == 0:\n        return True\n    if target < 0 or not set or sum == 0:\n        return False\n    if set[0] <= sum:\n        return is_subset_sum(set[1:], sum - set[0], target)\n    return is_subset_sum(set[1:], sum, target)\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, target):\n    subset_sum = {}\n    for i in range(len(arr)):\n        if arr[i] in subset_sum:\n            subset_sum[arr[i]] += 1\n        else:\n            subset_sum[arr[i]] = 1\n    for item in subset_sum:\n        if sum-item in subset_sum and subset_sum[item] > 0 and subset_sum[sum-item] > 0:\n            subset_sum[item] -= 1\n            subset_sum[sum-item] -= 1\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(numbers, sum, target):\n    for index, number in enumerate(numbers):\n        remainder = sum - number\n        if remainder in numbers[index+1:]:\n            return True\n    return False\n\n# Test Cases"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\n\ndef match(str):\n    pattern = re.compile(r'[A-Z]+[a-z]+')\n    return 'Yes' if re.search(pattern, str) else 'No'\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\n\ndef match(s):\n    regex = re.compile(r'[A-Z][a-z]+')\n    res = regex.findall(s)\n    if res != []:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\ndef match(s):\n    return \"Yes\" if re.search(r'[A-Z]\\.[a-z]+', s) else \"No\"\n\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        s = input()\n        print(match(s))\n\n\nmain()", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    match_pattern = r'([A-Z])\\s[a-z]+'\n    pattern = re.compile(match_pattern)\n    return 'Yes' if pattern.findall(string) else 'No'", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(string):\n    match = re.findall(r'[A-Z][a-z]*',string)\n    if match:\n        return 'Yes'\n    return 'No'\n\nmatch(\"Geeks\")\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(text):\n    matchObj = re.match('[A-Z][a-z]*', text, flags=re.I)\n    if matchObj:\n        return 'Yes'\n    else:\n        return 'No'\n\n# test case\nmatch(\"Geeks\")", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(string):\n    pattern = '([A-Z][a-z]+)'\n    matches = re.findall(pattern, string)\n    return 'Yes' if matches else 'No'", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n# Using RE\ndef match(str):\n    import re\n    return \"Yes\" if re.match(r\"^[A-Z]\\w+$\", str) else \"No\"\n\n# Using RE2\ndef match2(str):\n    import re\n    return \"Yes\" if re.match(r\"^[A-Z]\\w*$\", str) else \"No\"\n\n# Using RE3\ndef match3(str):\n    import re\n    return \"Yes\" if re.match(r\"^[A-Z]\\w+[a-z]$\", str) else \"No\"", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(str):\n    return 'Yes' if re.findall(r'[A-Z]\\w+\\w+', str) else 'No'\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(s):\n    if re.match('.*[A-Z].*[a-z].*', s):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(num):\n    for i in range(1, num + 1):\n        if (factorial(i) % num == 0):\n            return i\n\n# Test Cases", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(x):\n        if (i == 0) or (i == 1) or (i == 2):\n            continue\n        if i % 6 == 0:\n            continue\n        if i % 10 == 0:\n            continue\n        if i % 15 == 0:\n            continue\n        if i % 20 == 0:\n            continue\n        if i % 25 == 0:\n            continue\n        if i % 30 == 0:\n            continue\n        if i % 35 == 0:\n            continue\n        if i % 40 == 0:\n            continue\n        if i % 45 == 0:\n            continue\n        if i % 50 == 0:\n            continue\n        if i % 55 == 0:\n            continue\n        if i % 60 == 0:\n            continue\n        if i % 65 == 0:\n            continue\n        if i % 70 == 0:\n            continue\n        if i % 75 == 0:\n            continue\n        if i % 80 == 0:\n            continue\n        if i % 85 == 0:\n            continue\n        if i % 90 == 0:\n            continue\n        if i % 95 == 0:\n            continue\n        if i % 100 == 0:\n            continue\n        if i % 105 == 0:\n            continue\n        if i % 110 == 0:\n            continue\n        if i % 115 == 0:\n            continue\n        if i % 120 == 0:\n            continue\n        if i % 125 == 0:\n            continue\n        if i % 130 == 0:\n            continue\n        if i % 135 == 0:\n            continue\n        if i % 140 == 0:\n            continue\n        if i % 145 == 0:\n            continue\n        if i % 150 == 0:\n            continue\n        if i % 155 == 0:\n            continue\n        if i % 160 == ", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    number = 1\n    while number < 1000000:\n        if number % x == 0:\n            return number\n        number += 1\n    return number\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,200):\n        if i==1:\n            continue\n        if i%x == 0 and (i//x)%x==0:\n            return i\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    a = 1\n    while a < x:\n        a = a + 1\n        if a == x:\n            break\n        if (a * a * a) % x == 0:\n            return a\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x):\n        if x % i == 0 and i!=1:\n            return i\n    return i\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    # return first natural number whose factorial is divisible by x\n    for i in range(1, x+1):\n        if (factorial(i) % x == 0):\n            return i\n\n# write your code here\n\ndef factorial(n):\n    # return n!\n    if (n == 0):\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nfirst_Factorial_Divisible_Number(10) == 5\n\ndef first_Factorial_Divisible_Number(x):\n    # return first natural number whose factorial is divisible by x\n    for i in range(1, x+1):\n        if (factorial(i) % x == 0):\n            return i\n\n# write your code here\n\ndef factorial(n):\n    # return n!\n    if (n == 0):\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nfirst_Factorial_Divisible_Number(10) == 5", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    def is_Factorial_divisible_by(n):\n        \"\"\"\n        Returns True if the factorial of n is divisible by x\n        \"\"\"\n        if n < 0:\n            return False\n\n        fac = 1\n        for i in range(1, n+1):\n            fac = fac * i\n\n        if fac % x == 0:\n            return True\n        else:\n            return False\n\n    for i in range(1, 10**7):\n        if is_Factorial_divisible_by(i):\n            return i\n\n    return -1\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    curr_num = 1\n    for i in range(1, x+1):\n        curr_num *= i\n    return curr_num\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(n):\n    counter = 1\n    while True:\n        if(n % counter == 0):\n            return counter\n        else:\n            counter += 1\n            \n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tup1, tup2):\n    return [val for val in tup1 if not any(tup2[i][0] == val[0] and tup2[i][1] == val[1] for i in range(len(tup2)))]\n\ndef test_remove_matching_tuple():\n    assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuples, matching_tuples):\n    pass\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n\tt1 = set(t1)\n\tt2 = set(t2)\n\treturn list(t1 - t2)\n\ndef test_remove_matching_tuple():\n\tassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\tassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are'), ('you', '?')]) == []\n\tassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('you', '?')]) == [('Hello', 'dude'), ('How', 'are')]\n\tassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('you', '?')]) == [('How', 'are')]\n\tassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('Hello', 'dude')]) == [('How', 'are'), ('you', '?')]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    for i in range(len(t1)):\n        if t1[i][0] == t2[i][0] and t1[i][1] == t2[i][1]:\n            t1.pop(i)\n            break\n    return t1\n\n# assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    t1 = tuple(t1)\n    t2 = tuple(t2)\n    return list(filter(lambda x: x not in t2, t1))\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(t1, t2):\n    return [tuple for tuple in t1 if tuple not in t2]\n\nt1 = [('Hello', 'dude'), ('How', 'are'), ('you', '?')]\nt2 = [('Hello', 'dude'), ('How', 'are')]", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(t1, t2):\n    return [x for x in t1 if x not in t2]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# Write your code here\ndef remove_matching_tuple(tuple1, tuple2):\n    return tuple([tup for tup in tuple1 if tup not in tuple2])\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuples1, tuples2):\n    return [(x[0], x[1]) for x in tuples1 if (x[0], x[1]) not in tuples2]\n\n\n# %%\n# This solution can be written as:\ndef remove_matching_tuple(tuples1, tuples2):\n    return list(filter(lambda x: x[0] != x[0], tuples1))\n\n\n# %%\n# Testing\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuple1, tuple2):\n    final = []\n    for t1 in tuple1:\n        for t2 in tuple2:\n            if t1 == t2:\n                tuple2.remove(t2)\n        final.append(t1)\n    return final\n\n\n# +\ntuple1 = [('Hello', 'dude'), ('How', 'are'), ('you', '?')]\ntuple2 = [('Hello', 'dude'), ('How', 'are')]\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(nums, length):\n    \"\"\"\n    nums is an array of integers\n    length is an integer, the length of the array nums\n    \"\"\"\n    nums = sorted(nums)\n    largest = 0\n    for i in range(length):\n        for j in range(i, length):\n            if largest > nums[i] * nums[j]:\n                break\n            if largest < nums[i] * nums[j]:\n                largest = nums[i] * nums[j]\n    return largest\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(numbers, len_array):\n    \"\"\"\n    :type numbers: List[int]\n    :type len_array: int\n    :rtype: int\n    \"\"\"\n    l_numbers = len(numbers)\n    for i in range(l_numbers-1, -1, -1):\n        numbers[i] = str(numbers[i])\n    for i in range(1, len_array+1):\n        for j in range(len_array-i):\n            p_number = int(\"\".join(numbers[j:j+i]))\n            if p_number > largest_palindrome and is_palindrome(p_number):\n                largest_palindrome = p_number\n    return largest_palindrome\n\ndef is_palindrome(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    str_num = str(num)\n    if len(str_num) == 1:\n        return True\n    else:\n        str_num = str_num[::-1]\n        return str_num == str_num\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr,n):\n    mx = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            prod = arr[i]*arr[j]\n            s = str(prod)\n            if(s[::-1]==s):\n                if(prod>mx):\n                    mx = prod\n    return mx", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\n# from math import sqrt\n\n\ndef largest_palindrome(num_arr, k):\n    temp_arr = sorted(num_arr)\n    res = 0\n    for i in range(k, len(num_arr)):\n        for j in range(i - k, i):\n            prod = temp_arr[j] * temp_arr[i]\n            if is_palindrome(prod):\n                res = max(res, prod)\n    return res\n\n\ndef is_palindrome(num):\n    string_num = str(num)\n    for i in range(0, len(string_num) // 2):\n        if string_num[i] != string_num[-i - 1]:\n            return False\n    return True", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    max_palindrome = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            value = 10**(i+j)\n            product = 1\n            while value <= arr[i] * arr[j]:\n                product *= value\n                value += 1\n            if product > max_palindrome:\n                max_palindrome = product\n    return max_palindrome\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\nimport functools\n\ndef largest_palindrome(numbers, n):\n    \"\"\"\n    numbers: list of integers\n    n: the number of numbers\n    return: integer\n    \"\"\"\n    if n == 1:\n        return numbers[0]\n\n    for i in range(n - 1, 0, -1):\n        for j in range(0, i):\n            num = numbers[i] * 10 + numbers[j]\n            if num > 0:\n                break\n            elif num > 99:\n                continue\n            elif num == num[::-1]:\n                return num\n\n    return 0\n\nnumbers = [1, 232, 54545, 999991]\nn = len(numbers)", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(nums, k):\n    \"\"\"\n    :param nums: List[int]\n    :param k: int\n    :return: int\n    \"\"\"\n    def check(num):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            return num\n        else:\n            return False\n\n    # find the largest number with length k\n    l_num = max(nums)\n    if len(str(l_num)) != k:\n        return 0\n    l_num_str = str(l_num)\n\n    # find the smallest number with length k\n    s_num = min(nums)\n    if len(str(s_num)) != k:\n        return 0\n    s_num_str = str(s_num)\n\n    # for each num in the range, check if it is a palindrome\n    max_palindrome = 0\n    for i in range(int(s_num), int(l_num) + 1):\n        # skip if the number is not a palindrome\n        if not check(i):\n            continue\n\n        # skip if the number is less than the largest number\n        if int(l_num_str) < int(str(i)):\n            continue\n\n        # skip if the number is greater than the smallest number\n        if int(s_num_str) > int(str(i)):\n            continue\n\n        # skip if the number is already a palindrome\n        if i == int(str(i)[::-1]):\n            continue\n\n        max_palindrome = i\n\n    return max_palindrome", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    if n == 0:\n        return 0\n    start, end = 0, n-1\n    max_palindrome = -1\n    while start < end:\n        product = arr[start] * arr[end]\n        if product > max_palindrome and is_palindrome(product):\n            max_palindrome = product\n        if product % 10 == 0:\n            start += 1\n        else:\n            end -= 1\n    return max_palindrome\n\n\ndef is_palindrome(num):\n    if num < 10:\n        return True\n    reverse = 0\n    while num > reverse:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\nfrom helpers import *\n\n\ndef largest_palindrome(arr, length):\n    \"\"\"\n    :type arr: List[int]\n    :type length: int\n    :rtype: int\n    \"\"\"\n    largest = arr[0]\n    for i in range(1, length):\n        for j in range(i + 1, length):\n            product = arr[i] * arr[j]\n            if str(product) == str(product)[::-1]:\n                if product > largest:\n                    largest = product\n    return largest\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(num, len_num):\n    \"\"\"\n    :param num: array of integers\n    :param len_num: length of array\n    :return: largest palindromic number in array\n    \"\"\"\n    def palindrome(num):\n        \"\"\"\n        :param num: integer\n        :return: True or False\n        \"\"\"\n        if num < 10:\n            return True\n        else:\n            return False\n\n    def largest_palindrome_helper(num, len_num, largest_palindrome_product):\n        \"\"\"\n        :param num: array of integers\n        :param len_num: length of array\n        :param largest_palindrome_product: int variable\n        :return: int variable\n        \"\"\"\n        for i in range(len_num):\n            for j in range(len_num):\n                if palindrome(num[i] * num[j]) and len_num <= largest_palindrome_product:\n                    largest_palindrome_product = len_num\n                elif palindrome(num[i] * num[j]) and len_num > largest_palindrome_product:\n                    largest_palindrome_product = num[i] * num[j]\n        return largest_palindrome_product\n\n    if len_num == 1:\n        return num[0]\n    else:\n        return largest_palindrome_helper(num, len_num, 0)"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    This function computes probability of having k successes in n experiments,\n    where probability of success in each experiment is p.\n    Parameters\n    ----------\n    n : int\n        number of experiments\n    k : int\n        number of successes\n    p : float\n        probability of success\n\n    Returns\n    -------\n    float\n        probability of k successes in n experiments\n\n    Examples\n    --------\n    >>> binomial_probability(10, 5, 1.0/3)\n    0.13656454808718185\n    \"\"\"\n    prob = 0\n    for j in range(0, n):\n        prob += p**k * (1-p)**(n-k)\n    return prob", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nfrom math import factorial, exp\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    >>> binomial_probability(10, 5, 1.0/3)\n    0.13656454808718185\n    >>> binomial_probability(10, 5, 0.3)\n    0.3515625\n    >>> binomial_probability(10, 5, 0.1)\n    0.04458374565674075\n    >>> binomial_probability(10, 5, 0.01)\n    0.0003657585495921737\n    \"\"\"\n    return factorial(n)/(factorial(k)*factorial(n-k))*pow(p,k)*pow((1-p), n-k)\n\n\ndef test_binomial_probability():\n    assert binomial_probability(10, 5, 0.3) == 0.3515625\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(10, 5, 0.1) == 0.04458374565674075\n    assert binomial_probability(10, 5, 0.01) == 0.0003657585495921737\n\ndef test_binomial_probability2():\n    assert binomial_probability(10, 1, 0.3) == 0.3\n    assert binomial_probability(10, 1, 0.1) == 0.1\n    assert binomial_probability(10, 1, 0.01) == 0.01\n\ndef", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(N, k, p):\n    \"\"\"\n    Input:\n        N = number of trials\n        k = number of successes\n        p = probability of success\n    \"\"\"\n    return math.factorial(N)/(math.factorial(N-k)*math.factorial(k))*p**k*(1.0-p)**(N-k)\n\ndef test_binomial_probability():\n    \"\"\"\n    Test binomial_probability\n    \"\"\"\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\ndef main():\n    \"\"\"\n    main\n    \"\"\"\n    print(\"Binomial probability\")\n    test_binomial_probability()\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    probability = math.factorial(n) / (math.factorial(k) * math.factorial(n-k)) * (p ** k) * ((1-p) ** (n-k))\n    return probability\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nimport math\nfrom copy import deepcopy\n\ndef binomial_probability(number, trials, success_probability):\n    \"\"\"\n    number - number of trials\n    trials - number of success\n    success_probability - probability of success for a trial\n    return - binomial probability\n    \"\"\"\n    return math.pow(success_probability, trials) * math.pow(1 - success_probability, number - trials)\n\ndef binomial_probabilities(number, trials, success_probability):\n    \"\"\"\n    number - number of trials\n    trials - number of success\n    success_probability - probability of success for a trial\n    return - list of binomial probabilities\n    \"\"\"\n    probabilities = []\n    for i in range(trials + 1):\n        probability = binomial_probability(number, trials, success_probability)\n        probabilities.append(probability)\n\n    return probabilities\n\ndef binomial_probability_distribution(number, trials, success_probability):\n    \"\"\"\n    number - number of trials\n    trials - number of success\n    success_probability - probability of success for a trial\n    return - a list of tuples with (probability, trial_number)\n    \"\"\"\n    probabilities = binomial_probabilities(number, trials, success_probability)\n    distribution = []\n    for i in range(len(probabilities)):\n        probability = probabilities[i]\n        trial_number = i + 1\n        distribution.append((probability, trial_number))\n\n    return distribution\n\ndef binomial_cumulative_distribution(number, trials, success_probability):\n    \"\"\"\n    number - number of trials\n    trials - number of success\n    success_probability - probability of success for a trial\n    return - a list of tuples with (cumulative probability, trial_number)\n    \"\"\"\n    cumulative_probability = 0\n    distribution = binomial_probability_distribution(number, trials, success_probability)\n    for probability in distribution:\n        cumulative_probability += probability[0]\n        yield probability[0], probability[1]\n\ndef binomial_probability_per_trial(number, trials, success_probability):\n    \"\"\"\n    number - number of trials\n    trials - number of success\n    success_probability - probability of success for a", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\n# binomial_probability(k: int, n: int, p: float) -> float:\n\nimport math\n\ndef binomial_probability(k: int, n: int, p: float) -> float:\n    \"\"\"\n    Write a function to compute binomial probability for the given number.\n    :param k: number of successes\n    :param n: number of trials\n    :param p: probability of success\n    :return: probability of k successes in n trials with probability p\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must be greater than or equal to 0.\")\n    if k > n:\n        raise ValueError(\"k must be less than or equal to n.\")\n    if p < 0 or p > 1:\n        raise ValueError(\"p must be between 0 and 1.\")\n\n    return math.factorial(n) / math.factorial(k) / math.factorial(n - k) * p**k * (1-p)**(n-k)", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    :param n: int, number of trials\n    :param k: int, number of successes\n    :param p: float, probability of success\n    :return: float, binomial probability\n    \"\"\"\n    assert n >= k and p >= 0 and p <= 1\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p**k * (1 - p)**(n - k)\n\ndef test():\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(1000000, 500000, 1.0/3) == 0.014149844166672244\n    assert binomial_probability(1000000, 500000, 1.0/1000000) == 0.000012889762291486533\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nfrom math import factorial\n\ndef binomial_probability(total_number, select_number, p):\n    \"\"\"\n    Compute probability of getting select_number successes in total_number independent trials,\n    each with probability of p of success.\n    \"\"\"\n    # TODO: Implement me\n    return 1 - factorial(total_number) * (1 - p)**select_number * (1 - (1 - p))**(total_number - select_number)", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    assert isinstance(n, int) and n >= 0\n    assert isinstance(k, int) and k >= 0 and k <= n\n    assert isinstance(p, float) and 0 <= p <= 1\n\n    def probability(m):\n        # return the probability of having m heads in n flips.\n        if m < 0:\n            return 0\n        return binomial_coefficient(n, m) * p**m * (1-p)**(n-m)\n\n    return sum(probability(m) for m in xrange(k, n+1))\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nimport math\n\n\ndef binomial_probability(n, k, p):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p**k * (1 - p)**(n - k)\n\n\ndef test_binomial_probability():\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\n\ndef binomial_probability_with_random_number():\n    import random\n    for i in range(10):\n        n, k, p = [random.randint(1, 100) for i in range(3)]\n        assert abs(binomial_probability(n, k, p) -\n                   binomial_probability_with_random_number(n, k, p)) < 0.001\n\n\ndef test_binomial_probability_with_random_number():\n    import random\n    for i in range(10):\n        n, k, p = [random.randint(1, 100) for i in range(3)]\n        assert abs(binomial_probability(n, k, p) -\n                   binomial_probability_with_random_number(n, k, p)) < 0.001"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\nimport pytest\n\ndef sort_tuple(tup):\n  result = []\n  tup.sort(key=lambda x: x[1])\n  for i in tup:\n    result.append(i)\n  return result\n\ndef test_sort_tuple():\n  assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\ndef test_sort_tuple_with_sorting():\n  assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(my_tuples):\n    return sorted(my_tuples, key=lambda x: x[1])\n\n# test case\nmy_tuples = [(1, 3), (3, 2), (2, 1)]", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(lst):\n    return sorted(lst, key = lambda x: x[-1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    if len(tuples) < 2:\n        return tuples\n\n    # sort last element in tuples in increasing order\n    tuples.sort(key = lambda x: x[1])\n\n    # sort first element in tuples in increasing order\n    tuples.sort(key = lambda x: x[0])\n\n    return tuples\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(data):\n    \"\"\"\n    Sorts a list of tuples in increasing order by the last element in each tuple.\n    Returns a list of tuples.\n    \"\"\"\n    data = sorted(data, key = lambda tuple: tuple[1])\n    return data\n\n#Uncomment the below line to test your code\n#data = [(1, 3), (3, 2), (2, 1)]\n#print(sort_tuple(data))\n\n#################################\n# QUESTION 3                    #\n#################################", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\n# for item in ['c', 'a', 'b', 'e', 'd']:\n#     print(item)\n#     print(item.isalpha())\n#     print(item.isdigit())\n#     print(item.isalnum())\n\n\n# print(4 * 'd')\n\n\n# \u9898\u76ee\uff1a\n# \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5305\u542b\u975e\u7a7a\u5355\u8bcd\u5217\u8868\u7684\u5b57\u5178 wordDict\uff0c\u5224\u5b9a\u00a0s \u662f\u5426\u53ef\u4ee5\u88ab\u7a7a\u683c\u62c6\u5206\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002\n#\n# \u8bf4\u660e\uff1a\n# \u62c6\u5206\u65f6\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002\n# \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u5178\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5355\u8bcd\u3002\n#\n# \u793a\u4f8b 1\uff1a\n# \u8f93\u5165: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n# \u8f93\u51fa: true\n# \u89e3\u91ca: \u8fd4\u56de true \u56e0\u4e3a \"leetcode\" \u53ef\u4ee5\u88ab\u62c6\u5206\u6210 \"leet code\"\u3002\n\n# \u89e3\u9898\u601d\u8def\uff1a\n# \u8fed\u4ee3\u4e2d\u6dfb\u52a0\u4e00\u4e2awhile\u5faa\u73af\uff0c\u6765\u5224\u65ad\u662f\u5426\u6709\u91cd\u590d\u7684\u5b57\u6bcd\n# \u5de6\u53f3\u6307\u9488\uff0c\u5de6\u6307\u9488\u4ece\u5934\u90e8\u5f00\u59cb\uff0c\u53f3\u6307\u9488\u4ece\u5c3e\u90e8\u5f00\u59cb\n# \u8fed\u4ee3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u5de6\u6307\u9488\u53f3\u8fb9\u7684\u5355\u8bcd\u5df2\u7ecf\u5728\u5b57\u5178\u4e2d\u5b58\u5728\uff0c\u5c31\u5c06\u53f3\u6307\u9488\u6307\u5411\u7684\u5355\u8bcd\u5220\u9664\uff0c\u5e76\u5728\u5de6\u6307\u9488\u540e\u9762\u518d\u52a0\u5165\uff0c\n# \u540c\u65f6\u5de6\u6307\u9488\u53f3\u8fb9\u7684\u5355\u8bcd\u4e5f\u5220\u9664\uff0c\u4ee5\u514d\u91cd\u590d\u52a0\u5165\n\n# \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff0cn\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u8fed\u4ee3\u4e24\u6b21\u3002\u6bcf\u6b21\u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u56e0\u4e3a\u9700\u8981\u5224\u65ads\u4e2d\u662f\u5426\u5b58\u5728\n# \u5b57\u5178\u4e2d\u7684\u5355\u8bcd\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u9700\u8981\u548c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e00\u6837\u7684\u6b21\u6570\u3002\n# \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u53ea\u9700\u8981\u5e38\u6570\u7684\u5185\u5b58\u7a7a\u95f4\u3002\n# 2019\u5e743\u670823\u65e5 11\u70b956\u5206 \u7531\u962e\u4e00\u5cf0\u521b\u4f5c", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    tuples.sort(key=lambda tuple: tuple[1])\n    return tuples\n\ntuples = [(1, 3), (3, 2), (2, 1)]", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuple_list):\n    return tuple(sorted(tuple_list, key = lambda x: x[-1]))\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(list_tuple):\n    # Write your code here\n    list_tuple.sort(key=lambda x: x[1], reverse = True)\n    return list_tuple"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nfrom math import cos, sin, radians\n\n\ndef area_pentagon(n):\n    \"\"\"\n    Returns the area of a pentagon given the number of sides.\n    :param n: (int) the number of sides\n    :return: (float) the area\n    \"\"\"\n    area = n * ((5 - 2 * cos(radians(72))) * sin(radians(72)) / 2)\n    return round(area, 12)\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    n = int(n)\n    a = (n**2)*(5/2)\n    return a\n\n#TEST CASES", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\n#tests = [\n#    (5, 43.01193501472417),\n#    (8, 91.84165796998057),\n#    (3, 12.565512152001622)\n#]\n\n\ndef area_pentagon(n):\n    if n%2 != 0:\n        return \"n must be an even number\"\n    if n <= 1:\n        return \"n must be greater than 1\"\n    \n    return (1/2)*n*(n**2-1)", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side):\n    \"\"\"\n    Calculates the area of a pentagon.\n\n    :param side: The side of a pentagon\n    :type side: float\n    :return: The area of a pentagon\n    :rtype: float\n    \"\"\"\n    return 0.5 * (5 * side ** 2)\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    s = n * (n-3) * 0.5\n    return s\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nimport math\n\ndef area_pentagon(n):\n    s = 1.0\n    n = n - 1\n    for i in range(n):\n        s = s * (n - i) / (n + i)\n    return s * 2 * math.sqrt(n * (n - 2) * (n - 4) * (n - 6))\n\n\ndef test():\n    assert area_pentagon(5) == 43.01193501472417, \"expected 43.01193501472417, but got \" + str(area_pentagon(5))\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    area = (5*n**2*(3*n**2-1)-10*n**3*(n-1)+5*n**4) / (2*n*(5*n-1)*(5*n+1)*(10*n-1))\n    return area\n\n\ndef test_area_pentagon():\n    assert area_pentagon(1) == 0\n    assert area_pentagon(2) == 10\n    assert area_pentagon(3) == 33\n    assert area_pentagon(4) == 60\n    assert area_pentagon(5) == 43.01193501472417\n    assert area_pentagon(6) == 32.731551061811645\n    assert area_pentagon(7) == 26.46067101013571\n    assert area_pentagon(8) == 22.62281859584549\n    assert area_pentagon(9) == 20.007203417136863\n    assert area_pentagon(10) == 17.99655251465107", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    area = 0\n    for i in range(0,n):\n        area += (n-i)*((2*i)+1)*((3*i)-1)/24.0\n    return area\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nfrom math import cos, pi\n\n\ndef area_pentagon(side: int) -> float:\n    \"\"\"\n    Calculate area of a pentagon\n    :param side: side of a pentagon\n    :return: area of a pentagon\n    \"\"\"\n    return (5 * side ** 2) / 4 * cos(pi / 5)\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(side):\n    area = 1.0/2.0 * side * side * 5.0/4.0\n    return area\n\n# Test Cases"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr):\n    freq = {}\n    for i in arr:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return max(freq.values())", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n,arr):\n    count = 0\n    largest = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            count = 1\n            largest = arr[i]\n        elif arr[i] == largest:\n            count += 1\n    return count\n    \n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr_size, arr):\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_freq = -1\n    max_val = -1\n    for i in freq.items():\n        if i[1] > max_freq:\n            max_freq = i[1]\n            max_val = i[0]\n    return max_freq\n\narr_size = 5\narr = [1,2,3,4,4]", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    if arr == []:\n        return 0\n    maxi = arr[0]\n    freq = 0\n    for i in range(n):\n        if arr[i] > maxi:\n            maxi = arr[i]\n            freq = 1\n        elif arr[i] == maxi:\n            freq += 1\n    return freq\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(array):\n    return array.count(max(array))", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n, arr):\n\n    if len(arr) == 0:\n        return 0\n\n    # Consider each element as a root\n    arr = [None] + arr + [None]\n\n    # Compute the sum of the left and right subtrees\n    # root sum for each element\n    sum_arr = [arr[i] + arr[i + 1] for i in range(n)]\n\n    # Initializing the current frequency of largest element as 1\n    count = 1\n\n    # Compare the sum of each element with sum of root\n    # If a number is greater than the root then it means\n    # that the root element is the largest element.\n    for i in range(1, n):\n\n        # If current sum is greater than sum of root\n        # Update frequency and root\n        if sum_arr[i] > sum_arr[i - 1]:\n            count += 1\n            sum_arr[i - 1] = sum_arr[i]\n\n    return count\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(array):\n    largest = 0\n    freq = 0\n    for i in array:\n        if i > largest:\n            largest = i\n            freq = 1\n        elif i == largest:\n            freq += 1\n    return freq\n\ndef frequency_Of_Largest2(array):\n    largest = array[0]\n    freq = 0\n    for i in array:\n        if i > largest:\n            largest = i\n            freq = 1\n        elif i == largest:\n            freq += 1\n    return freq\n\ndef frequency_Of_Largest3(array):\n    return len(set([max(array)]))\n\ndef frequency_Of_Largest4(array):\n    return len(set(array).pop())", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    largest = arr[0]\n    count = 1\n    for i in arr:\n        if i > largest:\n            largest = i\n            count = 1\n        if i == largest:\n            count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(length, array):\n    # create a dictionary\n    dict = {}\n    # traverse the array\n    for i in array:\n        # if the current number is not present in the dictionary\n        if i not in dict:\n            # add the number with frequency 1\n            dict[i] = 1\n        else:\n            # increase the frequency by 1\n            dict[i] += 1\n    # finding the largest value in the dictionary\n    largest_value = max(dict, key=dict.get)\n    # finding the frequency of largest value\n    frequency = dict[largest_value]\n    return frequency\n\n# testing", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(N,A):\n    frequencies = {}\n    max_frequency = 0\n    largest_element = -1\n    for element in A:\n        if element not in frequencies:\n            frequencies[element] = 1\n        else:\n            frequencies[element] += 1\n        if element > largest_element:\n            largest_element = element\n    for frequency in frequencies.values():\n        if frequency > max_frequency:\n            max_frequency = frequency\n    return max_frequency\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuple_list):\n    res = set()\n    for a in tuple_list:\n        for b in tuple_list:\n            if a == b:\n                continue\n            if sorted(a) == sorted(b):\n                res.add((a, b))\n    return res\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(list_of_tuples):\n    d = {}\n    for i in range(len(list_of_tuples)):\n        d[list_of_tuples[i]] = list_of_tuples[i]\n    return set(d.values())\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuples):\n    return {(a,b) for a,b in tuples for (b,a) in tuples}\n\ndef main():\n    print(\"Please wait...\")\n    tuples = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]\n    print(extract_symmetric(tuples))\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tup_list):\n    return {(tup[0], tup[1]) for tup in tup_list if tup[0] != tup[1] and (tup[1], tup[0]) in tup_list}\n\ndef test_extract_symmetric():\n    assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(list_of_tuples):\n    # Your code goes here\n    # (1) Loop through the tuple list, and extract the first element from each tuple.\n    # (2) Loop through the tuple list a second time, and extract the second element from each tuple.\n    # (3) Compare the first element with the second element.\n    # (4) If the first element equals the second element, store the pair in a new list.\n    # (5) Return the new list.\n    new_list = []\n    for i in list_of_tuples:\n        new_list.append(i[0])\n        new_list.append(i[1])\n    \n    new_list.sort()\n    new_list.reverse()\n    \n    new_list2 = []\n    \n    for i in new_list:\n        for j in new_list:\n            if i == j:\n                new_list2.append(i)\n                \n    new_list2 = list(set(new_list2))\n    new_list2 = list(dict.fromkeys(new_list2))\n    \n    return new_list2\n\n# ------------------------------------------------------------------------------\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(lst):\n    dic={}\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i == j:\n                continue\n            if (lst[i], lst[j]) not in dic:\n                dic[(lst[i], lst[j])]=True\n    return list(dic.keys())\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef extract_symmetric(data: list):\n    \"\"\"\n    data: list, tuple\n    return: list, tuple\n    \"\"\"\n    res = set()\n    if len(data) <= 1:\n        return res\n\n    lookup = defaultdict(list)\n    for key, value in data:\n        lookup[key].append(value)\n\n    for key, values in lookup.items():\n        for value in values:\n            res.add((key, value))\n\n    return list(res)\n\n\ndef test_function(test_case):\n    test_case = test_case()\n    result = extract_symmetric(test_case)\n    solution = test_case\n    print(result)\n    assert result == solution\n\n\ndef test():\n    test_case = [([6, 7], [(6, 7), (7, 6)]), ([2, 3], [(2, 3), (3, 2)]), ([7, 6, 9, 8], [(8, 9), (7, 6), (9, 8)]),\n                 ([10, 2, 10], [(10, 10), (10, 2), (2, 10)]), ([8, 9, 8], [(8, 9), (9, 8)])]\n    for tc in test_case:\n        test_function(lambda: tc)\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tup):\n    \"\"\"\n    Args:\n       tuple_list(list):list of tuples\n    Returns:\n       list of symmetric pairs\n    \"\"\"\n    return {x:y for x in tup for y in tup if x != y and x[1]==y[0]}\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(list):\n    \"\"\"\n    A function to extract all the pairs which are symmetric in the given tuple list.\n    \n    Parameter\n    ----------\n    list: a list of tuples\n    \n    Returns\n    -------\n    res: a set of tuples\n    \n    \"\"\"\n    res = set()\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if i != j and list[i] == list[j]:\n                res.add(tuple(sorted(list[i])))\n    return res\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] == tuple_list[j]:\n                symmetric_pairs.add(tuple_list[i])\n    return symmetric_pairs\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, n, r):\n\t\"\"\"\n\t:param a: first term of gp\n\t:param n: number of terms\n\t:param r: common ratio\n\t:return: sum of gp\n\t\"\"\"\n\treturn (a+(a*r*(n-1)))/r", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(start, stop, factor):\n    if stop == start:\n        return stop\n    return sum_gp(start, stop - 1, factor) + factor*start\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,b,p):\n    total=a\n    for i in range(b):\n        total=total*p\n    return total", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(first,last,increment):\n    #Write your code here\n    gp_series = 0\n    for i in range(first, last+1):\n        gp_series += (i**increment)\n    return gp_series\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(first_num, last_num, increment):\n    return int(first_num) + int(last_num) - int(first_num)/int(increment)*int(last_num)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a, b, r):\n    \"\"\"\n    :param a: the first term\n    :param b: the last term\n    :param r: the ratio\n    :return: the sum of all terms\n    \"\"\"\n    if r == 0:\n        return 0\n    return b + sum_gp(a, b, r-1)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(first,last,increment):\n    sum = first\n    i = 1\n    while i<=last:\n        sum = sum+increment*first\n        first = first*increment\n        i += 1\n    return sum\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(first, last, add):\n    total = first\n    while last>first:\n        total+=add\n        first*=add\n        last-=1\n    return total\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(first_term,common_ratio,n_terms):\n    s=first_term\n    for i in range(n_terms):\n        s*=common_ratio\n    return s\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(start,term,n):\n    return ((start*(term**(n-1))))"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, key):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end-start)//2\n        if arr[mid] == key:\n            return True\n        elif arr[mid] > key:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, target):\n    def _binary_search(array, left, right):\n        if left > right:\n            return False\n        else:\n            mid = (left + right) // 2\n            if array[mid] == target:\n                return True\n            elif array[mid] < target:\n                return _binary_search(array, mid + 1, right)\n            else:\n                return _binary_search(array, left, mid - 1)\n\n    return _binary_search(array, 0, len(array) - 1)\n\ndef test():\n    assert not binary_search([1,2,3,5,8], 6)\n    assert binary_search([1,2,3,5,8], 8)\n    assert binary_search([1,2,3,5,8], 5)\n    assert binary_search([1,2,3,5,8], 3)\n    assert binary_search([1,2,3,5,8], 2)\n    assert not binary_search([], 2)\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, element):\n  left = 0\n  right = len(arr) - 1\n\n  while left <= right:\n    mid = (left + right) // 2\n    if arr[mid] == element:\n      return True\n    elif arr[mid] > element:\n      right = mid - 1\n    else:\n      left = mid + 1\n  return False\n\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\nimport math\n\ndef binary_search(arr, element):\n    if len(arr) == 0:\n        return False\n    else:\n        index = 0\n        end = len(arr) - 1\n        mid = math.floor((end + index)/2)\n        while index <= end:\n            if arr[mid] == element:\n                return True\n            elif arr[mid] > element:\n                end = mid - 1\n            else:\n                index = mid + 1\n        return False", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, target):\n  if len(arr) == 0:\n    return False\n  left = 0\n  right = len(arr) - 1\n  while left <= right:\n    mid = left + (right-left)//2\n    if target == arr[mid]:\n      return True\n    elif target < arr[mid]:\n      right = mid - 1\n    else:\n      left = mid + 1\n  return False\n\n#assert binary_search([1,2,3,5,8], 6) == False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List\n\n\ndef binary_search(array: List[int], number: int) -> bool:\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == number:\n            return True\n        elif array[mid] < number:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n\ndef main():\n    assert binary_search([1, 2, 3, 5, 8], 6) == False\n    assert binary_search([1, 2, 3, 5, 8], 8) == True\n    assert binary_search([1, 2, 3, 5, 8], 3) == True\n    assert binary_search([1, 2, 3, 5, 8], 5) == True\n\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, x):\n    left = 0\n    right = len(array)-1\n    while left <= right:\n        mid = (left+right)//2\n        if array[mid] == x:\n            return True\n        elif array[mid] > x:\n            right = mid-1\n        else:\n            left = mid+1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, key):\n    \"\"\"\n    :param arr: the given array\n    :param key: the element to be searched\n    :return: index of the key element if it exists, otherwise -1\n    \"\"\"\n    n = len(arr)\n    l = 0\n    r = n-1\n    m = (l+r)//2\n    while l<=r:\n        if key==arr[m]:\n            return m\n        elif key>arr[m]:\n            l = m+1\n            m = (l+r)//2\n        elif key<arr[m]:\n            r = m-1\n            m = (l+r)//2\n    return -1\n\n#TEST CASE", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(list_to_search, target):\n    first_index = 0\n    last_index = len(list_to_search) - 1\n    found = False\n\n    while first_index <= last_index and found is False:\n        mid_index = (first_index + last_index) // 2\n\n        if list_to_search[mid_index] == target:\n            found = True\n        elif list_to_search[mid_index] < target:\n            first_index = mid_index + 1\n        else:\n            last_index = mid_index - 1\n\n    if found is False:\n        return False\n    else:\n        return True\n\ndef main():\n    test_cases = [\n        ([1,2,3,5,8], 6, False),\n        ([1,2,3,5,8], 1, True),\n        ([1,2,3,5,8], 5, True),\n        ([1,2,3,5,8], 3, True),\n        ([1,2,3,5,8], 8, True),\n        ([1,2,3,5,8], 8, True),\n        ([1,2,3,5,8], 8, True),\n        ([1,2,3,5,8], 8, True),\n        ([1,2,3,5,8], 2, True),\n        ([1,2,3,5,8], 3, True),\n        ([1,2,3,5,8], 8, True),\n        ([1,2,3,5,8], 5, True),\n        ([1,2,3,5,8], 3, True),\n        ([1,2,3,5,8], 8, True),\n        ([1,2,3,5,8], 5, True),\n        ([1,2,3,5,8], 3, True),\n        ([1,2,3,5,8], 8, True),\n        ([1,2,3,5,8], 5, True),\n        ([1,2,3,", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\nfrom typing import List\n\ndef binary_search(input_array: List, item: int):\n    if not input_array:\n        return False\n    low = 0\n    high = len(input_array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if input_array[mid] == item:\n            return True\n        elif input_array[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(b):\n    if len(b) == 0:\n        return 0\n    return str(b[0]) + binary_to_integer(b[1:])\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    return int(''.join([str(bit) for bit in binary_tuple]), 2)\n\ndef binary_to_integer2(binary_tuple):\n    return int(''.join([str(bit) for bit in binary_tuple]), 2)\n\n# Test cases", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(number):\n    return int(''.join(str(x) for x in number), 2)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    integer = 0\n    for index in range(len(binary_tuple)):\n        if binary_tuple[index] == 1:\n            integer += (2 ** index)\n    return str(integer)\n\n# Alternative method:\ndef binary_to_integer_alt(binary_tuple):\n    return sum(x * (2 ** i) for i, x in enumerate(binary_tuple[::-1]))\n\n# Alternative method:\ndef binary_to_integer_alt(binary_tuple):\n    return sum(x * (2 ** i) for i, x in enumerate(reversed(binary_tuple)))", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary):\n    result = 0\n    power = 1\n    for bit in reversed(binary):\n        result += bit * power\n        power *= 2\n    return result\n\n# Test", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(tuple):\n    n = \"\"\n    for i in range(len(tuple)):\n        if tuple[i] == 1:\n            n += str(i + 1)\n    return str(int(n))\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(list):\n    return int(''.join(map(str, list)), 2)\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    if len(binary)==1:\n        return str(binary[0])\n    else:\n        return str(binary_to_integer(binary[1:])+binary[0])", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(n):\n    # Write your code here\n    integer = \"\"\n    for bit in n:\n        integer += str(int(bit))\n    return integer\n\ndef test_function():\n    n1 = (1, 1, 0, 1, 0, 0, 1)\n    assert binary_to_integer(n1) == '105'\n    n2 = (1, 1, 1, 0, 0, 0, 1)\n    assert binary_to_integer(n2) == '111'\n    n3 = (1, 0, 1, 0, 0, 0, 1)\n    assert binary_to_integer(n3) == '67'\n    n4 = (1, 1, 1, 1, 1, 1, 1)\n    assert binary_to_integer(n4) == '127'\n    n5 = (1, 0, 1, 0, 1, 0, 0)\n    assert binary_to_integer(n5) == '49'\n    n6 = (1, 1, 1, 0, 0, 0, 0)\n    assert binary_to_integer(n6) == '110'\n    n7 = (1, 0, 1, 1, 0, 1, 1)\n    assert binary_to_integer(n7) == '83'\n    n8 = (1, 1, 0, 0, 0, 1, 0)\n    assert binary_to_integer(n8) == '58'\n    n9 = (1, 0, 1, 1, 1, 1, 1)\n    assert binary_to_integer(n9) == '95'\n    n10 = (1, 1, 1, 1, 1, 1, 0)\n    assert binary_to_integer(n10) == '126'", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(tuple_binary):\n    return \"\".join([str(i) for i in tuple_binary])\n\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(s):\n    lowercase_regex = re.compile(r'[a-z]')\n    return re.sub(lowercase_regex, '', s)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(s):\n    # Your code here\n    return re.sub('(^[a-z]+)', '', s)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)\n\n# Tests", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    # your code here\n    return re.sub(r'\\w*(\\w)\\w*', r'\\1', string)", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)\n\n#assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', s)", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\ndef remove_lowercase(st):\n    new_string = re.sub('[^A-Za-z]+', '', st)\n    return new_string\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]', '', string)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(string):\n    return re.sub(r'\\b[a-z]+\\b', '', string)\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(list_of_numbers, k):\n    heap_queue = []\n    for num in list_of_numbers:\n        heappush(heap_queue, num)\n    smallest_numbers = []\n    for _ in range(k):\n        smallest_numbers.append(heappop(heap_queue))\n    return smallest_numbers\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(A,k):\n    if k > len(A):\n        return -1\n    heapq.heapify(A)\n    smallest = []\n    for i in range(k):\n        smallest.append(heapq.heappop(A))\n    return smallest\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nfrom heapq import *\ndef heap_queue_smallest(arr,n):\n    if len(arr) < n:\n        return arr\n    heappush(arr, -arr[0])\n    while len(arr) > n:\n        heappushpop(arr, -arr[0])\n    return list(-x for x in arr)\n\n# Write a function to find the kth smallest element from a given list of numbers using heap queue algorithm.", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest( numbers, k):\n    heapq.heapify(numbers)\n    smallest_list = []\n    for _ in range(k):\n        smallest_list.append(heapq.heappop(numbers))\n    return smallest_list\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(array, k):\n    heap = []\n    for x in array:\n        heapq.heappush(heap, x)\n\n    return [heapq.heappop(heap) for i in range(k)]", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(numbers, k):\n    pq = []\n    for number in numbers:\n        heapq.heappush(pq,number)\n    return heapq.nsmallest(k, pq)\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\ndef heap_queue_smallest(num_list, k):\n    heap = []\n    for num in num_list:\n        heapq.heappush(heap,num)\n    return heapq.nsmallest(k,heap)\n\n\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(list,k):\n    from collections import defaultdict\n    from heapq import heappop, heappush\n    \n    decreasing_heap = defaultdict(list)\n    for i in list:\n        heappush(decreasing_heap, (i,i))\n    return [i[0] for i in sorted(decreasing_heap.items())[:k]]\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nfrom heapq import nsmallest\n\ndef heap_queue_smallest(numbers, k):\n    \"\"\"\n    :type numbers: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    return list(nsmallest(k, numbers))\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\ndef heap_queue_smallest(numbers,k):\n    \n    heapq.heapify(numbers)\n    return [heapq.heappop(numbers) for i in range(k)]\n\n# Alternative using k smallest from heap\ndef k_smallest_from_heap(numbers, k):\n    return heapq.nsmallest(k, numbers)\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    return (1.0/3)*pi*radius**2+(1.0/2)*pi*radius*height\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    Calculates the surface area of a cone.\n    :param radius: the radius of the base\n    :param height: the height of the cone\n    :return: the surface area of the cone\n    \"\"\"\n    return (2 * math.pi * radius ** 2) + (math.pi * radius * height)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    return 1/3 * pi * r**2 * h + pi * r**2\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    return (radius**2)*math.pi+(radius**2)*math.pi*height", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\n# write your function here\ndef surfacearea_cone(radius,height):\n    \"\"\"\n    Parameters:\n    radius:float\n    height:float\n    Returns:float\n    \"\"\"\n    area = math.pi*(radius**2)*(height/3)\n    return area\n\n# don't touch this cell", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    from math import pi\n    return pi * (radius**2 + radius*height + height**2)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(r,h):\n    return pi*(r*r) + pi*r*h + pi*h*h/3\n\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nimport math\ndef surfacearea_cone(radius, height):\n    # First, we'll calculate the base of the cone using the\n    # formula of the cone base: radius*math.sin(x)\n    radius_times_sin = radius * math.sin(math.pi / 2)\n\n    # Next, we'll calculate the surface area using the formula\n    # area = pi*(radius_times_sin**2)\n    surface_area = math.pi * (radius_times_sin**2)\n\n    # Finally, we'll calculate the height of the cone using\n    # the formula of the cone height: radius*math.cos(x)\n    radius_times_cos = radius * math.cos(math.pi / 2)\n\n    # Finally, we'll add the height to the surface area to\n    # get the final answer.\n    return surface_area + radius_times_cos * height\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\n# +\ndef surfacearea_cone(r,h):\n    s = (3.14*r**2)*(h/3)\n    return s\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    pi=3.14\n    surface=pi*(radius*radius)+(pi/3)*(radius**2)*height\n    return surface\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(x, y):\n    while x != y:\n        if x < y:\n            x = x + y\n        else:\n            y = y + x\n    return x\n\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a,b):\n    while b!=0:\n        c = a%b\n        a,b = b,c\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while(b != 0):\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(x,y):\n    if (x%y) == 0:\n        return y\n    else:\n        return gcd(y,x%y)\n\n# Test Cases", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while(b):\n        a, b = b, a%b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\nfrom math import pi\n\ndef diameter_circle(r):\n    return 2 * r * pi\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(r):\n    return 2*r\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return radius * 2\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    \"\"\"\n    Given a radius, r, return a value representing the diameter of the circle\n    \"\"\"\n    return 2*r\n\n#Diameter of a circle = 2*radius\n\ndef test_diameter_circle():\n    assert diameter_circle(10)==20\n    assert diameter_circle(20)==40\n\ntest_diameter_circle()\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\nimport math\n\n\ndef diameter_circle(radius):\n    return 2 * radius\n\n\ndef diameter_circle_2(radius):\n    return 2 * math.pi * radius\n\n\ndef diameter_circle_3(radius):\n    return 2 * radius * math.pi\n\n\ndef diameter_circle_4(radius):\n    return 2 * radius * math.pi\n\n\ndef diameter_circle_5(radius):\n    return 2 * math.pi * radius\n\n\ndef diameter_circle_6(radius):\n    return 2 * radius * math.pi\n\n\ndef diameter_circle_7(radius):\n    return 2 * radius * math.pi\n\n\ndef diameter_circle_8(radius):\n    return 2 * radius * math.pi\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(r):\n    return r*2\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n# complete the function\n\n\ndef diameter_circle(r):\n    d = 2*r\n    return d\n\n\ndef diameter_circle2(r):\n    return 2*r\n\n\ndef diameter_circle3(r):\n    return (2*r)\n\n\ndef diameter_circle4(r):\n    return 2*(r)\n\n\ndef diameter_circle5(r):\n    return 2*r", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(x):\n    \"\"\"\n    :param x: input value\n    :return: the diameter of the circle\n    \"\"\"\n    diameter = x + x\n    return diameter\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    return 2*r\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return 2 * radius\n\ndef test_diameter_circle():\n    assert diameter_circle(10) == 20\n\n# +"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list):\n    return ' '.join(list)\n\ndef test_concatenate_elements():\n    assert concatenate_elements(['hello','there','have','a','rocky','day']) == '  hello there have a rocky day'\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    return '  '.join(elements)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list_):\n    return '  '.join(list_)", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    return \" \".join(lst)\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    return '  '.join(elements)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(words):\n    return ' '.join(words)\n\n# assert concatenate_elements(['hello','there','have','a','rocky','day']) == '  hello there have a rocky day'", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    elements = ' '.join(elements)\n    return elements\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\n# +\n# solution 1\nfrom itertools import *\n\ndef concatenate_elements(L):\n    return \" \".join(list(chain.from_iterable(L)))\n\n# solution 2\ndef concatenate_elements(L):\n    return \" \".join(list(map(' '.join, L)))\n\n\n# -\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    return ' '.join(lst)\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list):\n    return ' '.join(list)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n    return a if b%a == 0 else num_comm_div(b,a%b)\n\n#assert num_comm_div(2,4) == 2\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(n1,n2):\n    num = n1\n    while(num > 1):\n        if(num % n1 == 0 and num % n2 == 0):\n            return num\n        num -= 1\n    return 1\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1,num2):\n    \"\"\"\n    num1: integer\n    num2: integer\n    return: integer\n    \"\"\"\n    if num1 == 0:\n        return 0\n    elif num2 == 0:\n        return 0\n    else:\n        if num1 < num2:\n            return num_comm_div(num1, num2-num1)\n        else:\n            return num_comm_div(num1-num2, num2)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    min_num = min(a, b)\n    for i in range(min_num, 0, -1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return None\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\nfrom fractions import gcd\n\n\ndef num_comm_div(a, b):\n    \"\"\"\n    :param a: first integer\n    :param b: second integer\n    :return: common divisor\n    \"\"\"\n    gcd_res = gcd(a, b)\n    res = 1\n    if a % gcd_res == 0 and b % gcd_res == 0:\n        res = gcd_res\n    return res\n\n\ndef main():\n    \"\"\"\n    Do not edit this function\n    \"\"\"\n    num_list = [2, 4, 7, 8, 9, 10, 11, 12]\n    for num in num_list:\n        print(num, num_comm_div(num, 10))\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(n1, n2):\n    if n1 == n2:\n        return n1\n    elif n1 > n2:\n        return num_comm_div(n1 - n2, n2)\n    else:\n        return num_comm_div(n1, n2 - n1)\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a, b):\n    if a == 0 or b == 0:\n        return 0\n    else:\n        while a % b != 0:\n            a = a - b\n            if a == 0 or b == 0:\n                return 0\n        return b\n\ndef test_case_1():\n    assert num_comm_div(2, 4) == 2\n\ndef test_case_2():\n    assert num_comm_div(2, 10) == 2\n\ndef test_case_3():\n    assert num_comm_div(1, 2) == 1\n\ndef test_case_4():\n    assert num_comm_div(5, 10) == 5\n\ndef test_case_5():\n    assert num_comm_div(15, 10) == 5\n\ndef test_case_6():\n    assert num_comm_div(100, 10) == 10\n\ndef test_case_7():\n    assert num_comm_div(5, 3) == 1\n\ndef test_case_8():\n    assert num_comm_div(10, 1000000) == 10\n\ndef test_case_9():\n    assert num_comm_div(10, 1) == 10", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if(a<b):\n        temp=b\n        b=a\n        a=temp\n    a_div = a\n    b_div = b\n    while (b_div != 0):\n        temp=b_div\n        b_div=a_div%b_div\n        a_div=temp\n    return b\n\n#assert num_comm_div(2,4) == 2\n\n\n# -\n\n# Write a python function to find the LCM of two numbers.\ndef LCM(a,b):\n    return (a*b)//num_comm_div(a,b)\n\n\n# Write a python function to check if two numbers are coprime.\ndef coprime(a,b):\n    return LCM(a,b) == a*b\n\n\n# Write a python function to find the greatest common divisor between two numbers.\ndef gcd(a,b):\n    if(a<b):\n        temp=b\n        b=a\n        a=temp\n    a_div = a\n    b_div = b\n    while (b_div != 0):\n        temp=b_div\n        b_div=a_div%b_div\n        a_div=temp\n    return a\n\n\n# Write a python function to find the Least Common Multiple between two numbers.\ndef LCM(a,b):\n    return (a*b)//gcd(a,b)\n\n\n# Write a python function to check if two numbers are coprime.\ndef coprime(a,b):\n    return LCM(a,b) == a*b\n\n\n# Write a python function to find the Least Common Multiple between two numbers.\ndef LCM(a,b):\n    return (a*b)//gcd(a,b)\n\n\n# Write a python function to find the Least Common Multiple between two numbers.\ndef LCM(a,b):\n    return (a*b)//gcd(a,b)\n\n\n# Write a python function to find the Least Common Multiple between two numbers.\ndef LCM(a,b):\n    return (a*b)//gcd(a,b)\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(x,y):\n    for num in range(1, x+1):\n        if x % num == 0 and y % num == 0:\n            return num\n    return 1\n\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\nfrom __future__ import division\nimport math\n\ndef num_comm_div(a,b):\n    #return the smallest number that divides both a and b\n    #the way to do it is to use the gcd\n    #gcd(a,b) is the number that divides both a and b\n    #we can get the gcd of two numbers by using math.gcd(a,b)\n    #so we can get the smallest common divisor by this way\n    return math.gcd(a,b)\n\ndef gcd_fib_rec(a,b):\n    #if the numbers are equal, the gcd is the number\n    if a == b:\n        return a\n    #otherwise, we use recursion to find the gcd of the numbers\n    if a > b:\n        return gcd_fib_rec(a-b,b)\n    else:\n        return gcd_fib_rec(a,b-a)\n\ndef gcd_fib_iter(a,b):\n    #we can solve the gcd problem using the iterative method\n    #it is an iterative method because we use iteration to get the gcd\n    #the iterative method is a method that does not use recursion\n    #but it can get the same result\n    #we can use iteration to solve many problems\n    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\nimport unittest\n\n\ndef find(a, b):\n    return a % b\n\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a, b):\n    return a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(num1, num2):\n    \"\"\"\n    finds the remainder of two numbers\n    \"\"\"\n    return num1 % num2\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    if b == 0:\n        return a\n    return find(b,a%b)\n\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a, b):\n    # your code here\n    while b != 0:\n        temp = a % b\n        a = b\n        b = temp\n    return a\n\n\ndef find_recursive(a, b):\n    # your code here\n    if b == 0:\n        return a\n    else:\n        return find_recursive(b, a % b)\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(num1, num2):\n    if num1 < num2:\n        temp = num1\n        num1 = num2\n        num2 = temp\n    return num1 - (num1 // num2) * num2\n\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    \"\"\"\n    find() function to find remainder of two numbers\n    \"\"\"\n    return a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a, b):\n    if a > b:\n        a, b = b, a\n    return a - b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(lst):\n    lst.insert(0, 0)\n    lst.append(1)\n    for i in range(2, len(lst)):\n        lst.append(lst[i] + lst[i-1])\n    return lst\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(list_):\n    prev = 0\n    next_ = list_[0]\n    l = []\n    for i in range(1, len(list_)):\n        if i == 1:\n            continue\n        next_ = list_[i]\n        l.append(next_ + prev)\n        prev = next_\n    return l\n\nlist_ = [1, 1, 3, 4, 4, 5, 6, 7]", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    # Write your code here\n    res = []\n    for i in nums:\n        res.append(i+1)\n    return res\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    result = []\n    count = 1\n    while len(nums) > count:\n        result.append(nums[count - 1] + nums[count])\n        count += 1\n    return result\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append(lst[i])\n        else:\n            result.append(lst[i]+lst[i-1])\n    return result\n\n# Write a function that returns true if all numbers in a list are equal\n# assert all_equal([1,1,1])==True\ndef all_equal(lst):\n    return all(x == lst[0] for x in lst)\n\n# Write a function that returns a list of the first n Fibonacci numbers\n# assert fibonacci(3)==[0, 1, 1]\ndef fibonacci(n):\n    result = [0, 1]\n    if n == 0:\n        return result\n    else:\n        for i in range(2,n+1):\n            result.append(result[i-1] + result[i-2])\n    return result\n\n# Write a function that returns a list of the first n factorial numbers\n# assert factorial(3)==[1,2,6]\ndef factorial(n):\n    result = [1]\n    if n == 0:\n        return result\n    else:\n        for i in range(2,n+1):\n            result.append(result[i-1] * i)\n    return result\n\n# Write a function that returns the list of the first n natural numbers\n# assert natural_numbers(3)==[1,2,3]\ndef natural_numbers(n):\n    result = []\n    for i in range(n+1):\n        result.append(i)\n    return result\n\n# Write a function that returns a list of the first n odd natural numbers\n# assert odd_numbers(3)==[1,3,5]\ndef odd_numbers(n):\n    result = []\n    for i in range(1,n+1):\n        result.append(2*i-1)\n    return result\n\n#", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(list_of_numbers):\n    result = [x+1 for x in range(len(list_of_numbers))]\n    return result", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    res = []\n    for i in range(len(nums)-1):\n        res.append(nums[i]+1)\n    return res", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(list):\n    return [item + 1 for item in list if item != list[0] - 1] + [list[-1] + 1]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(list_nums):\n    numbers = list_nums\n    new_numbers = []\n    for i in range(len(numbers)):\n        num = numbers[i]\n        if i == len(numbers) - 1:\n            new_numbers.append(numbers[i] + 1)\n        else:\n            new_numbers.append(numbers[i] + numbers[i+1])\n    return new_numbers\n\n\ndef test_add_consecutive_nums():\n    assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]) == [2, 4, 7, 8, 9, 11, 13]\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    nums = list(nums)\n    length = len(nums)\n    for i in range(length):\n        if i > 0:\n            nums[i] = nums[i - 1] + nums[i]\n    return nums\n\n\n# Tests"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n natural numbers.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        s += i ** 3\n    return s", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    return n*(n+1)*(n+2)/6\n\ndef main():\n    n = int(input())\n    print(sum_Of_Series(n))\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    Returns the sum of series upto nth natural number\n    \"\"\"\n    return sum(range(n+1)) ** 3\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\n# SOLUTION 1\n\ndef sum_Of_Series(n):\n    s = 0\n    for i in range(1, n+1):\n        s += i**3\n    return s\n\n# SOLUTION 2\n\ndef sum_Of_Series(n):\n    return sum(i**3 for i in range(1, n+1))", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return sum(list(range(1,n+1)))**3\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\n# Write your code here\ndef sum_Of_Series(n):\n    if n < 1:\n        return 0\n    else:\n        return n * sum_Of_Series(n-1) + n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    result = 0\n    for i in range(0, n+1):\n        result += i**3\n    return result\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    s = 0\n    for i in range(1,n+1):\n        s += i**3\n    return s\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return int(n ** 3)\n\n# Test Cases", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return sum\n\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[zero_index] = arr[i]\n            zero_index += 1\n    for i in range(zero_index, len(arr)):\n        arr[i] = 0\n    return arr\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    arr.sort()\n    zero_idx = arr.index(0)\n    if zero_idx > 0:\n        arr[:zero_idx], arr[zero_idx+1:] = arr[zero_idx+1:], arr[:zero_idx]\n    return arr", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    for i, element in enumerate(arr):\n        if element != 0:\n            if arr[i] != 0:\n                arr[i], arr[0] = arr[0], arr[i]\n            break\n    zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[zero_index], arr[i] = arr[i], arr[zero_index]\n            zero_index += 1\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    if not arr:\n        return\n    l = len(arr)\n    # find last index of 0\n    zero_end = l - 1\n    for i in range(l - 1):\n        if arr[i] == 0:\n            zero_end = i\n    # move 0 to end\n    if zero_end != l - 1:\n        arr[zero_end], arr[l - 1] = arr[l - 1], arr[zero_end]\n    # reverse array\n    return arr[zero_end + 1:] + arr[:zero_end + 1]\n\n\ndef test_reorder():\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(nums):\n    zero_idx = -1\n    for idx, num in enumerate(nums):\n        if num == 0:\n            zero_idx = idx\n    if zero_idx == -1:\n        return nums\n\n    num_len = len(nums)\n    left, right = zero_idx, num_len - 1\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n    return nums\n\n# re_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n# [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\ndef re_order2(nums):\n    zero_idx = -1\n    for idx, num in enumerate(nums):\n        if num == 0:\n            zero_idx = idx\n    if zero_idx == -1:\n        return nums\n\n    num_len = len(nums)\n    left = 0\n    right = num_len - 1\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n    return nums\n\n# re_order2([6, 0, 8, 2, 3, 0, 4, 0, 1])\n# [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\ndef re_order3(nums):\n    zero_idx = -1\n    for idx, num in enumerate(nums):\n        if num == 0:\n            zero_idx = idx\n    if zero_idx == -1:\n        return nums\n\n    num_len = len(nums)\n    while zero_idx < num_len - 1:\n        if nums[zero_idx] ==", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(numbers):\n    zeroes = [n for n in numbers if n == 0]\n    numbers = numbers[:]\n    numbers.reverse()\n    numbers.extend(zeroes)\n    numbers.reverse()\n    return numbers\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\nimport pytest\n\n\ndef re_order(array):\n    res = []\n    zeros = []\n    for el in array:\n        if el == 0:\n            zeros.append(el)\n        else:\n            res.append(el)\n    for el in zeros:\n        res.append(el)\n    return res\n\n\ndef test_re_order():\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    # given that all zeroes are at the end of the array\n    # put all non zeroes at the start of the array\n    if len(arr) == 0:\n        return arr\n\n    non_zero_index = 0\n    for idx, el in enumerate(arr):\n        if el != 0:\n            arr[non_zero_index] = el\n            non_zero_index += 1\n    return arr\n\ndef test_re_order():\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\n# First solution\ndef re_order(lst):\n    return sorted(lst, key=lambda x: x != 0)\n\n# Second solution\ndef re_order(lst):\n    lst = [x for x in lst if x != 0]\n    lst.extend([x for x in lst if x == 0])\n    return lst\n\n# Third solution\ndef re_order(lst):\n    return list(filter(lambda x: x != 0, lst)) + list(filter(lambda x: x == 0, lst))\n\n# Fourth solution\ndef re_order(lst):\n    res = []\n    for item in lst:\n        if item != 0:\n            res.append(item)\n    res.extend(lst)\n    return res\n\n# Fifth solution\ndef re_order(lst):\n    return [item for item in lst if item != 0] + [item for item in lst if item == 0]", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    output_arr = []\n    for item in arr:\n        if item == 0:\n            output_arr.append(item)\n        else:\n            output_arr.append(item)\n    return output_arr"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nfrom itertools import permutations\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    k = min(n, k)\n    p = []\n    for i in range(k, n+1):\n        p.append(i)\n    res = 0\n    for i in range(k+1):\n        for j in range(i+1, k+1):\n            res += len(list(permutations(p[i:j])))\n    return res\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nfrom math import factorial\n\n\ndef permutation_coefficient(n, k):\n    if k == 0:\n        return factorial(n)\n    return factorial(n) // factorial(k) * factorial(n - k)\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    if n == k:\n        return 1\n\n    total = 0\n    for i in range(1, n + 1):\n        total += permutation_coefficient(n - 1, i - 1) * permutation_coefficient(k - 1, i - 1)\n\n    return total\n\n\ndef test_permutation_coefficient():\n    assert permutation_coefficient(10, 2) == 90", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nimport math\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :param n: integer\n    :param k: integer\n    :return: integer\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    def rec_permutation_coefficient(n, k):\n        \"\"\"\n        Recursive function to calculate the permutation coefficient\n        :param n: input for size of permutation\n        :param k: input for position of permutation\n        :return: calculation of permutation coefficient\n        \"\"\"\n        if n == k == 0:\n            return 1\n        elif n == 0 or k > n:\n            return 0\n        else:\n            return rec_permutation_coefficient(n - 1, k) + rec_permutation_coefficient(n - 1, k - 1)\n\n    return rec_permutation_coefficient(n, k)\n\n\ndef test_permutation_coefficient():\n    assert permutation_coefficient(10, 2) == 90\n    assert permutation_coefficient(10, 1) == 10\n    assert permutation_coefficient(10, 0) == 1\n    assert permutation_coefficient(10, 10) == 0\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nfrom itertools import product\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"Return the permutation coefficient of n and k.\"\"\"\n    return int(round(sum([1 for p in product([0, 1], repeat=k) if sum(p) == n])))\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    res = 0\n    for i in range(k, n+1):\n        res += (n-i+1) // i\n    return res\n\ndef test():\n    assert permutation_coefficient(10, 2) == 90\n    assert permutation_coefficient(5, 2) == 10\n    print('Success: test')\n\n\ndef main():\n    print(permutation_coefficient(10, 2))\n    print(permutation_coefficient(5, 2))\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    result = 1\n    for i in range(0, k):\n        result *= n - i\n    result //= math.factorial(k)\n    return result\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    p(n, k) = (n-1)!/((k-1)!(n-k)!)\n    \"\"\"\n    # This is what we need\n    return (n-1) * ((n-k+1) // k)\n\ndef test_permutation_coefficient():\n    \"\"\"\n    >>> test_permutation_coefficient()\n    \"\"\"\n    assert permutation_coefficient(10, 2) == 90\n\ndef test_permutation_coefficient():\n    \"\"\"\n    >>> test_permutation_coefficient()\n    \"\"\"\n    assert permutation_coefficient(10, 5) == 20\n\ndef test_permutation_coefficient():\n    \"\"\"\n    >>> test_permutation_coefficient()\n    \"\"\"\n    assert permutation_coefficient(10, 10) == 1\n\n# %%", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\n# O(n) time | O(1) space\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    k = min(k, n - k)\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(n):\n    product = 1\n    for i in range(1, n + 1):\n        product *= i\n    return product\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n# SOLUTION\ndef remove_words(word_list, remove_list):\n    return [word for word in word_list if word not in remove_list]", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words,remove_word):\n    return [word for word in words if word not in remove_word]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(arr,lst):\n    new = []\n    for i in arr:\n        if i not in lst:\n            new.append(i)\n    return new\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words_list, words_to_remove):\n    result = [word for word in words_list if word not in words_to_remove]\n    return result\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(word_list, word_to_remove):\n    return list(filter(lambda word: word not in word_to_remove, word_list))\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(word_list,words):\n    for word in words:\n        word_list.remove(word)\n    return word_list", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(a, b):\n    b = set(b)\n    return [word for word in a if word not in b]\n\ndef test_remove_words():\n    assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange']) == ['red', 'green', 'blue', 'black']", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(word_list,remove_words):\n    return [w for w in word_list if w not in remove_words]\n\nremove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, remove):\n    filtered_words = []\n    for word in words:\n        if word not in remove:\n            filtered_words.append(word)\n    return filtered_words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, to_be_removed):\n    return [word for word in words if word not in to_be_removed]\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1,list2):\n    if len(list1)==len(list2):\n        for i in range(len(list1)):\n            if list1[i]!=list2[i]:\n                return False\n        return True\n    return False", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n\n    if list1.count(list1[0]) == len(list1):\n        if list2.count(list2[0]) == len(list2):\n            if list1.count(list2[0]) == list2.count(list1[0]):\n                for num in list1:\n                    if list1.count(num) > list2.count(num):\n                        return False\n                for num in list2:\n                    if list2.count(num) > list1.count(num):\n                        return False\n                return True\n\n    return False\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(l1,l2):\n    \"\"\"\n    :param l1: a list\n    :param l2: a list\n    :return: True or False\n    \"\"\"\n    l1=set(l1)\n    l2=set(l2)\n    if l1==l2:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    dict1 = dict()\n    dict2 = dict()\n    for i in range(len(list1)):\n        dict1[list1[i]] = 1\n    for i in range(len(list2)):\n        dict2[list2[i]] = 1\n    for key,value in dict1.items():\n        if key not in dict2 or dict2[key] != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1,list2):\n    if len(list1)!=len(list2):\n        return False\n    set1=set(list1)\n    set2=set(list2)\n    if set1==set2:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(l1,l2):\n    return sorted(l1) == sorted(l2)\n\n#assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n#assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"green\",\"black\",\"red\"])==False\n#assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"orange\",\"pink\",\"green\",\"white\",\"black\"])==False\n#assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"green\",\"black\",\"orange\",\"red\"])==True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(x,y):\n    if len(x)!=len(y):\n        return False\n    else:\n        for i in range(len(x)):\n            if x[i]!=y[i]:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    if len(list1)!=len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!=list2[i]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    len1 = len(list1)\n    len2 = len(list2)\n    if len1 != len2:\n        return False\n    for i in range(len1):\n        if list1[i] != list2[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\n# solution:\n# first we sort the first list\ndef same_order(list1, list2):\n    list1.sort()\n    list2.sort()\n    return list1 == list2\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i\n    return sum/2", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    i = 0\n    j = 0\n    sum = 0\n    for i in range(1, num, 2):\n        j += 1\n        sum += i\n    avg = (sum / j)\n    return avg\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n# +\ndef average_Odd(n):\n    total = 0\n    for i in range(1,n,2):\n        total += i\n    return total/n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_odd(num):\n    average = 0\n    for i in range(1, num, 2):\n        average += i\n    return average\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    if (num % 2) == 0:\n        return -1\n    else:\n        odd_sum = 0\n        for i in range(1, num+1, 2):\n            odd_sum += i\n        return odd_sum/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    count=0\n    for i in range(1,n+1,2):\n        count += i\n    return count/n\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i\n    return sum // 2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    sum = 0\n    for i in range(1, num+1, 2):\n        sum += i\n    return sum/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(number):\n    if number % 2 == 0:\n        return number\n    sum = 0\n    for i in range(1, number, 2):\n        sum = sum + i\n    return sum / 2\n\ndef average_Odd_v2(number):\n    return sum([i for i in range(1, number, 2)]) / 2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n    \"\"\"\n    average_Odd function returns average of odd numbers\n    \"\"\"\n    if(num<2):\n        return 0\n    else:\n        sum=0\n        odd=1\n        while(odd<=num):\n            sum=sum+odd\n            odd=odd+2\n        return sum/2\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nimport itertools\n\ndef no_of_subsequences(arr, k):\n    no_of_subsequences = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for l in itertools.permutations(arr[i:j+1]):\n                no_of_subsequences += 1 if int(str(l)[0]) < k else 0\n    return no_of_subsequences\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    result = []\n    for i in arr:\n        result.append(result[-1]*i)\n        if result[-1] < k:\n            result.append(0)\n    return sum(result[1:])", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    # Write your code here\n    n = len(arr)\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j < arr[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]\n    return dp[n][k]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    ret = 0\n    n = len(arr)\n    memo = [-1] * (k + 1)\n    for x in arr:\n        for j in range(k, x - 1, -1):\n            if memo[j] == -1:\n                memo[j] = ret\n            ret += memo[j]\n    return ret\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    def generate_product(arr, i, k):\n        if i == len(arr) or k < 0:\n            return 0\n        if i == len(arr) - 1:\n            if k < arr[i]:\n                return 0\n            return 1\n        if i in product:\n            return product[i]\n        product[i] = generate_product(arr, i+1, k) + generate_product(arr, i+1, k-arr[i])\n        return product[i]\n    product = {}\n    count = generate_product(arr, 0, k)\n    return count\n\n\ndef main():\n    data = [1, 2, 3, 4, 5]\n    k = 10\n    print(\"The number of subsequences for given array is: \", no_of_subsequences(data, k))\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    if not arr:\n        return 0\n\n    prod = 1\n    count = 0\n    seen = {0}\n    for n in arr:\n        prod = prod * n\n        count += len(seen) - seen.count(prod - k)\n        seen.add(prod)\n    return count\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    k = max(k, max(arr))\n    dp = [0] * (k+1)\n    for a in arr:\n        for i in range(k+1):\n            dp[i] += dp[i-a]\n    return dp[k]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    dp = [[0 for i in range(k+1)] for j in range(len(arr)+1)]\n    \n    for i in range(1, len(arr)+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[len(arr)][k]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nfrom functools import reduce\n\n\ndef no_of_subsequences(arr, k):\n    return reduce(lambda x, y: x * y, (1 + k - i for i in arr), 1)\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(array, k):\n    if len(array) == 1:\n        return 1 if array[0] < k else 0\n    else:\n        return no_of_subsequences(array[1:], k) + no_of_subsequences(array[1:], k - array[0])\n"]]