[["#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n  local len\n  len=$(echo \"$1\" | wc -c)\n  echo \"$len\""], ["#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    local string=$1\n    local alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    local alphabet_length=${#alphabet}\n    local encrypted=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z="], ["#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local csv=$1\n  local keys=$(echo \"$csv\" | cut -d, -f1)\n  local values=$(echo \"$csv\" | cut -d, -f2)\n  local lower_case=$(echo \"$keys\" | tr '[:upper:]' '[:lower:]')\n  local upper_case=$(echo \"$keys\" | tr '[:lower:]' '[:upper:]')\n  if [[ \"$lower_case\" == \"$keys\" || \"$upper_case\" == \"$keys\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n    local list=\"$1\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n   "], ["#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n    local text=\"$1\"\n    local result=\"\"\n    local prev_char=\"\"\n    local prev_char_prev=\"\"\n    local prev_char_prev_prev=\"\"\n    local prev_char_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n    local prev_char_prev_prev_prev_prev"], ["#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n    local n=$1\n    local a=0\n    local b=1\n    local c=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a1=0\n    local b1=0\n    local c1=0\n    local i1=0\n    local j1=0\n    local k1=0\n    local l1=0\n    local m1=0\n    local o1=0\n    local p1=0\n    local q1=0\n    local r1=0\n    local s1=0\n    local t1=0\n    local u1=0\n    local v1=0\n    local w1=0\n    local x1=0\n    local y1=0\n    local z1=0\n    local a2=0\n    local b2=0\n    local c2=0\n    local i2=0\n    local j2=0\n    local k2=0\n    local l2=0\n    local m2=0\n    local o2=0\n    local p2=0\n    local q2=0\n    local r2=0\n    local s2=0\n    local t2=0\n    local u2=0\n    local v2=0\n    local w2=0\n    local x2=0\n    local y2=0\n    local z2"], ["#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n  local input=$1\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z="], ["#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n  local -a arr\n  arr=($1)\n  local -a filtered\n  for i in \"${arr[@]}\"; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      filtered+=(\"$i\")\n    fi\n  done\n  echo \"${filtered[@]}\""], ["#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i + 1))\n        while [ $j -lt $n ]; do\n            if [ $((i + j)) -eq $n ]; then\n                collisions=$((collisions + 1))\n            fi\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo $collisions"], ["#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n    local notes=$1\n    local notes_list=()\n    local note_length=0\n    local note_length_prev=0\n    local note_length_prev_prev=0\n    local note_length_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local note_length_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_"], ["#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n    local dec=$1\n    local bin=\"\"\n    local i=0\n    while [ $dec -gt 0 ]; do\n        bin=\"$((dec % 2))$bin\"\n        dec=$((dec / 2))\n        i=$((i + 1))\n    done\n    echo \"db$bin$db\""], ["#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n    local string=\"$1\"\n    local prefix=\"\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local len=\"${#string}\"\n    while [ $i -lt $len ]; do\n        prefix=\"${string:0:$i}\"\n        result=\"${result}${prefix}\"\n        j=$i\n        while [ $j -lt $len ]; do\n            if [[ \"${string:$j:1}\" == \"${prefix:$j:1}\" ]]; then\n                result=\"${result}${string:$j:1}\"\n            else\n                break\n            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo \"$result\""], ["#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n    echo \"$1 + $2 = $(($1 + $2))\""], ["#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n    local need=$2\n    local remaining=$3\n    local eaten=$((number + need))\n    if [ $eaten -gt $remaining ]; then\n        echo $((eaten - remaining)) $remaining\n    else\n        echo $eaten 0\n    fi"], ["#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n    local capacity=$2\n    local rows=$(echo \"$grid\" | wc -l)\n    local cols=$(echo \"$grid\" | tr -s ' ' | cut -d ' ' -f 2 | wc -l)\n    local bucket_count=$(echo \"$grid\" | tr -s ' ' | cut -d ' ' -f 2 | grep -o 1 | wc -l)\n    local bucket_capacity=$(echo \"$grid\" | tr -s ' ' | cut -d ' ' -f 2 | grep -o 1 | tr -s ' ' | cut -d ' ' -f 1 | grep -o 1 | wc -l)\n    local bucket_capacity_per_row=$(echo \"$bucket_capacity\" | awk '{print $1/($rows"], ["#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n    local operator=\"$1\"\n    local operand=\"$2\"\n    local result=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0"], ["#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n  local string=\"$1\"\n  echo \"${string//[a-z]/[A-Z]}/\""], ["#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local -a sorted\n  for i in \"${arr[@]}\"; do\n    if [[ \"$i\" =~ ^[1-9]$ ]]; then\n      sorted+=(\"$i\")\n    fi\n  done\n  sorted=($(sort -r <<< \"${sorted[*]}\"))\n  local -a result\n  for i in \"${sorted[@]}\"; do\n    result+=(\"$(echo \"$i\" | sed -e 's/^1/One/g' -e 's/^2/Two/g' -e 's/^3/Three/g' -e 's/^4/Four/g' -e 's/^5/Five/g' -e 's/^6/Six/g' -e 's/^7/Seven/g' -e 's/^8/Eight/g' -e 's/^9/Nine/g')\")\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factor\n    local factor_count\n    local factor_list\n    local factor_list_size\n    local factor_list_index\n    local factor_list_element\n    local factor_list_element_size\n    local factor_list_element_index\n    local factor_list_element_element\n    local factor_list_element_element_size\n    local factor_list_element_element_index\n    local factor_list_element_element_element\n    local factor_list_element_element_element_size\n    local factor_list_element_element_element_index\n    local factor_list_element_element_element_element\n    local factor_list_element_element_element_element_size\n    local factor_list_element_element_element_element_index\n    local factor_list_element_element_element_element_element\n    local factor_list_element_element_element_element_element_size\n    local factor_list_element_element_element_element_element_index\n    local factor_list_element_element_element_element_element_element\n    local factor_list_element_element_element_element_element_element_size\n    local factor_list_element_element_element_element_element_element_index\n    local factor_list_element_element_element_element_element_element_element\n    local factor_list_element_element_element_element_element_element_element_size\n    local factor_list_element_element_element_element_element_element_element_index\n    local factor_list_element_element_element_element_element_element_element_element\n    local factor_list_element_element_element_element_element_element_element_"], ["#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n  local n=$1\n  local i=2\n  local primes=()\n  while [ $i -le $n ]; do\n    if is_prime $i; then\n      primes+=($i)\n    fi\n    i=$((i + 1))\n  done\n  echo ${primes[@]}"], ["#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n  local list=\"$1\"\n  local list_unique=()\n  local list_unique_i\n  local list_unique_j\n  local list_unique_k\n  local list_unique_l\n  local list_unique_m\n  local list_unique_n\n  local list_unique_o\n  local list_unique_p\n  local list_unique_q\n  local list_unique_r\n  local list_unique_s\n  local list_unique_t\n  local list_unique_u\n  local list_unique_v\n  local list_unique_w\n  local list_unique_x\n  local list_unique_y\n  local list_unique_z\n  local list_unique_aa\n  local list_unique_ab\n  local list_unique_ac\n  local list_unique_ad\n  local list_unique_ae\n  local list_unique_af\n  local list_unique_ag\n  local list_unique_ah\n  local list_unique_ai\n  local list_unique_aj\n  local list_unique_ak\n  local list_unique_al\n  local list_unique_am\n  local list_unique_an\n  local list_unique_ao\n  local list_unique_ap\n  local list_unique_aq\n  local list_unique_ar\n  local list_unique_as\n  local list_unique_at\n  local list_unique_au\n  local list_unique_av\n  local list_unique_aw\n  local list_unique_ax\n  local list_unique_ay\n  local list_unique_az\n  local list_unique_ba\n  local list_unique_bb\n  local list_unique_bc\n  local list_unique_bd\n  local list_unique_be\n  local list_unique_bf\n  local list_unique_bg\n  local list_unique_bh\n  local list_unique_bi\n  local list_unique_bj\n  local list_unique_bk\n  local list_unique_bl\n  local list_unique_bm\n  local list_unique_bn\n  local list_unique_bo\n  local list_unique_bp\n "], ["#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_len=$(echo \"$list1\" | wc -w)\n  local list2_len=$(echo \"$list2\" | wc -w)\n  local list1_chars=$(echo \"$list1\" | tr -d ' ' | wc -c)\n  local list2_chars=$(echo \"$list2\" | tr -d ' ' | wc -c)\n  local list1_chars_array=($(echo \"$list1\" | tr -d ' '))\n  local list2_chars_array=($(echo \"$list2\" | tr -d ' '))\n  local list1_chars_array_len=${#list1_chars_array[@]}\n  local list2_chars_array_len=${#list2_chars_array[@]}\n  local list1_chars_array_index=0\n  local list2_chars_array_index=0\n  local list1_chars_array_index_max=$((list1_chars_array_len - 1))\n  local list2_chars_array_index_max=$((list2_chars_array_len - 1))\n  local list1_chars_array_index_min=$((list1_chars_array_len - 1))\n  local list2_chars_array_index_min=$((list2_chars_"], ["#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n    local max_element\n    max_element=\"$1\"\n    for i in $1; do\n        if [[ \"$i\" -gt \"$max_element\" ]]; then\n            max_element=\"$i\"\n        fi\n    done\n    echo \"$max_element\""], ["#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n  local input=\"$1\"\n  local stack=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w="], ["#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n  local n=$1\n  local m=$2\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m_1=$m\n  local m_2=$m\n  local m_3=$m\n  local m_4=$m\n  local m_5=$m\n  local m_6=$m\n  local m_7=$m\n  local m_8=$m\n  local m_9=$m\n  local m_10=$m\n  local m_11=$m\n  local m_12=$m\n  local m_13=$m\n  local m_14=$m\n  local m_15=$m\n  local m_16=$m\n  local m_17=$m\n  local m_18=$m\n  local m_19=$m\n  local m_20=$m\n  local m_21=$m\n  local m_22=$m\n  local m_23=$m\n  local m_24=$m\n  local m_25=$m\n  local m_26=$m\n  local m_27=$m\n  local m_28=$m\n  local m_29=$m\n  local m_30=$m\n  local m_31=$m\n  local m_32=$m\n  local m_33=$m\n  local m_34=$m\n  local m_35=$m\n  local m_36=$m\n  local m_37=$m\n  local m_38"], ["#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        j=$((i+1))\n        while [ $j -lt $n ]\n        do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n                k=$i\n                l=$j\n                m=$((j+1))\n                while [ $m -lt $n ]\n                do\n                    arr[$k]=$arr[$m]\n                    k=$((m+1))\n                    m=$((m+1))\n                done\n                arr[$k]=$arr[$l]\n                flag=1\n                break\n            fi\n            j=$((j+1))\n        done\n        i=$(("], ["#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n    local n=$1\n    local odd_palindromes=()\n    local even_palindromes=()\n    local i=1\n    while [ $i -le $n ]; do\n        local palindrome=$(printf \"%d\" $i | sed 's/^\\([0-9]*\\)\\([0-9]*\\)$/\\1\\2\\1\\2/')\n        if [ $((10#$palindrome)) -eq $i ]; then\n            if [ $((10#$palindrome % 2)) -eq 0 ]; then\n                even_palindromes+=($palindrome)\n            else\n                odd_palindromes+=($palindrome)\n            fi\n        fi\n        i=$((i + 1))\n    done\n    echo \"\\\"${odd_palindromes[@]}\\\"\"\n    echo \"\\\"${even_palindromes[@]}\\\"\""], ["#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0"], ["#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n    local xs=\"$1\"\n    local xs_len=$(echo \"$xs\" | wc -w)\n    local xs_len_1=$((xs_len - 1))\n    local xs_len_2=$((xs_len - 2))\n    local xs_len_3=$((xs_len - 3))\n    local xs_len_4=$((xs_len - 4))\n    local xs_len_5=$((xs_len - 5))\n    local xs_len_6=$((xs_len - 6))\n    local xs_len_7=$((xs_len - 7))\n    local xs_len_8=$((xs_len - 8))\n    local xs_len_9=$((xs_len - 9))\n    local xs_len_10=$((xs_len - 10))\n    local xs_len_11=$((xs_len - 11))\n    local xs_len_12=$((xs_len - 12))\n    local xs_len_13=$((xs_len - 13))\n    local xs_len_14=$((xs_len - 14))\n    local xs_len_15=$((xs_len - 15))\n    local xs_len_16=$((xs_len - 16))\n    local xs_len_17=$((xs_len - 17))\n    local xs_len_18=$((xs_len - 18))\n    local xs_len_19=$((xs_len - 19))\n    local xs_len_20=$((xs_len - 20))\n    local xs_len_21=$((xs_len - 21))\n    local xs_len_2"], ["#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=true\n  local i=0\n  local j=0\n  local n=$1\n  while [ $i -lt $n ]; do\n    j=$((i + 1))\n    while [ $j -lt $n ]; do\n      if [ $n[$i] -gt $n[$j] ]; then\n        sorted=false\n        break\n      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  if [ $sorted = true ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n    local s=\"$1\"\n    local i=0\n    local len=${#s}\n    local result=\"\"\n    while [ $i -lt $len ]; do\n        if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n            result+=${s:$i:1}\n            result+=${s:$i:1:1}\n        else\n            result+=${s:$i:1}\n        fi\n        i=$((i+1))\n    done\n    echo \"$result\""], ["#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n    local n=$1\n    local a=1\n    local b=3\n    local c=2\n    local i=0\n    local result=\"\"\n    while [ $i -lt $n ]; do\n        result=\"$result\\\"$a\\\"\"\n        a=$((a + b))\n        b=$((b + c))\n        c=$((a + b))\n        i=$((i + 1))\n    done\n    echo $result"], ["#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n  local n=$1\n  local count=0\n  for i in $(seq 1 $n); do\n    if [[ $i % 11 == 0 || $i % 13 == 0 ]]; then\n      count=$((count + 1))\n    fi\n  done\n  echo $count"], ["#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n    local n=$1\n    local sum=0\n    local i=0\n    while [ $n -gt 0 ]; do\n        local digit=$(($n % 2))\n        sum=$(($sum + $digit))\n        n=$(($n / 2))\n        i=$(($i + 1))\n    done\n    local i=0\n    while [ $i -lt $sum ]; do\n        echo -n \"1\"\n        i=$(($i + 1))\n    done\n    echo -n \"0\""], ["#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local grid=$1\n    local k=$2\n    local n=$(echo \"$grid\" | wc -l)\n    local m=$(echo \"$grid\" | cut -d ' ' -f 1 | wc -l)\n    local grid_arr=($(echo \"$grid\" | tr '\\n' ' '))\n    local grid_arr_len=${#grid_arr"], ["#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n    local s=\"$1\"\n    local count=0\n    for ((i=0; i < ${#s}; i+=2)); do\n        if [[ \"${s:i:1}\" =~ [aeiou] ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo \"$count\""], ["#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\")\n    local k=$2\n    local max_k=(\"${arr[@]:0:$k}\")\n    local max_k_index=0\n    local max_k_value=0\n    local i=0\n    local j=0\n    local value=0\n    local max_value=0\n    local max_index=0\n    local max_k_value_index=0\n    local max_k_value_index_2=0\n    local max_k_value_index_3=0\n    local max_k_value_index_4=0\n    local max_k_value_index_5=0\n    local max_k_value_index_6=0\n    local max_k_value_index_7=0\n    local max_k_value_index_8=0\n    local max_k_value_index_9=0\n    local max_k_value_index_10=0\n    local max_k_value_index_11=0\n    local max_k_value_index_12=0\n    local max_k_value_index_13=0\n    local max_k_value_index_14=0\n    local max_k_value_index_15=0\n    local max_k_value_"], ["#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n  local n=$1\n  local i=2\n  while [ $i -le $n ]; do\n    if [ $n % $i -eq 0 ]; then\n      echo $i\n    fi\n    i=$((i + 1))\n  done"], ["#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local array=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k="], ["#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n    local n=$1\n    local i=1\n    local result=\"\"\n    while [ $i -le $n ]; do\n        if [ $i -eq 1 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 2 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 3 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 4 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 5 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 6 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 7 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 8 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 9 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 10 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 11 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 12 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 13 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 14 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 15 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 16 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 17 ]; then\n            result=\"$result\\\"$i\\\"\"\n        elif [ $i -eq 18 ]; then\n           "], ["#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n    local b=$(($a**3))\n    if [ $a -eq $b ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n    local message=$1\n    local encoded=\"\"\n    for letter in $message; do\n        case $letter in\n            [a-z])\n                encoded=\"$encoded$(echo $letter | tr '[:lower:]' '[:upper:]')\"\n                ;;\n            [A-Z])\n                encoded=\"$encoded$(echo $letter | tr '[:upper:]' '[:lower:]')\"\n                ;;\n            [0-9])\n                encoded=\"$encoded$letter\"\n                ;;\n            *)\n                echo \"Invalid character: $letter\"\n                ;;\n        esac\n    done\n    for letter in $encoded; do\n        case $letter in\n            [a-z])\n                encoded=\"$encoded$(echo $letter | tr '[:lower:]' '[:upper:]')\"\n                ;;\n            [A-Z])\n                encoded=\"$encoded$(echo $letter | tr '[:upper:]' '[:lower:]')\"\n                ;;\n            [0-9])\n                encoded=\"$encoded$letter\"\n                ;;\n            *)\n                echo \"Invalid character: $letter\"\n                ;;\n        esac\n    done\n    for letter in $encoded; do\n        case $letter in\n            [a-z])\n                encoded=\"$encoded$(echo $letter | tr '[:lower:]' '[:upper:]')\"\n                ;;\n            [A-Z])\n                encoded=\"$encoded$(echo $letter | tr '[:upper:]' '[:lower:]')\"\n                ;;\n            [0-9])\n                encoded=\"$encoded$letter\"\n                ;;\n            *)\n                echo \"Invalid character: $letter\"\n                ;;\n        esac\n    done\n    for letter in $encoded; do\n        case $letter in\n            [a-z])\n                encoded=\"$encoded$(echo $letter | tr '[:lower:]' '[:upper:]')\"\n                ;;\n            [A-Z])\n                encoded=\"$encoded$(echo $letter | tr '[:upper:]' '[:lower:]')\"\n               "], ["#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n    local words=$(echo \"$1\" | tr ' ' '\\n')\n    local boredoms=0\n    for word in $words; do\n        if [[ $word == \"I\"* ]]; then\n            boredoms=$((boredoms + 1))\n        fi\n    done\n    echo $boredoms"], ["#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n  local list=\"$1\"\n  local sum=0\n  local i=0\n  local j=0\n  local len=$(echo \"$list\" | wc -w)\n  for i in $(seq 0 $((len - 1))); do\n    for j in $(seq $((i + 1)) $((len - 1))); do\n      sum=$(($sum + $(echo \"$list\" | cut -d \" \" -f $i) + $(echo \"$list\" | cut -d \" \" -f $j)))\n      if [[ $sum -eq 0 ]]; then\n        echo \"true\"\n        return 0\n      fi\n    done\n  done\n  echo \"false\"\n  return 1"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n  local a=$1\n  local b=$2\n  local c=$3\n  local sum=0\n  if [ $a -gt $b ] && [ $a -gt $c ] && [ $b -gt $c ]; then\n    sum=$(($a + $b + $c))\n    echo \"round($sum / 2)\"\n  else\n    echo \"-1\"\n  fi"], ["#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planet1=$1\n    local planet2=$2\n    local planet_list=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    local planet_list_length=${#planet_list[@]}\n    local planet_list_index=0\n    local planet_list_index_1=0\n    local planet_list_index_2=0\n    local planet_list_index_3=0\n    local planet_list_index_4=0\n    local planet_list_index_5=0\n    local planet_list_index_6=0\n    local planet_list_index_7=0\n    local planet_list_index_8=0\n    local planet_list_index_9=0\n    local planet_list_index_10=0\n    local planet_list_index_11=0\n    local planet_list_index_12=0\n    local planet_list_index_13=0\n    local planet_list_index_14=0\n    local planet_list_index_15=0\n    local planet_list_index_16=0\n   "], ["#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=$1\n  local product=0\n  local i=0\n  local digit\n  for ((i=0; i<${#n}; i++)); do\n    digit=${n:i:1}\n    if [[ $digit -eq 0 ]]; then\n      continue\n    fi\n    if [[ $digit -eq 1 ]]; then\n      product=$((product*10 + digit))\n    else\n      product=$((product*10 + digit))\n    fi\n  done\n  echo $product"], ["#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n  local words=()\n  local word\n  local i=0\n  local len=${#1}\n  local c\n  local last_c\n  local last_i=0\n  local last_len=0\n  local last_word=\"\"\n  local last_word_len=0\n  local last_word_i=0\n  local last_word_c=0\n  local last_word_last_c=0\n  local last_word_last_i=0\n  local last_word_last_len=0\n  local last_word_last_word=\"\"\n  local last_word_last_word_len=0\n  local last_word_last_word_i=0\n  local last_word_last_word_c=0\n  local last_word_last_word_last_c=0\n  local last_word_last_word_last_i=0\n  local last_word_last_word_last_len=0\n  local last_word_last_word_last_word=\"\"\n  local last_word_last_word_last_word_len=0\n  local last_word_last_word_last_word_i=0\n  local last_word_last_word_last_word_c=0\n  local last_word_last_word_last_word_last_c=0\n  local last_word_last_word_last_word_last_i=0\n  local last_word_last_word_last_word_last_len=0\n  local last_word_last_word_last_word_last_word=\"\"\n  local last_word_last_word_last_word_last_word_len=0\n  local last_word_last_word_last_word_last"], ["#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local string=\"$1\"\n    local substring=\"$2\"\n    local count=0\n    local i=0\n    local j=0\n    while [ \"$i\" -lt \"${#string}\" ]; do\n        if [[ \"${string:i:1}\" == \"${substring:0:1}\" ]]; then\n            j=0\n            while [ \"$j\" -lt \"${#substring}\" ]; do\n                if [[ \"${string:i:1}\" == \"${substring:j:1}\" ]]; then\n                    j=$((j + 1))\n                else\n                    break\n                fi\n            done\n            if [ \"$j\" -eq \"${#substring}\" ]; then\n                count=$((count + 1))\n            fi\n        fi\n        i=$((i + 1))\n    done\n    echo \"$count\""], ["#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    local first_arg=$1\n    local second_arg=$2\n    local first_type=$(type -t $first_arg)\n    local second_type=$(type -t $second_arg)\n    if [[ $first_type == \"int\" ]]; then\n        if [[ $second_type == \"int\" ]]; then\n            if [[ $first_arg -gt $second_arg ]]; then\n                echo $first_arg\n            else\n                echo $second_arg\n            fi\n        elif [[ $second_type == \"float\" ]]; then\n            if [[ $first_arg -gt $second_arg ]]; then\n                echo $first_arg\n            else\n                echo $second_arg\n            fi\n        elif [[ $second_type == \"string\" ]]; then\n            if [[ $first_arg -gt $second_arg ]]; then\n                echo $first_arg\n            else\n                echo $second_arg\n            fi\n        fi\n    elif [[ $first_type == \"float\" ]]; then\n        if [[ $second_type == \"int\" ]]; then\n            if [[ $first_arg -gt $second_arg ]]; then\n                echo $first_arg\n            else\n                echo $second_arg\n            fi\n        elif [[ $second_type == \"float\" ]]; then\n            if [[ $first_arg -gt $second_arg ]]; then\n                echo $first_arg\n            else\n                echo $second_arg\n            fi\n        elif [[ $second_type == \"string\" ]]; then\n            if [[ $first_arg -gt $second_arg ]]; then\n                echo $first_arg\n            else\n                echo $second_arg\n            fi\n        fi\n    elif [[ $first_"], ["#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n    local string=\"$1\"\n    local vowels=\"aeiouAEIOU\"\n    local result=\"\"\n    for c in \"${string}\"; do\n        if [[ ! \" ${vowels} \" =~ \" ${c} \" ]]; then\n            result=\"${result}${c}\"\n        fi\n    done\n    echo \"${result}\""], ["#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local list=\"$1\"\n    local list_length=\"${#list}\"\n    local i\n    local j\n    local k\n    local min\n    local max\n    local min_index\n    local max_index\n    local min_value\n    local max_value\n    local min_value_index\n    local max_value_index\n    local min_value_length\n    local max_value_length\n    local min_value_length_index\n    local max_value_length_index\n    local min_value_length_length\n    local max_value_length_length\n    local min_value_length_length_index\n    local max_value_length_length_index\n    local min_value_length_length_length\n    local max_value_length_length_length\n    local min_value_length_length_length_index\n    local max_value_length_length_length_index\n    local min_value_length_length_length_length\n    local max_value_length_length_length_length\n    local min_value_length_length_length_length_index\n    local max_value_length_length_length_length_index\n    local min_value_length_length_length_length_length\n    local max_value_length_length_length_length_length\n    local min_value_length_length_length_length_length_index\n    local max_value_length_length_length_length_length_index\n    local min_value_length_length_length_length_length_length\n    local max_value_length_length_length_length_length_length_index\n    local min_value_length_length_length_length_length_"], ["#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n  local list=\"$1\"\n  local min_index=0\n  local max_index=0\n  local min_value=0\n  local max_value=0\n  local min_index_value=0\n  local max_index_value=0\n  local min_index_value_index=0\n  local max_index_value_index=0\n  local min_index_value_index_value=0\n  local max_index_value_index_value=0\n  local min_index_value_index_value_index=0\n  local max_index_value_index_value_index=0\n  local min_index_value_index_value_index_value=0\n  local max_index_value_index_value_index_value=0\n  local min_index_value_index_value_index_value_index=0\n  local max_index_value_index_value_index_value_index=0\n  local min_index_value_index_value_index_value_index_value=0\n  local max_index_value_index_value_index_value_index_value=0\n  local min_index_value_index_value_index_value_index_value_index=0\n  local max_index_value_index_value_index_value_index_value_index=0\n  local min_index_value_index_value_index_value_index_value_index_value=0\n  local max_index_value_index_value_index_value_index_value_index_value=0\n  local min_index_value_index_value_"], ["#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n    local x=$1\n    local n=$2\n    local i=0\n    local result=false\n    while [ $i -lt $n ]\n    do\n        if [ $((x % n)) -eq 0 ]\n        then\n            result=true\n            break\n        fi\n        i=$((i + 1))\n    done\n    echo $result"], ["#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n  local n=$1\n  local a=1\n  local b=1\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a1=0\n  local b1=0\n  local c1=0\n  local d1=0\n  local e1=0\n  local f1=0\n  local g1=0\n  local h1=0\n  local i1=0\n  local j1=0\n  local k1=0\n  local l1=0\n  local m1=0\n  local n1=0\n  local o1=0\n  local p1=0\n  local q1=0\n  local r1=0\n  local s1=0\n  local t1=0\n  local u1=0\n  local v1=0\n  local w1=0\n  local x1=0\n  local y1=0\n  local z1=0\n  local a2=0\n  local b2=0\n  local c2=0\n  local d2=0\n  local e2=0\n  local f2=0\n  local g2=0\n  local h2=0\n  local i2=0\n  local j2=0\n  local k2=0\n  local l2=0\n  local m2=0\n  local n2=0\n  local o2=0\n  local p2=0\n  local q2=0"], ["#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n    local list=\"$1\"\n    local sorted_list=()\n    local sum=0\n    local index=0\n    local item\n    for item in $list; do\n        sum=$(($sum + ${item##*-}))\n        sorted_list[index]=\"${item}\"\n        index=$(($index + 1))\n    done\n    for ((i=0; i<${#sorted_list[@]}; i++)); do\n        for ((j=i+1; j<${#sorted_list[@]}; j++)); do\n            if [[ ${sorted_list[i]} > ${sorted_list[j]} ]]; then\n                sorted_list[i], sorted_list[j]=\"${sorted_list[j]}, ${sorted_list[i]}\"\n            fi\n        done\n    done\n    echo \"${sorted_list[@]}\""], ["#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n  local list=\"$1\"\n  local threshold=\"$2\"\n  local i\n  local j\n  local diff\n  local min_diff\n  local min_i\n  local min_j\n  local min_diff_i\n  local min_diff_j\n  local min_diff_i_j\n  local min_diff_i_j_i\n  local min_diff_i_j_j\n  local min_diff_i_j_i_j\n  local min_diff_i_j_i_j_i\n  local min_diff_i_j_i_j_j\n  local min_diff_i_j_i_j_i_j\n  local min_diff_i_j_i_j_i_j_i\n  local min_diff_i_j_i_j_i_j_j\n  local min_diff_i_j_i_j_i_j_i_j\n  local min_diff_i_j_i_j_i_j_i_j_i\n  local min_diff_i_j_i_j_i_j_i_j_j\n  local min_diff_i_j_i_j_i_j_i_j_i_j\n  local min_diff_i_j_i_j_i_j_i_j_i_j_i\n  local min_diff_i_j_i_j_i_j_i_j_i_j_j\n  local min_diff_i_j_i_j_i_j_i_j_i_j_i_j\n  local min_diff_i_j_i_j_i_j_i_j_i_j_"], ["#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n    local string=\"$1\"\n    local palindrome=\"\"\n    local longest_palindrome=\"\"\n    local longest_palindrome_length=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0"], ["#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n    local a=\"$1\"\n    local b=\"$2\"\n    local result=\"\"\n    local i=0\n    local j=0\n    while [ $i -lt ${#a} ] && [ $j -lt ${#b} ]; do\n        if [ \"${a:$i:1}\" = \"${b:$j:1}\" ]; then\n            result=\"${result}0\"\n        else\n            result=\"${result}1\"\n        fi\n        i=$((i+1))\n        j=$((j+1))\n    done\n    while [ $i -lt ${#a} ]; do\n        result=\"${result}0${a:$i:1}\"\n        i=$((i+1))\n    done\n    while [ $j -lt ${#b} ]; do\n        result=\"${result}1${b:$j:1}\"\n        j=$((j+1))\n    done\n    echo \"$result\""], ["#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    local n=$1\n    local i=1\n    local result=1\n    while [ $i -le $n ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n    echo $result"], ["#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n    local arr=$1\n    local k=$2\n    local sum=0\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    while [ $i -lt $k ]; do\n        if [ ${#arr[$i]} -gt 2 ]; then\n            sum=$(($sum + ${arr[$i]}))\n        fi\n        i=$(($i + 1))\n    done\n    while [ $j -lt $len ]; do\n        if [ ${#arr[$j]} -gt 2 ]; then\n            sum=$(($sum + ${arr[$j]}))\n        fi\n        j=$(($j + 1))\n    done\n    echo $sum"], ["#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    if [ $n -eq 0 ]; then\n        echo 0\n    elif [ $n -eq 1 ]; then\n        echo 0\n    elif [ $n -eq 2 ]; then\n        echo 2\n    elif [ $n -eq 3 ]; then\n        echo 0\n    else\n        a=$(fib4 $((n-1)))\n        b=$(fib4 $((n-2)))\n        c=$(fib4 $((n-3)))\n        d=$(fib4 $((n-4)))\n        e=$((a+b+c+d))\n        echo $e\n    fi"], ["#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n    local list=\"$1\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local"], ["#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    local s=\"$1\"\n    local n=\"$2\"\n    local words=()\n    local word\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h="], ["#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local sum=0\n  local i=0\n  local j=0\n  local len=${#q}\n  local len_q=$((len-1))\n  local len_q_half=$((len_q/2))\n  local len_q_half_plus_1=$((len_q_half+1))\n  local len_q_half_minus_1=$((len_q_half-1))\n  local len_q_half_plus_2=$((len_q_half+2))\n  local len_q_half_minus_2=$((len_q_half-2))\n  local len_q_half_plus_3=$((len_q_half+3))\n  local len_q_half_minus_3=$((len_q_half-3))\n  local len_q_half_plus_4=$((len_q_half+4))\n  local len_q_half_minus_4=$((len_q_half-4))\n  local len_q_half_plus_5=$((len_q_"], ["#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n  local n=$1\n  local a=0\n  local b=1\n  local c=$a\n  for ((i=0; i<$n; i++)); do\n    a=$b\n    b=$c\n    c=$(($a+$b))\n  done\n  echo $c"], ["#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    local class=\"$1\"\n    local extensions=($2)\n    local strongest_extension=\"\"\n    local strongest_strength=0\n    for extension in \"${extensions[@]}\"; do\n        local extension_strength=$(echo \"$extension\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'"], ["#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n    local str1=$1\n    local str2=$2\n    local stack1=\"\"\n    local stack2=\"\"\n    local i=0\n    local j=0\n    local len1=${#str1}\n    local len2=${#str2}\n    local len=$((len1 + len2))\n    while [ $i -lt $len1 ] && [ $j -lt $len2 ]; do\n        if [[ \"${str1:$i:1}\" == \"(\" ]]; then\n            stack1+=\"${str1:$i:1}\"\n            i=$((i + 1))\n        elif [[ \"${str2:$j:1}\" == \")\" ]]; then\n            stack2+=\"${str2:$j:1}\"\n            j=$((j + 1))\n        elif [[ \"${str1:$i:1}\" == \"${str2:$j:1}\" ]]; then\n            stack1+=\"${str1:$i:1}\"\n            stack2+=\"${str2:$j:1}\"\n            i=$((i + 1))\n            j=$((j + 1))\n        elif [[ \"${str1:$i:1}\" == \")\" ]]; then\n            stack1+=\"${str1:$i:1}\"\n            stack2+=\"${str2:$j:1}\"\n            i=$((i + 1))\n        elif [[ \"${str2:$j:1}\" == \"(\" ]]; then\n            stack1+=\"${str1:$i:1}\"\n            stack2+=\"${str2:$j:1}\"\n            j=$((j + 1))\n        fi\n    done\n    if [[ $i -eq"], ["#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n    local list=\"$1\"\n    local smallest=\"$1\"\n    local smallest_index=0\n    local smallest_value=\"$1\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x="], ["#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  local a=$1\n  local b=$2\n  local c=$3\n  if [ $a -eq $b -o $a -eq $c -o $b -eq $c ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n  local number=\"$1\"\n  local integer_part\n  integer_part=$(echo \"$number\" | cut -d. -f1)\n  echo \"$number\" | cut -d. -f2"], ["#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n  local list=\"$1\"\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local"], ["#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    local n=$1\n    local x=$2\n    local y=$3\n    if [[ $n -eq 2 ]]; then\n        echo $x\n    elif [[ $n -eq 3 ]]; then\n        echo $x\n    elif [[ $n -eq 5 ]]; then\n        echo $x\n    elif [[ $n -eq 7 ]]; then\n        echo $x\n    elif [[ $n -eq 11 ]]; then\n        echo $x\n    elif [[ $n -eq 13 ]]; then\n        echo $x\n    elif [[ $n -eq 17 ]]; then\n        echo $x\n    elif [[ $n -eq 19 ]]; then\n        echo $x\n    elif [[ $n -eq 23 ]]; then\n        echo $x\n    elif [[ $n -eq 29 ]]; then\n        echo $x\n    elif [[ $n -eq 31 ]]; then\n        echo $x\n    elif [[ $n -eq 37 ]]; then\n        echo $x\n    elif [[ $n -eq 41 ]]; then\n        echo $x\n    elif [[ $n -eq 43 ]]; then\n        echo $x\n    elif [[ $n -eq 47 ]]; then\n        echo $x\n    elif [[ $n -eq 53 ]]; then\n        echo $x\n    elif [[ $n -eq 59 ]]; then\n        echo $x\n    elif [[ $n -eq 61 ]]; then\n        echo $x\n    elif [[ $n -eq 67 ]]; then\n        echo $x\n    elif [[ $n -eq 71 ]]; then\n        echo $x\n    elif [[ $n -eq 73 ]]; then\n        echo $x\n    elif [[ $n -eq 79 ]]; then\n        echo $x\n    elif [[ $n -eq 83 ]]; then\n        echo $x\n    elif [[ $n -eq 89 ]]; then\n        echo"], ["#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n    local r=$((n % p))\n    if [ $r -eq 0 ]; then\n        echo $n\n    else\n        echo $r\n    fi"], ["#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n    local number=$1\n    local even_digits=0\n    local odd_digits=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n   "], ["#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=\"$1\"\n    local len=\"${#s}\"\n    if [[ $len -lt 3 ]]; then\n        echo \"false\"\n    else\n        local i=0\n        while [[ $i -lt $len ]]; do\n            local j=$((i + 2))\n            if [[ $j -ge $len ]]; then\n                break\n            fi\n            if [[ \"${s:$i:1}\" == \"${s:$j:1}\" ]]; then\n                echo \"false\"\n                break\n            fi\n            i=$j\n        done\n        echo \"true\"\n    fi"], ["#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local n=$1\n  local i=2\n  while [ $i -le $n ]; do\n    if [ $n % $i -eq 0 ]; then\n      n=$((n / $i))\n    else\n      i=$((i + 1))\n    fi\n  done\n  echo $n"], ["#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n  local sum=0\n  for i in \"$1\"\n  do\n    sum=$(($sum + $(echo \"$i\" | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]')))\n  done\n  echo $sum"], ["#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n    local list=\"$1\"\n    local min_val=\"$(echo \"$list\" | awk '{print $1}')\"\n    local max_val=\"$(echo \"$list\" | awk '{print $NF}')\"\n    local range=\"$(echo \"$max_val - $min_val\" | bc)\"\n    local step=\"$(echo \"$range / (NR - 1)\" | bc)\"\n    local i=0\n    local result=\"\"\n    for val in $list; do\n        result+='\"'$(echo \"$val - $min_val\" | bc)'\"'\n        if [ \"$i\" -lt \"$(echo \"$NR - 1\" | bc)\" ]; then\n            result+=' '\n        fi\n        i=$((i + 1))\n    done\n    echo \"$result\""], ["#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n    local list=\"$1\"\n    local sum=0\n    local i=0\n    local j=0\n    local len=$(echo \"$list\" | wc -w)\n    while [ $i -lt $len ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            j=$((i + 1))\n            while [ $j -lt $len ]; do\n                if [ $((j % 2)) -eq 1 ]; then\n                    sum=$(($sum + $list[$j]))\n                fi\n                j=$((j + 1))\n            done\n        fi\n        i=$((i + 1))\n    done\n    echo $sum"], ["#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    local -a arr=($1)\n    local smallest_even_value\n    local smallest_even_index\n    local smallest_value\n    local smallest_index\n    local smallest_value_index\n    local smallest_even_value_index\n    local smallest_even_value_index_2\n    local smallest_even_value_index_3\n    local smallest_even_value_index_4\n    local smallest_even_value_index_5\n    local smallest_even_value_index_6\n    local smallest_even_value_index_7\n    local smallest_even_value_index_8\n    local smallest_even_value_index_9\n    local smallest_even_value_index_10\n    local smallest_even_value_index_11\n    local smallest_even_"], ["#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local a=($(seq 1 $n))\n    local triples=0\n    for i in $(seq 0 $((${#a[@]} - 2))); do\n        for j in $(seq $((i + 1)) $((${#a[@]} - 1))); do\n            for k in $(seq $((j + 1)) ${#a[@]}); do\n                if [[ ${a[i]} + ${a[j]} + ${a[k]} - 3 | bc -l -q -e 'quit' ]]; then\n                    triples=$((triples + 1))\n                fi\n            done\n        done\n    done\n    echo $triples"], ["#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    local lst1=$1\n    local lst2=$2\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0"], ["#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n    local l=(\"$@\")\n    local n=${#l[@]}\n    local m=$((n/2))\n    local i=0\n    local j=$((n-1))\n    local k=$((n/2))\n    local x\n    local y\n    local z\n    local m1\n    local m2\n    local m3\n    local m4\n    local m5\n    local m6\n    local m7\n    local m8\n    local m9\n    local m10\n    local m11\n    local m12\n    local m13\n    local m14\n    local m15\n    local m16\n    local m17\n    local m18\n    local m19\n    local m20\n    local m21\n    local m22\n    local m23\n    local m24\n    local m25\n    local m26\n    local m27\n    local m28\n    local m29\n    local m30\n    local m31\n    local m32\n    local m33\n    local m34\n    local m35\n    local m36\n    local m37\n    local m38\n    local m39\n    local m40\n    local m41\n    local m42\n    local m43\n    local m44\n    local m45\n    local m46\n    local m47\n    local m48\n    local m49\n    local m50\n    local m51\n    local m52\n    local m53\n    local m54\n    local m55\n    local m56\n    local m57\n    local m58\n    local m59\n    local m60\n    local m61\n    local m62\n    local m63\n    local m64\n    local m65\n    local m66\n    local m67\n    local m68\n    local m69\n    local m70\n    local m71\n    local m72\n    local m73\n    local m74\n    local m75\n    local m76\n   "], ["#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n  local length=$1\n  local i=2\n  while [ $i -le $length ]; do\n    if [ $length % $i -eq 0 ]; then\n      return \"false\"\n    fi\n    i=$((i + 1))\n  done\n  return \"true\""], ["#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n  local arr=($1)\n  local len=${#arr[@]}\n  local i=0\n  local j=$((len-1))\n  local min_change=0\n  while [ $i -lt $j ]; do\n    if [ ${arr[$i]} -ne ${arr[$j]} ]; then\n      if [ ${arr[$i]} -gt ${arr[$j]} ]; then\n        arr[$i]=$((arr[$i]-1))\n      else\n        arr[$j]=$((arr[$j]+1))\n      fi\n      min_change=$((min_change+1))\n    fi\n    i=$((i+1))\n    j=$((j-1))\n  done\n  echo $min_change"], ["#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n    local sum=0\n    for i in $1; do\n        sum=$(($sum + $(echo \"$i\" | awk '{print $1}' | awk 'BEGIN{OFMT=\"\"} {print ceil($1)}') * $(echo \"$i\" | awk '{print $1}' | awk 'BEGIN{OFMT=\"\"} {print ceil($1)}')))\n    done\n    echo $sum"], ["#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_length=${#file_name}\n    local file_name_first_letter=${file_name:0:1}\n    local file_name_last_letter=${file_name:file_name_length-1:1}\n    local file_name_first_letter_is_letter=false\n    local file_name_last_letter_is_letter=false\n    local file_name_first_letter_is_digit=false\n    local file_name_last_letter_is_digit=false\n    local file_name_first_letter_is_dot=false\n    local file_name_last_letter_is_dot=false\n    local file_name_first_letter_is_not_letter=false\n    local file_name_last_letter_is_not_letter=false\n    local file_name_first_letter_is_not_digit=false\n    local file_name_last_letter_is_not_digit=false\n    local file_name_first_letter_is_not_dot=false\n    local file_name_last_letter_is_not_dot=false\n    local file_name_first_letter_is_not_in_list=false\n    local file_name_last_letter_is_"], ["#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n  local list=\"$1\"\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local n=0\n  local len=0\n  local found=0\n  local found_i=0\n  local found_j=0\n  local found_k=0\n  local found_n=0\n  local found_len=0\n  local found_sum=0\n  local found_i_prev=0\n  local found_j_prev=0\n  local found_k_prev=0\n  local found_n_prev=0\n  local found_len_prev=0\n  local found_sum_prev=0\n  local found_i_prev_prev=0\n  local found_j_prev_prev=0\n  local found_k_prev_prev=0\n  local found_n_prev_prev=0\n  local found_len_prev_prev=0\n  local found_sum_prev_prev=0\n  local found_i_prev_prev_prev=0\n  local found_j_prev_prev_prev=0\n  local found_k_prev_prev_prev=0\n  local found_n_prev_prev_prev=0\n  local found_len_prev_prev_prev=0\n  local found_sum_prev_prev_prev=0\n  local found_i_prev_prev_prev_prev=0\n  local found_j_prev_prev_prev_prev=0\n  local found_k_prev_"], ["#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    local start1 end1 start2 end2\n    start1=$(echo \"$1\" | cut -d \" \" -f 1)\n    end1=$(echo \"$1\" | cut -d \" \" -f 2)\n    start2=$(echo \"$2\" | cut -d \" \" -f 1)\n    end2=$(echo \"$2\" | cut -d \" \" -f 2)\n    if [[ $start1 -ge $end2 || $start2 -ge $end1 ]]; then\n        echo \"NO\"\n    else\n        echo \"YES\"\n    fi"], ["#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n    local input=\"$1\"\n    local output=()\n    local stack=()\n    local i=0\n    while [ \"$i\" -lt \"${#input}\" ]; do\n        local c=\"${input:$i:1}\"\n        if [ \"$c\" == '(' ]; then\n            stack+=( \"$c\" )\n        elif [ \"$c\" == ')' ]; then\n            if [ -z \"${stack[-1]}\" ]; then\n                stack+=( \"$c\" )\n            else\n                stack+=( \"${stack[-1]}\" )\n                stack+=( \"$c\" )\n            fi\n        fi\n        i=$(( i + 1 ))\n    done\n    while [ \"${#stack[@]}\" -gt 0 ]; do\n        output+=( \"${stack[-1]}\" )\n        stack+=( \"${stack[-1]}\" )\n        stack=(\"${stack[@]:0:$((${#stack[@]} - 1))}\")\n    done\n    echo \"${output[@]}\""], ["#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local scores=($1)\n    local guesses=($2)\n    local result=()\n    for i in \"${!scores[@]}\"; do\n        result[i]=\"$(echo \"${scores[i]} - ${guesses[i]}\" | bc)\"\n    done\n    echo \"${result[@]}\""], ["#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n    local n=$1\n    local count=0\n    for i in $(seq 1 10); do\n        for j in $(seq 1 10); do\n            if [[ $i == 1 || $j == 1 ]]; then\n                count=$((count + 1))\n            fi\n        done\n    done\n    echo $count"], ["#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  local last_char=\"$1\"\n  local last_char_is_a_letter=false\n  local last_char_is_not_a_letter=true\n  local last_char_is_not_a_space=true\n  local last_char_is_not_a_word=true\n  local last_char_is_not_a_punctuation=true\n  local last_char_is_not_a_number=true\n  local last_char_is_not_a_symbol=true\n  local last_char_is_not_a_letter_or_number=true\n  local last_char_is_not_a_letter_or_punctuation=true\n  local last_char_is_not_a_letter_or_symbol=true\n  local last_char_is_not_a_letter_or_number_or_punctuation=true\n  local last_char_is_not_a_letter_or_number_or_symbol=true\n  local last_char_is_not_a_letter_or_number_or_punctuation_or_symbol=true\n  local last_char_is_not_a_letter_or_number_or_punctuation_or_symbol_or_space=true\n  local last_char_is_not_a_letter_or_number_or_punctuation_or_symbol_or_space_or_word=true\n  local last_char_is_not"], ["#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n    if [ -z \"$1\" ]; then\n        echo \"false\"\n    else\n        if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n            if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n                if [[ $1 =~ ^[0-9]{2}$ ]]; then\n                    if [[ $1 =~ ^[0-9]{2}$ ]]; then\n                        if [[ $1 =~ ^[0-9]{2}$ ]]; then\n                            if [[ $1 =~ ^[0-9]{2}$ ]]; then\n                                if [[ $1 =~ ^[0-9]{2}$ ]]; then\n                                    if [[ $1 =~ ^[0-9]{2}$ ]]; then\n                                        if [[ $1 =~ ^[0-9]{2"], ["#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n    local sum=0\n    local i=0\n    local n=$#\n    local arr=($1)\n    for i in ${arr[@]}; do\n        sum=$(($sum + ${i##*-}))\n    done\n    echo $sum"], ["#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n    local str=\"$1\"\n    local arr=($(echo \"$str\" | tr ' ' '\\n'))\n    local arr_len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n   "], ["#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n  local str=\"$1\"\n  local len=\"${#str}\"\n  local i=0\n  local j=$((len - 1))\n  while [ $i -lt $j ]; do\n    if [ \"${str:$i:1}\" != \"${str:$j:1}\" ]; then\n      return 1\n    fi\n    i=$((i + 1))\n    j=$((j - 1))\n  done\n  return 0"], ["#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local word=$1\n  local vowel=\"\"\n  local consonant=\"\"\n  local i=0\n  local j=0\n  local len=${#word}\n  local vowel_count=0\n  local consonant_count=0\n  local vowel_index=0\n  local consonant_index=0\n  local vowel_index_prev=0\n  local consonant_index_prev=0\n  local vowel_index_next=0\n  local consonant_index_next=0\n  local vowel_index_prev_prev=0\n  local consonant_index_prev_prev=0\n  local vowel_index_prev_next=0\n  local consonant_index_prev_next=0\n  local vowel_index_next_next=0\n  local consonant_index_next_next=0\n  local vowel_index_prev_prev_prev=0\n  local consonant_index_prev_prev_prev=0\n  local vowel_index_prev_prev_next=0\n  local consonant_index_prev_prev_next=0\n  local vowel_index_prev_next_next=0\n  local consonant_index_prev_next_next=0\n  local vowel_index_next_next_next=0\n  local consonant_index_next_next_next=0\n  local vowel_index_prev_prev_prev_prev=0\n  local consonant_index_prev_prev_prev_prev"], ["#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n  local n=$1\n  local i=2\n  while [ $i -le $n ]; do\n    if [ $((n % i)) -eq 0 ]; then\n      return 1\n    fi\n    i=$((i + 1))\n  done\n  return 0"], ["#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n    local x=$(echo \"$1\" | cut -d '/' -f 1)\n    local n=$(echo \"$2\" | cut -d '/' -f 1)\n    local x_num=$(echo \"$x\" | cut -d '/' -f 1)\n    local x_den=$(echo \"$x\" | cut -d '/' -f 2)\n    local n_num=$(echo \"$n\" | cut -d '/' -f 1)\n    local n_den=$(echo \"$n\" | cut -d '/' -f 2)\n    local x_num_den=$(echo \"$x_num/$x_den\")\n    local n_num_den=$(echo \"$n_num/$n_den\")\n    local x_num_den_mul_n_num_den=$(echo \"$x_num_den * $n_num_den\")\n    local x_num_den_mul_n_num_den_int=$(echo \"$x_num_den_mul_n_num_den | bc -l\")\n    if [ \"$x_num_den_mul_n_num_den_int\" -eq \"$x_num_den_mul_n_num_den_int\" ] 2>/dev/null; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n    local hex_digits=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    local prime_digits=\"2357\"\n    local prime_count=0\n    for i in $hex_digits; do\n        if [[ $prime_digits =~ $i ]]; then\n            prime_count=$((prime_count+1))\n        fi\n    done\n    echo $prime_count"], ["#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n    local sentence=\"$1\"\n    local words=()\n    local word\n    local i\n    local j\n    local len\n    local prime_numbers=()\n    local prime_number\n    local prime_number_len\n    local prime_number_len_i\n    local prime_number_len_j\n    local prime_number_len_k\n    local prime_number_len_l\n    local prime_number_len_m\n    local prime_number_len_n\n    local prime_number_len_o\n    local prime_number_len_p\n    local prime_number_len_q\n    local prime_number_len_r\n    local prime_number_len_s\n    local prime_number_len_t\n    local prime_number_len_u\n    local prime_number_len_v\n    local prime_number_len_w\n    local prime_number_len_x\n    local prime_number_len_y\n    local prime_number_len_z\n    local prime_number_len_a\n    local prime_number_len_b\n    local prime_number_len_c\n    local prime_number_len_d\n    local prime_number_len_e\n    local prime_number_len_f\n    local prime_number_len_g\n    local prime_number_len_h\n    local prime_number_len_i\n    local prime_number_len_j\n    local prime_number_len_k\n    local prime_number_len_l\n    local prime_number_len_m\n    local prime_number_len_n\n    local prime_number_len_o\n    local prime_"], ["#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local input=$1\n  local output=\"\"\n  local letter=\"\"\n  local count=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local"], ["#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n    local lst=\"$1\"\n    local x=\"$2\"\n    local row_num=0\n    local row_list=()\n    local row_list_sorted=()\n    local col_num=0\n    local col_list=()\n    local col_list_sorted=()\n    local row_list_sorted_index=0\n    local col_list_sorted_index=0\n    local row_list_index=0\n    local col_list_index=0\n    local row_list_index_prev=0\n    local col_list_index_prev=0\n    local row_list_index_next=0\n    local col_list_index_next=0\n    local row_list_index_prev_prev=0\n    local col_list_index_prev_prev=0\n    local row_list_index_prev_next=0\n    local col_list_index_prev_next=0\n    local row_list_index_next_prev=0\n    local col_list_index_next"], ["#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n  local n=$1\n  local i=1\n  local j=1\n  local k=1\n  local l=1\n  local m=1\n  local o=1\n  local p=1\n  local q=1\n  local r=1\n  local s=1\n  local t=1\n  local u=1\n  local v=1\n  local w=1\n  local x=1\n  local y=1\n  local z=1\n  local a=1\n  local b=1\n  local c=1\n  local d=1\n  local e=1\n  local f=1\n  local g=1\n  local h=1\n  local i=1\n  local j=1\n  local k=1\n  local l=1\n  local m=1\n  local o=1\n  local p=1\n  local q=1\n  local r=1\n  local s=1\n  local t=1\n  local u=1\n  local v=1\n  local w=1\n  local x=1\n  local y=1\n  local z=1\n  local a=1\n  local b=1\n  local c=1\n  local d"], ["#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n  local arr=($1)\n  local max_index=-1\n  local i=0\n  local j=0\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ $j -lt ${#arr[@]} ]; then\n      if [ ${arr[$i]} -le ${arr[$j]} ]; then\n        j=$((j + 1))\n      else\n        max_index=$i\n        i=$((i + 1))\n      fi\n    else\n      max_index=$i\n      break\n    fi\n  done\n  echo $max_index"], ["#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n    local numbers=\"$1\"\n    local sorted_numbers=\"\"\n    local number\n    for number in $numbers; do\n        sorted_numbers=\"$sorted_numbers $number\"\n    done\n    echo \"$sorted_numbers\""], ["#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n    local digits=$(echo \"$x\" | sed 's/[^0-9]//g')\n    local len=${#digits}\n    local result=$(echo \"$digits\" | sed -e \"s/./&$digits/\" | sed -e \"s/.$digits//\")\n    if [ $shift -gt $len ]; then\n        echo \"$result\" | sed -e \"s/.$digits//\" | sed -e \"s/./&$digits/\"\n    else\n        echo \"$result\" | sed -e \"s/.$digits//\" | sed -e \"s/.$digits/$digits/\"\n    fi"], ["#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n    local lst=$1\n    local sum=0\n    for i in $lst; do\n        if [ $(($i % 3)) -eq 0 ]; then\n            sum=$(($sum + $i * $i))\n        elif [ $(($i % 4)) -eq 0 ]; then\n            sum=$(($sum + $i * $i * $i))\n        fi\n    done\n    echo $sum"], ["#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n    local input=\"$1\"\n    local max_prime=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j="], ["#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n    local sum=\"\"\n    local product=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h="], ["#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    local x=$1\n    local y=$2\n    local max_even_num=0\n    local i=0\n    for ((i=x; i<=y; i++)); do\n        if (( i % 2 == 0 )); then\n            if (( i > max_even_num )); then\n                max_even_num=$i\n            fi\n        fi\n    done\n    echo $max_even_num"], ["#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n    local list=\"$1\"\n    local largest_negative=None\n    local smallest_positive=None\n    local i\n    for i in $list; do\n        if [[ $i =~ ^- ]]; then\n            if [[ $largest_negative == None ]]; then\n                largest_negative=$i\n            else\n                if [[ $i -gt $largest_negative ]]; then\n                    largest_negative=$i\n                fi\n            fi\n        elif [[ $i =~ ^[0-9]+$ ]]; then\n            if [[ $smallest_positive == None ]]; then\n                smallest_positive=$i\n            else\n                if [[ $i -lt $smallest_positive ]]; then\n                    smallest_positive=$i\n                fi\n            fi\n        fi\n    done\n    echo $largest_negative $smallest_positive"], ["#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n    local string=\"$1\"\n    local count=0\n    for c in \"${string// /}\"; do\n        if [[ -z \"$(echo \"$string\" | grep -o \"${c}\")\" ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo \"$count\""], ["#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local stones\n  local i\n  local j\n  local k\n  local l\n  local m\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local"], ["#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n    local arr=(\"$@\")\n    local sum=0\n    for i in \"${arr[@]}\"; do\n        local sign=$(echo \"$i\" | sed 's/^-//')\n        local magnitude=$(echo \"$i\" | sed 's/^0*//')\n        sum=$(($sum + $magnitude * $sign))\n    done\n    echo \"$sum\""], ["#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n  local array=($1)\n  local sum=0\n  local min=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local"], ["#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n  local n=$1\n  local i=0\n  local result=\"\"\n  while [ $i -lt $n ]; do\n    result=\"$result $i\"\n    i=$((i + 1))\n  done\n  echo \"$result\""], ["#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n    local word1=$1\n    local word2=$2\n    local len1=${#word1}\n    local len2=${#word2}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0"], ["#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  local prev=\"\"\n  for i in $list; do\n    if [[ -z \"$prev\" ]]; then\n      prev=\"$i\"\n      continue\n    fi\n    if [[ \"$prev\" -gt \"$i\" ]]; then\n      return 1\n    elif [[ \"$prev\" -lt \"$i\" ]]; then\n      return 0\n    fi\n    prev=\"$i\"\n  done\n  return 0"], ["#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n    local longest_string=\"\"\n    local longest_length=0\n    for string in $1; do\n        if [ ${#string} -gt ${longest_length} ]; then\n            longest_string=${string}\n            longest_length=${#string}\n        fi\n    done\n    echo ${longest_string}"], ["#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n  local l=\"$1\"\n  local t=\"$2\"\n  local i\n  for i in $l; do\n    if [ \"$i\" -ge \"$t\" ]; then\n      return 1\n    fi\n  done\n  return 0"], ["#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n    local number=$1\n    local i=2\n    local j=2\n    local k=2\n    local l=2\n    local m=2\n    local n=2\n    local o=2\n    local p=2\n    local q=2\n    local r=2\n    local s=2\n    local t=2\n    local u=2\n    local v=2\n    local w=2\n    local x=2\n    local y=2\n    local z=2\n    local a=2\n    local b=2\n    local c=2\n    local d=2\n    local e=2\n    local f=2\n    local g=2\n    local h=2\n    local i=2\n    local j=2\n    local k=2\n    local l=2\n    local m=2\n    local n=2\n    local o=2\n    local p=2\n    local q=2\n    local r=2\n    local s=2\n    local t=2\n    local u=2\n    local v=2\n    local w=2\n    local x=2\n    local y=2\n    local z=2\n    local a=2\n    local b=2\n    local c=2\n    local d=2\n    local e=2\n    local f=2\n    local g=2\n    local h=2\n    local i=2\n    local j=2\n    local k=2\n    local l=2\n    local m=2\n    local n=2\n    local o=2\n    local p=2\n    local q=2\n    local r=2\n    local s=2\n    local t=2\n    local u=2\n    local v=2\n    local w=2\n    local x=2\n    local y=2\n    local z=2\n    local a=2\n    local b=2\n    local c=2\n    local d=2\n    local e=2\n    local f=2\n    local g=2\n    local h=2\n    local i=2\n    local j=2\n    local k=2\n   "], ["#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n  local list=\"$1\"\n  local positive=()\n  for i in $list; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      positive+=(\"$i\")\n    fi\n  done\n  echo \"${positive[@]}\""], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n    local l=\"$1\"\n    local l_sorted=()\n    local l_third=()\n    local i=0\n    while [ $i -lt ${#l} ]; do\n        if [ $((i % 3)) -eq 0 ]; then\n            l_third+=(\"$l\"[$i])\n        else\n            l_sorted+=(\"$l\"[$i])\n        fi\n        i=$((i + 1))\n    done\n    echo \"${l_sorted[@]}\""], ["#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local output=()\n    local level=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0"], ["#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n    local side_length=$1\n    local high_return_area=$2\n    local area=$((side_length * high_return_area / 2))\n    echo $area"], ["#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    local unit_1=$1\n    local unit_2=$2\n    local unit_1_digit=$(echo $unit_1 | cut -c1)\n    local unit_2_digit=$(echo $unit_2 | cut -c1)\n    local unit_1_digit_product=$(echo $unit_1_digit*$unit_2_digit | bc)\n    local unit_1_digit_product_string=$(echo $unit_1_digit_product | sed 's/^0*//')\n    echo $unit_1_digit_product_string"], ["#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n  local mean\n  mean=$(echo \"$1\" | awk '{sum+=$1} END {print sum/NR}')\n  echo $(echo \"$1\" | awk '{print abs($1 - $2)}') | awk '{sum+=$1} END {print sum/NR}'"], ["#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n    local IFS=$'\\n'\n    local a=($(echo \"$1\" | tr ' ' '\\n'))\n    local b=($(echo \"$2\" | tr ' ' '\\n'))\n    local c=()\n    for i in \"${a[@]}\"; do\n        for j in \"${b[@]}\"; do\n            if [[ \"$i\" == \"$j\" ]]; then\n                c+=(\"$i\")\n            fi\n        done\n    done\n    echo \"${c[@]}\" | sort -u"], ["#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n    local num=$1\n    local roman=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d"], ["#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n    local apples=$1\n    local oranges=$2\n    local fruits=$((apples + oranges))\n    local mango=$((fruits - 19))\n    echo $mango"], ["#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    local s=$1\n    local c=$2\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0"], ["#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n    local a=$1\n    local b=$2\n    local c=$a\n    local d=$b\n    while [ $c -ne 0 ]\n    do\n        c=$((c % d))\n        d=$((d % c))\n    done\n    echo $d"], ["#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n    local words\n    words=$(echo \"$1\" | tr ' ' ',')\n    echo \"$words\" | tr ',' ' '"], ["#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=($1)\n  local sorted=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r"], ["#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n    local IFS=\" \"\n    echo \"$1\""], ["#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n    local list=$1\n    local sorted_list=()\n    local i=0\n    local j=0\n    local len=${#list[@]}\n    local len_odd=0\n    local len_even=0\n    local len_odd_prev=0\n    local len_even_prev=0\n    local len_odd_prev_prev=0\n    local len_even_prev_prev=0\n    local len_odd_prev_prev_prev=0\n    local len_even_prev_prev_prev=0\n    local len_odd_prev_prev_prev_prev=0\n    local len_even_prev_prev_prev_prev=0\n    local len_odd_prev_prev_prev_prev_prev=0\n    local len_even_prev_prev_prev_prev_prev=0\n    local len_odd_prev_prev_prev_prev_prev_prev=0\n    local len_even_prev_prev_prev_prev_prev_prev=0\n    local len_odd_prev_prev_prev_prev_prev_prev_prev=0\n    local len_even_prev_prev_prev_prev_prev_prev_prev=0\n    local len_odd_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local len_even_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local len"], ["#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local number=$1\n  local closest_integer\n  local closest_integer_abs\n  local closest_integer_abs_diff\n  local closest_integer_diff\n  local closest_integer_diff_abs\n  local closest_integer_diff_abs_diff\n  local closest_integer_diff_diff\n  local closest_integer_diff_diff_abs\n  local closest_integer_diff_diff_abs_diff\n  local closest_integer_diff_diff_diff\n  local closest_integer_diff_diff_diff_abs\n  local closest_integer_diff_diff_diff_abs_diff\n  local closest_integer_diff_diff_diff_diff\n  local closest_integer_diff_diff_diff_diff_abs\n  local closest_integer_diff_diff_diff_diff_abs_diff\n  local closest_integer_diff_diff_diff_diff_diff\n  local closest_integer_diff_diff_diff_diff_diff_abs\n  local closest_integer_diff_diff_diff_diff_diff_abs_diff\n  local closest_integer_diff_diff_diff_diff_diff_diff\n  local closest_integer_diff_diff_diff_diff_diff_diff_abs\n  local closest_integer_diff_diff_diff_diff_diff_diff_abs_diff\n  local closest_integer_diff_diff_diff_diff_diff_diff_diff\n  local closest_integer_diff_diff_diff_diff_diff_diff_abs\n  local closest_integer_diff_diff_diff_diff_"], ["#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n    local vowels=\"aeiou\"\n    local count=0\n    for i in $vowels; do\n        if [[ $1 == *$i* ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count"], ["#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n    local max_unique=0\n    local max_word=\"\"\n    local word=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local"], ["#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n  local text=\"$1\"\n  if [ -z \"$text\" ]; then\n    echo \"None\"\n  else\n    echo \"$(echo -n \"$text\" | md5sum | awk '{print $1}')\"\n  fi"], ["#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    local x=$1\n    local base=$2\n    local result=\"\"\n    local i=0\n    while [ $x -gt 0 ]; do\n        local remainder=$((x % base))\n        result=\"$remainder$result\"\n        x=$((x / base))\n        i=$((i + 1))\n    done\n    echo \"$result\""], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n  local a=$1\n  local b=$2\n  local c=$3\n  local s=$(($a + $b + $c))\n  if [ $s -eq 180 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    local gpa=$1\n    local letter_grade=\"\"\n    if [ $gpa -ge 4.0 ]; then\n        letter_grade=\"A+\"\n    elif [ $gpa -ge 3.7 ]; then\n        letter_grade=\"A\"\n    elif [ $gpa -ge 3.3 ]; then\n        letter_grade=\"A-\"\n    elif [ $gpa -ge 3.0 ]; then\n        letter_grade=\"B+\"\n    elif [ $gpa -ge 2.7 ]; then\n        letter_grade=\"B\"\n    elif [ $gpa -ge 2.3 ]; then\n        letter_grade=\"B-\"\n    elif [ $gpa -ge 2.0 ]; then\n        letter_grade=\"C+\"\n    elif [ $gpa -ge 1.7 ]; then\n        letter_grade=\"C\"\n    elif [ $gpa -ge 1.3 ]; then\n        letter_grade=\"C-\"\n    elif [ $gpa -"], ["#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n    local delimeter=\"$2\"\n    local numbers=\"$1\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local len=\"${#numbers}\"\n    local len_result=\"${#result}\"\n    while [ $i -lt $len ]; do\n        if [ $j -eq 0 ]; then\n            result=\"${numbers:$i:1}\"\n            j=$((j+1))\n        elif [ $j -eq $len_result ]; then\n            result=\"${result}${numbers:$i:1}\"\n            j=$((j+1))\n        else\n            result=\"${result}${delimeter}${numbers:$i:1}\"\n            j=$((j+1))\n        fi\n        i=$((i+1))\n    done\n    echo \"$result\""], ["#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n    local array=($1)\n    local count=0\n    for i in \"${array[@]}\"; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n            if [[ $(echo $i | cut -c1) -gt 10 && $(echo $i | cut -c1) -lt 20 && $(echo $i | cut -c2) -gt 10 && $(echo $i | cut -c2) -lt 20 && $(echo $i | cut -c3) -gt 10 && $(echo $i | cut -c3) -lt 20 && $(echo $i | cut -c4) -gt 10 && $(echo $i | cut -c4) -lt 20 && $(echo $i | cut -c5) -gt 10 && $(echo $i | cut -c5) -lt 20 && $(echo $i | cut -c6) -gt 10 && $(echo $i | cut -c6) -lt 20 ]]; then\n                count=$((count+1))\n            fi\n        fi\n    done\n    echo $count"], ["#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n    local n=$1\n    local sum=0\n    for i in $(seq 1 $n); do\n        sum=$(($sum + $i))\n    done\n    echo $sum"], ["#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local -a uniq_arr\n    for i in \"${arr[@]}\"; do\n        if ! [[ \" ${uniq_arr[@]} \" =~ \" $i \" ]]; then\n            uniq_arr+=(\"$i\")\n        fi\n    done\n    echo \"${uniq_arr[@]}\""], ["#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n  local a=$1\n  local b=$2\n  local i=$a\n  local j=$b\n  local result=()\n  while [ $i -le $j ]; do\n    if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n      if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n        if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n          if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n            if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n              if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n                if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n                  if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n                    if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n                      if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n                        if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n                          if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n                            if [[ $i =~ ^[0-9]+$ && $i =~ ^[0-9]+$ ]]; then\n                              if [["], ["#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n    local -a arr=($1)\n    local -a max_arr=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n   "], ["#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n    local balance=0\n    for i in $1; do\n        case $i in\n            +*) balance=$(($balance + $(echo $i | sed 's/[^0-9]//g'))) ;;\n            -*) balance=$(($balance - $(echo $i | sed 's/[^0-9]//g'))) ;;\n        esac\n    done\n    if [[ $balance -lt 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n    local list=\"$1\"\n    local max_freq=0\n    local max_val=\"\"\n    for val in $list; do\n        if [ $val -gt 0 ]; then\n            if [ $((val * 2)) -gt $max_freq ]; then\n                max_freq=$((val * 2))\n                max_val=$val\n            fi\n        fi\n    done\n    echo $max_val"], ["#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\n    for c in \"$brackets\"; do\n        if [[ \"$c\" == \"(\" ]]; then\n            stack+=\"$c\"\n        elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    return 0"], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n    local l=\"$1\"\n    local l_even=()\n    local l_odd=()\n    local i=0\n    while [ $i -lt ${#l} ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            l_even+=(\"$l[$i]\")\n        else\n            l_odd+=(\"$l[$i]\")\n        fi\n        i=$((i + 1))\n    done\n    local l_sorted=()\n    local i=0\n    while [ $i -lt ${#l_even} ]; do\n        local j=0\n        while [ $j -lt ${#l_odd} ]; do\n            if [ \"$l_even[$i]\" -lt \"$l_odd[$j]\" ]; then\n                l_sorted+=(\"$l_even[$i]\")\n                break\n            fi\n            j=$((j + 1))\n        done\n        l_sorted+=(\"$l_odd[$j]\")\n        i=$((i + 1))\n    done\n    echo \"${l_sorted[@]}\""], ["#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n    local str1=\"$1\"\n    local str2=\"$2\"\n    local len1=\"${#str1}\"\n    local len2=\"${#str2}\"\n    local i\n    for ((i = 0; i < len1; i++)); do\n        if [[ \"${str1:i:1}\" != \"${str2:i:1}\" ]]; then\n            return 1\n        fi\n    done\n    return 0"], ["#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local stack=\n    for c in \"$brackets\"; do\n        if [[ \"$c\" == \"<\" ]]; then\n            stack+=\"$c\"\n        elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    return 0"]]