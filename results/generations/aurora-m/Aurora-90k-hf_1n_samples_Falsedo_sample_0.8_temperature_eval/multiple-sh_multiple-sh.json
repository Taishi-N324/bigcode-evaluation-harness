[["#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n  echo -n \"$1\" | wc -c"], ["#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    local string=$1\n    local alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    local encrypted=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b"], ["#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local csv=$1\n    local key\n    local value\n    local key_case\n    local value_case\n    local key_lower\n    local value_lower\n    local key_upper\n    local value_upper\n    local key_lower_case\n    local value_lower_case\n    local key_upper_case\n    local value_upper_case\n    local key_lower_case_count\n    local key_upper_case_count\n    local value_lower_case_count\n    local value_upper_case_count\n    local key_count\n    local value_count\n    local key_count_lower\n    local key_count_upper\n    local value_count_lower\n    local value_count_upper\n    local key_count_lower_case\n    local key_count_upper_case\n    local value_count_lower_case\n    local value_count_upper_case\n    local key_count_lower_case_count\n    local key_count_upper_case_count\n    local value_count_lower_case_count\n    local value_count_upper_case_count\n    local key_count_lower_case_count_lower\n    local key_count_upper_case_count_lower\n    local value_count_lower_case_count_lower\n    local value_count_upper_case_count_lower\n    local value_count_lower_case_count_upper\n    local value_count_upper_"], ["#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n    local list=$1\n    local result=\"\"\n    local i=0\n    local j=0\n    local len=${#list}\n    while [ $i -lt $len ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            result=\"$result ${list[$i]}\"\n        fi\n        i=$((i + 1))\n    done\n    echo $result"], ["#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n    local text=$1\n    local result=\"\"\n    local last_char=\"\"\n    local char=\"\"\n    local space_count=0\n    local space_count_max=2\n    for char in $text; do\n        if [ \"$char\" = \" \" ]; then\n            space_count=$((space_count+1))\n        else\n            if [ \"$space_count\" -gt \"$space_count_max\" ]; then\n                result+=\"-\"\n            else\n                result+=\"_\"\n            fi\n            space_count=0\n        fi\n        result+=\"$char\"\n    done\n    echo \"$result\""], ["#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a1=0\n  local b1=0\n  local c1=0\n  local a2=0\n  local b2=0\n  local c2=0\n  local a3=0\n  local b3=0\n  local c3=0\n  local a4=0\n  local b4=0\n  local c4=0\n  local a5=0\n  local b5=0\n  local c5=0\n  local a6=0\n  local b6=0\n  local c6=0\n  local a7=0\n  local b7=0\n  local c7=0\n  local a8=0\n  local b8=0\n  local c8=0\n  local a9=0\n  local b9=0\n  local c9=0\n  local a10=0\n  local b10=0\n  local c10=0\n  local a11=0\n  local b11=0\n  local c11=0\n  local a12=0\n  local b12=0\n  local c12=0\n  local a13=0\n "], ["#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n    local input_list=$1\n    local sum=0\n    local i=0\n    local j=0\n    local number\n    local number_length\n    local number_length_odd\n    local number_length_even\n    local number_length_odd_square\n    local number_length_even_square\n    local number_length_odd_square_double\n    local number_length_even_square_double\n    local number_length_odd_square_double_sum\n    local number_length_even_square_double_sum\n    local number_length_odd_square_double_sum_double\n    local number_length_even_square_double_sum_double\n    local number_length_odd_square_double_sum_double_sum\n    local number_length_even_square_double_sum_double_sum\n    local number_length_odd_square_double_sum_double_sum_double\n    local number_length_even_square_double_sum_double_sum_double\n    local number_length_odd_square_double_sum_double_sum_double_sum\n    local number_length_even_square_double_sum_double_sum_double_sum\n    local number_length_odd_square_double_sum_double_sum_double_sum_double\n    local number_length_even_square_double_sum_double_sum_double_sum_double\n    local number_length_odd_square_double_sum_double_sum_double_sum_double_sum\n    local number_length_even_square_double_sum_double_sum_double_sum_double_sum\n    local number_length_odd_square"], ["#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n  local -r list=\"$1\"\n  local -r result=()\n  local -r regex='^[0-9]+$'\n  for value in $list; do\n    if [[ $value =~ $regex ]]; then\n      result+=(\"$value\")\n    fi\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n    local n=$1\n    local collisions=0\n    for ((i=1; i<=n; i++)); do\n        for ((j=1; j<=n; j++)); do\n            if (( i + j == n + 1 )); then\n                collisions=$((collisions + 1))\n            fi\n        done\n    done\n    echo $collisions"], ["#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n    local notes=$1\n    local notes_array=()\n    local note_length=0\n    local note_type=\"\"\n    local note_length_type=\"\"\n    local note_length_multiplier=1\n    local note_length_multiplier_type=\"\"\n    local note_length_multiplier_multiplier=1\n    local note_length_multiplier_multiplier_type=\"\"\n    local note_length_multiplier_multiplier_multiplier=1\n    local note_length_multiplier_multiplier_multiplier_type=\"\"\n    local note_length_multiplier_multiplier_multiplier_multiplier=1\n    local note_length_multiplier_multiplier_multiplier_multiplier_type=\"\"\n    local note_length_multiplier_multiplier_multiplier_multiplier_multiplier=1\n    local note_length_multiplier_multiplier_multiplier_multiplier_multiplier_type=\"\"\n    local note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier=1\n    local note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_type=\"\"\n    local note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier=1\n    local note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_type=\"\"\n    local note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier=1\n    local note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_type=\"\"\n    local note_length_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier_multiplier=1\n    local note_length_multiplier_multiplier_multiplier_multiplier"], ["#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n    local remainder\n    local i=0\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        binary=$(printf \"%s%d\" \"$binary\" $remainder)\n        decimal=$((decimal / 2))\n        i=$((i + 1))\n    done\n    printf \"%s%s\" \"db\" \"$binary\""], ["#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n    local string=\"$1\"\n    local prefix=\"\"\n    local result=()\n    local i=0\n    while [ \"$i\" -lt \"${#string}\" ]; do\n        prefix=\"${string:0:$i}\"\n        result+=('\"'$prefix'\"')\n        i=$((i+1))\n    done\n    echo \"${result[@]}\""], ["#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n  echo $(( $1 + $2 ))"], ["#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n  local need=$2\n  local remaining=$3\n  local eaten=0\n  local left=0\n  if [ $number -lt $need ]; then\n    eaten=$number\n    left=0\n  else\n    eaten=$need\n    left=$((remaining - need))\n  fi\n  echo \"\\\"$eaten\\\"\" \"\\\"$left\\\"\""], ["#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n    local capacity=$2\n    local n_rows=$(echo \"$grid\" | wc -l)\n    local n_cols=$(echo \"$grid\" | cut -d' ' -f2 | wc -l)\n    local n_wells=$(echo \"$grid\" | grep -o 1 | wc -l)\n    local n_buckets=$((capacity * n_wells))\n    local buckets=0\n    local wells=0\n    local i=0\n    local j=0\n    local row=0\n    local col=0\n    local bucket=0\n    local well=0\n    local max_bucket=0\n    local max_well=0\n    local max_bucket_row=0\n    local max_bucket_col=0\n    local max_well_row=0\n    local max_well_"], ["#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n    local operator=$1\n    local operand=$2\n    local result=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local"], ["#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'"], ["#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n    local -a result=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local"], ["#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factor\n    local factors=()\n    local factor_count=0\n    local factor_count_max=0\n    local factor_count_min=0\n    local factor_count_sum=0\n    local factor_count_sum_max=0\n    local factor_count_sum_min=0\n    local factor_count_sum_sum=0\n    local factor_count_sum_sum_max=0\n    local factor_count_sum_sum_min=0\n    local factor_count_sum_sum_sum=0\n    local factor_count_sum_sum_sum_max=0\n    local factor_count_sum_sum_sum_min=0\n    local factor_count_sum_sum_sum_sum=0\n    local factor_count_sum_sum_sum_sum_max=0\n    local factor_count_sum_sum_sum_sum_min=0\n    local factor_count_sum_sum_sum_sum_sum=0\n    local factor_count_sum_sum_sum_sum_sum_max=0\n    local factor_count_sum_sum_sum_sum_sum_min=0\n    local factor_count_sum_sum_sum_sum_sum_sum=0\n    local factor_count_sum_sum_sum_sum_sum_sum_max=0\n    local factor_count_sum_sum_sum_sum_sum_sum_min=0\n    local factor_count_sum_sum_sum_sum_sum_sum_sum=0\n    local factor_count_sum_sum_sum_sum_sum_sum_sum_max=0\n    local factor_count_sum_sum_sum_sum_sum_sum"], ["#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n  local n=$1\n  local primes=()\n  local i=2\n  while [ $i -le $n ]; do\n    if is_prime $i; then\n      primes+=($i)\n    fi\n    i=$((i+1))\n  done\n  echo ${primes[@]}"], ["#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n  local list=\"$1\"\n  local unique_list=()\n  local unique_element\n  for unique_element in $list; do\n    if ! echo \"$unique_list\" | grep -q \"$unique_element\"; then\n      unique_list+=(\"$unique_element\")\n    fi\n  done\n  echo \"${unique_list[@]}\""], ["#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n  local result=()\n  local i=0\n  local j=0\n  local len1=${#list1}\n  local len2=${#list2}\n  local len=${#list1}\n  if [ $len -gt $len2 ]; then\n    len=$len2\n  fi\n  while [ $i -lt $len ]; do\n    local match=0\n    local char1=${list1:$i:1}\n    local char2=${list2:$i:1}\n    for j in $(seq 0 $len2); do\n      if [ ${list2:$j:1} = ${list1:$i:1} ]; then\n        match=1\n        break\n      fi\n    done\n    if [ $match -eq 0 ]; then\n      result+=($char1)\n    fi\n    i=$((i+1))\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n    local max_element\n    max_element=$(echo \"$1\" | sort -n | tail -n 1)\n    echo \"$max_element\""], ["#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n  local string=$1\n  local stack=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0"], ["#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n    local n=$1\n    local m=$2\n    local avg=$(( (n+m)/2 ))\n    if [ $n -gt $m ]; then\n        echo -1\n    else\n        echo \"0b$(printf \"%0b\" $avg)\"\n    fi"], ["#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local flag=0\n    local flag1=0\n    local flag2=0\n    local flag3=0\n    local flag4=0\n    local flag5=0\n    local flag6=0\n    local flag7=0\n    local flag8=0\n    local flag9=0\n    local flag10=0\n    local flag11=0\n    local flag12=0\n    local flag13=0\n    local flag14=0\n    local flag15=0\n    local flag16=0\n    local flag17=0\n    local flag18=0\n    local flag19=0\n    local flag20=0\n    local flag21=0"], ["#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n    local n=$1\n    local odd_palindromes=()\n    local even_palindromes=()\n    local i=1\n    while [ $i -le $n ]; do\n        local j=$i\n        local is_odd=true\n        while [ $j -gt 0 ]; do\n            if [ $j -eq $i ]; then\n                is_odd=false\n                break\n            fi\n            if [ $j -eq $(echo $j | sed 's/^0*//') ]; then\n                is_odd=false\n                break\n            fi\n            if [ $j -eq $(echo $j | sed 's/^1*//') ]; then\n                is_odd=false\n                break\n            fi\n            j=$(echo $j | sed 's/^0*//')\n        done\n        if [ $is_odd = true ]; then\n            odd_palindromes+=$(echo $i | sed 's/^0*//')\n        else\n            even_palindromes+=$(echo $i | sed 's/^0*//')\n        fi\n        i=$((i+1))\n    done\n    echo ${odd_palindromes[@]}\n    echo ${even_palindromes[@]}"], ["#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n    local n=$1\n    local sum=0\n    local i=0\n    local even=0\n    local odd=0\n    for ((i=1; i<=$n; i++)); do\n        if (( $i % 2 == 0 )); then\n            even=$((even + $i))\n        else\n            odd=$((odd + $i))\n        fi\n    done\n    if (( $even == $odd )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n    xs=($1)\n    for ((i=1; i<${#xs[@]}; i++)); do\n        echo -n \"${xs[i]} * x^${i} + \"\n    done\n    echo -n \"${xs[0]}\""], ["#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=$1\n  local sorted=true\n  local prev=\n  for i in $list; do\n    if [ $i -eq $prev ]; then\n      sorted=false\n    fi\n    prev=$i\n  done\n  echo $sorted"], ["#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n    local s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n        if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n            if [[ ${s:$i:1} =~ [A-Z] ]]; then\n                result+=${s:$i:1}\n                result+=${s:$i:1}\n            else\n                result+=${s:$i:1}\n                result+=${s:$i:1}\n            fi\n        else\n            result+=${s:$i:1}\n        fi\n        i=$((i+1))\n    done\n    echo $result"], ["#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n    local n=$1\n    local i=1\n    local result=(\"1\")\n    while [ $i -lt $((n + 1)) ]; do\n        if [ $i -eq 1 ]; then\n            result+=(\"3\")\n        elif [ $i -eq 2 ]; then\n            result+=(\"2\")\n        else\n            result+=(\"$(echo ${result[$i - 1]} + ${result[$i - 2]} + ${result[$i + 1]})\")\n        fi\n        i=$((i + 1))\n    done\n    echo ${result[@]}"], ["#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n  local n=$1\n  local count=0\n  for ((i=1; i<=$n; i++)); do\n    if [[ $((i%11)) -eq 0 || $((i%13)) -eq 0 ]]; then\n      ((count++))\n    fi\n  done\n  echo $count"], ["#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n    local N=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0"], ["#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local grid=$1\n    local k=$2\n    local n=$(echo \"$grid\" | wc -l)\n    local m=$(echo \"$grid\" | cut -d' ' -f1 | wc -l)\n    local grid_arr=($(echo \"$grid\" | tr '\\n' ' '))\n    local grid_arr_len=${#grid_arr[@"], ["#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n  local s=$1\n  local count=0\n  for ((i=0; i<${#s}; i+=2)); do\n    if [[ ${s:$i:1} =~ [AEIOU] ]]; then\n      ((count++))\n    fi\n  done\n  echo $count"], ["#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n    local k=$2\n    local max_arr=()\n    local max_num=0\n    local i=0\n    local j=0\n    local num=\"\"\n    local max_num_str=\"\"\n    local max_num_str_arr=()\n    local max_num_str_arr_len=0\n    local max_num_str_arr_len_max=0\n    local max_num_str_arr_len_min=0\n    local max_num_str_arr_len_avg=0\n    local max_num_str_arr_len_median=0\n    local max_num_str_arr_len_mode=0\n    local max_num_str_arr_len_mode_num=0\n    local max_num_str_arr_len_mode_num_max=0\n    local max_num_str_arr_len_mode_num_min=0\n    local max_num_str_arr_len_mode_num_avg=0\n    local max_num_str_arr_len_mode_num_median=0\n    local max_num_str_arr_len_mode_num_mode=0\n    local max_num_str_arr_len_mode_num_mode_num=0\n    local"], ["#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n    local n=$1\n    local divisor=1\n    while [ $((n % divisor)) -ne 0 ]; do\n        divisor=$((divisor + 1))\n    done\n    echo $divisor"], ["#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local array=($1)\n    local sum=${array[0]}\n    local last=${array[${#array[@]}-1]}\n    local odd=0\n    if [ $((sum+last)) -eq 0 ]; then\n        odd=1\n    fi\n    if [ $odd -eq 1 ]; then\n        sort -n <<< \"${array[@]}\"\n    else\n        sort -nr <<< \"${array[@]}\"\n    fi"], ["#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n    local n=$1\n    local i=1\n    local result=\"\"\n    while [ $i -le $n ]; do\n        if [ $i -eq 1 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 2 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 3 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 4 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 5 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 6 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 7 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 8 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 9 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 10 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 11 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 12 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 13 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 14 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 15 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 16 ]; then\n            result=$result\"\\\"$i\\\"\"\n        elif [ $i -eq 17 ]; then\n            result=$result\""], ["#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n    local b=$(echo $a | awk '{print int($1^3)}')\n    if [ $a -eq $b ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n    local message=$1\n    local encoded=\"\"\n    local i=0\n    local j=0\n    local vowel=\"\"\n    local letter=\"\"\n    local vowel_index=0\n    local letter_index=0\n    local vowel_letter=\"\"\n    local letter_letter=\"\"\n    local vowel_letter_index=0\n    local letter_letter_index=0\n    local vowel_letter_letter=\"\"\n    local letter_letter_letter=\"\"\n    local vowel_letter_letter_index=0\n    local letter_letter_letter_index=0\n    local vowel_letter_letter_letter=\"\"\n    local letter_letter_letter_index=0\n    local vowel_letter_letter_letter_index=0\n    local letter_letter_letter_letter=\"\"\n    local vowel_letter_letter_letter_index=0\n    local letter_letter_letter_letter_index=0\n    local vowel_letter_letter_letter_letter=\"\"\n    local letter_letter_letter_letter_index=0\n    local vowel_letter_letter_letter_letter_index=0\n    local letter_letter_letter_letter_letter=\"\"\n    local vowel_letter_letter_letter_letter_index=0\n    local letter_letter_letter_letter_letter_index=0\n    local vowel_letter_letter_letter_letter_letter=\"\"\n    local letter_letter_letter_letter_letter_index=0\n    local vowel_letter_letter_letter_letter_letter_index=0\n    local letter_letter_letter_letter_letter_letter=\"\"\n    local vowel_letter_letter_letter_letter_letter_index=0\n    local letter_letter_letter_letter_letter_letter_index=0\n    local vowel_letter_letter_letter_letter_"], ["#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n    local words=$(echo \"$1\" | tr ' ' '\\n')\n    local boredoms=0\n    for word in $words; do\n        if [[ $word == \"I\"* ]]; then\n            boredoms=$((boredoms + 1))\n        fi\n    done\n    echo $boredoms"], ["#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n  local list=$1\n  local sum=0\n  local i=0\n  local j=0\n  local found=false\n  local result=false\n\n  while [ $i -lt ${#list} ]; do\n    sum=$(($sum + ${list[$i]}))\n    j=$((i + 1))\n    while [ $j -lt ${#list} ]; do\n      if [ $sum -eq 0 ]; then\n        found=true\n        break\n      fi\n      sum=$(($sum - ${list[$j]}))\n      j=$((j + 1))\n    done\n    if [ $found = true ]; then\n      result=true\n      break\n    fi\n    i=$((i + 1))\n  done\n\n  echo $result"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n    local a=$1\n    local b=$2\n    local c=$3\n    local s=$((a+b+c))\n    if [ $s -gt $a ] && [ $s -gt $b ] && [ $s -gt $c ]; then\n        echo $(echo \"scale=2; $a * $b / 2\" | bc)\n    else\n        echo -1\n    fi"], ["#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planet1=$1\n    local planet2=$2\n    local planet_list=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n    local planet_list_length=${#planet_list[@]}\n    local planet_list_index=0\n    local planet_list_index_1=0\n    local planet_list_index_2=0\n    local planet_list_index_3=0\n    local planet_list_index_4=0\n    local planet_list_index_5=0\n    local planet_list_index_6=0\n    local planet_list_index_7=0\n    local planet_list_index_8=0\n    local planet_list_index_9=0\n    local planet_list_index_10=0\n    local planet_list_index_11=0\n    local planet_list_index_12=0\n    local planet_list_index_13=0\n    local planet_list_index_14=0\n    local planet_list_index_15=0\n    local planet_list_index_16=0\n    local planet_list_index_17=0\n    local planet"], ["#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n    local n=$1\n    local result=0\n    local i=0\n    local digit\n    while [ $i -lt ${#n} ]; do\n        digit=${n:$i:1}\n        if [ $((digit % 2)) -eq 1 ]; then\n            result=$((result * 10 + digit))\n        fi\n        i=$((i + 1))\n    done\n    echo $result"], ["#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n  local string=\"$1\"\n  local words=()\n  local word\n  local word_start=0\n  local word_end=0\n  local word_length=0\n  local word_index=0\n  local word_char\n  local word_char_index=0\n  local word_char_length=0\n  local word_char_index_start=0\n  local word_char_index_end=0\n  local word_char_index_length=0\n  local word_char_index_start_index=0\n  local word_char_index_end_index=0\n  local word_char_index_length_index=0\n  local word_char_index_start_index_index=0\n  local word_char_index_end_index_index=0\n  local word_char_index_length_index_index=0\n  local word_char_index_start_index_index_index=0\n  local word_char_index_end_index_index_index=0\n  local word_char_index_length_index_index_index=0\n  local word_char_index_start_index_index_index_index=0\n  local word_char_index_end_index_index_index_index=0\n  local word_char_index_length_index_index_index_index=0\n  local word_char_index_start_index_index_index_index_index=0\n  local word_char_index_end_index_index_index_index_index=0\n  local word_char_index_length_index_index_index_index_index=0\n  local word_char_index_start_index_index_index_index_index_index=0\n  local"], ["#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local string=\"$1\"\n    local substring=\"$2\"\n    local count=0\n    local i=0\n    local j=0\n    local length_substring=${#substring}\n    local length_string=${#string}\n    while [ $i -lt $length_string ]; do\n        if [ \"${string:$i:$length_substring}\" == \"$substring\" ]; then\n            ((count++))\n            ((i += length_substring))\n        else\n            ((i++))\n        fi\n    done\n    echo \"$count\""], ["#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    if [ \"$1\" -gt \"$2\" ]; then\n        echo \"$2\"\n    elif [ \"$1\" -lt \"$2\" ]; then\n        echo \"$1\"\n    else\n        echo \"None\"\n    fi"], ["#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n    local string=$1\n    local vowels=\"aeiouAEIOU\"\n    local result=\"\"\n    for c in $string; do\n        if [[ ! \" ${vowels} \" =~ \" ${c} \" ]]; then\n            result+=$c\n        fi\n    done\n    echo $result"], ["#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local list=$1\n    local list_length=${#list}\n    local list_index=0\n    local list_item\n    local list_item_length\n    local list_item_index\n    local list_item_min\n    local list_item_max\n    local list_item_min_index\n    local list_item_max_index\n    local list_item_min_max\n    local list_item_min_max_index\n    local list_item_min_max_min\n    local list_item_min_max_min_index\n    local list_item_min_max_max\n    local list_item_min_max_max_index\n    local list_item_min_max_min_max\n    local list_item_min_max_min_max_index\n    local list_item_min_max_min_max_min\n    local list_item_min_max_min_max_min_index\n    local list_item_min_max_min_max_max\n    local list_item_min_max_min_max_max_index\n    local list_item_min_max_min_max_min_max\n    local list_item_min_max_min_max_min_max_index\n    local list_item_min_max_min_max_min_max_min\n    local list_item_min_max_min_max_min_max_min_index\n    local list_item_min_max_min_max_min_max_max\n    local list_item_min_max_min_max_min_max_max_index\n    local list_item_min_"], ["#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    local list=$1\n    local min_dist=10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n    local x=$1\n    local n=$2\n    local i=0\n    local result=false\n    while [ $((x % n)) -ne 0 ]; do\n        ((i++))\n        if [ $i -gt 10 ]; then\n            result=false\n            break\n        fi\n        x=$((x / n))\n    done\n    if [ $i -eq 1 ]; then\n        result=true\n    fi\n    echo $result"], ["#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n  local n=$1\n  local i=0\n  local j=1\n  local k=0\n  local l=1\n  local m=0\n  local n=1\n  local p=0\n  local q=1\n  local r=0\n  local s=1\n  local t=0\n  local u=1\n  local v=0\n  local w=1\n  local x=0\n  local y=1\n  local z=0\n  local a=0\n  local b=1\n  local c=0\n  local d=1\n  local e=0\n  local f=1\n  local g=0\n  local h=1\n  local i=0\n  local j=1\n  local k=0\n  local l=1\n  local m=0\n  local n=1\n  local o=0\n  local p=1\n  local q=0\n  local r=1\n  local s=0\n  local t=1\n  local u=0\n  local v=1\n  local w=0\n  local x=1\n  local y=0\n  local z=1\n  local a=0\n  local b=1\n  local c=0\n  local d=1\n  local e=0\n  local f=1\n  local g=0\n  local h=1\n  local i=0\n  local j=1\n  local k=0\n  local l=1\n  local m=0\n  local n=1\n  local o=0\n  local p=1\n  local q=0\n  local r=1\n  local s=0\n  local t=1\n  local u=0\n  local v=1\n  local w=0\n  local x=1\n  local y=0\n  local z=1\n  local a=0\n  local b=1\n  local c=0\n  local d=1\n  local e=0\n  local f=1\n  local g=0\n  local h=1\n  local i"], ["#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n  local list=$1\n  local result=()\n  local sum=0\n  local index=0\n  local item\n  for item in $list; do\n    sum=$(($sum + ${item##*-}))\n    result+=(\"$item\")\n  done\n  result=($(printf '%s\\n' \"${result[@]}\" | sort -t' ' -k2 -n))\n  for item in $result; do\n    echo \"${item%% *}\"\n  done"], ["#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    local list=$1\n    local threshold=$2\n    local result=false\n    local i=0\n    local j=0\n    local diff=0\n    local min=0\n    local max=0\n    local sum=0\n    local count=0\n    local sum_of_squares=0\n    local mean=0\n    local stddev=0\n    local median=0\n    local median_diff=0\n    local median_diff_sum=0\n    local median_diff_count=0\n    local median_diff_sum_of_squares=0\n    local median_diff_mean=0\n    local median_diff_stddev=0\n    local median_diff_median=0\n    local median_diff_median_diff=0\n    local median_diff_median_diff_sum=0\n    local median_diff_median_diff_count=0\n    local median_diff_median_diff_sum_of_squares=0\n    local median_diff_median_diff_mean=0\n    local median_diff_median_diff_stddev=0\n    local median_diff_median_diff_median=0\n    local median_diff_median_diff_median_diff=0\n    local median_diff_median_diff_median_diff_sum=0\n    local median_diff_median_diff_median_diff_count=0\n    local median_diff_median_diff_median_diff_sum_of_squares=0\n    local median_diff_median_diff_median_diff_mean=0\n    local median_diff_median_diff_median_diff_stddev=0\n    local median_diff_median_diff_median_diff_median=0\n    local median_diff_median_diff_median_diff_median_diff=0\n    local median_"], ["#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n    local string=$1\n    local palindrome=\"\"\n    local longest_palindrome_suffix=\"\"\n    local longest_palindrome_suffix_length=0\n    local longest_palindrome_prefix=\"\"\n    local longest_palindrome_prefix_length=0\n    local longest_palindrome_prefix_index=0\n    local longest_palindrome_suffix_index=0\n    local longest_palindrome_prefix_index_start=0\n    local longest_palindrome_suffix_index_start=0\n    local longest_palindrome_prefix_index_end=0\n    local longest_palindrome_suffix_index_end=0\n    local longest_palindrome_prefix_index_start_index=0\n    local longest_palindrome_suffix_index_start_index=0\n    local longest_palindrome_prefix_index_end_index=0\n    local longest_palindrome_suffix_index_end_index=0\n    local longest_palindrome_prefix_index_start_index_length=0\n    local longest_palindrome_suffix_index_start_index_length=0\n    local longest_palindrome_prefix_index_end_index_length=0\n    local longest_palindrome_suffix_index_end_index_length=0\n    local longest_palindrome_prefix_index_start_index_length_minus_1=0\n    local longest_palindrome_suffix_index_start_index_length_minus_1=0\n    local longest_palindrome_prefix_index_end_index_length_minus_1=0\n    local longest_palindrome_suffix_index_end_index_length_minus_1=0\n    local longest_palindrome_prefix_index_start_index_length_minus_2=0\n    local longest_pal"], ["#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n    local a=$1\n    local b=$2\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a_len=${#a}\n    local b_len=${#b}\n    local max_len=$(($a_len > $b_len ? $a_len : $b_len))\n    local a_index=0\n    local b_index=0\n    local result_index=0\n    local a_char=\"\"\n    local b_char=\"\"\n    local result_char=\"\"\n    local a_char_bin=\"\"\n    local b_char_bin=\"\"\n    local result_char_bin=\"\"\n    local a_char_bin_len=0\n    local b_char_bin_len=0\n    local result_char_bin_len=0\n    local a_char_bin_index=0\n    local b_char_bin_index=0\n    local result_char_bin_index=0\n    local a_char_bin_bit=0\n    local b_char_bin_bit=0\n    local result_char_bin_bit=0\n    local a_char_bin_bit_index=0\n    local b_char_bin_bit_index=0\n    local result_char_bin_bit_index=0\n    local a_char_bin_bit_value=0\n    local b_char_bin_bit_value=0\n    local result_char_bin_bit_value=0\n    local a_char_bin_bit_value_index=0\n    local b_char_bin_bit_value_index=0\n    local result_char_bin_"], ["#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result*i))\n    done\n    echo $result"], ["#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n    local arr=($1)\n    local k=$2\n    local sum=0\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    while [ $i -lt $k ] && [ $j -lt $len ]; do\n        if [ ${#arr[$i]} -le 2 ]; then\n            sum=$((sum + arr[$i]))\n            i=$((i + 1))\n        else\n            j=$((j + 1))\n        fi\n    done\n    echo $sum"], ["#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a1=0\n  local b1=0\n  local c1=0\n  local d1=0\n  local e1=0\n  local f1=0\n  local g1=0\n  local h1=0\n  local i1=0\n  local j1=0\n  local k1=0\n  local l1=0\n  local m1=0\n  local n1=0\n  local o1=0\n  local p1=0\n  local q1=0\n  local r1=0\n  local s1=0\n  local t1=0\n  local u1=0\n  local v1=0\n  local w1=0\n  local x1=0\n  local y1=0\n  local z1=0\n  local a2=0\n  local b2=0\n  local c2=0\n  local d2=0\n  local e2"], ["#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n    local list=\"$1\"\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local"], ["#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    local s=$1\n    local n=$2\n    local words=()\n    local word\n    local consonants=()\n    local consonant\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0"], ["#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n  local list=$1\n  local max_weight=$2\n  local sum=0\n  local i=0\n  local j=0\n  local element\n  local element_length\n  local element_length_max\n  local element_length_min\n  local element_length_sum\n  local element_length_sum_max\n  local element_length_sum_min\n  local element_length_sum_sum\n  local element_length_sum_sum_max\n  local element_length_sum_sum_min\n  local element_length_sum_sum_sum\n  local element_length_sum_sum_sum_max\n  local element_length_sum_sum_sum_min\n  local element_length_sum_sum_sum_sum\n  local element_length_sum_sum_sum_sum_max\n  local element_length_sum_sum_sum_sum_min\n  local element_length_sum_sum_sum_sum_sum\n  local element_length_sum_sum_sum_sum_sum_max\n  local element_length_sum_sum_sum_sum_sum_min\n  local element_length_sum_sum"], ["#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n  local n=$1\n  local a=0\n  local b=1\n  local i=0\n  local result=0\n  while [ $i -lt $n ]; do\n    result=$((a + b))\n    a=$b\n    b=$result\n    i=$((i + 1))\n  done\n  echo $result"], ["#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local extensions=($2)\n    local extension_strengths=()\n    local strongest_extension=\"\"\n    local strongest_extension_strength=0\n    local extension_strength\n    local extension\n    local extension_name\n    local extension_cap\n    local extension_sm\n    local extension_strength_cap\n    local extension_strength_sm\n    local extension_strength_cap_sm\n    local extension_strength_cap_sm_sum\n    local extension_strength_cap_sm_sum_max\n    local extension_strength_cap_sm_sum_max_index\n    local extension_strength_cap_sm_sum_max_extension_name\n    local extension_strength_cap_sm_sum_max_extension_name_index\n    local extension_strength_cap_sm_sum_max_extension_name_index_extension_name\n    local extension_strength_cap_sm_sum_max_extension_name_index_extension_name_"], ["#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n    local string1 string2\n    string1=$(echo \"$1\" | cut -d ' ' -f 1)\n    string2=$(echo \"$1\" | cut -d ' ' -f 2)\n    local open_count=0\n    local close_count=0\n    for c in \"$string1\"; do\n        if [ \"$c\" == \"(\" ]; then\n            open_count=$((open_count + 1))\n        elif [ \"$c\" == \")\" ]; then\n            close_count=$((close_count + 1))\n        fi\n    done\n    for c in \"$string2\"; do\n        if [ \"$c\" == \"(\" ]; then\n            open_count=$((open_count - 1))\n        elif [ \"$c\" == \")\" ]; then\n            close_count=$((close_count - 1))\n        fi\n    done\n    if [ \"$open_count\" -eq 0 ] && [ \"$close_count\" -eq 0 ]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi"], ["#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n    local list=$1\n    local smallest=$1\n    local second_smallest=$1\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z"], ["#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n    local a=$1\n    local b=$2\n    local c=$3\n    if [[ $a -eq $((b+c)) && $a -eq $b && $a -eq $c && $a -eq $b && $a -eq $c ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n    local number=$1\n    local integer_part=$(echo \"$number\" | cut -d '.' -f 1)\n    local decimal_part=$(echo \"$number\" | cut -d '.' -f 2)\n    echo \"$decimal_part\""], ["#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n  local list=$1\n  local list_len=${#list}\n  local i=0\n  local result=\"\"\n  while [ $i -lt $list_len ]; do\n    local elem=${list:$i:1}\n    local next_elem=$((elem + 1))\n    result+='\"'$next_elem'\"'\n    if [ $i -lt $((list_len - 1)) ]; then\n      result+=\" \"\n    fi\n    i=$((i + 1))\n  done\n  echo $result"], ["#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    if [ $1 -eq $2 ]; then\n        echo $3\n    else\n        echo $1\n    fi"], ["#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r * 2 % p))\n        i=$((i + 1))\n    done\n    echo $r"], ["#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n  local num=$1\n  local even_count=0\n  local odd_count=0\n  local i=0\n  local j=0\n  local num_len=${#num}\n  local even_digit=0\n  local odd_digit=0\n  local even_digit_str=\"\"\n  local odd_digit_str=\"\"\n  local even_digit_str_len=0\n  local odd_digit_str_len=0\n  local even_digit_str_len_max=0\n  local odd_digit_str_len_max=0\n  local even_digit_str_len_max_index=0\n  local odd_digit_str_len_max_index=0\n  local even_digit_str_len_max_index_str=\"\"\n  local odd_digit_str_len_max_index_str=\"\"\n  local even_digit_str_len_max_index_str_len=0\n  local odd_digit_str_len_max_index_str_len=0\n  local even_digit_str_len_max_index_str_len_max=0\n  local odd_digit_str_len_max_index_str_len_max=0\n  local even_digit_str_len_max_index_str_len_max_index=0\n  local odd_digit_str_len_max_index_str_len_max_index=0\n  local even_digit_str_len_max_index_str_len_max_index_str=\"\"\n  local odd_digit_str_len_max_index_str_len_max_index_str=\"\"\n  local even_digit_str_len_max_index_str_len_max_index_str_len=0\n  local odd_digit_str_len_max_index_str_len_max_index_str_len=0\n  local even_digit_str_len_max_index_"], ["#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n    local length=${#string}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local"], ["#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local n=$1\n    local i=2\n    local max=1\n    while [ $i -le $n ]; do\n        if [ $n -eq $(($n % $i)) ]; then\n            max=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $max"], ["#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n    local sum=0\n    local i=0\n    local c\n    for c in \"$1\"; do\n        if [[ $c =~ [A-Z] ]]; then\n            sum=$(($sum + $((26 * $i))))\n        fi\n        i=$(($i + 1))\n    done\n    echo $sum"], ["#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n    local list=$1\n    local min=$(echo $list | awk '{print $1}')\n    local max=$(echo $list | awk '{print $NF}')\n    local range=$(echo $max - $min | bc)\n    local scale=$(echo \"1.0 / $range\" | bc)\n    local result=\"\"\n    for i in $list; do\n        local scaled=$(echo \"$i - $min\" | bc)\n        local scaled=$(echo \"$scaled * $scale\" | bc)\n        result=\"$result \\\"$scaled\\\"\"\n    done\n    echo $result"], ["#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n  local list=$1\n  local sum=0\n  local i=0\n  local j=0\n  local length=${#list}\n  while [ $i -lt $length ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n      j=$((i + 1))\n      while [ $j -lt $length ]; do\n        if [ $((j % 2)) -eq 1 ]; then\n          sum=$((sum + list[$j]))\n        fi\n        j=$((j + 1))\n      done\n    fi\n    i=$((i + 1))\n  done\n  echo $sum"], ["#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local -a arr=($1)\n  local smallest_value smallest_index\n  smallest_value=0\n  smallest_index=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]} =~ ^[0-9]+$ ]]; then\n      if (( ${arr[i]} % 2 == 0 )); then\n        if (( ${arr[i]} < ${smallest_value} )); then\n          smallest_value=${arr[i]}\n          smallest_index=${i}\n        fi\n      fi\n    fi\n  done\n  if (( ${#smallest_value} > 0 )); then\n    echo -e \"[\\\"${smallest_value}\\\", \\\"${smallest_index}\\\"]\"\n  else\n    echo -e \"[]\""], ["#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local sum=0\n    local max=0\n    local triple=0\n    local triple_count=0\n    local triple_sum=0\n    local triple_max=0\n    local triple_i=0\n    local triple_j=0\n    local triple_k=0\n    local triple_count_max=0\n    local triple_sum_max=0\n    local triple_max_max=0\n    local triple_i_max=0\n    local triple_j_max=0\n    local triple_k_max=0\n    local triple_count_max_max=0\n    local triple_sum_max_max=0\n    local triple_max_max_max=0\n    local triple_i_max_max=0\n    local triple_j_max_max=0\n    local triple_k_max_max=0\n    local triple_count_max_max_max=0\n    local triple_sum_max_max_max=0\n    local triple_max_max_max_max=0\n    local triple_i_max_max_max=0\n    local triple_j_max_max_max=0\n    local triple_k_max_max_max=0\n    local triple_count_max_max_max_max=0\n    local triple_sum_max_max_max_max=0\n    local triple_"], ["#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    local lst1=$1\n    local lst2=$2\n    local lst1_len=${#lst1[@]}\n    local lst2_len=${#lst2[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local temp_len=0\n    local temp_len_2=0\n    local temp_len_3=0\n    local temp_len_4=0\n    local temp_len_5=0\n    local temp_len_6=0\n    local temp_len_7=0\n    local temp_len_8=0\n    local temp_len_9=0\n    local temp_len_10=0\n    local temp_len_11=0\n    local temp_len_12=0\n    local temp_len_13=0\n    local temp_len_14=0\n    local temp_len_15=0\n    local temp_len_16=0\n    local temp_len_17=0\n    local temp_len_18=0\n    local temp_len_19=0\n    local temp_len_20=0\n    local temp_len_21=0\n    local temp_len_22=0\n    local temp_len_23=0\n    local temp_len_24=0\n    local temp_len_25=0\n    local temp_len_2"], ["#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n    local l=($1)\n    local n=${#l[@]}\n    local m=$((n/2))\n    local i=0\n    local j=$((n-1))\n    local k=$((m-1))\n    local x=$((l[i]+l[j]))\n    local y=$((l[i]+l[k]))\n    local z=$((l[j]+l[k]))\n    if [ $x -gt $y ] && [ $x -gt $z ]; then\n        echo $x\n    elif [ $y -gt $z ]; then\n        echo $y\n    else\n        echo $z\n    fi"], ["#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n  local string=$1\n  local length=${#string}\n  local i=2\n  local is_prime=true\n  while [ $i -le $length ]; do\n    if [ $((length % $i)) -eq 0 ]; then\n      is_prime=false\n      break\n    fi\n    i=$((i + 1))\n  done\n  if [ $is_prime = true ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n    local arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=$((n-1))\n    local min=0\n    local min_i=0\n    local min_j=0\n    local min_change=0\n    local change=0\n    local change_i=0\n    local change_j=0\n    local change_val=0\n    local change_val_i=0\n    local change_val_j=0\n    local change_val_change=0\n    local change_val_change_i=0\n    local change_val_change_j=0\n    local change_val_change_val=0\n    local change_val_change_val_i=0\n    local change_val_change_val_j=0\n    local change_val_change_val_change=0\n    local change_val_change_val_change_i=0\n    local change_val_change_val_change_j=0\n    local change_val_change_val_change_val=0\n    local change_val_change_val_change_val_i=0\n    local change_val_change_val_change_val_j=0\n    local change_val_change_val_change_val_change=0\n    local change_val_change_val_change_val_change_i=0\n    local change_val_change_val_change_val_change_j=0\n    local change_val_change_val_change_val_change_val=0\n    local change_"], ["#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n    local sum=0\n    local i=0\n    local num\n    for num in $1; do\n        ((sum += num*num))\n        ((i++))\n    done\n    echo $sum"], ["#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{2,3}$ ]] && [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]] && [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{2,3}$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi"], ["#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n  local list=$1\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local found=false\n  for i in $list; do\n    for j in $list; do\n      for k in $list; do\n        if [ $i -eq $j -a $j -eq $k -a $i -eq $k ]; then\n          found=true\n          sum=$((sum + i + j + k))\n          break\n        fi\n      done\n    done\n  done\n  if [ $sum -eq 0 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    local a b c d\n    a=$(echo $1 | cut -d ' ' -f 1)\n    b=$(echo $1 | cut -d ' ' -f 2)\n    c=$(echo $2 | cut -d ' ' -f 1)\n    d=$(echo $2 | cut -d ' ' -f 2)\n    if [[ $a -gt $c && $b -lt $d ]]; then\n        echo \"NO\"\n    elif [[ $a -lt $c && $b -gt $d ]]; then\n        echo \"NO\"\n    elif [[ $a -gt $c && $b -gt $d ]]; then\n        echo \"NO\"\n    elif [[ $a -lt $c && $b -lt $d ]]; then\n        echo \"YES\"\n    fi"], ["#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n    local input=$1\n    local output=\"\"\n    local group=\"\"\n    local group_count=0\n    local group_start=0\n    local group_end=0\n    local group_start_pos=0\n    local group_end_pos=0\n    local group_start_char=\"\"\n    local group_end_char=\"\"\n    local group_start_char_pos=0\n    local group_end_char_pos=0\n    local group_start_char_pos_in_string=0\n    local group_end_char_pos_in_string=0\n    local group_start_char_pos_in_string_prev=0\n    local group_end_char_pos_in_string_prev=0\n    local group_start_char_pos_in_string_prev_prev=0\n    local group_end_char_pos_in_string_prev_prev=0\n    local group_start_char_pos_in_string_prev_prev_prev=0\n    local group_end_char_pos_in_string_prev_prev_prev=0\n    local group_start_char_pos_in_string_prev_prev_prev_prev=0\n    local group_end_char_pos_in_string_prev_prev_prev_prev=0\n    local group_start_char_pos_in_string_prev_prev_prev_prev_prev=0\n    local group_end_char_pos_in_string_prev_prev_prev_prev_prev=0\n    local group_start_char_pos_in_string_prev_prev_prev_prev_prev_prev=0\n    local group_end_char_pos_in_string_prev_prev_prev_prev_prev_prev=0\n    local group_start_char_"], ["#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local -a scores=($1)\n    local -a guesses=($2)\n    local -a result=()\n    for ((i=0; i<${#scores[@]}; i++)); do\n        if [[ ${scores[$i]} -eq ${guesses[$i]} ]]; then\n            result[$i]=\"0\"\n        else\n            result[$i]=$(echo ${scores[$i]} - ${guesses[$i]} | bc)\n        fi\n    done\n    echo ${result[@]}"], ["#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n    local n=$1\n    local count=0\n    for i in {1..9} {10..99} {100..999} {1000..9999} {10000..99999} {100000..999999} {1000000..9999999} {10000000..99999999} {100000000..999999999}; do\n        if [[ $i -lt $n ]]; then\n            if [[ $i -eq 1 ]]; then\n                count=$((count + 1))\n            fi\n        elif [[ $i -eq $n ]]; then\n            if [[ $i -eq 1 ]]; then\n                count=$((count + 1))\n            fi\n        fi\n    done\n    echo $count"], ["#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  local last_char=${1: -1}\n  local last_char_is_a_letter=false\n  if [[ $last_char =~ [a-zA-Z] ]]; then\n    last_char_is_a_letter=true\n  fi\n  echo $last_char_is_a_letter"], ["#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n    if [ -z \"$1\" ]; then\n        echo \"false\"\n    else\n        if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n            if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n                if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n                    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n                        if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n                            if [[ $1 =~ ^[0-9]{2}-[0-9]{"], ["#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n    local sum=0\n    local num\n    for num in $1; do\n        sum=$(($sum + $(count_digits $num)))\n    done\n    echo $sum"], ["#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n    local string=$1\n    local words=()\n    local word=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local space=32\n    local newline=10\n    local tab=9\n    local backslash=92\n    local exclamation=33\n    local doublequote=34\n    local hash=35\n    local dollar=36\n    local percent=37\n    local ampersand=38\n    local apostrophe=39\n    local left_paren=40\n    local right_paren=41\n    local asterisk=42\n    local plus=43\n    local comma=44\n    local minus=45\n    local period=46\n    local slash=47\n    local zero=48\n    local one=49\n    local two=50\n    local three=51\n    local four=52\n    local five=53\n    local six=54\n    local seven=55\n    local eight=56\n    local nine=57\n    local colon=58\n    local semicolon=59\n    local less_than=60\n    local equal=61\n    local greater_than=62\n    local question=63\n    local at=64\n    local A=65\n    local B=66\n    local C="], ["#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n    local string=\"$1\"\n    local length=${#string}\n    local half_length=$((length / 2))\n    local i=0\n    local j=$((length - 1))\n    local char1=\"\"\n    local char2=\"\"\n    while [ $i -lt $half_length ]; do\n        char1=\"${string:$i:1}\"\n        char2=\"${string:$j:1}\"\n        if [ \"$char1\" != \"$char2\" ]; then\n            return 1\n        fi\n        i=$((i + 1))\n        j=$((j - 1))\n    done\n    return 0"], ["#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local word=$1\n    local vowel=\"\"\n    local consonant=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local i_index=0\n    local j_index=0\n    local k_index=0\n    local l_index=0\n    local m_index=0\n    local n_index=0\n    local o_index=0\n    local p_index=0\n    local q_index=0\n    local r_index=0\n    local s_index=0\n    local t_index=0\n    local u_index=0\n    local v_index=0\n    local w_index=0\n    local x_index=0\n    local y_index=0\n    local z_index=0\n    local vowel_index=0\n    local consonant_index=0\n    local vowel_index_1=0\n    local consonant_index_1=0\n    local vowel_index_2=0\n    local consonant_index_2=0\n    local vowel_index_3=0\n    local consonant_index_3=0\n    local vowel_index_4=0\n    local consonant_index_4"], ["#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n  local n=$1\n  local i=2\n  local j=$((n / 2))\n  local is_prime=true\n\n  while [ $i -le $j ]; do\n    if [ $((n % $i)) -eq 0 ]; then\n      is_prime=false\n      break\n    fi\n    i=$((i + 1))\n  done\n\n  echo \"$is_prime\""], ["#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n    local numerator1=$(echo $1 | cut -d'/' -f1)\n    local denominator1=$(echo $1 | cut -d'/' -f2)\n    local numerator2=$(echo $2 | cut -d'/' -f1)\n    local denominator2=$(echo $2 | cut -d'/' -f2)\n\n    if [ $numerator1 -eq $numerator2 ] && [ $denominator1 -eq $denominator2 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n    local hex_key_count=0\n    local hex_key_number=$1\n    local hex_key_number_length=${#hex_key_number}\n    for ((i=0; i<${hex_key_number_length}; i++)); do\n        local hex_key_number_char=${hex_key_number:$i:1}\n        if [[ $hex_key_number_char =~ ^[0-9A-F]$ ]]; then\n            local hex_key_number_char_decimal=$(echo $hex_key_number_char | xxd -p -r -u | od -An -t u1 | tr -d ' ')\n            if [[ $hex_key_number_char_decimal -gt 15 ]]; then\n                hex_key_count"], ["#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n    local sentence=$1\n    local words=()\n    local word\n    local word_length\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local prime_numbers=()\n    local prime_number\n    local prime_number_length\n    local prime_number_length_index\n    local prime_number_length_index_length\n    local prime_number_length_index_length_index\n    local prime_number_length_index_length_index_length\n    local prime_number_length_index_length_index_length_index\n    local prime_number_length_index_length_index_length_index_length\n    local prime_number_length_index_length_index_length_index_length_index\n    local prime_number_length_index_length_index_length_index_length_index_length\n    local prime_number_length_index_length_index_length_index_length_index_length_index\n    local prime_number_length_index_length_index_length_index_length_index_length_index_length\n    local prime_number_length_index_length_index_length_index_length_index_length_index_length_index\n    local prime_number_length_index_length_index_length_index_length_index_length_index_length_index_length\n    local prime_number_length_index_length_index_length_index_length_index_length_index_length_index_length_index\n    local prime_number_length_index_length_index"], ["#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local -r input=\"$1\"\n  local -r input_length=${#input}\n  local -r input_lower=$(echo \"$input\" | tr '[:upper:]' '[:lower:]')\n  local -r input_sorted=$(echo \"$input_lower\" | sort)\n  local -r input_sorted_length=${#input_sorted}\n  local -r input_sorted_unique=$(echo \"$input_sorted\" | uniq)\n  local -r input_sorted_unique_length=${#input_sorted_unique}\n  local -r input_sorted_unique_count=$(echo \"$input_sorted_unique\" | wc -l)\n  local -r input_sorted_unique_count_percentage=$(echo \"$input_sorted_unique_count\" | bc -l)\n  local -r input_sorted_unique_count_percentage_rounded=$(echo \"$input_sorted_unique_count_percentage\" | awk '{printf \"%.2f\", $0}')\n  local -r input_sorted_unique_count_percentage_rounded_rounded=$(echo \"$input_sorted_unique_count_percentage_rounded\" | awk '{printf \"%.0f\", $0}')\n  local -r input_sorted_unique_count_percentage_rounded_rounded_percentage=$(echo \"$input_sorted_unique_count_percentage_rounded_rounded\" | awk '{printf \"%.2f\", $0}')\n  local -r input_sorted_unique_count_percentage_rounded_rounded_percentage_"], ["#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n    local lst=$1\n    local x=$2\n    local row_num=0\n    local row_num_max=0\n    local row_num_min=0\n    local row_num_max_row=0\n    local row_num_min_row=0\n    local row_num_max_col=0\n    local row_num_min_col=0\n    local row_num_max_col_num=0\n    local row_num_min_col_num=0\n    local row_num_max_col_num_row=0\n    local row_num_min_col_num_row=0\n    local row_num_max_col_num_col=0\n    local row_num_min_col_num_col=0\n    local row_num_max_col_num_col_num=0\n    local row_num_min_col_num_col_num=0\n    local row_num_max_col_num_col"], ["#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n  local n=$1\n  local odd_collatz=()\n  local i=1\n  local term=$n\n  while [ $term -ne 1 ]; do\n    if [ $term -eq 0 ]; then\n      odd_collatz+=(\"0\")\n    elif [ $term -eq 1 ]; then\n      odd_collatz+=(\"1\")\n    elif [ $term -eq 2 ]; then\n      odd_collatz+=(\"2\")\n    elif [ $term -eq 3 ]; then\n      odd_collatz+=(\"3\")\n    elif [ $term -eq 4 ]; then\n      odd_collatz+=(\"4\")\n    elif [ $term -eq 5 ]; then\n      odd_collatz+=(\"5\")\n    elif [ $term -eq 6 ]; then\n      odd_collatz+=(\"6\")\n    elif [ $term -eq 7 ]; then\n      odd_collatz+=(\"7\")\n    elif [ $term -eq 8 ]; then\n      odd_collatz+=(\"8\")\n    elif [ $term -eq 9 ]; then\n      odd_collatz+=(\"9\")"], ["#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n  local arr=($1)\n  local i=0\n  local j=0\n  local max=-1\n  local max_index=-1\n  local max_element=\"\"\n  for i in \"${!arr[@]}\"; do\n    for j in \"${!arr[@]}\"; do\n      if [ $i -ne $j ]; then\n        if [ ${arr[$i]} -ge ${arr[$j]} ]; then\n          max=$((max+1))\n          max_index=$i\n          max_element=${arr[$i]}\n        fi\n      fi\n    done\n  done\n  if [ $max -eq 0 ]; then\n    echo -1\n  else\n    echo $max_index\n  fi"], ["#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n    local numbers=$1\n    local sorted_numbers=\"\"\n    local number\n    local number_length\n    local number_length_max=0\n    local number_length_min=100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n    local result=\"\"\n    local i=0\n    local j=0\n    local digit\n    local num_digits=$(echo \"$x\" | wc -c)\n    local num_shift=$(echo \"$shift\" | wc -c)\n    local num_digits_shifted=$(($num_digits - $num_shift))\n    local num_digits_shifted_plus_1=$(($num_digits_shifted + 1))\n    local num_digits_shifted_plus_1_minus_1=$(($num_digits_shifted_plus_1 - 1))\n    local num_digits_shifted_plus_1_minus_1_minus_1=$(($num_digits_shifted_plus_1_minus_1 - 1))\n    local num_digits_shifted_plus_1_minus_1_minus_1_minus_1=$(($num_digits_shifted_plus_1_minus_1_minus_1 - 1))\n    local num_digits_shifted_plus_1_minus_1_minus_1_minus_1_minus_1=$(($num_digits_shifted_plus_1_minus_1_minus_1_minus_1 - 1))\n    local num_digits_shifted_plus_1_minus_1_minus_1_minus_1_minus_1_minus_1=$(($num_digits_shifted_plus_1_minus_1_minus_1_minus_1_minus_1 - 1))\n    local num_digits_shifted_plus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1=$(($num_digits_shifted_plus_1_minus_1_minus_1_minus_1_minus_1_minus"], ["#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0"], ["#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n    local input=$1\n    local largest_prime=0\n    local largest_prime_digits=0\n    local largest_prime_digits_sum=0\n    local largest_prime_digits_sum_str=\"\"\n    local largest_prime_digits_sum_str_len=0\n    local largest_prime_digits_sum_str_len_max=0\n    local largest_prime_digits_sum_str_len_max_str=\"\"\n    local largest_prime_digits_sum_str_len_max_str_len=0\n    local largest_prime_digits_sum_str_len_max_str_len_max=0\n    local largest_prime_digits_sum_str_len_max_str_len"], ["#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n  local sum=0\n  local product=1\n  local i\n  for i in $1; do\n    sum=$(echo \"$sum + $i\" | bc)\n    product=$(echo \"$product * $i\" | bc)\n  done\n  echo \"\\\"$sum\\\"\"\n  echo \"\\\"$product\\\"\""], ["#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    local x=$1\n    local y=$2\n    local mid=$(( (x+y)/2 ))\n    if [ $mid -eq $x ] || [ $mid -eq $y ]; then\n        echo -1\n    else\n        if [ $mid -eq 0 ]; then\n            echo 0\n        else\n            if [ $mid -eq 2 ]; then\n                echo 2\n            else\n                if [ $mid -eq 4 ]; then\n                    echo 4\n                else\n                    if [ $mid -eq 6 ]; then\n                        echo 6\n                    else\n                        if [ $mid -eq 8 ]; then\n                            echo 8\n                        else\n                            if [ $mid -eq 10 ]; then\n                                echo 10\n                            else\n                                if [ $mid -eq 12 ]; then\n                                    echo 12\n                                else\n                                    if [ $mid -eq 14 ]; then\n                                        echo 14\n                                    else\n                                        if [ $mid -eq 16 ]; then\n                                            echo 16\n                                        else\n                                            if [ $mid -eq 18 ]; then\n                                                echo 18\n                                            else\n                                                if [ $mid -eq 20 ]; then\n                                                    echo 20\n                                                else\n                                                    if [ $mid -eq 22 ]; then\n                                                        echo 22\n                                                    else\n                                                        if [ $mid -eq 24 ]; then\n                                                            echo 24\n                                                        else\n                                                            if [ $mid -eq 26 ]; then\n                                                                echo 26\n                                                            else\n                                                                if [ $mid -eq 28 ]; then\n                                                                    echo 28\n                                                                else\n                                                                    if [ $mid -eq 30 ]; then\n                                                                        echo 30\n                                                                    else\n                                                                        if [ $mid -eq 32 ]; then\n                                                                            echo 32\n                                                                        else\n                                                                            if [ $mid -eq 34 ]; then\n                                                                                echo 34\n                                                                            else\n                                                                                if [ $mid -eq 36"], ["#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n  local list=$1\n  local largest_negative_integer=None\n  local smallest_positive_integer=None\n  local largest_negative_integer_index=0\n  local smallest_positive_integer_index=0\n  local largest_negative_integer_length=0\n  local smallest_positive_integer_length=0\n  local largest_negative_integer_length_index=0\n  local smallest_positive_integer_length_index=0\n  local largest_negative_integer_length_index_length=0\n  local smallest_positive_integer_length_index_length=0\n  local largest_negative_integer_length_index_length_index=0\n  local smallest_positive_integer_length_index_length_index=0\n  local largest_negative_integer_length_index_length_index_length=0\n  local smallest_positive_integer_length_index_length_index_length=0\n  local largest_negative_integer_length_index_length_index_length_index=0\n  local smallest_positive_integer_length_index_length_index_length_index=0\n  local largest_negative_integer_length_index_length_index_length_index_length=0\n  local smallest_positive_integer_length_index_length_index_length_index_length=0\n  local largest_negative_integer_length_index_length_index_length_index_length_index=0\n  local smallest_positive_integer_length_index_length_index_length_index_length_index=0\n  local largest_negative_integer_length_"], ["#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n    local string=$1\n    local count=0\n    local char\n    for char in ${string}; do\n        if [[ ! -z ${char} ]]; then\n            ((count++))\n        fi\n    done\n    echo ${count}"], ["#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local i=0\n  local result=()\n  while [ $i -lt $n ]; do\n    if [ $i -eq 0 ]; then\n      result+=($n)\n    else\n      if [ $((i % 2)) -eq 0 ]; then\n        result+=($((i + 2)))\n      else\n        result+=($((i + 1)))\n      fi\n    fi\n    i=$((i + 1))\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n    local arr=($1)\n    local sum=0\n    local sign=1\n    for i in \"${arr[@]}\"; do\n        if [ $sign -eq 1 ]; then\n            sum=$(($sum + $i))\n        elif [ $sign -eq -1 ]; then\n            sum=$(($sum - $i))\n        else\n            sum=$(($sum + 0))\n        fi\n        sign=$(($sign * $(sign_of $i)))\n    done\n    echo $sum"], ["#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n  local array=($1)\n  local sum=0\n  local min=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local"], ["#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n    local n=$1\n    local i=0\n    local result=\"\"\n    while [ $i -lt $n ]; do\n        result=\"$result $i\"\n        i=$((i+1))\n    done\n    echo $result"], ["#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n    local word1=$1\n    local word2=$2\n    local word1_len=${#word1}\n    local word2_len=${#word2}\n    local word1_rotated=\"\"\n    local word2_rotated=\"\"\n    local word1_rotated_len=0\n    local word2_rotated_len=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local word1_rotated_index=0\n    local word2_rotated_index=0\n    local word1_rotated_index_count=0\n    local word2_rotated_index_count=0\n    local word1_rotated_index_count_max=0\n    local word2_rotated_index_count_max=0\n    local word1_rotated_index_count_min=0\n    local word2_rotated_index_count_min=0\n    local word1_rotated_index_count_max_index=0\n    local word2_rotated_index_count_max_index=0\n    local word1_rotated_index_count_min_index=0\n    local word2"], ["#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n  local list=$1\n  local prev=\n  local current=\n  local next=\n  for current in $list; do\n    next=${list#*$current }\n    if [ -z \"$prev\" ]; then\n      prev=$current\n    elif [ \"$prev\" -gt \"$current\" ] || [ \"$prev\" -lt \"$current\" ]; then\n      return 1\n    fi\n    prev=$current\n  done\n  return 0"], ["#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n    local longest_string\n    local string\n    local string_length\n    local longest_string_length\n    local i\n\n    longest_string=\"\"\n    longest_string_length=0\n    for string in $1; do\n        string_length=${#string}\n        if [ $string_length -gt $longest_string_length ]; then\n            longest_string=$string\n            longest_string_length=$string_length\n        fi\n    done\n    echo $longest_string"], ["#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n    local l=$1\n    local t=$2\n    local i\n    for i in $l; do\n        if [ $i -gt $t ]; then\n            return 1\n        fi\n    done\n    return 0"], ["#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n    local number=$1\n    local prime_number=2\n    local prime_number_count=0\n    local prime_number_list=()\n    local prime_number_list_count=0\n    local prime_number_list_max=100\n    local prime_number_list_max_count=0\n    local prime_number_list_max_count_max=1000000\n    local prime_number_list_max_count_max_count=0\n    local prime_number_list_max_count_max_count_max=1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n    local list=\"$1\"\n    local positive=()\n    for i in $list; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n            positive+=(\"$i\")\n        fi\n    done\n    echo \"${positive[@]}\""], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n    local l=$1\n    local l_len=${#l}\n    local l_third_len=$((l_len / 3))\n    local l_third_start=$((l_len - l_third_len))\n    local l_third_end=$((l_len - 1))\n    local l_third_sorted=\"\"\n    local l_third_sorted_len=0\n    local l_third_sorted_start=0\n    local l_third_sorted_end=0\n    local l_third_sorted_i=0\n    local l_third_sorted_j=0\n    local l_third_sorted_k=0\n    local l_third_sorted_l=0\n    local l_third_sorted_m=0\n    local l_third_sorted_n=0\n    local l_third_sorted_o=0\n    local l_third_sorted_p=0\n    local l_third_sorted_q=0\n    local l_third_sorted_r=0\n    local l_third_sorted_s=0\n    local l_third_sorted_t=0\n    local l_third_sorted_u=0\n    local l_third_sorted_v=0\n    local l_third_sorted_w=0\n    local l_third_sorted_x=0\n    local l_third_sorted_y=0\n    local l_third_sorted_z=0\n    local l_third_sorted_a=0\n    local l_third_sorted_b=0\n    local l_third_sorted_c=0\n    local l_third_sorted_d=0\n   "], ["#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n    local input=$1\n    local max_nesting=0\n    local nesting=0\n    local output=\"\"\n    local group=\"\"\n    local group_start=\"\"\n    local group_end=\"\"\n    local group_nesting=0\n    local group_max_nesting=0\n    local group_output=\"\"\n    local group_start_nesting=0\n    local group_end_nesting=0\n    local group_start_index=0\n    local group_end_index=0\n    local group_nesting_index=0\n    local group_max_nesting_index=0\n    local group_output_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0\n    local group_start_nesting_index=0\n    local group_end_nesting_index=0"], ["#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n    local side=$1\n    local height=$2\n    echo $((side * height / 2))"], ["#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    local first_digit=$1\n    local second_digit=$2\n    local first_unit_digit=$((first_digit % 10))\n    local second_unit_digit=$((second_digit % 10))\n    local product=$((first_unit_digit * second_unit_digit))\n    echo $product"], ["#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n    local mean\n    mean=$(echo \"$1\" | awk '{s+=$1} END {print s/NR}')\n    echo $(echo \"$1\" | awk '{print |$1 - '$mean'}' | awk '{s+=$1} END {print s/NR}')"], ["#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n  local list1=$1\n  local list2=$2\n  local common=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a1\n  local a2\n  local a3\n  local a4\n  local a5\n  local a6\n  local a7\n  local a8\n  local a9\n  local a10\n  local a11\n  local a12\n  local a13\n  local a14\n  local a15\n  local a16\n  local a17\n  local a18\n  local a19\n  local a20\n  local a21\n  local a22\n  local a23\n  local a24\n  local a25\n  local a26\n  local a27\n  local a28\n  local a29\n  local a30\n  local a31\n  local a32\n  local a33\n  local a34\n  local a35\n  local a36\n  local a37\n  local a38\n  local a39\n  local a40\n  local a41\n  local a42\n  local a43\n  local a44\n  local a45\n  local a46\n  local a47\n  local a48\n  local a49\n  local a50\n  local a51\n  local a52\n  local a53\n  local a54\n  local a55\n  local a56"], ["#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n    local num=$1\n    local roman=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local one=\"i\"\n    local five=\"v\"\n    local ten=\"x\"\n    local five_ten=\"l\"\n    local one_five=\"c\"\n    local one_ten=\"d\"\n    local one_five_ten=\"m\"\n    local one_hundred=\"m\"\n    local five_hundred=\"d\"\n    local one_thousand=\"c\"\n    local five_thousand=\"l\"\n    local one_five_thousand=\"x\"\n    local one_ten_thousand=\"v\"\n    local one_five_ten_thousand=\"i\"\n    local one_hundred_thousand=\"i\"\n    local five_hundred_thousand=\"v\"\n    local one_thousand_thousand=\"x\"\n    local five_thousand_thousand=\"l\"\n    local one_five_thousand_thousand=\"c\"\n    local one_ten_thousand_thousand=\"d\"\n    local one_five_ten_thousand_thousand=\"m\"\n    local one_million=\"m\"\n    local five_million=\"d\"\n    local one_five_million=\"c\"\n    local one_ten_million=\"l\"\n    local one_five_"], ["#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n    local fruits=$1\n    local total_fruits=$2\n    local apples=$(echo \"$fruits\" | grep -o 'apples' | wc -l)\n    local oranges=$(echo \"$fruits\" | grep -o 'oranges' | wc -l)\n    local mango=$(echo \"$fruits\" | grep -o 'mango' | wc -l)\n    local total_fruits=$((apples + oranges + mango))\n    echo \"$total_fruits - $total_fruits\" | bc"], ["#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    local s=$1\n    local c=$2\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0"], ["#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n    local a=$1\n    local b=$2\n    local result=0\n    while [ $b -ne 0 ]; do\n        result=$((result + a % b))\n        a=$b\n        b=$((a % b))\n    done\n    echo $result"], ["#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n    local string=\"$1\"\n    local words=()\n    local word\n    local word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char\n    local word_char_index=0\n    local word_char_length=0\n    local word_char_index_odd=0\n    local word_char_index_even=0\n    local word_char_index_odd_count=0\n    local word_char_index_even_count=0\n    local word_char_index_odd_length=0\n    local word_char_index_even_length=0\n    local word_char_index_odd_length_max=0\n    local word_char_index_even_length_max=0\n    local word_char_index_odd_length_min=0\n    local word_char_index_even_length_min=0\n    local word_char_index_odd_length_sum=0\n    local word_char_index_even_length_sum=0\n    local word_char_index_odd_length_sum_max=0\n    local word_char_index_even_length_sum_max=0\n    local word_char_index_odd_length_sum_min=0\n    local word_char_index_even_length_sum_min=0\n    local word_char_index_odd_length_sum_sum=0\n    local word_char_index_even_length_sum_sum=0\n    local word_char_index_odd_length_sum_sum_max=0\n    local word"], ["#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=($1)\n  local sorted_array=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n "], ["#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n    local IFS=\" \"\n    echo \"$1\""], ["#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n    local list=$1\n    local sorted_list=()\n    local word\n    local word_length\n    local word_length_sorted\n    local word_length_sorted_index\n    local word_length_sorted_index_prev\n    local word_length_sorted_index_next\n    local word_length_sorted_index_next_prev\n    local word_length_sorted_index_next_next\n    local word_length_sorted_index_next_next_prev\n    local word_length_sorted_index_next_next_next\n    local word_length_sorted_index_next_next_next_prev\n    local word_length_sorted_index_next_next_next_next\n    local word_length_sorted_index_next_next_next_next_prev\n    local word_length_sorted_index_next_next_next_next_next\n    local word_length_sorted_index_next_next_next_next_next_prev\n    local word_length_sorted_index_next_next_next_next_next_next\n    local word_length_sorted_index_next_next_next_next_next_next_prev\n    local word_length_sorted_index_next_next_next_next_next_next_next\n    local word_length_sorted_index_next_next_next_next_next_next_next_prev\n    local word_"], ["#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local num=$1\n    local closest_int=$(echo \"$num\" | awk '{print int($1+0.5)}')\n    echo \"$closest_int\""], ["#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n    local vowels=\"aeiou\"\n    local vowels_count=0\n    local word=$1\n    for letter in $word; do\n        if [[ $vowels =~ $letter ]]; then\n            vowels_count=$((vowels_count+1))\n        fi\n    done\n    echo $vowels_count"], ["#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n    local max_word=\"\"\n    local max_word_length=0\n    local word=\"\"\n    local word_length=0\n    local word_chars=\"\"\n    local word_chars_length=0\n    local word_chars_unique=0\n    local word_chars_unique_length=0\n    local word_chars_unique_count=0\n    local word_chars_unique_count_length=0\n    local word_chars_unique_count_count=0\n    local word_chars_unique_count_count_length=0\n    local word_chars_unique_count_count_count=0\n    local word_chars_unique_count_count_count_length=0\n    local word_chars_unique_count_count_count_count=0\n    local word_chars_unique_count_count_count_count_length=0\n    local word_chars_unique_count_count_count_count_count=0\n    local word_chars_unique_count_count_count_count_count_length=0\n    local word_chars_unique_count_count_count_count_count_count=0\n    local word_chars_unique_count_count_count_count_count_count_length=0\n    local word_chars_unique_count_count_count_count_count_count_count=0\n    local word_chars_unique_count_count_count_count_count_count_count_length=0\n    local word_chars_unique_count_count_count_count_count_count_count_count=0\n    local word_chars_unique_count_count_count_count_count_count_count_count_length=0\n    local word_chars_unique_count_count_count_"], ["#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n    local text=$1\n    if [ -z \"$text\" ]; then\n        echo \"None\"\n    else\n        echo $(echo -n \"$text\" | md5sum | cut -d' ' -f1)\n    fi"], ["#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    local x=$1\n    local base=$2\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n    local a=$1\n    local b=$2\n    local c=$3\n    local s=$((a+b+c))\n    local p=$((a*a))\n    local q=$((b*b))\n    local r=$((c*c))\n    local d=$((p+q+r-s*s))\n    if [ $d -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    local gpa=$1\n    local letter_grade\n    if [ $gpa -ge 4.0 ]; then\n        letter_grade=\"A+\"\n    elif [ $gpa -ge 3.7 ]; then\n        letter_grade=\"A\"\n    elif [ $gpa -ge 3.3 ]; then\n        letter_grade=\"A-\"\n    elif [ $gpa -ge 3.0 ]; then\n        letter_grade=\"B+\"\n    elif [ $gpa -ge 2.7 ]; then\n        letter_grade=\"B\"\n    elif [ $gpa -ge 2.3 ]; then\n        letter_grade=\"B-\"\n    elif [ $gpa -ge 2.0 ]; then\n        letter_grade=\"C+\"\n    elif [ $gpa -ge 1.7 ]; then\n        letter_grade=\"C\"\n    elif [ $gpa -ge 1.3 ]; then\n        letter_grade=\"C-\"\n    elif [ $gpa -ge"], ["#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n  local delimiter=$1\n  local numbers=$2\n  local result=()\n  local i=0\n  local j=0\n  local n=${#numbers}\n  while [ $i -lt $n ]; do\n    result[$j]=$numbers[$i]\n    j=$((j+1))\n    if [ $i -lt $((n-1)) ]; then\n      result[$j]=$delimiter\n    fi\n    i=$((i+1))\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n    local array=($1)\n    local count=0\n    for i in \"${array[@]}\"; do\n        if [[ $i =~ ^[0-9]+$ ]] && (( ${i:0:1} % 2 == 1 && ${i: -1:1} % 2 == 1 && ${i} > 10 )); then\n            count=$((count + 1))\n        fi\n    done\n    echo $count"], ["#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n  local sum=0\n  local n=$1\n  for ((i=1; i<=n; i++)); do\n    sum=$((sum+i))\n  done\n  echo $sum"], ["#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n    local list_length=${#list}\n    local list_copy=\"$list\"\n    local list_copy_length=${#list_copy}\n    local list_copy_index=0\n    local list_copy_element=\"\"\n    local list_copy_element_length=0\n    local list_copy_element_index=0\n    local list_copy_element_index_max=0\n    local list_copy_element_index_min=0\n    local list_copy_element_index_max_count=0\n    local list_copy_element_index_min_count=0\n    local list_copy_element_index_max_count_max=0\n    local list_copy_element_index_min_count_max=0\n    local list_copy_element_index_max_count_min=0\n    local list_copy_element_index_min_count_min=0\n    local list_copy_element_index_max_count_min_count=0\n    local list_copy_element_index_min_count_min_count=0\n    local list_copy_element_index_max_count_min_count_max=0\n    local list_copy_element_index_min_count_min_count_max=0\n    local list_copy_element_index_max_count_min_count_min=0\n    local list_copy_element_index_min_count_min_count_min=0\n    local list_copy_element_index_max_count_min_count_min_count=0\n    local list_copy_element_index_min_count_min_count_min_count=0\n    local list_copy_element_index_max_count_min_count_min_count_max=0\n    local list_copy_element_index_min_count_min_count_min_count_max=0\n    local list_copy_element_index_max"], ["#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n  local a=$1\n  local b=$2\n  local result=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a_even=\"\"\n  local b_even=\"\"\n  local a_odd=\"\"\n  local b_odd=\"\"\n  local a_even_length=0\n  local b_even_length=0\n  local a_odd_length=0\n  local b_odd_length=0\n  local a_even_length_minus_one=0\n  local b_even_length_minus_one=0\n  local a_odd_length_minus_one=0\n  local b_odd_length_minus_one=0\n  local a_even_length_minus_two=0\n  local b_even_length_minus_two=0\n  local a_odd_length_minus_two=0\n  local b_odd_length_minus_two=0\n  local a_even_length_minus_three=0\n  local b_even_length_minus_three=0\n  local a_odd_length_minus_three=0\n  local b_odd_length_minus_three=0\n  local a_even_length_minus_four=0\n  local b_even_length_minus_four=0\n  local a_odd_length_minus_four=0\n  local b_odd_length_minus_four=0\n  local a_"], ["#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n    local -r seq=\"$1\"\n    local -r seq_len=${#seq}\n    local -r max_len=$((seq_len - 1))\n    local -r max_idx=$((seq_len - 1))\n    local -r max_val=${seq:$max_idx:1}\n    local -r max_str='\"'\"$max_val\"'\"'\n    local -r max_str_arr=($max_str)\n    local -r max_str_arr_len=${#max_str_arr[@]}\n    local -r max_str_arr_idx=0\n    local -r max_str_arr_idx_max=$((max_str_arr_len - 1))\n    local -r max_str_arr_idx_min=$((max_str_arr_len - 2))\n    local -r max_str_arr_idx_inc=$((max_str_arr_len - 3))\n    local -r max_str_arr_idx_dec=$((max_str_arr_len - 4))\n    local -r max_str_arr_idx_dec_min=$((max_str_arr_len - 5))\n    local -r max_str_arr_idx_dec_max=$((max_str_arr_len - 6))\n    local -r max_str_arr_idx_dec_inc=$((max_str_arr_len - 7))\n    local -r max_str_arr_idx_dec_dec=$((max_str_arr_len - 8))\n    local -r max_str_arr_idx_dec_dec_min=$((max_str_arr_len - 9))\n    local -r max_str_arr_idx_dec_dec_max=$((max_str_arr_len - 10))\n    local -r max_str_arr"], ["#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n  local balance=0\n  local i=0\n  local op\n  for op in $1; do\n    case $op in\n      [0-9]*) balance=$((balance + op)) ;;\n      -[0-9]*) balance=$((balance - op)) ;;\n    esac\n    ((i++))\n  done\n  if [ $balance -lt 0 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n    local list=$1\n    local max=0\n    local max_freq=0\n    local max_num=\"\"\n    for num in $list; do\n        local freq=$(echo \"$list\" | grep -o \"$num\" | wc -l)\n        if [ $freq -ge $num ]; then\n            if [ $freq -gt $max_freq ]; then\n                max_freq=$freq\n                max_num=$num\n            fi\n        fi\n    done\n    if [ $max_num != \"\" ]; then\n        echo $max_num\n    else\n        echo -1\n    fi"], ["#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local stack=()\n    local i=0\n    while [ $i -lt ${#brackets} ]; do\n        local c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n            stack+=(\"$c\")\n        elif [ \"$c\" == \")\" ]; then\n            if [ -z \"${stack[-1]:-}\" ]; then\n                return 1\n            fi\n            stack=(\"${stack[@]:0:-1}\")\n        fi\n        i=$((i+1))\n    done\n    if [ ${#stack[@]} -gt 0 ]; then\n        return 1\n    fi\n    return 0"], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n    local l=$1\n    local l_len=${#l}\n    local l_even=()\n    local l_odd=()\n    local i=0\n    while [ $i -lt $l_len ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            l_even+=(\"${l[$i]}\")\n        else\n            l_odd+=(\"${l[$i]}\")\n        fi\n        i=$((i + 1))\n    done\n    echo \"${l_odd[@]}\"\n    echo \"${l_even[@]}\" | sort"], ["#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n  local string1=$1\n  local string2=$2\n  local string1_length=${#string1}\n  local string2_length=${#string2}\n  local i=0\n  local j=0\n  local same=true\n  while [ $i -lt $string1_length ] && [ $j -lt $string2_length ]; do\n    if [ \"${string1:$i:1}\" != \"${string2:$j:1}\" ]; then\n      same=false\n      break\n    fi\n    i=$((i + 1))\n    j=$((j + 1))\n  done\n  if [ $i -eq $string1_length ] && [ $j -eq $string2_length ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local open_brackets=()\n    local close_brackets=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g="]]