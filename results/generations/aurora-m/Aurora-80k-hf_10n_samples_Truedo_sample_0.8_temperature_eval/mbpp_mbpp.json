[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,character):\n    pos = string.find(character)\n    string = string[pos+1:-1]\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n# my_str = \"hello\"\n# remove_char = \"l\"\n# print(my_str)\n# print(my_str.replace(remove_char, \"\"))\n# print(my_str.replace(remove_char, \"\"))\n\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str1,str2):\n    if(str1.find(str2)==0):\n        return str1[len(str2):]\n    elif(str1.find(str2)==-1):\n        return str1\n    else:\n        return str1[:str1.find(str2)]+str1[str1.find(str2)+len(str2):]\n\n\nremove_Occ(\"hello\",\"l\")\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string,ch):\n    s1 = string[0:len(string)-1]\n    s2 = string[1:len(string)]\n    if s1[0] == ch:\n        s1 = s1[1:len(string)]\n    if s2[len(string)-1] == ch:\n        s2 = string[0:len(string)-1]\n    return s1+s2\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, ch):\n    if string[-1] == ch:\n        return string[:-1]\n    else:\n        return string", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(st, ch):\n    st = st.replace(ch, \"\")\n    # last_char = st.pop()\n    last_char = st[-1]\n    st = st.rstrip(last_char)\n    return st\n\n# print(remove_Occ(\"hello\", \"h\"))\n# print(remove_Occ(\"hello\", \"l\"))\n# print(remove_Occ(\"hello\", \"e\"))\n# print(remove_Occ(\"hello\", \"o\"))\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string,char):\n    l = string.index(char)\n    r = string.rindex(char)\n    return string[:l] + string[l+1:r] + string[r+1:]\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(str, ch):\n    return str[1:len(str)-1]\n    ", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str, char):\n    #Your code here\n    string = str\n    for i in string:\n        if i == char:\n            string = string.replace(i, \"\")\n    return string\n", "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string,character):\n\tif string == \"\" or string == None:\n\t\treturn \"\"\n\tfirstOcc = string.find(character)\n\tif firstOcc == -1:\n\t\treturn string\n\tsecondOcc = string[::-1].find(character)\n\treturn string[0:firstOcc] + string[secondOcc+1:]\n\ndef main():\n\tassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\tassert remove_Occ(\"abc\",\"a\") == \"bc\"\n\tassert remove_Occ(\"abc\",\"c\") == \"ab\"\n\tassert remove_Occ(\"abc\",\"x\") == \"abc\"\n\tassert remove_Occ(\"abcdef\",\"a\") == \"bcdfe\"\n\tassert remove_Occ(\"abcdef\",\"c\") == \"abfde\"\n\tassert remove_Occ(\"abcdef\",\"d\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"f\") == \"abdef\"\n\tassert remove_Occ(\"abcdef\",\"g\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"h\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"i\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"j\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"k\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"l\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"m\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"n\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"o\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"p\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"q\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"r\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"s\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"t\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"u\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"v\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"w\") == \"abcdef\"\n\tassert remove_Occ(\"abcdef\",\"x"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    matrix.sort(key=lambda x: sum(x))\n    return matrix\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    matrix.sort(key=lambda row: sum(row))\n    return matrix", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    if not matrix:\n        return matrix\n    else:\n        return sort_matrix(matrix[1:]+[matrix[0]])\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    #your code here\n    m=len(matrix)\n    for i in range(m):\n        matrix[i].sort(reverse=True)\n    for i in range(m):\n        for j in range(m):\n            if matrix[i][j]<matrix[i][j+1]:\n                matrix[i][j],matrix[i][j+1]=matrix[i][j+1],matrix[i][j]\n    for i in range(m):\n        for j in range(m):\n            if matrix[i][j]<matrix[i+1][j]:\n                matrix[i][j],matrix[i+1][j]=matrix[i+1][j],matrix[i][j]\n    return matrix\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort matrix by row's sum\n\n    Parameters\n    ----------\n    matrix: list\n        the matrix\n\n    Returns\n    -------\n    sorted_matrix: list\n        the sorted matrix\n    \"\"\"\n    sorted_matrix = []\n    for i in range(len(matrix)):\n        max_sum = -sys.maxsize\n        for j in range(len(matrix[i])):\n            max_sum = max(max_sum, matrix[i][j])\n        matrix[i] = matrix[i].sort(reverse=True)\n        sorted_matrix.append(max_sum)\n    return sorted_matrix", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    matrix.sort(key=sum)\n    return matrix\n\n\ndef sort_matrix_v2(matrix):\n    matrix.sort(key=lambda x: x[0])\n    return matrix\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(mat):\n    row_sum = [sum(i) for i in mat]\n    row_idx = sorted(list(range(len(row_sum))), key=lambda x:row_sum[x])\n    return [mat[i] for i in row_idx]\n\n# assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    length = len(matrix)\n    for i in range(0, length-1):\n        for j in range(i+1, length):\n            if matrix[i][0] > matrix[j][0]:\n                temp = matrix[i]\n                matrix[i] = matrix[j]\n                matrix[j] = temp\n    return matrix\n\n#print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\nfrom typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sort the input matrix in ascending order according to the sum of its rows\n    \"\"\"\n    m, n = len(matrix), len(matrix[0])\n\n    # Sort the rows\n    for i in range(m):\n        matrix[i].sort(reverse=True)\n\n    # Sort the columns\n    for i in range(n):\n        for j in range(m):\n            matrix[j][i] = matrix[j][i] + matrix[j - 1][i] if j > 0 else matrix[j][i]\n\n    return matrix\n\n", "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(m):\n    row_sum = [0 for i in range(len(m))]\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            row_sum[i] += m[i][j]\n\n    print(row_sum)\n\n    for i in range(len(row_sum)):\n        for j in range(len(m)):\n            if row_sum[j] < row_sum[i]:\n                tmp = m[j]\n                m[j] = m[i]\n                m[i] = tmp\n\n    return m\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    d = {}\n    for word in words:\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    rslt = [(word,count) for word,count in d.items() if count > 1]\n    return rslt\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    \"\"\"\n    # Store unique words in a set and count them\n    word_set = set(words)\n    word_dict = dict.fromkeys(word_set, 0)\n    for word in words:\n        word_dict[word] += 1\n\n    # Sort words by value in ascending order and return words as tuples\n    word_list = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=True)\n    return word_list\n\n\ndef main():\n    print(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))\n\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    return(sorted([ (word, words.count(word)) for word in words], key=lambda x: x[1], reverse=True))\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    my_dict = {}\n    for word in words:\n        if word in my_dict:\n            my_dict[word] += 1\n        else:\n            my_dict[word] = 1\n    return sorted(my_dict.items(), key=lambda x: x[1], reverse=True)", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    counter = Counter(words)\n    return counter.most_common()\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    \"\"\"\n    Helper function to return a list of tuples in the format (word, count)\n    \"\"\"\n    # TODO: Finish the function\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n\n    # Sort the list of tuples by the second value\n    return sorted(word_counts.items(), key=operator.itemgetter(1), reverse=True)\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    if len(words) == 0:\n        return\n    most_common = {}\n    for word in words:\n        if word not in most_common:\n            most_common[word] = 0\n        most_common[word] += 1\n    sorted_common = [(word, count) for word, count in most_common.items() if count > 0]\n    sorted_common.sort(key = lambda x: x[1], reverse=True)\n    return sorted_common\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(dict):\n    return list(dict.items())[0:5]\n", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\nfrom typing import Tuple\n\ndef count_common(words: list[str]) -> Tuple[str, int]:\n    counts = {}\n    for word in words:\n        if word not in counts:\n            counts[word] = 0\n        counts[word] += 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)", "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    # assert(len(words) > 0)\n    c = {}\n    for word in words:\n        c[word] = c.get(word, 0) + 1\n    # assert(c['red'] == 1)\n    return sorted(c.items(), key=operator.itemgetter(1), reverse=True)"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    return 1/3 * (a*b*c)\n\ndef main():\n    a = 10\n    b = 8\n    c = 6\n    print(find_Volume(a,b,c))\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(length,breadth,height):\n    return length*breadth*height\n\n# Alternative way to find volume of the prism\n# volume = (length*breadth*height)/2\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(l,w,h):\n    return l*w*h/3\n\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_volume(a, b, c):\n    # find height of prism\n    h = (a+b+c)/2\n    volume = h * (a*b*c)\n    return volume\n\n# test", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,c):\n    return a*b*c\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_volume(a,b,c):\n    \"\"\"\n    Input:\n        a,b,c : sides of a triangle\n    Output:\n        volume of a triangular prism\n    \"\"\"\n    a,b,c = int(a), int(b), int(c)\n    s = a+b+c\n    v = (s*s)/4\n    return v\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(l, b, h):\n    V = l*b*h\n    return V\n\n# Test function", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base, height, depth):\n    return base*height*depth\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    s = (a+b+c)/2\n    vol = (a*b*c)/6\n    return vol\n", "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a,b,c):\n    # Your code here\n    return a*b*c/2\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    return s.split('b')\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    new_string = ''\n    if len(string) != 0:\n        for i in range(len(string)):\n            if string[i] in string[i].lower():\n                new_string += string[i]\n            else:\n                new_string += ' '\n        return new_string.split(' ')\n    else:\n        return []\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    s = s.lower()\n    a = s[0]\n    b = \"\"\n    for i in range(len(s)):\n        if s[i] >= 'a' and s[i] <= 'z':\n            b = b+s[i]\n        else:\n            if b != \"\":\n                yield b\n            a = s[i]\n            b = \"\"\n    if b != \"\":\n        yield b\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(str_in):\n    result = []\n    for i in str_in:\n        if i.islower():\n            result.append(result)\n    return result\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(mystring):\n    newlist = []\n    newstring = mystring.lower()\n    for index,letter in enumerate(newstring):\n        if letter == 'a':\n            newlist.append(newstring[index:])\n            break\n        else:\n            newlist.append(newstring[index:])\n            break\n    return newlist", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    return [string[i:].lower() for i in range(len(string))]\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    lst=[]\n    for i in string:\n        if i.islower():\n            lst.append(i)\n    return lst\n\ndef test_split_lowerstring():\n    assert split_lowerstring(\"AbCd\")==['bC','d']\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    strlist = []\n    for char in string:\n        if char.islower():\n            strlist.append(char)\n        else:\n            strlist.append(\"\")\n    return strlist\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    res = []\n    for i in range(len(string)):\n        if i == 0:\n            res.append(string[i].lower())\n            continue\n        elif string[i-1].isupper() and string[i].islower():\n            res.append(string[i-1])\n            res.append(string[i].lower())\n        else:\n            res.append(string[i].lower())\n    return res\n", "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    string_split = []\n    for letter in string:\n        if letter.islower():\n            string_split.append(letter)\n        else:\n            string_split.append(\" \".join(string_split))\n            string_split = [letter]\n    string_split.append(\" \".join(string_split))\n    return string_split"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\nimport re\ndef text_lowercase_underscore(text):\n    match = re.search(r\"(?i)\\b[a-z]+_+\\b\", text)\n    if match:\n        return f\"Found a match!\"\n    else:\n        return \"No match!\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\n# SOLUTION:\n\ndef text_lowercase_underscore(text):\n    matches = 0\n    for i in range(len(text) - 1):\n        if text[i].islower() and text[i + 1] == \"_\":\n            matches = matches + 1\n    if matches == 1:\n        return \"Found a match!\"\n    else:\n        return \"Not Found\"\n\n# TESTING:", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    # Your code goes here\n    underscore = re.findall(r\"_\", text)\n    if underscore:\n        print(\"Found a match!\")\n    else:\n        print(\"No match found.\")\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    list_of_words = []\n    list_of_words = re.findall(r'[a-z]+[_]+[a-z]+', text)\n    for word in list_of_words:\n        print(\"Found a match!\")\n    return list_of_words\n\ntext_lowercase_underscore(\"aab_cbbbc\")```\n\n### Output:\n\nFound a match!\nFound a match!\n\n### Description:\n\nTask 4\n\n### Code:\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n  if \"_\" in text:\n    return \"Found a match!\"\n  else:\n    return \"No match found!\"\n  \ntext_lowercase_underscore(\"aab_cbbbc\")\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"zZ0X3Wzyo6tn\" outputId=\"3a4a0485-a66d-46e7-96e6-8f619048bd2a\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n\n    count = 0\n    # Iterate over the string\n    for i in text:\n        # If letter is lowercase and preceded by underscore\n        if i.islower() and text[text.index(i)-1] == '_':\n            count += 1\n            print('Found a match!')\n\n    # If there is no underscore in the text return False\n    if count == 0:\n        return \"Not Found\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    \"\"\"\n    :param text: a string.\n    :return: a string.\n    \"\"\"\n    result = []\n    for w in text.split():\n        if w.islower() and '_' in w:\n            result.append(w)\n    if len(result) == 0:\n        return 'Not found'\n    elif len(result) == 1:\n        return f'Found a match! {result[0]}'\n    else:\n        return f'Found {len(result)} match(es)! {result}'\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    if \"_\" in text:\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    #Assume text has 1 or more lowercase letters\n    text_lower=text.lower()\n    text_underscore=text.replace(\" \", \"_\")\n    if text_underscore == text_lower:\n        return (\"Found a match!\")\n    else:\n        return (\"Did not find a match!\")", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(string):\n    if len(string) == 0:\n        return \"No match!\"\n\n    str_new = string.replace(\" \", \"\")\n    str_new = str_new.lower()\n    str_new = str_new.replace(\"_\", \"\")\n    for word in str_new.split():\n        if word == \"_\":\n            return \"Found a match!\"\n\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(size):\n  side = size * 2\n  perimeter = 4 * side\n  return perimeter\n\n# Test", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return 4*side\n\n#Call the function to find the perimeter of the square", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(length):\n    \"\"\"\n    Function to find the perimeter of a square\n    Input: A number to find perimeter of\n    Output: The perimeter of a square\n    \"\"\"\n    assert type(length) == int, \"Length must be an integer\"\n    return 4*length\n\nsquare_perimeter(10)\n\n\n# -\n\n# <h3>Exercise 3</h3>\n# <p>Write a function to find the second highest number in a list.\n# assert second_highest([1,2,3,4,5])==5\n# assert second_highest([1,1,2,2,3,3,4,4,5,5,6])==6</p>\n\n# +\ndef second_highest(list):\n    \"\"\"\n    Function to find the second highest number in a list\n    Input: A list of numbers\n    Output: The second highest number in a list\n    \"\"\"\n    assert type(list) == list, \"List must be a list\"\n    assert len(list) > 0, \"List must contain at least one number\"\n    \n    second_highest = list[0]\n    for num in list:\n        if num > second_highest:\n            second_highest = num\n            \n    return second_highest\n\nsecond_highest([1,2,3,4,5])\n\nsecond_highest([1,1,2,2,3,3,4,4,5,5,6])\n\n\n# -\n\n# <h3>Exercise 4</h3>\n# <p>Write a function to check if a number is divisible by 7 or 11.\n# assert is_divisible_by_7_or_11(7)==True\n# assert is_divisible_by_7_or_11(11)==True\n# assert is_divisible_by_7_or_11(6)==False</p>\n\n# +\ndef is_divisible_by_7_or_11(number):\n    \"\"\"\n    Function to check if a number is divisible by 7 or 11\n    Input: A number\n    Output: True if number is divisible by ", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(n):\n    return n*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(length):\n    return length**2 * 4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(x):\n    return x**2 * 4", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(length):\n    \"\"\"\n    This function calculates the perimeter of a square.\n    The perimeter is the 4 sides of a square added together.\n    A square is 4 sides of length 'length'.\n    \"\"\"\n    return 4 * length\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return side*4\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(n):\n    return 4*n\nsquare_perimeter(10)\n", "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(num):\n    return num * 4"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string1, string2):\n    # Write your code here\n    string1_new = ''\n    for letter in string1:\n        if letter not in string2:\n            string1_new += letter\n    return string1_new\n\n# Solution 2", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    #your code goes here\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string1, string2):\n    clean_string = \"\"\n    for character in string1:\n        if character not in string2:\n            clean_string += character\n    return clean_string\n\ndef test_remove_dirty_chars():\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string1, string2):\n    return ''.join(set(string1).difference(string2))\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string1, string2):\n    return string1.replace(string2, \"\")\n\ndef remove_dirty_chars(string1, string2):\n    return ''.join([char for char in string1 if char not in string2])\n\ndef remove_dirty_chars(string1, string2):\n    dirty = []\n    for char in string1:\n        if char not in string2:\n            dirty.append(char)\n    return ''.join(dirty)\n\ndef remove_dirty_chars(string1, string2):\n    return ''.join(list(set(string1) - set(string2)))\n\n# What's happening?\n# These are some of the behaviors that will be studied this week:\n# - return value\n# - mutate arguments\n# - mutate return value\n# - mutate global scope\n\n# Instead of having to specify the behavior of your functions, it is helpful to think of behaviors in terms of functions.\n# When a function takes a number and an operator, it can return the result.\ndef add(x, y):\n    return x + y\n\n# When a function takes a number and an operator, it can mutate the argument.\ndef change_number(x, y):\n    x += y\n\n# When a function takes a number and an operator, it can mutate the return value.\ndef change_return_value(x, y):\n    return x * y\n\n# When a function takes a number and an operator, it can mutate the global scope.\ndef change_global(x, y):\n    x = x * y\n\n# We will be going over these in detail in the coming weeks.\n# Let's practice a bit!\n# What is the return value of the following expression?\n\n# \"what\" + \"ever\" + 150\n\n# The return value of the expression is:\n# - the list \"what\", \"ever\", 150\n# - the list \"what\", \"ever\"\n# - the list \"what\", 150\n# - the list \"what\"\n# - the list \"what\"\n# - 15", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n# My attempt:\ndef remove_dirty_chars(string1, string2):\n    for i in string1:\n        if i in string2:\n            string1 = string1.replace(i, \"\")\n    return string1\n\n# Tests:", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(dirty, clean):\n    # This is a hacky method, but it works.\n    # I think there must be a better way.\n    # The hacky method works like this:\n    # 1) We know the first and last characters of each string are the same, so we strip them.\n    # 2) We split the dirty string on the characters in clean, and join the resulting\n    #    strings without those characters.\n    return ''.join(dirty.split(clean)[1:-1])\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    return ''.join(c for c in str1 if c not in str2)\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string, dirty):\n    newstring = ''\n    for char in string:\n        if char not in dirty:\n            newstring += char\n    return newstring\n\n#@Test\ndef test_remove_dirty_chars():\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\n#@Test\ndef test_remove_dirty_chars_dirty():\n    assert remove_dirty_chars(\"probasscurve\", \"prob\") == 'ascurve'\n\n", "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(first_string, second_string):\n    return \"\".join(ch for ch in first_string if ch not in second_string)\n\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    # check if any array value is repeated\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return True\n    return False\n\n\n# ## Problem 8: String Rotation", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate([1,2,3,4,5]):\n    print(\"test_duplicate([1,2,3,4,5])==False\")\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(input_array):\n    \"\"\"\n    given an array of integers, return true if there is any duplicate\n    \"\"\"\n    if len(input_array) <= 0:\n        return False\n    dict_data = {}\n    for i in input_array:\n        if i not in dict_data:\n            dict_data[i] = True\n        else:\n            return True\n\n#solution 1\n#dict_data = {}\n#for i in input_array:\n#    if i in dict_data:\n#        return True\n#    dict_data[i] = True\n\n#solution 2\n#set_data = set()\n#for i in input_array:\n#    if i in set_data:\n#        return True\n#    set_data.add(i)\n\n#solution 3\n#for i in input_array:\n#    if input_array.count(i) > 1:\n#        return True\n\n#solution 4\ndef test_duplicate(input_array):\n    if len(input_array) <= 0:\n        return False\n    input_array = sorted(input_array)\n    for i in range(1,len(input_array)):\n        if input_array[i] == input_array[i-1]:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if len(arr)==0:\n        return False\n    temp = {}\n    for i in range(0,len(arr)):\n        if arr[i] in temp:\n            return True\n        else:\n            temp[arr[i]] = True\n    return False\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    if len(arr)==0:\n        return False\n    else:\n        return arr.count(arr[0]) != 1 and test_duplicate(arr[1:])\n\ndef test_duplicate_recursive(arr):\n    if len(arr)==0:\n        return False\n    else:\n        return arr.count(arr[0]) != 1 and test_duplicate_recursive(arr[1:])\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    if arr[0]==arr[1]:\n        return True\n    elif arr[0]==arr[2]:\n        return True\n    elif arr[0]==arr[3]:\n        return True\n    elif arr[0]==arr[4]:\n        return True\n    elif arr[1]==arr[2]:\n        return True\n    elif arr[1]==arr[3]:\n        return True\n    elif arr[1]==arr[4]:\n        return True\n    elif arr[2]==arr[3]:\n        return True\n    elif arr[2]==arr[4]:\n        return True\n    elif arr[3]==arr[4]:\n        return True\n    elif arr[0]==arr[1]==arr[2]==arr[3]==arr[4]:\n        return True\n    else:\n        return False\n\n\n\n# +\narr = ([1,2,3,4,5])", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    return len(arr) == len(set(arr))\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(input_list):\n    \"\"\"\n    input_list: A list of integers to test\n    return: True if any element of input_list is duplicated, False otherwise\n    \"\"\"\n    if input_list == []:\n        return False\n    for i in range(len(input_list)):\n        if input_list[i] in input_list[i+1:]:\n            return True\n    return False", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(test):\n    assert not duplicate([1,2,3,4,5])\n", "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(data):\n    if len(data) < 1:\n        return False\n    elif len(data) > 1:\n        #check all elements in data\n        for i in range(len(data)):\n            for j in range(i+1,len(data)):\n                #if data[i] == data[j]:\n                if data[i] == data[j]:\n                    return True\n            else:\n                pass\n    else:\n        return False\n\ndef duplicate(data):\n    if len(data) < 1:\n        return False\n    elif len(data) > 1:\n        for i in range(len(data)):\n            for j in range(i+1,len(data)):\n                if data[i] == data[j]:\n                    return True\n    else:\n        return False\n\ndef duplicate_with_dictionary(data):\n    if len(data) < 1:\n        return False\n    elif len(data) > 1:\n        d = {}\n        for i in data:\n            if i in d:\n                return True\n            d[i] = 1\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(n):\n    if n < 1000 or n > 9999:\n        return False\n    else:\n        s = str(n)\n        return s.count('1') == s.count('3') and s.count('2') == s.count('4') and s.count('5') == s.count('6') and s.count('7') == s.count('8') and s.count('9') == s.count('0')\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(n):\n    if n < 10:\n        return False\n    n = str(n)\n    for i in range(len(n)):\n        if n[i] != n[len(n)-1-i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodball(num):\n    first_digit = num // 10\n    second_digit = num % 10\n    third_digit = (num // 100) % 10\n    return first_digit == second_digit == third_digit\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number):\n    sum_digits = sum([int(d) for d in str(number)])\n    if number == sum_digits:\n        return True\n    else:\n        return False\n\n# assert is_woodall(383) == True", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    if n % 1000 != 0:\n        return False\n    s = str(n)\n    if len(s) % 3 == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n# code\ndef is_woodall(number):\n    #check if the number is in the list\n    if number in wood_list:\n        return True\n    else:\n        return False\n\nwood_list = [400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000]", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\nfrom math import sqrt\n\n\ndef is_woodall(number):\n    sqr = sqrt(number)\n    return sqr % 1 == 0\n\n\ndef test():\n    assert is_woodall(383) == True\n\n\ntest()", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    # your code here\n    if n < 100: return False\n    for i in range(10):\n        if n % i == 0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(number):\n    # your code here\n    pass\n", "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(number):\n    if number % 2 == 1:\n        return False\n    else:\n        number_list = [int(i) for i in str(number)]\n        for i in number_list:\n            if (i - 1) % 3 == 0:\n                return False\n        return True\n\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    #Create a list of values between 0 and m\n    nums = [x for x in range(0, m+1)]\n    #Create a list of multiples of n\n    multiple = []\n    for num in nums:\n        multiple.append(n * num)\n    #Return list of m numbers\n    return multiple\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    return [n * i for i in range(1,m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n    result = []\n    for i in range(m):\n        result.append(n*i)\n    return result\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n,m):\n    return [x for x in range(m*n,m*n+m)]\n\ndef main():\n    print(multiples_of_num(4,3))\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    n = int(n)\n    m = int(m)\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if m <= 0:\n        raise ValueError(\"m must be a positive integer\")\n    if n < m:\n        raise ValueError(\"m cannot be greater than n\")\n    return [i * n for i in range(m)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [n*x for x in range(1,m+1)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(n*i)\n    return multiples\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    if n<=0:\n        raise ValueError(\"Not a valid num\")\n    elif m<=0:\n        raise ValueError(\"Not a valid m\")\n    else:\n        return [i for i in range(n,n+m)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    return [i * n for i in range(m)]\n", "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    list1 = []\n    for i in range(1,m+1):\n        list1.append(n*i)\n    return list1\n\nmultiples_of_num(4,3)\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[j]\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    if len(arr) < 2:\n        return -1\n    size = len(arr)\n    arr.sort()\n    for i in range(size):\n        if i != arr[i]:\n            return arr[i]\n    return -1\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(numbers):\n  return next(i for i, x in enumerate(numbers) if x == numbers[i + 1])\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    \"\"\"\n    Finds the first duplicate element in a given array of integers.\n    :param arr:\n    :return:\n    \"\"\"\n    # Your code here!\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i+1]\n    return None\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    s = set(arr)\n    for i in s:\n        if arr.count(i) > 1:\n            return i\n    return -1", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    return len([item for item in arr if arr.count(item) > 1])\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n\ndef find_first_duplicate_v2(nums):\n    for num in nums:\n        if nums.count(num) > 1:\n            return num", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > arr[abs(arr[i])-1]:\n            arr[i], arr[abs(arr[i])-1] = arr[abs(arr[i])-1], arr[i]\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            return i+1\n    return False\n\ndef find_first_duplicate2(arr):\n    for i in range(len(arr)):\n        while arr[abs(arr[i])-1] != arr[i]:\n            arr[abs(arr[i])-1], arr[i] = arr[i], arr[abs(arr[i])-1]\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            return i+1\n    return False\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\nfrom typing import List\n\n\ndef find_first_duplicate(nums: List[int]) -> int:\n    if len(nums) == 1:\n        return nums[0]\n\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            return nums[i]\n    return None\n\n", "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\nfrom unittest import TestCase\n\n\ndef find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > len(arr) or arr[i] < 0:\n            return None\n        if arr[i] == i:\n            continue\n        if arr[arr[i]] == arr[i]:\n            return arr[i]\n    return None\n\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(l):\n    max_sum = 0\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            max_sum = max(max_sum, l[i][j])\n    return max_sum\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list_of_list):\n    max_sum = -float('inf')\n    for sub_list in list_of_list:\n        temp_sum = 0\n        for i in range(0, len(sub_list)):\n            temp_sum += sub_list[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(matrix):\n    # Write your code here.\n    if matrix == []:\n        return None\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if j == 0:\n                max_sum[i] += matrix[i][j]\n            else:\n                max_sum[i] = max(max_sum[i], max_sum[i-1] + matrix[i][j])\n    return max_sum[n-1]\n\nmaximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]])\n\n\n# +\n# Find the longest word from a string using recursion\n# Write a python function to find the longest word in a string using recursion. \n# If the string consists of single word then return the word else return None.", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(matrix):\n    #complete this function\n    max_sum = -1\n    for row in matrix:\n        row_sum = 0\n        for item in row:\n            row_sum += item\n        if row_sum > max_sum:\n            max_sum = row_sum\n    return max_sum\n\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(array):\n    sum_of_array = 0\n    for i in range(0,len(array)):\n        sum_of_array += array[i][0] + array[i][1] + array[i][2]\n    \n    return sum_of_array\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(a):\n    # Write your code here\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return sum(a[0])\n    if len(a) == 2:\n        return max(sum(a[0]), sum(a[1]))\n    return max(maximum_Sum(a[0]), maximum_Sum(a[1]), sum(a[2]), maximum_Sum(a[0]+a[1]+a[2]))", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(matr):\n    if len(matr) == 0:\n        return None\n    else:\n        max_Sum = 0\n        for i in range(len(matr)):\n            if len(matr[i]) == 0:\n                return None\n            else:\n                for j in range(len(matr[i])):\n                    max_Sum = max(max_Sum, matr[i][j])\n        return max_Sum\n\n#print(maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]))\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(matrix):\n    # Write your code here.\n    if len(matrix)==0:\n        return 0\n    if len(matrix)==1:\n        return matrix[0][0]\n    max_sum = matrix[0][0]\n    max_sum_row = matrix[0][0]\n    max_sum_column = matrix[0][0]\n    for i in range(1, len(matrix)):\n        for j in range(1, len(matrix[i])):\n            max_sum = max(max_sum, matrix[i][j]+max(max_sum_row,max_sum_column))\n            max_sum_row = max(max_sum_row,matrix[i][j])\n            max_sum_column = max(max_sum_column,matrix[i][j])\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(l):\n    max_sum = 0\n    for i in l:\n        max_sum += sum(i)\n    return max_sum\n", "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\nfrom typing import List\n\n\ndef maximum_Sum(list_of_list: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n\n    >>> maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n    33\n    >>> maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12]])\n    28\n    >>> maximum_Sum([[1, 2, 3], [4, 5, 6]])\n    22\n    >>> maximum_Sum([[1, 2, 3]])\n    3\n    \"\"\"\n    if not list_of_list:\n        return 0\n\n    m = len(list_of_list)\n    n = len(list_of_list[0])\n\n    max_row = 0\n    max_col = 0\n    max_sum = 0\n\n    for i in range(m):\n        for j in range(n):\n            max_row = max(max_row, list_of_list[i][j])\n            max_col = max(max_col, list_of_list[j][i])\n            max_sum = max(max_sum, list_of_list[i][j] + list_of_list[j][i])\n\n    return max(max_sum, max_row + max_col)\n\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    number = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            number += 2**(len(binary)-i-1)\n    return number\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary_string):\n    decimal_value = 0\n    for bit in binary_string:\n        decimal_value += int(bit) * 2 ** (len(binary_string) - 1 - len(binary_string.index(bit)))\n    return decimal_value\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(n):\n    result = 0\n    for i in range(len(str(n))):\n        result += n % 10 * (2**i)\n        n = n // 10\n    return result\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\n# solution using binary string,\n# binary string is a string consisting of 0's and 1's and can be of length 0\n# function takes in binary string and does following\n# 1) create a decimal integer which will be the converted decimal equivalent\n# 2) loop over the length of binary string\n#     a) take in binary string[i]\n#     b) if binary string[i] == '1' then add 2**i to decimal\n\ndef binary_to_decimal(binary_str):\n    decimal_val = 0\n    # loop over the length of the binary string\n    # binary string is a string so length is a property\n    for i in range(len(binary_str)):\n        # if binary string[i] == '1' then add 2**i to decimal\n        if binary_str[i] == '1':\n            decimal_val += 2**i\n    return decimal_val\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(str(binary))):\n        if str(binary)[-i] == '1':\n            decimal += 2 ** (len(str(binary))-i-1)\n    return decimal\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(num):\n    decimal = 0\n    for i in str(num):\n        decimal = decimal * 2 + int(i)\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    decimal = 0\n    for bit in reversed(binary):\n        decimal *= 2\n        if bit == '1':\n            decimal += 1\n    return decimal\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(n):\n    \"\"\"\n    Return decimal equivalent of given binary number.\n    \n    Arguments:\n        n -- the given binary number\n    Returns:\n        decimal equivalent of given binary number\n    \"\"\"\n    return int(n, 2)\n\n", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(n):\n    output = 0\n    for i in range(len(str(n))):\n        output += (int(str(n)[i]) * 2**i)\n    return output\n\n# Tests", "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * (2**(len(binary) - 1 - i))\n    return decimal"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(l,size):\n    prod = 1\n    for i in range(len(l)):\n        if(l[i] not in l[i+1:size]):\n            prod *= l[i]\n    return prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n    if len(arr)==n:\n        return max(arr)\n    else:\n        return max(find_Product(arr,n),find_Product(arr,n-1))", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    p = 1\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if (arr[i] * arr[j]) != 0:\n                p *= arr[i] * arr[j]\n    return p\n\ndef main():\n    print(find_Product([1,1,2,3],4))\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(list,n):\n    if len(list)<=1:\n        return 1\n    list_sum=sum(list)\n    list1=list\n    list_sum=list_sum-list[0]\n    list_sum=list_sum-list[-1]\n    for i in range(1,len(list)-1):\n        list_sum=list_sum-list[i]\n    list1.remove(list[0])\n    list1.remove(list[-1])\n    if list_sum==n:\n        list1=find_Product(list1,n)\n        return list1*list[0]*list[-1]\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(A,n):\n    if n == 1:\n        return A[0]\n    else:\n        return A[0] * find_Product(A[1:],n-1)\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(lst, n):\n    return(int(len(lst) * (lst.count(1) + lst.count(2) + lst.count(3) + lst.count(4) + lst.count(5) + lst.count(6) + lst.count(7) + lst.count(8) + lst.count(9) + lst.count(10) + lst.count(11) + lst.count(12))))", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,length):\n    result=1\n    for i in range(length):\n        result=result*arr[i]\n    return result\n", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr,size):\n    Product=1\n    for i in range(size):\n        Product*=arr[i]\n    return Product\n    ", "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n\treturn reduce(lambda x,y:x*y,filter(lambda a:arr.count(a) == 1,arr))\n"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuples, k):\n    seen = set()\n    for t in tuples:\n        if t[0] not in seen:\n            if len(seen) >= k:\n                return True\n            seen.add(t[0])\n    return False\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuples, k):\n    \"\"\"\n    :param tuples: list of tuples\n    :param k: integer\n    :return: boolean\n    \"\"\"\n    if len(tuples) == 0:\n        return False\n\n    if len(tuples) == 1:\n        return len(tuples[0]) == k\n\n    if len(tuples[0]) == k:\n        return True\n\n    return check_k_elements(tuples[1:], k)\n\ndef check_all_elements_equal(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: boolean\n    \"\"\"\n    for i in range(1, len(tuples)):\n        for j in range(len(tuples[i])):\n            if tuples[i][j] != tuples[0][j]:\n                return False\n    return True\n\ndef get_kth_tuple_elements(tuples, k):\n    \"\"\"\n    :param tuples: list of tuples\n    :param k: integer\n    :return: list of integers\n    \"\"\"\n    return tuples[0]\n\ndef get_kth_tuple_elements_no_copy(tuples, k):\n    \"\"\"\n    :param tuples: list of tuples\n    :param k: integer\n    :return: list of integers\n    \"\"\"\n    return tuples[0][:]\n\ndef get_kth_tuple_elements_with_copy(tuples, k):\n    \"\"\"\n    :param tuples: list of tuples\n    :param k: integer\n    :return: list of integers\n    \"\"\"\n    return tuples[0][:]\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef check_k_elements(lst: List[Tuple[int, ...]], k: int) -> bool:\n    return k == len(set(lst))\n\n\n# TESTS\ntests = [\n    ((4, 4), 4),\n    ((4, 4, 4), 4),\n    ((4, 4), 4),\n    ((4, 4, 4, 4), 4),\n    ((4, 4, 4, 4, 4), 4),\n    ((4, ), 1),\n]\nfor test in tests:\n    assert check_k_elements(test[0], test[1]) == test[2]", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef check_k_elements(tuple_list: List[Tuple[int, ...]], k: int) -> bool:\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 5) == False\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4)], 5) == False\n    >>> assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4)], 5) == False\n    \"\"\"\n    count = 0\n    for t in tuple_list:\n        if len(t) == k:\n            count += 1\n    if count == len(tuple_list):\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom collections import defaultdict\ndef check_k_elements(tuplist, k):\n  d = defaultdict(int)\n  for x in tuplist:\n    d[x] += 1\n  return len(d) == k\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tup_list, k):\n    # Your code here\n    if len(set(tup_list[0])) == k:\n        for i in tup_list:\n            if len(i) != k:\n                return False\n    return True\n\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(t, k):\n    return len(set(len(s) for s in t)) == 1\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(elements, k):\n    if len(elements) != k:\n        return False\n    return True\n", "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    return tuple_list.count(tuple_list[0]) == k\n\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(list_of_strings):\n    new_list = []\n    for string in list_of_strings:\n        string = string.replace(\"\",\"\")\n        new_list.append(string)\n    return new_list\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove_digits(input_list):\n    new_list = []\n    for element in input_list:\n        if not element.isnumeric():\n            new_list.append(element)\n    return new_list\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(words):\n    return [word for word in words if not any(char.isdigit() for char in word)]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(items):\n    return [removeDigits(item) for item in items]\n\ndef removeDigits(item):\n    return ''.join([x for x in item if not x.isdigit()])\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(strings):\n    r = []\n    for string in strings:\n        new = ''\n        for char in string:\n            if char.isdigit():\n                pass\n            else:\n                new += char\n        r.append(new)\n    return r\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return [re.sub(r'\\d+', '', x) for x in lst]\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(list_of_strings):\n    return [\"\".join([x for x in word if not x.isdigit()]) for word in list_of_strings]\n\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(words):\n    return [word for word in words if word.isalpha()]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove_digits(array):\n    return [item for item in array if not item.isdigit()]\n", "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(list_of_strings):\n    return [i for i in list_of_strings if not i.isdigit()]"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\nimport math\ndef binomial_Coeff(x,y):\n    if x < 0 or y < 0:\n        return 0\n    elif x < y:\n        return binomial_Coeff(x-1,y)\n    elif y == 0:\n        return 1\n    else:\n        return binomial_Coeff(x-1,y-1) + binomial_Coeff(x-1,y)", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    return factorial(n)//(factorial(n-k)*factorial(k))\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\n# Write a python function to find a string length", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n,k):\n    result = 1\n    for i in range(k):\n        result = result* (n-i)/((i+1)*1)\n    return result\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, r):\n    # TODO\n    n = int(n)\n    r = int(r)\n    return math.factorial(n)/(math.factorial(n-r)*math.factorial(r))\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if n == k:\n        return n\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(x,y):\n    \"\"\"\n    The binomial co-efficient function\n    Returns:\n        int: Binomial co-efficient\n    \"\"\"\n    if x < 0 or y < 0:\n        return 0\n    if x == 0 or y == 0:\n        return 1\n    return binomial_Coeff(x-1,y) + binomial_Coeff(x-1,y-1)\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n", "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    if k<0 or k>n:\n        return 0\n    elif k==0 or k==n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,n):\n    for i in arr:\n        if (arr.count(i)%2)!=0:\n            return i\n\n# assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(array,num):\n    for i in array:\n        if array.count(i) % 2 != 0:\n            return i\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,n):\n    for i in arr:\n        if arr.count(i)%2 == 1:\n            return i\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,n):\n    if n not in arr:\n        return \"Not Present\"\n    else:\n        count = 0\n        for i in arr:\n            if i==n:\n                count += 1\n        if count%2:\n            return n\n        else:\n            return \"Not Present\"\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(array, num):\n    odd_count = 0\n    for i in range(0,len(array)):\n        if array[i] == num:\n            odd_count += 1\n    if odd_count % 2 == 0:\n        return -1\n    else:\n        return num\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,n):\n    count=0\n    for i in arr:\n        if arr.count(i) %2 != 0:\n            return i\n        count+=1\n        if count == len(arr):\n            return 0\n", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == n:\n            count += 1\n    if count%2 == 1:\n        return n\n    else:\n        return -1\n\n# function to test above function\narr = [1,2,3,1,2,3,1]\nn = 7", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\n# +", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\n#Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,n):\n    count = 0\n    for i in range(0,len(arr)):\n        if arr[i] == n:\n            count += 1\n    if count % 2 != 0:\n        return n\n    else:\n        return -1\n\n#Test 1", "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, x):\n    if x not in arr:\n        return \"Not found\"\n    dict_count = {}\n    for ele in arr:\n        if ele in dict_count:\n            dict_count[ele] = dict_count[ele] + 1\n        else:\n            dict_count[ele] = 1\n    for ele in dict_count:\n        if dict_count[ele] % 2 != 0:\n            return ele"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i]==str[j]:\n                count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)+1):\n            if s[i] == s[j-1] and s[j-1] == s[j-2]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(S):\n    str_len = len(S)\n    count = 0\n    for i in range(str_len):\n        for j in range(i+1, str_len+1):\n            if S[i] == S[j-1] and S[i] == S[j-2]:\n                count+=1\n    return count", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    s = string\n    l = []\n    for i in range(len(s)):\n        if s[i] not in l:\n            l.append(s[i])\n            count = 0\n            while i+count<len(s):\n                if s[i+count] == s[i]:\n                    count += 1\n                else:\n                    break\n            l.append(s[i+count-1])\n            count = 0\n            while i-count>=0:\n                if s[i-count] == s[i]:\n                    count += 1\n                else:\n                    break\n            l.append(s[i-count])\n    return len(l)", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string) - 1):\n        for j in range(i + 1, len(string)):\n            if string[i] == string[j]:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(input_string):\n    output_list = []\n    for i in range(0, len(input_string)):\n        for j in range(i + 1, len(input_string)):\n            if input_string[i] == input_string[j] and input_string[j] == input_string[i + 1]:\n                output_list.append(input_string[i])\n    return len(output_list)\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j] and i+1 != j:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\nfrom collections import Counter\n\ndef count_Substring_With_Equal_Ends(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        a_count = Counter(str[i:len(str)])\n        b_count = Counter(str[0:i])\n        if a_count == b_count:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i] == s[i+1]:\n            count += 1\n        elif s[i] == s[n-1]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\n# Write your code here\n\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string) - 1):\n        for j in range(i + 1, len(string)):\n            if string[i] == string[j] and string[i] == string[j + 1] and string[i] == string[j + 2]:\n                count += 1\n    return count\n\n\n# Test"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef heapq_topk(lists, k):\n    q = []\n    for l in lists:\n        heapq.heappush(q, (-l[0], l[1]))\n        while len(q) > k:\n            _, v = heapq.heappop(q)\n\n    return [v for _, v in q]\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef top_k_freq(lst_lst, k):\n    # 1. first sort all the integers in all the lists in ascending order\n    lst = sorted(lst_lst, key=lambda x: x)\n    # 2. use a dict to count the frequency of each integer\n    # use the value as the priority for the heap\n    freq_dict = collections.Counter(lst)\n    # 3. create a max heap with the value as the priority, and the key as the integer\n    max_heap = []\n    for key, freq in freq_dict.items():\n        if len(max_heap) < k:\n            max_heap.append((freq, key))\n        else:\n            # replace the key with the max frequency if the new frequency is higher\n            if freq > max_heap[0][0]:\n                max_heap[0] = (freq, key)\n            # else replace the key with the max frequency if the new frequency is same and the integer is smaller\n            elif freq == max_heap[0][0] and key < max_heap[0][1]:\n                max_heap[0] = (freq, key)\n    # 4. put the top k key in a list\n    top_k = []\n    for _ in range(k):\n        top_k.append(max_heap.pop()[1])\n    # 5. return the top k integers\n    return top_k\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef heapq_topk(lst, k):\n    heap = [(lst[i], i) for i in range(len(lst))]\n    heapq.heapify(heap)\n    res = []\n    while k:\n        res.append(heapq.heappop(heap)[0])\n        k -= 1\n    return res\n\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom collections import defaultdict, Counter\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\n# Solution", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nclass Solution:\n    # @param {integer[]} nums\n    # @param {integer} k\n    # @return {integer[]}\n    def topKFrequent(self, nums, k):\n        from collections import defaultdict\n        freq = defaultdict(int)\n        for n in nums:\n            freq[n] += 1\n        freq = sorted(freq.iteritems(), key=lambda x: x[1], reverse=True)\n        return [f[0] for f in freq[:k]]\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nimport heapq\n\ndef topk(lists, k):\n    \"\"\"\n    >>> topk([1, 2, 6], 3)\n    [5, 7, 1]\n    >>> topk([1, 3, 4, 5, 7, 8], 3)\n    [3, 4, 5]\n    >>> topk([1, 3, 5, 6, 8, 9], 3)\n    [5, 6, 8]\n    >>> topk([2, 5, 7, 11], 3)\n    [5, 7, 11]\n    >>> topk([1, 4, 7, 8, 12], 3)\n    [1, 7, 12]\n    >>> topk([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import *\n\ndef topk_elements_from_list_of_lists(lists, k):\n    result = []\n    for i in range(len(lists)):\n        heapify(lists[i])\n        for _ in range(k):\n            result.append(heappop(lists[i]))\n    return result\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nfrom collections import defaultdict\n\ndef topk_frequent(nums, k):\n    res = []\n    d = defaultdict(int)\n    for nums in nums:\n        for num in nums:\n            d[num] += 1\n    d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    for item in d[:k]:\n        res.append(item[0])\n    return res\n", "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom collections import defaultdict"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    max_prime_factor = 1\n    while n%max_prime_factor!=0:\n        max_prime_factor+=1\n        if max_prime_factor%2 == 0:\n            continue\n        max_prime_factor+=2\n    return max_prime_factor\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    prime_numbers = []\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            prime_numbers.append(i)\n            n = int(n / i)\n    return prime_numbers\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n\tfactor = 1\n\tfor i in range(2, num+1):\n\t\tif num % i == 0:\n\t\t\tfactor = i\n\treturn factor\n\ndef largest_prime_factors(num):\n    if num == 1:\n        return 1\n    for factor in range(2,num + 1):\n        if num % factor == 0:\n            result = largest_prime_factors(num // factor)\n            return factor * result\n    return num\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    # initialising result\n    result = 0\n    for i in range(2, n+1):\n        while n % i == 0:\n            n = n / i\n            result = i\n    return result\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(number):\n    prime_factors = []\n    while number > 1:\n        if number % 2 == 0:\n            prime_factors.append(2)\n            number = number // 2\n        else:\n            for i in range(3, number + 1, 2):\n                if number % i == 0:\n                    prime_factors.append(i)\n                    number = number // i\n    return max(prime_factors)\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(num):\n    num_list = []\n    for i in range(2, int(num**0.5)+1):\n        if num%i == 0:\n            num_list.append(i)\n            while num%i == 0:\n                num = num // i\n    num_list.append(num)\n    print(num_list)\n    return num_list\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    if n == 0:\n        return 0\n    factors = []\n    for i in range(2, n):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return factors[-1]\n\n\ndef test_max_Prime_Factors():\n    assert max_Prime_Factors(15) == 5\n    assert max_Prime_Factors(125) == 5\n    assert max_Prime_Factors(72) == 8\n    assert max_Prime_Factors(0) == 0\n    assert max_Prime_Factors(5) == 5\n    assert max_Prime_Factors(1) == 1\n\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\nfrom math import sqrt\n\ndef max_Prime_Factors(number):\n    list_Prime_Factors = []\n\n    # Loop from 2 to square root of number\n    for i in range(2, int(sqrt(number))+1):\n        if number % i == 0:\n            list_Prime_Factors.append(i)\n            number = int(number/i)\n            list_Prime_Factors.append(number)\n\n    return list_Prime_Factors", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    # Write your code here\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n > 1:\n        return n\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(num):\n    prime_factors = [num]\n    while num % 2 == 0:\n        prime_factors.append(2)\n        num = num//2\n    i = 3\n    while num > 1:\n        while num % i == 0:\n            prime_factors.append(i)\n            num = num//i\n        i += 2\n    return prime_factors"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(num):\n    binary_num = bin(num)[2:]\n    return binary_num\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(n):\n    binary_number = \"\"\n    while n>0:\n        remainder = n%2\n        n = n//2\n        binary_number = str(remainder) + binary_number\n    return binary_number\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(dec):\n    binary_num = \"\"\n    while dec > 0:\n        binary_num = str(dec % 2) + binary_num\n        dec = dec // 2\n    return binary_num\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal):\n    result = []\n    decimal = str(decimal)\n    decimal = decimal[::-1]\n    for i in range(len(decimal)):\n        result.append(decimal[i])\n    print(result)\n    return result\n\n\n# decimal_To_Binary(10)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal):\n    binary = 0\n    while decimal != 0:\n        binary = binary * 2\n        binary += decimal % 2\n        decimal //= 2\n    return binary\n\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(num):\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(dec_num):\n    return bin(dec_num)\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(n):\n    binary = \"\"\n    while n > 0:\n        if n % 2 == 1:\n            binary = \"1\" + binary\n        else:\n            binary = \"0\" + binary\n        n //= 2\n    return binary\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(number):\n    binary_num = ''\n    while number > 0:\n        binary_num += str(number % 2)\n        number //= 2\n    return binary_num[::-1]\n", "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal%2) + binary\n        decimal //= 2\n    return binary"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(numbers, last):\n    if len(numbers) == 0:\n        return None\n    else:\n        return last - sum(numbers)\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(nums, number):\n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        if nums[mid] > nums[end]:\n            start = mid + 1\n        else:\n            end = mid\n    return end + 1 if nums[start] != number else start + 1 if nums[end] != number else None\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    return (n*(n+1)/2) - sum(arr)\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(array,number):\n    #your code here\n    return array[0]+number\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(a,n):\n    # Fill this in.\n    for i in range(n):\n        if a[i] != i:\n            return i\n    return -1\n\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr,N):\n    arr.sort()\n    last=0\n    for i in range(1,N):\n        if arr[i]!=last:\n            last=arr[i]\n        else:\n            return i\n    return N\n\n# TEST", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(A, B):\n    for i in range(0,len(A)):\n        if A[i]!=B:\n            return B\n    return B+1", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    pass\n\ndef test_function(test_case):\n    arr = test_case[0]\n    n = test_case[1]\n    solution = find_missing(arr, n)\n    print(solution)\n    if solution == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[1,2,3,5],4,4])\ntest_function([[1,2,3,4],5,0])\ntest_function([[1,2,3,4,5],6,1])", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(input_array,n):\n    if len(input_array) == n+1:\n        return -1\n    if input_array[0] > input_array[n]:\n        return 1\n    return input_array[n]\n", "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, n):\n    s = sum(arr)\n    return n - s\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    if n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    \"\"\"\n    :param n: an integer\n    :return: the nth rectangular number\n    \"\"\"\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n+1) // 2\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    if n < 0:\n        return -1\n    return int(math.sqrt(n)) * (math.sqrt(n) + 1) // 2\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return n*(n+1) // 2\n\ndef test():\n    assert find_rect_num(4) == 20\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    num = 0\n    if n == 1:\n        return num\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    else:\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                num += i\n            else:\n                num += 2*i\n        return num\n\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\n# Use this one if you feel like you're going slowly enough\ndef find_rect_num(num):\n    n = 0\n    while True:\n        n += 1\n        if n ** 2 >= num:\n            break\n    return n ** 2\n\n# This is really slow\n#def find_rect_num(num):\n#    n = 0\n#    while n ** 2 < num:\n#        n += 1\n#    return n ** 2\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    return n * (n + 1) // 2\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"Find nth rectangular number.\n    >>> find_rect_num(4)\n    20\n    >>> find_rect_num(20)\n    420\n    >>> find_rect_num(100)\n    338350\n    \"\"\"\n    # This function iterates through the rectangular numbers and finds nth number\n    # once the nth number is found the function returns\n    if n == 0:\n        return 0\n    num = 1\n    count = 0\n    while True:\n        count += 1\n        if count == n:\n            return num\n        num += num\n    # return num\n", "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    return n*(n+1)*(2*n+1)\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(numerator, denominator, N):\n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    assert find_Nth_Digit(1,2,1) == 5\n    \"\"\"\n    fraction = 0\n    answer = 0\n    for i in range(N):\n        if numerator % 10 == denominator % 10:\n            fraction += 1\n        numerator = numerator // 10\n        denominator = denominator // 10\n    for i in range(N-fraction):\n        if denominator % 10 == 1:\n            answer += denominator % 10\n    return answer\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(num1, num2, N):\n    if N == 0:\n        return num1 % 10\n    else:\n        return find_Nth_Digit(num1 // 10, num2, N - 1)\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\nfrom typing import Optional\n\n\ndef find_Nth_Digit(number1: int, number2: int, N: int) -> Optional[int]:\n    assert number1 > 0\n    assert number2 > 0\n    assert N > 0\n\n    numerator = 1\n    denominator = 0\n    for i in range(1, N):\n        numerator, denominator = denominator * number1 + numerator * number2, numerator\n        if denominator == 0:\n            return None\n    result = numerator // denominator\n    return result\n\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\nimport math\n\ndef find_Nth_Digit(n, a, b):\n    # Find the length of a number\n    length = math.ceil(math.log(max(a, b), 10))\n    # Find the proper fraction and convert it into a string\n    proper_fraction = str(math.floor((a/b)*10**length))\n    # Return the nth digit in the proper fraction\n    return proper_fraction[n-1]\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, n):\n    result = \"\"\n    for i in range(n):\n        if (num1 * num2) % 10 == 0:\n            result = str(num1 * num2)\n            break\n        else:\n            result = str(num1 * num2)\n            num1 = num1 * num2\n            num2 = int(result[-1])\n    print(result)\n\nfind_Nth_Digit(2, 3, 3)", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\nimport math\n\ndef find_Nth_Digit(m, n, k):\n    if m>n:\n        raise ValueError(\"The numerator should be less than the denominator.\")\n    a = m\n    b = n\n    # check if the length of fraction is a power of 2\n    p = int(math.log2(b))\n    if int(math.log2(b)) == 0:\n        # compute the number of fraction digits\n        length = int(math.log10(b))\n        # find the numerator and denominator of proper fraction\n        temp = a\n        while temp > 0:\n            temp = temp // 10\n        n = b // math.pow(10, length)\n        d = b - n * math.pow(10, length)\n        # find the nth digit\n        num = math.pow(10, length)\n        #print(n,d,num,k)\n        return (num*n + d) % num\n    else:\n        # compute the number of fraction digits\n        length = int(math.log10(b))\n        # find the numerator and denominator of proper fraction\n        temp = a\n        while temp > 0:\n            temp = temp // 10\n        n = b // math.pow(10, length)\n        d = b - n * math.pow(10, length)\n        # find the nth digit\n        if k <= n:\n            return d\n        elif k < 2*n:\n            return (d // n) % 10\n        elif k < 3*n:\n            return (d - n*d // n) // math.pow(10, 1) % 10\n        elif k < 4*n:\n            return (d - n*d // n - n*math.pow(10, 1)*d // n) // math.pow(10, 2) % 10\n        elif k < 5*n:\n            return (d - n*d // n - n*math.pow(10, 1)*d // n - n*math.pow(10, 2)*d // n) // math.pow(", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\n#answer\ndef find_Nth_Digit(n,m,N):\n\tf = 0\n\twhile True:\n\t\tf = (f * 10) + (m % 10)\n\t\tm = m // 10\n\t\tif m == 0:\n\t\t\tbreak\n\t\tn = n + 1\n\tprint(n)\n\tif N <= n:\n\t\treturn f % 10\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(first_number, second_number, n):\n    numerator = first_number*second_number\n    denominator = second_number - first_number\n    if denominator == 0:\n        return 0\n    quotient = numerator//denominator\n    if quotient == 1:\n        return find_Nth_Digit(1,denominator,n)\n    else:\n        return find_Nth_Digit(numerator,denominator,n-1)\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(numerator, denominator, n):\n    if numerator * denominator == 0:\n        return 0\n    temp = numerator * denominator\n    a = temp // 10**(n-1) % 10\n    return a\n", "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(m, n, N):\n    # Your code here\n    if m == 0 or n == 0:\n        return \"Invalid input\"\n    else:\n        a = str(m)\n        b = str(n)\n        digit = a[N-1]\n        if digit == \"0\":\n            return 0\n        else:\n            return int(digit)\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(L):\n  L1=[]\n  L2=[]\n  for i in L:\n    if type(i)==str:\n      L2.append(i)\n    else:\n      L1.append(i)\n  L1.sort()\n  L2.sort()\n  return L1+L2\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    if len(mixed_list) == 0:\n        return mixed_list\n    # TBD\n    pass\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    pass\n\n#test", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    sorted_list = []\n    str_list = []\n    int_list = []\n    for i in mixed_list:\n        if type(i) is int:\n            int_list.append(i)\n        elif type(i) is str:\n            str_list.append(i)\n    \n    sorted_list = sorted(int_list)\n    sorted_list.extend(sorted(str_list))\n    return sorted_list\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    s_list = []\n    i_list = []\n    for item in mixed_list:\n        if type(item) == str:\n            s_list.append(item)\n        else:\n            i_list.append(item)\n    s_list.sort()\n    i_list.sort()\n    return s_list + i_list", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(list):\n    # Write your code here.\n    a=[]\n    b=[]\n    for i in list:\n        if type(i)==str:\n            b.append(i)\n        else:\n            a.append(i)\n    return sorted(a)+b\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(mixed_list):\n    #TODO: Your code here\n    return mixed_list\n\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(arr):\n    \"\"\"\n    Takes in a list and sorts it alphabetically.\n    \"\"\"\n    return sorted(arr)\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(L):\n    L.sort(key=lambda x: (isinstance(x, int), x))\n    return L\n", "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(li):\n    return sorted(li,key=lambda x: (type(x),x))\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(numbers):\n    even = []\n    odd = []\n    for num in numbers:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    if even and odd:\n        return even[0] / odd[0]\n    return 0\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(list_number):\n    for number in list_number:\n        if number%2==0:\n            even_count=1\n        else:\n            odd_count=1\n        break\n    return even_count/odd_count\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\nfrom collections import defaultdict\ndef div_even_odd(li):\n    s1 = defaultdict(int)\n    s2 = defaultdict(int)\n    for i in li:\n        if i%2 == 0:\n            s1[i] = s1[i] + 1\n        else:\n            s2[i] = s2[i] + 1\n    res = s1[list(s1.keys())[0]] + s2[list(s2.keys())[0]]\n    return res\n\ndef div_even_odd1(li):\n    s1 = defaultdict(int)\n    s2 = defaultdict(int)\n    for i in li:\n        if i%2 == 0:\n            s1[i] += 1\n        else:\n            s2[i] += 1\n    res = s1[list(s1.keys())[0]] + s2[list(s2.keys())[0]]\n    return res\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(n):\n    div = []\n    for i in n:\n        if i%2 == 0:\n            div.append(i)\n    return div\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(number):\n    even_numbers = []\n    odd_numbers = []\n    for i in number:\n        if i%2 == 0:\n            even_numbers.append(i)\n        else:\n            odd_numbers.append(i)\n    return even_numbers[-1]//odd_numbers[-1]\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(numbers):\n    even_numbers=[]\n    odd_numbers=[]\n    for num in numbers:\n        if num%2==0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    return len(even_numbers)//len(odd_numbers)", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(number_list):\n    even_count = 0\n    odd_count = 0\n    for number in number_list:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count // odd_count\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(l):\n    count_even=0\n    count_odd=0\n    for i in l:\n        if i%2==0:\n            count_even+=1\n        else:\n            count_odd+=1\n    return (count_even,count_odd)", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(list1):\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list[-1] / odd_list[-1]\n\n", "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(li):\n    a=list()\n    for i in range(0,len(li),2):\n        a.append(li[i])\n    for i in range(1,len(li),2):\n        a.append(li[i])\n    return a\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(s):\n    new_list = [s[0]]\n    i = 1\n    while i < len(s):\n        if s[i] != s[i - 1]:\n            new_list.append(s[i])\n        else:\n            return \"NO\"\n        i += 1\n    return ''.join(new_list)\n    ", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(str_input):\n    a=str_input.split('')\n    a.sort()\n    i=0\n    new_string=''\n    while i<len(a):\n        if a[i]==a[i+1]:\n            if a[i]==a[i+2]:\n                new_string=new_string+a[i]\n            elif a[i]==a[i+3]:\n                new_string=new_string+a[i]\n        elif a[i]==a[i+2]:\n            new_string=new_string+a[i]\n        elif a[i]==a[i+3]:\n            new_string=new_string+a[i]\n        i=i+1\n    return new_string", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(str):\n    count = {}\n    for i in range(len(str)):\n        if str[i] in count:\n            count[str[i]] += 1\n        else:\n            count[str[i]] = 1\n    \n    for i in range(len(str)):\n        if i + 2 < len(str) and str[i] == str[i+1] and str[i+1] == str[i+2]:\n            return 'no'\n    \n    return ''.join(sorted(count,key=count.__getitem__))\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    return \"\".join(sorted(string))", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    char_list = []\n    for i in range(len(string)):\n        if string[i] not in char_list:\n            char_list.append(string[i])\n    char_list_dict = {}\n    for char in char_list:\n        char_list_dict[char] = string.count(char)\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if char_list_dict[string[i]] + char_list_dict[string[j]] > 1:\n                return (string[i] + string[j])\n    return None\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(str):\n    for i in range(len(str)):\n        if i+1 < len(str) and str[i] == str[i+1]:\n            return 'No'\n    return 'Yes'\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(string):\n    count = {}\n    for x in string:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n    d = {}\n    for x in string:\n        if x in d:\n            if x == d[x]:\n                return \"Not possible\"\n            else:\n                return 'Possible'\n        else:\n            d[x] = x\n    return 'Possible'", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\nfrom typing import Tuple\n\n\ndef rearange_string(string: str) -> Tuple[str, bool]:\n    \"\"\"Return True if letters can be rearranged so that two characters that are adjacent to each other are different,\n    else return False.\"\"\"\n    if len(string) <= 1:\n        return string, True\n    if string[0] == string[-1]:\n        return False\n    for i in range(1, len(string)):\n        if string[i-1] == string[i] and string[i] == string[i+1]:\n            return False\n    return string[::-1], True\n\n", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(str):\n    if len(str)<2:\n        return \"\"\n    else:\n        str_list=list(str)\n        str_list.sort()\n        if str_list[0]==str_list[-1]:\n            if len(str_list)>2:\n                str_list.remove(str_list[0])\n                str_list.remove(str_list[-1])\n                re_list=[str_list[0]]\n                for i in range(len(str_list)-1):\n                    if str_list[i]==str_list[i+1]:\n                        re_list.append(str_list[i+1])\n                return \"\".join(re_list)\n            else:\n                return \"\".join(str_list)\n        else:\n            return \"\".join(str_list)\nrearange_string(\"aab\")==('aba')", "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    if string == '':\n        return string\n    \n    string_list = list(string)\n    \n    max_length = len(string)\n    \n    for i in range(len(string) - 1):\n        for j in range(i + 1, max_length):\n            if string_list[i] == string_list[j] and i != j:\n                return string\n    \n    return ''.join(string_list)"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(array):\n    frequency = {}\n    for sublist in array:\n        for item in sublist:\n            frequency[item] = frequency.get(item, 0) + 1\n    return frequency\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(arr):\n    return Counter(list(sum(arr, ())))\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(l):\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in l:\n        for j in i:\n            d[j] += 1\n    return d\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\ndef freq_element(lst):\n    freq = {}\n    for i in lst:\n        for j in i:\n            if j not in freq:\n                freq[j] = 0\n            freq[j] += 1\n    return freq\n\n#assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nimport collections\n\n\ndef freq_element(list_of_lists):\n    freq = collections.Counter()\n    for sublist in list_of_lists:\n        freq.update(sublist)\n    return freq\n\n\ndef test_freq_element():\n    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]) == {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(list_of_list):\n    freq = {}\n    for sublist in list_of_list:\n        for elem in sublist:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n    return freq\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import defaultdict\n\ndef freq_element(L):\n    '''\n    >>> freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    True\n    '''\n    freq_dict = defaultdict(int)\n    for l in L:\n        for e in l:\n            freq_dict[e]+=1\n    return freq_dict\n\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(l):\n    return Counter(elem for li in l for elem in li)\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import defaultdict\n\ndef freq_element(li):\n    d = defaultdict(int)\n    for item in li:\n        for ele in item:\n            d[ele] += 1\n    return d\n", "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\ndef freq_element(l):\n    return Counter(i[0] for i in l for j in i)"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(nums):\n    return [n for n in nums if n % 2 == 0]\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(mylist):\n    evenlist = []\n    for i in mylist:\n        if (i%2==0):\n            evenlist.append(i)\n    return evenlist\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x%2==0,numbers))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(list):\n    return list(filter(lambda x: x%2==0, list))\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(list1):\n    return list(filter(lambda x: x%2 == 0, list1))", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))", "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(number_list):\n    return list(filter(lambda x: x % 2 == 0, number_list))"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, n):\n    s = 0\n    for i in range(n):\n        if arr[i] in arr[i+1:]:\n            s = s + arr[i]\n    return s\n\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, sum):\n    # your code here\n    c = {}\n    for i in arr:\n        c[i] = c.get(i,0) + 1\n    for i in c:\n        if c[i] > 1 and sum - i in c:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_sum(arr,n):\n    #your code here\n    repeated_num_sum=0\n    for i in range(len(arr)):\n        if arr.count(arr[i])>1:\n            repeated_num_sum+=arr[i]\n    return repeated_num_sum\n\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,sum):\n    length = len(arr)\n    result = 0\n    for i in range(length):\n        if sum-arr[i] in arr:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, n):\n    return sum(i for i, _ in enumerate(arr) if arr.count(i) > 1)\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_sum(arr,n):\n\ts = 0\n\tfor i in range(len(arr)):\n\t\tif arr[i] in arr[i+1:]:\n\t\t\ts += arr[i]\n\tif s > n:\n\t\treturn n\n\treturn s\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(a,n):\n    i = 0\n    count = 0\n    while i < len(a):\n        if a[i] == a[i+1] and a[i] != 0:\n            count += 1\n            i += 1\n        else:\n            i += 1\n\n    if count == 2:\n        return 0\n    elif count == 1:\n        return a[0]\n    else:\n        return n - count * a[0]\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, n):\n    #Your code here\n    #I don't know what to do if the sum > 2147483647\n    total = 0\n    for i in range(0,len(arr)):\n        if arr[i] not in arr[i+1:]:\n            total += arr[i]\n    return total\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\nfrom typing import List\n\ndef find_Sum(arr: List[int], x: int) -> int:\n    return len([i for i in arr if arr.count(i) > 1])\n", "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_sum(array, sum):\n    '''\n    :param array: List to be checked for repeated elements\n    :param sum: Value to be searched in the list\n    :return: Returns a tuple of two lists, one containing the indices of the repeated elements and the other containing the sum of the repeated elements\n    '''\n    indices = []\n    repeated = []\n    for i, a in enumerate(array):\n        if a == sum:\n            indices.append(i)\n            repeated.append(a)\n    return (indices, repeated)\n\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    \"\"\"\n    :param text:\n    :return:\n    \"\"\"\n    if re.match(r\"^[a-z]+(_[a-z]+)*$\", text):\n        return 'Found a match!'\n    else:\n        return \"No match\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    import re\n    result = re.search('_([a-z]+)_', text)\n    if result:\n        return \"Found a match!\"\n    return \"Did not find a match.\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    pattern = r\"[a-z]+(_+[a-z]+)*\"\n    if re.match(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not a match!\"\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\n    assert text_match(\"hoo_\") == \"Not a match!\"\n    assert text_match(\"aaabb\") == \"Not a match!\"\n    assert text_match(\"_bb_cc\") == \"Found a match!\"\n    assert text_match(\"a__\") == \"Found a match!\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    match = re.search('[a-z]+_[a-z]+', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Nothing found'\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\n\ndef text_match(text):\n    match = re.findall(r'([a-z]*)_\\1', text, flags=re.IGNORECASE)\n    if not match:\n        return 'No match!'\n    else:\n        return 'Found a match!'\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\ndef text_match(text):\n    pattern = r\"(?<=\\w)(?=[a-z])(?=[A-Z])\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    return \"Did not find a match\"\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\n\ndef text_match(text):\n    pattern = r'(?<![a-zA-Z])(?=.*[a-z])\\w+'\n    result = re.findall(pattern, text, re.IGNORECASE)\n    if not result:\n        return \"Not found\"\n    else:\n        return \"Found a match!\"\n\n\n# Tests", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(string):\n    match = re.search(\"([a-z]+)_([a-z]+)\", string)\n    if match:\n        return \"Found a match!\"\n    else:\n        return \"No match\"", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\n\ndef text_match(text):\n    \"\"\"\n    >>> text_match(\"aab_cbbbc\")\n    'Found a match!'\n    >>> text_match(\"aad_cbbbc\")\n    'No match!'\n    \"\"\"\n    pattern = re.compile(r\"(?i)\\b[a-z]+_\")\n    match = re.search(pattern, text)\n    if match:\n        return \"Found a match!\"\n    else:\n        return \"No match!\"\n\n", "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    pattern = r\"[a-z_]+\\w\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"No match!\"\n\n#assert text_match(\"aab_cbbbc\") == 'Found a match!'\n#assert text_match(\"aabb\") == 'No match!'\n#assert text_match(\"Abbbc\") == 'No match!'\n#assert text_match(\"A_Abbbc\") == 'Found a match!'\n\ntext = input('Enter text:')"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(word):\n    if word.startswith(\"python\"):\n        return \"Matched\"\n    else:\n        return \"Not matched!\"\n\ntext_match_string(\"python\")\n\n\n# +", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if text[0]=='p' and text[1]=='y':\n        return 'Python match!'\n    elif text[0]=='p' and text[1]=='y' and text[2]=='t':\n        return 'Python match!'\n    elif text[0]=='p' and text[1]=='y' and text[2]=='t' and text[3]=='h':\n        return 'Python match!'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\nimport re\ndef text_match_string(str):\n    pattern = re.compile(r'^python')\n    if pattern.match(str):\n        return \"Matched\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n    if string[0] == \"python\":\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(string):\n    if(string.startswith('python')):\n        return('Matched!')\n    else:\n        return('Not matched!')", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(word):\n    if word == \"python\":\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\ntext_match_string(\"python\")\n\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    \"\"\"\n    text: str\n    returns: str\n    \"\"\"\n    result = \"\"\n    # TODO: Implement Function\n    \n    return result\n\n# Run Tests", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    if text.startswith('python'):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if len(text) == 0:\n        return \"Not matched!\"\n    if text[0] != text[0].lower():\n        return \"Not matched!\"\n    return text\n\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return min(arr)\n    else:\n        return get_gcd(arr[1:])\n    return get_gcd(arr[1:])\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nimport sys\nfrom functools import reduce\n\n\ndef get_gcd(nums: list) -> int:\n    if len(nums) == 0:\n        return -1\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        nums = sorted(nums)\n        return reduce(lambda x, y: int(x / y) if y else x, nums[1:])\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(a):\n    if a == []:\n        return None\n    else:\n        return get_gcd(a[1:])\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\n# gcd of two numbers\ndef get_gcd(numbers):\n    if numbers == []:\n        return 0\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        return get_gcd([num for num in numbers if num])\n\n# main function\ndef main():\n    print(get_gcd([2, 4, 6, 8, 16]))\n    print(get_gcd([2, 3, 4, 6, 8, 16]))\n    print(get_gcd([0, 1, 2, 4, 6, 8, 16]))\n    print(get_gcd([0, 1, 2, 4, 6, 8]))\n    print(get_gcd([0, 1, 2, 4]))\n    print(get_gcd([0, 1, 2]))\n    print(get_gcd([0, 1]))\n    print(get_gcd([0]))\n    print(get_gcd([]))\n\n\n# using main function\nmain()", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n    if len(arr) < 2:\n        return arr[0]\n    return get_gcd(arr[1:]) if arr[0] % arr[1:] == 0 else get_gcd(arr[1:])\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    while True:\n        if arr[0] % arr[1] == 0:\n            return arr[0]\n        else:\n            arr[0], arr[1] = arr[1], arr[0] % arr[1]\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom math import gcd\n\n\ndef get_gcd(arr):\n    if arr is None:\n        return None\n\n    if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return gcd(arr[0], arr[1])\n\n    middle = len(arr) // 2\n    left = get_gcd(arr[:middle])\n    right = get_gcd(arr[middle:])\n\n    return gcd(left, right)\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\n# Solution:\ndef get_gcd(numbers):\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return get_gcd(numbers[1:])\n\n# Tests", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(numbers):\n    \"\"\"\n    >>> get_gcd([2, 4, 6, 8, 16])\n    2\n    >>> get_gcd([2, 4, 6, 8, 16, 18])\n    2\n    >>> get_gcd([1, 2, 4, 5, 10])\n    1\n    >>> get_gcd([20, 4, 6, 8, 16])\n    4\n    \"\"\"\n\n    if numbers == []:\n        return 0\n\n    return get_gcd(numbers[1:])\n\n", "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(numbers):\n    for i in range(1, len(numbers)):\n        for j in range(i):\n            if numbers[i] == numbers[j]:\n                if numbers[i] % numbers[j] == 0:\n                    return numbers[i]\n"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(numbers):\n    if len(numbers) == 1:\n        return True\n    for i in range(len(numbers)-1):\n        if numbers[i] == numbers[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(numbers):\n    # TODO: Implement this function\n    pass\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(arr):\n    if len(set(arr))== len(arr):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(arr):\n    if len(arr) == 0:\n        return True\n\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n\n    return True\n\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(arr):\n    return sorted(arr) == list(arr)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    return all(x != y for x in nums for y in nums if x != y)", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(values):\n    \"\"\"\n    Determine if all the values in values are distinct\n    :param values: List of values\n    :return: Boolean\n    \"\"\"\n    return len(values) == len(set(values))\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(numbers):\n    a = numbers.copy()\n    a.sort()\n    for i in range(len(a)-1):\n        if a[i] == a[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    return len(set(nums)) == len(nums)\n", "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    \"\"\"\n    :param nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    :return: True\n    \"\"\"\n    num_set = set()\n    for i in nums:\n        if i in num_set:\n            return False\n        num_set.add(i)\n    return True\n\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\n#function to find the last digit when factorial of a divides factorial of b\ndef compute_Last_Digit(a,b):\n    if a == b:\n        return a\n    elif a < b:\n        for i in range(a+1,b):\n            if a%i == 0:\n                return i\n    elif a > b:\n        for i in range(b+1,a):\n            if b%i == 0:\n                return i\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if a%b==0:\n        return b\n    else:\n        return compute_Last_Digit(a, a%b)", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    factorial_a = 1\n    factorial_b = 1\n    \n    for i in range(1, a+1):\n        factorial_a *= i\n    \n    for i in range(1, b+1):\n        factorial_b *= i\n    \n    if factorial_a % factorial_b == 0:\n        return(factorial_a % factorial_b)\n    else:\n        return(0)", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    c = a\n    while c <= b:\n        if a % c == 0 and b % c == 0:\n            return c\n        c += 1\n    return 0", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n#solution:\ndef compute_Last_Digit(a, b):\n    # your code goes here\n    i = a\n    last_digit = 1\n    while a != b:\n        a = a * (i + 1)\n        last_digit = i\n        i = i + 1\n    return last_digit\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    last_digit = 0\n    while(a != 0 and b != 0):\n        last_digit = a%10\n        a = a//10\n        b = b//10\n    return last_digit\n\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a, b):\n    fact_a = 1\n    fact_b = 1\n    \n    for i in range(1, a+1):\n        fact_a *= i\n        \n    for i in range(1, b+1):\n        fact_b *= i\n        \n    if fact_a%fact_b == 0:\n        return fact_a/fact_b\n    else:\n        return None", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if a>b:\n        for i in range(b+1,a+1):\n            if i%a==0:\n                return i%10", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    if a<b:\n        a,b = b,a\n    fac = 1\n    for i in range(a,b+1):\n        fac = fac*i\n    \n    return int(fac%10)\n\ncompute_Last_Digit(100,5)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nExpected Time Complexity: O(N)N is the range of input given to the function.  Expected Auxiliary Space: O(1)  Linear Search\n\n### Code:\n", "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a, b):\n    from math import factorial\n    if b > a:\n        return compute_Last_Digit(b, a)\n\n    if b % a == 0:\n        return a\n\n    else:\n        return compute_Last_Digit(a, b % a)\n\ndef test():\n    assert compute_Last_Digit(2, 4) == 2\n    assert compute_Last_Digit(3, 5) == 3\ntest()\n\n# +"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(number):\n    odd_bit_number = 0\n    for i in range(0, 8):\n        odd_bit_number += (number & (1 << i)) >> i\n    return odd_bit_number\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number: int):\n    \"\"\"\n    >>> odd_bit_set_number(10)\n    15\n    >>> odd_bit_set_number(3)\n    15\n    >>> odd_bit_set_number(2)\n    3\n    >>> odd_bit_set_number(1)\n    1\n    >>> odd_bit_set_number(0)\n    0\n    \"\"\"\n    mask = 1\n    odd_mask = 1\n    for _ in range(0, 32):\n        odd_mask <<= 1\n        odd_mask &= odd_mask - 1\n        mask <<= 1\n        mask &= mask - 1\n\n    new_number = number | odd_mask\n    return new_number | mask\n\n\n# print(odd_bit_set_number(10))\n# print(odd_bit_set_number(3))\n# print(odd_bit_set_number(2))\n# print(odd_bit_set_number(1))\n# print(odd_bit_set_number(0))\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    x = bin(n)[2:]\n    return int(x[::2] + x[1::2], 2)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    return num | (num & -num)\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(n):\n    return n ^ 1\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    \"\"\"\n    Set all odd bits of the given number.\n    >>> odd_bit_set_number(10)\n    15\n    \"\"\"\n    # Given number is odd if it is evenly divisible by 2 + 1.\n    # Evenly divisible by 2 gives us a binary representation without 1\n    # Evenly divisible by 1 gives us a binary representation with 1\n    return number & ~(number & (number - 1))\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# +\n# Solution\n\ndef odd_bit_set_number(num):\n    result = num\n    while num > 0:\n        result ^= num & 1\n        num >>= 1\n    return result\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n  # TODO: Write code to set odd bits of the given number.\n  #   Hint: Use mask and bitwise AND operation.\n  return number\n\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n", "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n# Write your code here\ndef odd_bit_set_number(num):\n    new_number = num\n    for i in range(1, 10):\n        if num & (2 ** (i-1)) == 0:\n            continue\n        else:\n            new_number = new_number | (2 ** (i-1))\n    return new_number\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(l, idx):\n    return [l[x][idx] for x in range(len(l))]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(matrix, index):\n    res = []\n    for row in matrix:\n        if index == 0:\n            res.append(row[0])\n        else:\n            res.append(row[index])\n    return res\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(mat, i):\n    result = []\n    for row in mat:\n        result.append(row[i])\n    return result\n\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nimport math\ndef specified_element(list_of_list,num):\n    if num == None:\n        return [a[0] for a in list_of_list]\n    else:\n        return [a[num] for a in list_of_list]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, index):\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i][index])\n    return result\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, element_number):\n    result = []\n    for row in matrix:\n        if element_number == 0:\n            result.append(row[0])\n        else:\n            result.append(row[element_number - 1])\n    return result\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(l, n):\n    #your code here\n    if n == 0:\n        return [x[0] for x in l]\n    else:\n        return [x[n-1] for x in l]", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list, index):\n    return [list[i][index] for i in range(len(list))]\n", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst,i):\n    if i==0:\n        res=[]\n        for l in lst:\n            res.append(l[0])\n        return res\n    else:\n        res=[]\n        for l in lst:\n            res.append(l[i])\n        return res", "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(a,i):\n    out=[]\n    for r in a:\n        out.append(r[i])\n    return out\n\ndef main():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2, 2, 5]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],4)==[2, 2, 5]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],-1)==[]\n    print 'All test cases passed.'\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nmin_length_list = lambda l: (len(min(l, key=lambda x: len(x))), min(l, key=lambda x: len(x)))", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nimport pytest\n\n\ndef min_length_list(x):\n    return (min(map(len, x)), filter(lambda y: len(y) == min(map(len, x)), x))\n\n\ndef test_min_length_list():\n    x = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\n    assert min_length_list(x) == (1, [0])", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nfrom __future__ import annotations\nfrom typing import List, Tuple, Any\n\ndef min_length_list(lists: List[List[Any]]) -> Tuple[int, List[Any]]:\n    return (min(map(len, lists)), list(filter(lambda x: len(x) == min(map(len, lists)), lists)))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lists):\n    return min(lists, key=lambda x:len(x))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return (len(min(lst, key=len)), min(lst, key=len))\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nimport pytest\n\ndef min_length_list(lst):\n    return min(lst, key=lambda x: len(x))\n\n\ndef test_min_length_list():\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(x):\n    if len(x) == 1:\n        return 1, x[0]\n    else:\n        return min((min_length_list(i)[0], i) for i in x)\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nfrom functools import reduce\n\ndef min_length_list(arr):\n    return min(enumerate(arr), key=lambda x: len(x[1]))[1]\n\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(list_of_list):\n    minimum=0\n    for i in range(len(list_of_list)):\n        if len(list_of_list[i])<minimum:\n            minimum=len(list_of_list[i])\n            index=i\n    return(index,list_of_list[index])\n", "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(list1):\n    return (min(len(list1[i]) for i in range(len(list1))), list1[list1.index(min([len(list1[i]) for i in range(len(list1))]))])\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    assert a != b\n    assert a != c\n    assert b != c\n    return a**2 + b**2 == c**2\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if a**2==b**2==c**2:\n        return True\n    else:\n        return False\n#write a function to get the area of a triangle\ndef area_triangle(a,b,c):\n    s= (a+b+c)/2\n    area= s*(s-a)*(s-b)*(s-c)\n    return area\n\n#write a function to get the perimeter of a triangle\ndef perimeter_triangle(a,b,c):\n    perimeter= a+b+c\n    return perimeter\n\n#write a function to check if the triangle is isosceles or not\ndef isosceles(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n\n#write a function to check if the triangle is scalene or not\ndef scalene(a,b,c):\n    if a!=b!=c!=a:\n        return True\n    else:\n        return False\n\n#write a function to check if the triangle is right angled or not\ndef right_angled(a,b,c):\n    if a==b!=c!=a:\n        return True\n    elif b==c!=a!=b:\n        return True\n    elif a==c!=b!=a:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if ((a==b) and (b==c) and (a==c)) or ((a==b) and (b==c) and (a==c)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    if (a==b==c) or (a**2==b**2+c**2) or (a**2==c**2+b**2) or (a**2==b**2+c**2):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a, b, c):\n    if ((a**2 + b**2 + c**2)**(1/2)) == (a + b + c)**(1/2):\n        return True\n    else:\n        return False\n\n#assert check_equilateral(6,8,12)==False \n\n\ndef check_equilateral2(a, b, c):\n    return (a**2 + b**2 + c**2)**(1/2) == (a + b + c)**(1/2)\n\n\n#assert check_equilateral2(6,8,12)==False \n\n\ndef check_equilateral3(a, b, c):\n    return pow((a**2 + b**2 + c**2), 0.5) == pow(a + b + c, 0.5)\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a, b, c):\n  if a == b == c:\n    return True\n  elif a != b and b != c and a != c:\n    return False\n  else:\n    return None\n\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a**2+b**2==c**2 and a**2+c**2==b**2 and b**2+c**2==a**2:\n        print(\"Equilateral\")\n        return True\n    else:\n        print(\"Not Equilateral\")\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(x,y,z):\n    if (x==y) and (y==z) and (z==x):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a, b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    #Function to calculate area of a parallelogram\n    #Inputs: Lengths of two sides\n    #Outputs: Area of the parallelogram\n    return a*b\n\n#Call the function", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base,height):\n    assert base > 0\n    assert height > 0\n    return base * height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\n# import function from python files\nfrom task_1 import *\n\ndef parallelogram_area(a,b):\n    return a*b\n\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\nimport math\ndef parallelogram_area(base,height):\n    return base*height", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base, height):\n    return base * height\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a, b):\n    return a*b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(a, b):\n    return a * b\n", "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str1):\n    if str1[0] == str1[-1]:\n        return 'Equal'\n    else:\n        return 'Not equal'\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n# Function to check whether the first and last characters of a given string are equal or not\ndef check_Equality(string):\n  if string[0] == string[-1]:\n    return \"Equal\"\n  else:\n    return \"Not Equal\"\n\n# Driver Code", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    return \"Not equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(s):\n    if s[0]==s[-1]:\n        return \"Equal\"\n    else:\n        return \"NotEqual\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    if string[0]==string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    return \"Not equal\"", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n#function that returns a string message depending on whether the first and last characters of a given string are equal or not\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n\n# -\n", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(s):\n    if s[0]==s[-1]:\n        return \"Equal\"\n    return \"Not Equal\"\n\n#print(check_Equality(\"abcda\"))", "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr,max_value=10):\n    count = [0] * (max_value+1)\n    for i in arr:\n        count[i] += 1\n    for i in range(1, max_value+1):\n        count[i] += count[i-1]\n    res = [0] * len(arr)\n    for i in range(len(arr)-1,-1,-1):\n        res[count[arr[i]]-1] = arr[i]\n        count[arr[i]] -= 1\n    return res\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr, n):\n    count = [0]*(n+1)\n    for i in arr:\n        count[i] += 1\n    for i in range(1, n+1):\n        count[i] += count[i-1]\n    arr_out = [0]*len(arr)\n    for i in range(len(arr)-1,-1,-1):\n        j = arr[i]\n        arr_out[count[j]-1] = j\n        count[j] -= 1\n    return arr_out", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    return counting_sort_helper(arr, min(arr), max(arr))\n\ndef counting_sort_helper(arr, min_val, max_val):\n    res = [0] * (max_val - min_val + 1)\n    count = [0] * (max_val - min_val + 1)\n    for i in arr:\n        count[i - min_val] += 1\n    for i in range(1, len(res)):\n        res[i] = res[i - 1] + count[i - 1]\n    for i in range(len(arr) - 1, -1, -1):\n        res[arr[i] - min_val] -= 1\n        arr[res[arr[i] - min_val]] = arr[i]\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(array):\n    largest = max(array)\n    length = len(array)\n    c = [0] * (largest + 1)\n    for i in array:\n        c[i] += 1\n    for i in range(1, largest + 1):\n        c[i] += c[i - 1]\n    b = [0] * (length)\n    for i in range(length - 1, -1, -1):\n        b[c[array[i]] - 1] = array[i]\n        c[array[i]] -= 1\n    return b\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(nums):\n    min_num = min(nums)\n    max_num = max(nums)\n\n    count_arr = [0 for i in range(max_num - min_num + 1)]\n    sorted_arr = [0 for i in range(len(nums))]\n\n    for num in nums:\n        count_arr[num - min_num] += 1\n\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    for i in range(len(nums)-1, -1, -1):\n        sorted_arr[count_arr[nums[i] - min_num] - 1] = nums[i]\n        count_arr[nums[i] - min_num] -= 1\n\n    return sorted_arr\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(a):\n    max = a[0]\n    for i in a:\n        if i > max:\n            max = i\n    count = [0] * (max+1)\n\n    for i in a:\n        count[i] += 1\n\n    index = 0\n    for i in range(1, max+1):\n        for j in range(count[i]):\n            a[index] = i\n            index += 1\n    return a\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    count = [0]*(max(arr)+1)\n\n    # Counting sort\n    for i in arr:\n        count[i] += 1\n\n    # get the sorted indices\n    indices = [0]*(len(arr))\n    for i in range(1, max(arr)+1):\n        indices[count[i]-1] = i\n\n    # sort the array\n    for i in range(0, len(arr)):\n        arr[i] = indices[arr[i]-1]\n    return arr", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    count = {}\n    for i in range(0, len(arr)):\n        if i not in count:\n            count[i] = 0\n        count[i] = count[i] + 1\n    i = 0\n    for j in range(0, max(count.values()) + 1):\n        while i < len(arr):\n            if count[arr[i]] == j:\n                i += 1\n                arr[i - 1] = arr[i]\n            count[arr[i]] = count[arr[i]] - 1\n            i += 1\n    return arr", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    arr_min = arr[0]\n    arr_max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < arr_min:\n            arr_min = arr[i]\n        elif arr[i] > arr_max:\n            arr_max = arr[i]\n\n    bucket = [[] for i in range(arr_max - arr_min + 1)]\n    for i in range(len(arr)):\n        bucket[arr[i] - arr_min].append(arr[i])\n\n    sorted_arr = []\n    for i in range(len(bucket)):\n        for j in range(len(bucket[i])):\n            sorted_arr.append(bucket[i][j])\n\n    return sorted_arr\n\n", "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    length = len(arr)\n    max_num = max(arr)\n\n    freq = [0] * (max_num + 1)\n\n    for i in arr:\n        freq[i] += 1\n\n    for i in range(1, max_num + 1):\n        freq[i] += freq[i - 1]\n\n    output = [0] * length\n    for i in range(length - 1, -1, -1):\n        output[freq[arr[i]] - 1] = arr[i]\n        freq[arr[i]] -= 1\n\n    return output"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,r,n):\n    return a*(1+r)**n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a, n, p):\n    if n == 0:\n        return 0\n    if n == 1:\n        return a\n    else:\n        return a * tn_gp(a, n-1, p) * p\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,r,t):\n    res = a\n    for i in range(t-1):\n        res = res*r\n    return res\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    return a * (1 ** (n-t))", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a,r,n):\n    if n==1:\n        return a\n    return a*r**n + tn_gp(a,r,n-1)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a, r, n):\n    pass\n\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,r,n):\n    if n==1:\n        return a\n    else:\n        return a*(r**n)\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,r,n):\n    if n==0:\n        return 0\n    elif n==1:\n        return a\n    else:\n        return tn_gp(a,r,n-1)+a*r", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(first_term, common_ratio, n):\n    sum = first_term\n    for i in range(1, n):\n        sum = sum * common_ratio\n    return sum\n", "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a,n,t):\n    if t == 0:\n        return 0\n    elif t == 1:\n        return a * (n - 1)\n    else:\n        return a * tn_gp(a,n,t - 1) + tn_gp(a,n,t - 2)"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    rev = 0\n    while num:\n        rev = rev*10 + num%10\n        num = num//10\n    if rev-num==1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    \"\"\"\n    n: int\n    \"\"\"\n    # Your code here.\n    return n == 1 + 2 * reverse_digits(n)\n\ndef reverse_digits(n):\n    \"\"\"\n    n: int\n    \"\"\"\n    # Your code here.\n    rev = 0\n    while n != 0:\n        rev = rev * 10 + n % 10\n        n /= 10\n    return rev\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n#User input\nn=int(input(\"Enter a number: \"))\n\n#defining function\ndef check(num):\n    #converting number into list\n    num_list=list(str(num))\n    #reversing the list\n    rev_num_list=num_list[::-1]\n    #removing 0 at the end\n    rev_num_list.pop()\n    #removing all the spaces in the reversed list\n    rev_num_list=[int(i) for i in rev_num_list]\n    rev_num=sum(rev_num_list)\n    if(num==rev_num-1):\n        return True\n    else:\n        return False\n\n#checking", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    rev = 0\n    temp = n\n    while temp > 0:\n        rev = rev*10 + temp%10\n        temp = temp // 10\n    return n == rev - n\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    reverse = 0\n    while num > 0:\n        reverse = (reverse * 10) + num % 10\n        num //= 10\n    if num == reverse + 1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    if num == (int(str(num)[::-1]) // 2) + 1:\n        return True\n    return False", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    if str(num) == str(num)[::-1]:\n        return True\n    elif (num-2) == (num)[::-1]:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    rev = 0\n    for i in str(num):\n        rev = rev*10 + int(i)\n    if (num-rev)==1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(x):\n    y = x//10\n    z = x%10\n    if y == x - z*10:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    return num == (num - num[::-1]) * 2\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits, digits_length):\n    #create an empty list\n    num_list = []\n    max_num = 0\n    # iterate over digits\n    for i in range(len(digits) - digits_length):\n        #create an empty string\n        temp = \"\"\n        # iterate over digits and get their values\n        for j in range(digits_length):\n            temp += str(digits[i+j])\n        # add value to list\n        num_list.append(int(temp))\n        #update max number if current number is larger than previous max number\n        if int(temp) > max_num:\n            max_num = int(temp)\n    return max_num\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(arr,n):\n    arr.sort()\n    str_arr = \"\"\n    for i in range(n):\n        str_arr += str(arr[i])\n    return int(str_arr)\n\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(given_list, length):\n    given_list.sort()\n    for i in range(1,length+1):\n        for j in range(0,i):\n            tmp_list = given_list[j:]\n            tmp_list.extend(given_list[:j])\n            if(tmp_list==given_list):\n                return int(\"\".join([str(x) for x in tmp_list]))\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, n):\n    largest_num = digits[0]\n    for i in range(1, len(digits)):\n        cur_num = digits[i]\n        if len(str(largest_num)) + len(str(cur_num)) < n:\n            largest_num = cur_num\n        elif len(str(largest_num)) + len(str(cur_num)) == n:\n            if int(str(largest_num)) < int(str(cur_num)):\n                largest_num = cur_num\n    return largest_num", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digit_list,digit_num):\n    return ''.join([str(max(int(digit_list[i]),int(digit_list[j]))) for i in range(0,len(digit_list)) for j in range(i+1,len(digit_list)) if i != j])", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,length):\n    digits.sort()\n    s = ''\n    for i in digits:\n        s += str(i)\n    if len(s) > length:\n        return s[:length]\n    return s\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, digits_used):\n    if digits_used == len(digits):\n        return 0\n    max_num = -1\n    for i in range(len(digits)):\n        if digits[i] > max_num:\n            max_num = digits[i]\n\n    max_num_with_added_digit = 0\n    for digit in digits:\n        max_num_with_added_digit = max(max_num_with_added_digit, digit + max_num)\n\n    return max_num_with_added_digit\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\n# Solution\ndef find_Max_Num(arr, num_of_digits):\n    n = len(arr)\n    largest = 0\n    for i in range(0,n):\n        largest = largest * 10 + arr[i]\n    for i in range(n,num_of_digits):\n        if (largest - arr[n-1] * 10) < largest:\n            largest = largest * 10 + arr[n]\n        else:\n            break\n    return largest\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits,k):\n    digits.sort()\n    n = len(digits)\n    M = 10**(k-1)\n    \n    for i in range(n):\n        #print(M)\n        if (digits[i] > M):\n            break\n        #print(M)\n        M = M * 10 + digits[i]\n    #print(M)\n    return M\n", "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(given_digits,given_len):\n    # write your code here\n    result = []\n    given_digits.sort()\n    for i in range(given_len):\n        for j in range(given_len):\n            for k in range(given_len):\n                if (given_digits[i] != given_digits[j]) & (given_digits[j] != given_digits[k]) & (given_digits[k] != given_digits[i]) and sorted([given_digits[i],given_digits[j],given_digits[k]]) in result:\n                    pass\n                else:\n                    result.append(sorted([given_digits[i],given_digits[j],given_digits[k]]))\n    return max(result)"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a, b):\n    if (a > 0 and b < 0) or (a < 0 and b > 0):\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if a == 0 and b == 0:\n        return False\n    elif (a == 0 or b == 0):\n        return True\n    elif (a > 0 and b > 0) or (a < 0 and b < 0):\n        return False\n    elif a > 0 and b < 0:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if a==0 and b==0:\n        return True\n    if a<0 and b>0:\n        return True\n    if a>0 and b<0:\n        return True\n    if a<0 and b<0:\n        return True\n    if a>0 and b>0:\n        return True\n    else:\n        return False\n    \n#assert opposite_Signs(1,-2) == True", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a, b):\n    if a == 0 or b == 0:\n        if a == b:\n            return True\n        else:\n            return False\n    elif a < 0 and b > 0:\n        return True\n    elif a > 0 and b < 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(num1,num2):\n  if num1 > num2:\n    return True\n  elif num1 < num2:\n    return True\n  else:\n    return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1,num2):\n    if num1 == 0 and num2 == 0:\n        return True\n    elif num1 == 0 or num2 == 0:\n        return False\n    elif num1 < 0 and num2 < 0:\n        return True\n    elif num1 < 0 or num2 < 0:\n        return False\n    elif num1 > 0 and num2 > 0:\n        return True\n    elif num1 > 0 or num2 > 0:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1,num2):\n    if num1 < 0 and num2 < 0:\n        return True\n    elif num1 > 0 and num2 > 0:\n        return True\n    elif num1 == 0 and num2 == 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(number_1, number_2):\n    if number_1 > 0 and number_2 < 0 or number_1 < 0 and number_2 > 0:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(num1, num2):\n    if (num1 < 0 and num2 > 0) or (num1 > 0 and num2 < 0):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n# Write your code here\ndef opposite_Signs(x, y):\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return (n*(n*3 + 1)) // 2\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\nimport math\n\n\ndef is_octagonal(n):\n    return int(math.sqrt(n**2 - 3 * n + 3)) + 1\n\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    >>> nth_octagonal_number(5)\n    65\n    >>> nth_octagonal_number(10)\n    133\n    \"\"\"\n    return is_octagonal(n)\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    for i in range(1, n):\n        if n == (8 * i + 1) or n == (8 * i + 5) or n == (8 * i + 7):\n            return True\n    return False\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\n# 8n^2 + 7\n# 8n^2 - n\n\ndef is_octagonal(n):\n    return 8*n**2 - n\n\ndef nth_octagonal_number(n):\n    return is_octagonal(n)\n\ndef test_nth_octagonal_number():\n    assert is_octagonal(5) == 65\n    assert nth_octagonal_number(5) == 65\n    assert is_octagonal(100) == 5832\n    assert nth_octagonal_number(100) == 5832\n\ndef test_nth_octagonal_number_exception():\n    with pytest.raises(AssertionError):\n        assert nth_octagonal_number(-1) == 65", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    if n % 2 == 0:\n        return False\n    for i in range(n):\n        if n ** 2 == i ** 2 + 1:\n            return True\n    return False\n\ndef nth_octagonal_num(n):\n    count = 0\n    while True:\n        if is_octagonal(count):\n            if count == n - 1:\n                return count\n            count += 1\n        else:\n            return count + 1\n\ndef main():\n    print(nth_octagonal_num(5))\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return ((n + 1) ** 2) / 2\n\n# assert is_octagonal(10) == 6435\n# assert is_octagonal(100) == 1038257195714615\n# assert is_octagonal(1000) == 2589785041100917425\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    Find the nth octagonal number.\n\n    >>> nth_octagonal_number(1)\n    3\n    >>> nth_octagonal_number(2)\n    65\n    >>> nth_octagonal_number(3)\n    216\n    \"\"\"\n    return ((n*(n+1))/2) - ((n*(3*n-1))/2)\n\ndef test():\n    for n in range(4):\n        assert is_octagonal(n+1) == nth_octagonal_number(n)\n\ntest()\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Returns nth octagonal number\n    :param n: int\n    :return: int\n    \"\"\"\n    return 8 * n * (n + 1) // 2\n\n\ndef test_is_octagonal():\n    assert is_octagonal(5) == 65\n\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    if n < 0 or n % 2 == 0:\n        return False\n    return n*(3*n - 1)/2\n", "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\nfrom collections import Counter\n\n\ndef is_octagonal(n):\n    \"\"\"\n    This solution is very slow\n    \"\"\"\n    for i in range(2, 100):\n        c = Counter(str(i))\n        octagon = (n * (n + 1)) // 2\n        if c[\"0\"] == 8 * n and c[\"1\"] == 4 * n:\n            return octagon\n    return None\n\n\ndef is_octagonal_faster(n):\n    octagon = (n * (n + 1)) // 2\n    if octagon % 2 == 0:\n        return octagon\n    return None\n\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, n):\n    m = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            m.append(arr[j] - arr[i])\n    return max(m)", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(array, target):\n    # Get the total count of target in the array\n    total_count = array.count(target)\n\n    # Start from the first element\n    start = 0\n\n    # Initialise a dict to store the length of each prefix ending with target\n    prefix = {}\n\n    # Traverse the array in reverse order\n    for i in range(len(array)-1, -1, -1):\n\n        # If the current element is target, add 1 to prefix and start from current index\n        if array[i] == target:\n            prefix[start] = prefix.get(start, 0) + 1\n            start = i\n\n        # If the current element is not target, remove the count from prefix and start from current index\n        else:\n            prefix[start] = prefix.get(start, 0) - 1\n            start = i\n\n    # Iterate through the prefix and find the max value\n    max_len = -1\n    for k, v in prefix.items():\n        # If the value of current key is not negative\n        if v >= 0:\n            # Find the current subsequence and update max_len\n            max_len = max(max_len, total_count - v)\n\n    return max_len\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, diff):\n    max_len = 0\n    for i in range(len(arr)-1):\n        if (arr[i+1] - arr[i]) == diff:\n            max_len = max(max_len, i+2)\n    return max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(array, diff):\n    max_len = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            sub_len = 0\n            for k in range(i, j):\n                if (array[j] - array[k]) != diff:\n                    break\n                sub_len += 1\n            if sub_len > max_len:\n                max_len = sub_len\n    return max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, target):\n    if not arr or not arr[0]:\n        return 0\n    dp = {}\n    dp[(0, 0)] = 1\n    res = 0\n    for i, a in enumerate(arr):\n        for j, b in enumerate(arr[i+1:]):\n            diff = abs(a - b)\n            key = (i, j + i + 1)\n            if key in dp and dp[key] + 1 >= res:\n                res = dp[key] + 1\n            if diff == target:\n                dp[key] = dp.get(key, 0) + 1\n    return res\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom typing import List\n\n\ndef max_len_sub(arr: List[int], difference: int) -> int:\n    if not arr:\n        return 0\n\n    length = 1\n    if arr[0] != difference:\n        length = 1\n    else:\n        length = 2\n\n    for i in range(1, len(arr)):\n        if arr[i] != difference and arr[i - 1] == difference:\n            length = max(length, 1 + max_len_sub(arr[:i], difference))\n        else:\n            length = max(length, 1)\n\n    return length", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, diff):\n    n = len(arr)\n    dp = [1] * n\n    res = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] + diff == arr[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                res = max(res, dp[i])\n    return res\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\nfrom typing import List, Any\n\n\ndef max_len_sub(arr: List[int], diff: int) -> int:\n    if len(arr) == 0:\n        return 0\n\n    max_ = 0\n    for i in range(len(arr)):\n        if arr[i] != diff:\n            if max_ > 0:\n                max_ += 1\n            else:\n                max_ = 0\n\n        if arr[i] == diff and max_ > 0:\n            max_ += 1\n\n        if arr[i] == diff and max_ == 0:\n            max_ += 1\n\n    return max_\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, elem):\n    max_len = 0\n    if len(arr) <= 1:\n        return max_len\n\n    max_diff = elem - arr[0]\n    for i in range(1, len(arr)):\n        diff = elem - arr[i]\n        if diff < max_diff:\n            continue\n        if diff > max_diff:\n            max_len = 0\n            max_diff = diff\n        if diff == max_diff:\n            max_len += 1\n\n    return max_len\n\n", "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, difference):\n    len_max = 0\n    max_num = 0\n    for i in range(0, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n        if (i+1) < len(arr):\n            if abs(arr[i+1] - arr[i]) == difference:\n                len_max = max(len_max, i+2 - i)\n    return len_max\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(0,len(s)-n+1):\n        count += sum(map(int,s[i:i+n]))\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str, sum):\n    count = 0\n    for i in range(0, len(str)):\n        if len(str[i:]) == sum:\n            count = count + 1\n    return count", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s, n):\n    count = 0\n    temp = s[0:n]\n    for i in range(len(s)-n+1):\n        temp = temp + s[i+n]\n        count += temp.count(str(n))\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str, n):\n    count = 0\n    for i in range(0, len(str) - n):\n        sum_ = 0\n        for j in range(0, n):\n            sum_ = sum_ + int(str[i + j])\n        if sum_ == n:\n            count = count + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(text,length):\n    n = len(text)\n    sum = 0\n    count = 0\n    for i in range(n-length+1):\n        sum = sum + int(text[i])\n        if sum == length:\n            count += 1\n            sum = 0\n    return count\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string, sum):\n    # Complete the function\n    n = len(string)\n    # n - index of the current character\n    for i in range(n-1):\n        # n - length of substring\n        for j in range(n-i):\n            # i - index of substring\n            s = string[i:j+1]\n            # len - number of digits in the string\n            # result - number of substrings that the sum of digits in the substring is equal to its length\n            result = 0\n            for k in s:\n                result += int(k)\n            if result == j+1:\n                return 1\n    return 0\n\n# # Question 3\n#\n# Write a python function to find the longest substring in a string having all distinct characters.\n\n# +\n# code by <NAME>\n\nimport itertools\n\ndef longest_Distinct_Substring(string):\n    # Complete the function\n    if len(string) == 1:\n        return string\n    else:\n        # n - index of the current character\n        for i in range(1,len(string)):\n            # n - length of substring\n            for j in range(i, len(string)):\n                # result - longest substring that has all distinct characters\n                result = string[i:j+1]\n                # unique - unique characters of the substring\n                unique = ''.join(set(result))\n                # if length of the substring is greater than that of the result\n                if len(unique) > len(result):\n                    result = unique\n                if len(result) > len(string):\n                    return result\n    return result\n\n# longest_Distinct_Substring('aaabbb')\n# longest_Distinct_Substring('aaabbbcc')\n# longest_Distinct_Substring('abbb')\n# longest_Distinct_Substring('bbbbbb')\n# longest_Distinct_Substring('cc')\n# longest_Distinct_Substring('aabbbbbb')\n# longest_Distinct_Substring('abcccd')\n# longest_Distinct_Substring('cccaaa')\n# longest_Distinct_Substring('aabcccd')\n# longest_Distinct_Substring", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n#Solution\ndef count_Substrings(string,sum):\n    return len(list(findSum(string,sum)))\n\ndef findSum(string,sum):\n    for i in range(len(string)):\n        if string[i:i+sum] == string[i:i+sum][::-1]:\n            yield string[i:i+sum]\n\n#Driver program to test above function", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string,n):\n    count = 0\n    for i in range(len(string)):\n        l = len(string[i])\n        sum = 0\n        for j in range(l):\n            sum += int(string[i][j])\n        if sum == l:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n# O(n) time and space complexity\ndef count_Substrings(s,sum_length):\n\tnum_count = 0\n\tfor i in range(len(s)):\n\t\tdigits = \"\"\n\t\tfor j in range(i,i+sum_length):\n\t\t\tdigits += s[j]\n\t\tnum_count += 1 if digits == str(sum_length) else 0\n\n\treturn num_count\n\n\n# O(n^2) time and space complexity\ndef count_Substrings(s,sum_length):\n\tnum_count = 0\n\tfor i in range(len(s)):\n\t\tfor j in range(i,i+sum_length):\n\t\t\tnum_count += 1 if s[i:j] == str(sum_length) else 0\n\n\treturn num_count\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(n):\n    num_list = []\n    for i in n:\n        num_list.append(int(i))\n    num_list.sort()\n    return num_list[0]\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(l):\n    sm=l[0]\n    for i in l:\n        if i<sm:\n            sm=i\n    return sm\nsmallest_num([10, 20, 1, 45, 99])\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(num_list):\n    return min(num_list)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    return min(lst)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(numbers):\n    return min(numbers)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\nfrom typing import List\n\ndef smallest_num(nums: List[int]) -> int:\n    return min(nums)\n\ndef test_smallest_num():\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n    assert smallest_num([1, 2, 3, 4]) == 1\n    assert smallest_num([4, 1, 3, 4, 2, 1]) == 1\n    assert smallest_num([10, 10, 10]) == 10\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(num_list):\n    \"\"\"\n    param: num_list - a list of numbers\n    returns: the smallest number in the list\n    \"\"\"\n    min_num = num_list[0]\n    for x in num_list:\n        if x < min_num:\n            min_num = x\n    return min_num\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(num_list):\n    return min(num_list)\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(numbers):\n    # put your code here\n    numbers.sort()\n    return numbers[0]\n", "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(numbers):\n  return min(numbers)"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuple_list):\n    maximum = 0\n    for tuple_one in tuple_list:\n        for tuple_two in tuple_list:\n            if tuple_one < tuple_two:\n                maximum = max(maximum, tuple_two - tuple_one)\n    return maximum\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuple_list):\n    max_diff = 0\n    for pair in tuple_list:\n        if abs(pair[0] - pair[1]) > max_diff:\n            max_diff = abs(pair[0] - pair[1])\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\nfrom typing import List\n\n\ndef max_difference(numbers: List[int]) -> int:\n    if not numbers:\n        return 0\n    if len(numbers) == 1:\n        return numbers[0]\n    numbers = sorted(numbers)\n    return numbers[-1] - numbers[0]\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(t):\n    t.sort()\n    return max(t[i][1] - t[i-1][0] for i in range(1, len(t)))\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef max_difference(t: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for i in range(len(t) - 1):\n        diff = t[i + 1][0] - t[i][0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef max_difference(input_list: List[Tuple[int]]) -> int:\n    \"\"\"\n    Given a tuple list, find the maximum difference between available pairs.\n    \"\"\"\n    max_difference = 0\n    for i in input_list:\n        for j in input_list:\n            if i != j:\n                max_difference = max(max_difference, abs(i[0] - j[0]))\n                max_difference = max(max_difference, abs(i[1] - j[1]))\n    return max_difference\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(pairs):\n    pairs = sorted(pairs, key=lambda x: x[0])\n    max_diff = 0\n    for i in range(1, len(pairs)):\n        if pairs[i][0] - pairs[i - 1][0] > max_diff:\n            max_diff = pairs[i][0] - pairs[i - 1][0]\n\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List\n\n\ndef max_difference(tuple_list: List[tuple]) -> int:\n    tuple_list = [x for x in tuple_list if x[0] != x[1]]\n    return max([max(x) - min(x) for x in tuple_list])\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom itertools import combinations\n\n\ndef max_difference(lst):\n    comb = combinations(lst, 2)\n    return max(comb, key=lambda x: x[1] - x[0])[1] - min(comb, key=lambda x: x[1] - x[0])[0]\n\n", "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuples):\n    return max(tuples, key = lambda pair: abs(pair[0] - pair[1]))\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subject_list):\n    subject_list.sort(key=lambda x: x[1])\n    return subject_list\n\nsubject_list = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subjects):\n    return sorted(subjects, key=lambda s: s[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    marks.sort(key = lambda x: x[1], reverse = True)\n    return marks\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(tup):\n    return sorted(tup, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subject_marks_tuples):\n    print(sorted(subject_marks_tuples, key=lambda tup: tup[1]))\n\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(sub_list):\n    sub_list.sort(key=lambda tup: tup[1])\n    return sub_list\n\n\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1], reverse=True)\n\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])", "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(tuples):\n    tuples.sort(key=lambda x: (x[1],x[0]))\n    return tuples"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(l):\n    \"\"\"\n    :param l: list, list of numbers\n    :return: int, sum of elements of list\n    \"\"\"\n    if isinstance(l[0], int):\n        return l[0]\n    return l[0] + recursive_list_sum(l[1])\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(l):\n    if isinstance(l, list):\n        return sum(recursive_list_sum(x) for x in l)\n    else:\n        return l\n\n# Example", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    \"\"\"\n    >>> recursive_list_sum(([1, 2, [3,4],[5,6]]))\n    21\n    >>> recursive_list_sum(1)\n    1\n    >>> recursive_list_sum([])\n    0\n    >>> recursive_list_sum((1,2,3,4,5))\n    15\n    >>> recursive_list_sum([1,2,3,4,5])\n    15\n    \"\"\"\n    if type(list)==int:\n        return list\n    elif len(list)==1:\n        return list[0]\n    else:\n        return list[0] + recursive_list_sum(list[1:])\n\n#This is the other version\ndef recursive_list_sum(list):\n    \"\"\"\n    >>> recursive_list_sum(([1, 2, [3,4],[5,6]]))\n    21\n    >>> recursive_list_sum(1)\n    1\n    >>> recursive_list_sum([])\n    0\n    >>> recursive_list_sum((1,2,3,4,5))\n    15\n    >>> recursive_list_sum([1,2,3,4,5])\n    15\n    \"\"\"\n    if type(list)==int:\n        return list\n    elif len(list)==1:\n        return list[0]\n    else:\n        return list[0] + recursive_list_sum(list[1:])", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list1):\n    if isinstance(list1, int) or isinstance(list1, float):\n        return list1\n    else:\n        return (recursive_list_sum(list1[0]) + recursive_list_sum(list1[1])) + recursive_list_sum(list1[2])\n\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    total = 0\n    for item in list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\n#def recursive_list_sum(list):\n    #if len(list) == 1:\n        #return list[0]\n    #else:\n        #total = recursive_list_sum(list[1:])\n        #return list[0] + total\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(mylist):\n    if len(mylist)==1:\n        return mylist[0]\n    else:\n        return mylist[0] + recursive_list_sum(mylist[1:])", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    # check for empty list\n    if lst == []:\n        return 0\n    else:\n        # check if it's a single value\n        if isinstance(lst[0], int):\n            return lst[0] + recursive_list_sum(lst[1:])\n        else:\n            return recursive_list_sum(lst[0]) + recursive_list_sum(lst[1:])\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(l):\n    if isinstance(l, int):\n        return l\n    elif isinstance(l, list):\n        return recursive_list_sum(sum(l))\n    else:\n        raise TypeError\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(my_list):\n    if isinstance(my_list, list):\n        print \"This is a list\"\n        my_list = sum(my_list)\n    else:\n        print \"This is an int\"\n        my_list = my_list\n    return my_list\n", "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(list):\n    if type(list)==int:\n        return list\n    elif type(list)==list:\n        return sum(list)+recursive_list_sum(list[1:])\n    else:\n        raise TypeError"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n#Count positive numbers in a list\ndef pos_count(num_list):\n    count = 0\n    for num in num_list:\n        if num > 0:\n            count = count + 1\n    return count\n\n#Assert", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    count = 0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(l):\n    c = 0\n    for i in l:\n        if i > 0:\n            c += 1\n    return c\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(numbers):\n    count = 0\n    for x in numbers:\n        if x>0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(my_list):\n    count = 0\n    for i in my_list:\n        if i > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(l):\n    count = 0\n    for x in l:\n        if x > 0:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(nums):\n    \"\"\"\n    >>> pos_count([1,-2,3,-4])\n    2\n    >>> pos_count([-2,1,-3,4,-5])\n    3\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n\ndef test_pos_count():\n    assert pos_count([1,-2,3,-4]) == 2\n    assert pos_count([-2,1,-3,4,-5]) == 3\n", "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    count = 0\n    for i in lst:\n        if i >= 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\nfrom math import sqrt\n\ndef bell_number(n):\n    return 1+sum([ncr(n, i) for i in range(n+1)])\n\ndef ncr(n,r):\n    return factorial(n)/factorial(r)/factorial(n-r)\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    from functools import lru_cache\n    @lru_cache(maxsize=None)\n    def aux(n,memo):\n        if n==1:\n            return 1\n        if n==2:\n            return 2\n        if n==3:\n            return 5\n        if n==4:\n            return 15\n        if n==5:\n            return 52\n        if n==6:\n            return 203\n        if n==7:\n            return 877\n        if n==8:\n            return 3412\n        if n==9:\n            return 13993\n        if n==10:\n            return 57787\n        if n==11:\n            return 233486\n        if n==12:\n            return 957992\n        if n==13:\n            return 3876737\n        if n==14:\n            return 15872072\n        if n==15:\n            return 65537025\n        if n==16:\n            return 268744401\n        if n==17:\n            return 1008063720\n        if n==18:\n            return 4032914611\n        if n==19:\n            return 16126324065\n        if n==20:\n            return 64589760361\n        if n==21:\n            return 258520167480\n        if n==22:\n            return 1034441348528\n        if n==23:\n            return 4136765388169\n        if n==24:\n            return 16546261494593\n        if n==25:\n            return 66225045888256\n        if n==26:\n            return 2650361435532", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n==1:\n        return 1\n    else:\n        return sum([bell_number(i) for i in range(1,n+1)])\n\ndef partitions(num, arr):\n    if num == 0:\n        return 1\n    for i in range(1, len(arr)):\n        if arr[i] < num:\n            num -= arr[i]\n            arr[i], arr[num] = arr[num], arr[i]\n            if num == 0:\n                return partitions(num, arr)\n\ndef bell_number_partitions(n):\n    return partitions(n, range(1, n+1))\n\ndef main():\n    print(bell_number(3))\n    print(bell_number(4))\n    print(bell_number(5))\n    print(bell_number_partitions(5))\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    a,b=0,1\n    for i in range(2,n+1):\n        c=a+b\n        a=b\n        b=c\n    return b\n\ndef partition_bell(n):\n    a=[0]*(n+1)\n    a[0],a[1]=1,1\n    for i in range(2,n+1):\n        a[i]=0\n        for j in range(i,0,-1):\n            if bell_number(j)==i:\n                a[i]+=a[j]\n    return a[n]\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\nfrom scipy.misc import comb\n\ndef bell_number(n):\n    #import math\n    #return math.factorial(2*n)/(n*(n+1))\n    return comb(2*n,n)/(n+1)\n    \ndef ways(n):\n    #1st case - all the elements are different\n    #return n*(bell_number(n-1))\n    return bell_number(n)*n\n\ndef ways1(n):\n    #2nd case - all the elements are different\n    #return n*(n*(n-1)*n/(3*2))\n    return bell_number(n)*n/2\n\ndef ways2(n):\n    #3rd case - all the elements are different\n    #return n*(n*(n-1)*(n-2)/3)\n    return bell_number(n)*n/6\n\ndef ways3(n):\n    #4th case - all the elements are different\n    #return n*(n*(n-1)*(n-2)*(n-3)/4)\n    return bell_number(n)*n/24\n\ndef ways4(n):\n    #5th case - all the elements are different\n    #return n*(n*(n-1)*(n-2)*(n-3)*(n-4)/5)\n    return bell_number(n)*n/120\n\ndef ways5(n):\n    #6th case - all the elements are different\n    #return n*(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)/6)\n    return bell_number(n)*n/720\n\ndef ways6(n):\n    #7th case - all the elements are different\n    #return n*(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)/7)\n    return bell_number(n)*n/5040\n\ndef ways7(n):\n    #8th case - all the elements are different\n    #return n*(n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef partition_bell(x):\n    if x==0: return 0\n    a = 0\n    for i in range(x):\n        a+=partition_bell(x-i-1)\n    return a\n", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nfrom projecteuler.util.combinatorics import combinations_with_replacement\nfrom projecteuler.util.primes import prime_sieve\n\nbell_prime = prime_sieve(10000)\n\nbell_number = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21127, 115975, 673030, 4011517, 26525205, 175976930, 1208925819, 8548367230, 61022767483, 440356976084, 3276465648281, 24906491386552, 193891508864355, 1521525060379025, 12029762633143802, 95904124263872755, 756671106863615566, 6127337913417725409, 52062561669111971750, 452561364184524895965, 4076248840712206912828, 37540139797887509687405, 352814580648737103727000, 3378900832191394275946", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef partition(number):\n    if number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        return partition(number-1) + partition(number-2)\n    \ndef ways(number):\n    if number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        count = 0\n        for i in range(2,number+1):\n            count += ways(i)\n        return count", "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n\treturn binomial(n+1,2)\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if len(arr) == 1:\n        return True\n    \n    flag = 1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            flag = -1\n            break\n    \n    return flag == 1\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if arr == None or len(arr) < 2:\n        return True\n\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    # loop to find adjacent element\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    # write your code here\n    if len(arr) == 1:\n        return True\n    if len(arr) > 1:\n        for i in range(1,len(arr)):\n            if arr[i-1] > arr[i]:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if arr is None or len(arr) == 0:\n        return False\n\n    is_monotonic = True\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            is_monotonic = False\n            break\n\n    return is_monotonic\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if(arr == []):\n        return True\n    if(arr[0] > arr[1]):\n        return False\n    if(arr[len(arr) -1] > arr[len(arr)-2]):\n        return False\n    for i in range(1,len(arr)-1):\n        if(arr[i] > arr[i+1]):\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    \n    if arr[0] < arr[1]:\n        return is_Monotonic(arr[1:])\n    elif arr[0] > arr[1]:\n        return False\n    else:\n        return is_Monotonic(arr[2:])\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    a = arr\n    if a[0] < a[1]:\n        for i in range(1, len(a) - 1):\n            if a[i-1] < a[i] > a[i+1]:\n                return False\n        return True\n    elif a[0] > a[1]:\n        for i in range(1, len(a) - 1):\n            if a[i-1] > a[i] < a[i+1]:\n                return False\n        return True\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n#Solution : \ndef is_Monotonic(A):\n    if len(A) == 1: return True\n    for i in range(len(A)):\n        if A[i] > A[i+1]:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1, l2):\n    for i in l1:\n        if i not in l2:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(lst1, lst2):\n    return lst1[:len(lst2)]==lst2\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l, subl):\n    return [x for x in subl if x not in l] == []\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(given_list, to_be_searched):\n    return True if len(given_list)>=len(to_be_searched) and given_list[:len(to_be_searched)]==to_be_searched else False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n    \n# Test", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(big_list, sub_list):\n    # Reversing a list\n    big_list.reverse()\n    sub_list.reverse()\n    # Checking if sublist is contained in big list or not\n    if(big_list==sub_list):\n        return True\n    else:\n        return False\n\n# Driver code", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(L1, L2):\n    L1_set = set(L1)\n    L2_set = set(L2)\n    if L1_set.issubset(L2_set):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(a, b):\n    \"\"\"\n    Check whether a sublist is in a list\n    \"\"\"\n    if not b:\n        return True\n    \n    if not a:\n        return False\n    \n    if a[0] == b[0]:\n        return is_sublist(a[1:],b[1:])\n    return is_sublist(a, b[1:])\n\n\n", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1, list2):\n    # Write your code here.\n    if len(list1)==len(list2):\n        list1.sort()\n        list2.sort()\n        if list1==list2:\n            return True\n        else:\n            return False\n    else:\n        return False", "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1, list2):\n    if list1==list2:\n        return True\n    elif len(list2)>len(list1):\n        return False\n    else:\n        for i in range(0,len(list2)):\n            if list2[i]!=list1[i]:\n                return False\n        return True\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    try:\n        assert len(tuples) != 0\n    except AssertionError:\n        print('Please enter tuples as a list of tuple')\n\n    for tup in tuples:\n        try:\n            assert len(tup) == length\n        except AssertionError:\n            print('Please enter tuples of the same length')\n            break\n    \n    if len(tuples) == length:\n        return 'All tuples have same length'\n\n    else:\n        return 'Some tuples do not have same length'\n\n\n# +", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    # your code here\n    return 'All tuples have same length' if len(tuples[0]) == length else 'Not all tuples have same length'", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(lst, length):\n    for i in range(0, len(lst)):\n        if length != len(lst[i]):\n            return \"Not all tuples have same length\"\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tup, n):\n    return 'All tuples have same length' if len(tup[0]) == n else 'All tuples are not of the same length'\n\n\n# test your code here```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nTuples as Dictionary Keys and Values\n\n### Code:\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    equal = True\n    for x in tuples:\n        if len(x) != length:\n            equal = False\n            break\n    return 'All tuples have same length' if equal else 'Some tuples have different length'", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\n# write your code here\ndef get_equal(tuples, length):\n    flag = False\n    for t in tuples:\n        if length != len(t):\n            flag = True\n            break\n    if flag == False:\n        return \"All tuples have same length\"\n    else:\n        return \"Not all tuples have same length\"", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, n):\n    len_tuples = [len(tuple) for tuple in tuples]\n    if len_tuples.count(len_tuples[0]) == len_tuples.count(len_tuples[1]):\n        return 'All tuples have same length'\n    else:\n        return 'Some tuples have different length'\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuple_list, length):\n    return 'All tuples have same length' if length == len(tuple_list[0]) else 'Not all tuples have same length'", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuple_list, n):\n    \"\"\"\n    Check if all the given tuples have same length.\n    :param tuple_list: list of tuples\n    :param n: number of elements in each tuple\n    :return: String describing whether all tuples have same length or not\n    \"\"\"\n    return 'All tuples have same length' if len(tuple(tuple_list[0])) == n else 'Not all tuples have same length'\n\n", "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    \"\"\"\n    Get a list of tuples and a length of tuples\n    Returns a string indicating if all tuples have same length or not\n    \"\"\"\n    return 'All tuples have same length' if len(tuples[0]) == length else 'Not all tuples have same length'\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    n = len(arr)\n    gap = n\n\n    while gap >= 1:\n        for i in range(n):\n            for j in range(gap, n):\n                if arr[j - gap] > arr[j]:\n                    arr[j], arr[j - gap] = arr[j - gap], arr[j]\n        gap //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nfrom random import randint\nimport random\n\ndef comb_sort(alist):\n    # Create a new list\n    copy = alist[:]\n    # Create a new list to hold the values\n    hold = []\n    # Loop until the copy list is empty\n    while len(copy) > 1:\n        # Create a new list to hold the smallest numbers\n        temp = []\n        # Create a new list to hold the numbers that are larger than the smallest\n        large = []\n        # Create a new list to hold the rest of the numbers\n        small = []\n        # Create a new list to hold the numbers that are larger than the number at the beginning of the copy list\n        large_start = []\n        # Loop until the copy list is empty\n        while len(copy) > 0:\n            # Get the number at the beginning of the copy list\n            test = copy[0]\n            # Loop until the temp list is empty\n            while len(temp) > 0:\n                # Check if the current number is larger than the number at the beginning of the copy list\n                if test > temp[len(temp) - 1]:\n                    # Append the number at the beginning of the copy list to the large list\n                    large.append(test)\n                # Check if the current number is smaller than the number at the beginning of the copy list\n                elif test < temp[len(temp) - 1]:\n                    # Append the number at the beginning of the copy list to the small list\n                    small.append(test)\n                # Check if the current number is equal to the number at the beginning of the copy list\n                else:\n                    # Append the number at the beginning of the copy list to the temp list\n                    temp.pop()\n                    temp.append(test)\n                    break\n            # Loop until the large list is empty\n            while len(large) > 0:\n                # Check if the number at the beginning of the large list is larger than the number at the beginning of the copy list\n                if large[0] > test:\n                    # Append the number at the beginning of the large list to the large_start list\n                    large_start.append(large[0])", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nfrom random import randint\n\n\ndef comb_sort(alist):\n    gap = len(alist)\n    step = 1\n    while gap > 1:\n        step = 1\n        for i in range(gap):\n            for j in range(i + gap, len(alist), gap):\n                if alist[j] < alist[j - gap]:\n                    alist[j], alist[j - gap] = alist[j - gap], alist[j]\n                    step = 0\n        gap = gap // 1.3\n        if step == 1:\n            break\n    return alist\n\n\ndef rand_list(n):\n    return [randint(-10000, 10000) for i in range(n)]\n\n\ndef test():\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(items):\n    pass\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(elements):\n    if len(elements) < 2:\n        return elements\n\n    l = len(elements)\n    gap = l // 2\n\n    while gap > 0:\n        for i in range(gap, l):\n            j = i - gap\n            while j >= 0 and elements[j] > elements[j + gap]:\n                elements[j], elements[j + gap] = elements[j + gap], elements[j]\n\n        gap = gap // 2\n\n    return elements\n\n# Test the function", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nfrom random import randrange\n\n\ndef comb_sort(arr):\n    if len(arr) < 2:\n        return arr\n    gap = len(arr)\n    gap = gap // 1.3\n    while gap > 1:\n        for i in range(gap, len(arr)):\n            for j in range(i - gap, -1, -gap):\n                if arr[j] > arr[j + gap]:\n                    arr[j], arr[j + gap] = arr[j + gap], arr[j]\n    return arr\n\n\n# def comb_sort(arr):\n#     # O(n)\n#     if len(arr) < 2:\n#         return arr\n#     gap = len(arr) // 1.3\n#     while gap > 1:\n#         for i in range(gap, len(arr)):\n#             for j in range(i - gap, -1, -gap):\n#                 if arr[j] > arr[j + gap]:\n#                     arr[j], arr[j + gap] = arr[j + gap], arr[j]\n#     return arr\n\n\ndef random_array(size):\n    return [randrange(100) for _ in range(size)]\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(elements):\n    # Initializing variables\n    length = len(elements)\n    gap = length\n    i = 1\n    swapped = True\n    \n    # Finding the right gap size\n    while gap >= 1:\n        gap = (gap + 1) // 2\n        swapped = False\n        \n        # Compare elements by steps of gap\n        for i in range(gap, length):\n            if elements[i - gap] > elements[i]:\n                elements[i - gap], elements[i] = elements[i], elements[i - gap]\n                swapped = True\n        i += 1\n    \n    # Return the sorted list\n    return elements\n\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n        gap //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(L):\n    if len(L) < 2:\n        return L\n    gap = len(L) // 2\n    while gap > 0:\n        for i in range(gap, len(L)):\n            for j in range(i - gap, 0, -gap):\n                if L[j - gap] > L[j]:\n                    L[j - gap], L[j] = L[j], L[j - gap]\n        gap = gap // 2\n    return L\n\n\ndef comb_sort_test():\n    # True\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    # True\n    assert comb_sort([20, 5, 18, 2, 10, 15]) == [2, 5, 10, 15, 18, 20]\n    # True\n    assert comb_sort([1, 5, 2, 3, 9, 12, 11, 4, 0, 7, 8]) == [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12]\n\n\ncomb_sort_test()", "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nfrom random import randint\n\n\ndef comb_sort(list):\n    if len(list) < 2:\n        return list\n    length = len(list)\n    gap = length\n    while gap > 1:\n        gap = int(gap / 1.3)\n        gap = int(gap / 1.3)\n        for i in range(length - gap):\n            if list[i] > list[i + gap]:\n                list[i], list[i + gap] = list[i + gap], list[i]\n    return list\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    # We can represent this number as a difference of two squares if it is a perfect square\n    if n % 4 == 0:\n        return True\n\n    # If it is not a perfect square, we can represent it as a difference of two squares if we\n    # can write it as the difference of two squares of integers\n    # Note that we need to test for both positive and negative numbers\n    for i in range(-int(math.sqrt(n)), int(math.sqrt(n)) + 1):\n        if i * i == n:\n            return True\n        elif -i * i == n:\n            return True\n\n    # If we reach here, it means we couldn't find any integers to represent this number as a difference\n    # of two squares\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    return False", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\n# diff_Square(25) = 25 - 4^2 = 5 - 2^2\ndef dif_Square(num):\n    if num % 4 == 0:\n        if num == 4 * (num//4) ** 2:\n            return True\n    elif num % 2 == 0:\n        if num == 2 * (num // 2) ** 2:\n            return True\n    return False\n\ndef check_num(num):\n    if num % 4 == 0:\n        if num == 4 * (num // 4) ** 2:\n            return True\n    elif num % 2 == 0:\n        if num == 2 * (num // 2) ** 2:\n            return True\n    elif num % 3 == 0:\n        if num == 3 * (num // 3) ** 2:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    for i in range(1,n+1):\n        if n%i == 0:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    if n == 0:\n        return True\n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0 and (n // i) % i == 0:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(num):\n    # your code goes here\n    # print(num)\n    if num % 4 == 0:\n        if num % 8 == 0:\n            return False\n        if num % 2 == 0:\n            return False\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % (i * i) == 0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    a = int(num**0.5)\n    b = int((num - a**2)**0.5)\n    if num == a**2 + b**2:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    square = n**2\n    # checking whether the square is divisible by 4 or not\n    if square % 4 != 0:\n        return False\n\n    # checking whether the square is divisible by 8 or not\n    square2 = square//4\n    if square2 % 8 != 0:\n        return False\n\n    # checking whether square is divisible by 16 or not\n    square2 = square//8\n    if square2 % 16 != 0:\n        return False\n\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    return (n**2-n) % 2 == 0 or (n**2-n-1) % 2 == 0 or (n**2+n) % 2 == 0 or (n**2+n-1) % 2 == 0\n\ndef test_dif_Square():\n    assert dif_Square(5) == True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    i = 1\n    while i*i <= n:\n        if n == i*i:\n            return True\n        elif n > i*i:\n            i += 1\n        elif n < i*i:\n            return False\n    return False"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(text, delimiters):\n    \"\"\" Splits the string at any point where the delimiters appear. \"\"\"\n    for d in delimiters:\n        text = text.split(d)\n    return text\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(string: str, delimiters: str) -> list:\n    \"\"\"\n    splits a string with multiple delimiters using regular expressions\n\n    :param string: a string\n    :param delimiters: a string of delimiters\n    :return: list of strings\n    \"\"\"\n    return [string_piece for string_piece in re.split(delimiters, string) if string_piece]\n\ndef test_multiple_split():\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.', r'\\s*') == ['Forces of the ', 'darkness', 'are coming into the play.']\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(string, delimiters):\n    split_string = [string]\n    for delimiter in delimiters:\n        new_split_string = []\n        for i in range(len(split_string)):\n            if delimiter in split_string[i]:\n                new_split_string.extend(re.split(delimiter, split_string[i]))\n            else:\n                new_split_string.append(split_string[i])\n        split_string = new_split_string\n    return split_string\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n\ndef multiple_split(string, delim):\n    regex = re.compile(delim)\n    return [delim.join(match.group().split(delim)[:-1]) for match in regex.finditer(string)]", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(string):\n    r = re.compile(r\"(?<!\\\\)\\*\")\n    return r.split(string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\n\ndef multiple_split(string, sep=None, maxsplit=0):\n    if sep is None:\n        if isinstance(string, str):\n            sep = ' '\n        else:\n            sep = '|'\n    pattern = '|'.join(re.escape(word) for word in sep)\n    return re.split(pattern, string, maxsplit)\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\ndef multiple_split(string, *delimiters):\n    pattern = '|'.join(delimiters)\n    return re.split(pattern, string)\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nfrom typing import List\n\n\ndef multiple_split(s: str, delimiters: List[str]) -> List[str]:\n    result = []\n    for d in delimiters:\n        tmp = s.split(d)\n        if len(tmp) > 1:\n            result += tmp\n    return result\n\n", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(text, delimiters=None):\n    if not delimiters:\n        delimiters = re.compile(r\"\\s+\")\n    return delimiters.split(text)\n\n\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n# assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the", "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(string, *args):\n    \"\"\"\n    Args:\n        string: the input string\n        args: the delimiters to split on\n    Returns:\n        a list of strings\n    \"\"\"\n    split_string = string\n    for delimiter in args:\n        split_string = re.split(delimiter, split_string)\n    \n    return split_string\n"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, words):\n    if len(patterns) != len(words):\n        return False\n\n    count = 0\n    for i in range(len(patterns)):\n        if patterns[i] == words[i]:\n            count += 1\n    if count == len(patterns):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, words): \n    if len(patterns) != len(words): \n        return False\n    p = patterns\n    w = words\n    count = {}\n    for c in p:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    for c in w:\n        if c in count:\n            count[c] -= 1\n        else:\n            return False\n    return len(count) == 0", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, colors):\n    if len(patterns) != len(colors):\n        return False\n    if len(set(patterns)) != len(patterns):\n        return False\n    pattern_map = {p:i for i, p in enumerate(patterns)}\n    pattern_color_map = {p:c for p, c in zip(patterns, colors)}\n    for color in colors:\n        if color not in pattern_map:\n            return False\n        color_idx = pattern_map[color]\n        if pattern_color_map[color_idx] != color:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, test_patterns):\n    if len(patterns) != len(test_patterns):\n        return False\n    else:\n        if len(patterns) == 0:\n            return True\n        else:\n            if patterns[0] == test_patterns[0]:\n                return is_samepatterns(patterns[1:], test_patterns[1:])\n            else:\n                return False\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, words):\n    count = 0\n    for word in words:\n        for pattern in patterns:\n            if word == pattern:\n                count += 1\n                break\n            elif word != pattern:\n                count = 0\n                break\n        if count == len(patterns):\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, pattern):\n    print patterns\n    if len(patterns) == 0:\n        return True\n\n    if patterns[0] == pattern:\n        return is_samepatterns(patterns[1:], pattern)\n    return False\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, word):\n    if not patterns or not word:\n        return False\n\n    if len(word) != len(patterns):\n        return False\n\n    for pattern in patterns:\n        if pattern not in word:\n            return False\n\n        count = 1\n        for i in range(len(word)-1):\n            if word[i] == word[i+1] and word[i] == pattern:\n                count += 1\n        if count > 1:\n            return False\n\n    return True\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns,input_patterns):\n    if len(input_patterns) < len(patterns):\n        return False\n    \n    p = 0\n    for i in range(len(input_patterns)):\n        if input_patterns[i] != patterns[p]:\n            return False\n        p+=1\n    return True\n\n\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, word):\n    a=[]\n    for p in patterns:\n        a.append(word.find(p))\n        if p in word:\n            a.append(True)\n        else:\n            a.append(False)\n    return all(a)\n", "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, test):\n    if patterns == test:\n        return True\n    elif len(patterns) != len(test):\n        return False\n    else:\n        for i in range(len(patterns)):\n            if patterns[i] != test[i]:\n                return False\n    return True\n\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    return list(filter(lambda x: all(i%k==0 for i in x), tuples))\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nfrom itertools import product\nfrom typing import List, Tuple\n\ndef find_tuples(tuples: List[Tuple[int]], k: int) -> str:\n    return str(tuple([t for t in product(*tuples) if all(t[i] % k == 0 for i in range(len(t)))]))\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    result = []\n    for a, b, c in tuples:\n        if a % k == 0 and b % k == 0 and c % k == 0:\n            result.append((a, b, c))\n    return str(result)", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tupl, k):\n    for i in tupl:\n        if not all(x % k == 0 for x in i):\n            return False\n    return True\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(lst, k):\n    return str([tuple(i) for i in itertools.ifilter(lambda x: k % x[0] == 0, lst)])\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    return str(tuples[0])\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\nfrom typing import List\n\n\ndef find_tuples(tuples: List, k: int) -> List:\n    return list(filter(lambda x: k % x[0] == 0 and k % x[1] == 0 and k % x[2] == 0, tuples))\n\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    res = []\n    for tup in tuples:\n        if all(x%k == 0 for x in tup):\n            res.append(tup)\n    return res\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if all(t[i] % k == 0 for i in range(len(t))):\n            result.append(t)\n    return result\n", "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    divisible_tuples = []\n    for tup in tuples:\n        if all(x % k == 0 for x in tup):\n            divisible_tuples.append(tup)\n    return str(divisible_tuples)\n\n\n# +"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(row_num, col_num):\n    count = 0\n    for row in range(row_num):\n        for col in range(col_num):\n            if row % 2 == 0 and col % 2 == 0:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n# number of squares in rectangle is equal to ((length + 1) * (height + 1)) / 2\n# or in short (l + 1) * (h + 1) / 2\ndef count_Squares(length, height):\n    return (length + 1) * (height + 1) / 2\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(rows,columns):\n    result = 0\n    for row in range(0,rows):\n        for column in range(0,columns):\n            result += 1\n    return result\n\n#assert count_Squares(4,3) == 20\n\n# Largest of 3 numbers", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\nimport numpy as np\ndef count_Squares(length,breadth):\n\treturn length*breadth\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(length, width):\n    if length < 0 or width < 0:\n        raise ValueError('Length and width must be non-negative integers.')\n    squares = 0\n    for x in range(length):\n        for y in range(width):\n            squares += 1\n    return squares", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(l, w):\n    if l >= w:\n        return (w * l) // 2\n    else:\n        return 0\n\ndef test_count_Squares():\n    l = 4\n    w = 3\n    expected = 20\n    actual = count_Squares(l, w)\n    assert expected == actual\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(length, width):\n  return length * width\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# Write your code here\ndef count_Squares(length, width):\n    total = 0\n    for i in range(0,length):\n        for j in range(0, width):\n            if i == j or i+j == width - 1 or i + j == length - 1:\n                total += 1\n    return total\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(x,y):\n\tsquares = 0\n\tfor i in range(0,x):\n\t\tfor j in range(0,y):\n\t\t\tsquares += 1\n\treturn squares\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n# def count_Squares(x,y):\n#     if x<0 or y<0:\n#         return 0\n#     if x==0 or y==0:\n#         return 0\n#     if x==1 and y==1:\n#         return 1\n#     return (count_Squares(x-1,y)+count_Squares(x,y-1)-count_Squares(x-1,y-1))\n\ndef count_Squares(x,y):\n    if x<0 or y<0:\n        return 0\n    if x==0 or y==0:\n        return 0\n    if x==1 and y==1:\n        return 1\n    return (count_Squares(x-1,y)+count_Squares(x,y-1)-count_Squares(x-1,y-1))\n\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    sum = 0\n    for digit in str(num):\n        if digit.isdigit() == True:\n            if int(digit)%2 == 0:\n                sum += int(digit)\n            else:\n                pass\n        else:\n            pass\n    if sum == num:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (n):\n    # your code here\n    if n % 2 == 0:\n        sumEven = n\n    else:\n        sumEven = sum_of_digits_with_given_parity(n,1)\n    if sumEven == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (n):\n    sum_ev = 0\n    sum_od = 0\n    \n    for i in str(n):\n        if int(i) % 2 == 0:\n            sum_ev += int(i)\n        else:\n            sum_od += int(i)\n    \n    if sum_od == sum_ev:\n        return True\n    else:\n        return False\n        ", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (num):\n    sum_even = 0\n    sum_odd = 0\n    for i in num:\n        if int(i)%2 == 0:\n            sum_even = sum_even + int(i)\n        else:\n            sum_odd = sum_odd + int(i)\n    if sum_even - sum_odd == 1:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (num):\n    sum_even = 0\n    sum_odd = 0\n    num_str = str(num)\n    for i in num_str:\n        if int(i)%2==0:\n            sum_even+=int(i)\n        else:\n            sum_odd+=int(i)\n    if sum_even == sum_odd:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(number):\n  even = 0\n  odd = 0\n  # write code here\n  \n  return even == odd\n\n# test the function", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (num):\n    # num = int(num)\n    s = 0\n    for i in range(len(num)):\n        if num[i]%2 == 0:\n            s += int(num[i])\n        else:\n            s -= int(num[i])\n    if s == 0:\n        return True\n    return False", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    even = []\n    odd = []\n    i = 0\n    n = len(str(num))\n    while i < n:\n        if int(str(num)[i]) % 2 == 0:\n            even.append(int(str(num)[i]))\n        else:\n            odd.append(int(str(num)[i]))\n        i = i + 1\n    return sum(even) - sum(odd)\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff (num):\n    sum_even = 0\n    sum_odd = 0\n    while num > 0:\n        if num%10 % 2 == 0:\n            sum_even += num%10\n        else:\n            sum_odd += num%10\n        num //= 10\n    return sum_even - sum_odd == 0\n", "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    sum_num = 0\n    i = 0\n    while i < len(str(num)):\n        if int(str(num)[i])%2 == 0:\n            sum_num += int(str(num)[i])\n            i += 1\n        elif int(str(num)[i])%2 == 1:\n            i += 1\n    if num == sum_num:\n        return False\n    else:\n        return True\n\n# Test"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1,n+1):\n        if (bin(i).count('1') % 2) != 0:\n            count += 1\n    return count", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\nfrom sys import setrecursionlimit\n\n\ndef count_With_Odd_SetBits(n):\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return 1 + count_With_Odd_SetBits(n // 2)\n    else:\n        return count_With_Odd_SetBits(n // 2)\n\n\nsetrecursionlimit(10 ** 6)", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n  count = 0\n  while n != 0:\n    count += n & 1\n    n = n >> 1\n  return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1')%2\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\ndef main():\n    print(count_With_Odd_SetBits(5))\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\nfrom functools import reduce\n\n\ndef count_With_Odd_SetBits(number):\n    return reduce(lambda a, b: a + ((b & 1) == 1), range(0, number + 1), 0)\n\n\ndef count_With_Odd_SetBits_2(number):\n    return sum((n & 1) for n in range(1, number + 1))\n\n\ndef count_With_Odd_SetBits_3(number):\n    return sum(1 for n in range(1, number + 1) if n & 1 == 1)\n\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count(\"1\") % 2\n\n    return count\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    # TODO\n    res = 0\n    for i in range(1, n + 1):\n        # using bin() to convert the integer to binary\n        bin_i = bin(i)\n        # remove \"0b\"\n        bin_i = bin_i[2:]\n        # loop through the bits\n        for j in bin_i:\n            # if the bit is odd, add 1 to res\n            if j == \"1\":\n                res += 1\n    return res\n", "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while(n):\n        count+=n&1\n        n>>=1\n    return count\n\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    word = word.lower()\n    return len(word)%2 != 0\n\n\n# -\n\n# # 1.2 Write a python function that checks whether a string is a palindrome or not.\n#\n# Examples:\n#\n# ```\n# >>> is_palindrome(\"abccba\")\n# True\n# >>> is_palindrome(\"abcdd\")\n# False\n# ```\n\ndef is_palindrome(word):\n    word = word.lower()\n    word = word[::-1]\n    return word == word\n\n\n# # 1.3 Write a python function to print all sentences which are not a palindrome.\n#\n# Examples:\n#\n# ```\n# >>> s = \"This is a sample sentence\"\n# >>> print_non_palindrome_sentences(s)\n# This is a not a palindrome\n# sample sentence\n# ```\n\ndef print_non_palindrome_sentences(sentence):\n    for i in range(len(sentence)):\n        if(not is_palindrome(sentence[:i+1])):\n            print(sentence[:i+1], \"is not a palindrome\")\n\n\ns = \"This is a sample sentence\"", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(s):\n    n = len(s)\n    if n%2==0:\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if(len(word)%2==0):\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 1:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    \"\"\"\n    Returns True if the length of the word is odd, False otherwise.\n    :param word: str\n    :return: bool\n    \"\"\"\n    return len(word) % 2 == 1\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n# write your code here\ndef word_len(word):\n    return len(word) % 2 == 1\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\nimport re\ndef word_len(s):\n    return len(re.findall(r\"^[A-Za-z]+\",s))%2==0\n", "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n# Write your code here\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return n * (n + 1) / 2\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\n# + [markdown] id=\"26d06c83\"\n# # Extra Credit\n#\n# Find the sum of the even Fibonacci numbers up to the 1000th number. \n#\n# Fibonacci numbers are defined as: \n#\n# $$f_0 = 0 \\quad \\text{and} \\quad f_1 = 1$$\n#\n# $$f_n = f_{n-1} + f_{n-2} \\quad \\text{if } n > 1$$\n#\n#\n# You can use the built-in `fibonacci()` function from the `fibonacci_numbers` module.\n\n# + id=\"e1091218\"\ndef fibonacci_even_sum(n):\n    \"\"\"\n    Return the sum of all the even fibonacci numbers\n    up to the nth number.\n    \n    Arguments:\n        n -- the nth fibonacci number\n    \n    Returns:\n        the sum of all the even fibonacci numbers up to\n        the nth number\n    \"\"\"\n    # create an empty list and then loop through the fibonacci\n    # numbers and add them to the list\n    sum = []\n    for i in fibonacci_numbers.fibonacci(n):\n        if i % 2 == 0:\n            sum.append(i)\n    return sum\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6\n\ndef test_tetrahedral_number():\n    assert tetrahedral_number(5) == 35.0\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return ((n + 1) * n * (n - 1)) // 3\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 35\n    elif n == 5:\n        return 70\n    elif n == 6:\n        return 126\n    elif n == 7:\n        return 210\n    elif n == 8:\n        return 330\n    elif n == 9:\n        return 495\n    elif n == 10:\n        return 720\n    elif n == 11:\n        return 1025\n    elif n == 12:\n        return 1420\n    elif n == 13:\n        return 1925\n    elif n == 14:\n        return 2560\n    elif n == 15:\n        return 3355\n    else:\n        if n%15 == 0:\n            return tetrahedral_number(int(n/15)) * 15\n        elif n%15 == 1:\n            return tetrahedral_number(int(n/15)) * 15 + 15\n        elif n%15 == 2:\n            return tetrahedral_number(int(n/15)) * 15 + 30\n        elif n%15 == 3:\n            return tetrahedral_number(int(n/15)) * 15 + 45\n        elif n%15 == 4:\n            return tetrahedral_number(int(n/15)) * 15 + 60\n        elif n%15 == 5:\n            return tetrahedral_number(int(n/15)) * 15 + 75\n        elif n%15 == 6:\n            return tetrahedral_number(int(n/15)) * 15 + 90\n        elif n%15 == 7:\n            return tetrahedral_number(", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return (1+n)**3\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nfrom math import sqrt\n\ndef tetrahedral_number(n):\n    i = 0\n    while i <= n:\n        # print(i, sqrt(i * (i + 1) * (i + 2) * (i + 3)) )\n        i += 1\n    return sqrt(i * (i + 1) * (i + 2) * (i + 3))\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return 1.0 / 3.0 * (n + 1) * (n + 2) * (n + 3)\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"Return the nth tetrahedral number.\n\n    >>> tetrahedral_number(5)\n    35.0\n    >>> tetrahedral_number(6)\n    56.0\n    >>> tetrahedral_number(7)\n    91.0\n    \"\"\"\n    return _tetrahedral_number(n)\n\n\ndef _tetrahedral_number(n: int) -> float:\n    \"\"\"Return the nth tetrahedral number.\n\n    >>> _tetrahedral_number(5)\n    35.0\n    >>> _tetrahedral_number(6)\n    56.0\n    >>> _tetrahedral_number(7)\n    91.0\n    \"\"\"\n    return (n + 1) ** 3 - n\n\n", "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nfrom math import factorial\n\ndef tetrahedral_number(n):\n    \"\"\"\n    >>> tetrahedral_number(5)\n    35.0\n    >>> tetrahedral_number(10)\n    784.0\n    >>> tetrahedral_number(100)\n    1499649760.0\n    >>> tetrahedral_number(1000)\n    2589736623376.0\n    >>> tetrahedral_number(10000)\n    395739850387872.0\n    >>> tetrahedral_number(100000)\n    5590497202702720.0\n    >>> tetrahedral_number(1000000)\n    752203892772856896.0\n    \"\"\"\n    return factorial(n+3)/factorial(3)\n\n\n# tetrahedral_number = tetrahedral_number_naive\n\n\ndef tetrahedral_number_naive(n):\n    \"\"\"\n    >>> tetrahedral_number_naive(5)\n    35.0\n    >>> tetrahedral_number_naive(10)\n    784.0\n    >>> tetrahedral_number_naive(100)\n    1499649760.0\n    >>> tetrahedral_number_naive(1000)\n    2589736623376.0\n    >>> tetrahedral_number_naive(10000)\n    395739850387872.0\n    >>> tetrahedral_number_naive(100000)\n    5590497202702720.0\n    >>> tetrahedral_number_naive(1000000)\n    752203892772"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    return [(t1[i], t2[i]) for i in range(len(t1))]", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    zipped = []\n    for i in range(0,min(len(t1),len(t2))):\n        zipped.append((t1[i], t2[i]))\n    return zipped\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\n#brute force\ndef zip_tuples(*args):\n    final_list = list()\n    for t in args:\n        for x in t:\n            final_list.append(x)\n    final_list = list(set(final_list))\n    return list(zip(*[iter(final_list)]*len(args)))\n\n#better\ndef zip_tuples(*args):\n    final_list = list()\n    for x in zip(*args):\n        final_list.append(x)\n    return final_list\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1, tuple2):\n    output_list = []\n    index = 0\n\n    for i in tuple1:\n        output_list.append((i, tuple2[index]))\n        index += 1\n    \n    return output_list", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple1, tuple2):\n    return list(zip(tuple1, tuple2))\n\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(*args):\n    zipped_tuples = []\n    for i in range(len(args[0])):\n        zipped_tuples.append(list(zip(args[0][i],args[1][i])))\n    return zipped_tuples", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1, tuple2):\n    # this should return a list of tuples\n    return tuple1\n\n# assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(*args):\n    \"\"\"\n    Create a zip object from a sequence of tuples\n    \n    Args:\n        args (tuple): A sequence of tuples to zip\n\n    Returns:\n        zip object: A zip object of the tuples\n    \"\"\"\n    zip_obj = zip(*args)\n    return zip_obj\n", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(t1, t2):\n    res = []\n    i = 0\n    j = 0\n    while i < len(t1) and j < len(t2):\n        res.append((t1[i], t2[j]))\n        i = i + 1\n        j = j + 1\n    return res\n\n# Test", "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tuple_one, tuple_two):\n    # Your Code Here\n    return [(a, b) for a, b in zip(tuple_one, tuple_two)]\n# Test"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3 * math.pi * radius **3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\n#from math import *\n\ndef volume_sphere(radius):\n    import math\n    radius = radius\n    volume = (4 * math.pi * radius * radius * radius) / 3\n    return volume\n\n# Test", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4/3*3.14*radius**3", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    vol= 4*3.14*radius**3\n    return vol\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\nimport math\n\ndef volume_sphere(radius):\n    return (4 / 3) * math.pi * (radius ** 3)\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    return 4.0/3.0*math.pi*radius**3\n\ndef main():\n    print(volume_sphere(10))\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    return 4.0/3.0*math.pi*radius**3\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(r):\n    return 4/3*pi*r**3\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius: float) -> float:\n    \"\"\"\n    :param radius: radius of the sphere\n    :return: volume of the sphere\n    >>> volume_sphere(10)\n    4188.790204786391\n    \"\"\"\n    return 4/3 * pi * radius ** 3\n\n", "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given the radius\n    \n    Parameters:\n        radius(float): The radius of the sphere\n    \n    Returns:\n        (float): The volume of the sphere\n    \"\"\"\n    #Assigning variables\n    pi = 3.14\n    vol = 0\n    #Calculating\n    for i in range(1,radius+1):\n        vol += (pi/3) * (radius**3 - (radius-i)**3)\n    return vol\n\n\n# ## Q12\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    x = str[0]\n    for i in str:\n        x = x + i\n    return x\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(my_str):\n    return chr(sum(ord(i) for i in my_str))\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    # Write your code here.\n    res = \"\"\n    for i in string:\n        res += i\n    return res\n\n#Driver code", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    \"\"\"\n    This function takes string as input and returns a string of the character made up of adding all the characters of the given string\n    \"\"\"\n    import string\n    total = \"\"\n    for i in range(len(s)):\n        total = total + s[i]\n    return total\n\n# Driver code\ns = \"abc\"\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    s = \"\"\n    for i in string:\n        s = s + i\n    return s\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(s):\n    # complete the function\n    res=\"\"\n    for i in s:\n        res=res+i\n    return res\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    if len(string) == 0:\n        return string\n    else:\n        return get_Char(string[1:]) + string[0]\n\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    res = ''\n    for x in string:\n        res += x\n    return res", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    string = list(string)\n    return \"\".join(string)\n\ndef test_function(test_case):\n    assert get_Char(test_case[0]) == test_case[1]\n\ntest_function((\"abc\", \"f\"))\n", "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    result = \"\"\n    for i in str:\n        result = result + i\n    return result"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    \"\"\"\n    Parameters\n    ----------\n    n : int\n        the number for the desired sequence element.\n    Returns\n    -------\n    int\n        the n-th element in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return sequence(n//2) + sequence(n//2 + 1)\n    else:\n        return 2 * sequence(n // 2) + sequence(n // 2 + 1)\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef newman(n):\n    sequence = [0,1,1,0]\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        for i in range(0,n-3):\n            sequence.append(sequence[-3] + sequence[-2] + sequence[-1])\n        return sequence[-1]\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\nimport pytest\nfrom itertools import product\n\n\ndef newman_conway_sequence(n):\n    \"\"\"\n    >>> newman_conway_sequence(1)\n    0\n    >>> newman_conway_sequence(2)\n    1\n    >>> newman_conway_sequence(3)\n    1\n    >>> newman_conway_sequence(4)\n    2\n    >>> newman_conway_sequence(5)\n    3\n    >>> newman_conway_sequence(6)\n    5\n    >>> newman_conway_sequence(7)\n    8\n    >>> newman_conway_sequence(8)\n    13\n    >>> newman_conway_sequence(9)\n    21\n    >>> newman_conway_sequence(10)\n    34\n    >>> newman_conway_sequence(11)\n    55\n    >>> newman_conway_sequence(12)\n    89\n    >>> newman_conway_sequence(13)\n    144\n    >>> newman_conway_sequence(14)\n    233\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return newman_conway_sequence(n//2) + 1\n    else:\n        return newman_conway_sequence(n//2)\n\n\ndef main():\n    print(newman_conway_sequence(1))\n    print(newman_conway_sequence(2))\n    print(newman_conway_sequence(3))\n    print(newman_conway_sequence(4))\n    print(newman_conway_sequence(5))\n    print(newman_conway_sequence(6))\n    print(newman_conway_sequence(7))\n    print(newman_conway_sequence(8))\n    print(newman_conway_sequence(9))\n    print(newman_conway_sequence(10))\n    print(newman_conway_sequence(11))\n    print(newman_conway_sequence(12))\n    print(newman_conway_sequence(13))\n    print", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef newman_conway(n):\n    #print(newman_conway_impl(n))\n    return newman_conway_impl(n)\n\ndef newman_conway_impl(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2 * newman_conway_impl(n // 2)\n    else:\n        return 3 * newman_conway_impl((n * (3 - n)) // 2)\n\ndef sequence(n):\n    return newman_conway(n)\n\ndef test_sequence():\n    assert sequence(10) == 6\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    pass\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef newman_conway(n):\n    return 1 if n == 1 else newman_conway(n - 1) + newman_conway(n - newman_conway(n - 1))\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n# Solution\ndef sequence(num):\n    sequence = [0, 1, 2, 3]\n    for i in range(4, num):\n        if sequence[i - 3] == sequence[i - 2]:\n            sequence.append(sequence[i - 3])\n        else:\n            sequence.append(sequence[i - 3] + sequence[i - 2])\n    return sequence[num - 1]\n\n\ndef main():\n    num = int(input('Enter the number: '))\n    print(sequence(num))\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n# +\ndef sequence(n):\n    if n==1:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)\n    ", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n\n", "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n# c - 1 and n - c - 1\n# n - c - 1 + c - 1 = n\n# n - c - 1 = n - c - 2\n# 2n - 2c = n - 2\n# c = (n - 2) / 2\n# c = n / 2 - 1\n\n# def sequence(n):\n#     if n == 1:\n#         return 1\n#     else:\n#         return sequence(n - 1) + 1\n\ndef sequence(n):\n    if n == 1:\n        return 1\n    else:\n        return sequence(n - 2) + 2\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    area = 4*math.pi*radius*radius\n    return area\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\nimport math\n\ndef surfacearea_sphere(radius):\n    pi = 3.14159\n    surfacearea = 4 * math.pi * math.pow(radius, 2) + (4 / 3) * math.pi * math.pow(radius, 3)\n    return surfacearea\n\n\ndef test_surfacearea_sphere():\n    surfacearea = surfacearea_sphere(10)\n    assert surfacearea == 1256.6370614359173\n\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * math.pow(radius, 2)\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nfrom math import sqrt\ndef surfacearea_sphere(r):\n    return 4*pi*r**2\n\ndef test_sphere_surface_area():\n    assert surfacearea_sphere(10)==1256.6370614359173\n\ntest_sphere_surface_area()\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    pi = 3.1415926535897932384626433832795\n    return (4 * pi * radius * radius + 4 * pi * radius * radius * radius) * 0.25\n\ndef surfacearea_cylinder(radius, height):\n    return (2 * pi * radius * radius + pi * radius * radius * height) * 0.5\n\ndef surfacearea_box(length, width, height):\n    return 2 * length * width + 2 * width * height + 2 * length * height\n\ndef surfacearea_triangle(length, width):\n    return length * width * 0.5\n\ndef surfacearea_parallelogram(base, height):\n    return 2 * base * height\n\ndef surfacearea_square(length):\n    return length * length\n\ndef surfacearea_rectangle(length, width):\n    return 2 * length * width\n\ndef surfacearea(object_type, length, width, height, radius):\n    if object_type == \"sphere\":\n        return surfacearea_sphere(radius)\n    elif object_type == \"cylinder\":\n        return surfacearea_cylinder(radius, height)\n    elif object_type == \"box\":\n        return surfacearea_box(length, width, height)\n    elif object_type == \"triangle\":\n        return surfacearea_triangle(length, width)\n    elif object_type == \"parallelogram\":\n        return surfacearea_parallelogram(base, height)\n    elif object_type == \"square\":\n        return surfacearea_square(length)\n    elif object_type == \"rectangle\":\n        return surfacearea_rectangle(length, width)\n    else:\n        raise ValueError(\"Unknown object type: \" + object_type)", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\n#f(x) = 4\u03c0r^2\n\n#x = radius\n#r = radius\n\nfrom math import *\n\ndef surfacearea_sphere(radius):\n    return 4 * pi * radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\n# +", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Returns the surface area of a sphere with radius.\n    \"\"\"\n    return 4*3.14159265359*radius*radius\n\n# tests", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4.0 * math.pi * radius**2\n", "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nfrom math import pi\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \"\"\"\n    return 4 * pi * radius ** 2\n\n\ndef test_surfacearea_sphere():\n    \"\"\"\n    Test surfacearea_sphere function.\n    \"\"\"\n    assert surfacearea_sphere(10) == 1256.6370614359173\n\n\n# -\n\ntest_surfacearea_sphere()\n\n\n# +\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \"\"\"\n    return 4 * pi * radius ** 2\n\ndef test_surfacearea_sphere():\n    \"\"\"\n    Test surfacearea_sphere function.\n    \"\"\"\n    assert surfacearea_sphere(10) == 1256.6370614359173\n\ndef test_surfacearea_sphere_2():\n    \"\"\"\n    Test surfacearea_sphere function.\n    \"\"\"\n    assert surfacearea_sphere(10) == 1256.6370614359173\n\n\n# -\n\ntest_surfacearea_sphere_2()\n\n# ## Exercises\n\n# ### Exercise 1:\n#\n# Write a function to compute the factorial of a positive integer, using recursion.\n# ```\n# assert factorial(5)==120\n# ```\n\n# +\nfrom math import factorial\n\ndef factorial(n):\n    \"\"\"\n    Compute the factorial of a positive integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef test_factorial():\n    \"\"\"\n    Test factorial function.\n    \"\"\"\n    assert factorial(5) == 120\n\n\n# -\n\ntest_factorial()\n\n\n# ### Exercise 2:\n#\n# Write a function to compute the factorial of a positive integer, using iteration.\n# ```\n# assert factorial_iter(5)==120\n# ```\n\n# +\ndef factorial_iter"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom __future__ import print_function\n\ndef centered_hexagonal_number(n):\n    # 10th centered hexagonal number is 271\n    # 11th centered hexagonal number is 546\n    # 12th centered hexagonal number is 915\n    # 13th centered hexagonal number is 1377\n    # 14th centered hexagonal number is 1932\n    # 15th centered hexagonal number is 2581\n    # 16th centered hexagonal number is 3325\n    # 17th centered hexagonal number is 4164\n    # 18th centered hexagonal number is 5100\n    # 19th centered hexagonal number is 6134\n    # 20th centered hexagonal number is 7267\n    if n < 10:\n        return 271 + n * 16\n    else:\n        return 271 + 16 * (n - 10)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i * ((i*2)-1)\n    return sum\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n# Answer is an array of 2.\n# [9, 11]\n# [11, 13]\n# [13, 15]\n# [15, 17]\n# [17, 19]\n# [19, 21]\n# [21, 23]\n\ndef centered_hexagonal_number(n):\n    nums = []\n    for i in range(1, n + 1):\n        temp = (i * (2 * i - 1)) // 2\n        nums.append(temp)\n    return nums\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import sqrt\n\ndef centered_hexagonal_number(n):\n    # Your code goes here\n    count = 0\n    while count < n:\n        count += 1\n        total = 0\n        # calculate hexagon number\n        for i in range(1, 7):\n            total += pow(2, i)\n        # calculate hexagon side length\n        side_length = int(sqrt(total))\n\n        # check if hexagon is centered\n        if side_length % 2 == 1:\n            side_length += 1\n        if side_length * (side_length + 1) == total:\n            return count\n    return -1\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import sqrt, ceil\nfrom typing import Optional\n\n\ndef centered_hexagonal_number(n: int, precision: Optional[int] = None) -> int:\n    \"\"\"\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(12)\n    495\n    >>> centered_hexagonal_number(12, precision=1)\n    495.0\n    >>> centered_hexagonal_number(12, precision=5)\n    495.22222\n    \"\"\"\n    if not precision:\n        return n * (2 * n - 1)\n    else:\n        m = (n - 1) * (2 * n - 1) / 2\n        return int(ceil(sqrt(1 + 8 * m) / 2) * 2)\n\n\ndef main():\n    print(centered_hexagonal_number(10))\n    print(centered_hexagonal_number(12))\n    print(centered_hexagonal_number(12, precision=1))\n    print(centered_hexagonal_number(12, precision=5))\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import pi\nfrom math import sin\n\n\ndef centered_hexagonal_number(n):\n    return round(n * (3 * sin(pi / 3) + 1) / 2)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nfrom math import sqrt\n\ndef centered_hexagonal_number(n):\n    return 100000 + (2 * n ** 2 + 2 * n) * (10000 + 36 * n + 35) // 2\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    return 10 * n * (n + 1) + (2 * n + 1)\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    center = (sqrt(8 * n + 1) - 1) / 4\n    return int((4 * n + 1) * (sqrt(8 * n + 1) + 1) / 4)\n\n", "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\nfrom math import sqrt, floor, pi\n\ndef centered_hexagonal_number(n):\n    i = 0\n    for i in range(n):\n        i += 1\n        j = i ** 2 - i + 1\n        hexagon = floor(j / 2) + i - 1\n        hexagon = hexagon ** 2\n        #print i, hexagon\n        #print hexagon, hexagon / pi\n\n    return hexagon\n\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    for key in dict1:\n        merged[key] = dict1[key]\n    for key in dict2:\n        if key in merged:\n            merged[key] = dict2[key]\n        else:\n            merged[key] = dict2[key]\n    for key in dict3:\n        if key in merged:\n            merged[key] = dict3[key]\n        else:\n            merged[key] = dict3[key]\n    return merged\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    merged = d1.copy()\n    for k, v in d2.items():\n        merged[k] = v\n    for k, v in d3.items():\n        merged[k] = v\n    return merged\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1,d2,d3):\n    dictionary = {}\n    dictionary.update(d1)\n    dictionary.update(d2)\n    dictionary.update(d3)\n    return dictionary\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    if d1==None or d2==None or d3==None:\n        return None\n    else:\n        return dict(d1, **d2, **d3)\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(a, b, c):\n    merged_dict = {}\n    \n    for key in a:\n        if a[key] != None:\n            merged_dict[key] = a[key]\n    for key in b:\n        if b[key] != None:\n            merged_dict[key] = b[key]\n    for key in c:\n        if c[key] != None:\n            merged_dict[key] = c[key]\n    \n    return merged_dict\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(d1,d2,d3):\n    d = {}\n    for key in d1.keys():\n        d[key] = d1[key]\n    for key in d2.keys():\n        d[key] = d2[key]\n    for key in d3.keys():\n        d[key] = d3[key]\n    return d\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(*args):\n    result = {}\n    for dictionary in args:\n        for key, value in dictionary.items():\n            result[key] = value\n    return result\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    dict_merge = {}\n    for key in dict1.keys():\n        dict_merge[key] = dict1[key]\n    for key in dict2.keys():\n        dict_merge[key] = dict2[key]\n    for key in dict3.keys():\n        dict_merge[key] = dict3[key]\n    return dict_merge\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n# You need to complete the function below\ndef merge_dictionaries_three(d1, d2, d3):\n    result = d1\n    for k in d2:\n        if k not in result:\n            result[k] = d2[k]\n    for k in d3:\n        if k not in result:\n            result[k] = d3[k]\n    return result\n\n", "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(d1, d2, d3):\n    merge = {}\n    for key in d1.keys():\n        merge[key] = d1[key]\n    for key in d2.keys():\n        if key not in merge:\n            merge[key] = d2[key]\n    for key in d3.keys():\n        if key not in merge:\n            merge[key] = d3[key]\n    return merge\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(nums):\n    d = {}\n    for i in nums:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(nums):\n    # Your code here\n    return dict([(item, nums.count(item)) for item in set(nums)])\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    # your code here\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\n#Define your function here\ndef freq_count(input_list):\n    freq = {}\n    for i in input_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n\n\n# -\n\n# ### 2. Write a function to get the frequency of the elements in a list.\n\n# +", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(alist):\n    freqdict = {}\n    for i in alist:\n        if i in freqdict:\n            freqdict[i] += 1\n        else:\n            freqdict[i] = 1\n    return freqdict\nfreq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\ndef freq_count(alist):\n    freqdict = {}\n    for i in alist:\n        if i in freqdict:\n            freqdict[i] += 1\n        else:\n            freqdict[i] = 1\n    return freqdict\nfreq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nNested dictionaries\n\n### Code:\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(nums):\n    freq={}\n    for num in nums:\n        freq[num]=freq.get(num,0)+1\n    return freq\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(a):\n    my_dict = {}\n    for i in a:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(numbers):\n    numbers = sorted(numbers)\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return counts\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\nfrom collections import defaultdict\ndef freq_count(numbers):\n    count=defaultdict(int)\n    for number in numbers:\n        count[number]+=1\n    return count\n", "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(L):\n    D = dict()\n    for item in L:\n        D[item] = D.get(item, 0) + 1\n    return D\n\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(num):\n    \"\"\"\n    Find the closest smaller number than n\n    \"\"\"\n    if num%2 == 0:\n        closest = num - 1\n    else:\n        closest = num\n    if closest == 0:\n        closest = 1\n    return closest\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nimport pytest\n\n\ndef closest_num(n):\n    closest_smaller = None\n    smaller_diff = None\n    for i in range(1, n+1):\n        diff = abs(i - n)\n        if smaller_diff is None or diff < smaller_diff:\n            smaller_diff = diff\n            closest_smaller = i\n    return closest_smaller\n\n\ndef test_closest_num():\n    assert closest_num(11) == 10\n    assert closest_num(2) == 1\n    assert closest_num(1000000000) == 1000000000\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nfrom typing import Any\n\n\ndef closest_num(num: int) -> int:\n    \"\"\"\n    >>> closest_num(11)\n    10\n    >>> closest_num(100)\n    89\n    >>> closest_num(50)\n    49\n    \"\"\"\n    for i in range(num, 1, -1):\n        if num % i == 0:\n            return num // i\n    return 0\n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\nfrom collections import defaultdict\n\ndef closest_num(n):\n    d = defaultdict(int)\n\n    for i in range(1, 1001):\n        d[i] = abs(n - i)\n\n    return min(d, key=lambda x: d[x])\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    return n if n % 2 == 0 else n - 1\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    l = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    d = {}\n    for i in l:\n        if n-i < 10:\n            return n-i\n        else:\n            d[i] = n-i\n    min_val = min(d, key=d.get)\n    return min_val\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    for i in range(n):\n        if n % i == 0:\n            return i\n        return n\n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    if n < 10:\n        return n\n    prev = 10\n    for i in range(10, n, -1):\n        if i == prev:\n            continue\n        if i < n:\n            return i\n        else:\n            prev = i\n    return n", "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\nimport pytest\n\n\ndef closest_num(n):\n    closest_num = n\n    for i in range(n):\n        if i > 0 and n - i in range(n):\n            closest_num = n - i\n            break\n    return closest_num\n\n\ndef test_closest_num():\n    assert closest_num(11) == 10"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\nimport sys\nsys.path.append(\"../src\")\nfrom utils import get_logger\n\n\ndef len_log(words):\n    #your code here\n    length = 0\n    for word in words:\n        length = max(length, len(word))\n    return length\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    return len(max(words, key = len))\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(lst):\n    return max(len(i) for i in lst)\n\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(in_str):\n  max_len = 0\n  for i in range(len(in_str)):\n    if len(in_str[i]) > max_len:\n      max_len = len(in_str[i])\n  return max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(input_list):\n    max_len = 0\n    for word in input_list:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(logs):\n    \"\"\"\n    :param logs: a list of string\n    :return: the length of the longest string in the logs\n    \"\"\"\n    def len_log_helper(log, word_dict, max_length):\n        if len(word_dict) == 0:\n            return max_length\n        word = word_dict.pop()\n        length = len(word)\n        if length > max_length:\n            max_length = length\n        length = len_log_helper(log, word_dict, max_length)\n        return max_length\n    word_dict = set(logs)\n    max_length = 0\n    for word in word_dict:\n        max_length = len_log_helper(word, word_dict, max_length)\n    return max_length\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    l = 0\n    for word in words:\n        if len(word)>l:\n            l = len(word)\n    return l\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    return len(max(words, key=len))\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(word_list):\n    return max(len(word) for word in word_list)\n", "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    return max([len(word) for word in words])\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n# Use a loop to search through the string list\nfor index in range(len(search_list)):\n    if search_list[index].find(search_string) == 0:\n        print(\"The substring is found at index: \",index)\n        return True\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list, substring):\n    \"\"\"\n    Return True if substring is found in string_list, else False\n    :param string_list: A list of strings\n    :param substring: A string\n    :return: True or False\n    \"\"\"\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n\n\n# +\n# %%run_pytest[clean]\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(strings, substrings):\n    for string in strings:\n        if substrings in string:\n            return True\n    return False", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_string,substring):\n    # your code here\n    if substring in list_string:\n        return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(a_list, substring):\n    \"\"\"\n    Check if a substring is present in a given list of string values.\n    \"\"\"\n    return substring in a_list\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list, substring):\n    return substring in string_list\n\ndef find_substring2(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n\ndef find_substring3(string_list, substring):\n    return substring in ''.join(string_list)\n\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_str, sub_str):\n    if sub_str not in list_str:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_strings,substring):\n    for i in list_of_strings:\n        if substring in i:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(arr, substring):\n    for s in arr:\n        if substring in s:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_strings, string_to_find):\n    if string_to_find in list_of_strings:\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    if num == \"1\":\n        return True\n    stack = []\n    num = num[::-1]\n    for i, num in enumerate(num):\n        if len(stack) == 0 or stack[-1] < num:\n            stack.append(num)\n        elif stack[-1] == num:\n            return False\n        else:\n            stack.pop()\n    return True\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(number: str) -> bool:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    for i in range(1, len(number) - 1):\n        if int(number[i - 1]) > int(number[i + 1]) and int(number[i - 1]) <= int(number[i]):\n            return True\n    return False", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    if len(num) == 1:\n        return True\n\n    # check the middle value\n    if num[int(len(num)/2)] != num[int(len(num)/2)+1]:\n        return False\n    else:\n        # get the middle value\n        middle_value = num[int(len(num)/2)]\n\n        # traverse the values on either side of the middle value\n        for i in range(int(len(num)/2)-1, -1, -1):\n            # if the current value is less than the middle value\n            if num[i] > middle_value:\n                # if the previous value is greater than the current value\n                if num[i-1] > num[i]:\n                    return False\n\n        # traverse the values on the other side of the middle value\n        for i in range(int(len(num)/2)+1, len(num)):\n            # if the current value is less than the middle value\n            if num[i] > middle_value:\n                # if the previous value is greater than the current value\n                if num[i+1] > num[i]:\n                    return False\n\n        return True\n\n# test", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n    return not all(number[i] == number[i+1] for i in range(len(number)-1))\n\n# Alternative solution\ndef is_undulating(number):\n    count = 0\n    for i in range(1, len(number)):\n        if number[i-1] > number[i]:\n            count += 1\n    return count == 0\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    num = num.replace(' ','')\n    return num == num[::-1] or num == num[::-2]\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    if (num == \"\"):\n        return False\n    numbers = [int(digit) for digit in num]\n    counter = 0\n    count = 1\n    while counter < (len(numbers) - 1):\n        if numbers[counter] > numbers[counter + 1]:\n            if (count % 2 == 0):\n                return False\n            else:\n                count += 1\n        counter += 1\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\nfrom typing import List, Optional\n\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(number):\n    if len(number) < 2:\n        return False\n    count = 1\n    for i in range(len(number) - 1):\n        if number[i] == number[i+1]:\n            count += 1\n        else:\n            count = 1\n        if count > 2:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n    number_list = list(number)\n    for i in range(0, len(number_list)-1):\n        if number_list[i] == number_list[i+1]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(number):\n    # get the length of the number\n    length = len(number)\n\n    # initialize the variable to track the previous number\n    previous = number[0]\n\n    # go through each number\n    for i in range(1, length):\n        # check if the number at the current index is equal to the previous index\n        if number[i] == previous:\n            # return False if the number is not changing\n            return False\n\n        # update the previous number to the current number\n        previous = number[i]\n\n    # return True if all the numbers change\n    return True\n\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    result = a\n    for x in range(b-1):\n        result *= a\n    return result\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n\tif b == 0:\n\t\treturn 1\n\telse:\n\t\treturn a*power(a,b-1)\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        b //= 2\n        a *= a\n    return result\n\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    if b == 1:\n        return a\n    elif b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n  if a == 0:\n    return 0\n  elif b == 0:\n    return 1\n  else:\n    return a * power(a,b-1)\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    if (a == 0) or (b == 0):\n        return 0\n    elif b == 1:\n        return a\n    elif b % 2 == 1:\n        return a * power(a,b-1)\n    else:\n        return power(a,b//2)**2\n", "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a*power(a, b-1)\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    return min(enumerate(tuples), key=itemgetter(1))[0]\n\ndef test():\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n# Write a program to write a function to calculate the number of elements that are less than a given number in a given list.\n# Example: num_smaller([1, 4, 3, 8], 5) should return 2.", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    tuples = sorted(tuples, key=lambda x: x[1])\n    return tuples[0][0]\n\n# Test the function", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    return tuples[0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n# +\ndef index_minimum(tuples):\n    # Write your code here\n    min_index = 0\n    min_value = tuples[0][1]\n    for i in range(1, len(tuples)):\n        if tuples[i][1] < min_value:\n            min_index = i\n            min_value = tuples[i][1]\n    return tuples[min_index][0]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\nfrom typing import List\n\ndef index_minimum(tuples: List[tuple]) -> str:\n    \"\"\"Find index minimum value record from a list of tuples.\n\n    Returns:\n        str: index minimum value record\n    \"\"\"\n    minimum = min(tuples, key=lambda x: x[1])[0]\n    return minimum\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    l = []\n    for i in tuples:\n        l.append(i[1])\n    index = l.index(min(l))\n    for i in tuples:\n        if i[1] == min(l):\n            print(i[0])\n            break\n\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    x = min(tuples, key=lambda x:x[1])\n    return x[0]", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    return tuples[tuples.index(min(tuples))]\n", "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tup_list):\n    min_index = 0\n    min_value = tup_list[0][1]\n    \n    for index, value in enumerate(tup_list):\n        if value[1] < min_value:\n            min_value = value[1]\n            min_index = index\n            \n    return tup_list[min_index][0]\n    "], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lists):\n    if not lists:\n        return 0\n    lst_len = [len(i) for i in lists]\n    mini = min(lst_len)\n    for i in lists:\n        if len(i) == mini:\n            return len(i)\n    return mini\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(list_):\n    if len(list_) == 0:\n        return 0\n    \n    min_length = len(list_[0])\n    for length in list_:\n        if len(length) < min_length:\n            min_length = len(length)\n            \n    return min_length\n\ndef Find_Min_Length_Sol(list_):\n    if len(list_) == 0:\n        return 0\n    \n    min_length = len(list_[0])\n    for length in list_:\n        min_length = min(len(length), min_length)\n            \n    return min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(arr):\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return len(arr[0])\n    else:\n        min = len(arr[0])\n        for i in range(1,len(arr)):\n            if len(arr[i]) < min:\n                min = len(arr[i])\n    return min\n\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(list_of_list):\n    #Write your code here\n    return 0\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(l):\n    min_length = len(l[0])\n    for i in range(1,len(l)):\n        if len(l[i]) < min_length:\n            min_length = len(l[i])\n    return min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(arr):\n    pass", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(L):\n    if not L or not L[0]:\n        return 0\n    min_len = 0\n    for item in L:\n        if len(item) > min_len:\n            min_len = len(item)\n    return min_len\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(sublist):\n    \"\"\"\n    :param sublist: sublist of a list\n    :return:\n    \"\"\"\n    min = 100\n    for i in range(len(sublist)):\n        for j in range(i + 1, len(sublist)):\n            if sublist[i] != sublist[j] and min > len(sublist[i]) + len(sublist[j]):\n                min = len(sublist[i]) + len(sublist[j])\n    return min\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(arr):\n\tmin_length = float('inf')\n\tfor i in range(len(arr)):\n\t\tif len(arr[i]) < min_length:\n\t\t\tmin_length = len(arr[i])\n\treturn min_length\n", "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n# Complete the findMin function below.\ndef findMin(arr):\n    arr.sort()\n    if len(arr) == 1:\n        return 1\n    elif len(arr) == 2:\n        return min(len(arr[0]), len(arr[1]))\n    else:\n        return min(len(arr[0]), findMin(arr[1:]))\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n%i==0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n\n# Test here", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    # Your code here\n    result = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(num):\n    n = 0\n    for i in range(1,num + 1):\n        if num % i == 0:\n            n += 1\n    return n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(num):\n    #Initialize variable to hold the count\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 1\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    i = 1\n    total_divisor = 0\n    while i < n:\n        if n%i == 0:\n            total_divisor += 1\n            total_divisor += i\n        i += 1\n    return total_divisor\n\n", "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    return 0\n\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(a):\n    result = {}\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            if a[i][j] in result:\n                result[a[i][j]] += 1\n            else:\n                result[a[i][j]] = 1\n    return result\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import Counter\n\ndef frequency_lists(list_of_lists):\n    freq = dict(Counter(map(tuple, list_of_lists)))\n    return freq\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lst):\n    #create a dictionary and iterate through the lists\n    dict = {}\n    for item in lst:\n        for thing in item:\n            #if the thing is in the dictionary, add 1 to its value\n            if thing in dict:\n                dict[thing] += 1\n            else:\n                dict[thing] = 1\n    return dict\n#test the function", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    d = {}\n    for x in lists:\n        for e in x:\n            d[e] = d.get(e, 0) + 1\n    return d\n\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    freq = {}\n    for items in lists:\n        for item in items:\n            freq[item] = freq.get(item, 0) + 1\n    return freq\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    result = {}\n    for li in lists:\n        for num in li:\n            if num in result:\n                result[num] = result[num]+1\n            else:\n                result[num] = 1\n    return result\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lst):\n    freq_dict = {}\n    for i in lst:\n        for j in i:\n            freq_dict.setdefault(j, 0)\n            freq_dict[j] = freq_dict[j] + 1\n    return freq_dict\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    d = {}\n    for i in lists:\n        for j in i:\n            if j in d.keys():\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    frequencies = {}\n    for list in lists:\n        for item in list:\n            if item in frequencies.keys():\n                frequencies[item] += 1\n            else:\n                frequencies[item] = 1\n    return frequencies\n", "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import Counter\n\ndef frequency_lists(lists):\n    '''\n    Return a dictionary with the frequency of each unique element\n    from the input list of lists.\n    '''\n    counts = Counter(item for sublist in lists for item in sublist)\n    return counts"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(num_list):\n    mul = 1\n    for i in num_list:\n        mul *= i\n    return mul / len(num_list)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(num_list):\n    mult_num = 1\n    for num in num_list:\n        mult_num *= num\n\n    length = len(num_list)\n\n    mult_num /= length\n\n    return mult_num\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\n# method 1:\ndef multiply_num(list_input):\n    product = 1\n    for num in list_input:\n        product *= num\n    return product / len(list_input)\n\n# method 2:\ndef multiply_num(list_input):\n    product = 1\n    for num in list_input:\n        product *= num\n    return product / sum(list_input)\n\n# method 3:\ndef multiply_num(list_input):\n    product = 1\n    for num in list_input:\n        product *= num\n    return product / sum(list_input)", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\nimport numpy as np\n\ndef multiply_num(lst):\n    #write your code here\n    #lst = [int(i) for i in input().split()]\n    return np.prod(lst)/len(lst)\n    \n#assert multiply_num((8, 2, 3, -1, 7))==-67.2\n\n\n# +\n#Question 3\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(lst):\n    total = 1\n    for num in lst:\n        total = total * num\n\n    return total / len(lst)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(num):\n    x = 1\n    for i in num:\n        x = x * i\n    y = len(num)\n    return x / y\n\n\n# \"\"\"\n# Write a function to check whether the number is divisible by 7 or not.\n# \"\"\"\n# def divisible_7(num):\n#     if num % 7 == 0:\n#         return True\n#     else:\n#         return False\n\n# \"\"\"\n# Write a function to find the sum of all digits in a number.\n# \"\"\"\n# def sum_all_digits(num):\n#     y = 0\n#     while num > 0:\n#         y = y + num % 10\n#         num = num // 10\n#     return y\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\nfrom typing import List\n\n\ndef multiply_num(nums: List[int]) -> float:\n    return float(sum(nums))/len(nums)\n\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(lst):\n    return float(reduce(lambda x, y: x * y, lst)) / len(lst)\n\n# A function to multiply all the numbers in a list\ndef multiply_num_old(lst):\n    result = 1\n    for i in lst:\n        result *= i\n    return result\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(l):\n    return (l[0]*l[1]*l[2]*l[3]*l[4])/len(l)\n", "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    product /= len(arr)\n    return product\n\ndef multiply_num(arr):\n    return sum(arr) / len(arr)\n\ndef multiply_num(arr):\n    s = 0\n    for i in range(0,len(arr)):\n        s += arr[i]\n    return s / len(arr)"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    s = \"\"\n    while n > 0:\n        s = str(n % 2) + s\n        n //= 2\n    return s\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    # Check for valid input\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return '0'\n    \n    res = ''\n    while n > 0:\n        res = str(n % 2) + res\n        n //= 2\n    return res\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(number):\n    if number == 0:\n        return \"0\"\n\n    bin_string = \"\"\n\n    while number:\n        remainder = number % 2\n        bin_string = str(remainder) + bin_string\n        number = number // 2\n\n    return bin_string\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal_num):\n    binary_num = \"\"\n    while decimal_num > 0:\n        remainder = decimal_num % 2\n        decimal_num = decimal_num // 2\n        binary_num = str(remainder) + binary_num\n    return binary_num\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(number):\n    if number < 0:\n        number = abs(number)\n    \n    num_of_digits = len(str(number))\n    binary = ''\n\n    for digit in range(num_of_digits):\n        binary = str(number % 2) + binary\n        number = int(number / 2)\n\n    return binary\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\nfrom itertools import count\n\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(number: int) -> str:\n    # Write your solution here\n    pass\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(number):\n    return bin(number)[2:]\n\n# test", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n", "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal):\n    bin_num = ''\n    while decimal:\n        bin_num = str(decimal % 2) + bin_num\n        decimal = decimal // 2\n    return bin_num\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    if len(str(n)) == 1:\n        return int(str(n) + str(n))\n    else:\n        return int(str(n) + str(n)[::-1])\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    if n < 10: return n\n    x = 10\n    while x <= n:\n        if str(x)[::-1] == str(x):\n            return x + 1\n        x += 1\n    return x", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    num = str(num)\n    for i in range(len(num)):\n        for j in range(len(num)):\n            palindrome = num[:i] + num[i:j+1][::-1] + num[j+1:]\n            if palindrome > num:\n                return palindrome\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    palindrome = \"\"\n    for i in range(num):\n        if num > 9:\n            break\n        if num == 9:\n            break\n        palindrome += str(num)\n        num += 1\n        palindrome += str(num)\n    if len(palindrome) > 1:\n        if palindrome[0] == palindrome[-1]:\n            return int(palindrome[0]) + 1\n    else:\n        return palindrome[0] + 1\n    return num\n\ndef next_smallest_palindrome2(num):\n    \"\"\"\n    This solution is more concise, but the tradeoff is that it is not\n    optimized to handle large numbers.\n    \"\"\"\n    for i in range(num):\n        if num == 9:\n            break\n        for j in range(num):\n            if num > 9:\n                break\n            if num == 9:\n                break\n            if i + j == num:\n                return i * 10 + j + 1\n    return 100\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(x):\n    y = x * 10\n    result = 0\n    i = 1\n    while i <= x:\n        result = result + i\n        i = i * 10\n    while y > result:\n        y = y // 10\n        result = result * 10\n    return result", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    if n < 10:\n        return 100\n\n    number = str(n)\n    reversed_number = number[::-1]\n    if number == reversed_number:\n        number = int(reversed_number) + 2\n    else:\n        temp_number = int(reversed_number)\n        while True:\n            if int(str(temp_number)[::-1]) < number:\n                temp_number = temp_number + 2\n            else:\n                break\n        number = temp_number\n\n    return number\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(number):\n    # Your code here\n    is_palindrome = is_palindrome(number)\n    if is_palindrome == True:\n        result = number\n        while (is_palindrome == True):\n            result += 1\n            is_palindrome = is_palindrome(result)\n    else:\n        result = number\n        while (is_palindrome == False):\n            result -= 1\n            is_palindrome = is_palindrome(result)\n\n    return result\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n# Solution 1:\ndef next_smallest_palindrome(number):\n    number = str(number)\n    # print(number)\n    length = len(number)\n    for i in range(1, length):\n        # print(number[i])\n        if int(number[0:i]) > int(number[i:]):\n            temp = int(number[0:i])\n            # print(temp)\n            return temp + int(number[i:])\n    else:\n        return int(number[0:i]) + int(number[i:])\n\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nimport pytest\n\ndef next_smallest_palindrome(n):\n    if n <= 9:\n        return n\n    left = int(str(n)[::-1])\n    right = int(str(n**2)[::-1])\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid > 100:\n            left += 1\n            continue\n        mid = str(mid)\n        mid_rev = mid[::-1]\n        if mid == mid_rev:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n\ndef test_next_smallest_palindrome():\n    n = 101\n    assert next_smallest_palindrome(n) == n\n    n = 100\n    assert next_smallest_palindrome(n) == 101\n", "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\nfrom euler_python.utils import eulerlib\n\n\ndef next_smallest_palindrome(n):\n    # Write your code here.\n    while True:\n        if eulerlib.is_palindrome(n):\n            if eulerlib.is_palindrome(n + 1):\n                return n + 1\n        n += 1\n\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, elem):\n    for i, v in enumerate(arr):\n        if v == elem:\n            return i\n    return -1\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, n, k):\n    count = 0\n    for i in arr:\n        if count == k:\n            return i\n        count += 1\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(nums, k, n):\n    start = 0\n    end = len(nums) - 1\n    i = start\n    count = 1\n    while start <= end:\n        mid = int((start + end) / 2)\n        if count == k:\n            return nums[mid]\n        elif count < k:\n            start = mid + 1\n            count += 1\n        else:\n            end = mid - 1\n            count += 1\n    return nums[-1]\n\ndef kth_element_v2(nums, k, n):\n    start = 0\n    end = len(nums) - 1\n    i = start\n    count = 1\n    while start <= end:\n        mid = int((start + end) / 2)\n        if count == k:\n            return nums[mid]\n        elif count < k:\n            start = mid + 1\n            count += 1\n        else:\n            end = mid - 1\n            count += 1\n    return nums[-1]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(array, k, start_index):\n    if start_index > len(array) - 1:\n        return -1\n    if start_index == k:\n        return array[start_index]\n    else:\n        return kth_element(array, k, start_index + 1)\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nfrom bisect import bisect_left\n\n\ndef kth_element(arr, k, x):\n    \"\"\"\n    Find the kth element in the given array.\n    :param arr: The given array.\n    :param k: The given index.\n    :param x: The given element.\n    :return: The kth element.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    while end >= start:\n        mid = start + (end - start) // 2\n        if arr[mid] == x:\n            return arr[mid]\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if k == 0:\n        return arr[start]\n    else:\n        if x in arr:\n            return arr[start]\n        else:\n            return arr[bisect_left(arr, x, start, end)]\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(array, k, n):\n    import bisect\n\n    return array[k-1]\n\ndef kth_element(array, k, n):\n    return array[bisect.bisect_left(array, k-1)]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, position):\n    if position == 1:\n        return arr[position]\n    elif position == k:\n        return arr[position]\n    elif position < k:\n        if k % 2 == 0:\n            return kth_element(arr, k // 2, position)\n        else:\n            return kth_element(arr, (k - 1) // 2, position)\n    else:\n        if k % 2 == 0:\n            return kth_element(arr, k // 2 + 1, position)\n        else:\n            return kth_element(arr, (k + 1) // 2, position)\n\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, n):\n    L = 0\n    R = n - 1\n    while L <= R:\n        if R == L:\n            return arr[L]\n        M = L + (R - L) // 2\n        if M == k - 1:\n            return arr[M]\n        if M < k:\n            L = M + 1\n        else:\n            R = M - 1", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    arr.sort()\n    print(arr)\n    return arr[k]\n", "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(lst, k, start=0):\n    length = len(lst)\n    if length < k:\n        return lst[start]\n    elif length == k:\n        return lst[start]\n    else:\n        left = start\n        right = length-1\n        while left <= right:\n            mid = left + (right-left)//2\n            if mid == k-1:\n                return lst[mid]\n            elif mid > k-1:\n                right = mid-1\n            else:\n                left = mid + 1\n\n"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    return ''.join(map(lambda x:x.capitalize(),s.split('_')))", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(snake_str):\n    return ''.join(word.capitalize() for word in snake_str.split('_'))\n\ndef main():\n    test_case = [\n        'python_program',\n        'python_program'\n    ]\n    for s in test_case:\n        print(s, snake_to_camel(s))\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(name):\n    camel = []\n    for i in range(len(name)):\n        if name[i] == \"_\":\n            camel.append(name[i + 1].upper())\n        else:\n            camel.append(name[i].upper())\n    return \"\".join(camel)\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake):\n    return ''.join([word.capitalize() for word in snake.split('_')])\n\ndef snake_to_camel_recursive(snake):\n    if len(snake) == 1:\n        return snake.capitalize()\n    else:\n        return snake_to_camel_recursive(snake[1:]) + snake[0].capitalize()\n\n\n# -\n\nsnake_to_camel('python_program')\n\nsnake_to_camel_recursive('python_program')\n\n\n# **Exercise 1.8: Write a function to convert camel case string to snake case string. **\n\ndef camel_to_snake(camel):\n    return '_'.join([word.lower() for word in camel.split(' ')])\n\n\ncamel_to_snake('HelloWorld')\n\ncamel_to_snake('HelloWorldWorld')\n\n\n# ## Chapter 2: BFS\n\n# **Exercise 2.1: Implement the breadth-first-search algorithm. **\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    # Your code here\n    return ''.join([i.capitalize() for i in s.split('_')])\n\ndef test_snake_to_camel():\n    assert snake_to_camel('python_program')=='PythonProgram'\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(input_str):\n    return ''.join([i.title() for i in input_str.split('_')])\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\nfrom string import ascii_uppercase, ascii_lowercase\n\n\ndef snake_to_camel(s):\n    s = s.split('_')\n    return ''.join([i.title() for i in s])\n\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    res = snake_str[0].upper() + snake_str[1:]\n    return ''.join([x.capitalize() for x in res.split('_')])\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(snake_str):\n    if snake_str.find(\"_\") == -1:\n        return snake_str\n    res = []\n    for c in snake_str.split(\"_\"):\n        res.append(c.capitalize())\n    return \"\".join(res)\n", "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    return ''.join(w.capitalize() or '_' for w in s.split('_'))\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    if n < 1 or m < 1:\n        return -1\n    if n == 1 or m == 1:\n        return 1\n\n    if n == m:\n        return 1\n\n    if n == 2:\n        return 3\n\n    result = 1\n    for i in range(2, m + 1):\n        result += eulerian_num(n - 1, i)\n    return result\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    result = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            result += binomial(n, i) * binomial(m, j)\n    return result\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom functools import reduce\n\ndef eulerian_num(n, m):\n    if n < m:\n        return 0\n    if n == m:\n        return 1\n    return reduce(lambda x, y: x * y, [n-i for i in range(1, m)])\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    if n == 0 or m == 0:\n        return 0\n    if n == 1:\n        return 1\n    res = 1\n    for i in range(1, n+1):\n        res += eulerian_num(n-1, m+i-1)\n    return res\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    elif n == 1 or m == 1:\n        return 2\n    else:\n        return 2 * (eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m) + eulerian_num(n, m - 1))\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom itertools import product\n\n\ndef eulerian_num(n: int, m: int):\n    \"\"\"\n    Time: O(n*m)\n    Space: O(n*m)\n    \"\"\"\n    assert n > 0 and m > 0\n    possible_routes = 0\n    for k in range(1, n + 1):\n        possible_routes += len(list(product(range(1, n + 1), repeat=k)))\n    return possible_routes // (m * n)\n\n\ndef eulerian_num_2(n: int, m: int):\n    \"\"\"\n    Time: O(n*m)\n    Space: O(n*m)\n    \"\"\"\n    assert n > 0 and m > 0\n    return 1 if n == 1 else eulerian_num(n - 1, m) * m + eulerian_num(n, m - 1)\n\n\ndef main():\n    print(eulerian_num(3, 1))\n    print(eulerian_num_2(3, 1))\n\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    num = 1\n    for i in range(2, m + 1):\n        num *= i\n    for i in range(m + 1, n + 1):\n        num *= i - 1\n    return num\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    total = 0\n    for i in range(n+1):\n        for j in range(m+1):\n            total += 1\n    return total\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    return (n - 1) * m + 1\n", "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if (n, m) == (1, 1):\n        return 1\n    return 2**(n-1) * (m-1) + eulerian_num(n-1, m-1)\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(sub_lists):\n    sorted_sublists = []\n    for sub_list in sub_lists:\n        sorted_sublist = sorted(sub_list, key=lambda word: word.lower())\n        sorted_sublists.append(sorted_sublist)\n    return sorted_sublists", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lists):\n    for i in range(len(lists)):\n        lists[i].sort(key = lambda x:x.lower())\n    return lists\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(my_list):\n    return sorted(my_list, key = lambda x: sorted(x))\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(L):\n    L = [[str(i) for i in j] for j in L]\n    L = sorted(L, key=lambda sublist: sublist)\n    return L\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(items):\n    sorted_list = []\n    for sublist in items:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in lst]\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(x):\n    x = sorted(x, key=lambda y:y[::-1])\n    return x\n\n\ndef test_sort_sublists():\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\n", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(list):\n    \"\"\"\n    :param list: A given list of lists\n    :return: The sorted sublists of strings in a given list of lists using lambda function.\n    \"\"\"\n    for index, value in enumerate(list):\n        list[index] = sorted(value, key=lambda x: x.lower())\n    return list", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(array):\n    array.sort(key = lambda sublist : sublist)\n    return array", "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(arr):\n    return [sorted(sublist,key=lambda x:x) for sublist in arr]"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(l):\n    return l.count(True)\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count_true(l):\n    return len(l) - l.count(False)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(a):\n    c = 0\n    for i in a:\n        if i == True:\n            c = c + 1\n    return c", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n\n#test code", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\nfrom typing import List\n\n\ndef count(my_list: List[bool]) -> int:\n    \"\"\"Counts the number of True elements in the list.\n\n    Args:\n        my_list (List[bool]): A list of True or False booleans.\n\n    Returns:\n        int: The number of True booleans.\n    \"\"\"\n    return len([element for element in my_list if element is True])\n\n\n# assert count([True,False,True]) == 2\n# assert count([True, True, False, False, False]) == 2\n# assert count([False, True, False, False, False]) == 1\n# assert count([]) == 0", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    return sum(lst)\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(boolean_list):\n    count = 0\n    for element in boolean_list:\n        if element:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(list_):\n    count = 0\n    for i in list_:\n        if i == True:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count = count + 1\n    return count\n\n#Write a python function that takes a list and return a new list with elements multiplied by 2", "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    # write your code here\n    c = 0\n    for i in lst:\n        if i == True:\n            c = c + 1\n    return c\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list_1, list_2):\n    new_list = list_1 + list_2\n    return new_list\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l1, l2):\n    return l1+l2\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\nimport pytest\nfrom typing import List, Tuple\n\n\ndef add_lists(first_list: List[int], second_list: List[int]) -> List[int]:\n    result: List[int] = []\n    for _ in range(max(len(first_list), len(second_list))):\n        if len(first_list) == 0:\n            result.append(second_list[0])\n        elif len(second_list) == 0:\n            result.append(first_list[0])\n        elif first_list[0] > second_list[0]:\n            result.append(second_list[0])\n            second_list = second_list[1:]\n        else:\n            result.append(first_list[0])\n            first_list = first_list[1:]\n    return result\n\n\ndef test_1():\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\n\ndef test_2():\n    assert add_lists([5, 6, 7], (5, 6)) == (5, 6, 5, 6, 7)\n\n\ndef test_3():\n    assert add_lists([5, 6, 7], (7, 8, 9)) == (7, 8, 9, 5, 6, 7)\n\n\ndef test_4():\n    assert add_lists([5, 6, 7], [9, 10]) == (9, 10, 5, 6, 7)\n\n\ndef test_5():\n    assert add_lists([5, 6, 7], [5, 6]) == (5, 6, 5, 6, 7)\n\n\ndef test_6():\n    assert add_lists([5, 6, 7], [7, 8, 9]) == (7, 8, 9, 5, 6, 7)\n\n\ndef test", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    return list1 + list2\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(l1, l2):\n    new_list = l1 + l2\n    return new_list\n\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(a, b):\n    c = list(a) + list(b)\n    return tuple(c)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    return tuple(list1 + list2)\n", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\nimport itertools\n\ndef add_lists(lis, tup):\n    return tup + tuple(lis)\n\ndef add_lists_v2(lis, tup):\n    tup = itertools.chain(tup, lis)\n    return tuple(tup)\n\ndef add_lists_v3(lis, tup):\n    tup = tup + tuple(lis)\n    return tup\n\ndef add_lists_v4(lis, tup):\n    tup = list(tup)\n    tup.extend(lis)\n    return tuple(tup)", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, list2):\n    return list1 + list2\n\n# Add your test case here", "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\nimport itertools\n\n\ndef add_lists(first_list, *second_lists):\n    return list(itertools.chain(first_list, second_lists))"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(lower_bound,upper_bound):\n    return (upper_bound-lower_bound+1)\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(a,b):\n    \"\"\"a,b are the range in which you want to count the Hexadecimal Numbers\"\"\"\n    count=0\n    while a<=b:\n        if a<10:\n            count=count+1\n        elif a<16:\n            count=count+2\n        else:\n            count=count+1\n        a=a+1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for number in range(start,end):\n        if(number < 16):\n            count += 1\n        elif(number < 36):\n            count += 2\n        elif(number < 66):\n            count += 3\n        elif(number < 106):\n            count += 4\n        elif(number < 166):\n            count += 5\n        elif(number < 226):\n            count += 6\n        elif(number < 286):\n            count += 7\n        elif(number < 346):\n            count += 8\n        elif(number < 406):\n            count += 9\n        elif(number < 466):\n            count += 10\n        elif(number < 526):\n            count += 11\n        elif(number < 586):\n            count += 12\n        elif(number < 646):\n            count += 13\n        elif(number < 706):\n            count += 14\n        elif(number < 766):\n            count += 15\n        elif(number < 826):\n            count += 16\n        elif(number < 886):\n            count += 17\n        elif(number < 946):\n            count += 18\n        elif(number < 1006):\n            count += 19\n        elif(number < 1066):\n            count += 20\n        elif(number < 1126):\n            count += 21\n        elif(number < 1186):\n            count += 22\n        elif(number < 1246):\n            count += 23\n        elif(number < 1306):\n            count += 24\n        elif(number < 1366):\n            count += 25\n        elif(number < 1426):\n            count += 26\n        elif(number < 1486):\n            count += 27\n        elif(number < 1546):\n            count += 28\n        elif(number < ", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    total = 0\n    for i in range(start, end+1):\n        if str(i).startswith(\"0x\"):\n            total = total + 1\n    return total\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n\tcount = 0\n\twhile(start<=end):\n\t\tif(start<10):\n\t\t\tstart = '0'+str(start)\n\t\telif(start<16):\n\t\t\tstart = str(start)\n\t\tif(end<10):\n\t\t\tend = '0'+str(end)\n\t\telif(end<16):\n\t\t\tend = str(end)\n\t\tif(start==end):\n\t\t\tcount+=1\n\t\telse:\n\t\t\tbreak\n\t\tstart+=1\n\treturn count", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(low,high):\n    count = 0\n    while low <= high:\n        temp = hex(low)[2:].zfill(4)\n        if len(temp) == 4:\n            count += 1\n        low += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i <= 9:\n            i = \"0\" + str(i)\n        elif i <= 15:\n            i = str(i)\n        count += 1\n    return count\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n    hex_list = []\n    for i in range(start,end):\n        hex_list.append(hex(i))\n    return len(set(hex_list))\n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start,end):\n    count = 0\n    for i in range(start,end+1):\n        hexa = hex(i)\n        count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\nimport pytest\nfrom solution import count_Hexadecimal\n\ndef test_count_Hexadecimal():\n    assert count_Hexadecimal(10,15) == 6\n    assert count_Hexadecimal(20,25) == 5\n\ndef test_count_Hexadecimal_neg():\n    with pytest.raises(ValueError):\n        count_Hexadecimal(0,0)\n\ndef test_count_Hexadecimal_overflow():\n    with pytest.raises(ValueError):\n        count_Hexadecimal(100000,10000000)"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(input_list_1, input_list_2, input_list_3):\n\n    from queue import PriorityQueue\n\n    q = PriorityQueue()\n\n    for item in input_list_1:\n        q.put((item, 1))\n\n    for item in input_list_2:\n        q.put((item, 2))\n\n    for item in input_list_3:\n        q.put((item, 3))\n\n    out_list = []\n\n    while not q.empty():\n        item = q.get()\n        out_list.append(item[0])\n\n    return out_list\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom heapq import heappush, heappop", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n# Method 1\nfrom queue import PriorityQueue\n\ndef merge_sorted_list(lists):\n    res = PriorityQueue()\n    for l in lists:\n        for i in l:\n            res.put(i)\n    return [res.get() for i in range(len(lists))]\n\n# Method 2\nfrom collections import defaultdict\ndef merge_sorted_list(lists):\n    res = []\n    for l in lists:\n        res.extend(l)\n    res.sort()\n    return res\n\n# Method 3\nfrom collections import Counter\ndef merge_sorted_list(lists):\n    res = []\n    count = Counter(lists[0])\n    for l in lists[1:]:\n        res.extend(l)\n        for i in l:\n            count[i] += 1\n            if count[i] == 1:\n                res.append(i)\n    return res\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nimport heapq\n\n\ndef merge_sorted_list(lists):\n    \"\"\"\n    :param lists: A list of sorted lists\n    :return: A sorted iterator of the list of lists\n    \"\"\"\n    q = []\n    for l in lists:\n        for i in l:\n            heapq.heappush(q, i)\n    return q\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2, list3):\n\tmerged_list = []\n\tlist_queue = []\n\tfor item in list1:\n\t\tlist_queue.append(item)\n\tfor item in list2:\n\t\tlist_queue.append(item)\n\tfor item in list3:\n\t\tlist_queue.append(item)\n\twhile list_queue:\n\t\tmin_heap = []\n\t\twhile list_queue:\n\t\t\titem = list_queue.pop()\n\t\t\tif not min_heap:\n\t\t\t\tmin_heap.append(item)\n\t\t\telse:\n\t\t\t\tif item < min_heap[0]:\n\t\t\t\t\tmin_heap.insert(0, item)\n\t\t\t\telse:\n\t\t\t\t\tmin_heap.insert(0, min_heap[0])\n\t\t\t\t\tmin_heap.pop()\n\t\t\t\t\tmin_heap.insert(0, item)\n\t\tmerged_list.append(min_heap[0])\n\treturn merged_list\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(lists):\n    if not lists:\n        return []\n    queue = []\n    for lst in lists:\n        for value in lst:\n            heappush(queue, value)\n    merged_list = []\n    while queue:\n        heappop(queue)\n        merged_list.append(queue[0])\n    return merged_list", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom heapq import merge\ndef merge_sorted_list(lists):\n    return list(merge(*lists))\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom collections import defaultdict\nimport math", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nimport heapq\ndef merge_sorted_list(lists):\n    '''\n    Args:\n        lists (list): the input list of sorted list\n    Returns:\n        A single sorted iterator of all the input elements\n    '''\n    for list_ in lists:\n        heapq.heappush(list_, list_.pop())\n    return_list = []\n    while len(lists) != 0:\n        return_list.append(heapq.heappop(lists[0]))\n        for list_ in lists:\n            if len(list_) != 0:\n                heapq.heappush(list_, list_.pop())\n    return return_list\n\n", "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n# A function to merge two sorted linked lists\ndef merge(list1, list2):\n    head = None\n    if list1 is None:\n        return list2\n    elif list2 is None:\n        return list1\n    elif list1.val < list2.val:\n        head = list1\n        head.next = merge(list1.next, list2)\n    else:\n        head = list2\n        head.next = merge(list1, list2.next)\n    return head\n\n# A function to merge k sorted linked lists\ndef merge_k_sorted_lists(lists):\n    # Your code here\n    # 1. sort the lists based on their values\n    lists.sort(key=lambda x:x.val)\n    # 2. merge the lists to form a single sorted linked list\n    head = None\n    for l in lists:\n        head = merge(head, l)\n    return head"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s, n):\n    '''\n    Input: s - string, n - number of rotations\n    Odd equivlent of string = count of rotations + 1\n    '''\n    count = 0\n    while True:\n        if s == s[n:]:\n            return count + 1\n        s = s[1:]+s[0]\n        count += 1\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s,n):\n    return s[n:]+s[:n]\n\n\ndef rotate_string_n(s,n):\n    return s[n:]+s[:n]\n\ndef rotate_string(s,n):\n    if(n<=0):\n        return s\n    return s[n:]+s[:n]\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string,n):\n    count = 0\n    for i in range(n):\n        if string[i] == string[n-1-i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(string,num):\n    count = 0\n    for i in range(0,num):\n        start = 0\n        for j in range(start,len(string)):\n            start = j+1\n            if(string[j] == \"0\" and string[start] == \"1\"):\n                break\n        if(start == len(string)):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(string, length):\n    return sum(string[i:i+length] == string[i+length:] for i in range(len(string)-length+1))\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binString, num):\n    s = binString\n    while s:\n        s = s[1:]\n        num -= 1\n        if s:\n            if int(s[-1]) == 1:\n                num += 1\n        s = s[::-1]\n    return num\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(num,length):\n    count = 0\n    for i in range(length):\n        if num[i] != num[(length-1)-i]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(str, n):\n    count=0\n    for i in range(n):\n        count+=str.count('1')\n        str=str[::-1]\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary, n):\n    count = 0\n    length = len(binary)\n    for i in range(length):\n        if binary[i] == '1':\n            if i + 1 < length:\n                if binary[i+1] == '1':\n                    count += 1\n                elif binary[i+1] == '0':\n                    if i + 2 < length:\n                        if binary[i+2] == '1':\n                            count += 1\n                else:\n                    print('Invalid Input')\n                    return -1\n            else:\n                print('Invalid Input')\n                return -1\n\n    return count\n", "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str1,n):\n    count = 0\n    for i in range(n):\n        if str1 == str1[i:]:\n            count += 1\n    return count\n    "], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(list_of_ranges, start, end):\n    # This will be the final result.\n    result = []\n    # A temporary list that will store the missing ranges.\n    missing_ranges = []\n    for range_to_check in list_of_ranges:\n        if start > range_to_check[1]:\n            missing_ranges.append((range_to_check[0], start))\n        if end < range_to_check[0]:\n            missing_ranges.append((end, range_to_check[1]))\n    for range_to_add in missing_ranges:\n        result.append(range_to_add)\n    return result\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(ranges, start_range, end_range):\n    missing_ranges = []\n    for i in range(start_range, end_range + 1):\n        if i not in ranges:\n            missing_ranges.append((i, i))\n    return missing_ranges", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n\tmissing = []\n\tfor rng in ranges:\n\t\ts,e = rng\n\t\tif s < start or e > end:\n\t\t\tmissing.append((s,e))\n\treturn missing\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(in_list, start, end):\n  out_list = []\n  for i in range(start, end):\n    flag = True\n    for pair in in_list:\n      if pair[0] <= i <= pair[1]:\n        flag = False\n        break\n    if flag:\n      out_list.append((i, i))\n  return out_list\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(list_of_ranges, start, end):\n    list_of_ranges.sort(key = lambda x: x[0])\n    output = []\n    i = 0\n    while i < len(list_of_ranges):\n        (current_start, current_end) = list_of_ranges[i]\n        if current_start > start:\n            output.append((start, current_start - 1))\n            output.append((current_start, current_end))\n        else:\n            i += 1\n    if i < len(list_of_ranges) and list_of_ranges[i][0] < end:\n        output.append((list_of_ranges[i][0], end))\n    return output\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n    i = 0\n    for j in range(start, end):\n        if lst[i][0] > j:\n            yield (j, lst[i][0])\n            i += 1\n    yield (lst[i][1], end)\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n    missing = list(range(start, end))\n    missing = [missing[0], ] + list(set(missing) - set(range(start, end)))\n    missing = [missing[0], ] + [v for v in missing if v in lst]\n    missing = sorted(missing)\n    missing_idx = [i for i, x in enumerate(lst) if x[0] in missing]\n    missing_idx.sort()\n    res = []\n    for i in missing_idx:\n        res.append(lst[i])\n    return res\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(arr, start_range, end_range):\n  # assume each item in arr is a pair of two numbers\n  # each pair represents a range\n\n  # create a list to store the result\n  result = []\n\n  # iterate through the given array\n  for pair in arr:\n    # calculate the missing numbers\n    missing_range = [x for x in range(pair[0], pair[1]+1) if x not in range(start_range, end_range+1)]\n\n    # add the missing numbers to the result\n    result.extend(missing_range)\n\n  # return the result\n  return result\n\n\n# test\narr = [(6, 9), (15, 34), (48, 70)]\nstart_range = 2\nend_range = 100", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(nums, start, end):\n    res = []\n    for num in nums:\n        if num[0] >= start and num[1] <= end:\n            res.append(num)\n    return res\n\n", "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(arr, start, end):\n    ans = []\n    for i in range(start, end + 1):\n        if i not in arr:\n            ans.append([i, i])\n    return ans\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lst):\n    return list(set(lst[0]).intersection(*lst))\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(my_list):\n    my_set = set()\n    for items in my_list:\n        for item in items:\n            my_set.add(item)\n    return my_set\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    for n in nested_lists:\n        for i, e in enumerate(n):\n            for j, f in enumerate(nested_lists):\n                if f is not n and i != j and e in f:\n                    return e\n    return 'No'\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(list_of_lists):\n    common = []\n    for list_one in list_of_lists:\n        for list_two in list_of_lists:\n            if list_one != list_two and list_one in list_two:\n                common.append(list_one)\n    return common\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\nfrom itertools import chain\n\ndef common_in_nested_lists(lists):\n    for c in set(chain(*lists)):\n        if all(map(lambda x: c in x, lists)):\n            yield c\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    common_list = []\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            if lists[i] == lists[j]:\n                common_list.append(lists[i])\n    return common_list\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    common_elements = {}\n    for i in range(len(lists[0])):\n        for j in range(1, len(lists)):\n            if lists[j][i] in common_elements:\n                common_elements[lists[j][i]] += 1\n            else:\n                common_elements[lists[j][i]] = 1\n    return list(common_elements.keys())\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    return list(set(lists[0]).intersection(*lists))\n\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    first_list = nested_lists.pop(0)\n    if not nested_lists:\n        return [el for el in first_list]\n    else:\n        return set(common_in_nested_lists(nested_lists)).intersection(first_list)\n", "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(lists):\n    list_keys = []\n    for lst in lists:\n        if lst:\n            list_keys.extend(lst)\n    return list(set(list_keys))\n\ndef test_common_in_nested_lists():\n    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n    assert common_in_nested_lists([[1, 2, 3], [10, 10, 10], [100, 100]])==[10, 100]\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(r,h):\n    per = 2*pi*r + 2*pi*r*h\n    return per\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\n# Solution\n# import math\ndef perimeter(radius, height):\n    perimeter = 2 * math.pi * radius + 2 * radius * height\n    return perimeter\n\n# Tests", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    return 2 * radius * height + 2 * radius * height\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    return 2 * (r * 3.14 + r * 2 * h)\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius,height):\n    perimeter = 2 * radius * height + 2 * radius * height\n    return perimeter\n\ndef main():\n    assert perimeter(2,4) == 12\n    assert perimeter(3,5) == 16\n    assert perimeter(3,6) == 24", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\n# Write your code here:\ndef perimeter(r,h):\n    return 2 * (r * h) + 2 * (r + h)\n\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(r,h):\n    perimeter = 2 * (r*h) + (2*r) + (2*h)\n    return perimeter\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    perimeter = 2 * radius + 2 * height\n    return perimeter\n\ndef main():\n    assert perimeter(2,4) == 12\n", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\n# +\n# %%writefile perimeter.py", "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\nfrom typing import List\n\ndef perimeter(radius: int, height: int) -> int:\n    return 2 * radius * height + radius * radius + height * height\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n  for c in s:\n    if not c.isdigit():\n      return False\n  return True\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n# %%\ndef check_integer(string):\n    string = string.replace(' ', '').replace('(', '').replace(')', '')\n    string = string.replace(',', '')\n    for char in string:\n        if char not in '1234567890':\n            return False\n    return True\n\n# %%", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n#the simplest way is to use int() function\ndef check_integer(string):\n    try:\n        int(string)\n    except ValueError:\n        return False\n    else:\n        return True\n\ndef check_integer(string):\n    if not string.isdigit():\n        return False\n    else:\n        return True\n\n#there is also re.match method\nimport re\ndef check_integer(string):\n    return re.match('^[+-]?[0-9]+$', string)\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(str):\n    try:\n        int(str)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(number):\n    try:\n        int(number)\n        return True\n    except ValueError:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\nimport re\ndef check_integer(string):\n    return bool(re.search(r'\\d', string))\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(input_str):\n    if input_str.isdigit():\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(str):\n\tstr=str.strip()\n\ttry:\n\t\tint(str)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n#def check_integer(str):\n#\tstr=str.strip()\n#\treturn all([char.isdigit() for char in str])", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(str_in):\n    if str_in.isnumeric():\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n    except ValueError:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(t):\n    freq = {}\n    for t in t:\n        if t in freq:\n            freq[t] += 1\n        else:\n            freq[t] = 1\n    return freq\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuple_list):\n    count = 0\n    tup_freq = []\n    for tup in tuple_list:\n        tup_freq.append(tup + (count,))\n        count += 1\n    return tup_freq\n\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(data):\n    \"\"\"\n    @data: tuple list\n    \"\"\"\n    freq = {}\n    for d in data:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    return freq\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n    new_tuples = []\n    for tuple in tuples:\n        if tuple in new_tuples:\n            new_tuples[new_tuples.index(tuple)] += 1\n        else:\n            new_tuples.append(tuple)\n    new_tuples = sorted(new_tuples)\n    new_tuples = [f'{tuple[0]}, {tuple[1]}, {tuple[2]}, {tuple[3]}' for tuple in new_tuples]\n    return new_tuples\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n    num_tuples = len(tuples)\n    tuples_with_freq = []\n    for i in range(num_tuples):\n        tuples_with_freq.append((tuples[i], 1))\n    for i in range(num_tuples):\n        for j in range(i+1, num_tuples):\n            if tuples[i] == tuples[j]:\n                tuples_with_freq[i] = (tuples[i], tuples_with_freq[i][1] + 1)\n                break\n    tuples_with_freq.sort(key=lambda tup: tup[1])\n    return tuples_with_freq\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuple_list):\n    freq_dict = {}\n    for tuple in tuple_list:\n        if tuple not in freq_dict.keys():\n            freq_dict[tuple] = 1\n        else:\n            freq_dict[tuple] += 1\n    return freq_dict\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(data):\n    dict_data = {}\n    for i in data:\n        dict_data[i] = dict_data.get(i, 0) + 1\n    return list(map(lambda x: (x, dict_data[x]), dict_data))", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\nfrom collections import defaultdict\n\ndef assign_freq(tups):\n    freq_dict = defaultdict(int)\n    for tup in tups:\n        freq_dict[tuple(tup)] += 1\n    return str(freq_dict.items())\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n    freq = {}\n    for i in tuples:\n        freq[i] = freq.get(i, 0) + 1\n    freq = [(k, v) for k, v in freq.items()]\n    freq.sort(key=lambda x: x[0])\n    return freq\n", "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tup_list):\n    frequency_tup_list = []\n    for tup in tup_list:\n        frequency_tup = tuple(tup) + (tup_list.count(tup),)\n        frequency_tup_list.append(frequency_tup)\n    return str(frequency_tup_list)\n\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dits):\n    for d in dits:\n        if len(d)>0:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dict_list):\n    for i in range(len(dict_list)):\n        for j in dict_list[i].keys():\n            if dict_list[i][j]==0:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(lst):\n    return all(len(i.keys())==0 for i in lst)", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dict(list_of_dict):\n    for i in list_of_dict:\n        if i:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dict_list(lst):\n    for dic in lst:\n        if dic:\n            return False\n        else:\n            return True", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dits):\n    # check if length of list is 0\n    if len(dits) == 0:\n        return True\n    # check if dictionary in the list is empty\n    for dic in dits:\n        if dic:\n            return False\n    # if we get here, all dictionaries are empty\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dic):\n    if len(list_of_dic) == 0:\n        return True\n    for dic in list_of_dic:\n        if dic != {}:\n            return False\n    return True\n\n# assert empty_dit([{},{},{}])==True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dits):\n    for d in dits:\n        if d:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(lst):\n    for dic in lst:\n        for val in dic.values():\n            if val != None:\n                return False\n    return True\n\n", "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dict_lst):\n    return all([dic == {} for dic in dict_lst])\n\n# Tests"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    num = 0\n    for i in range(0, len(t)):\n        num += t[i] * (10**i)\n    return num\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(x):\n    print(x)\n    return int(\"\".join(map(str,x)))\n\ntuple_to_int((1,2,3))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return sum(tup)*10**len(tup)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tuple_input):\n    total = 0\n    for value in tuple_input:\n        total = total * 10 + value\n    return total\n\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    s = \"\"\n    for item in tup:\n        s += str(item)\n    return int(s)", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return reduce(lambda x,y: x*10+y,tup)\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return int(\"\".join(str(elem) for elem in tup))\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    sum = 0\n    for element in tup:\n        sum += element\n        print(sum)\n    return sum\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\nimport math\n\ndef tuple_to_int(tuple_):\n    if len(tuple_)==0:\n        return 0\n    else:\n        return int(tuple_to_int(tuple_[:-1])) * 10 + int(tuple_[-1])\n", "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    \"\"\"\n    Input: tuple of positive integers.\n    Output: integer.\n    \"\"\"\n    # Fill this in.\n    total = 0\n    for i in t:\n        total += i\n    return total\n\n\n# +\nt = (1, 2, 3)\ntest = tuple_to_int(t)\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(list_of_elements):\n    list_of_tuple = []\n    for i in list_of_elements:\n        a = i[0].replace(\",\", \".\")\n        b = i[1].replace(\",\", \".\")\n        list_of_tuple.append( (float(a), float(b)) )\n    return str(list_of_tuple)\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(l):\n    if not l:\n        return l\n    return [(float(l[0][0]), float(l[0][1])), list_to_float(l[1:])]\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\nimport re\n\ndef list_to_float(l):\n    l = [(float(i[0]), float(i[1])) for i in l]\n    l.sort(key=lambda x:x[0])\n    return str(l)\n\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(elements):\n    return '[(float(' + str(elements[0][0]) + '), float(' + str(elements[0][1]) + ')), (float(' + str(elements[1][0]) + '), float(' + str(elements[1][1]) + ')), (float(' + str(elements[2][0]) + '), float(' + str(elements[2][1]) + ')), (float(' + str(elements[3][0]) + '), float(' + str(elements[3][1]) + '))]'\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    return str(tuple(map(lambda x: float(x[0]), lst)))\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    return \"[(float(\" + a[0] + \"), float(\" + a[1] + \")) for a in lst]\"\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(list):\n    lis2=[]\n    for i in list:\n        if i[0] == 'float' and i[1] == 'int':\n            lis2.append((float(i[0]), float(i[1])))\n        elif i[0] == 'int' and i[1] == 'float':\n            lis2.append((float(i[1]), float(i[0])))\n        elif i[0] == 'int' and i[1] == 'int':\n            lis2.append((int(i[0]), int(i[1])))\n        else:\n            lis2.append(i)\n    return str(lis2)\n\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    lst_copy = lst[:]\n    for i in range(len(lst_copy)):\n        if type(lst_copy[i][0]) is str:\n            lst_copy[i] = (float(lst_copy[i][0]), float(lst_copy[i][1]))\n    return '[( {0[0]}, {0[1]} ), ( {1[0]}, {1[1]} ), ( {2[0]}, {2[1]} ), ( {3[0]}, {3[1]} )]'.format(*lst_copy)", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    new_lst = []\n    for i in lst:\n        new_lst.append(float(i[0]), float(i[1]))\n    return str(new_lst)\n", "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    lst = [(float(a), float(b)) for a, b in lst]\n    return lst\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    list = []\n    if string[0] == '[' and string[-1] == ']':\n        string = string.replace('[]','')\n        string = string.replace('[','')\n        string = string.replace(']','')\n        string = string.replace(',','')\n        string = string.split()\n        for item in string:\n            list.append(item)\n        return list\n    else:\n        return list\n\n#assert string_to_list(\"python programming\")==['python','programming']\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    result = []\n    for x in str.split():\n        result.append(x)\n    return result\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(input_string):\n    # Write your code here\n    splited = input_string.split()\n    return splited\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(str):\n    str=str.replace(\" \",\"\")\n    a=[str[i:i+1] for i in range(len(str))]\n    return a\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return [i.strip() for i in string.split(\" \") if i.strip() != \"\"]\n\n\n# write a function to convert a list to a string\ndef list_to_string(li):\n    return \" \".join(li)\n\n\n# write a function to convert a list to a string with given separator\ndef list_to_string_separator(li, separator=\"\"):\n    return separator.join(li)\n\n\n# write a function to add given number to all elements of a list\ndef add_number(li, num):\n    return [li[i] + num for i in range(len(li))]\n\n\n# write a function to multiply given number to all elements of a list\ndef multiply_number(li, num):\n    return [li[i] * num for i in range(len(li))]\n\n\n# write a function to sum all elements of a list\ndef sum_list(li):\n    return sum(li)\n\n\n# write a function to find the product of all elements of a list\ndef product_list(li):\n    return reduce(lambda x, y: x*y, li)\n\n\n# write a function to find max/min element of a list\ndef max_min(li):\n    return max(li), min(li)\n\n\n# write a function to add all elements of a list\ndef add_all_list(li):\n    return reduce(lambda x, y: x + y, li)\n\n\n# write a function to print the elements of a list in reverse order\ndef reverse_print(li):\n    for i in li[::-1]:\n        print(i)\n\n\n# write a function to check if the given list is in the list\ndef check_if_list_in_list(li, li2):\n    return li in li2\n\n\n# write a function to find if given list is in the list\ndef check_if_list_in_list2(li, li2):\n    return li in li2\n\n\n# write a function to find if given element is in the list\ndef", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n  return string.split()\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    l = []\n    for i in string.split():\n        l.append(i)\n    return l\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    #your code here\n    return list(str)", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return string.split()\n\n", "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split(\" \")\n\n#Tests"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\nfrom typing import List\n\ndef search(arr: List[int], num: int) -> int:\n    lo, hi = 0, len(arr) - 1\n    while lo <= hi:\n        mid = (lo + hi)//2\n        if num > arr[mid]:\n            lo = mid + 1\n        elif num < arr[mid]:\n            hi = mid - 1\n        else:\n            return mid\n\n    return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, n):\n  for i in range(0, len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] == arr[j]:\n        if i == j:\n          return arr[j]\n  return -1\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(array,element):\n    if len(array)==0:\n        return -1\n    else:\n        if element in array:\n            array.remove(element)\n            return search(array,element)\n        else:\n            return element", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, ele):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == ele:\n            high = mid - 1\n        elif arr[mid] > ele:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef search(arr: List[int], target: int) -> int:\n    # i = 0\n    # while i < len(arr):\n    #     if arr[i] == target:\n    #         return i\n    #     i += 1\n    # return -1\n    return arr.index(target) if target in arr else -1\n\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr,n):\n    for i in range(0,len(arr)-1):\n        if arr[i] == arr[i+1]:\n            continue\n        else:\n            j = i+1\n            while j < len(arr):\n                if arr[i] == arr[j]:\n                    break\n                else:\n                    j += 1\n            if j == len(arr):\n                return arr[i]\n    return -1\n\n# print(search([1,1,2,2,3],5))\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, num):\n    if num == arr[-1]:\n        return -1\n    else:\n        return binary_search(arr, num, 0, len(arr) - 1)\n\ndef binary_search(arr, num, start, end):\n    if start > end:\n        return -1\n    else:\n        mid = int((start + end)/2)\n        if num == arr[mid]:\n            return mid\n        elif num < arr[mid]:\n            return binary_search(arr, num, start, mid - 1)\n        else:\n            return binary_search(arr, num, mid + 1, end)\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,num):\n    low = 0\n    high = len(arr)-1\n    while(low <= high):\n        mid = (low + high) // 2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid] != arr[mid-1]:\n                return arr[mid]\n            elif arr[mid] != arr[mid+1]:\n                return arr[mid]\n            low = mid + 1\n        else:\n            if arr[mid] < num:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return -1\n\n# 1.06", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr,val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return val\n\n    return None\n\n\n# -\n", "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(lst,x):\n    \"\"\"\n    If x is in lst, return the index of x, else return -1\n    \"\"\"\n    i=0\n    while i<len(lst):\n        if x==lst[i]:\n            return lst.index(x)\n        i+=1\n    return -1\n\ndef test_search():\n    assert search([1,1,2,2,3],1) == 0\n    assert search([1,1,2,2,3],2) == 1\n    assert search([1,1,2,2,3],3) == 2\n    assert search([1,1,2,2,3],4) == -1\n    assert search([1,1,2,2,3],5) == 3\n\ntest_search()\n\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    # Check the length of tuples.\n    if len(tuples) == 0:\n        return 0\n\n    # Create a dictionary with each element of the tuples as a key and its value as 1.\n    # The value of each key is the number of tuples that contain the key.\n    # Sort the tuples and store the keys in a list.\n    tuple_dict = {}\n    for tuple_element in tuples:\n        if tuple_element in tuple_dict:\n            tuple_dict[tuple_element] += 1\n        else:\n            tuple_dict[tuple_element] = 1\n    tuple_keys = list(tuple_dict.keys())\n    tuple_keys.sort()\n\n    # Find the maximum product.\n    product = 0\n    for i in range(len(tuple_keys)):\n        for j in range(i + 1, len(tuple_keys)):\n            product = max(product, tuple_dict[tuple_keys[i]] * tuple_dict[tuple_keys[j]])\n\n    return product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuple_list):\n  max_product = 1\n  for i in tuple_list:\n    for j in tuple_list:\n      if i != j:\n        if i[0] > j[0]:\n          max_product = max(max_product, j[0] * i[1])\n        elif i[1] > j[1]:\n          max_product = max(max_product, i[0] * j[1])\n        else:\n          max_product = max(max_product, i[0] * j[1])\n  return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom typing import List\n\ndef max_product_tuple(tup: List[tuple]) -> int:\n    \"\"\"max product tuple.\"\"\"\n    prod = 0\n    for a,b in tup:\n        prod = max(prod, a*b)\n    return prod\n\n# the function above is a bit too long, you can refactor it to\n# the following one-line code.\ndef max_product_tuple_v2(tup: List[tuple]) -> int:\n    \"\"\"max product tuple v2.\"\"\"\n    return max(a*b for a, b in tup)\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom typing import List, Tuple\ndef max_product_tuple(tuples: List[Tuple]) -> int:\n    return max([x[0]*x[1] for x in tuples])\n\ndef max_product_tuple(tuples: List[Tuple]) -> int:\n    return max([x[0]*x[1] for x in tuples])\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    if not tuples:\n        return 0\n    max_product = -float('inf')\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            cur_product = tuples[i][0] * tuples[j][1]\n            max_product = max(max_product, cur_product)\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n  max_product = 1\n  for tuple1 in tuples:\n    for tuple2 in tuples:\n      if tuple1 != tuple2:\n        product = tuple1[0] * tuple2[0] * tuple1[1] * tuple2[1]\n        if product > max_product:\n          max_product = product\n  return max_product", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(lst):\n    max_prod = 1\n    for x in range(len(lst)):\n        for y in range(len(lst)):\n            if x != y:\n                prod = lst[x][0] * lst[y][1]\n                if prod > max_prod:\n                    max_prod = prod\n    return max_prod\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom typing import List\n\n\ndef max_product_tuple(arr: List[tuple[int, int]]) -> int:\n    def helper(arr):\n        if len(arr) < 2:\n            return arr[0][0] * arr[0][1]\n        max_val = float(\"-inf\")\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                val = arr[i][0] * arr[j][1]\n                if val > max_val:\n                    max_val = val\n        return max_val\n    return helper(arr)\n\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(lst):\n    return reduce(lambda x, y: max(x, y), map(lambda x: x[0] * x[1], lst))\n\n\n#print max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n", "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom functools import reduce\n\n\ndef max_product_tuple(tuples):\n    return reduce(lambda x, y: x*y, map(lambda x: x[1], tuples))\n\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, sum1, sum2):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum1 and arr[j] + arr[k] == sum2:\n                return True\n    return False\n\n# Test", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, a, b, c):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == a:\n                    return True\n    return False\n\ndef main():\n    arr = [2, 7, 4, 0, 9, 5, 1, 3]\n    a = 8\n    b = 6\n    c = 0\n    print(check_triplet(arr, a, b, c))\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, target, first, second):\n    arr.sort()\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        if arr[i] + arr[j] == target and first in arr[i:j+1]:\n            return True\n        elif arr[i] + arr[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n\ndef test_check_triplet():\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 1, 3) == True\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 5, 7) == True\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 1, 0) == False\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 2, 3) == False\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 2, 5) == False\n    assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 2) == False", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, s1, s2, s3):\n    arr.sort()\n    return s1 in arr and s2 in arr and s3 in arr\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, a, b, c):\n    arr.sort()\n    if a+b+c == 0:\n        return True\n    else:\n        return False\n    \ncheck_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, sum1, sum2, idx):\n\t# sum1, sum2, idx all be int\n\t# arr be list\n\t# return True/False\n\tif idx >= len(arr):\n\t\treturn False\n\tif sum1 == 0 and sum2 == 0:\n\t\treturn True\n\telif sum1 == sum2:\n\t\treturn check_triplet(arr, sum1, sum2, idx + 1)\n\telif sum1 + arr[idx] == sum2:\n\t\treturn check_triplet(arr, sum1, sum2, idx + 1)\n\telif sum1 + arr[idx] > sum2:\n\t\treturn check_triplet(arr, sum1, sum2, idx + 1)\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\nfrom typing import List\n\ndef check_triplet(arr: List[int], sum: int) -> bool:\n    arr.sort()\n    for i in range(len(arr)):\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == sum:\n                return True\n            elif arr[i] + arr[j] + arr[k] > sum:\n                k -= 1\n            else:\n                j += 1\n    return False\n\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, a, b, c):\n    if len(arr) < 3:\n        return False\n\n    arr.sort()\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            if arr[i] + arr[j] == a and arr[i] + arr[j + 1] == b and arr[i] + arr[j] == c:\n                return True\n\n    return False\n\ndef main():\n    a = [2, 7, 4, 0, 9, 5, 1, 3]\n    print(check_triplet(a, 8, 6, 0))\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(array, target1, target2, target3):\n    array.sort()\n    found = False\n    for i in range(0, len(array) - 2):\n        # print(i)\n        if array[i] + array[i+1] + array[i+2] == target1:\n            print(array[i], array[i+1], array[i+2])\n            found = True\n            break\n\n    if not found:\n        return False\n\n    for i in range(len(array) - 2, 0, -1):\n        if array[i] + array[i-1] + array[i-2] == target2:\n            print(array[i], array[i-1], array[i-2])\n            found = True\n            break\n\n    if not found:\n        return False\n\n    for i in range(len(array) - 1):\n        if array[i] + array[i+1] + array[i+2] == target3:\n            print(array[i], array[i+1], array[i+2])\n            found = True\n            break\n\n    return found\n", "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(array, target_sum1, target_sum2, target_sum3):\n    array.sort()\n    total = 0\n    for i in range(len(array) - 2):\n        if array[i] + array[i+1] + array[i+2] == target_sum1:\n            total += 1\n        elif array[i] + array[i+1] + array[i+2] == target_sum2:\n            total += 1\n        elif array[i] + array[i+1] + array[i+2] == target_sum3:\n            total += 1\n    return total > 0\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    start = 1\n    end = 10000\n    count = 0\n    while end-start > 1:\n        x = (end+start)//2\n        if (x**3)%10 == x:\n            count += 1\n            if count == n:\n                return x\n            elif count < n:\n                start = x\n            else:\n                end = x-1\n        else:\n            if (x+1)**3%10 == x+1:\n                start = x+1\n            else:\n                end = x-1\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\n# Solution \ndef smartNumber(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return smartNumber(n-1)\n    else:\n        return smartNumber(n+1)\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    elif n % 2 == 0:\n        return smartNumber(n / 2) + 5\n    else:\n        return smartNumber(n / 2) + 3", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    if(n == 0):\n        return 30\n    elif(n % 2 == 0):\n        return 3 * smartNumber(n-1) + 1\n    else:\n        return 3 * smartNumber(n-1) + 2\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n==1:\n        return 30\n    else:\n        return 2*smartNumber(n-1)+1\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    number = 0\n    for i in range(1, 100):\n        if i > 1:\n            if i % 3 == 0:\n                number = number + i\n        else:\n            number = i\n    return number\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    res = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            res = i\n            break\n    if res == 0:\n        res = 30\n    return res\n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smartNumber(n):\n    # Write your code here\n    if n == 0:\n        return 1\n    elif n%2 == 0:\n        return smartNumber(n/2) + n\n    else:\n        return smartNumber(n/2) * n\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    num = 0\n    for i in range(1, 10000000):\n        num = 10*num + 7*(i+i+i)\n    return num % (n+1)\n", "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\nimport math\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    elif n == 2:\n        return 567\n    elif n == 3:\n        return 8128\n    elif n == 4:\n        return 13579\n    elif n == 5:\n        return 21628\n    elif n == 6:\n        return 34657\n    elif n == 7:\n        return 55272\n    elif n == 8:\n        return 84143\n    elif n == 9:\n        return 123456\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nimport unittest\nfrom utils import prime_factors\n\n\ndef amicable_numbers_sum(n):\n    counter = 0\n    for i in range(1, n + 1):\n        if prime_factors(i) == prime_factors(amicable_numbers_sum(i)):\n            counter += i\n    return counter\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    a = {}\n    sum = 0\n    for i in range(1, n):\n        amicable = False\n        for j in range(1, i):\n            if i != j and i % j == 0:\n                a[i] = j\n                if j in a:\n                    if i == a[j]:\n                        amicable = True\n                        break\n        if amicable:\n            sum += i\n    return sum\n\n# test case", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nfrom pythontutor.tkgui.tkinter_tools import IntVar, Entry\nfrom pythontutor.widgets.tools import Helper\n\n\ndef amicable_numbers_sum(N):\n    s = 0\n    for i in range(1, N):\n        for j in range(i + 1, N):\n            if sum_of_divisors(i) == j and sum_of_divisors(j) == i:\n                s += i + j\n    return s\n\n\ndef sum_of_divisors(number):\n    return sum([x for x in range(1, number + 1) if number % x == 0])\n\n\n# test cases", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(num):\n    # Your code here\n    d = {}\n    # we want to count the number of amicable pairs\n    for i in range(num):\n        for j in range(i+1,num):\n            # we check if the sum of the two numbers is a key of the dictionary\n            if i+j in d:\n                # then we add this pair to the list of amicable pairs\n                d[i+j].append([i,j])\n            # if it is not, we set the value of this key to [[i,j]]\n            else:\n                d[i+j] = [[i,j]]\n    # we want to sum the values of each amicable pair\n    sum_ = 0\n    for key in d:\n        sum_ += key\n    return sum_\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\nimport itertools\n\ndef amicable_numbers_sum(n):\n    #Get a list of all the amicable numbers from 1 to n\n    amicable_numbers = [a for a,b in itertools.ifilter(lambda x: x[0] != x[1] and sum(x) == x[0] + x[1],\n        enumerate(enumerate(range(1,n), start=1), start=1))]\n    \n    return sum([a[1] for a in amicable_numbers])\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    amicable_numbers = set()\n    for i in range(1, n+1):\n        if is_amicable(i):\n            amicable_numbers.add(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    sum_num = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_num += i\n    if num == sum_num:\n        return True\n    return False\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(max_number):\n    if (max_number == 1):\n        return 0\n    numbers_sum = 0\n    sum_of_divisors = []\n    for i in range(1, max_number+1):\n        divisor = 1\n        sum_of_divisors.append(1)\n        while (divisor <= i):\n            if (i%divisor == 0):\n                sum_of_divisors[i] = sum_of_divisors[i] + divisor\n                divisor = divisor + i\n            else:\n                divisor = divisor + 1\n    for i in range(1, max_number+1):\n        if (sum_of_divisors[i] != i):\n            numbers_sum = numbers_sum + (sum_of_divisors[i] + i)\n    return numbers_sum\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n#https://github.com/GauravBh1010tt/python-mini-projects/blob/master/Amicable%20Numbers/amicable_numbers.py\ndef amicable_numbers_sum(n):\n\tsum = 0\n\tfor num in range(1, n):\n\t\tif is_amicable(num):\n\t\t\tsum += num\n\treturn sum\n\n\ndef is_amicable(num):\n\tsum1 = 0\n\tsum2 = 0\n\tfor i in range(1, num):\n\t\tif num % i == 0:\n\t\t\tsum1 += i\n\t\t\tsum2 += num / i\n\tif sum1 == sum2 and sum1 != num and sum2 != num:\n\t\treturn True\n\telse:\n\t\treturn False\n\n", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(max_number):\n    amicable_list = []\n    for i in range(1, max_number):\n        if is_amicable(i):\n            amicable_list.append(i)\n\n    amicable_list.sort()\n    sum_of_amicable_list = sum(amicable_list)\n    return sum_of_amicable_list\n\ndef is_amicable(number):\n    sum_of_digits = sum_of_digits(number)\n    other_sum = sum_of_digits - number\n    return number == other_sum\n\ndef sum_of_digits(number):\n    number_in_string = str(number)\n    return sum(map(int, number_in_string))", "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nfrom math import sqrt\n\ndef amicable_numbers_sum(num):\n    \"\"\"\n    Return the sum of all amicable numbers between 1 and num\n    \"\"\"\n    # Store amicable pairs here\n    amicable_pairs = {}\n    # Return sum of amicable pairs\n    return sum(amicable_pairs[num] for num in amicable_pairs)\n\ndef amicable_pair(num):\n    \"\"\"\n    Return a pair of amicable numbers whose sum is num\n    \"\"\"\n    # For even num:\n    # x + y = num\n    # y = num - x\n    # Check if num - x is in the amicable pairs dict\n    if num % 2 == 0:\n        for x in amicable_pairs:\n            y = num - x\n            if y in amicable_pairs and x != y:\n                return (x, y)\n    # For odd num:\n    # x + y = num\n    # x = num - y\n    # Check if num - y is in the amicable pairs dict\n    else:\n        for x in amicable_pairs:\n            y = num - x\n            if y in amicable_pairs and x != y:\n                return (y, x)\n\ndef amicable_pairs_generator(num):\n    \"\"\"\n    Generate all amicable pairs whose sum is num\n    \"\"\"\n    # Start with 2\n    for x in range(2, num):\n        yield (x, num - x)\n\ndef amicable_numbers(num):\n    \"\"\"\n    Generate all amicable numbers between 1 and num\n    \"\"\"\n    # Loop over pairs\n    for pair in amicable_pairs_generator(num):\n        yield pair[0] + pair[1]\n\ndef amicable_numbers_set(num):\n    \"\"\"\n    Return a set of all amicable numbers between 1 and num\n    \"\"\"\n    # Create set for amicable numbers\n    amicable_numbers_set = set()\n    # Loop over amicable numbers and add to set\n    for num in amicable_numbers(num):\n        amicable_numbers_set.add(num)\n    # Return set of"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\nimport math\n\ndef angle_complex(real, imag):\n    # TODO: Implement me!\n    return math.atan2(imag, real)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(re,im):\n  return math.atan2(im,re)", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nfrom math import *\n\n\ndef angle_complex(a, b):\n    if a == 0 and b == 0:\n        return 0\n    elif a == 0:\n        return atan2(b, 1)\n    elif b == 0:\n        return atan2(a, 1)\n    else:\n        return atan2(b, a)\n\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    return math.atan2(b,a)\n\n# print(angle_complex(1,2))", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    assert angle_complex(0,1j)==1.5707963267948966 \n    \"\"\"\n    #start your code here\n    print(\"a =\", a, \", b =\", b)\n    \"\"\"\n    Your code goes here\n    \"\"\"\n    angle = 0\n    if a == 0 and b == 0:\n        return 0\n    if b == 0:\n        angle = math.pi/2\n    elif a == 0:\n        angle = math.pi\n    elif a > 0 and b > 0:\n        angle = math.atan(b/a)\n    elif a > 0 and b < 0:\n        angle = math.atan(b/a) + math.pi\n    elif a < 0 and b < 0:\n        angle = math.atan(b/a) + math.pi\n    elif a < 0 and b > 0:\n        angle = math.atan(b/a) + math.pi*2\n    #end your code here\n    return angle\n\ndef test_angle_complex():\n    assert angle_complex(0,1j)==1.5707963267948966 \n    assert angle_complex(0,1)==math.pi/2\n    assert angle_complex(1,1)==0\n    assert angle_complex(1,0)==math.pi\n    assert angle_complex(0,0)==0\n    assert angle_complex(1,-1)==math.pi\n    assert angle_complex(-1,1)==math.pi\n    assert angle_complex(-1,-1)==math.pi*2\n    assert angle_complex(0.5,0.5)==math.pi/4\n\ntest_angle_complex()", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    #assuming b>=0\n    return np.arctan2(b,a)\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(a,b):\n    import numpy as np\n    return np.arccos(abs(a)/abs(b))\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(c):\n    return np.angle(c, deg=True)\n    ", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(x,y):\n    ans = math.atan2(y,x)\n    if ans < 0:\n        ans += 2*math.pi\n    return ans\n", "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nimport math\ndef angle_complex(a, b):\n    return math.atan2(b, a)\n    "], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\nfrom typing import List\n\n\ndef find_length(binary: str, ones: int) -> int:\n    binary = binary[::-1]\n    count = 0\n    start = 0\n    max_diff = 0\n    for i in range(len(binary)):\n        if binary[i] == \"1\":\n            count += 1\n        if binary[i] == \"0\":\n            if count > ones:\n                max_diff = max(max_diff, count - ones)\n            count = 0\n    return max_diff\n\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(binary_string, max_len):\n    if len(binary_string) > max_len:\n        return -1\n    dp = [0] * (len(binary_string) + 1)\n    for i in range(1, len(binary_string) + 1):\n        for j in range(1, i + 1):\n            if binary_string[j - 1] == '1' and binary_string[i - 1] == '1':\n                dp[i] = max(dp[i], dp[j - 1] + 1)\n            elif binary_string[j - 1] == '0' and binary_string[i - 1] == '0':\n                dp[i] = max(dp[i], dp[j - 1])\n    return dp[-1]\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(s, n):\n    max_zero = 0\n    max_one = 0\n    count_zero = 0\n    count_one = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_zero += 1\n            max_zero = max(max_zero, count_zero)\n            count_one = 0\n        else:\n            count_one += 1\n            max_one = max(max_one, count_one)\n            count_zero = 0\n    return max(max_zero, max_one) - min(max_zero, max_one)\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, number_of_ones):\n    # binary_string = \"11000010001\"\n    # number_of_ones = 11\n    binary_string = str(binary_string).lstrip(\"0\")\n    length = len(binary_string)\n    ones = 0\n    zeros = 0\n    for i in range(length):\n        if binary_string[i] == '1':\n            ones += 1\n        else:\n            zeros += 1\n    # print(ones)\n    # print(zeros)\n\n    # 0s = ones\n    # 1s = zeros\n    max_ones = ones + number_of_ones\n    min_zeros = zeros\n\n    # if number_of_ones > 0:\n    #     max_ones += number_of_ones\n    # if number_of_ones < 0:\n    #     min_zeros += number_of_ones\n    # print(max_ones)\n    # print(min_zeros)\n\n    # if min_zeros > max_ones:\n    #     min_zeros = max_ones\n\n    # if min_zeros < 0:\n    #     return 0\n\n    return min_zeros - max_ones\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(string, ones):\n    output = \"\"\n    total_ones = 0\n    count_ones = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count_ones += 1\n        if string[i] == '0':\n            total_ones += 1\n        if count_ones == ones:\n            output += str(total_ones-count_ones)\n            count_ones = 0\n            total_ones = 0\n    return output\n\ndef main():\n    print(find_length(\"11000010001\", 11))\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(string, n):\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == \"0\":\n            count0 += 1\n        else:\n            count1 += 1\n        max_diff = max(max_diff, count1 - count0)\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(str, N):\n    arr = []\n    for i in range(len(str) - N + 1):\n        counter = 0\n        for char in str[i:i + N]:\n            if char == '1':\n                counter += 1\n        arr.append(counter)\n    max_diff = 0\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i - 1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i - 1])\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, n):\n    l = 0\n    i = 0\n    j = 0\n    max_count = 0\n    while i < len(s):\n        if s[i] == \"0\":\n            count = 0\n            while i < len(s) and s[i] == \"0\":\n                count += 1\n                i += 1\n            while j < count:\n                if s[j] == \"1\":\n                    max_count = max(max_count, j - l)\n                j += 1\n            l = i\n        else:\n            count = 0\n            while j < len(s) and s[j] == \"1\":\n                count += 1\n                j += 1\n            while i < count:\n                if s[i] == \"0\":\n                    max_count = max(max_count, j - l)\n                i += 1\n            l = j\n    return max_count\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_str, length):\n    start = 0\n    zeroes = 0\n    ones = 0\n    max_diff = 0\n    for i in range(length):\n        if binary_str[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n        if ones - zeroes > max_diff:\n            max_diff = ones - zeroes\n        elif zeroes - ones > max_diff:\n            max_diff = zeroes - ones\n        if start == i and ones == 0:\n            start += 1\n        elif start == i and zeroes == 0:\n            start += 1\n        elif start == i and ones != 0 and zeroes != 0:\n            start += 1\n    return max_diff\n", "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary, sub_string):\n    result = 0\n    for i in range(0, len(binary) - sub_string):\n        zero_count = 0\n        one_count = 0\n        for j in range(i, i + sub_string):\n            if binary[j] == '1':\n                one_count += 1\n            elif binary[j] == '0':\n                zero_count += 1\n\n        result = max(result, one_count - zero_count)\n\n    return result\n\ndef test_function(test_case):\n    binary = test_case[0]\n    sub_string = test_case[1]\n    solution = test_case[2]\n    output = find_length(binary, sub_string)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(['11000010001', 11, 6])\ntest_function(['00011001101', 5, 3])\ntest_function(['1000010', 3, 0])"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef common_divisors(num1, num2):\n    num1 = int(num1)\n    num2 = int(num2)\n    total = 0\n    for i in range(1, num1):\n        if num1 % i == 0 and num2 % i == 0:\n            total += i\n    return total\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef common_divisors(n1,n2):\n    lcm = lcm_by_euclidean(n1,n2)\n    com_div = []\n    for i in range(1,lcm+1):\n        if n1%i==0 and n2%i==0:\n            com_div.append(i)\n    return sum(com_div)", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\n# Solution\ndef sum_common_divisors(a, b):\n    # Initialize common divisors and common multipliers\n    a_cd = []\n    a_cm = []\n    b_cd = []\n    b_cm = []\n\n    # Iterate through all numbers\n    for i in range(1, int(b)):\n        # Check if i is a divisor of a\n        if (a % i) == 0:\n            # Add i to the list of common divisors\n            a_cd.append(i)\n            # Add 1 to the list of common multipliers\n            a_cm.append(1)\n\n            # Check if i is a divisor of b\n            if (b % i) == 0:\n                # Add i to the list of common divisors\n                b_cd.append(i)\n                # Add 1 to the list of common multipliers\n                b_cm.append(1)\n    # Sum all common multipliers\n    for i in range(len(a_cm)):\n        a_cm[i] += a_cm[i]\n\n    for i in range(len(b_cm)):\n        b_cm[i] += b_cm[i]\n\n    # Check if there are any common divisors\n    if len(a_cd) == 0 and len(b_cd) == 0:\n        return 0\n    elif len(a_cd) == 0 and len(b_cd) != 0:\n        # Sum the common divisors of b and the common multipliers\n        return sum(b_cd) * sum(b_cm)\n    elif len(a_cd) != 0 and len(b_cd) == 0:\n        # Sum the common divisors of a and the common multipliers\n        return sum(a_cd) * sum(a_cm)\n    elif len(a_cd) != 0 and len(b_cd) != 0:\n        # Sum the common divisors of a and the common divisors of b\n        # and the common multipliers\n        return sum(a_cd) * sum(a_cm) + sum(b_cd) * sum(b_cm)", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\n# +\ndef sum_of_common_divisors(a,b):\n    return len(set(divisors(a)).intersection(set(divisors(b))))\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common(a,b):\n    if (a > b):\n        big = a\n        small = b\n    else:\n        big = b\n        small = a\n    a_list = [x for x in range(1,big+1) if (big % x == 0)]\n    b_list = [x for x in range(1,small+1) if (small % x == 0)]\n    print(a_list)\n    print(b_list)\n    print(len(b_list))\n    print(len(a_list))\n    print(len(a_list) - len(b_list))\n    sum_ = 0\n    common = 0\n    for i in a_list:\n        for j in b_list:\n            if i == j:\n                common += 1\n                break\n\n    print(common)\n    return common\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef common_divisors(n1,n2):\n    sum = 1\n    for i in range(1,n1+1):\n        if n1%i == 0 and n2%i == 0:\n            sum += i\n    return sum\n\ndef test_common_divisors():\n    assert common_divisors(10,15) == 6\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(num1, num2):\n    # complete the function\n    lcm = int(num1*num2/math.gcd(num1,num2))\n    divisor = lcm\n    sum = 0\n    while divisor <= lcm:\n        if num1%divisor == 0 and num2%divisor == 0:\n            sum += divisor\n        divisor += 1\n    return sum", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum(a,b):\n    sum = 0\n    for i in range(1,b+1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(x,y):\n    \"\"\"\n    Sum of common divisors\n    \"\"\"\n    #return the sum of common divisors\n    return sum(set(range(1, min(x,y)+1)).intersection(set(range(1, min(x,y)+1)).intersection(set(range(1, min(x,y)+1)))))\n    \n# example", "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef gcd(a,b):\n    while a!=b:\n        if a<b:\n            a=a+b\n        else:\n            b=b+a\n    return a\ndef sum_common_divisors(num1,num2):\n    if num1==0 or num2==0:\n        return 0\n    else:\n        return (num1+num2)-gcd(num1,num2)\n\ndef test():\n    assert sum_common_divisors(10,15) == 6\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(num1, num2):\n    return num1*num2\nmultiply_int(10,20)", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    result = 0\n    for i in range(a):\n        for j in range(b):\n            result = result + 1\n    return result\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    if a ==0:\n        return b\n    else:\n        return a*multiply_int(a-1,b)\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x, y):\n    ans = 0\n    for i in range(len(str(x))):\n        ans += int(str(x)[i]) * int(str(y)[i])\n    return ans\n\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    \"\"\"\n    This function is not using the * operator in python.\n    \"\"\"\n    result=0\n    for x in range(0,b):\n        result+=a\n    return result\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a+b\n\ndef multiply_int(a,b):\n    result = 0\n    for i in range(a):\n        result += b\n    return result\n\ndef multiply_int(a,b):\n    result = 0\n    for i in range(a):\n        result *= b\n    return result\n\ndef multiply_int(a,b):\n    result = 0\n    for i in range(a):\n        result = result*b\n    return result\n\ndef multiply_int(a,b):\n    result = 0\n    for i in range(a):\n        result *= b\n    return result\n\ndef multiply_int(a,b):\n    result = 0\n    for i in range(a):\n        result = result*b\n    return result", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(num1, num2):\n    output = 0\n    for i in range(num2+1):\n        output += num1\n    return output\n", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(num1,num2):\n    \"\"\"\n    int -> int -> int\n    Multiply two integers without using the * operator in python\n    \"\"\"\n    # save digits of the product\n    output = 0\n    # iterate through each digit of the first integer\n    for i in range(len(str(num1))):\n        # multiply each digit by the digit of the second integer\n        output += int(str(num1)[i])*int(str(num2)[i])\n    return output", "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\n# solution\ndef multiply_int(a,b):\n    if a>b:\n        return (a-b)*a//2\n    else:\n        return (b-a)*b//2"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    long_words=[]\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,l):\n    a=[]\n    for word in l:\n        if len(word) > n:\n            a.append(word)\n    return a", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    words_list=sorted(words,key=len)\n    return words_list[:n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    long_words=[]\n    for word in words:\n        if len(word)>n:\n            long_words.append(word)\n    return long_words\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n    '''\n    Input: \n        n - positive integer\n        words - list of words\n    Output:\n        list of words longer than n\n    \n    '''\n    return [word for word in words if len(word)>n]\n\n# long_words(3,\"python is a programming language\")\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n, words):\n    return [word for word in words if len(word)>n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [w for w in words if len(w) > n]\n", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\nimport pytest\n\ndef long_words(n, words):\n    words = [w.lower() for w in words]\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\ndef test_long_words():\n    assert long_words(3,\"python is a programming language\")==['python','programming','language']\n    assert long_words(4,\"python is a programming language\")==['python']", "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n    return list(filter(lambda x: len(x) > n, words))\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(magic_square):\n    for i in magic_square:\n        if len(set(i))!=1:\n            return False\n    for i in magic_square:\n        for j in i:\n            if magic_square.count(j)!=magic_square.count(min(magic_square)) and magic_square.count(j)!=magic_square.count(max(magic_square)):\n                return False\n    return True\n\ndef magic_square(magic_square):\n    magic_square_copy = magic_square.copy()\n    for i in range(len(magic_square)):\n        magic_square_copy[i][i] = int(max(magic_square)*0.7+min(magic_square)*0.3)\n    return magic_square_copy\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(square):\n    # check the square is 4*4\n    if len(square) != 4 or len(square[0]) != 4:\n        return False\n    # check the square is symmetric\n    for row in range(len(square)):\n        for column in range(len(square[row])):\n            if square[row][column] != square[column][row]:\n                return False\n    # check the sum of each row is equal\n    for row in range(len(square)):\n        sum = 0\n        for column in range(len(square[row])):\n            sum += square[row][column]\n        if sum != 21:\n            return False\n    # check the sum of each column is equal\n    for column in range(len(square[0])):\n        sum = 0\n        for row in range(len(square)):\n            sum += square[row][column]\n        if sum != 21:\n            return False\n    # check the sum of the 2 diagonals is equal\n    sum = 0\n    for row in range(len(square)):\n        for column in range(len(square[row])):\n            sum += square[row][column]\n    if sum != 44:\n        return False\n    return True\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(square):\n    return square[0][0] == square[1][1] == square[2][2] == square[3][3] == square[0][1] == square[1][2] == square[2][3] == square[3][0] == square[0][3] == square[1][0] == square[2][1]\n\ndef magic_square(square):\n    \"\"\"\n    Write a function to calculate magic square.\n    :param square: a square of integer\n    :return: True if magic square else False\n    \"\"\"\n    return magic_square_test(square)\n\n\ndef magic_square_test(square):\n    return square[0][0] == square[1][1] == square[2][2] == square[3][3] == square[0][1] == square[1][2] == square[2][3] == square[3][0] == square[0][3] == square[1][0] == square[2][1]\n\ndef magic_square(square):\n    \"\"\"\n    Write a function to calculate magic square.\n    :param square: a square of integer\n    :return: True if magic square else False\n    \"\"\"\n    return magic_square_test(square)", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(square):\n    nums = [x for x in square]\n    return sum(nums) == sum(reversed(nums)) == sum(list(set(nums))) == sum(list(set(reversed(nums))))\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(msq):\n    \"\"\"\n    Parameters\n    ----------\n    msq : list of lists\n        The magic square\n\n    Returns\n    -------\n    bool\n        True if msq is a magic square else False\n    \"\"\"\n    # use the formula\n    return sum(msq[i][j] for i in range(3))==15+2*msq[1][1]\n\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(square):\n    sum_matrix = [sum(i) for i in square]\n    if sum_matrix == [14, 27, 14, 14]:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(M):\n    return sum(M[0])+sum(M[1])+sum(M[2])+sum(M[3])==sum(M[0])*2+sum(M[1])*2+sum(M[2])*2+sum(M[3])*2", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef is_magic_square(square):\n    return square[0] + square[1] + square[2] == square[3] + square[4] + square[5] == square[6] + square[7] + square[8] == square[0] + square[3] + square[6] == square[1] + square[4] + square[7] == square[2] + square[5] + square[8] == square[0] + square[4] + square[8] == square[2] + square[4] + square[6] == 50\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(s):\n    s_test = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    return s == s_test\n", "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(arr):\n    length=len(arr)\n    sum_to_25=length**2+length+1\n    sum_to_25//=2\n    sum_of_col=0\n    sum_of_row=0\n    sum_of_diag=0\n    for i in range(length):\n        for j in range(length):\n            if i!=j:\n                sum_of_col+=arr[i][j]\n                sum_of_row+=arr[j][i]\n            elif i==j:\n                sum_of_diag+=arr[i][j]\n    return arr==[[sum_of_col, sum_to_25, sum_of_diag], [sum_to_25, sum_to_25, sum_of_col], [sum_of_diag, sum_of_col, sum_to_25]]\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\nfrom typing import Tuple, List\n\n\ndef max_occurrences(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Return a tuple of the item with maximum frequency and its frequency\"\"\"\n    numbers_dict = {}\n    max_freq = 0\n    max_item = None\n    for number in numbers:\n        if number in numbers_dict:\n            numbers_dict[number] += 1\n        else:\n            numbers_dict[number] = 1\n        if numbers_dict[number] > max_freq:\n            max_freq = numbers_dict[number]\n            max_item = number\n    return max_item, max_freq\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\nfrom collections import defaultdict\n\ndef max_occurrences(lst):\n    \"\"\"\n    Find item with maximum frequency in a given list.\n    \"\"\"\n    occ = defaultdict(int)\n    for item in lst:\n        occ[item] += 1\n    return max(occ, key=occ.get)", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(l):\n    m = {}\n    for item in l:\n        if item in m:\n            m[item] = m[item] + 1\n        else:\n            m[item] = 1\n    m = dict(sorted(m.items(), key=lambda item: item[1], reverse=True))\n    return (m, m.keys()[0], m.values()[0])\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\nfrom collections import Counter\ndef max_occurrences(lst):\n    d = Counter(lst)\n    return max(d.items(), key = lambda x : x[1])", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(list_items):\n    max_count = 0\n    max_item = None\n    for item in list_items:\n        current_count = list_items.count(item)\n        if current_count > max_count:\n            max_count = current_count\n            max_item = item\n    return max_item, max_count\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(arr):\n    values = dict()\n    max_count = 0\n    max_item = None\n    \n    for i in range(len(arr)):\n        if arr[i] in values:\n            values[arr[i]] += 1\n        else:\n            values[arr[i]] = 1\n            \n        if values[arr[i]] > max_count:\n            max_count = values[arr[i]]\n            max_item = arr[i]\n            \n    return max_item, max_count\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(list):\n    occurences = {}\n    for item in list:\n        if item not in occurences:\n            occurences[item] = 0\n        occurences[item] += 1\n\n    max_value = max(occurences.values())\n    max_items = []\n    for key, value in occurences.items():\n        if value == max_value:\n            max_items.append(key)\n\n    return (max_items[0], max_value)\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\nfrom collections import defaultdict\n\n\ndef max_occurrences(data):\n    \"\"\"\n    Write your code here.\n    :param data: Input data\n    :return: Tuple of max item value and its occurrences count\n    \"\"\"\n    occ = defaultdict(int)\n    for i in data:\n        occ[i] += 1\n    return max(occ.items(), key=lambda x: x[1])\n\n\ndef test_max_occurrences():\n    \"\"\"\n    Run `python -m pytest ./day-11/part-1/max_occurrences.py` to test the submission.\n    \"\"\"\n    assert max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == (2, 5)\n\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(l):\n    freq = {}\n    max_freq = 0\n    max_word = None\n    for w in l:\n        if w not in freq:\n            freq[w] = 0\n        freq[w] += 1\n        if freq[w] > max_freq:\n            max_freq = freq[w]\n            max_word = w\n    return max_word, max_freq\n\ndef test():\n    l = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\n    print(max_occurrences(l))\n", "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(nums):\n    return max(Counter(nums).items(), key=operator.itemgetter(1))[0]\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\nimport re\n\n\ndef reverse_vowels(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    string_vowels = string.lower()\n    vowels_pattern = re.compile(r\"([aeiou])\")\n    vowels = vowels_pattern.findall(string_vowels)\n    vowels.reverse()\n    for vowel in vowels:\n        string_vowels = re.sub(vowel, vowel[::-1], string_vowels)\n\n    return string_vowels", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str):\n    pass\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    vowels = \"aeiou\"\n    reverse_string = \"\"\n    for index in range(len(string)):\n        if string[index] in vowels:\n            reverse_string = string[index] + reverse_string\n        else:\n            reverse_string = reverse_string + string[index]\n    return reverse_string\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(st: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels.sort(reverse=True)\n    vowels_list = list(vowels)\n    rev_list = st[::-1]\n    i = 0\n    for letter in rev_list:\n        if letter in vowels_list:\n            rev_list[i] = letter.lower()\n        i += 1\n    return \"\".join(rev_list)\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(str):\n    \"\"\"\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"Hello world\")\n    'Hloolr drowol'\n    >>> reverse_vowels(\"Hello World\")\n    'Hloolr drowol'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    i = 0\n    j = len(str) - 1\n    while i < j:\n        if str[i] in vowels:\n            str[i], str[j] = str[j], str[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return str\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    return \"\".join(filter(lambda x: x not in \"aeiouAEIOU\", string[::-1]))", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    s1 = \"\"\n    for i in s:\n        if i not in \"aeiouAEIOU\":\n            s1 += i\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            s1 += i[::-1]\n    return s1\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    return ''.join([s for s in string if s in 'aeiouAEIOU'])[::-1] + ''.join([s for s in string if s not in 'aeiouAEIOU'])", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(str):\n    \"\"\"\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"Happy\")\n    'Hapy'\n    >>> reverse_vowels(\"Java\")\n    'Jaava'\n    >>> reverse_vowels(\"Mathematics\")\n    'Mathematics'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str = str.lower()\n    str = \"\".join([c if c not in vowels else str[-1] for c in str])\n    return str\n\n", "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(str):\n    return ''.join([i for i in str if i not in 'aeiouAEIOU'])[::-1]\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\n# Write a function that counts the number of strings in a list", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    \"\"\"\n    >>> tup_string((\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"))\n    ('exercises')\n    \"\"\"\n    return \"\".join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    tup = list(tup)\n    tup.sort()\n    #string = ''\n    #for i in tup:\n    #    string += i\n    #return string\n    return ''.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n  return ''.join(tup)\n\ndef tup_string2(tup):\n  return ''.join(tup)\n\ndef tup_string3(tup):\n  return ''.join(tup)\n\ndef tup_string4(tup):\n  return ''.join(tup)\n\ndef tup_string5(tup):\n  return ''.join(tup)\n\ndef tup_string6(tup):\n  return ''.join(tup)\n\ndef tup_string7(tup):\n  return ''.join(tup)\n\ndef tup_string8(tup):\n  return ''.join(tup)\n\ndef tup_string9(tup):\n  return ''.join(tup)\n\ndef tup_string10(tup):\n  return ''.join(tup)\n\ndef tup_string11(tup):\n  return ''.join(tup)\n\ndef tup_string12(tup):\n  return ''.join(tup)\n\ndef tup_string13(tup):\n  return ''.join(tup)\n\ndef tup_string14(tup):\n  return ''.join(tup)\n\ndef tup_string15(tup):\n  return ''.join(tup)\n\ndef tup_string16(tup):\n  return ''.join(tup)\n\ndef tup_string17(tup):\n  return ''.join(tup)\n\ndef tup_string18(tup):\n  return ''.join(tup)\n\ndef tup_string19(tup):\n  return ''.join(tup)\n\ndef tup_string20(tup):\n  return ''.join(tup)\n\ndef tup_string21(tup):\n  return ''.join(tup)\n\ndef tup_string22(tup):\n  return ''.join(tup)\n\ndef tup_string23(tup):\n  return ''.join(tup)\n\ndef tup_string24(tup):\n  return ''.join(tup)\n\ndef tup_string25(tup):\n  return ''.join(tup)\n\ndef tup_string26(tup):\n  return ''.join(tup)\n\ndef tup_", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return \"\".join(tup)\n\ntup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    # TODO: write your code here\n    return ''.join(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    \"\"\"\n    Takes a tuple and converts it to a string\n    >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    True\n    \"\"\"\n    return str(tup)\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    a = \"\".join(tup)\n    return a\n", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    string=\"\"\n    for i in tup:\n        string=string+i\n    return string\n#Test", "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n# Write a function to convert tuple to a string."], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x<0, nums))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(number_list):\n    return sum(lambda x: x < 0, number_list)\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n# test above function\nnumbers = [2, 4, -6, -9, 11, -12, 14, -5, 17]", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(l):\n    return sum(filter(lambda x:x<0,l))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    return sum(lambda x: x if x>0 else 0 for x in nums)\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    return sum(filter(lambda x:x<0, nums))\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    nums = filter(lambda x: x < 0, nums)\n    return sum(nums)\n\ndef test_sum_negativenum():\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum(filter(lambda x:x<0,numbers))", "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n# +\n# # %load test_sum_negativenum.py\nfrom nose.tools import assert_equal\n\n\ndef sum_negativenum(lst):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    \"\"\"\n    return sum(filter(lambda x: x < 0, lst))\n\n\ndef test_sum_negativenum():\n    lst = [2, 4, -6, -9, 11, -12, 14, -5, 17]\n    assert_equal(sum_negativenum(lst), -32)\n    lst = [-10, -4, 2]\n    assert_equal(sum_negativenum(lst), -8)\n    lst = [-2, 1, 3, 10]\n    assert_equal(sum_negativenum(lst), -5)\n    lst = [1, 2, 3, 4, 5]\n    assert_equal(sum_negativenum(lst), 0)\n    lst = [-5, 10, 20, 30]\n    assert_equal(sum_negativenum(lst), -50)\n\n\n# -\n\nrun_test(test_sum_negativenum)\n\nsum_negativenum([-10, -4, 2])\n\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,operation):\n    res = arr[0]\n    for i in range(1,len(arr)):\n        res = operation(res,arr[i])\n        if i == len(arr)-1:\n            return \"ODD\" if res%2 else \"EVEN\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, r):\n    x = arr[-1]\n    if p==0:\n        return \"EVEN\" if x%2==0 else \"ODD\"\n    if x%2==0:\n        if r<0:\n            return \"ODD\"\n        return check_last(arr[:-1], p-1, r-1)\n    else:\n        if r<0:\n            return \"EVEN\"\n        return check_last(arr[:-1], p-1, r)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,x):\n    if p == 0:\n        return \"EVEN\"\n    elif p == 1:\n        return \"ODD\"\n    else:\n        if x % 2 == 0:\n            return check_last(arr,p-1,x//2)\n        else:\n            return check_last(arr,p-1,x*3+1)\n\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\n# Write your code here\ndef check_last(arr,n,p):\n    num = arr[n-1]\n    if(p%2 == 0):\n        if(num%2 == 0):\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    else:\n        if(num%2 == 0):\n            return \"ODD\"\n        else:\n            return \"EVEN\"", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,op):\n    #Your code here\n    if op == 0:\n        return arr[len(arr)-1]\n    else:\n        return check_last(arr[::-1],p-1,op)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr,p,q):\n    # code here\n    res = arr[-1]\n    for i in range(p):\n        res = (res + q)%2\n    if res == 0:\n        return \"ODD\"\n    else:\n        return \"EVEN\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,val):\n    if(len(arr)==0):\n        return \"EMPTY\"\n    else:\n        if(p==0):\n            return str(arr[-1])\n        else:\n            if(val%2==0):\n                return check_last(arr[:-1],p-1,val)\n            else:\n                return check_last(arr[:-1],p-1,val+1)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    for i in range(p):\n        arr = [q*x for x in arr]\n    if arr[-1]%2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, q):\n    print(arr)\n    if len(arr) == 1:\n        return \"EVEN\" if arr[0]%2 == 0 else \"ODD\"\n\n    if p == 0:\n        return \"ODD\" if arr[len(arr)-1]%2 == 0 else \"EVEN\"\n\n    arr = [arr[i] if i < len(arr) - q else arr[i%len(arr)] for i in range(len(arr))]\n\n    return check_last(arr, p-1, q)\n", "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, n):\n    if p==0:\n        return \"EVEN\"\n    if arr[-1]%2==0:\n        return \"EVEN\"\n    else:\n        return \"ODD\""], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom math import sqrt\n\ndef hexagonal_num(n):\n    return 6 * (n ** 2) - 6 * n\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return int((n*(n + 1)) / 2)\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nimport math\n\ndef hexagonal_num(n):\n    n = n + 1\n    return n * (2 * n - 1)\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nfrom math import floor\n\n\ndef hexagonal_num(n: int):\n    return floor((n * (2 * n - 1)) / 2)\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    h = 0\n    for i in range(1, n+1):\n        h += 2*i - 1\n    return h\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nfrom math import sqrt\n\n\ndef hexagonal_num(n):\n    side = 1\n    index = n - 1\n    total = 0\n\n    while index > 0:\n        side += 1\n        index -= 1\n\n    while side > 0:\n        side -= 1\n        total += side * (2 * side - 1)\n\n    return total\n\n\ndef test_hexagonal_num():\n    assert hexagonal_num(10) == 190", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom math import sqrt\nfrom typing import TypeVar, List, Type, Callable\n\nT = TypeVar(\"T\")\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"\n    Find greatest common divisor of two numbers.\n    >>> gcd(4, 2)\n    2\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\"\n    Find least common multiple of two numbers.\n    >>> lcm(4, 2)\n    8\n    \"\"\"\n    return a * b // gcd(a, b)\n\n\ndef combine_list(lst: List[T], *, head: Callable[[T], T], tail: Callable[[List[T]], List[T]]) -> List[T]:\n    if len(lst) == 0:\n        return []\n    else:\n        return [head(lst[0])] + combine_list(lst[1:], head=head, tail=tail)\n\n\ndef pentagonal_num(n: int) -> int:\n    \"\"\"\n    Find the nth pentagonal number.\n    >>> pentagonal_num(10)\n    272\n    >>> pentagonal_num(20)\n    4950\n    \"\"\"\n    return n * (3 * n - 1) // 2\n\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Find the nth hexagonal number.\n    >>> hexagonal_num(10)\n    190\n    >>> hexagonal_num(20)\n    13527\n    \"\"\"\n    return n * (2 * n - 1)\n\n\ndef heptagonal_num(n: int) -> int:\n    \"\"\"\n    Find the nth heptagonal number.\n    >>> heptagonal_num(10)\n    1365\n    >>> heptagonal_num(20)\n    34921\n    \"\"\"\n    return n * (5 * n - 3) // 2\n\n\ndef octagonal_num(n: int) -> int:\n    \"\"\"\n    Find the nth octagonal number.", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\nfrom math import sqrt\nfrom typing import Callable\nfrom typing import Tuple\n\n\ndef hexagonal_num(n: int) -> int:\n    r\"\"\"\n    Solves the problem in the way that:\n    * the difference between two adjacent hexagonal numbers is 6.\n    * the nth hexagonal number is the sum of n * 6.\n\n    >>> hexagonal_num(10)\n    190\n    >>> hexagonal_num(200)\n    300200\n    \"\"\"\n    return n * 6 + n * (n + 1) // 2\n\n\ndef hexagonal_num_math(n: int) -> int:\n    \"\"\"\n    >>> hexagonal_num_math(10)\n    190\n    >>> hexagonal_num_math(200)\n    300200\n    \"\"\"\n    return int(n * sqrt(3) + n * (3 - sqrt(3)) / 2)\n\n\ndef main() -> None:\n    assert hexagonal_num(10) == 190\n    assert hexagonal_num(200) == 300200\n    print(\"PASS\")\n\n", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom math import sqrt\n\n\ndef hexagonal_num(n):\n    # you have to write this function\n    h = 0\n    for i in range(1, n):\n        h += i\n    return h\n\n\ndef hexagonal_num_nicer(n):\n    return (n * (n + 1)) // 2", "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\nfrom math import sqrt\n\n# define functions\ndef hexagonal_num(n):\n    x = n * (2 * n - 1) // 2\n    return x\n\ndef test_hexagonal_num():\n    assert hexagonal_num(10) == 190\n\n# main code"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\nimport pytest\n\ndef cal_electbill(kwh):\n    return kwh*0.275\n\ndef test_cal_electbill():\n    assert cal_electbill(100) == pytest.approx(27.5)\n    assert cal_electbill(75) == pytest.approx(24.625)\n    assert cal_electbill(60) == pytest.approx(21.6)\n    assert cal_electbill(50) == pytest.approx(18.75)\n\ndef test_cal_electbill_zero():\n    assert cal_electbill(0) == 0\n\ndef test_cal_electbill_float():\n    assert cal_electbill(100.5) == pytest.approx(27.625)\n    assert cal_electbill(-100.5) == pytest.approx(-27.625)\n\ndef test_cal_electbill_str():\n    assert cal_electbill(\"100\") == pytest.approx(27.5)\n    assert cal_electbill(\"-100\") == pytest.approx(-27.5)\n    assert cal_electbill(\"a100\") == pytest.approx(27.5)\n\ndef test_cal_electbill_list():\n    assert cal_electbill([1, 2, 3, 4]) == pytest.approx(10.5)\n\ndef test_cal_electbill_dict():\n    assert cal_electbill({1:100, 2:100, 3:100, 4:100}) == pytest.approx(21.0)", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    \"\"\"\n    :param kwh: number of kilowatt hours consumed\n    :return: total cost of electricity for the kwh amount of energy\n    \"\"\"\n    if kwh > 1200:\n        return (kwh * 0.16) + (kwh * 0.05)\n    else:\n        return (kwh * 0.15) + (kwh * 0.04)\n\n\ndef main():\n    print(cal_electbill(100))\n    print(cal_electbill(125))\n    print(cal_electbill(150))\n    print(cal_electbill(1200))\n\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kilo):\n    \"\"\"\n    Calculate electricity bill\n    \"\"\"\n    return kilo*0.25\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(hours):\n    rate = 0.012 # 1.2%\n    return round(hours * rate,2)\n\n# Test your code", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\nimport math\n\n\ndef cal_electbill(kwh):\n    \"\"\"\n    Returns:\n      The electricity bill.\n    \"\"\"\n    return round(0.1299 + 0.0028 * math.pow(kwh, 2) - 0.00028 * math.pow(kwh, 3), 2)", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    bill=kwh*20\n    return bill", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kWh):\n    return round(kWh*0.125, 2)\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(hours):\n    bill = 0.00\n    if hours == 0:\n        bill = 0.00\n    elif hours < 8:\n        bill = 15.40\n    elif hours < 12:\n        bill = 23.55\n    elif hours < 18:\n        bill = 28.75\n    else:\n        bill = 24.00\n    return round(bill,2)\n\n# print(\"Your electricity bill for the day was $%.2f\" % cal_electbill(12))\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(kwh):\n    bill = kwh * 0.24 #24 cents per kwh\n    return bill\n", "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(hours):\n    \"\"\"\n    Calculate electricity bill\n    \"\"\"\n    rate = 0.20\n    bill = hours * rate\n    return bill\n\ndef test_cal_electbill():\n    assert cal_electbill(75)==246.25\n\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(nums):\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n\n    return count/len(nums)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\nfrom statistics import mean\n\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.15\n    >>> zero_count([0, 0, 0])\n    1.0\n    >>> zero_count([1, 0, 0, 0, 0])\n    0.75\n    \"\"\"\n    return round(mean([x == 0 for x in nums]), 2)\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\nimport math\ndef zero_count(arr):\n    length = len(arr)\n    arr = [x for x in arr if x != 0]\n    return (len(arr)/length)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(numbers):\n    return sum([num == 0 for num in numbers])/len(numbers)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    '''\n    >>> arr = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]\n    >>> zero_count(arr)\n    0.15\n    >>> arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    >>> zero_count(arr)\n    1.0\n    >>> arr = [-1, 2, 3, 0, -4, -5, 0, 1, -6, -7, 0, 0, 0]\n    >>> zero_count(arr)\n    0.408\n    >>> arr = [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\n    >>> zero_count(arr)\n    0.204\n    '''\n    count = 0\n    for number in arr:\n        if number == 0:\n            count += 1\n    return count / len(arr)\n\n# TODO: Write a function to find the ration of zeroes in an array of integers.\ndef test_zero_count():\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.15\n    assert zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1.0\n    assert zero_count([-1, 2, 3, 0, -4, -5, 0, 1, -6, -7, 0, 0, 0]) == 0.408", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\nimport math\n\ndef zero_count(array):\n    #Write your code here.\n    count = 0\n    for i in array:\n        if i == 0:\n            count += 1\n    return count / len(array)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(ints):\n    return float(sum(int(i) for i in ints if int(i) == 0)) / len(ints)\n\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\n# O(n^2)\ndef zero_count(array):\n    counter = 0\n    for i in array:\n        if i == 0:\n            counter += 1\n    return counter / len(array)", "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(nums):\n    count = 0\n    for i in nums:\n        if i == 0:\n            count = count + 1\n    return count/len(nums)"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    # Base Case\n    if num <= 0:\n        return False\n    \n    # Edge Case\n    if num % 2 == 0:\n        return True\n    \n    # Recursive Case\n    return is_Sum_Of_Powers_Of_Two(num // 2) or is_Sum_Of_Powers_Of_Two(num - num // 2)", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(number):\n  powers = [2**i for i in range(32)]\n  #print(powers)\n  if number in powers:\n    return True\n  else:\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num < 0:\n        return False\n    \n    power = 0\n    while(num):\n        if (num & 1) == 1:\n            if(power == 0 or power == 1):\n                return False\n            if(power == 2):\n                return True\n            else:\n                return False\n        else:\n            power += 1\n        num >>= 1\n    \n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    sum = 0\n    while n:\n        if n & 1:\n            sum += n\n        n >>= 1\n    return sum == 0\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(number):\n    count = 0\n    for i in range(0, number):\n        if(number & (1 << i)) == 0:\n            count += 1\n    return count == 1\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    import math\n    if n <= 0:\n        return False\n    elif n % 2 == 1:\n        return False\n    elif math.log(n, 2) % 1 == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(N):\n    if N == 0: return False\n    if N & (N-1) != 0: return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    def is_Sum_Of_Powers_Of_Two_Helper(a,b):\n        if (a == 0 and b == 0) or (a == 1 and b == 0) or (a == 1 and b == 1) or (a == 0 and b == 1):\n            return True\n        else:\n            return False\n\n    a = 1\n    b = n\n    while a <= b:\n        if is_Sum_Of_Powers_Of_Two_Helper(a,b):\n            return True\n        a *= 2\n        b *= 2\n\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n < 0:\n        return False\n\n    if n == 0:\n        return True\n\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    if (num & (num-1)) == 0: return True\n    if (num >> 1) == 0: return False\n    if num % 2 != 0: return False\n    return is_Sum_Of_Powers_Of_Two(num // 2)\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * 3.14 * radius\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\n\ndef circle_circumference(r):\n    circumference = 2 * math.pi * r\n    return circumference\n\n#assert circle_circumference(10)==62.830000000000005", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    return 2*3.14159265359*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    circumference = 2 * math.pi * radius\n    return circumference\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(r):\n    #return r * 3.14\n    return 3.14 * r ** 2\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    pi = 3.14159\n    return 2*pi*radius\n\ncircle_circumference(10)\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2*math.pi*radius\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    # radius = float(input())\n    return 2 * 3.14 * radius\n\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nfrom math import pi\n\ndef circle_circumference(radius):\n    return pi * radius * 2\n", "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    circumference = 2 * pi * radius\n    return circumference\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup):\n    return [x for x in tup for _ in range(tup.count(x))]\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuples):\n  singles = []\n  for t in tuples:\n    for i in range(len(t)):\n      if t.count(t[i]) == 1:\n        singles.append(t[i])\n  return singles", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nimport unittest\n\n\ndef extract_singly(tuples_list):\n    singly_occurring = []\n    for tuple in tuples_list:\n        if tuple not in singly_occurring:\n            singly_occurring.append(tuple)\n    return singly_occurring\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup):\n    return list(set(reduce(lambda x,y: x+y, tup)))", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom itertools import chain, groupby\n\n\ndef extract_singly(t_list):\n    singly_occurred = [val for t in t_list for val, count in groupby(t) if count == 1]\n    singly_occurred.sort()\n    return singly_occurred\n\n\ndef main():\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\n    print(extract_singly([1, 2, 2, 3, 3, 4, 4, 5]))\n    print(extract_singly([]))\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuples):\n    singly = []\n    for tuple in tuples:\n        if tuple.count(tuple[0]) == 1:\n            singly.append(tuple[0])\n    return singly\n\n\ndef test_extract_singly():\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom typing import List\nimport re\n\n\ndef extract_singly(tuple_list: List[tuple]):\n    return [e for e in tuple_list for _ in range(tuple_list.count(e)) if tuple_list.count(e) == 1]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup_list):\n    return list(set(x for tup in tup_list for x in tup))\n\n#test", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\nfrom itertools import chain\n\n\ndef extract_singly(tuplist):\n    return [item for item, count in chain.from_iterable(map(lambda x: [(item, count) for item, count in x.items() if count == 1], tuplist)) if item]\n\n", "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom typing import List\n\n\ndef extract_singly(t_list: List[tuple]) -> List[int]:\n    res: List[int] = []\n    for t in t_list:\n        if len(t) == 1:\n            res.append(t[0])\n    return res\n\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    return lst\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    l = len(arr)\n    for i in range(l):\n        j = l - 1\n        while j >= 0 and arr[j] > arr[i]:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n            if j == 0:\n                arr = arr[1:] + arr[0:1]\n                j = l - 1\n    return arr\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\n# O(n^2) time | O(1) space\ndef pancake_sort(numbers):\n    if len(numbers) <= 1:\n        return numbers\n    largest_index = 0\n    for index in range(1, len(numbers)):\n        if numbers[index] > numbers[largest_index]:\n            largest_index = index\n    largest_number = numbers[largest_index]\n    numbers[largest_index] = numbers[0]\n    numbers[0] = largest_number\n    reversed_numbers = []\n    for number in numbers:\n        reversed_numbers.insert(0, number)\n    return reversed_numbers + pancake_sort(numbers[1:])\n\n# O(n log n) time | O(1) space\ndef pancake_sort_v2(numbers):\n    if len(numbers) <= 1:\n        return numbers\n    largest_number = numbers[0]\n    largest_index = 0\n    for index in range(1, len(numbers)):\n        if numbers[index] > largest_number:\n            largest_number = numbers[index]\n            largest_index = index\n    if largest_number == numbers[largest_index]:\n        return pancake_sort_v2(numbers)\n    numbers[largest_index], numbers[0] = numbers[0], numbers[largest_index]\n    reversed_numbers = []\n    for number in numbers:\n        reversed_numbers.insert(0, number)\n    return reversed_numbers + pancake_sort(numbers[1:])", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    for i in reversed(range(len(arr))):\n        l = arr[i]\n        j = 0\n        for k in range(i):\n            if arr[k] > l:\n                break\n            j += 1\n        if j == i:\n            continue\n        arr = arr[j:i+1] + arr[0:j] + arr[i+1:]\n    return arr\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    result = []\n    n = len(arr)\n    while n:\n        i = 0\n        while i < n and arr[i] > arr[n-1]:\n            result.append(n)\n            i += 1\n        if i == n:\n            break\n        result.append(i)\n        n -= 1\n    return result\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(list_of_numbers):\n\n    pass\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(a):\n    stack = []\n    for i in range(len(a)-1, -1, -1):\n        num = a[i]\n        while len(stack) > 0 and stack[-1] > num:\n            a[stack.pop()] = a[i]\n        stack.append(i)\n    for i in range(len(stack)):\n        a[stack[-1]] = a[i]\n\ndef test_pancake_sort():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\ntest_pancake_sort()", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(elements):\n    n = len(elements)\n    stack = []\n\n    for i in range(n):\n        j = i\n        while len(stack) > 0 and elements[stack[-1]] > elements[j]:\n            stack.append(j)\n            j = stack.pop()\n\n        stack.append(j)\n\n    return elements[stack]\n\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\nfrom __future__ import print_function\n\ndef pancake_sort(arr):\n    n = len(arr)\n    if n == 0:\n        return arr\n    for i in range(n, 0, -1):\n        if arr[i] == i:\n            continue\n        idx = i - 1\n        while idx > 0 and arr[idx] > arr[i]:\n            arr[idx + 1] = arr[idx]\n            idx -= 1\n        arr[idx + 1] = arr[i]\n    return arr\n\ndef test_pancake_sort():\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n", "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sorts a list in place by using pancake sort.\n\n    Args:\n        arr: the list to sort\n    Returns:\n        A new array with the same elements in sorted order\n    \"\"\"\n    def pancake_sort_aux(arr, n):\n        for i in range(n):\n            max_idx = i\n            for j in range(i, n):\n                if arr[j] > arr[max_idx]:\n                    max_idx = j\n            if max_idx != i:\n                arr[max_idx], arr[i] = arr[i], arr[max_idx]\n                pancake_sort_aux(arr, max_idx)\n\n    pancake_sort_aux(arr, len(arr))\n    return arr"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\nfrom functools import reduce\n\n\ndef count_samepair(lis1,lis2,lis3):\n    # Write your code here.\n    #print(lis1,lis2,lis3)\n    pair=reduce(lambda x,y:x+y,lis1)\n    dic={}\n    for i in pair:\n        if i in dic.keys():\n            dic[i]=dic[i]+1\n        else:\n            dic[i]=1\n    return sum([k for k in dic.keys() if dic[k]==2])", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                count+=1\n                break\n    return count\n\ndef find_missing_number(list):\n    missing = []\n    if len(list)==0:\n        return []\n    for i in range(1,len(list)+1):\n        if list.count(i)==0:\n            missing.append(i)\n    return missing\n\ndef merge_sort(list):\n    if len(list)==0 or len(list)==1:\n        return list\n    mid = len(list)//2\n    left_part = merge_sort(list[:mid])\n    right_part = merge_sort(list[mid:])\n    return merge(left_part,right_part)\n\ndef merge(list1,list2):\n    res = []\n    while len(list1)>0 and len(list2)>0:\n        if list1[0]<list2[0]:\n            res.append(list1[0])\n            list1.pop(0)\n        else:\n            res.append(list2[0])\n            list2.pop(0)\n    if len(list1)>0:\n        res.extend(list1)\n    if len(list2)>0:\n        res.extend(list2)\n    return res\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(x,y,z):\n    a,b,c = 0,0,0\n    for i in x:\n        for j in y:\n            for k in z:\n                if i==j and j==k:\n                    a = a + 1\n    return a\n\n\n# TEST CASES", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    c=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c+=1\n    return c\n# test case: 3", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(a,b,c):\n    count=0\n    for i in a:\n        for j in b:\n            for k in c:\n                if i==j and j==k:\n                    count+=1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(lst1,lst2,lst3):\n    return len(lst1)\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(l1, l2, l3):\n    return len(set(l1) & set(l2) & set(l3))\n\n# print(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\n\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(li1, li2, li3):\n    count = 0\n    for i in li1:\n        for j in li2:\n            if i == j:\n                for k in li3:\n                    if i == k:\n                        count += 1\n    return count\n", "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(arr1,arr2,arr3):\n    count=0\n    for i in range(0,len(arr1)):\n        if(arr1[i]==arr2[i] and arr2[i]==arr3[i]):\n            count+=1\n    return count\n\n#print(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom itertools import combinations\n\n\ndef find_lists(lists):\n    return len(combinations(lists, 2))\n\n\n# --------------\n# Create a class named Marks with two attributes roll_no and name.\n# Write a method to add marks for the marks scored in the exam.", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(t):\n    count = 0\n    for i in range(len(t)):\n        if len(t[i]) > 1:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tuple_list):\n    count = 0\n    for list in tuple_list:\n        if len(list) != 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom itertools import chain\n\ndef find_lists(t):\n    return len(list(chain.from_iterable(t)))\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom typing import Tuple\nfrom itertools import chain\n\ndef find_lists(tuple_input: Tuple[list]) -> int:\n    lists = [list(filter(lambda x: x is not None, tuple_input))]\n    length = len(lists)\n    for i in range(1, length):\n        lists.extend([list(filter(lambda x: x is not None, t)) for t in chain.from_iterable(lists[i])])\n    return len(lists) - 1", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom typing import List, Union\n\nT = List[Union[List[int], List[List[int]]]]\n\n\ndef find_lists(tuple_list: T) -> int:\n    count = 0\n    for t in tuple_list:\n        if isinstance(t, list):\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    return tup.count([1,2,3,4])\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\n# FIND_LISTS :: (Int, Int) -> Int\ndef find_lists(tup):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    >>> assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    >>> assert find_lists((1, 2, 3, 4, 5, 6, 7, 8)) == 0\n    \"\"\"\n    # (Int, Int) -> Int\n    # return len(filter(is_list, tup))\n    return sum(map(is_list, tup))\n\n\n# GENERATORS\n\n# FIBONACCI :: Int -> [Int]\ndef fibonacci(n):\n    \"\"\"\n    Write a function to return the nth number in the Fibonacci sequence.\n    >>> assert fibonacci(10) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> assert fibonacci(0) == [0]\n    >>> assert fibonacci(1) == [1]\n    >>> assert fibonacci(2) == [1, 1]\n    >>> assert fibonacci(3) == [1, 1, 2]\n    >>> assert fibonacci(4) == [1, 1, 2, 3]\n    \"\"\"\n    # Int -> [Int]\n    a, b = 0, 1\n    if n < 2:\n        yield a\n    else:\n        while n > 0:\n            yield b\n            a, b = b, a + b\n            n -= 1\n\n\ndef fibonacci_gen(n):\n    \"\"\"\n    Write a generator function to return the nth number in the Fibonacci sequence.\n    >>> assert list(fibonacci_gen(10)) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> assert list(fibonacci_gen(0)) == [0]\n    >>> assert", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(list):\n    count = 0\n    for i in list:\n        if (len(i)>0):\n            count+=1\n    return count\n", "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\nfrom typing import List\n\n\ndef find_lists(lists: List[List[int]]) -> int:\n    count = 0\n    for list in lists:\n        count += 1\n    return count\n\n\ndef find_lists_v2(lists: List[List[int]]) -> int:\n    count = 0\n    for list in lists:\n        for x in list:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(lst,n):\n    if len(lst) <= n:\n        return 0\n    dp = [0 for x in range(n)]\n    dp[0] = lst[0]\n    for i in range(1,n):\n        dp[i] = dp[i-1]+abs(dp[i-1]-lst[i])\n    return sum(dp)\n\n\n# Test", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(numbers,n):\n    result=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            result+=abs(numbers[i]-numbers[j])\n    return result\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    if n<2:\n        return 0\n    else:\n        s1=0\n        for i in range(n):\n            for j in range(n):\n                if i==j:\n                    continue\n                else:\n                    s1 += abs(arr[i]-arr[j])\n        return s1\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\n# Using list comprehension \n# Time complexity: O(n^2)\ndef sum_pairs(arr, size):\n    res = 0\n    for i in range(0, size):\n        for j in range(i + 1, size):\n            res += abs(arr[i] - arr[j])\n    return res\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    result=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            result=result+abs(arr[i]-arr[j])\n    return result", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    # Complete this function\n    # pairwise sum of array elements\n    pairwise_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            pairwise_sum += abs(arr[i]-arr[j])\n    return pairwise_sum\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,n):\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += abs(arr[i] - arr[j])\n    return res\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, size):\n    sum = 0\n    for i in range(size):\n        for j in range(size):\n            if(i == j):\n                continue\n            else:\n                sum += abs(arr[i] - arr[j])\n    return sum\n\n# test 1\narr = [1,8,9,15,16]", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    res = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            res += abs(arr[i] - arr[j])\n    return res\n", "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,n):\n\tsum = 0\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tsum = sum + abs(arr[i]-arr[j])\n\treturn sum\n\ndef test_sum_Pairs():\n\tassert sum_Pairs([1,8,9,15,16],5) == 74\n\tassert sum_Pairs([4,5,1,2,7],5) == 54\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(n):\n            max_diff = max(abs(arr[i]-arr[j]),max_diff)\n    return max_diff", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    #Write your code here\n    max_diff = 0\n    for i in range(n-1):\n        max_diff = max(max_diff, abs(arr[i+1]-arr[i]))\n    return max_diff\n\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    arr.sort()\n    max_diff = -10000\n    for i in range(n-1):\n        if(arr[i+1]-arr[i]>max_diff):\n            max_diff = arr[i+1]-arr[i]\n    return max_diff\n\n\narr = [1,2,3,4,5,6,7,8]\nn = len(arr)", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    maximum_diff = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            maximum_diff = max(maximum_diff,abs(arr[i] - arr[j]))\n    return maximum_diff\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    max_val = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) > max_val:\n                max_val = abs(arr[i]-arr[j])\n    return max_val\n\narr = (2,1,5,3)\nn = len(arr)", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n    '''\n    input: arr = [2,1,5,3], n = 4\n    output: 4\n    '''\n    max_diff = -999999999999999\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(A):\n\tmaximum = -1\n\tfor i in range(len(A)):\n\t\tfor j in range(i+1, len(A)):\n\t\t\tdiff = abs(A[j] - A[i])\n\t\t\tif maximum < diff:\n\t\t\t\tmaximum = diff\n\treturn maximum\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(array,number):\n\treturn max([max(array)-number,number-min(array)])", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr,n):\n\tarr = sorted(arr)\n\treturn arr[n-1]-arr[0]\n", "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,N):\n    arr.sort()\n    return max(arr[N-1]-arr[0],arr[-1]-arr[N-1])\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    total = 0\n    for letter in string:\n        total += ord(letter)\n    return total\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    total=0\n    for char in string:\n        total+=ord(char)\n    return total\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(str):\n    return ord(str)\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum(map(ord, string))\n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(input_str):\n    if input_str == \"\":\n        return 0\n    else:\n        input_str = input_str.replace(' ', '')\n        input_list = list(input_str)\n        return sum(ord(c) for c in input_list)\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(s):\n    n = 0\n    for i in s:\n        n+=ord(i)\n    return n\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(str):\n    return sum(map(ord, str))\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    i=0\n    result=0\n    while i<len(string):\n        result=result+(ord(string[i]))\n        i=i+1\n    return result\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    \"\"\"\n    >>> ascii_value_string(\"python\")\n    112\n    \"\"\"\n    import numpy as np\n    ascii_value = np.array([ord(char) for char in string])\n    return ascii_value.sum()\n", "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    # get the ascii value of each character and sum the values\n    ascii_value = 0\n    for char in string:\n        ascii_value += ord(char)\n    return ascii_value\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, start_row, start_col):\n    assert(len(triangle) > start_row)\n    assert(len(triangle[start_row]) > start_col)\n    \n    # find maximum sum for the last triangle row \n    max_sum = 0\n    for col in range(start_col, len(triangle[start_row])):\n        max_sum = max(max_sum, triangle[start_row][col] + max_path_sum(triangle, start_row+1, col+1))\n    \n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(matrix, i, j):\n    if (i > j):\n        return matrix[i][j]\n    return max(\n        matrix[i][j] + max_path_sum(matrix, i + 1, j),\n        matrix[i][j] + max_path_sum(matrix, i, j - 1),\n        matrix[i][j] + max_path_sum(matrix, i + 1, j - 1)\n    )\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\n# My Solution\ndef max_path_sum(matrix, i, j):\n    if i == 0: return matrix[0][j]\n    elif i == j: return matrix[i][j]\n    else: return max(matrix[i][j] + max(max_path_sum(matrix, i-1, j-1), max_path_sum(matrix, i-1, j), max_path_sum(matrix, i, j-1)), matrix[i][j])\n\n# Better Solution\ndef max_path_sum(matrix, i, j):\n    if i == 0: return matrix[0][j]\n    elif i == j: return matrix[i][j]\n    else:\n        left = max_path_sum(matrix, i-1, j-1)\n        down = max_path_sum(matrix, i-1, j)\n        right = max_path_sum(matrix, i, j-1)\n        return max(matrix[i][j] + left, matrix[i][j] + down, matrix[i][j] + right)\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n^2)\n# Difficulty: easy", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, i, j):\n    if i == triangle.shape[0] - 1 and j == 0:\n        return triangle[i][j]\n    elif i == triangle.shape[0] - 1:\n        return triangle[i][j] + max(triangle[i][j], triangle[i][j+1])\n    elif j == 0:\n        return triangle[i][j] + max(triangle[i][j], triangle[i+1][j])\n    else:\n        return max(triangle[i][j], triangle[i][j+1], triangle[i+1][j]) + max_path_sum(triangle, i+1, j)\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom functools import lru_cache\n\n@lru_cache()\ndef path_sum(triangle, level, col):\n    if level == 0:\n        return triangle[level][col]\n    else:\n        return triangle[level][col] + max(path_sum(triangle, level - 1, col), path_sum(triangle, level - 1, col + 1))\n\n\ndef max_path_sum(triangle, level, col):\n    return path_sum(triangle, level, col)\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, column_start, row_start):\n    if triangle is None or len(triangle) == 0:\n        return 0\n    current_max = triangle[row_start][column_start]\n\n    if column_start < len(triangle[0]) - 1:\n        current_max = max(current_max, triangle[row_start][column_start + 1] + triangle[row_start][column_start])\n\n    if row_start < len(triangle) - 1:\n        current_max = max(current_max, triangle[row_start + 1][column_start] + triangle[row_start + 1][column_start + 1] + triangle[row_start][column_start])\n\n    return current_max\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\nfrom functools import reduce\n\n\ndef max_path_sum(triangle, row, col):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :type row: int\n    :type col: int\n    :rtype: int\n    \"\"\"\n    if row == 0 and col == 0:\n        return triangle[row][col]\n\n    down = triangle[row - 1][col]\n    up = triangle[row - 1][col + 1]\n    left = triangle[row][col - 1]\n    right = triangle[row][col + 1]\n\n    return max(down, up, left, right)\n\n\ndef max_path_sum_brute_force(triangle, row, col):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :type row: int\n    :type col: int\n    :rtype: int\n    \"\"\"\n    if row == 0 and col == 0:\n        return triangle[row][col]\n\n    down = max_path_sum_brute_force(triangle, row - 1, col)\n    up = max_path_sum_brute_force(triangle, row - 1, col + 1)\n    left = max_path_sum_brute_force(triangle, row, col - 1)\n    right = max_path_sum_brute_force(triangle, row, col + 1)\n\n    return max(down, up, left, right)\n\n\ndef test_max_path_sum():\n    assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    assert max_path_sum_brute_force([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom typing import List\n\n\ndef max_path_sum(triangle: List[List[int]], row: int, col: int) -> int:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    if row == 0:\n        return triangle[0][col]\n    else:\n        left = triangle[row - 1][col]\n        up = triangle[row][col - 1]\n        return max(left + triangle[row][col], up + triangle[row - 1][col])\n\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\n# NOTE: this is not a good solution\ndef max_path_sum(triangle, x, y):\n    if x == 0 or y == 0:\n        return triangle[0][0]\n\n    if x == 1:\n        return max(triangle[x][y], triangle[x][y + 1])\n\n    if y == 1:\n        return max(triangle[x - 1][y], triangle[x][y])\n\n    return max(triangle[x - 1][y], triangle[x][y], triangle[x - 1][y + 1])\n", "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    max_so_far = triangle[row][col]\n    for i in xrange(row, col, -1):\n        if i == col:\n            max_so_far = max(max_so_far, triangle[i][col])\n        else:\n            max_so_far = max(max_so_far, triangle[i][col] + max(triangle[i][col-1], triangle[i][col]))\n    return max_so_far\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    if n%2==0:\n        return n-sum_digits_twoparts(n//2)\n    return sum_digits_twoparts(n//2)+n%2", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    digits = []\n    while n>0:\n        digits.insert(0,n%10)\n        n = n//10\n    if len(digits)==1:\n        return digits[0]\n    if digits[0]+digits[1]==10:\n        return sum_digits_twoparts(digits[0]) + sum_digits_twoparts(digits[1])\n    else:\n        return sum(digits)", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    if num <= 9:\n        return num\n    else:\n        while num > 0:\n            remainder = num % 10\n            num = int(num/10)\n            if remainder > num:\n                num = remainder\n    return num + 10 * sum_digits_twoparts(num)", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(number):\n    # create a list of digits and take sum\n    digits = list(str(number))\n    number_of_digits = len(digits)\n    sum = 0\n    for i in range(number_of_digits):\n        sum += int(digits[i])\n    # check if the sum of digits is equal to number\n    if sum == number:\n        return True\n    # if not return false\n    else:\n        return False\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    parts=0\n    for i in range(len(str(n))):\n        parts+=int(str(n)[i])\n    if parts%2==0:\n        return parts/2\n    else:\n        return parts/2+1", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(number):\n    if number==0:\n        return 0\n    if number<0:\n        return sum_digits_twoparts(-number)\n    digits=str(number)\n    if len(digits)==1:\n        return 9\n    max_sum=0\n    #sum_array=[]\n    for i in range(1,len(digits)):\n        if i%2==0:\n            result=int(digits[:i])\n        else:\n            result=int(digits[i:])\n        max_sum=max(max_sum,result+sum_digits_twoparts(result))\n    return max_sum\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    total=0\n    for i in range(len(str(num))):\n        total += int(str(num)[i])\n    if total%2 != 0:\n        total=total+1\n    return total/2", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\nimport math\ndef sum_digits_twoparts(num):\n    digit=0\n    part1=0\n    part2=0\n    while num>0:\n        digit=num%10\n        part1=part1*10+digit\n        part2=num-part1\n        num=part2\n    return part1+part2", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    if n < 10:\n        return n\n    else:\n        max_num = 0\n        max_sum = 0\n        for i in range(100):\n            sum = int(str(i)[0]) + int(str(i)[1])\n            if sum > max_sum:\n                max_num = i\n                max_sum = sum\n        return max_num\n", "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    if num == 0:\n        return 0\n    else:\n        return max(num%10, num//10) + sum_digits_twoparts(num//10)\n    "], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(arr: List[int], threshold: int) -> int:\n    pass\n\n\ndef main():\n    assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, limit):\n    N = len(arr)\n    dp = [[0]*N for _ in range(N)]\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(N):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= limit:\n                dp[i][j] = dp[j][i] + 1\n                if max_ending_here < dp[i][j]:\n                    max_ending_here = dp[i][j]\n                    max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\nfrom typing import List\n\n\ndef longest_subseq_with_diff_one(arr: List[int], sum_of_difference: int) -> int:\n    if sum_of_difference == 0:\n        return len(arr)\n    if len(arr) == 0:\n        return 0\n\n    max_length = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            max_length = max(max_length, longest_subseq_with_diff_one(arr[i:], sum_of_difference - 1) + 1)\n        else:\n            break\n    return max_length\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\n\ndef longest_subseq_with_diff_one(arr, n):\n    \"\"\"\n    The subsequence for the array will be a non-increasing subsequence where the difference between each element\n    and the previous one is 1.\n    :param arr: an array\n    :param n: the range of elements\n    :return: the longest subsequence\n    \"\"\"\n    # Base case - where the array length is 1, then the longest subsequence is also 1.\n    if len(arr) == 1:\n        return 1\n\n    # To store the lengths of the subsequences\n    lengths = defaultdict(int)\n\n    # The first element is always a subsequence of itself, so the length is 1.\n    lengths[arr[0]] = 1\n\n    # For the other elements, we check if the current element plus the previous element is 1.\n    # If so, then the previous element is a subsequence of the current element, so we add the length of\n    # the previous element to the length of the current element.\n    for i in range(1, n):\n        if arr[i] == arr[i - 1] + 1:\n            lengths[arr[i]] = lengths[arr[i - 1]] + 1\n\n    # Find the longest subsequence in the dict and return it.\n    return max(lengths.values())\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    table = {0:0}\n    \n    for i in range(n):\n        for j in range(1, i+1):\n            if j-arr[i] in table:\n                table[i] = max(table[i], j-table[j-arr[i]])\n            else:\n                table[i] = j\n    \n    return n-table[n-1]\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, sum):\n    if sum == 0:\n        return 0\n    elif sum < 0:\n        return None\n    elif len(arr) == 0:\n        return 0\n    elif arr[-1] == sum:\n        return 1 + longest_subseq_with_diff_one(arr[:-1], sum)\n    elif arr[0] == sum:\n        return 1 + longest_subseq_with_diff_one(arr[1:], sum)\n    else:\n        left = longest_subseq_with_diff_one(arr, sum - arr[0])\n        right = longest_subseq_with_diff_one(arr, sum - arr[-1])\n        return max(left, right) if left and right else 0\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    max_seq_len = 0\n    for i in range(n - 1):\n        for j in range(i+1, n):\n            current_seq_len = 1\n            while j < n and abs(arr[i] - arr[j]) == 1:\n                j += 1\n                current_seq_len += 1\n\n            max_seq_len = max(max_seq_len, current_seq_len)\n    \n    return max_seq_len\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(nums, diff):\n    if not nums:\n        return 0\n\n    # map to store the indices of each element\n    nums_map = {}\n    for i, num in enumerate(nums):\n        nums_map[num] = i\n\n    # list to store the indices of the diff_one_subseq\n    diff_one_subseq = [nums_map[nums[0]]]\n\n    # for all remaining numbers\n    for i in range(1, len(nums)):\n        # if the difference between the current element and the previous element is greater than diff, remove the previous element\n        if nums_map[nums[i]] - diff_one_subseq[-1] > diff:\n            diff_one_subseq.pop()\n\n        # keep increasing the longest diff_one_subseq by adding the current element\n        while nums_map[nums[i]] - diff_one_subseq[-1] <= diff:\n            diff_one_subseq.append(nums_map[nums[i]])\n\n        # return the length of the longest subsequence\n        return len(diff_one_subseq)\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    length = [0] * n\n\n    max_length = 0\n    for i in range(n):\n        length[i] = 1\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                length[j] = length[i] + 1\n                if max_length < length[j]:\n                    max_length = length[j]\n\n    return max_length\n\n", "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\n# Idea: \n# use sliding window\n# pick starting element of the window, and \n# keep adding elements to the window as long as the difference between the next element and the current sum \n# in the window is one. \n# If it's not 1, then take a step back and look for the next starting element.\n# Then move on to the next element in the window.\n\ndef longest_subseq_with_diff_one(array, diff):\n    longest = 0\n    sum_window = 0\n    for i in range(len(array)):\n        sum_window += array[i]\n        if sum_window == diff:\n            longest = max(longest, i - j + 1)\n        elif sum_window > diff:\n            sum_window -= array[j]\n            j += 1\n    return longest\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a, b, c):\n    flag = False\n    for i in range(a,b):\n        if i%c == 0:\n            flag = True\n            break\n    return flag\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(num,num1,num2):\n    if num == num1 or num == num2:\n        return True\n    elif num1 + num2 > num:\n        return does_Contain_B(num,num1+num2,num2)\n    else:\n        return does_Contain_B(num,num1,num2+num1)\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n#Function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(num, a, b):\n    return(num in range(a, b))\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_contain_b(num_1,num_2,num_3):\n    a = num_2\n    b = num_1\n    c = num_3\n    if a == num_1 and b == num_2 and c == num_3:\n        return True\n    else:\n        return False\n\n# assert does_contain_b(1,7,3) == True\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(n,limit):\n    res = []\n    for i in range(1,limit+1):\n        if (i%n) == 0:\n            res.append(i)\n    if n in res:\n        return True\n    else:\n        return False\n\n# print(does_Contain_B(1,7,3))", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(x,y,n):\n  #initialize the result to true\n  result = True\n  #go through the loop\n  for i in range(n):\n    #if the number is found\n    if (x in [1,3,5,7]) and (y in [1,3,5,7]):\n      #break the loop\n      break\n    #add 2 to n\n    n += 2\n  #return the result\n  return result", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    #Write your code here\n    count = 0\n    while True:\n        count = a + b + c\n        if count == 25:\n            break\n        elif count < 25:\n            b = b + 1\n            continue\n        elif count > 25:\n            c = c + 1\n            continue\n    if count == 25:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\n# +\n# #!./tests.sh", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    print(\"1\",b)\n    return b == a or does_Contain_B(a,b+1,c) or does_Contain_B(a,b-1,c)\n", "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a,b,c):\n    i=0\n    while i<a:\n        if i==b:\n            if i==c:\n                return True\n            return False\n        i=i+1\n    return False\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(num1, num2):\n    divisors = set(range(1,num1))\n    if num1 == num2:\n        return True\n    else:\n        for num in divisors:\n            if num == 1 or num == num2:\n                continue\n            if num1 % num == 0 and num2 % num == 0:\n                return False\n        return True\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a<0 or b<0:\n        print(\"error: must be positive integer\")\n        return False\n    else:\n        if a==1 or b==1:\n            print(\"coprime\")\n            return True\n        else:\n            for i in range(2,min(a,b)+1):\n                if a%i==0 and b%i==0:\n                    print(\"not coprime\")\n                    return False\n            print(\"coprime\")\n            return True\n\ndef main():\n    a = int(input(\"first number: \"))\n    b = int(input(\"second number: \"))\n    print(is_coprime(a,b))\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a,b):\n    c=a*b\n    if c==0:\n        return False\n    for i in range(1,c):\n        if c%i==0:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    return gcd(a,b) == 1\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1, num2):\n    if(num1 == 0 or num2 == 0):\n        return False\n    if(num1 == 1):\n        return num2 != 1\n    if(num2 == 1):\n        return num1 != 1\n    if(num1 == num2):\n        return True\n    for i in range(2, min(num1,num2)):\n        if((num1 % i == 0) and (num2 % i == 0)):\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(num1,num2):\n    if(num1 == 1):\n        return False\n    if(num2 == 1):\n        return False\n    for i in range(2,num1):\n        if(num1%i == 0 and num2%i == 0):\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a==1 or b==1:\n        return False\n    for i in range(2,b):\n        if a%i == 0 and b%i == 0:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(x,y):\n    return (x % y == 0) or (y % x == 0)\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    return a%b == 0\n", "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(num1, num2):\n    \"\"\"\n    A function to check whether the given two numbers are co-prime or not\n    \"\"\"\n    c = 0\n    for i in range(1, num2+1):\n        if num1 % i == 0 and num2 % i == 0:\n            c += 1\n            if c > 2:\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\ndef main():\n    arr = [3, 4, 2, 6, 5, 7, 1, 9]\n    merge_sort(arr)\n    print(arr)\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        merge_sort(left)\n        merge_sort(right)\n        \n        i = j = k = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n        \n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        \n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    \"\"\"\n    Sorts array with merge sort.\n    :param arr: input array\n    :return: sorted array\n    \"\"\"\n    # Base case\n    if len(arr) <= 1:\n        return arr\n    # Divide\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    # Conquer\n    left = merge_sort(left)\n    right = merge_sort(right)\n    # Merge\n    return merge(left, right)\n\n\ndef merge(left, right):\n    \"\"\"\n    Merges two sorted arrays.\n    :param left: left array\n    :param right: right array\n    :return: merged array\n    \"\"\"\n    i = j = k = 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom typing import List\n\n\ndef merge_sort(arr: List[int]) -> List[int]:\n    if len(arr) == 1:\n        return arr\n    middle = len(arr) // 2\n    left_arr = merge_sort(arr[:middle])\n    right_arr = merge_sort(arr[middle:])\n\n    merged_arr = []\n    left_idx = 0\n    right_idx = 0\n\n    while left_idx < len(left_arr) and right_idx < len(right_arr):\n        if left_arr[left_idx] < right_arr[right_idx]:\n            merged_arr.append(left_arr[left_idx])\n            left_idx += 1\n        else:\n            merged_arr.append(right_arr[right_idx])\n            right_idx += 1\n\n    while left_idx < len(left_arr):\n        merged_arr.append(left_arr[left_idx])\n        left_idx += 1\n\n    while right_idx < len(right_arr):\n        merged_arr.append(right_arr[right_idx])\n        right_idx += 1\n\n    return merged_arr\n\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom typing import List\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"\n    Recursively sorts an array using merge sort.\n\n    >>> merge_sort([3, 4, 2, 6, 5, 7, 1, 9])\n    [1, 2, 3, 4, 5, 6, 7, 9]\n    >>> merge_sort([5, 4, 3, 2, 1])\n    [1, 2, 3, 4, 5]\n    >>> merge_sort([1, 4, 3, 5, 2])\n    [1, 2, 3, 4, 5]\n    >>> merge_sort([])\n    []\n    >>> merge_sort([5, 4, 3, 2, 1, 4, 3, 5, 2])\n    [1, 2, 3, 4, 5, 4, 3, 5, 2]\n    >>> merge_sort([5, 4, 3, 2, 1, 4, 3, 5, 2, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n    [0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n    >>> merge_sort([5, 4, 3, 2, 1, 4, 3, 5, 2, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 5, 6,", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(nums):\n    def merge(left, right):\n        i, j, k = 0, 0, 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        while i < len(left):\n            result.append(left[i])\n            i += 1\n        while j < len(right):\n            result.append(right[j])\n            j += 1\n        return result\n\n    if len(nums) <= 1:\n        return nums\n\n    middle = len(nums) // 2\n    left = merge_sort(nums[:middle])\n    right = merge_sort(nums[middle:])\n    return merge(left, right)", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom random import randint\n\n\ndef merge(a, b, a_start, b_start, a_end, b_end):\n    \"\"\"\n    Merges two sorted sub-arrays of a\n    :param a: array to merge\n    :param b: array to merge\n    :param a_start: start index of array a\n    :param b_start: start index of array b\n    :param a_end: end index of array a\n    :param b_end: end index of array b\n    :return: a single sorted array\n    \"\"\"\n    i = a_start\n    j = b_start\n    merged = []\n    while i <= a_end and j <= b_end:\n        if a[i] <= b[j]:\n            merged.append(a[i])\n            i += 1\n        else:\n            merged.append(b[j])\n            j += 1\n    while i <= a_end:\n        merged.append(a[i])\n        i += 1\n    while j <= b_end:\n        merged.append(b[j])\n        j += 1\n    a[a_start:a_end+1] = merged\n\n\ndef merge_sort(a):\n    if len(a) <= 1:\n        return a\n    mid = int(len(a) / 2)\n    left = a[0:mid]\n    right = a[mid:]\n    merge_sort(left)\n    merge_sort(right)\n    merge(a, left, 0, 0, mid, len(left))\n    merge(a, right, mid, 0, len(a), len(right))\n    return a\n\n\n# Tests", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom typing import List\n\n\ndef merge_sort(array: List[int]):\n    if len(array) == 1:\n        return array\n    else:\n        middle_idx = len(array) // 2\n        left_sub_array = array[:middle_idx]\n        right_sub_array = array[middle_idx:]\n        left_sub_array = merge_sort(left_sub_array)\n        right_sub_array = merge_sort(right_sub_array)\n        return merge(left_sub_array, right_sub_array)\n\n\ndef merge(left_sub_array: List[int], right_sub_array: List[int]):\n    left_sub_array_idx = 0\n    right_sub_array_idx = 0\n    sorted_array = []\n    while left_sub_array_idx < len(left_sub_array) and right_sub_array_idx < len(right_sub_array):\n        if left_sub_array[left_sub_array_idx] <= right_sub_array[right_sub_array_idx]:\n            sorted_array.append(left_sub_array[left_sub_array_idx])\n            left_sub_array_idx += 1\n        else:\n            sorted_array.append(right_sub_array[right_sub_array_idx])\n            right_sub_array_idx += 1\n\n    if left_sub_array_idx < len(left_sub_array):\n        sorted_array += left_sub_array[left_sub_array_idx:]\n    if right_sub_array_idx < len(right_sub_array):\n        sorted_array += right_sub_array[right_sub_array_idx:]\n    return sorted_array", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(lst):\n    if len(lst) < 2:\n        return lst\n    mid = len(lst) // 2\n    left = merge_sort(lst[:mid])\n    right = merge_sort(lst[mid:])\n\n    merged = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            merged.append(left[0])\n            left.remove(left[0])\n        else:\n            merged.append(right[0])\n            right.remove(right[0])\n\n    merged += left\n    merged += right\n    return merged\n", "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(array):\n    if len(array) == 1:\n        return array\n\n    middle = len(array) // 2\n    left = array[:middle]\n    right = array[middle:]\n\n    return merge(merge_sort(left), merge_sort(right))\n\ndef merge(left, right):\n    result = []\n\n    left_index = 0\n    right_index = 0\n\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n\n    # Copy remaining elements of left and right arrays\n    result += left[left_index:]\n    result += right[right_index:]\n\n    return result\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\nimport unittest\n\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Given a, b, and c, return the x-value of the vertex of the parabola.\n\n    >>> parabola_vertex(5, 3, 2)\n    (-0.3, 1.55)\n    >>> parabola_vertex(-1, 1, -1)\n    (1, 0)\n    \"\"\"\n    # a = 4 * x^2 + 3 * x + 2\n    # b = 3 * x^2 + 4 * x + 1\n    # c = x^2 + 1\n    # Plug in the value of c: 2\n    # Find the discriminant: b^2 - 4ac = 3^2 - 4(4)(2) = 4 + 16 - 8 = 24\n    # The discriminant will be negative so the parabola opens upwards.\n    # Substitute x and y from the given equations for a quadratic equation:\n    # (y - 1) = -x^2 + 0.5x + 0.5\n    # Substitute x for y from the equation of the parabola:\n    # -x^2 + 0.5x + 0.5 = 0.5 * y - 1\n    # Subtract 1 from both sides:\n    # -x^2 + 0.5x + 0.4 = 0.5 * y\n    # Combine like terms:\n    # 0.5x^2 + 0.5x + 0.4 = 0.5 * y\n    # Find the x-intercepts:\n    # 0.5x + 0.5 = 0.5 * y\n    # x + y = 1\n    # y = x + 1\n    # 0.5x^2 + 0.5x + 0.4 - 0.5 * y = 0.5 * y - 0.5 * y + 0.4 = 0\n    # Solve for x:\n    # 0.5x^2", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\n# Definition for a point.", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\nfrom math import sqrt\n\ndef parabola_vertex(a,b,c):\n    # I'm pretty sure I could make this work with 3 equations in 2 variables, but I'm lazy\n    # We know that the vertex is at the point where the parabola is perpendicular to the axis of symmetry\n    # Which means that at the vertex, the gradient of the parabola is zero.\n    #   d (y^2) / dx = 0\n    # Differentiating, we get\n    #   2y dy/dx + 2x dx/dx = 0\n    # But since the parabola is of the form y^2 = 4ax + 2bx + c, we have\n    #   2a dy/dx + 2b dx/dx = 0\n    # which simplifies to\n    #   dy/dx = -b / 2a\n    # Now substitute y = mx + n and plug back in\n    #   mx + n = -b / 2a\n    #   m = -n / (2a)\n    #   x = -b / (2am) + n / a\n    #   y = -b / (2am) + n / a + b / (4a^2)\n    #   y = (-n / (2a)) / (-b / (2am)) + (-b / (2am)) + (n / a) + b / (4a^2)\n    #   y = (-n / (2a)) / (-b / (2am)) + (-b / (2am)) + (n / a) + b / (4a^2)\n    #   y = (b + n / a) / (-b / (2am)) + b / (4a^2)\n    #   y = (b + n / a) / (-2a) + b / (4a^2)\n    #   y = (b + n / a) / (-2a) + b / (4a^2)\n    #   y = (b + n / a) / (-2a) + b / (4a^2)\n    #  ", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(x0, y0, m):\n    return -x0/(2*m), (y0 + x0**2*m)/m", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nimport math\n\ndef parabola_vertex(a,b,c):\n    \"\"\"\n    Compute the vertex of a parabola.\n\n    Parameters:\n    a (int): the coefficient of x^2\n    b (int): the coefficient of x\n    c (int): the constant\n\n    Returns:\n    vertex: a tuple of the form (x,y)\n    \"\"\"\n    # TODO: compute the vertex here and return it\n    vertex = (0,0)\n\n    return vertex\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    if b**2 - 4*a*c < 0:\n        return -1\n    d = b**2 - 4*a*c\n    x1 = (-b + d**0.5)/(2*a)\n    y1 = (-b - d**0.5)/(2*a)\n    return (x1,y1)\n\n# def parabola_vertex(a,b,c):\n#     if b**2 - 4*a*c < 0:\n#         return -1\n#     x1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n#     y1 = (-b - math.sqrt(b**2 - 4*a*c))/(2*a)\n#     return (x1,y1)\n\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a,b,c):\n    d=b**2-4*a*c\n    return(-b/(2*a),d/(2*a))\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a, b, c):\n    # calculate discriminant\n    disc = (4*b*c) - (a**2)\n    if disc < 0:\n        print('The parabola does not exist.')\n        return None\n    \n    # calculate the vertex\n    x1 = -b / (2*a)\n    y1 = - (a*x1**2) / (2*c)\n    # return the vertex\n    return (x1, y1)\n\n# Test function", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    x = -(b)/(2*a)\n    y = -(c)/(2*a)\n    return (x, y)\n", "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\nimport math\nimport random\n\n# Takes a, b, c and returns the vertex x, y\ndef parabola_vertex(a, b, c):\n    return (-b / 2 / a, math.sqrt(c * b / 4 / a ** 2) - b / 2 / a)\n\n# Takes a, b, c and returns a random vertex x, y\ndef random_parabola_vertex(a, b, c):\n    x_val = random.uniform(-5, 5)\n    y_val = -b / (2 * a) * x_val ** 2 + math.sqrt(c * b / (4 * a ** 2)) * x_val - (b / (2 * a))\n    return (x_val, y_val)\n\n# Unit tests"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(list_of_lists, index):\n    l=[]\n    for i in range(len(list_of_lists)):\n        l.append(list_of_lists[i][index])\n    return l\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nfrom typing import List\n\n\ndef specified_element(lst: List[List[int]], element_number: int) -> List[int]:\n    \"\"\"\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n    [1, 4, 7]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)\n    [2, 5, 1]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n    [3, 6, 9]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)\n    [2, 2, 5]\n    \"\"\"\n    result = []\n    for i in range(0, len(lst)):\n        result.append(lst[i][element_number])\n    return result\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(two_d_list, element):\n    if len(two_d_list)==0:\n        return []\n    elif two_d_list[0]==[]:\n        return specified_element(two_d_list[1:], element)\n    elif element==two_d_list[0][0]:\n        return [two_d_list[0][0]] + specified_element(two_d_list[1:], element)\n    else:\n        return specified_element(two_d_list[1:], element)\n\n\ndef test_specified_element():\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)==[3, 6, 9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 9)==[9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 11)==[]", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(array, position):\n    return [array[i][position] for i in range(len(array))]", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list, i):\n    res = []\n    for a in list:\n        if i < len(a):\n            res.append(a[i])\n    return res\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, element):\n    return [i for i in lst if element == i]\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, el):\n    i = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == el:\n                i.append(lst[i][j])\n    return i\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_2D, element_number):\n    list_of_list = []\n    for sublist in list_2D:\n        if sublist[element_number] not in list_of_list:\n            list_of_list.append(sublist[element_number])\n    return list_of_list\n\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef specified_element(mat, x):\n    result = []\n    for i in range(len(mat)):\n        for j in range(len(mat[i])):\n            if x == j:\n                result.append(mat[i][j])\n    return result\n\ndef specified_element1(mat, x):\n    result = []\n    for i in range(len(mat)):\n        result.append(mat[i][x])\n    return result\n", "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(list_2d,index):\n    result=[]\n    for i in range(len(list_2d)):\n        result.append(list_2d[i][index])\n    return result\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n# even_bit_toggle_number(5) should return 7\n# even_bit_toggle_number(10) should return 0\n# even_bit_toggle_number(11) should return 3\ndef even_bit_toggle_number(number):\n    # TODO: Write your code here\n    even_bit = 0\n    for i in range(1, len(bin(number))):\n        if(bin(number)[i] == '0'):\n            even_bit = even_bit + 2**i\n    return number ^ even_bit\n\n# # TODO: Test your code\n# assert even_bit_toggle_number(10) == 0\n# assert even_bit_toggle_number(5) == 7\n# assert even_bit_toggle_number(11) == 3\n# assert even_bit_toggle_number(55) == 17\n# assert even_bit_toggle_number(32) == 17\n# assert even_bit_toggle_number(0) == 0\n# assert even_bit_toggle_number(15) == 17\n# assert even_bit_toggle_number(45) == 57\n# assert even_bit_toggle_number(13) == 19\n\n\n# # TODO: Test your code\n# assert even_bit_toggle_number(10) == 0\n# assert even_bit_toggle_number(5) == 7\n# assert even_bit_toggle_number(11) == 3\n# assert even_bit_toggle_number(55) == 17\n# assert even_bit_toggle_number(32) == 17\n# assert even_bit_toggle_number(0) == 0\n# assert even_bit_toggle_number(15) == 17\n# assert even_bit_toggle_number(45) == 57\n# assert even_bit_toggle_number(13) == 19\n\n\n# TODO: Test your code", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(n):\n    x = n\n    while n:\n        n = n >> 1\n        if n:\n            x = x ^ n\n    return x\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    while n != 0:\n        n ^= 2\n    return n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    # your code goes here\n    return num\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n  return num % 2 == 0\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    pass\n\ndef test():\n    assert even_bit_toggle_number(0) == 0\n    assert even_bit_toggle_number(1) == 1\n    assert even_bit_toggle_number(2) == 0\n    assert even_bit_toggle_number(3) == 1\n    assert even_bit_toggle_number(4) == 0\n    assert even_bit_toggle_number(5) == 1\n    assert even_bit_toggle_number(6) == 0\n    assert even_bit_toggle_number(7) == 1\n    assert even_bit_toggle_number(8) == 8\n    assert even_bit_toggle_number(9) == 0\n    assert even_bit_toggle_number(10) == 0\n    assert even_bit_toggle_number(11) == 1\n    assert even_bit_toggle_number(12) == 0\n    assert even_bit_toggle_number(13) == 1\n    assert even_bit_toggle_number(14) == 0\n    assert even_bit_toggle_number(15) == 1\n    assert even_bit_toggle_number(16) == 0\n    assert even_bit_toggle_number(17) == 1\n    assert even_bit_toggle_number(18) == 0\n    assert even_bit_toggle_number(19) == 1\n    assert even_bit_toggle_number(20) == 0\n    assert even_bit_toggle_number(21) == 1\n    assert even_bit_toggle_number(22) == 0\n    assert even_bit_toggle_number(23) == 1\n    assert even_bit_toggle_number(24) == 0\n    assert even_bit_toggle_number(25) == 1\n    assert even_bit_toggle_number(26) == 0\n    assert even_bit_toggle_number(27) == 1\n    assert even_bit_toggle_number(28) == 0\n    assert even_bit", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    number = number\n    odd_bits = int(number % 2)\n    even_bits = int((number - odd_bits) % 2)\n    number = number + (even_bits * 2)\n    number = number - (odd_bits * 2)\n    return number", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# This is a comment", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return num ^ num >> 1\n\n", "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num ^ num >> 1\n\n# Test Function"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_of_strings):\n    return tuple(int(x) for x in tuple_of_strings)\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_str_int):\n    return tuple([(int(i[0]),int(i[1])) for i in tuple_str_int])\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(in_tuple):\n    tuple_list = []\n    for x in in_tuple:\n        tuple_list.append((int(x[0]), int(x[1])))\n    return tuple_list\n\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    newtup=[]\n    for item in tup:\n        newtup.append(tuple(map(int,item)))\n    return tuple(newtup)", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(a_tuple):\n    \"\"\"\n    >>> tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n    True\n    \"\"\"\n    return tuple([(int(i),int(j)) for i,j in a_tuple])\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    out = []\n    for i in tup:\n        out.append(tuple(map(int, i)))\n    return out\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_str_int):\n    return tuple([tuple(map(int,str(item).split(' '))) for item in tuple_str_int])\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple([tuple(map(int,x.split())) for x in tup])\n", "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\nfrom typing import Tuple\n\ndef tuple_int_str(t: Tuple[Tuple[str, str]]) -> Tuple[Tuple[int, int]]:\n    return tuple(tuple(map(int, x)) for x in t)\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(l):\n    return [[l.count(i), i] for i in l]\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(in_list):\n    in_list.sort()\n    result = []\n    last_value = None\n    current_count = 0\n    for value in in_list:\n        if value != last_value:\n            last_value = value\n            current_count = 1\n        else:\n            current_count += 1\n        result.append([current_count, value])\n    return result\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(input_list):\n    result = []\n    current_length = 1\n    current_num = input_list[0]\n    for num in input_list[1:]:\n        if num == current_num:\n            current_length += 1\n        else:\n            result.append([current_length, current_num])\n            current_length = 1\n            current_num = num\n    result.append([current_length, current_num])\n    return result\n\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    run_lengths = []\n    lst = sorted(lst)\n    for i in range(len(lst)):\n        run_lengths.append([1, lst[i]])\n        while i+1 < len(lst) and lst[i] == lst[i+1]:\n            run_lengths[-1][0] += 1\n            i += 1\n    return run_lengths\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(l):\n    return [list(i) for i in list(zip(*[(i,l.count(i)) for i in set(l)]))]", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(l):\n    res = []\n    for i, value in enumerate(l):\n        if i == 0:\n            if l[i] == l[i+1]:\n                res.append([1, value])\n            else:\n                res.append([1, value])\n        else:\n            if l[i] == l[i-1]:\n                res[len(res)-1][0] += 1\n            else:\n                res.append([1, value])\n    return res\n\n\n# -\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(arr):\n    newarr = []\n    counter = 0\n    for item in arr:\n        counter += 1\n        if counter == item:\n            newarr.append([counter,item])\n            counter = 0\n        else:\n            newarr.append([1,item])\n\n    return newarr\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(li):\n    result = []\n    for item in li:\n        if item == li[0]:\n            counter = 1\n            for i in range(1, len(li)):\n                if li[i] != item:\n                    break\n                counter += 1\n            result.append([counter, item])\n        else:\n            result.append([1, item])\n    return result\n\n\n# +\n#The run-length encoding of a list is created by encoding each element with its number of occurences.\n#for example, [1, 2, 3, 4, 4.3, 5, 1] will be encoded as [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\ndef encode_list_sol(li):\n    result = []\n    for item in li:\n        if len(result) == 0:\n            result.append([1, item])\n        else:\n            last_item = result[-1]\n            if item == last_item[0]:\n                result[-1][0] = result[-1][0] + 1\n            else:\n                result.append([1, item])\n    return result\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(nums):\n    res = []\n    nums.sort()\n    count = 1\n    val = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] != val:\n            res.append([count, val])\n            count = 1\n            val = nums[i]\n        count += 1\n    res.append([count, val])\n    return res\n", "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(x):\n  z=[]\n  for i in x:\n    if isinstance(i,list):\n      z.append(i)\n    else:\n      if i not in z:\n        z.append(i)\n      z[-1].append(1)\n  return z\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n# def min_Ops(arr,k,n):\n#     # code here\n#     ans = 0\n#     if n==k:\n#         return 0\n#     temp = k-n\n#     for i in range(temp):\n#         for j in range(temp):\n#             if arr[j]>arr[j+1]:\n#                 arr[j],arr[j+1] = arr[j+1],arr[j]\n#     for i in range(k):\n#         if arr[i]!=i+1:\n#             ans += 1\n#     return ans\n\ndef min_Ops(arr,k,n):\n    # code here\n    if n==k:\n        return 0\n    elif n>k:\n        return 1000000000\n    else:\n        return 1000000000", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,n,k):\n    i=0\n    j=0\n    print(arr)\n    while(i<n and j<k):\n        if(arr[i]!=arr[j]):\n            if(arr[i]>=arr[j]):\n                arr[i] -= arr[j]\n            else:\n                arr[j] -= arr[i]\n        i+=1\n        j+=1\n    return i", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k,n):\n    if k>n*n:\n        return -1\n    d = collections.defaultdict(int)\n    for i in range(n):\n        d[arr[i]]+=1\n    ans = 0\n    for i in range(k):\n        s = list(d.keys())\n        d[s[0]]-=1\n        for j in range(1,n):\n            if s[j]==s[j-1]+1:\n                d[s[j]]+=1\n                ans+=1\n    return ans\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,n,k):\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return k-arr[0]\n    if len(arr)==2:\n        return k-arr[0]+arr[1]\n    if len(arr)==3:\n        return k-arr[0]+arr[1]-arr[2]\n    if len(arr)==4:\n        return k-arr[0]+arr[1]-arr[2]+arr[3]\n    else:\n        return k-arr[0]+arr[1]-arr[2]+arr[3]+min_Ops(arr[4:],n-4,k)\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,k,val):\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]!=arr[j] and abs(arr[i]-arr[j])!=val:\n                return abs(arr[i]-arr[j])\n    return 0\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\nfrom __future__ import print_function\n\ndef min_Ops(arr,k,n):\n    n=len(arr)\n    arr=sorted(arr)\n    i,j,m,t=0,0,0,0\n    while(i<=n-1 and j<=n-1):\n        if(arr[i]!=arr[j]):\n            m=m+abs(arr[i]-arr[j])\n            if(k>0):\n                t=t+1\n                k=k-1\n            else:\n                if(t>n-i):\n                    return n+1+m\n                elif(t<n-i):\n                    return n+1+m-t\n                else:\n                    return n+1+m-t\n        elif(i==n-1):\n            break\n        i+=1\n        j+=1\n    if(k>0):\n        return n+1+m\n    else:\n        if(t>n-i):\n            return n+1+m\n        elif(t<n-i):\n            return n+1+m-t\n        else:\n            return n+1+m-t\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr,n,k):\n    arr.sort()\n    total_sum = 0\n    for i in range(n-1):\n        total_sum += abs(arr[i+1]-arr[i])\n    return total_sum//k\n\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, target):\n    #Your code here\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n", "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n# write the solution here\ndef min_Ops(arr, k, n):\n    i = 0\n    arr_length = len(arr)\n    while (i < arr_length and arr[i] < n):\n        i += 1\n    while (i < arr_length):\n        arr[i] -= 1\n        i += 1\n    return i + k\n"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month, day):\n    if month == 'January' or month == 'February':\n        return('winter')\n    elif month == 'March' or month == 'April':\n        return('spring')\n    elif month == 'May' or month == 'June':\n        return('summer')\n    elif month == 'July' or month == 'August':\n        return('autumn')\n    elif month == 'September' or month == 'October':\n        return('fall')\n\n#Test cases", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    \"\"\"\n    Given month and day number, return the season.\n    \"\"\"\n    if month in ['January', 'February', 'March']:\n        return 'winter'\n    elif month in ['April', 'May', 'June']:\n        return 'spring'\n    elif month in ['July', 'August', 'September']:\n        return 'summer'\n    else:\n        return 'fall'\n\n\n# -\n\nmonth_season('January',4)\n\nmonth_season('February', 20)\n\nmonth_season('July', 30)\n\n# +\n# Write a function to add 3 to a number.\n# -\n\ndef add3(num):\n    \"\"\"\n    Given number, add 3 to it.\n    \"\"\"\n    return num + 3\n\n\nadd3(10)\n\nadd3(20)\n\n# +\n# Write a function that accepts a number n and returns a list containing \n# n even numbers between 1 and 20 (both included).\n# -\n\ndef even_list(n):\n    \"\"\"\n    Return list of even numbers between 1 and n.\n    \"\"\"\n    lst = []\n    for x in range(1, n+1):\n        if x % 2 == 0:\n            lst.append(x)\n    return lst\n\n\neven_list(10)\n\neven_list(20)\n\n# +\n# Write a function to return the nth number in the Fibonacci sequence.\n# -\n\nfib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393]\n\nfib[0], fib", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    season = 'summer'\n    if month == 'June' or month == 'July' or month == 'August':\n        season = 'summer'\n    elif month == 'September' or month == 'October' or month == 'November':\n        season = 'autumn'\n    elif month == 'December' or month == 'January' or month == 'February':\n        season = 'winter'\n    elif month == 'March' or month == 'April' or month == 'May':\n        season = 'spring'\n    return season\n\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    months = {'january': 'winter','february': 'winter','march': 'spring','april': 'spring','may':'spring','june':'summer',\n            'july':'summer','august':'summer','september':'fall','october':'fall','november':'fall','december':'winter'}\n    if month not in months.keys():\n        return \"Invalid month\"\n    else:\n        return months[month]", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    \"\"\"\n    >>> month_season('January',4)==('winter')\n    True\n    >>> month_season('June',4)==('summer')\n    True\n    >>> month_season('August',4)==('summer')\n    True\n    >>> month_season('September',4)==('autumn')\n    True\n    >>> month_season('December',4)==('winter')\n    True\n    >>> month_season('January',1)==('winter')\n    True\n    >>> month_season('January',31)==('winter')\n    True\n    >>> month_season('January',20)==('winter')\n    True\n    >>> month_season('March',21)==('spring')\n    True\n    >>> month_season('April',21)==('spring')\n    True\n    >>> month_season('May',21)==('spring')\n    True\n    >>> month_season('June',21)==('summer')\n    True\n    >>> month_season('July',21)==('summer')\n    True\n    >>> month_season('August',21)==('summer')\n    True\n    >>> month_season('September',21)==('autumn')\n    True\n    >>> month_season('October',21)==('autumn')\n    True\n    >>> month_season('November',21)==('autumn')\n    True\n    >>> month_season('December',21)==('winter')\n    True\n    >>> month_season('January',30)==('winter')\n    True\n    >>> month_season('January',29)==('winter')\n    True\n    >>> month_season('February',28)==('spring')\n    True\n    >>> month_season('March',30)==('spring')\n    True\n    >>> month_season('April',30)==('spring')\n    True\n    >>> month_season('May',30)==('spring')\n    True\n    >>> month_season('June',30)==('summer')\n    True\n    >>> month_season('July',30)==('summer')\n    True\n    >>> month_season('August',30)==('summer')\n    True\n    >>> month_season('September',30)==('autumn')\n    True\n    >>> month_season('", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month == 'January' or month == 'February':\n        season = 'winter'\n    elif month == 'March' or month == 'April':\n        season = 'spring'\n    elif month == 'May' or month == 'June':\n        season = 'summer'\n    elif month == 'July' or month == 'August':\n        season = 'fall'\n    elif month == 'September' or month == 'October':\n        season = 'autumn'\n    elif month == 'November' or month == 'December':\n        season = 'winter'\n    else:\n        season = 'Invalid date'\n    return season\n\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    if month == \"January\" or month == \"February\":\n        if day > 21:\n            return(\"winter\")\n        else:\n            return(\"winter\")\n    elif month == \"March\":\n        return(\"spring\")\n    elif month == \"April\":\n        return(\"spring\")\n    elif month == \"May\":\n        return(\"summer\")\n    elif month == \"June\":\n        return(\"summer\")\n    elif month == \"July\":\n        return(\"summer\")\n    elif month == \"August\":\n        return(\"fall\")\n    elif month == \"September\":\n        return(\"fall\")\n    elif month == \"October\":\n        return(\"fall\")\n    elif month == \"November\":\n        return(\"winter\")\n    elif month == \"December\":\n        return(\"winter\")\n    else:\n        return(\"bad data\")\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month,day):\n    if month == 'January' or month == 'February':\n        return 'winter'\n    elif month == 'March':\n        return 'spring'\n    elif month == 'April':\n        return 'spring'\n    elif month == 'May':\n        return 'spring'\n    elif month == 'June':\n        return 'summer'\n    elif month == 'July':\n        return 'summer'\n    elif month == 'August':\n        return 'summer'\n    elif month == 'September':\n        return 'fall'\n    elif month == 'October':\n        return 'fall'\n    elif month == 'November':\n        return 'fall'\n    elif month == 'December':\n        return 'winter'\n    else:\n        print('Sorry, invalid month.')\n", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    seasons = ['spring','summer','fall','winter']\n    if month in ['January','February','March']:\n        if day>=21:\n            season = seasons[0]\n        else:\n            season = seasons[3]\n    elif month in ['April','May','June']:\n        season = seasons[1]\n    elif month in ['July','August','September']:\n        season = seasons[2]\n    elif month in ['October','November','December']:\n        season = seasons[3]\n    return season\n\n#def month_season(month,day):\n#    if month in ['January','February','March']:\n#        if day>=21:\n#            return 'winter'\n#        else:\n#            return 'winter'\n#    elif month in ['April','May','June']:\n#        return 'summer'\n#    elif month in ['July','August','September']:\n#        return 'summer'\n#    elif month in ['October','November','December']:\n#        return 'winter'\n#def month_season(month,day):\n#    if month == 'January':\n#        if day >= 21:\n#            return 'winter'\n#        else:\n#            return 'winter'\n#    if month == 'February':\n#        if day >= 21:\n#            return 'winter'\n#        else:\n#            return 'winter'\n#    if month == 'March':\n#        if day >= 21:\n#            return 'winter'\n#        else:\n#            return 'winter'\n#    elif month == 'April':\n#        return 'summer'\n#    elif month == 'May':\n#        return 'summer'\n#    elif month == 'June':\n#        return 'summer'\n#    elif month == 'July':\n#        return 'summer'\n#    elif month == 'August':\n#        return 'summer'\n#    elif month == 'September':\n#        return 'summer'\n#    elif month ==", "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month in ['January','February','March','April','May','June','July','August','September','October','November','December']:\n        if day<=18:\n            return 'winter'\n        elif day>18 and day<=27:\n            return 'spring'\n        elif day>27 and day<=31:\n            return 'summer'\n        else:\n            return 'fall'\n    else:\n        return 'invalid'\n    "], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    \"\"\"\n    >>> solution(2, 3, 7)\n    ('x = ', 2, ', y = ', 1)\n    >>> solution(2, 3, 2)\n    ('x = ', 1, ', y = ', 0)\n    >>> solution(2, 4, 7)\n    ('x = ', -1, ', y = ', 1)\n    \"\"\"\n    try:\n        x = (-n + b) / a\n        y = (-n + a * x) / b\n        return \"x = \" + str(x) + \", y = \" + str(y)\n    except ZeroDivisionError:\n        return \"No solution\"\n\n# run test\nimport doctest\ndoctest.testmod()", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nfrom math import sqrt\n\ndef solution(a, b, n):\n    # print(a, b, n)\n    d = b**2 - 4*a*n\n    if d >= 0:\n        x1 = -b + sqrt(d)\n        x2 = -b - sqrt(d)\n        print('x = ', x1, ', y = ', x2)\n    else:\n        print('No solution')\n\n\nsolution(2, 3, 7)", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    # Write your code here\n    #return a, b, n\n    \n    if b != 0:\n        x = (n-a)/b\n        y = (n-a)/b\n    else:\n        x = 'Not possible'\n        y = 'Not possible'\n    return 'x = ', x, ', y = ', y\n\n#solution(2, 3, 7)\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = b * n // a\n    y = a * n // b\n    return \"x = {} , y = {}\".format(x, y)", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    print('x = ', -b / a, ', y = ', a)\n\nsolution(2, 3, 7)", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    \"\"\"\n    Returns the solution to the equation ax + by = n.\n\n    Parameters:\n        a: Integer\n        b: Integer\n        n: Integer\n\n    Returns:\n        Tuple of the solution.\n    \"\"\"\n    # Find x and y.\n    return ('x = ', str(n//b), ', y = ', str(n%b))\n\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = 0\n    y = 0\n\n    if a != 0:\n        x = n // a\n    if b != 0:\n        y = n // b\n\n    if x != 0:\n        return ('x = ', x, ', y = ', y)\n    else:\n        return ('No solutions')", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    if a == 0:\n        return 'x = ', 0, ', y = ', (n / b)\n    elif b == 0:\n        return 'x = ', (n / a), ', y = ', 0\n    elif n % a != 0:\n        return \"No solution\"\n    else:\n        x = n // a\n        y = x * b\n        return \"x = \", x, ', y = ', y\n", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\nfrom typing import Optional\n\n\ndef solution(a: int, b: int, n: int) -> Optional[tuple[str, int, int]]:\n    # variable to store solution x and y\n    x, y = 0, 0\n    # variable to check if the solution found or not\n    is_solution_found = False\n\n    # iterate until x and y satisfy the equation\n    while not is_solution_found:\n        x += 1\n        y += 1\n\n        # check if x and y satisfy the equation\n        if a * x + b * y == n:\n            # store the solution\n            is_solution_found = True\n        else:\n            continue\n\n    return f\"x = {x}, y = {y}\"", "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nfrom typing import List\nfrom unittest import TestCase\nimport itertools\n\n\ndef solution(a: int, b: int, n: int) -> List[str]:\n    x, y = None, None\n\n    if a == 0:\n        x = n // b\n        y = n % b\n    elif b == 0:\n        y = n // a\n        x = n % a\n\n    return [f'x = {x},', f' y = {y}']\n\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(l1, l2):\n    new = []\n    for i in l1:\n        if i not in l2:\n            new.append(i)\n    return new\n\n\ndef remove_elements_c(l1, l2):\n    return [i for i in l1 if i not in l2]\n\n\n# +", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n\ndef test_remove_elements():\n    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8]) == [1, 3, 5, 7, 9, 10]", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    final_list = []\n    for i in list1:\n        if i not in list2:\n            final_list.append(i)\n    return final_list\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    return list(set(list1) - set(list2))\n\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1,list2):\n    #Write your code here\n    for item in list2:\n        list1.remove(item)\n    return list1\n    \nlist1=[1,2,3,4,5,6,7,8,9,10]\nlist2=[2,4,6,8]", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(mylist,remlist):\n    res=[]\n    for i in mylist:\n        if i not in remlist:\n            res.append(i)\n    return res\n", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(l1,l2):\n    return [x for x in l1 if x not in l2]\n\n# Tests", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1,list2):\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return result\n\n\n# +", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n\tfor i in list2:\n\t\tlist1.remove(i)\n\treturn list1\n\n# test case", "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(l1, l2):\n    new_l = []\n    for i in l1:\n        if i not in l2:\n            new_l.append(i)\n    return new_l\n\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    ''' This is the top-down recursive approach\n    def sum_series(n):\n        if n==0:\n            return 0\n        else:\n            return n + sum_series(n-1)\n    '''\n    return sum_series_iterative(n)\n\ndef sum_series_iterative(n):\n    result = 0\n    while n > 0:\n        result += n\n        n -= 2\n    return result\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    r = 0\n    i = 2\n    while (n-i) >= 0:\n        r += i\n        i += 2\n    return r\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    \"\"\"\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    50\n    >>> sum_series(5)\n    15\n    >>> sum_series(7)\n    25\n    >>> sum_series(8)\n    28\n    >>> sum_series(11)\n    42\n    >>> sum_series(12)\n    52\n    >>> sum_series(13)\n    56\n    >>> sum_series(14)\n    60\n    >>> sum_series(15)\n    60\n    >>> sum_series(20)\n    80\n    >>> sum_series(50)\n    155\n    \"\"\"\n    if n<1:\n        return n\n    else:\n        return sum_series(n-2)+n\n    ", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    return int(sum(range(1, (n-(n-2))//2+1)))\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    total = 0\n    for i in range(n, n-2, -2):\n        total += i\n    return total", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n < 0:\n        return\n    sum = 0\n    for i in range(n + 1, 0, -2):\n        sum += i\n    return sum\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    if n == 1:\n        return 1\n    return n + sum_series(n-2)\n\n\nsum_series(15)\n\n\ndef sum_series(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 + 3\n    elif n == 3:\n        return 1 + 3 + 5\n    else:\n        return n + sum_series(n-2)\n\n\nsum_series(30)\n\n\ndef sum_series(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 + 3\n    elif n == 3:\n        return 1 + 3 + 5\n    elif n == 4:\n        return 1 + 3 + 5 + 7\n    elif n == 5:\n        return 1 + 3 + 5 + 7 + 9\n    elif n == 6:\n        return 1 + 3 + 5 + 7 + 9 + 11\n    elif n == 7:\n        return 1 + 3 + 5 + 7 + 9 + 11 + 13\n    elif n == 8:\n        return 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15\n    elif n == 9:\n        return 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17\n    elif n == 10:\n        return 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19\n    elif n == 11:\n        return 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21\n    elif n == 12:\n        return 1 + 3 + 5 + 7 + 9 + 11 + 13", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n < 0:\n        return 0\n    else:\n        return n * sum_series(n - 2)\n\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n", "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    s=0\n    for i in range(n,0,-2):\n        s += i\n    return s"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,r):\n    area=(n*(r**2))*(np.sqrt(3)/2)\n    return round(area,6)\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n, s):\n    p = (s*(n-2))/2\n    return p\n\n#--------------------------------------\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(num_sides, side_len):\n    return side_len*num_sides*0.25\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(sides,side_length):\n    area = 0.5 * sides * side_length\n    return area\n\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nimport math\ndef area_polygon(n,s):\n    return math.pow(s,2)*math.sin(math.pi/n)\n\n#assert area_polygon(4,20)==400.00000000000006", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(side_length,side_number):\n    if (side_length == 0 or side_number == 0):\n        print(\"Input error!\")\n        return\n    total_area = side_length*side_number*0.5\n    return total_area\n\n# 4. Write a function to calculate the area of a circle.", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n, r):\n    print(4*n*r**2)", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\nfrom math import pi\n\ndef area_polygon(n,r):\n    return float(n*pi*r**2)\n", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,side):\n    return (n*side**2) / 2.0\n    \narea_polygon(4,20)\n# -\n\n# ## 2.  Perimeter of a circle\n#\n# Write a function to calculate the perimeter of a circle.\n#\n# ```python\n# >>> perimeter_circle(10)\n# 63.66197723675813\n# ```\n#\n# Use `math.pi` and `math.sqrt(x)`.\n\n# +\nfrom math import pi, sqrt\n\ndef perimeter_circle(r):\n    return 2*pi*r + (pi*r)**2\n\nperimeter_circle(10)\n# -\n\n# ## 3.  How many letters are in \"O\"?\n#\n# Write a function to calculate the number of times the letter `O` appears in a given string.\n#\n# ```python\n# >>> count_occurences_string(\"A man, a plan, a canal: Panama\")\n# 4\n# ```\n\n# +\nimport re\n\ndef count_occurences_string(s):\n    return len(re.findall(r\"O\", s))\n\ncount_occurences_string(\"A man, a plan, a canal: Panama\")\n\n\n# -\n\n# ## 4.  What's the volume of a sphere?\n#\n# Write a function to calculate the volume of a sphere with radius `r`.\n#\n# ```python\n# >>> volume_sphere(3)\n# 282.6347592598136\n# ```\n\ndef volume_sphere(r):\n    return (4/3)*pi*r**3\nvolume_sphere(3)\n\n\n# ## 5.  The Fibonacci Sequence\n#\n# The Fibonacci sequence is the sequence of numbers given by the recurrence relation:\n#\n# $$\n# F_{n+2}=F_{n+1}+", "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(a,b):\n    \"\"\"\n    a = number of vertices\n    b = distance from center to any vertex\n    \"\"\"\n    s = a*b*sin(radians(180))\n    return s/2\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    sumA = sumDivisors(a)\n    sumB = sumDivisors(b)\n    if sumA == sumB:\n        return True\n    else:\n        return False\n    \ndef sumDivisors(n):\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum += i\n    return sum\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a, b):\n    n = a\n    sum_a = 0\n    while n > 0:\n        if n % 2 == 0:\n            sum_a += n\n        n = n // 2\n\n    n = b\n    sum_b = 0\n    while n > 0:\n        if n % 2 == 0:\n            sum_b += n\n        n = n // 2\n    if sum_a == sum_b:\n        return True\n    else:\n        return False\n\n\n# -\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(n,m):\n    if m < n:\n        return False\n    elif m == n:\n        return True\n    else:\n        for i in range(1,n+1):\n            if n%i == 0 and m%i == 0:\n                return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1, num2):\n\tnum1 = set(num1)\n\tnum2 = set(num2)\n\tif num1 == num2:\n\t\treturn True\n\telse:\n\t\treturn False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    \"\"\"\n    s = 0\n    for i in range(1,a+1):\n        if a%i == 0:\n            s = s + i\n    for i in range(1,b+1):\n        if b%i == 0:\n            s = s + i\n    if s == a+b:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(number1,number2):\n    divisor=1\n    while(number1%divisor!=0 and number2%divisor!=0):\n        divisor+=1\n    return (number1%divisor==0 and number2%divisor==0) or (number1%divisor!=0 and number2%divisor!=0)", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n1, n2):\n    divs1 = divisors(n1)\n    divs2 = divs(n2)\n    divs1.sort()\n    divs2.sort()\n    if divs1 == divs2:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(x, y):\n    divisors = set(range(1, x+1))\n    divisors.remove(x)\n    divisors.remove(y)\n    if sum(divisors) == sum(set(divisors)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1,num2):\n    divisors1 = []\n    divisors2 = []\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,num1+1):\n        if(num1%i==0):\n            divisors1.append(i)\n            sum1+=i\n    for i in range(1,num2+1):\n        if(num2%i==0):\n            divisors2.append(i)\n            sum2+=i\n    print(divisors1)\n    print(divisors2)\n    if sum1==sum2:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a,b):\n    #function to check whether the sum of divisors are same or not.\n    # Here we have used prime number theory.\n    # Now we have to check whether the sum of prime divisors of a and b are same or not.\n    sumOfDivisorsOfa = 0\n    sumOfDivisorsOfb = 0\n    for i in range(1,a+1):\n        if(a%i == 0):\n            sumOfDivisorsOfa += i\n    for i in range(1,b+1):\n        if(b%i == 0):\n            sumOfDivisorsOfb += i\n    \n    if(sumOfDivisorsOfa == sumOfDivisorsOfb):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(given_string):\n    count = 0\n    given_string = given_string.lower()\n    for letter in given_string:\n        if letter.isalpha():\n            count = count + 1\n        else:\n            continue\n    return count", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    lower = 0\n    upper = 0\n    for i in range(0, len(string)):\n        if string[i] in 'abcdefghijklmnopqrstuvwxyz':\n            lower += 1\n        if string[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            upper += 1\n\n    return lower, upper\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(str1):\n    #str = str.lower()\n    return len(set(str1))\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(word):\n    dict1 = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,\n             'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0,\n             'z': 0,\n             'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0, 'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0,\n             'M': 0, 'N': 0, 'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0, 'V': 0, 'W': 0, 'X': 0, 'Y': 0,\n             'Z': 0}\n    for i in range(len(word)):\n        if word[i].isupper():\n            dict1[word[i]] += 1\n        else:\n            dict1[word[i].lower()] += 1\n    return dict1\n\n\n# + id=\"6W3ih2o-tO7T\"", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    return string.lower().count('a') + string.lower().count('b') + string.lower().count('c') + string.lower().count('d') + string.lower().count('e') + string.lower().count('f') + string.lower().count('g') + string.lower().count('x')", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    count = 0\n    string = string.lower()\n    for char in string:\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" or char == \"A\" or char == \"E\" or char == \"I\" or char == \"O\" or char == \"U\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    count = {}\n    for i in string:\n        if i.islower():\n            count[i.lower()] = count.get(i.lower(), 0) + 1\n        elif i.isupper():\n            count[i.upper()] = count.get(i.upper(), 0) + 1\n    return count\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    count = 0\n    for s in string:\n        if s.isupper():\n            count += string.count(s)\n        elif s.islower():\n            count += string.count(s.upper())\n\n    return count", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    if len(string) > 0:\n        uppercase = string.count(\"A\") + string.count(\"B\") + string.count(\"C\") + string.count(\"D\") + string.count(\"E\") + string.count(\"F\") + string.count(\"G\")\n        lowercase = string.count(\"a\") + string.count(\"b\") + string.count(\"c\") + string.count(\"d\") + string.count(\"e\") + string.count(\"f\") + string.count(\"g\")\n        return uppercase + lowercase\n    else:\n        return 0\n\n", "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(str):\n    char_list = []\n    for letter in str.lower():\n        if letter in \"abcdefghijklmnopqrstuvwxyz\":\n            char_list.append(str.lower().count(letter))\n        elif letter in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            char_list.append(str.upper().count(letter))\n    return sum(char_list)\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(n,x):\n    lst = []\n    for i in range(len(n)):\n        for j in range(i+1,len(n)):\n            if n[i]^n[j]%2==0:\n                lst.append(n[i]^n[j])\n    return len(lst)\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, n):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]^arr[j] == n:\n                count += 1\n    return count\n\ndef test_count_pairs_xor_even():\n    assert find_even_Pair([5,4,7,2,1],5) == 4\n\ntest_count_pairs_xor_even()\n# -\n\n# ### 4.2 Find the first number in an array\n#\n#\n# Given a non-empty array of integers, find the first missing number in the array.\n#\n# The array numbers can contain duplicates, the repeated numbers are also counted.\n#\n# Your algorithm should run in O(n) time and uses constant extra space.\n#\n# ```\n# Example 1:\n# Input: [3,0,1]\n# Output: 2\n# ```\n#\n# ```\n# Example 2:\n# Input: [9,6,4,2,3,5,7,0,1]\n# Output: 8\n# ```\n\n# +", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(lst,xor):\n\tcount = 0\n\tfor i in range(len(lst)):\n\t\tfor j in range(i+1,len(lst)):\n\t\t\tif xor ^ lst[i] ^ lst[j] % 2 == 0:\n\t\t\t\tcount += 1\n\treturn count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(array,num):\n    sum = 0\n    count = 0\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if (array[i] ^ array[j]) % num == 0:\n                sum = (array[i] ^ array[j])\n                count += 1\n\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, num):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] == num:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,xor):\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] ^ arr[j] == xor:\n                ans += 1\n    return ans", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(A,x):\n    c=0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!=j and (A[i]^A[j])%2==0:\n                c+=1\n    return c\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(numbers,xor):\n    count = 0\n    for i in range(len(numbers)-1):\n        for j in range(i+1,len(numbers)):\n            xor_ = numbers[i] ^ numbers[j]\n            if xor_ == xor:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(nums,val):\n    total = 0\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            total += nums[i] ^ nums[j]\n            if nums[i] ^ nums[j] == val:\n                return 1\n    return 0", "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr,n):\n    a=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]^arr[j])%n==0:\n                a+=1\n    return a\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n#Return 1 if number is 1 or less.\ndef next_Power_Of_2(n):\n    if n <= 1:\n        return 1\n    else:\n        return 2 ** round(n/2)", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power = 2 * power\n    return power\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    if n & (n - 1) == 0:\n        return n\n    else:\n        return (n & -n) << 1\n\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    return 1 << (n - 1).bit_length()\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n  return 1 << int(math.ceil(math.log(n, 2)))\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    # your code here\n    # in the case of 0 return 1\n    if n == 0:\n        return 1\n\n    # loop will run as long as n is not a power of 2\n    while n != (n >> 1):\n        # shift n by 1 to get 2*n\n        n = n << 1\n\n    return n\n\n# test for your solution", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    return 1 if n == 0 else 2**next_Power_Of_2(n-1)", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    return 2**int(math.log(n, 2))\n", "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    # write your code here\n    a = 2\n    while a < n:\n        a = a * 2\n    return a"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,num):\n    result = 0\n    for i in arr:\n        if i == num:\n            result = result + 1\n    return result", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, element):\n    result = 0\n    for i in arr:\n        if i == element:\n            result = result + 1\n    return result\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(numbers, number):\n    \"\"\"\n    This function checks the frequency of a number in a given array.\n    Input:\n    -numbers: the array of numbers\n    -number: the number to check the frequency of\n    Output:\n    -the number of times the given number is in the array\n    \"\"\"\n    if len(numbers) == 0:\n        return 0\n    else:\n        count = 0\n        for i in numbers:\n            if i == number:\n                count += 1\n        return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(lst,num):\n    count = 0\n    for x in lst:\n        if x == num:\n            count += 1\n    return count\n\n# Frequency of 4 in the list [1,2,3,4,4,5] is 2", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, num):\n    freq = 0\n    for i in arr:\n        if i == num:\n            freq += 1\n    return freq", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(num_list, num):\n    \"\"\"\n    Parameters:\n    num_list : A list of numbers\n    num : A number\n    Returns:\n    A list of numbers\n    \"\"\"\n    num_list = num_list[:]\n    return sum(1 for num in num_list if num == num)\n\n#assert frequency([1,2,3],4) == 0\n#assert frequency([1,2,3,4,5],3) == 2\n#assert frequency([1,2,3,4,5],2) == 3\n#assert frequency([1,2,3,4,5],1) == 3", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n\tfrequency = 0\n\tfor i in arr:\n\t\tif num == i:\n\t\t\tfrequency += 1\n\treturn frequency\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(array, num):\n    count = 0\n    for element in array:\n        if element == num:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\n#Write your code here\ndef frequency(arr, n):\n    return len([i for i in arr if i==n])\n", "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, number):\n    count = 0\n    for ele in arr:\n        if ele == number:\n            count += 1\n    return count\n\ndef test_frequency():\n    assert frequency([1,2,3,4,5], 4) == 0\n    assert frequency([1,2,3,4,5], 3) == 2\n    assert frequency([1,2,3,4,5], 2) == 1\n    assert frequency([1,2,3,4,5], 1) == 3\n    assert frequency([1,2,3,4,5], 0) == 1"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nfrom utils import debug\n\n\n@debug\ndef get_pell(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    pell = 1\n    pell_next = 2\n    i = 2\n    while pell_next < n:\n        pell_next += pell\n        pell = pell_next\n        i += 1\n    return pell\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\nfrom math import sqrt\n\n# O(n)\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n - 1) ** 2 + get_pell(n - 2) ** 2\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n-1) + get_pell(n-2)\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    Takes a number n and returns the nth Pell number\n    \"\"\"\n    i = 0\n    j = 1\n    current_sum = 0\n    while i < n:\n        current_sum = j + current_sum\n        i += 1\n        j += current_sum\n    return current_sum", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    a = 1\n    b = 1\n    for i in range(2, n):\n        c = 2 * a + b\n        d = a * a - b * b\n        a = c\n        b = d\n    return a\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 1:\n        return 1\n    x = get_pell(n-1)\n    y = get_pell(n-2)\n    return x*x - y*y\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    #TODO\n    return 0\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    # your code goes here\n    pass\n\n# assert get_pell(4) == 12", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\nfrom math import sqrt\n\n\ndef get_pell(n):\n    for _ in range(n - 1):\n        new = (get_pell(n - 1) ** 2 - get_pell(n - 2) ** 2) ** 2 + get_pell(n - 2) ** 2\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return new\n\n", "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    if n == 3:\n        return 13\n    if n == 4:\n        return 25\n    if n == 5:\n        return 49\n    pell_num = 5\n    while n > 4:\n        pell_num = pell_num * 2 + 1\n        n -= 1\n    return pell_num"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(a_list,index_1,index_2):\n    sum = 0\n    for i in range(index_1,index_2+1):\n        sum += a_list[i]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(mylist, start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += mylist[i]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(numbers, start_index, end_index):\n    sum_of_numbers = 0\n    for index in range(start_index, end_index + 1):\n        sum_of_numbers = sum_of_numbers + numbers[index]\n    return sum_of_numbers\n\ndef test_sum_range_list():\n    numbers = [2,1,5,6,8,3,4,9,10,11,8,12]\n    start_index = 8\n    end_index = 10\n    expected_sum = 29\n    actual_sum = sum_range_list(numbers, start_index, end_index)\n    assert actual_sum == expected_sum, \"sum_range_list({0},{1},{2}) returned {3} but should be {4}\".format(numbers, start_index, end_index, actual_sum, expected_sum)\n\ntest_sum_range_list()\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list, start, end):\n    return sum(list[start:end+1])\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(input_list,start,end):\n    sum=0\n    for i in range(start,end):\n        sum+=input_list[i]\n    return sum\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list_val,start,end):\n    sum=0\n    for i in range(start,end+1):\n        sum+=list_val[i]\n    return sum\n\n\ndef test_sum_range_list():\n    print('assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29')\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(my_list,start,stop):\n    '''\n    my_list: a list containing integers\n    start: start index (inclusive)\n    stop: end index (inclusive)\n    returns: sum of list between start and stop indices\n    '''\n    return sum(my_list[start:stop+1])\n    ", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(list, index1, index2):\n    sum = 0\n    for i in range(index1, index2+1):\n        sum += list[i]\n    return sum\n\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(nums,begin,end):\n    return sum(nums[begin:end+1])\n\ndef sum_range_list_d(nums,begin,end):\n    total = 0\n    for i in range(begin,end+1):\n        total += nums[i]\n    return total\n", "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list( numbers, begin, end ):\n  sum = 0\n  for i in range(begin,end):\n    sum += numbers[i]\n  return sum\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    x = 3*n * 100\n    y = (n ** 2) * 100\n    return x+y\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    return 5*n*n+5*n\n\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(side):\n    perimeter = (side*5)+(side*5)\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return n*(3*n - 1)\n\n\n# + deletable=false editable=false nbgrader={\"checksum\": \"2728a57228e50b462c954755e5d1983b\", \"grade\": true, \"grade_id\": \"cell-00386114cb574a19\", \"locked\": true, \"points\": 3, \"schema_version\": 3, \"solution\": false, \"task\": false}", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(sides):\n    perimeter = 0\n    for i in range(sides):\n        perimeter += 2 * (sides * i)\n    return perimeter\n\n\n# tests", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    \"\"\"\n    Pentagon's perimeter formula is 10*n - 10\n    \"\"\"\n    return 10*n - 10\n\n# Time complexity : O(1)\n# Space complexity : O(1)\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(x):\n    if x < 2:\n        raise ValueError(\"x should be greater than 1\")\n    return 5*x + 10\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    return 10*n + 5\n\ndef perimeter_pentagon(n):\n    return (n+1) * 2 * 5\n\ndef perimeter_pentagon(n):\n    return (5*n) + 10\n\ndef perimeter_pentagon(n):\n    return n * 2 * 5 + 10\n\ndef perimeter_pentagon(n):\n    return 5 * n + 10\n\ndef perimeter_pentagon(n):\n    return 5 * (n+1)\n\ndef perimeter_pentagon(n):\n    return 5 * n + 5", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    perimeter = 0\n    for i in range(n):\n        perimeter = perimeter + 2*i + 1\n    return perimeter\n\ndef test_perimeter_pentagon():\n    assert perimeter_pentagon(5)==25\n", "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\nfrom math import pi, sin\n\ndef perimeter_pentagon(n):\n    if n%2==1:\n        return int(pi*n*sin(pi/n))\n    return int(pi*n*sin(pi/n)+n)\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for i in string:\n        if i == \"std\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    num_occurance = 0\n    for character in string:\n        if character == \"s\":\n            num_occurance += 1\n    return num_occurance\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for i in string:\n        if i == \"std\":\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str1):\n    count = 0\n    for i in str1:\n        if i == \"std\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    occurence = 0\n    for letter in string:\n        if letter == \"std\":\n            occurence += 1\n    return occurence\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for letter in string:\n        if letter == \"std\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(text):\n    count = 0\n    for i in range(len(text)):\n        if text[i:i+3] == \"std\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    occur = 0\n    for letter in string:\n        if letter == 'std':\n            occur += 1\n    return occur\n\ndef test_count_occurance():\n    assert count_occurance(\"letstdlenstdporstd\") == 3\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    return string.count(\"std\")\n", "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(str):\n  str_list = str.split(\" \")\n  count = 0\n  for i in range(len(str_list)):\n    if str_list[i] == \"std\":\n      count = count + 1\n  return count\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n    return ''.join([i for i in str if i.isalnum()])\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n    str = str.replace(\" \",\"\")\n    str = str.replace(\"_\",\"\")\n    return str\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str):\n    return ''.join(re.findall(r'[a-zA-Z0-9]', str))\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())\n\n\n#%%\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(text):\n    return ''.join(filter(str.isalnum, text))\n\n", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\n# + [markdown] id=\"gG3yR8_1jGd5\"\n# Write a function that returns a string in reverse.", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    string = ''.join(filter(str.isalnum,string))\n    return string", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(s):\n    s = s.lower()\n    return ''.join([c for c in s if c.isalnum()])", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return ''.join(filter(str.isalnum, string))", "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(str1):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    \"\"\"\n    string = \"\"\n    for char in str1:\n        if char.isalpha() or char.isnumeric():\n            string += char\n    return string\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(input_list):\n    output_dict = {}\n    for key, val in input_list:\n        if key in output_dict.keys():\n            output_dict[key].append(val)\n        else:\n            output_dict[key] = [val]\n\n    return output_dict\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(x):\n    d = {}\n    for k, v in x:\n        if k not in d:\n            d[k] = []\n        d[k].append(v)\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n  mydict = {}\n  for pair in pairs:\n    if pair[0] in mydict:\n      mydict[pair[0]].append(pair[1])\n    else:\n      mydict[pair[0]] = [pair[1]]\n  return mydict\n\n#test group_keyvalue", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(pairs):\n    new_dict = {}\n    for pair in pairs:\n        key = pair[0]\n        value = pair[1]\n        if key in new_dict.keys():\n            new_dict[key].append(value)\n        else:\n            new_dict[key] = [value]\n    return new_dict\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(seq):\n    dic = {}\n    for i in seq:\n        if i[0] in dic.keys():\n            dic[i[0]].append(i[1])\n        else:\n            dic[i[0]] = [i[1]]\n    return dic\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(sequence):\n    kvp_dict = {}\n    for k, v in sequence:\n        if k in kvp_dict:\n            kvp_dict[k].append(v)\n        else:\n            kvp_dict[k] = [v]\n    return kvp_dict\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n    d = {}\n    for pair in pairs:\n        if pair[0] in d:\n            d[pair[0]].append(pair[1])\n        else:\n            d[pair[0]] = [pair[1]]\n    return d\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(keyvaluelist):\n    \"\"\"\n    Input: list of keyvalue pairs\n    Output: dictionary with lists as values\n    \"\"\"\n    dict = {}\n    for key, value in keyvaluelist:\n        if key in dict.keys():\n            dict[key].append(value)\n        else:\n            dict[key] = [value]\n    return dict\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(pairs):\n    return {k:v for k,v in groupby(pairs, key = lambda x: x[0])}\n\n", "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(list_of_tuples):\n    res = {}\n    for tuple in list_of_tuples:\n        key, value = tuple\n        if key in res:\n            res[key].append(value)\n        else:\n            res[key] = [value]\n    return res"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(p):\n    if p is None or len(p)==0:\n        return True\n    elif p[0]==')' or p[0]==']':\n        return False\n    else:\n        s = 0\n        for i in range(len(p)):\n            if p[i] == '(':\n                s += 1\n            if p[i] == ')':\n                if s==0:\n                    return False\n                else:\n                    s -= 1\n        if s != 0:\n            return False\n        else:\n            return True\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    if len(string) % 2 != 0:\n        return False\n    opened_parens = {}\n    for char in string:\n        if char in \"([\":\n            opened_parens[char] = True\n        else:\n            if char == \"(\":\n                if not opened_parens.get(\"(\"):\n                    return False\n            elif char == \"{\":\n                if not opened_parens.get(\"{\"):\n                    return False\n            elif char == \"[\":\n                if not opened_parens.get(\"[\"):\n                    return False\n            else:\n                return False\n    return len(opened_parens) == 0\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    if len(string) % 2 != 0:\n        return False\n    dict = {}\n    for i in range(len(string)):\n        if string[i] in '(){}[]':\n            dict[string[i]] = 1\n            if string[i] == '(':\n                dict['{'] = -1\n            elif string[i] == '[':\n                dict['['] = -1\n            elif string[i] == '{':\n                dict['}'] = -1\n            elif string[i] == '}':\n                dict['}'] = 1\n            elif string[i] == ']':\n                dict[']'] = 1\n        else:\n            if string[i] in dict.keys() and dict[string[i]] == -1:\n                dict[string[i]] = -1\n            elif string[i] in dict.keys() and dict[string[i]] == 1:\n                dict[string[i]] = 1\n            else:\n                return False\n\n    return True if len(dict.keys()) == 0 else False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(s):\n    stack = []\n    for ch in s:\n        if ch == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(ch)\n    return len(stack) == 0\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(\")\")\n        elif char == \"[\":\n            stack.append(\"]\")\n        elif char == \"{\":\n            stack.append(\"}\")\n        else:\n            if len(stack) == 0:\n                return False\n            elif char == stack.pop():\n                continue\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    bracket_dict = {'(':')', '{':'}', '[':']'}\n\n    stack = []\n\n    for bracket in string:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == '[':\n            stack.append(bracket)\n        elif bracket == '{':\n            stack.append(bracket)\n        elif len(stack) > 0:\n            if bracket_dict[stack.pop()] == bracket:\n                pass\n            else:\n                return False\n        else:\n            return False\n\n    return len(stack) == 0\n\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\nfrom typing import List\n\n\ndef is_valid_parenthese(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack.pop() != \"(\":\n                return False\n    return len(stack) == 0", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\nfrom typing import List\n\ndef is_valid_parenthese(par: str) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    bracket = {\n        \"(\":\")\",\n        \"{\":\"}\",\n        \"[\":\"]\"\n    }\n    stack = []\n    for char in par:\n        if char in bracket.keys():\n            stack.append(char)\n        elif char not in bracket.values():\n            if not stack:\n                return False\n            popped = stack.pop()\n            if popped != bracket[char]:\n                return False\n    return len(stack) == 0\n", "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(string):\n    if string == '':\n        return True\n    stack = []\n    for i in string:\n        if i in '({[':\n            stack.append(i)\n        if i in ')}]':\n            if len(stack) == 0:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n    return len(stack) == 0\n\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(x1,y1,x2,y2,x3,y3):\n    # Perimeter of a triangle is given by formula: 2*S where S is the semi-perimeter\n    # S = (x1+x2+x3)/2\n    # 2*S = (x1+x2+x3)/2 + (x1+x2+x3)/2\n    # 2*S = 3*S/2\n    # S = 3*S/2\n    # S = 6*S/4\n    # S = 12*S/8\n    # S = 60\n    return (x1+x2+x3)/2 + (x1+x2+x3)/2 + (x1+x2+x3)/2\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(base, height, depth):\n    p = (base*depth) + (height*depth) + (base*height)\n    return p\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    p = a + b + c\n    return p\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    \"\"\"\n    This function calculates the perimeter of a triangle given the length of the sides.\n    :param a: the first side length\n    :param b: the second side length\n    :param c: the third side length\n    :return: the perimeter of the triangle\n    \"\"\"\n    perimeter = a+b+c\n    return perimeter\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    if a+b<c or b+c<a or a+c<b:\n        return \"ERROR\"\n    else:\n        p = a+b+c\n        return p\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    s = (a + b + c)/2\n    return s * (s-a) * (s-b) * (s-c) ** 0.5\n\n", "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(x,y,z):\n    sum = x+y+z\n    return sum\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(min, max):\n    \"\"\"returns a tuple of two distinct numbers whose lcm lies between min and max\"\"\"\n    from math import gcd, lcm\n    g = gcd(min, max)\n    return tuple(sorted(set([min/g, max/g, min*max/lcm(min, max)])))\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(num_1,num_2):\n    \"\"\"\n    Find two distinct numbers such that their lcm lies within the given range.\n    \"\"\"\n    for i in range(num_1,num_2+1):\n        if i % (num_1 + num_2) == 0:\n            if i % num_1 == 0 and i % num_2 == 0:\n                return (i,i//(num_1+num_2))\n            else:\n                return (i//(num_1+num_2),i//(num_1+num_2))\n\n\ndef test_function(test_case):\n    lcm = answer(test_case[0],test_case[1])\n    if lcm == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([3,8,24])\ntest_function([12,18,24])\ntest_function([8,10,16])\ntest_function([16,32,64])\ntest_function([32,48,128])\ntest_function([64,96,160])\ntest_function([160,256,512])", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nimport math\ndef gcd(a,b):\n    if a < b:\n        temp = a\n        a = b\n        b = temp\n    while b != 0:\n        temp = a%b\n        a = b\n        b = temp\n    return a\ndef lcm(a,b):\n    return a*b//gcd(a,b)\ndef find_lcm(a,b):\n    if (a>=b):\n        return (lcm(a,b),a,b)\n    else:\n        return (lcm(a,b),b,a)\n\ndef answer(a,b):\n    r = []\n    for i in range(a,b):\n        for j in range(i,b):\n            if (i!=j):\n                lcm_value = find_lcm(i,j)\n                if lcm_value[0] <= a:\n                    r.append(lcm_value)\n    return r", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nimport functools\nimport itertools\n\ndef answer(a, b):\n    numbers = set()\n    for i in range(a,b):\n        if i%a==0 and i%b==0:\n            numbers.add(i)\n    numbers = sorted(numbers)\n    for i, j in itertools.combinations(numbers, 2):\n        if i%j == 0:\n            return (i,j)\n    return None\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(a,b):\n    \"\"\"\n    \"\"\"\n    if a == b:\n        return (a,a)\n    if a < b:\n        a,b = b,a\n    for c in range(a,b+1):\n        if a % c == 0 and b % c == 0:\n            return (a,b)\n    return (0,0)\n\n#assert answer(3,8) == (3,6)", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(lower, upper):\n    # write your code here\n    # hint: make a list of all the common multiples of the numbers\n    # for example, if 3 and 8 are the numbers, then the list should be\n    # [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]\n    # then use any() to check whether any of the numbers lie in the given range\n    \n    if lower == upper:\n        return lower, lower\n    elif upper > lower:\n        # make a list of the multiples of lower and upper\n        # if any of the multiples are greater than upper then we know\n        # that the lcm will be greater than upper, so we can exit early\n        list_of_multiples = []\n        for i in range(lower, upper):\n            list_of_multiples.append(i)\n        \n        if any(i > upper for i in list_of_multiples):\n            return None\n        \n        list_of_multiples = list(set(list_of_multiples))\n        list_of_multiples = [i for i in list_of_multiples if i > 0]\n        \n        for i in range(len(list_of_multiples)):\n            if list_of_multiples[i] < upper:\n                lower = list_of_multiples[i]\n                upper = lower + (upper - lower) - 1\n                return lower, upper\n    else:\n        # otherwise, we just reverse the lower and upper values so that\n        # the lower comes first and we can do the same process as above\n        lower, upper = upper, lower\n        \n        if any(i > upper for i in list_of_multiples):\n            return None\n        \n        list_of_multiples = list(set(list_of_multiples))\n        list_of_multiples = [i for i in list_of_multiples if i > 0]\n        \n        for i in range(len", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\nfrom math import gcd\ndef answer(a,b):\n    x = [a,b]\n    for i in x:\n        for j in x:\n            if i != j:\n                for k in range(i,b+1):\n                    if gcd(i,j) == gcd(i,k) and i != k:\n                        return (i,k)\n\n\n# +\n#answer(3,8)\n# -\n\n# Write a python function to print all the prime numbers in between 1 to 200.", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\nimport math\n\ndef answer(a,b):\n    # Complete this function\n    for i in range(a,b+1):\n        for j in range(a,b+1):\n            if i!=j and (i*j)%lcm == 0:\n                return i,j\n            else:\n                continue\n    return None", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(start, end):\n    for i in range(start,end+1):\n        for j in range(start,end+1):\n            if i==j or i%j==0:\n                continue\n            elif lcm(i,j) > end:\n                continue\n            else:\n                return i,j\n    return -1, -1\n\ndef lcm(num1, num2):\n    return num1*num2//gcd(num1,num2)\n\ndef gcd(num1, num2):\n    if num1==0:\n        return num2\n    if num2==0:\n        return num1\n    if num1<num2:\n        return gcd(num2,num1)\n    else:\n        return gcd(num1-num2,num2)\n", "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef get_lcm(a,b):\n    return (a * b) // math.gcd(a,b)\n\ndef answer(a, b):\n    min_num = min(a,b)\n    max_num = max(a,b)\n    for i in range(min_num, max_num):\n        if get_lcm(i,min_num) >= a and get_lcm(i,max_num) <= b:\n            return i, get_lcm(i,min_num), get_lcm(i,max_num)"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(arr, str):\n    for i in arr:\n        if i in str:\n            return i + ' Matched!'\n    return 'Not Found!'\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,text):\n    if (type(literals)!=list) or (type(text)!=str):\n        return 'The input is not a string or a list.'\n    if len(text)==0:\n        return 'The text is empty.'\n    if len(literals)==0:\n        return 'The list of literals is empty.'\n    for i in literals:\n        if i not in text:\n            return 'No Match!'\n    return 'Matched!'", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n    for word in literals:\n        if word in string:\n            return(\"Matched!\")\n    return(\"Not Matched!\")\n\nstring_literals(['language'],'python language')```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\n3.Functions can return multiple valuesWe can pass more than one parameter to a function. It is also possible to return multiple values from the function.\n\n### Code:\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals,text):\n    for i in literals:\n        if i in text:\n            return ('Matched!')\n    return ('Not Matched!')\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals, string):\n    for i in literals:\n        if i in string:\n            print('Matched!')\n            return\n    print('Not Matched!')\n\nstring_literals(['language'],'python language')\nstring_literals(['language','study'],'python language study')\nstring_literals(['language','study','learning'],'python language study learning')\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals,text):\n    result = []\n    for i in literals:\n        for j in i.split():\n            if text.find(j)>-1:\n                result.append(\"Matched!\")\n                break\n    return result", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\n#Language Specific\nimport re\n\n\ndef string_literals(pattern, string):\n    for i in pattern:\n        if i in string:\n            print('Matched!')\n            break\n    else:\n        print('Not Found!')\n\n", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n    #Use a variable to store the number of matches for each literals\n    num_matches=0\n    #Loop through each of the literals\n    for item in literals:\n        #If the item in the literals matches the string\n        if item in string:\n            #Increment the number of matches\n            num_matches=num_matches+1\n    #If the number of matches are the same as the number of literals\n    if num_matches==len(literals):\n        #Return the string with matched literals\n        return 'Matched!'\n    #Otherwise return the string with no matches\n    else:\n        return 'No Matches'\n#Test cases", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals, target):\n    for lit in literals:\n        target.find(lit)\n        if target.find(lit)==True:\n            return ('Matched!')\n# test cases", "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(literals,string):\n    '''\n    :param literals: list of strings.\n    :param string: string to be searched.\n    :return: whether string includes any literal strings.\n    '''\n    for i in literals:\n        if i in string:\n            return 'Matched!'\n        else:\n            continue\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num % 4 == 0:\n        if num == 0:\n            return False\n        if num < 20:\n            return False\n        return True\n    return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(n):\n  if n % 3 == 0 and n % 5 == 0:\n    return True\n  else:\n    return False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num < 2:\n        return False\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        if int(num_str[i]) < int(num_str[0]):\n            return False\n    return True\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    if num < 1:\n        return False\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(n):\n    if n < 10000:\n        for i in range(1, n):\n            if is_divisible(i) and is_divisible(n, i) and is_divisible(n, i**2):\n                return True\n    return False\n\n\ndef is_divisible(n, divisor):\n    while n % divisor == 0:\n        return True\n    return False", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n# Solution\ndef is_num_keith(number):\n    from math import sqrt\n    if number == 1 or number == 2:\n        return True\n    elif number > 2:\n        square = int(sqrt(number))\n        for i in range(3, square + 1):\n            if number % i == 0:\n                return False\n        return True\n    else:\n        return False\n\n# Tests", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n# def is_num_keith(num):\n#     num_list = list(str(num))\n#     if len(num_list) == 1:\n#         return False\n#     for i in range(len(num_list) // 2):\n#         if int(num_list[i]) != int(num_list[len(num_list) - i - 1]):\n#             return False\n#     return True\n\n\n# def is_num_keith(num):\n#     num_str = str(num)\n#     num_list = [int(num_str[i]) for i in range(len(num_str))]\n#     return sorted(num_list) == num_list\n\n\ndef is_num_keith(num):\n    if num < 0:\n        return False\n    num_str = str(num)\n    num_list = [int(num_str[i]) for i in range(len(num_str))]\n    if num_list == sorted(num_list):\n        return True\n    return False\n\n# assert is_num_keith(14) == True\n# assert is_num_keith(1024) == False\n# assert is_num_keith(-100) == False\n# assert is_num_keith(0) == True\n# assert is_num_keith(100) == False\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\nfrom math import sqrt\n\n\ndef is_num_keith(num):\n    if num == 1:\n        return True\n    n = 2\n    while n * n <= num:\n        if num % n == 0:\n            return False\n        n += 1\n\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    num = str(num)\n    sum_ = 0\n    num = list(num)\n    num.reverse()\n    for i in range(0,len(num)):\n        digit = int(num[i])\n        sum_ += pow(digit,i+1)\n    return num == str(sum_)\n", "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if num % 11 == 0:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    p = (1.0 - math.cos(math.radians(lat2))) * math.cos(math.radians(lat1))\n    q = math.radians(lon2) - math.radians(lon1)\n    r = (1.0 - math.cos(math.radians(lat2))) * math.sin(math.radians(lat1))\n    s = math.sin(math.radians(lon2)) - math.sin(math.radians(lon1))\n    return 6371*math.acos(p*q + r*s)/1000\n\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6378.137\n    dLat = math.radians(lat2-lat1)\n    dLon = math.radians(lon2-lon1)\n    a = math.sin(dLat/2)*math.sin(dLat/2)+math.cos(math.radians(lat1))*math.cos(math.radians(lat2))*math.sin(dLon/2)*math.sin(dLon/2)\n    c = 2*math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R*c\n    return d\n#unittest", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    '''Calculate distance between two points using latitude and longitude\n    Args:\n        lat1:latitude of point 1\n        lon1:longitude of point 1\n        lat2:latitude of point 2\n        lon2:longitude of point 2\n    Returns:\n        distance(km)\n    '''\n    import math\n    import numpy as np\n    R = 6371.0088\n    lat1 = np.radians(lat1)\n    lon1 = np.radians(lon1)\n    lat2 = np.radians(lat2)\n    lon2 = np.radians(lon2)\n    dlon = lon2-lon1\n    dlat = lat2-lat1\n    a = np.sin(dlat/2)**2 + np.cos(lat1)*np.cos(lat2) * np.sin(dlon/2)**2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    distance = R * c\n    return distance\n\n#assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\n#%%", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\ndef distance_lat_long(lat_1,long_1,lat_2,long_2):\n    lat_d = lat_1-lat_2\n    long_d = long_1-long_2\n    a = math.sin(lat_d/2)**2 + math.cos(lat_1)*math.cos(lat_2) * (math.sin(long_d/2)**2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    distance = 6371*c\n    return distance\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(latitude_point1,longitude_point1,latitude_point2,longitude_point2):\n    #formula to find distance between two points in lat-long coordinates\n    import math\n    R = 6371\n    r = (latitude_point1 - latitude_point2) * math.pi / 180\n    phi1 = (latitude_point1 + latitude_point2) * math.pi / 360\n    phi2 = (latitude_point1 - latitude_point2) * math.pi / 360\n\n    a = math.sin(r) * math.sin(r) + math.cos(phi1) * math.cos(phi2) * math.sin(r) * math.sin(r)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\n\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n    earth_radius = 6378.137\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    long1 = math.radians(long1)\n    long2 = math.radians(long2)\n\n    dlong = long2 - long1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlong / 2) ** 2\n\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    d = earth_radius * c\n    return d\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\ndef distance_lat_long(lat1,long1,lat2,long2):\n    return math.sqrt((lat2-lat1)**2+(long2-long1)**2)*1609.34\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\ndef distance_lat_long(lat1, long1, lat2, long2):\n    \"\"\"\n    Returns distance between two points using latitude and longitude\n    :param lat1: first point latitude\n    :param long1: first point longitude\n    :param lat2: second point latitude\n    :param long2: second point longitude\n    :return: distance\n    \"\"\"\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    delta_long = math.radians(long2 - long1)\n    x = math.sin(delta_long) * math.cos(lat2)\n    y = math.cos(lat1) * math.sin(lat2) - math.sin(lat1) * math.cos(lat2) * math.cos(delta_long)\n    r = 6371 * math.sqrt(x * x + y * y)\n    return r\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1,lon1,lat2,lon2):\n    R=6378.137\n    lat1=math.radians(lat1)\n    lat2=math.radians(lat2)\n    lon1=math.radians(lon1)\n    lon2=math.radians(lon2)\n    d=R*math.acos(math.sin(lat1)*math.sin(lat2)+math.cos(lat1)*math.cos(lat2)*math.cos(lon2-lon1))\n    return d\n", "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n    return 6371*np.arcsin(np.sin((lat2-lat1)/2)**2+np.cos(lat1)*np.cos(lat2)*np.sin((long2-long1)/2)**2)\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, k):\n    # your code here\n    res = \"\"\n    for i in range(len(strings[0])):\n        char = strings[0][i]\n        for s in strings:\n            if char != s[i]:\n                res = res[:i]\n                break\n        if res == \"\":\n            return char\n    return res\n\n\ndef main():\n    print(common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4))\n    print(common_prefix([\"dog\", \"dinner\", \"dining\"], 4))\n    print(common_prefix([\"dog\", \"dinner\", \"dining\"], 3))\n    print(common_prefix([\"dog\", \"dinner\", \"dining\", \"tales\"], 4))\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(s):\n    if not s: return None\n    for i in range(len(s[0])):\n        for j in range(len(s) - 1):\n            if i == len(s[0]) - 1:\n                break\n            elif s[j][i] != s[j+1][i]:\n                return s[j][:i]\n    return s[0]", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(str_list, length):\n    if length == 0:\n        return \"\"\n    first_str = str_list[0]\n    for i in range(length):\n        if first_str[i] != str_list[1][i]:\n            return str_list[0][:i]\n    return common_prefix(str_list[1:], length-1)\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef longest_common_prefix(strings, n):\n    if len(strings) == 1:\n        return strings[0][:n]\n    for i in range(n):\n        for j in range(1, len(strings)):\n            if strings[j][i] != strings[0][i]:\n                return strings[0][:i]\n    return strings[0][:n]\n\n\ndef test_longest_common_prefix():\n    print(longest_common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4))\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strs, n):\n    if n == 0:\n        return \"\"\n    elif n == 1:\n        return strs[0]\n    else:\n        for i in range(n):\n            if strs[0][i] != strs[1][i]:\n                return strs[0][:i]\n        return strs[0][:i+1]\n\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef longest_common_prefix(arr, k):\n    arr.sort()\n    common_prefix = \"\"\n    for i in range(min(k, len(arr[0]))):\n        if arr[0][i] != arr[-1][i]:\n            return common_prefix\n        else:\n            common_prefix += arr[0][i]\n    return common_prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(list_of_words):\n    prefix = \"\"\n    if not list_of_words:\n        return prefix\n    else:\n        prefix = list_of_words[0][:len(list_of_words[0])]\n        for word in list_of_words[1:]:\n            if len(prefix) < len(word):\n                prefix = word[:len(prefix)]\n            if prefix and prefix != word[:len(prefix)]:\n                prefix = \"\"\n        return prefix\n", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\nfrom typing import List\n\n\ndef common_prefix(strs: List[str], n: int) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    if not strs:\n        return ''\n    s = strs[0]\n    for i in range(1, n):\n        while i < len(strs[i]):\n            if strs[i][i] != s[i]:\n                return s[:i]\n            i += 1\n    return s", "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# solution 1\ndef common_prefix(strings, length):\n    if length == 0:\n        return ''\n    \n    first_string = strings[0]\n    first_string_char = first_string[0]\n\n    for i in range(1, length):\n        if strings[0][i] != first_string_char:\n            return first_string[:i]\n    \n    return first_string\n"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(str):\n    \"\"\"\n    :param str: \n    :return: \n    \"\"\"\n    # Your code goes here\n    regex = re.compile(\"[a-zA-Z0-9]\")\n    uppercase = list(filter(lambda x: regex.match(x), str))\n    lowercase = list(filter(lambda x: regex.match(x), str))\n    special_char = list(filter(lambda x: regex.match(x), str))\n    numeric = list(filter(lambda x: regex.match(x), str))\n    return uppercase, lowercase, special_char, numeric\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\n# +\nimport re\ndef find_character(string):\n    char_pattern = r\"[a-zA-Z]\"\n    alpha_pattern = r\"[a-zA-Z0-9]\"\n    num_pattern = r\"\\d\"\n    spec_pattern = r\"\\W\"\n    \n    alpha_val = re.findall(char_pattern, string)\n    alpha_val = list(set(alpha_val))\n    alpha_val.sort()\n    \n    num_val = re.findall(num_pattern, string)\n    num_val = list(set(num_val))\n    num_val.sort()\n    \n    spec_val = re.findall(spec_pattern, string)\n    spec_val = list(set(spec_val))\n    spec_val.sort()\n    \n    return alpha_val, num_val, spec_val, []\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(text):\n    import re\n    text = text.replace(\" \", \"\")\n    alph = re.findall(r\"[a-zA-Z]+\",text)\n    num = re.findall(r\"\\d+\",text)\n    spec = re.findall(r\"[!@#$%^&*()+\\[\\]-_=;:<>{}/.,~]\",text)\n    return alph,num,spec,text", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(sentence):\n    l = []\n    uc = []\n    lc = []\n    sp = []\n    nu = []\n\n    for word in re.findall(r'[A-Z]+', sentence):\n        if word not in l:\n            l.append(word)\n        uc.append(word)\n\n    for word in re.findall(r'[a-z]+', sentence):\n        if word not in l:\n            l.append(word)\n        lc.append(word)\n\n    for word in re.findall(r'[0-9]+', sentence):\n        if word not in l:\n            l.append(word)\n        nu.append(word)\n\n    for word in re.findall(r'[!@#$%^&\\*]+', sentence):\n        if word not in l:\n            l.append(word)\n        sp.append(word)\n\n    return (l, uc, lc, sp, nu)\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\n\ndef find_character(s):\n    character = [\"\"] * 4\n    s = s.lower()\n    # upper case\n    for char in s:\n        if char.isupper():\n            character[0] += char\n    # special character\n    for char in s:\n        if char.isalpha():\n            character[1] += char\n        if char.isspace():\n            character[2] += char\n        if char.isdigit():\n            character[3] += char\n    return character\n\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(string):\n    a= re.findall('[a-zA-Z]+', string)\n    b= re.findall('[A-Z]+', string)\n    c= re.findall('[0-9]+', string)\n    d= re.findall('[^a-zA-Z0-9]+', string)\n    return (a,b,c,d)\n\n\nfind_character(\"ThisIsGeeksforGeeks\")", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\ndef find_character(string):\n    string = string.lower()\n    lcase_char = re.findall(r\"[a-z]\",string)\n    ucase_char = re.findall(r\"[A-Z]\",string)\n    spec_char = re.findall(r\"[!@#$%^&*()_+\\-=+]\",string)\n    num_char = re.findall(r\"[0-9]\",string)\n    return lcase_char, ucase_char, spec_char, num_char\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\ndef find_character(string):\n    import re\n\n    uppercase = re.findall('[A-Z]', string)\n    lowercase = re.findall('[a-z]', string)\n    special_char = re.findall(r\"[^A-Za-z0-9\\s]\", string)\n    numeric = re.findall('[0-9]', string)\n\n    return uppercase, lowercase, special_char, numeric\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\ndef find_character(s):\n    upper = []\n    lower = []\n    special = []\n    numeric = []\n    for i in s:\n        if i.isupper():\n            upper.append(i)\n        elif i.islower():\n            lower.append(i)\n        elif i.isalpha():\n            if i.isdigit():\n                numeric.append(i)\n            else:\n                special.append(i)\n        elif i.isdigit():\n            numeric.append(i)\n    return upper,lower,special,numeric\n", "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\ndef find_character(string):\n    uppercase = re.findall('[A-Z]', string)\n    lowercase = re.findall('[a-z]', string)\n    special = re.findall('[A-Za-z0-9@#$%^&*()+=\\-/_]', string)\n    numeric = re.findall('[0-9]', string)\n    \n    return uppercase, lowercase, special, numeric\n\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k1, k2):\n    arr.sort()\n    return sum((arr[i+k1] == arr[i+k2]) for i in range(len(arr)-k1-k2))\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(array, k1, k2):\n    count = 0\n\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] - array[j] == k1 - k2:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nfrom typing import List\n\n\ndef count_pairs(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(N^2)\n    Space Complexity: O(1)\n    \"\"\"\n    c = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                c += 1\n    return c\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nfrom typing import List\nfrom collections import Counter\nfrom collections import defaultdict\n\n\ndef count_pairs(arr: List[int], k: int, n: int) -> int:\n    '''\n    Time Complexity: O(N^2)\n    Space Complexity: O(N)\n    '''\n    count_dict = Counter(arr)\n    count_pairs = 0\n\n    for i in count_dict.keys():\n        if i <= n:\n            count_pairs += count_dict[i] * (count_dict[i] - 1) // 2\n            if k > 0:\n                count_pairs += count_dict[i + k] * count_dict[i - k]\n\n    return count_pairs\n\n\ndef count_pairs_2(arr: List[int], k: int, n: int) -> int:\n    '''\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    '''\n    count_dict = defaultdict(int)\n\n    for item in arr:\n        count_dict[item] += 1\n\n    count_pairs = 0\n\n    for i in range(len(arr)):\n        if arr[i] <= n:\n            count_pairs += count_dict[arr[i]] * (count_dict[arr[i]] - 1) // 2\n\n            if k > 0:\n                count_pairs += count_dict[arr[i] + k] * count_dict[arr[i] - k]\n\n    return count_pairs\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k1, k2):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] - arr[j] == k1 or arr[i] - arr[j] == k2:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k):\n    if k < 0:\n        return 0\n    d = {}\n    for i in arr:\n        if i - k in d:\n            d[i - k] += 1\n        else:\n            d[i - k] = 1\n    return len(d)\n\ndef count_pairs_aux(arr, d, k):\n    for i in arr:\n        if i - k in d:\n            d[i - k] += 1\n        else:\n            d[i - k] = 1\n    return d\n\ndef count_pairs_better(arr, k):\n    d = {}\n    arr = sorted(arr)\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] == k:\n            d[k] = d.get(k, 0) + 1\n    return d\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, d):\n    pass\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k1, k2):\n    return len(set([(arr[i], arr[j]) for i in range(0, len(arr)) for j in range(0, len(arr)) if abs(arr[i] - arr[j]) == k1 + k2]))\n\n", "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nfrom typing import List\n\n\ndef count_pairs(array: List[int], k: int) -> int:\n    if len(array) < 2:\n        return 0\n\n    result = 0\n    array.sort()\n    for i in range(len(array) - 1):\n        if array[i + 1] - array[i] == k:\n            result += 1\n\n    return result\n\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(arr, num):\n    return all(x > num for x in arr)\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst,n):\n    if len(lst)==0:\n        return False\n    elif lst[0] > n:\n        return True\n    else:\n        return greater_specificnum(lst[1:],n)\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(my_list, value):\n  if len(my_list) == 0:\n    return False\n\n  if my_list[0] > value:\n    return [my_list[0]]\n\n  return greater_specificnum(my_list[1:], value) + [my_list[0]]\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst, num):\n    \"\"\"\n    list: a list\n    num: a number\n    return: True or False\n    \"\"\"\n    for i in lst:\n        if i > num:\n            return True\n        return False\n\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\n#list = []\n#for i in range(0,10):\n#    num = int(input())\n#    list.append(num)\n#num = 200\n#check = [x for x in list if x > num]\n\n#print(check)\n\ndef greater_specificnum(input_list, num):\n    check = []\n    for x in input_list:\n        if x > num:\n            check.append(x)\n    return check\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(numbers,number):\n    list = []\n    for num in numbers:\n        if num > number:\n            list.append(num)\n    return list\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(mylist, num):\n    for i in mylist:\n        if i>num:\n            return True\n    return False\n    ", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(list, num):\n    return [x for x in list if x > num]", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst, num):\n    for item in lst:\n        if item>num:\n            return True\n    return False\n", "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n# def greater_specificnum(a,num):\n#     return a[a>num]\n# print(greater_specificnum([220, 330, 500],200))\n\ndef greater_specificnum(a,num):\n    b = []\n    for i in a:\n        if i>num:\n            b.append(i)\n    return b"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    \"\"\"\n    focus of a parabola:\n    (a*c)/b\n    \"\"\"\n    focus = (a*c)/b\n    return focus\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(x_0, y_0, k):\n    return (y_0-k*x_0**2)/k\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    # Calculating discriminant\n    d = (b*b) - (4*a*c)\n    \n    # Calculating roots\n    if d>0:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        return(x1, x2)\n    elif d==0:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        return(x1)\n    else:\n        print(\"Not a parabola\")\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    return (b/2)/(-b/2+(2*c/(-a)))\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    '''focus of parabola equation'''\n    # return (-b-b**2/4a)/2a\n    return (-b-b**2/4a)/2a", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    return (-b/2*a, (b**2)/4*a**2 - c/a)\n\ndef test_parabola_focus():\n    assert parabola_focus(5,3,2)==(-0.3, 1.6)", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a,b,c):\n    # write code here\n    if b != 0:\n        if a**2 > 4*b*c:\n            f = (4*c*b - a**2)/(2*b)\n            return (f, f)\n        else:\n            return None\n    else:\n        if a > 0:\n            return (-c/a, 0)\n        else:\n            return None\n\n#assert parabola_focus(5,3,2)==(-0.3, 1.6)\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(x, y, a):\n    return (a*(x**2)-(y**2), 2*a*x)\n\ndef main():\n    print parabola_focus(5,3,2)\n    print parabola_focus(1.2, 3, 1)\n    print parabola_focus(3, 1, 2)\n    print parabola_focus(5, 1, 2)\n    print parabola_focus(100, 100, 10)\n    print parabola_focus(1, 100, 10)\n    print parabola_focus(100, 1, 10)\n    print parabola_focus(0, 0, 0)\n    print parabola_focus(0, 0, 0.5)\n    print parabola_focus(0, 0, 100)\n    print parabola_focus(0, 0, 0.01)\n    print parabola_focus(0, 0, 1000000000000)\n    print parabola_focus(1, 2, 2)\n    print parabola_focus(3, 4, 2)\n    print parabola_focus(4, 3, 2)\n    print parabola_focus(4, 3, 0)\n    print parabola_focus(4, 3, 0.5)\n    print parabola_focus(1, 2, 0)\n    print parabola_focus(1, 2, 0.5)\n    print parabola_focus(1, 2, 1)\n    print parabola_focus(1, 2, 2)\n    print parabola_focus(1, 2, 1000000000000)\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a,b,c):\n    d = b**2 - 4*a*c\n    x1 = (-b + d**0.5)/2*a\n    x2 = (-b - d**0.5)/2*a\n    return x1,x2\n\n", "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nimport math\n\ndef parabola_focus(a, b, c):\n    # http://math.stackexchange.com/questions/190171/focus-of-a-parabola\n\n    discriminant = b**2 - 4 * a * c\n    #print('discriminant:', discriminant)\n    if discriminant < 0:\n        #print('no real roots')\n        return None\n    else:\n        real_roots = math.sqrt(discriminant)\n        #print('real_roots:', real_roots)\n        #print('real_roots.real:', real_roots.real)\n        #print('real_roots.imag:', real_roots.imag)\n        x1 = (-b + real_roots) / (2 * a)\n        x2 = (-b - real_roots) / (2 * a)\n        #print('x1:', x1)\n        #print('x2:', x2)\n        #print('x1.real:', x1.real)\n        #print('x2.real:', x2.real)\n        #print('x1.imag:', x1.imag)\n        #print('x2.imag:', x2.imag)\n\n        return (x1, x2)\n\n# Test:"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nfrom re import search\ndef check_literals(string,literals):\n    for lit in literals:\n        if search(lit,string):\n            return 'Matched!'\n    return 'Not Matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(text,literals):\n    match = True\n    for literal in literals:\n        match = re.search(literal, text)\n        if match == None:\n            break\n    return 'Matched!' if match else 'Not matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(text, literals):\n    \"\"\"\n    Checks if all the literal strings are present in the text\n    \"\"\"\n    # Copy of the literals list\n    literals_copy = literals[:]\n    # Boolean variable for checking if all the literals are present in the text\n    all_matched = True\n    # Regex for checking if the literal string is present in the text\n    pattern = re.compile(r\"\\b\"+r\"\\b|\".join(literals)+\"\\b\", re.IGNORECASE)\n    for literal in literals:\n        # Check if literal is present in the text\n        if not pattern.search(text):\n            # Print message for matching\n            print('Matched!')\n            # Change the value of all_matched boolean variable\n            all_matched = False\n            # Remove the literal from the literals list\n            literals_copy.remove(literal)\n    # Print message for not matching\n    if all_matched:\n        print('Not matched!')\n\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\ndef check_literals(string, literal_list):\n    \"\"\"(string, [string]) -> string\n    Precondition: literal_list is a list of strings.\n    Returns the string \"Matched!\" if any of the literals in literal_list\n    are found in string, otherwise returns the string \"Not matched!\".\n\n    >>> check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n    True\n    >>> check_literals('The quick brown fox jumps over the lazy dog.',['cat']) == 'Not matched!'\n    True\n    \"\"\"\n    literals = '|'.join(literal_list)\n    match = re.search(literals, string)\n    if match:\n        return 'Matched!'\n    else:\n        return 'Not matched!'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(sentence, literals):\n    for l in literals:\n        if re.search(r'\\b' + l + r'\\b', sentence, re.IGNORECASE):\n            return 'Matched!'\n    return 'Not matched.'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(string,literals):\n    for lit in literals:\n        if re.search(lit,string,flags=re.IGNORECASE):\n            return 'Matched!'\n    return 'Not Found!'", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(text, literals):\n    result = []\n    for literal in literals:\n        if re.search(literal, text) is not None:\n            result.append('Matched!')\n    if len(result) == 0:\n        result = 'Not matched!'\n    return result", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(s, words):\n    for word in words:\n        if s.find(word) >= 0:\n            return 'Matched!'\n    return 'Not matched.'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\ndef check_literals(text, literal_list):\n    \"\"\"\n    :param text: the text to be checked\n    :param literal_list: a list of literals to be searched\n    :return: 'Matched!' if found, else 'Not matched'\n    \"\"\"\n    if len(literal_list) == 0:\n        return 'Not matched'\n    pattern = '|'.join(literal_list)\n    match_list = re.findall(pattern, text)\n    if len(match_list) == 0:\n        return 'Not matched'\n    else:\n        return 'Matched!'\n", "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(string,search_list):\n    flag=False\n    for word in search_list:\n        if re.search(word,string):\n            flag=True\n            break\n    return 'Matched!' if flag else 'No match'\n\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(string1, string2, m, n):\n    # Write your code here\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp[-1][-1]\n\ndef longest_common_subsequence_slow(string1, string2, m, n):\n    # Write your code here\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp[-1][-1]", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(x, y):\n    if len(x) == 0 or len(y) == 0:\n        return 0\n    elif x[0] == y[0]:\n        return 1 + longest_common_subsequence(x[1:], y[1:])\n    else:\n        return max(longest_common_subsequence(x, y[1:]) , longest_common_subsequence(x[1:], y))\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(str1, str2, m, n):\n    \"\"\"\n    :type str1: str\n    :type str2: str\n    :rtype: int\n    \"\"\"\n    # Base cases\n    if m == 0 or n == 0:\n        return 0\n    \n    # Initialize dp[i][j] to zero for all i, j\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    # Iterate from 0 to m\n    for i in range(m + 1):\n        # Iterate from 0 to n\n        for j in range(n + 1):\n            # Base case\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            # If the characters are same then add 1\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            # If characters are not same then take maximum of previous 2 rows\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Return the last cell\n    return dp[m][n]\n\ndef main():\n    # Test 1\n    str1 = \"AGGTAB\"\n    str2 = \"GXTXAYB\"\n    print(longest_common_subsequence(str1, str2, len(str1), len(str2)))\n\n    # Test 2\n    str1 = \"AGGTAB\"\n    str2 = \"GXTXAYB\"\n    print(longest_common_subsequence(str1, str2, 0, 0))\n\n    # Test 3\n    str1 = \"AGGTAB\"\n    str2 = \"GXTXAYB\"\n    print(longest_common_subsequence(str1, str2, 2, 7))\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\n# Function to find the LCS of the two given strings\ndef longest_common_subsequence(str1, str2, m, n):\n    \n    # Create a 2D matrix to store the values\n    lcs = [[0 for i in range(n+1)] for j in range(m+1)]\n    \n    # Initialize the values\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                lcs[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                lcs[i][j] = lcs[i-1][j-1]+1\n            else:\n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n    \n    return lcs[m][n]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(str1, str2, m, n):\n    if m == 0 or n == 0:\n        return 0\n    \n    max_length = 0\n    for i in range(0, m):\n        for j in range(0, n):\n            if str1[i] == str2[j]:\n                max_length = max(max_length, 1 + longest_common_subsequence(str1, str2, i, j))\n                \n    return max_length\n\ndef longest_common_subsequence_by_bottom_up(str1, str2, m, n):\n    if m == 0 or n == 0:\n        return 0\n    \n    max_length = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                max_length[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                max_length[i][j] = 1 + max_length[i - 1][j - 1]\n            else:\n                max_length[i][j] = max(max_length[i][j - 1], max_length[i - 1][j])\n                \n    return max_length[m][n]\n\ndef main():\n    assert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 4\n    assert longest_common_subsequence_by_bottom_up(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 4\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\nfrom collections import defaultdict\n\ndef longest_common_subsequence(str1, str2):\n    dp = defaultdict(int)\n    for i,c in enumerate(str1):\n        for j,d in enumerate(str2):\n            if i == 0 or j == 0:\n                dp[i, j] = 0\n            elif str1[i] == str2[j]:\n                dp[i, j] = 1 + dp[i-1, j-1]\n            else:\n                dp[i, j] = max(dp[i-1, j], dp[i, j-1])\n    return dp[len(str1)-1, len(str2)-1]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(X, Y, M, N):\n    # code here\n    seq1 = X[0:M]\n    seq2 = Y[0:N]\n    #print(seq1)\n    #print(seq2)\n    L = [[0 for i in range(N+1)] for j in range(M+1)]\n    for i in range(M+1):\n        for j in range(N+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i][j-1], L[i-1][j])\n    #print(L)\n    return L[M][N]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\nfrom typing import List\n\n\ndef longest_common_subsequence(str1: str, str2: str) -> int:\n    \"\"\"Return the length of the longest common subsequence between two strings.\"\"\"\n    # Dynamic Programming Approach\n    if len(str1) == 0 or len(str2) == 0:\n        return 0\n    if str1 == str2:\n        return len(str1)\n    m = len(str1)\n    n = len(str2)\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    return table[m][n]\n\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(str1, str2, m, n):\n    LCS = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str1[i-1] == str2[j-1]:\n                LCS[i][j] = 1 + LCS[i-1][j-1]\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    return LCS[m][n]\n", "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(a, b, n, m):\n    # Write your code here\n    table = [[0 for i in range(m+1)] for j in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if a[i-1] == b[j-1]:\n                table[i][j] = table[i-1][j-1]+1\n            else:\n                table[i][j] = max(table[i][j-1], table[i-1][j])\n    return table[-1][-1]\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    if num < 0:\n        return False\n    for i in range(int(num ** 0.5) + 1):\n        if num % i == 0:\n            left, right = num // i, i\n    if left ** 2 == num and right ** 2 == num:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\n# +\ndef prod_Square(num):\n    # Check if the number is a perfect square or not\n    # If it is, return False\n    if num % 2 == 0:\n        return False\n    # If the number is not a perfect square, convert it to a string\n    # and then check if it can be represented by product of two integers\n    # and then return the answer\n    square_num = str(num)\n    for i in range(len(square_num)):\n        for j in range(len(square_num)):\n            if square_num[i] == square_num[j]:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    import math\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                return False\n            else:\n                return True\n    return True\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\nimport math\ndef prod_Square(x):\n    num1, num2 = math.ceil(math.sqrt(x)), math.floor(math.sqrt(x))\n    return num1**2 == x or num2**2 == x\n\n\n# Testing", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    sq_array = [int(sqrt(i)) for i in range(1, num+1)]\n    sq_num = len(sq_array)\n    for i in range(sq_num):\n        for j in range(sq_num):\n            if sq_array[i] * sq_array[j] == num:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\nimport math\ndef prod_Square(num):\n    square_1,square_2=0,0\n    for i in range(1,int(math.sqrt(num))+1):\n        if num%i==0:\n            square_1=square_1+i\n            square_2=num//i\n            break\n    if square_1==square_2 and square_1*square_2==num:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    for i in range(1,n+1):\n        if n%i==0:\n            break\n        if (n%i==0):\n            break\n    else:\n        return True\n    for j in range(i,n+1):\n        if n%j==0:\n            break\n        if (n%j==0):\n            break\n    else:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(num):\n    for i in range(1,int(num**0.5)+1):\n        if num % i == 0:\n            for j in range(1,int(num**0.5)+1):\n                if num % j == 0 and i != j:\n                    if i**2 == num and j**2 == num:\n                        return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    if num < 0:\n        return False\n    for i in range(num+1):\n        if num % i == 0:\n            print(\"Divisible by\", i)\n            return False\n    return True\n\n#For each i in range 1 to num, check if num%i == 0 else return False"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(seq, n):\n    count = {i:0 for i in range(1,n+1)}\n    for item in seq:\n        if item in count:\n            count[item] += 1\n        else:\n            return item\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(li,N):\n    li = list(set(li))\n    li.sort()\n    for i in range(1,N+1):\n        if i not in li:\n            return i\n    return N+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(array,size):\n    for i in range(size):\n        if array[i] <= 0:\n            array[i] = array[i] * (-1)\n        while array[i] > 0 and array[i] <= size and array[i] != array[array[i] - 1]:\n            #swap the value of array[i] and array[array[i]-1]\n            array[i],array[array[i]-1] = array[array[i]-1],array[i]\n    \n    for i in range(size):\n        if array[i] > 0:\n            return i + 1\n    \n    return size + 1\n\narray = [1,2,3,-1,5]\nsize = len(array)", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr,n):\n    #Your code goes here\n    if n == len(arr):\n        return -1\n    else:\n        for i in range(n):\n            if arr[i] == arr[arr[i]-1] and arr[i] != 0:\n                arr[i] = arr[arr[i]-1]\n        for i in range(n):\n            if arr[i] != i+1:\n                return i+1\n        return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(nums, n):\n    for i in range(n):\n        if nums[i] > 0 and nums[i] <= n and nums[i] != nums[nums[i] - 1]:\n            tmp = nums[i]\n            nums[i] = nums[nums[i] - 1]\n            nums[tmp - 1] = tmp\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1\n\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    first_positive = 1\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            arr[i] -= 1\n            if arr[i] < 0:\n                arr[i] = first_positive -1\n                first_positive += 1\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            return first_positive + i\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr,n):\n    for i in range(n):\n        if arr[i] > 0 and arr[i] <= n and arr[i] != i+1:\n            arr[i],arr[i-1] = arr[i-1],arr[i]\n    for i in range(n):\n        if arr[i] != i+1:\n            return i+1\n    return n+1", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, size):\n\tif arr is None or size == 0:\n\t\treturn None\n\t\"\"\"\n\tgo through the array from left to right, if the next position is None, mark the position as positive number\n\tif the next position is not None, compare the number and mark it as positive number if it is negative.\n\t\"\"\"\n\tfor i in range(size):\n\t\tif arr[i] is None:\n\t\t\tarr[i] = i+1\n\t\telif arr[i] < 0:\n\t\t\tarr[i] = -arr[i]\n\t\telse:\n\t\t\tcontinue\n\tprint(arr)\n\t\"\"\"\n\tgo through the array from left to right, if the next position is None, mark the position as positive number\n\tif the next position is not None, compare the number and mark it as positive number if it is negative.\n\t\"\"\"\n\tfor i in range(size):\n\t\tif arr[i] is None:\n\t\t\treturn i+1\n\treturn None\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    # if length is zero, return 1\n    if n <= 0:\n        return 1\n    arr.sort()\n    # write your code here\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n    return n+1\n", "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(numbers, n):\n    if n > 0:\n        for i in range(1, n+1):\n            if i not in numbers:\n                return i\n    else:\n        return \"There is no missing number!\"\n    return \"There is no missing number!\"\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    global x\n    global y\n    x1,x2 = abs(x1-x2),abs(x1-x2)\n    y1,y2 = abs(y1-y2),abs(y1-y2)\n    x = x1\n    y = y1\n    return int(((x*x)+(y*y))**0.5)\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    return ((x2-x1)+1)*(y2-y1)+1\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(a,b,c,d):\n    return (c-a)**2 + (d-b)**2", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2):\n    # YOUR CODE HERE\n    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if(i*i + j*j <= 4*4):\n                count += 1\n    return count", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    x = range(x1, x2+1)\n    y = range(y1, y2+1)\n    points = 0\n    for i in x:\n        for j in y:\n            if i*i+j*j <= 100:\n                points += 1\n    return points\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\n#Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1, y1, x2, y2):\n    return int((x2-x1) * (y2-y1))\n\n# Test the function", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    # Fill in this function.\n    return 0\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x,y,w,h):\n    return w*h\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x0, y0, x1, y1):\n    if(x0 > x1):\n        temp = x0\n        x0 = x1\n        x1 = temp\n    if(y0 > y1):\n        temp = y0\n        y0 = y1\n        y1 = temp\n    return (x1-x0)*(y1-y0)\n", "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x_min,y_min,x_max,y_max):\n    # Write your code here\n    return # Your code here\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    return (month == \"December\") or (month == \"January\") or (month == \"February\")\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if (month == 'January') or (month == 'February') or (month == 'March') or (month == 'April') or (month == 'May') or (month == 'June') or (month == 'July') or (month == 'August') or (month == 'September') or (month == 'October') or (month == 'November') or (month == 'December'):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month == \"February\" or month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(monthname):\n    \"\"\"\n    This function will check if the given month contains 30 days or not.\n    \"\"\"\n    if monthname==\"January\" or monthname==\"February\" or monthname==\"March\" or monthname==\"April\" or monthname==\"May\" or monthname==\"June\" or monthname==\"July\" or monthname==\"August\" or monthname==\"September\" or monthname==\"October\" or monthname==\"November\":\n        return False\n    elif monthname==\"December\":\n        return True", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return False\n    elif month in [\"April\", \"June\", \"September\", \"November\"]:\n        return True\n    else:\n        print(\"Wrong month name\")\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    months = {\n        \"January\": 31,\n        \"February\": 29,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    if month.lower() in months.keys():\n        return True\n    else:\n        return False\n\n# Alternative solution\ndef check_monthnumber_alt(month):\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    if month.lower() in months.keys():\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if month.lower() == \"february\" or month.lower() == \"april\" or month.lower() == \"june\" or month.lower() == \"july\" or month.lower() == \"august\" or month.lower() == \"october\" or month.lower() == \"november\":\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n    if monthname == \"January\" or monthname == \"March\" or monthname == \"May\" or monthname == \"July\" or monthname == \"August\" or monthname == \"October\" or monthname == \"December\":\n        return False\n    elif monthname == \"April\" or monthname == \"June\" or monthname == \"September\" or monthname == \"November\":\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    \"\"\"\n    Check if month number is divisible by 30 or not.\n    \"\"\"\n    if int(month) % 30 == 0:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month_name):\n    if month_name in ('January','February','March','April','May','June','July','August','September','October','November','December'):\n        return True\n    return False"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    if string.find(\"?\") != -1:\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    flag=0\n    for i in s:\n        if i.isalpha() or i.isnumeric():\n            flag=1\n    if flag==1:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    if(len(string)>0):\n        for i in range(len(string)):\n            if(string[i].isdigit() or string[i].isalpha()):\n                return True\n            else:\n                return False\n    else:\n        return False\n\n# Driver code to test above function", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(s):\n    for i in s:\n        if i.isalpha() == True:\n            return True\n        elif i.isnumeric() == True:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(input_str):\n    '''\n    input_str: a string\n    return: True if it contains atleast one letter and one number\n    '''\n    flag = 0\n    for letter in input_str:\n        if(letter.isalpha()):\n            flag = 1\n            break\n    if(flag == 0):\n        return False\n    flag = 0\n    for number in input_str:\n        if(number.isnumeric()):\n            flag = 1\n            break\n    if(flag == 0):\n        return False\n    return True\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    for i in string:\n        if i.isalpha():\n            return True\n        elif i.isdigit():\n            return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n  if any(char.isdigit() for char in string):\n    return True\n  else:\n    return False\n\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    # Find all characters that are digits.\n    digits = [i for i in string if i.isdigit()]\n    # If there are digits, return true.\n    if digits:\n        return True\n    # Find all characters that are letters.\n    letters = [i for i in string if i.isalpha()]\n    # If there are letters, return true.\n    if letters:\n        return True\n    # If there are neither, return false.\n    return False\n\n\n# ====================================================================================================================================\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    string = string.lower()\n    for i in range(len(string)):\n        if string[i].isalpha():\n            return True\n        if string[i].isnumeric():\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(str1):\n    if len(str1) >= 1:\n        if str1.isalpha():\n            print(\"String contains a letter\")\n            return True\n        else:\n            print(\"String does not contain a letter\")\n            return False\n    else:\n        print(\"String does not contain a letter\")\n        return False\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tup):\n    unique_values = []\n    for item in tup:\n        if item not in unique_values:\n            unique_values.append(item)\n    return tuple(unique_values)", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tuple):\n    return tuple(set(tuple))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    set_of_values = set(tup)\n    return tuple(set_of_values)\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    dict_of_tup = {}\n    for i in tup:\n        if i in dict_of_tup:\n            dict_of_tup[i] += 1\n        else:\n            dict_of_tup[i] = 1\n    return list(dict_of_tup.keys())\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(arr):\n    return list(set(arr))\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    return tuple(list(set(tup)))", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tup):\n    s = set()\n    for i in tup:\n        if i not in s:\n            s.add(i)\n    return s\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    \"\"\"\n    This function creates a set from the given tuple, removes the set\n    from the given tuple, and then returns the new tuple.\n    \"\"\"\n    return list(set(tup))\n\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(t):\n    d = {}\n    for e in t:\n        if e in d:\n            d[e] += 1\n        else:\n            d[e] = 1\n    return tuple(d.keys())\n", "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef remove_tuple(tup: Tuple) -> Tuple:\n    \"\"\"\n    >>> remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))\n    (1, 2, 3, 5)\n    >>> remove_tuple((1, 2, 3, 4, 5, 6))\n    (1, 2, 3, 4, 5, 6)\n    >>> remove_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9))\n    (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    \"\"\"\n\n    unique_list = []\n    for item in tup:\n        if item not in unique_list:\n            unique_list.append(item)\n\n    return tuple(unique_list)\n\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(n):\n    decimal = 0\n    for i in range(1, 8):\n        decimal += (n//(8**(7-i)))*(8**i)\n    return decimal\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    return int(octal, 8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal):\n    value = 0\n    for i in range(len(str(octal))):\n        value = value * 8 + int(str(octal)[i])\n    return value\n\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n    # using f-string\n    # value = bin(octal_number)[2:]\n    value = bin(octal_number)[2:].zfill(len(octal_number))\n    return int(value, 2)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(oct_num):\n    dec_num = 0\n    for i in range(len(str(oct_num))):\n        dec_num = dec_num * 8 + int(str(oct_num)[i])\n    return dec_num\n\n# Check", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(oct):\n    if oct == 0:\n        return 0\n    else:\n        return octal_To_Decimal(oct / 10) + (oct % 10)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_number):\n    # Your code starts here\n    octal_number_as_str = str(octal_number)\n    decimal_number = 0\n    for i in range(len(octal_number_as_str) - 1, -1, -1):\n        decimal_number += (int(octal_number_as_str[i]) * (8 ** i))\n    # Your code ends here\n    return decimal_number\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal):\n    if octal < 0:\n        return \"Invalid Number\"\n    return int(octal, 8)\n", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(n):\n    # Your code goes here\n    return bin(n).replace('0b', '').replace(' ','')\n    ", "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n    decimal_number = 0\n    for i in range(len(str(octal_number))):\n        decimal_number = decimal_number * 8 + int(str(octal_number)[i])\n    return decimal_number"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(array,value,index):\n\tif array[index] == value:\n\t\treturn index\n\telif index == 0:\n\t\treturn \"The value {} was not found in the array\".format(value)\n\telse:\n\t\treturn first(array,value,index - 1)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr,target):\n    if arr is None or arr == []:\n        return None\n    \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = int((start + end)/2)\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return None\n\n# test code", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\n#define first(a,x) (find(a, x)-1)\ndef first(array, key, item):\n    if array[0]==item: return 0\n    if key>item: return -1\n    if key<item: return len(array)-1\n    if key==item: return 0\n    #find insertion point\n    #for i in range(0, len(array)):\n    #    if array[i]<key: return i\n    #    elif array[i]==key: return i\n    left, right = 0, len(array)-1\n    while left<right:\n        mid = (left+right)//2\n        if array[mid]<key: left = mid+1\n        elif array[mid]==key: return mid\n        else: right = mid\n    return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(nums,val,p=0):\n    if nums[p]==val:\n        return p\n    elif nums[p]>val:\n        return first(nums,val,p-1)\n    else:\n        return first(nums,val,p+1)\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(L,x,y):\n    if x < y:\n        for i in range(x,y+1):\n            if L[i] == x:\n                return i\n    else:\n        for i in range(x,y-1):\n            if L[i] == x:\n                return i\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(A, x):\n    i = 0\n    while i < len(A) and A[i] < x:\n        i = i + 1\n    if i == len(A) or A[i] != x:\n        return -1\n    else:\n        return i", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(array,element):\n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    \"\"\"\n    if array == []:\n        return -1\n    if array[0] == element:\n        return 0\n    elif array[0] > element:\n        return first(array[1:],element)\n    else:\n        return first(array[1:],element) + len(array[0])\n\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr,num):\n    if arr == []:\n        return -1\n    \n    i = 0\n    while i < len(arr) and arr[i] != num:\n        i += 1\n    \n    if i < len(arr) and arr[i] == num:\n        return i\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,target,start):\n  if(target == arr[start]):\n    return start\n  else:\n    if(target < arr[start]):\n      return start\n    else:\n      return first(arr,target,start+1)", "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, x, first_pos=None):\n    if first_pos is None:\n        first_pos = 0\n    for i in range(first_pos, len(arr)):\n        if arr[i] == x:\n            return i\n    return None\n\n\ndef test_first():\n    assert first([1,2,3,4,5,6,6], 6) == 5\n    assert first([1,2,3,4,5,6,6], 6, 3) == 5\n    assert first([1,2,3,4,5,6,6], 7) == None\n\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    remove_list = []\n    for element in tuples:\n        if len(element) == k:\n            remove_list.append(element)\n    for i in remove_list:\n        tuples.remove(i)\n    return tuples\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(arr, k):\n    return list(filter(lambda x: len(x) != k, arr))\n\n# assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 2) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\n# assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 3) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\n# assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 4) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    result = []\n    for i in tuples:\n        if len(i) > k:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    # Your code here\n    def remove_elem(element):\n        if len(element) == k:\n            return False\n        else:\n            return True\n    return list(filter(remove_elem, tuples))\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    return [tuple for tuple in tuples if len(tuple) > k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    new_tuples = []\n    for i in tuples:\n        if len(i) != k:\n            new_tuples.append(i)\n\n    return new_tuples\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    \"\"\"Remove tuples with length k\"\"\"\n    res = [tuple for tuple in tuples if len(tuple) != k]\n    return res\n\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(my_list, k):\n    return [x for x in my_list if len(x) != k]\n", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(l, k):\n    return [item for item in l if len(item) > k]", "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\nfrom collections import Counter\n\ndef remove_tuples(tuples, k):\n    if k == 1:\n        return tuples\n    else:\n        # sort tuples\n        tuples.sort(key=lambda x: x[0])\n        # create a set of tuples that have length k and compare their elements\n        tuples_to_remove = set(tuple([x[1]] * k) for x in tuples if x[0] == k)\n        # return tuples without tuples_to_remove\n        return [x for x in tuples if x not in tuples_to_remove]\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(x, y):\n    #your code here\n    result = 1\n    x_num = 1\n    y_num = 1\n    \n    for i in range(len(x)):\n        result *= x[i] ** y[i]\n        x_num *= x[i]\n        y_num *= y[i]\n    \n    return result, x_num, y_num, result / x_num / y_num\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\n# Solution\ndef find_exponentio(x, y):\n    res = 1\n    for i in range(len(x)):\n        res *= x[i]**y[i]\n    return res\n\n# Tests", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(x, y):\n    # Write your code here\n    #\n    # Sample return:\n    # (100000, 4096, 78125, 7776)\n    #\n    # Sample input:\n    # (10, 4, 5, 6)\n    # (5, 6, 7, 5)\n    #\n    # Sample input:\n    # (2, 2, 3, 4, 2, 5)\n    # (5, 6, 7, 5)\n    #\n    # Sample input:\n    # (5, 4, 3, 2, 1)\n    # (1, 2, 3, 4, 5)\n    #\n    # Sample input:\n    # (1, 2, 3)\n    # (5, 4, 3, 2, 1)\n    \n    from itertools import cycle\n\n    def power(base, power):\n        if power == 0:\n            return 1\n        elif power == 1:\n            return base\n        else:\n            return base * power(base, power - 1)\n\n    result = []\n    for base, power in zip(cycle(x), cycle(y)):\n        if power == 0:\n            result.append(1)\n        else:\n            result.append(power(base))\n    return result", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(tup1, tup2):\n    e = 0\n    for i in range(len(tup2)):\n        e += tup2[i] * pow(tup1[i], tup2[i])\n    return (e, tup1[0], tup1[1], tup1[2])\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\nimport itertools\n\n\ndef find_exponentio(a, b):\n    # Returns the tuple of elements which are raised to the power of the elements of the other tuple.\n    return tuple(\n        (a[i] ** b[i]) for i in range(len(a))\n    )\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(x, y):\n    # Initialize the result\n    result = (1, 1)\n\n    # Iterate through the list of tuples\n    for num_x, num_y in zip(x, y):\n        # Multiply the current values of the two lists\n        result = (result[0] * num_x, result[1] * num_y)\n\n    # Return the result\n    return result\n\n", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(base_tuple, exponent_tuple):\n    if len(base_tuple) != len(exponent_tuple):\n        raise ValueError(\"Tuple lengths must match!\")\n    answer = []\n    for idx in range(len(base_tuple)):\n        answer.append(base_tuple[idx]**exponent_tuple[idx])\n    return tuple(answer)\n\n# Tests", "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b):\n    if len(a) != len(b):\n        return None\n    if b[0] == 0:\n        return (1, 0, 1, 0)\n    z = (1, 0, 1, 0)\n    while b[0] > 0:\n        # 0 1 2 3\n        # 0 1 2 3\n        # 0 1 2 3\n        # 0 1 2 3\n        #\n        #      1 2 3 4\n        # x     x   x   x\n        # =    a   a   a   a\n        #\n        #      5 6 7 8\n        # b     b   b   b\n        # =    a   a   a   a\n        #\n        #      5 6 7 8\n        # a     a   a   a\n        # =    a   a   a   a\n        #\n        #      5 6 7 8\n        # x     x   x   x\n        # =    b   b   b   b\n        #\n        #      9 10 11 12\n        # z     z   z   z\n        # =    b   b   b   b\n        if b[0] % 2 == 1:\n            z = multiply(z, a)\n        a = multiply(a, a)\n        b = divide(b, 2)\n    return z\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfrom math import sqrt\n\ndef largest_triangle(a,b):\n    c = sqrt((a*a)/2 + (b*b)/2)\n    x = c * 2\n    y = c * sqrt(3)\n    return x * y\n\n# Test cases", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    # Approach:\n    # (1) Compute all the vertices of the triangle (12 points)\n    # (2) Compute the distance between these points and the circle\n    # (3) Pick the maximum distance as the height of the triangle\n\n    # Part 1:\n    # Triangle is a regular triangle. We have a,b,c, where a+b=c, a^2+b^2=c^2, and a^2=b^2+c^2\n    # 2b=c\n    # 2a=c\n    #\n    # Let's say h is the height of the triangle. Then:\n    # 2a^2=h^2\n    # a^2+h^2=c^2\n    # a^2-c^2+h^2=0\n    #\n    # Squaring both sides and expanding gives:\n    # 4a^4-8a^2c^2+c^4+h^2c^2=0\n    # (a^2-c^2)^2+h^2c^2=0\n    #\n    # Rearranging gives:\n    # a^2-c^2=\\pm h\\sqrt{c^2}\n    #\n    # h^2c^2=(a^2-c^2)^2\n    # h^2c^2=a^4-2a^2c^2+c^4\n    # h^2c^2=a^4-4ac^2+c^4\n    #\n    # h^2=(a^2-4ac^2+c^4)/c^2\n    #\n    # The maximum height of the triangle is:\n    # hmax = sqrt((a^2-4ac^2+c^4)/c^2)\n    #\n    # The height of the triangle is the distance between the circle and the three vertices.\n    # So we have to multiply by 2, since there are 2 vertices.\n    #\n    # In terms of a and b, this is:\n    # hmax = 2 sqrt((", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    \"\"\"\n    a: half-major axis\n    b: half-minor axis\n    \"\"\"\n    c = (3*a**2 + b**2)**0.5\n    s = (a**2+b**2)**0.5\n    return (s-c) * (s+c) / 2\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef largest_triangle(a: int, b: int) -> float:\n    \"\"\"\n    >>> largest_triangle(4, 2)\n    10.392304845413264\n    \"\"\"\n    # a > b\n    # (a^2 - b^2) / (2*b)\n    return (a ** 2 - b ** 2) / (2 * b)\n\n\ndef test_largest_triangle():\n    assert largest_triangle(4, 2) == 10.392304845413264\n\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    answer = 0\n    while True:\n        x = (a**2)/(4*b)\n        if x >= 3:\n            answer = x\n        if x < 3 and x >= 2:\n            answer = x-1\n        if x < 2 and x > 1:\n            answer = 1\n        if x == 1:\n            answer = 2\n        break\n    return answer\n\nlargest_triangle(4,2)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nQ3. Write a program to generate all sentences where subject is in [\"Americans\",\"Indians\"] and verb is in [\"Play\",\"watch\"] and the object is in [\"Baseball\",\"cricket\"].\n\n### Code:\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nimport math\n\ndef largest_triangle(a,b):\n    return 2*math.sqrt(b*(b+a) * a*(a+b))\n\n#print largest_triangle(4,2)\n\n# This is the same as the second solution, but slower.\n#def largest_triangle(a,b):\n#    x,y = 0,0\n#    x = a + b\n#    y = math.sqrt(math.pow(a,2) + math.pow(b,2))\n#    return 2*x*y\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a,b):\n    p = (a**2 + b**2)/2\n    #print(p)\n    d = b**2 - (a**2)/4\n    #print(d)\n    #a**2 + b**2 = 2 * a * b\n    #a**2 + 2*a*b + b**2 = 4a**2\n    #b**2 - 4*a**2 + 2*a*b + b**2 = 0\n    #b**2 - 2*a**2 + 2*a*b = 0\n    #b**2 - 2*a**2 + 2*a*b = d\n    #x**2 - 2x + 2y + 1 = 0\n    x = 1 - 2*a\n    y = np.sqrt(d)\n    area = 0.5*y*x\n    return area\n", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    pi = 3.14\n    h = (a+b)/2\n    area = (pi*(h**2))\n    perimeter = a+b+h\n    return perimeter\nlargest_triangle(4,2)", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    x = 0\n    while (x**2 - 1)**2/(a**2) + (x**2 - 1)/(b**2) <= 1:\n        x += 0.01\n    y = 0\n    while (x**2 - 1)**2/(a**2) + (x**2 - 1)/(b**2) <= 1:\n        y += 0.01\n    if (x**2 - 1)**2/(a**2) + (x**2 - 1)/(b**2) > 1:\n        return largest_triangle(a,b)\n    else:\n        return 2*(x**2 - 1)*y", "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\n\ndef largest_triangle(a,b):\n    max_ = 0\n    for i in range(1, 1000):\n        for j in range(1, 1000):\n            for k in range(1, 1000):\n                if(math.pow(i, 2) + math.pow(j, 2)) <= math.pow(b, 2) and math.pow(j, 2) + math.pow(k, 2) <= math.pow(a, 2):\n                    if(i*j*k > max_):\n                        max_ = i*j*k\n    return max_\n\ndef main():\n    print(largest_triangle(4,2))\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    assert highest_Power_of_2(10) == 8\n    \"\"\"\n    for i in range(8):\n        if 2**i >= n:\n            return 2**i\n    return 1\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(num):\n    if num == 0:\n        return 0\n    max_pow = 0\n    while (num > 0):\n        if (num & 1) == 1:\n            max_pow = max(max_pow, 1 + max_pow)\n        num >>= 1\n    return max_pow\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(num):\n    if num == 0:\n        return 0\n    for i in range(1, 32):\n        if 1 << i <= num:\n            return 1 << i\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    n -> the given number\n    return the highest power of 2 less than or equal to given number\n    \"\"\"\n    # check if the given number is power of 2\n    if is_power_of_2(n):\n        return n\n    else:\n        while True:\n            if is_power_of_2(n):\n                return n\n            else:\n                n = n // 2\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n & (n-1) == 0:\n        return n\n    return highest_Power_of_2(n&(n-1))\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    ans = 1\n    while ans <= n:\n        ans = ans << 1\n    return ans >> 1\n\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n#using while loop\ndef highest_Power_of_2(num):\n    #start value\n    i = 2\n    while (i <= num):\n        if(i**2 <= num):\n            return i**2\n        i += 1\n    return -1\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    count = 0\n    while(2**count <= n):\n        count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    i = 0\n    while(2**i < n):\n        i = i+1\n    return 2**(i-1)", "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(number):\n    power = 1\n    while(power < number):\n        power *= 2\n    return power\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(l):\n    return [i for i, v in enumerate(l) if v == max(l)]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(a):\n    return [i for i in range(len(a)) if a[i]==max(a)]\n\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(input_list):\n    position = []\n    for i in range(0,len(input_list)):\n        if(input_list[i] == max(input_list)):\n            position.append(i)\n    return position\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(given_list):\n    max_list=[]\n    index_list=[]\n    for i in range(len(given_list)):\n        if(given_list[i]>max(max_list)):\n            max_list.append(given_list[i])\n            index_list.append(i)\n    return index_list\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(L):\n    res=[]\n    for i in range(len(L)):\n        if L[i]==max(L):\n            res.append(i)\n    return res", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(l):\n    return [i for i in range(len(l)) if l[i]==max(l)]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(array):\n    max_values = []\n    for idx in range(len(array)):\n        if max_values == []:\n            max_values = [array[idx]]\n        elif array[idx] > max_values[-1]:\n            max_values.append(array[idx])\n    return [i for i in range(len(array)) if array[i] == max_values[-1]]\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(arr):\n    max_value = arr[0]\n    result = []\n    for i, value in enumerate(arr):\n        if value > max_value:\n            max_value = value\n            result = [i]\n        elif value == max_value:\n            result.append(i)\n    return result\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    pos=0\n    for i in range(len(lst)):\n        if lst[i]>lst[pos]:\n            pos=i\n    return [pos]\nposition_max([12,33,23,10,67,89,45,667,23,12,11,10,54])\n", "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(arr):\n    list_len = len(arr)\n    max_pos = []\n    for i in range(list_len):\n        max_val = arr[i]\n        for j in range(i+1, list_len):\n            if max_val < arr[j]:\n                max_val = arr[j]\n                max_pos.append(j)\n    return max_pos\n\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    if len(lst)==0:\n        return False\n    else:\n        return lst[0]==lst[1] and chkList(lst[2:])\n\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    lst1=[]\n    for i in lst:\n        if i not in lst1:\n            lst1.append(i)\n    if len(lst1)==len(lst):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    #a = {lst}\n    #return len(a) == 1\n    if len(lst) == 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] != lst[i + 1]:\n                return False\n    return True\n\n#assert chkList([1,2,3,1]) == False", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(l):\n    for i in l:\n        if l.count(i) != 1:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(l):\n    #use set() to remove duplicates\n    return len(set(l)) == len(l)\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(l):\n\tfor i in range(len(l)):\n\t\tfor j in range(i+1, len(l)):\n\t\t\tif(l[i] != l[j]):\n\t\t\t\treturn False\n\treturn True\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    #Write your code here\n    s = set(lst)\n    if len(s) == len(lst):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(set(lst))==1:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    lst1 = set(lst)\n    if len(lst1) == 1:\n        return True\n    else:\n        return False\n\nlst = ['one','two','three']", "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\n# write your code here\ndef chkList(list1):\n    if list1[0] == list1[1] and list1[0] == list1[2]:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    return ''.join([i for i in s if i % 2 != 0])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(word):\n    return ''.join(i for i in word if int(i) % 2 != 0)\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(word):\n    return \"\".join(x for x in word if x % 2 != 0)\n\n#Write a function to check whether a string starts and ends with a given character.", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    \"\"\"\n    string: str\n    return: str\n    \"\"\"\n    # TODO: implement function\n    even_list = []\n    odd_list = []\n    for i in range(len(string)):\n        if string[i]%2==0:\n            even_list.append(string[i])\n        else:\n            odd_list.append(string[i])\n    return \"\".join(even_list)\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    if len(string)==0:\n        return \"\"\n    else:\n        if string[0]%2==0:\n            return remove_even(string[1:])\n        else:\n            return string[0] + remove_even(string[1:])\n\n#print(remove_even(\"python\"))\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    return ''.join(i for i in string if int(i) % 2 != 0)\n\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(str):\n    l=[]\n    for i in str:\n        if i%2!=0:\n            l.append(i)\n    return \"\".join(l)", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return ''.join([x for x in string if x.isdigit()==False])\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    result = \"\"\n    for i in string:\n        if int(i) % 2 == 0:\n            result += i\n    return result\n", "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return ''.join(a for a in string if a % 2 != 0)\n\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x,y):\n\t#initialize the output\n\tdistance = 0\n\t#iterate over the bits\n\tfor bit in range(len(bin(x))-2):\n\t\t#if the bits are not the same, add one to the output\n\t\tif (x&(1 << bit)) != (y&(1 << bit)):\n\t\t\tdistance += 1\n\treturn distance\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x,y):\n    return bin(x^y).count('1')\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a,b):\n    sum = 0\n    a = str(a)\n    b = str(b)\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            sum += 1\n    return sum\n\n#assert hamming_Distance(4,8) == 2\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x,y):\n    count = 0\n    for i in range(10):\n        if x & (1<<i) and y & (1<<i):\n            count += 1\n    return count", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n# Write your function here\n\n\ndef hamming_Distance(a, b):\n    if a == b:\n        return 0\n    else:\n        return int(bin(a ^ b).count(\"1\"))\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x,y):\n    if x == y:\n        return 0\n    else:\n        return x ^ y", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(a,b):\n    distance = 0\n    for i in range(10):\n        if a & (1 << i):\n            if b & (1 << i):\n                distance += 1\n    return distance\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x, y):\n    # Write your code here.\n    # You can use the 'bin' operator to convert numbers into binary strings.\n    # For example, bin(4) returns '0b100'.\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    distance = 0\n    for i in range(len(x_bin)):\n        if x_bin[i] != y_bin[i]:\n            distance += 1\n    return distance\n\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a, b):\n    total_bits = a.bit_length()\n    diff_bits = total_bits - a.bit_length()\n    a = a.bit_length()\n    b = b.bit_length()\n    diff = abs(a-b)\n    diff_bits = 32 - diff_bits\n    diff = diff+diff_bits\n    return diff\n", "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a,b):\n    if a > b:\n        b,a = a,b\n    hamm_d = 0\n    while b:\n        if a&b:\n            hamm_d += 1\n        a,b = a>>1,b>>1\n    return hamm_d\n\n#assert hamming_Distance(4,8) == 2\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str,ch):\n    x = 0\n    for i in range(len(str)):\n        if str[i]==ch:\n            x += 1\n    return x", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str, ch):\n    \"\"\"\n    :type str: str\n    :type ch: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for x in str:\n        if x == ch:\n            count += 1\n    return count\n\ndef count2(str, ch):\n    count = 0\n    for x in str:\n        if x == ch:\n            count = count + 1\n    return count\n\ndef count3(str, ch):\n    count = 0\n    for x in str:\n        if x == ch:\n            count = count + 1\n    return count\n\ndef count4(str, ch):\n    count = 0\n    for x in str:\n        if x == ch:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str1,char):\n    count=0\n    for i in str1:\n        if i == char:\n            count+=1\n    return count", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str,char):\n    count = 0\n    for i in str:\n        if char == i:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string,char):\n    if char in string:\n        return string.count(char)\n    else:\n        return 0\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str1, ch):\n    return str1.count(ch)\n\ndef count_exception(str1, ch):\n    try:\n        return str1.count(ch)\n    except Exception as e:\n        print(e)\n\ncount_exception(\"abcc\",\"c\")\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string,char):\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str, ch):\n    l = 0\n    for i in range(len(str)):\n        if str[i] == ch:\n            l+=1\n    return l\n\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\n# my solution\ndef count(s, c):\n    c = s.lower()\n    count = 0\n    for i in c:\n        if i == c:\n            count = count + 1\n    return count\n\n# other solutions\ndef count(s, c):\n    count = 0\n    for i in s.lower():\n        if i == c:\n            count += 1\n    return count\n\n\ndef count_v2(s, c):\n    count = 0\n    for i in s:\n        if i == c:\n            count += 1\n    return count\n\ndef count_v3(s, c):\n    return sum(c == i for i in s.lower())\n\n\ndef count_v4(s, c):\n    return sum(1 for i in s.lower() if i == c)\n", "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string,char):\n    i=0\n    j=0\n    while i<len(string):\n        if string[i]==char:\n            j+=1\n        i+=1\n    return j\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tup):\n    result = []\n    if not tup:\n        return result\n    # else\n    for i in range(len(tup) - 1):\n        if i+1 < len(tup):\n            if tup[i] > tup[i+1]:\n                result.append(tup[i+1])\n    return result\n\n# Test your function with these values", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom typing import Tuple\n\nfrom utils import list_to_tuple\n\n\ndef inversion_elements(numbers: Tuple[int]) -> Tuple[int]:\n    \"\"\"\n    >>> inversion_elements((7, 8, 9, 1, 10, 7))\n    (-8, -9, -10, -2, -11, -8)\n    >>> inversion_elements((1, 2, 3, 4))\n    ()\n    >>> inversion_elements((5, 4, 3, 2, 1))\n    (-1, -2, -3, -4, -5)\n    >>> inversion_elements((1, 2, 3))\n    (-2, -1, -3)\n    \"\"\"\n    if len(numbers) <= 1:\n        return ()\n    max_val = max(numbers)\n    result = []\n    numbers = list_to_tuple(numbers)\n    for i in range(0, max_val + 1):\n        if numbers[i] == 0:\n            continue\n        if i == 0:\n            result.append(-numbers[i])\n            continue\n        j = numbers[i - 1] - 1\n        while j >= 0:\n            if numbers[j] == 0:\n                break\n            else:\n                numbers[j] -= 1\n            j -= 1\n        result.append(-numbers[i])\n    return tuple(result)", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nimport itertools\n\n\ndef inversion_elements(tuple_list):\n    return [i for i in itertools.combinations_with_replacement(tuple_list, 2) if i[0] > i[1]]\n\n\ndef inversion_elements2(tuple_list):\n    return [i for i in itertools.combinations_with_replacement(tuple_list, 2) if i[0] > i[1]]\n\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(elements):\n    sorted_elements = sorted(elements)\n    new_list = []\n    for element in elements:\n        element_index = sorted_elements.index(element)\n        new_list.append((element, element_index))\n    return new_list\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(elements):\n    result = []\n    for index in range(0, len(elements)-1):\n        for element in elements[index+1:]:\n            if element < elements[index]:\n                result.append(element)\n                break\n    return result\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(list_of_tuples):\n    inversions = 0\n    #for first tuple element i\n    for i in range(len(list_of_tuples)):\n        #for second tuple element j\n        for j in range(i+1, len(list_of_tuples)):\n            if list_of_tuples[i][1] > list_of_tuples[j][1]:\n                #add 1 to inversions\n                inversions += 1\n    return inversions\n\n\n#test cases", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(nums):\n    '''\n    >>> inversion_elements([7, 8, 9, 1, 10, 7])\n    [-8, -9, -10, -2, -11, -8]\n    >>> inversion_elements([1, 3, 2, 1])\n    []\n    '''\n    # Your code here\n    return sorted([i for i in nums if i%2!=0])", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tup_list):\n    tup_list = sorted(tup_list, key=lambda x: x[1])\n    return [x[0] for x in enumerate(tup_list[1:]) if tup_list[x[0]][0] > tup_list[x[0] + 1][0]]", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(elements_tuple):\n    # index of each tuple element\n    index = list(range(len(elements_tuple)))\n\n    # sort elements in reverse order\n    elements_tuple.sort(reverse=True)\n\n    # inversion count\n    count = 0\n\n    # iterate through sorted tuple to find inversions\n    for i in index:\n        # count number of elements greater than i\n        count += elements_tuple.count(i)\n\n    # return the inversion count\n    return count\n", "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom typing import List\nimport sys\n\n# iterative solution\ndef inversion_elements(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    inversions = []\n    for i in range(1, len(numbers)):\n        for j in range(0, i):\n            if numbers[j] > numbers[i]:\n                inversions.append(numbers[i])\n    return inversions\n\n# recursive solution\ndef inversion_elements_recursive(numbers: List[int], idx: int, inversions: List[int]) -> List[int]:\n    if idx == len(numbers):\n        return inversions\n\n    inversions = inversion_elements_recursive(numbers, idx + 1, inversions)\n\n    for i in range(idx, len(numbers)):\n        if numbers[i] > numbers[idx]:\n            inversions.append(numbers[i])\n            break\n    return inversions\n\n# test cases"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple):\n    return tuple[0] + \" \" + tuple[1] + \" \" + tuple[2] + \" \" + tuple[3] + \" \" + tuple[4] + \" \" + tuple[5]\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuple_):\n    new_list = []\n    for element in tuple_:\n        new_list.append(element)\n        new_list.append(\" \")\n    return \" \".join(new_list)\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\n#Solution:\ndef concatenate_elements(tuple_list):\n    concatenated_list = []\n    for item in tuple_list:\n        concatenated_list.append(item[0] + item[1])\n    return concatenated_list\n\n\n#TEST CASES", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    \"\"\"\n    Input is an array of tuples of words\n    Output is a string of concatenated words\n    \"\"\"\n    res = ''\n    for tuple in tuples:\n        res += tuple[0] + ' ' + tuple[-1] + ' '\n    res = res[:-1]\n    return res\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(list_of_strings):\n    res = \"\"\n    for i in range(0, len(list_of_strings), 2):\n        res += list_of_strings[i] + \" \" + list_of_strings[i+1] + \" \"\n    return res[:-1]", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(string):\n    string = \" \".join(string)\n    string = string.split(\" \")\n    string = \"\".join(string)\n    return string", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    concat_list = []\n    for i in range(0,len(tuples),2):\n        concat_list.append(tuples[i] + ' ' + tuples[i+1])\n    return concat_list\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(elements):\n    return \" \".join(elements)\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(lst):\n    return \" \".join(lst)\n\n", "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(elements):\n    for i in range(len(elements) - 1):\n        elements[i] = elements[i] + \" \"\n    return elements\n\n\nconcatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(str_seq):\n    if str_seq[0] == str_seq[-1]:\n        return 0\n    else:\n        max_count = 0\n        i = 0\n        while i + 1 < len(str_seq):\n            if str_seq[i] == str_seq[i + 1]:\n                count = 1\n                while i + 1 < len(str_seq) and str_seq[i] == str_seq[i + 1]:\n                    count += 1\n                    i += 1\n                if count > max_count:\n                    max_count = count\n        return max_count\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\n# my_solution\ndef find_longest_repeating_subseq(input_str):\n    temp = input_str.split(\"\")\n    counter = 0\n    longest_subseq_len = 0\n    longest_subseq_len_so_far = 0\n    for i in range(len(temp)):\n        subseq = temp[i]\n        for j in range(len(input_str)):\n            if input_str[j] == subseq:\n                counter += 1\n                if counter > longest_subseq_len_so_far:\n                    longest_subseq_len = counter\n                    longest_subseq_len_so_far = counter\n    return longest_subseq_len\n\n# test cases", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(s):\n    '''\n    :param s: string\n    :return: int\n    '''\n    if len(s) == 1:\n        return 1\n    \n    if len(s) == 2:\n        return 2\n    \n    if len(s) == 3:\n        return 2\n    \n    subseqs = []\n    max_subseq = 0\n    for i in range(0,len(s)-1):\n        for j in range(i+1,len(s)):\n            count = 0\n            for k in range(0,len(s)):\n                if s[i] == s[j] and k != i and k != j:\n                    count += 1\n            \n            if count < 2:\n                subseq = len(s[i:j])\n                if subseq > max_subseq:\n                    max_subseq = subseq\n                subseqs.append(subseq)\n    \n    return max_subseq\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n#\n# A fast and simple solution is to check the sub-sequences for each character and store\n# the longest one. However, this solution would work only if the length of the string is small enough,\n# in the order of 10.\n#\n# Another idea is to use Dynamic Programming.\n#\n# Let's look at the first character of a sub-sequence, and let's count the number of times it occurs in the main sequence\n# (if it occurs at the second position, then it occurs 2 times, if it occurs at the third position, then it occurs 3 times and so on).\n# Now we repeat the same for the second character, and so on.\n# The number of times that a character occurs in a sub-sequence can be counted by the sum of the previous two values,\n# starting with the second position.\n#\n# In this example, the longest repeating sub-sequence is:\n# ABBCCDD\n#\n# Here is the solution to the problem:\n#\n\nfrom collections import defaultdict\n\n\ndef find_longest_repeating_subseq(s):\n    if not s:\n        return 0\n    # count the number of times each character occurs in the string\n    # use defaultdict to count the characters, which are not in the string\n    # {char : 0} if not found, it returns 0\n    char_count = defaultdict(int)\n    for char in s:\n        char_count[char] += 1\n    # repeat the first for loop, but in the reversed order\n    # the length of the sub-sequence is n - i\n    for i in range(len(s)):\n        # iterate over the string\n        # if the current character is in the dict, then update the count\n        # else, add the count\n        char_count[s[i]] += 1\n    # initialize a dictionary to store the number of sub-sequences, starting\n    # from the second position\n    last_char_count = dict(char_count)\n    # iterate over the string\n    for i in range(1, len(s)):\n        # if the current character is in the dict,\n       ", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(text):\n    if len(text) < 3:\n        return 0\n    text_chars = set()\n    result = 0\n    for i in range(len(text)):\n        text_chars.add(text[i])\n    for i in range(len(text)):\n        for j in range(i+1, len(text)):\n            text_chars.remove(text[i])\n            if text[i] != text[j]:\n                text_chars.add(text[j])\n                result = max(result, len(text_chars))\n                text_chars.add(text[i])\n    return result", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    # TODO: Write your code here\n    n = len(string)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(1,n):\n        for j in range(0,i):\n            if string[i] == string[j] and i-j <= 2:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = 0\n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] > max_len:\n                max_len = dp[i][j]\n    return max_len\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\nimport itertools\nfrom typing import Tuple\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(word):\n    word = list(word)\n    word = dict([(word[i], i) for i in range(len(word))])\n\n    length = len(word)\n    max_length = 0\n    count = 0\n    for i in range(length):\n        for j in range(i + 1, length):\n            length = max(word[i] - word[j], 0)\n            if length > max_length:\n                max_length = length\n                count = 1\n            elif length == max_length:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    max_repeating_subseq = 0\n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            continue\n        else:\n            max_repeating_subseq = max(max_repeating_subseq, len(set(string[:i])))\n    return max_repeating_subseq\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\ndef is_decimal(string):\n    \"\"\"\n    check if given string is decimal or not\n    :param string: string\n    :return: boolean\n    \"\"\"\n    return bool(re.search(r'^-?\\d+(\\.\\d+)?$', string))\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\n\ndef is_decimal(string):\n    if not re.search(r'^[+\\-]?[0-9]*\\.?[0-9]+$', string):\n        return False\n    if re.search(r'^0+$', string):\n        return False\n    if re.search(r'^[+-]?0\\.\\d+$', string):\n        return False\n    if re.search(r'^[+-]?0\\.\\d*[+-]?\\d$', string):\n        return False\n    return True\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(string):\n    # Your code here\n    return bool(re.match('^\\d*\\.?\\d{1,2}$', string))\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(s):\n    if re.match(r'^-?0?\\.\\d+|\\d+(\\.\\d*)?$', s):\n        return True\n    return False\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(decimal):\n    \"\"\"\n    Using the regex module, check if the given decimal with a precision of 2.\n    \"\"\"\n    if re.match('^\\d+.\\d{0,2}$', decimal):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(s):\n    \"\"\"\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('12311')\n    True\n    >>> is_decimal('11.11')\n    True\n    >>> is_decimal('1.11')\n    True\n    >>> is_decimal('1111')\n    True\n    >>> is_decimal('1.1')\n    False\n    >>> is_decimal('1111.11')\n    True\n    >>> is_decimal('011.11')\n    False\n    >>> is_decimal('100001.00')\n    True\n    >>> is_decimal('123.111')\n    False\n    >>> is_decimal('123111')\n    False\n    \"\"\"\n    if re.match('^\\d+\\.?\\d{1,2}$', s):\n        return True\n    return False\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(num):\n    try:\n        re.match(r'^\\d+(\\.\\d{0,2})?$', num)\n    except:\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\n\ndef is_decimal(number):\n    pattern = r'^[0-9]+\\.[0-9]{2}$'\n    return bool(re.match(pattern, number))\n\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(number):\n  \"\"\"\n  Checks if the given decimal is valid by checking if it is in the correct format and has a precision of 2.\n\n  >>> is_decimal('123.11')\n  True\n  >>> is_decimal('123.111')\n  False\n  >>> is_decimal('123')\n  False\n  >>> is_decimal('123.1')\n  True\n  \"\"\"\n  return re.match(r'^\\d+.\\d{1,2}$', number)\n", "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(n):\n    if not re.match(r'^-?\\d+(?:\\.\\d{1,2})?$', n):\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\ndef heap_replace(heap, item):\n    heappush(heap, item)\n    smallest = heappop(heap)\n    heappush(heap, smallest)\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\nfrom heapq import heappop, heappush\ndef heap_replace(h,e):\n    heappush(h, e)\n    return heappop(h)\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_elem):\n    heap[0] = new_elem\n    i = 0\n    while i*2 + 1 < len(heap):\n        smallest_child_index = i*2 + 1 if i*2 + 1 < len(heap) and heap[i*2 + 1] < heap[i*2] else i*2\n        if heap[i] > heap[smallest_child_index]:\n            heap[i], heap[smallest_child_index] = heap[smallest_child_index], heap[i]\n            i = smallest_child_index\n        else:\n            break\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(h,elem):\n    smallest_element = h[1]\n    h[1] = elem\n    index = 1\n    while index * 2 <= len(h):\n        if index*2 + 1 > len(h) or h[index*2] > h[index*2+1]:\n            break\n        else:\n            h[index] = h[index*2]\n            index = index*2\n    h[index] = smallest_element\n    return h\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\nimport heapq\n\n\ndef heap_replace(heap, item):\n    heapq.heapreplace(heap, item)\n    return heap\n\n\ndef test_heap_replace():\n    heap = [25, 44, 68, 21, 39, 23, 89]\n    assert heap_replace(heap, 21) == [21, 25, 23, 44, 39, 68, 89]", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, val):\n    heap.remove(heap[0])\n    heap.append(val)\n    return heap\n\nheap = [25, 44, 68, 21, 39, 23, 89]", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nfrom heapq import heapify, heappop, heappush\n\ndef heap_replace(h, value):\n    \"\"\"\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89],21)\n    [21, 25, 23, 44, 39, 68, 89]\n    \"\"\"\n    h.append(value)\n    heapify(h)\n    return heappop(h)\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, item):\n    heap[0] = item\n    min_heapify(heap, 0)\n    return heap\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_item):\n    # replace the minimum in the heap with the new item.\n    # then restore the heap condition by\n    # sift up or sift down the new minimum.\n    # for the first item, it has to sift down.\n    # for the last item, it has to sift up.\n    # return the new heap.\n    min_val = heap[0]\n    heap[0] = new_item\n    i = 0\n    while (i * 2 + 1) < len(heap):\n        if (heap[i * 2 + 1] < heap[i * 2 + 2]):\n            smallest = i * 2 + 1\n        else:\n            smallest = i * 2 + 2\n        if (min_val > heap[smallest]):\n            heap[i], heap[smallest] = heap[smallest], heap[i]\n            i = smallest\n        else:\n            break\n    return heap\n\n", "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(arr,value):\n    index = arr.index(min(arr))\n    arr[index] = value\n    heapify(arr,index)\n    return arr\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(string):\n    return re.match(r'^[a-zA-Z0-9]+$', string) is not None\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\ndef is_allowed_specific_char(string):\n    return True if re.findall(r\"[a-zA-Z0-9]\", string) else False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nfrom collections import Counter\n\n\ndef is_allowed_specific_char(string):\n    \"\"\"\n    >>> is_allowed_specific_char(\"ABCDEFabcdef123450\")\n    True\n    >>> is_allowed_specific_char(\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\ndef is_allowed_specific_char(input_str):\n    if re.match(r'[a-z]+0-9+', input_str) is None:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nfrom functools import reduce\n\nimport re\n\n\ndef is_allowed_specific_char(string):\n    \"\"\"\n    >>> is_allowed_specific_char(\"ABCDEFabcdef123450\")\n    True\n    >>> is_allowed_specific_char(\"AbCdef123450\")\n    False\n    >>> is_allowed_specific_char(\"AbCDef123450\")\n    False\n    >>> is_allowed_specific_char(\"ABCdef123450\")\n    False\n    >>> is_allowed_specific_char(\"ABC def 123450\")\n    False\n    >>> is_allowed_specific_char(\"abc def 123450\")\n    False\n    \"\"\"\n    return (\n        re.search(r\"^[A-Za-z0-9]*$\", string) is not None and len(string) >= 10\n    ) or (re.search(r\"^[a-z0-9]*$\", string) is not None and len(string) >= 10)\n\n\ndef is_allowed_specific_char_re(string):\n    \"\"\"\n    >>> is_allowed_specific_char_re(\"ABCDEFabcdef123450\")\n    True\n    >>> is_allowed_specific_char_re(\"AbCdef123450\")\n    False\n    >>> is_allowed_specific_char_re(\"AbCDef123450\")\n    False\n    >>> is_allowed_specific_char_re(\"ABCdef123450\")\n    False\n    >>> is_allowed_specific_char_re(\"ABC def 123450\")\n    False\n    >>> is_allowed_specific_char_re(\"abc def 123450\")\n    False\n    \"\"\"\n    return re.search(r\"^[A-Za-z0-9]*$\", string) is not None and len(string) >= 10\n\n\ndef is_allowed_specific_char_re2(string):\n    \"\"\"\n    >>> is_allowed_specific_char_re2(\"", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\ndef is_allowed_specific_char(str):\n    return bool(re.match(r\"^[a-zA-Z0-9]*$\", str))\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\n\ndef is_allowed_specific_char(s):\n    allowed_chars = re.compile(r\"^[a-zA-Z0-9]+$\")\n    return allowed_chars.search(s) is not None", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\n\ndef is_allowed_specific_char(string):\n    return all(char in \"abcdefghijklmnopqrstuvwxyz0123456789\" for char in string)\n\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\ndef is_allowed_specific_char(string):\n    pattern = r'[a-zA-Z0-9]'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\ndef is_allowed_specific_char(str):\n    if re.match(\"^[a-zA-Z0-9]*$\", str):\n        return True\n    return False"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(num):\n    # your code here\n    res = 0\n    for i in range(num+1):\n        if ((num >> i) & 0x1) == 1 and ((num >> (i+1)) & 0x1) == 1:\n            res += 1\n    return res\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    count = 0\n    for i in range(1,16):\n        if ((num>>i)&1):\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\nimport math\n\ndef count_Num(n):\n    # your code here\n    return n\n\n\n#assert count_Num(2) == 1", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(n+1):\n        if bin(i).count(\"1\")%2 == 1:\n            count = count + 1\n    return count", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        x = i\n        if x%2 == 1:\n            x = x + 1\n        while x != 1:\n            if x%2 == 1:\n                count = count + 1\n            x = x >> 1\n    return count\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(num):\n    # Your code here\n    count = 0\n    for i in range(1,num+1):\n        if (num%i == 0):\n            if (num%i == 0):\n                x = str(num)\n                y = str(i)\n                z = str(num%i)\n                a = list(x)\n                b = list(y)\n                c = list(z)\n                a.reverse()\n                b.reverse()\n                c.reverse()\n                if (a == b):\n                    count += 1\n                if (a == c):\n                    count += 1\n    return count", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    count = 0\n    for x in range(1000):\n        if x % 2 == 1:\n            if (x & 1) == 1:\n                if (x % 3) == 1:\n                    count += 1\n    return count", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    count = 0\n    for i in range(2,num+1):\n        if((num&i) == i):\n            count += 1\n    return count", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(N):\n    a = 0\n    for i in range(1, N + 1):\n        b = i\n        c = i\n        while (b != 0):\n            if (b % 2 == 1):\n                c = c + 1\n            b = b // 2\n        if (c != 0):\n            a = a + 1\n    return a\n", "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n\tcount = 0\n\tfor i in range(0,2**n):\n\t\tif bin(i)[-1-n]=='1' and bin(i)[-n] == '1':\n\t\t\tcount += 1\n\treturn count\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    total_sum = 0\n    for i in range(1,n+1):\n        total_sum += i**4\n    return total_sum\n\ndef test_fourth_power_sum():\n    assert fourth_Power_Sum(2) == 17\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(n+1))\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n + 1):\n        sum += i ** 4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\n#include <stdio.h>\n\nint fourth_Power_Sum(int n)\n{\n    int sum = 0;\n\n    for (int i = 1; i <= n; i++)\n    {\n        sum = sum + (i * i * i * i);\n    }\n\n    return sum;\n}\n\nint main()\n{\n    int number;\n    printf(\"Enter the number: \");\n    scanf(\"%d\", &number);\n\n    int sum = fourth_Power_Sum(number);\n    printf(\"The sum of fourth power of number is %d\", sum);\n\n    return 0;\n}", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    s = 0\n    for i in range(1,n+1):\n        s = s + i**4\n    return s\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i ** 4\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i**4\n    return sum\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n    return tuple1[0] + tuple2[0], tuple1[1] + tuple2[1], tuple1[2] + tuple2[2]\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    return tuple1[0] + \" \" + tuple1[1] + \" \" + tuple2[0] + \" \" + tuple2[1] + \" \" + tuple2[2]\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(str1,str2):\n    return (str1[0] + \" \" + str2[0],str1[1] + \" \" + str2[1],str1[2] + \" \" + str2[2])\n\n#---------------------------------------------", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n    new_tuple = tuple()\n    for index in range(len(tuple1)):\n        new_tuple += (tuple1[index]+tuple2[index],)\n    return new_tuple", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple_1, tuple_2):\n    return tuple(x + \" \" + y for x, y in zip(tuple_1, tuple_2))\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple_1, tuple_2):\n    # Code to concatenate the two tuples is commented out.\n    # return tuple_1 + tuple_2\n    return tuple(zip(tuple_1, tuple_2))\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple_1, tuple_2):\n    return tuple(tuple_1 + tuple_2)\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(string1, string2):\n    return tuple([*string1, *string2])\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    return tuple1[0]+\" \"+tuple2[0], tuple1[1]+\" \"+tuple2[1], tuple1[2]+\" \"+tuple2[2]\n\n", "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\n# -----------------------------\n# Ideas/thoughts:\n# -----------------------------\n\n# -----------------------------\n# Solution:\n# -----------------------------\n\ndef concatenate_strings(tuple1, tuple2):\n    return tuple(list(tuple1) + list(tuple2))\n\n# -----------------------------\n# Tests:\n# -----------------------------\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(x):\n    return x * (180/math.pi)\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(r):\n    return r*180/math.pi\n\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(r):\n    return r * 180/pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\nimport math\n\ndef degree_radian(x):\n    return math.degrees(x)\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return 180*radian/np.pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(x):\n    if x == 0:\n        return 0\n    elif x > 0 and x <= 180:\n        return x / 180 * 3.14159265359\n    elif x > 180 and x <= 360:\n        return (x - 180) / 180 * 3.14159265359\n    elif x > 360 and x <= 540:\n        return (x - 360) / 180 * 3.14159265359\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\n# 1\ndef degree_radian(number):\n    return number * (180 / np.pi)\n\n# 2\ndef degree_radian(number):\n    return number * 180 / np.pi\n\n# 3\ndef degree_radian(number):\n    return number * 180 / np.pi\n\n# 4\ndef degree_radian(number):\n    return number * 180 / np.pi\n\n# 5\ndef degree_radian(number):\n    return number * 180 / np.pi\n\n\n# -\n\n# 2", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    return radian*180/pi\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    return radian * 180 / math.pi\n\ndef test_degree_radian():\n    assert degree_radian(90)==5156.620156177409\n", "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian * 180 / math.pi\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n\tif len(l)==0:\n\t\treturn []\n\telse:\n\t\treturn [l[0]] + [x[0]*x[1] for x in decode_list(l[1:])]\n\ndef test_decode_list():\n\tl1 = [[2, 1], 2, 3, [2, 4], 5,1]\n\tassert decode_list(l1) == [1, 1, 2, 3, 4, 4, 5, 1]\n\n# def test_decode_list():\n# \tl1 = [[2, 1], 2, 3, [2, 4], 5,1]\n# \tassert decode_list(l1) == [1, 1, 2, 3, 4, 4, 5, 1]\n\ndef encode_list(l):\n\tif len(l)==0:\n\t\treturn []\n\telse:\n\t\treturn [[l[0], 1]] + encode_list(l[1:])\n\ndef test_encode_list():\n\tl1 = [1, 1, 2, 3, 4, 4, 5, 1]\n\tassert encode_list(l1) == [[1,1], 2, 3, [[2, 4], 5], 1]\n\n# def test_encode_list():\n# \tl1 = [1, 1, 2, 3, 4, 4, 5, 1]\n# \tassert encode_list(l1) == [[1,1], 2, 3, [[2, 4], 5], 1]\n\ndef main():\n\tl1 = [[2, 1], 2, 3, [2, 4], 5,1]\n\tl2 = [1, 1, 2, 3", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(l):\n    return [item for _, item in l]\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(x):\n    temp=[]\n    for i in range(len(x)):\n        if isinstance(x[i],list):\n            temp.extend([int(i) for i in x[i]])\n        else:\n            temp.append(int(x[i]))\n    return temp\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(input_list):\n    output_list = []\n    index = 0\n    while index < len(input_list):\n        count = input_list[index]\n        num = input_list[index+1]\n        count -= 1\n        for i in range(count):\n            output_list.append(num)\n        index += 2\n    return output_list\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(encoded):\n    l=[]\n    for i in encoded:\n        for j in range(i[0]):\n            l.append(i[1])\n    return l\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(l):\n    index = 0\n    out = []\n    while index < len(l):\n        if isinstance(l[index], list):\n            out += [l[index][0]]*l[index][1]\n            index += 1\n        else:\n            out.append(l[index])\n            index += 1\n    return out\n\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(encoded):\n    pass\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\n#TODO\n\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(lst):\n    #print lst\n    if len(lst) == 0:\n        return []\n    if isinstance(lst[0], list):\n        return decode_list(lst[0]) + [lst[1]] + decode_list(lst[2:])\n    else:\n        return [lst[0]] + decode_list(lst[1:])\n", "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(ll):\n    result = []\n    for l in ll:\n        result += [l[1]] * l[0]\n    return result\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    for i in list1:\n        for j in list2:\n            if i==j:\n                continue\n            else:\n                return False\n    return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1,list2):\n    if list1==[]:\n        return False\n    elif list1==list2:\n        return True\n    else:\n        if check_subset_list(list1[1:],list2[1:])==False:\n            return False\n        if list1[0] in list2:\n            return check_subset_list(list1[1:],list2)\n        else:\n            return check_subset_list(list1[1:],list2[1:])\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(sublist, list):\n    if len(list) == 0:\n        return True\n    elif len(list) == 1:\n        return list[0] == sublist\n    else:\n        if sublist[0] == list[0]:\n            return check_subset_list(sublist[1:], list[1:])\n        else:\n            return check_subset_list(sublist, list[1:])\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(a,b):\n    if len(a)==0:\n        return True\n    for i in b:\n        if a[0] in i:\n            a=a[1:]\n            break\n        else:\n            return False\n    return check_subset_list(a,b)\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n        else:\n            return False\n    if not list1:\n        return True\n    else:\n        return False\n    ", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(sublist, list):\n    \"\"\"\n    check if sublist is a subset of list\n    :param sublist: list to compare\n    :param list: list to compare against\n    :return: boolean if sublist is a subset of list\n    \"\"\"\n    if sublist == []:\n        return True\n    elif sublist[0] not in list:\n        return False\n    else:\n        return check_subset_list(sublist[1:], list[sublist[0]])\n\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list_to_check,list_to_compare):\n    if type(list_to_check) is not list:\n        return False\n\n    if type(list_to_compare) is not list:\n        return False\n\n    for item in list_to_check:\n        if item in list_to_compare:\n            list_to_compare.remove(item)\n        else:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\nfrom typing import List\n\ndef check_subset_list(main_list: List, sub_list: List) -> bool:\n    \"\"\"\n    >>> check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n    False\n    >>> check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[1, 5, 8, 18, 15, 16], [12, 18, 23, 25, 45], [7, 11, 19, 24, 28]])\n    True\n    \"\"\"\n    if len(sub_list) == 0:\n        return True\n    elif len(sub_list) == 1:\n        if sub_list[0] in main_list:\n            return True\n        else:\n            return False\n    else:\n        if sub_list[0] in main_list:\n            return check_subset_list(main_list, sub_list[1:])\n        else:\n            return False", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    if list2[0] in list1:\n        list1.remove(list2[0])\n    else:\n        return False\n    if len(list1)==0:\n        return True\n    return check_subset_list(list1,list2[1:])", "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(a,b):\n    return issubset(a,b)"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\n# 1. Create a dictionary\n# 2. Loop through string and increment count for characters\n# 3. If count greater than 1, return first encountered\n\n# Time: O(n) Space: O(1)\ndef first_Repeated_Char(string):\n  # Create a dictionary\n  count = {}\n  for char in string:\n    if char in count:\n      count[char] += 1\n    else:\n      count[char] = 1\n  for key in count:\n    if count[key] > 1:\n      return key\n  return None\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(s):\n    for i in range(len(s)):\n        if s[i] in s[:i]:\n            return s[i]\n    return \"\"", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n    char_list = list(string)\n    for x in char_list:\n        if char_list.count(x) > 1:\n            return x", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str1):\n    d = dict()\n    for i in str1:\n        if i in d.keys():\n            return i\n        else:\n            d[i] = 1\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str):\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            return str[i]\n        ", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    hashmap = {}\n    for character in string:\n        if character in hashmap:\n            return character\n        else:\n            hashmap[character] = True\n            ", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(s):\n\t# Write your code here\n\n\tchars = []\n\tfor c in s:\n\t\tif c not in chars:\n\t\t\tchars.append(c)\n\t\telse:\n\t\t\treturn c\n\n", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(string):\n    for i in string:\n        if string.count(i)>1:\n            return i\n    return \"not_found\"", "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str1):\n    for i in range(len(str1)):\n        for j in range(i+1,len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\nfrom itertools import combinations\n\n\ndef min_Operations(num1, num2):\n    list1 = []\n    list2 = []\n\n    while num1 > 0:\n        list1.append(num1 % 10)\n        num1 = num1 // 10\n\n    while num2 > 0:\n        list2.append(num2 % 10)\n        num2 = num2 // 10\n\n    ans = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]+list2[j] <= 9:\n                ans += 1\n            else:\n                ans += 2\n\n    return ans\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    # your code here\n    if a == b:\n        return 0\n    if b>a:\n        a,b = b,a\n    res = 0\n    while a != b:\n        if a%2 == 0:\n            a /= 2\n            res += 1\n        else:\n            a = 3*a + 1\n            res += 1\n    return res", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    if a>b:\n        a,b=b,a\n    num_one=0\n    num_two=0\n    while a>b:\n        a//=10\n        num_one+=1\n    while b>0:\n        b//=10\n        num_two+=1\n    return num_one+num_two\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    '''\n    Write a python function to find the minimum operations required to make two numbers equal.\n    '''\n    # Get the absolute difference between a and b\n    abs_diff = abs(a-b)\n    # Find the required operations\n    return abs_diff\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_operations(x, y):\n    operations = 0\n    while (x != y):\n        x -= 1\n        y += 1\n        operations += 1\n    return operations\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(a,b):\n    #Write your code here\n    if a == b:\n        return 0\n    else:\n        if a > b:\n            diff = a - b\n        else:\n            diff = b - a\n        count = 0\n        while diff > 0:\n            diff = diff//2\n            count += 1\n        return count", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_operations(a,b):\n\tif a==b:\n\t\treturn 0\n\treturn 1 + min_operations(b%a,a)\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a, b):\n    c = a + b\n    while (c != a):\n        a = c\n        c = a + b\n    return a-b\n\n", "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(num1,num2):\n    i = 0\n    while(num1!=num2):\n        num1,num2 = add_operations(num1,num2)\n        i +=1\n    return i\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tuple, k):\n    # Your code goes here\n    if len(tuple) < k:\n        return tuple\n    else:\n        return tuple[0:k], tuple[-k:]\n\n# Test case", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nimport pytest\n\ndef extract_min_max(tuple_input, k):\n    list_input = tuple_input[:]\n\n    min_list = []\n    max_list = []\n    for i in range(k):\n        min_list.append(list_input[0])\n        max_list.append(list_input[0])\n\n        list_input.remove(list_input[0])\n        list_input.sort()\n\n    for item in list_input:\n        if item < min_list[0]:\n            min_list.insert(0, item)\n        if item > max_list[-1]:\n            max_list.append(item)\n\n    return tuple(min_list), tuple(max_list)\n\n\ndef test_extract_min_max():\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 3) == (3, 5, 6, 7, 8, 20)\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 5) == (3, 5, 6, 7, 8, 20)\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 0) == ()\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 7) == (3, 5, 6, 7, 8, 20)\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 8) == (5, 6, 7, 8, 20)\n    assert extract_min_max((5, 20, 3,", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom typing import Tuple\n\ndef extract_min_max(tuple_to_process: Tuple[int], k: int) -> Tuple[int, int]:\n    return tuple_to_process[0], tuple_to_process[k - 1]\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nimport random\n\n\ndef extract_min_max(tup, k):\n    a = tup[:k]\n    b = tup[-k:]\n    a.sort()\n    b.sort()\n    return a, b\n\n\ndef test_min_max():\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\n\ndef extract_median(tup, k):\n    a = tup[:k]\n    b = tup[-k:]\n    a.sort()\n    b.sort()\n    return a[len(a)//2] + b[len(b)//2]\n\n\ndef test_median():\n    assert extract_median((5, 20, 3, 7, 6, 8), 2) == 7\n\n\ndef extract_mode(tup, k):\n    a = tup[:k]\n    a.sort()\n    b = tup[-k:]\n    b.sort()\n    return a.count(a[0]), b.count(b[0])\n\n\ndef test_mode():\n    assert extract_mode((5, 5, 20, 5, 20, 3, 5), 3) == (2, 2)\n\n\ndef main():\n    data = tuple(random.randint(1, 1000) for i in range(10))\n    k = random.randint(1, len(data))\n    print(extract_min_max(data, k))\n    print(extract_median(data, k))\n    print(extract_mode(data, k))\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom typing import Tuple\n\ndef extract_min_max(values: tuple, k: int) -> Tuple[int, int]:\n    if k == 0:\n        return 0\n    elif k == 1:\n        return min(values), max(values)\n    elif k == len(values):\n        return max(values), min(values)\n\n    else:\n        pivot = (k-1)//2\n        left, right = extract_min_max(values[:pivot], k-pivot), extract_min_max(values[pivot:], k-pivot)\n        return min(values[:pivot]), max(values[pivot:])\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\n# Using Sorting\ndef extract_min_max(l, k):\n    sorted_list = sorted(l)\n    return sorted_list[:k], sorted_list[-k:]\n\n# Using Itertools\nfrom itertools import islice\ndef extract_min_max(l, k):\n    return max(l, key=l.index), min(l, key=l.index)\n\n# Using List comprehension\ndef extract_min_max(l, k):\n    return [sorted(l)[i] for i in range(k)], [sorted(l)[-i-1] for i in range(k)]\n\nl = [5, 20, 3, 7, 6, 8]\nk = 2", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tuple_value, k):\n    list_value = list(tuple_value)\n    list_value.sort()\n    return list_value[-k:], list_value[:k]\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom typing import List\n\n\ndef extract_min_max(arr: List, k: int) -> (int, int, ...):\n    return tuple(sorted([arr[i] for i in range(k)]) + sorted([arr[-i - 1] for i in range(1, k)]))\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom typing import Tuple\n\n\ndef extract_min_max(tuple_to_extract: Tuple, k: int) -> Tuple:\n    \"\"\"Extract maximum and minimum k elements in the given tuple.\"\"\"\n    return tuple(sorted(tuple_to_extract, reverse=True)[:k]) + tuple(sorted(tuple_to_extract)[:k])\n\n\ndef test_extract_min_max():\n    assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\n", "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom typing import Tuple\n\n\ndef extract_min_max(arr: Tuple, k: int) -> Tuple:\n    if len(arr) < k:\n        return arr\n\n    min_arr = [float(\"inf\") for _ in range(len(arr))]\n    max_arr = [-float(\"inf\") for _ in range(len(arr))]\n\n    max_arr[0] = arr[0]\n    min_arr[0] = arr[0]\n    for i in range(k - 1):\n        max_arr[i + 1] = arr[i + 1]\n        min_arr[i + 1] = arr[i + 1]\n\n        if arr[i + 1] > max_arr[i]:\n            max_arr[i] = arr[i + 1]\n\n        if arr[i + 1] < min_arr[i]:\n            min_arr[i] = arr[i + 1]\n\n    return max_arr, min_arr\n\n"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,n):\n    if len(string) <= n:\n        return string\n    string = string.split(' ')\n    for i in range(len(string)):\n        if string[i] in ',.':\n            if len(string) > n:\n                return ''.join(string[0:n]) + ':' + ' '.join(string[n:])\n    return string\n\ndef test_replace_max_specialchar():\n    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    assert replace_max_specialchar('Python .language, Programming .language.',2)==('Python .language: Programming .language.')\n    assert replace_max_specialchar('Python .language, Programming .language.',1)==('Python .language, Programming .language.')\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(str, n):\n    res = ''\n    i = 0\n    for j in range(len(str)):\n        if str[j] == ' ':\n            res += ':'\n        elif str[j] == ',':\n            res += ':'\n        elif str[j] == '.':\n            res += ':'\n        elif i < n:\n            res += str[j]\n            i += 1\n        else:\n            res += str[j]\n    return res", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(str,n):\n    list = [x for x in str.split() if x]\n    new_list = []\n    for x in list:\n        if x.isdigit():\n            new_list.append(x)\n        else:\n            new_list.append(x.replace(',',':').replace('.',':'))\n    return ':'.join(new_list)\n\n\n# +", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(str, max):\n    if max == 0:\n        return str\n    #find the position of the character with max occurences\n    max_position = str.find(max_specialchar(str))\n    #find the position of the first character\n    first_position = str.find(first_specialchar(str))\n    #replace max occurence\n    replaced_str = str[:max_position]+\":\"+str[max_position+1:]\n    #if there is no other occurence return\n    if max_position == -1:\n        return replaced_str\n    else:\n        #get the size of the string\n        size = len(str)\n        #get the size of replaced_str\n        size_rep = len(replaced_str)\n        #get the position of the last character\n        last_position = str.rfind(last_specialchar(str))\n        #replace rest of the occurence\n        return replaced_str[:last_position]+replaced_str[last_position+1:]\n\ndef first_specialchar(str):\n    return str[0]\n\ndef last_specialchar(str):\n    return str[-1]\n\ndef max_specialchar(str):\n    # find the character with max occurences\n    specialchar = \"\"\n    max_occurence = 0\n    for char in str:\n        # increment the occurence by 1\n        count = str.count(char)\n        # if the occurence is greater than max occurence\n        if count > max_occurence:\n            specialchar = char\n            max_occurence = count\n    return specialchar\n\ndef main():\n    print(\"Asserts\")\n    assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n    assert replace_max_specialchar('Python language, Programming language.',0)==('Python language, Programming language.')\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,max_occurrences):\n    if max_occurrences>0:\n        splitted = string.split(' ')\n        newstring = ''\n        for i in range(len(splitted)):\n            newstring += splitted[i]\n            if splitted[i]==',' or splitted[i]=='.' or splitted[i]==' ':\n                newstring += ':'\n        return newstring\n    else:\n        return string\n\n# Tests", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(str,n):\n    for i in range(len(str)):\n        if str[i] == ' ':\n            str = str[:i]+':'+str[i+1:]\n        elif str[i] == ',':\n            str = str[:i]+':'+str[i+1:]\n        elif str[i] == '.':\n            str = str[:i]+':'+str[i+1:]\n    \n    return str\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string,n):\n    replaced = \"\"\n    for char in string:\n        if (char == ' ') or (char == ',') or (char == '.'):\n            replaced = replaced + ':'\n        else:\n            replaced = replaced + char\n    return replaced[:n]\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(string,n):\n    if string.isspace() or string.isalnum() or string.isdecimal():\n        return string\n    else:\n        special = [' ',',','.']\n        for i in range(n):\n            if string.find(special[i]) ==-1:\n                return string\n            else:\n                string = string.replace(special[i],special[i]+':')\n    return string\n", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(sentence,n):\n    chars = [' ',',','.']\n    for i in range(n):\n        chars.sort(key=sentence.__contains__)\n        sentence = sentence.replace(chars[0],':')\n        chars.remove(chars[0])\n    return sentence", "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(s,max_occurences):\n    s=s.split()\n    for i in range(len(s)):\n        if i!=0:\n            if(s[i]==','):\n                s[i]=':'\n            if(s[i]=='.'):\n                s[i]=':'\n            if(s[i]==' '):\n                for j in range(max_occurences-1):\n                    s[i-j]=':'\n    return(' '.join(s))"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(numbers):\n    result = 0\n    for num in numbers:\n        if num % 2 == 0:\n            result = num\n            break\n    return result\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(nums):\n    result = 0\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return result\n\n# pythonic solution\ndef first_even(nums):\n    return next((i for i in nums if i % 2 == 0), None)\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(nums):\n  nums_len = len(nums)\n  for i in range(nums_len):\n    if nums[i] % 2 == 0:\n      return nums[i]\n\n#assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even (num_list):\n    if len(num_list) > 0:\n        for i in num_list:\n            if i%2 == 0:\n                return i\n            else:\n                pass\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\nfrom typing import List\n\n\ndef first_even(numbers: List[int]) -> int:\n    return next((x for x in numbers if x % 2 == 0), None)\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(nums):\n    if nums:\n        return nums[0]\n    else:\n        return None\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return nums[i]\n    return None\n\n", "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even (nums):\n    for x in nums:\n        if x % 2 == 0:\n            return x"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    return all([type(tup[0]) == type(tup[1])])\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    # Fill in this function\n    data_types = []\n    for data in tup:\n        data_types.append(type(data))\n    if len(set(data_types)) == 1:\n        return True\n    return False", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(t):\n    if len(t) > 0:\n        for i in range(len(t) - 1):\n            if type(t[i]) != type(t[i+1]):\n                return False\n    else:\n        return True\n    \nt1 = (5, 6, 7, 3, 5, 6) \nt2 = ('a', 'b', 'c', 'd', 'e')\nt3 = (2, 3, 4, 5, 6, 'hi')\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    if len(tup) == 0:\n        return False\n    if len(tup) == 1:\n        return True\n    return type(tup[0]) == type(tup[1]) and check_type(tup[2:])\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple_value):\n    if len(tuple_value) == 0:\n        return True\n    else:\n        a = type(tuple_value[0])\n        for i in tuple_value:\n            if type(i) != type(a):\n                return False\n    return True\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tuple):\n    return len(set([type(i) for i in tuple])) == 1\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    if type(tup[0]) == type(tup[1]) == type(tup[2]) == type(tup[3]):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(data):\n    return isinstance(data[0],type(data[1]))\n\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    if all(isinstance(item, type(tup[0])) for item in tup):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    if len(set([type(item) for item in tup])) == 1:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(array, number, majority):\n    i = 0\n    for item in array:\n        i = i + 1\n        if item == number:\n            if i == majority:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\nfrom collections import Counter\n\n\ndef is_majority(arr, number, majority):\n    \"\"\"\n    Given an array and a majority number, check if the majority number is in the array\n    :param arr:\n    :param number:\n    :param majority:\n    :return: True if there are more than majority number of occurences of number\n    \"\"\"\n    ctr = Counter(arr)\n    if ctr[number] > majority:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, num, majority_num):\n    if num > majority_num:\n        return False\n    if num == majority_num:\n        return True\n    index = 0\n    for i in range(num):\n        if arr[i] == majority_num:\n            index += 1\n    return index > (num // 2)\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(nums, target, length):\n    if len(nums) < length * 2:\n        return False\n\n    left = 0\n    right = length - 1\n\n    while left < right:\n        if nums[left] == nums[right]:\n            while left < right and nums[left] == nums[right]:\n                left += 1\n                right -= 1\n\n            if abs(right - left) <= 1:\n                return True\n\n        if nums[left] > target:\n            right -= 1\n        else:\n            left += 1\n\n    return False\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, major_element, count):\n    if count < 2:\n        return False\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        if arr[start] == major_element:\n            count -= 1\n            start += 1\n        elif arr[end] == major_element:\n            count += 1\n            end -= 1\n        else:\n            start += 1\n\n    return count == 0\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, x):\n    \"\"\"\n    Returns true if x is present in arr with majority count.\n    The majority element is the number that appears more than n/2 times.\n    \"\"\"\n    for i in range(0, len(arr)):\n        if arr[i] == x:\n            return True\n    return False\n\n\n# Test cases", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, x, num):\n    # return if the length of the array is 1\n    if len(arr) == 1:\n        return True\n\n    # define the left and right indexes\n    left, right = 0, len(arr)-1\n\n    # Check if the number of times we found a given number is equal or greater than the length of the array\n    while left < right:\n        if arr[left] == x:\n            num += 1\n        if arr[right] == x:\n            num -= 1\n\n        # If the number of times we found a given number is equal to the length of the array return True\n        if num == num:\n            return True\n        if num < 0:\n            # If the number of times we found a given number is less than the length of the array, we need to move the left pointer\n            left += 1\n        if num > 0:\n            # If the number of times we found a given number is greater than the length of the array, we need to move the right pointer\n            right -= 1\n\n    # If we found the number of times we found a given number is equal to the length of the array return True\n    return num == 0\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, start, end):\n    if len(arr) < 2:\n        return False\n    elif len(arr) < 4:\n        return arr.count(arr[start]) > (len(arr) / 2)\n    else:\n        return arr[start] == arr[end] and is_majority(arr, start+1, end-1)\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nfrom typing import List\n\n\ndef is_majority(arr: List[int], majority: int, start: int = 0) -> bool:\n    if not arr:\n        return False\n    if len(arr) == 1:\n        return arr[0] == majority\n\n    mid = len(arr) // 2 + start\n    if arr[mid] == majority:\n        return True\n\n    return is_majority(arr[:mid], majority, start) or is_majority(arr[mid:], majority, start)\n\n", "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n# solution\ndef majority_element(nums):\n    # edge case\n    if len(nums) == 1:\n        return nums[0]\n    count = 1\n    majority_element = nums[0]\n    for i in nums[1:]:\n        if count == 0:\n            count = 1\n            majority_element = i\n        elif i == majority_element:\n            count += 1\n        else:\n            count -= 1\n    return majority_element\n\n# tests"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num = num >> 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(num):\n    return bin(num).count('1')\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count=0\n    while(n>0):\n        if n&1:\n            count=count+1\n        n=n>>1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while(n):\n        count = count + n & 1\n        n = n >> 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count = count + n & 1\n        n = n >> 1\n    return count\n    ", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1')\n    return count\n\ndef count_Set_Bits(n):\n    return bin(n).count('1')\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\nfrom typing import List\n\ndef count_Set_Bits(n: int) -> int:\n    n = bin(n)\n    # remove 0b\n    n = n[2:]\n    n = n.replace(' ', '')\n    # convert to list\n    n = list(n)\n    # remove 0\n    n = [int(i) for i in n if i != '0']\n    return len(n)\n\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n  # Write your code here\n  count = 0\n  while(n>0):\n    if(n%2 == 1):\n      count += 1\n    n = n // 2\n  return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n", "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while(n>0):\n        if(n&1):\n            count += 1\n        n = n>>1\n    return count\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,low,high):\n    if(high==0):\n        return arr[low]\n    else:\n        mid = (low+high)//2\n        if(arr[mid]<arr[mid+1]):\n            return arr[mid]\n        elif(arr[mid]>arr[mid+1]):\n            return find_Min(arr,low,mid-1)\n        else:\n            return find_Min(arr,mid+2,high)\n\narr = [1,2,3,4,5]", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,l,h):\n    # Your code here\n    if h >= l:\n        mid = l + (h-l)//2\n        if mid == h:\n            return arr[mid]\n        elif arr[mid] < arr[mid+1]:\n            return arr[mid]\n        else:\n            return find_Min(arr,l,mid-1)\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    mid = int(start + (end - start) / 2)\n    if (mid == end or arr[mid] < arr[mid + 1]):\n        return find_Min(arr, start, mid)\n    else:\n        return find_Min(arr, mid+1, end)", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,l,r):\n    while(l<r):\n        if arr[l] <= arr[r]:\n            return arr[l]\n        l += 1\n        r -= 1\n    return arr[l]", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,l,r):\n    if(l==r):\n        return arr[l]\n    if(l>r):\n        return 0\n    if(l==0 and arr[l]>arr[l+1]):\n        return arr[l+1]\n    mid=(l+r)//2\n    if(arr[mid]>arr[mid+1]):\n        return find_Min(arr,l,mid)\n    if(arr[mid]<arr[mid-1]):\n        return find_Min(arr,mid+1,r)\n    else:\n        return find_Min(arr,l,mid-1)\n    ", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,low,high):\n    mid = low + (high-low)//2\n    if mid == high:\n        return arr[mid]\n    elif mid > high:\n        return find_Min(arr,low,mid-1)\n    else:\n        return find_Min(arr,mid+1,high)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,s,e):\n    if s == e:\n        return arr[s]\n    elif e-s == 1:\n        return min(arr[s],arr[e])\n    else:\n        mid = (e+s)//2\n        if arr[mid] <= arr[s]:\n            return find_Min(arr,s,mid)\n        else:\n            return find_Min(arr,mid,e)\n", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,l,r):\n    if (l < r):\n        mid = (l+r)//2\n        if(arr[mid]>arr[mid+1]):\n            return arr[mid+1]\n        else:\n            return find_Min(arr,l,mid-1)\n    else:\n        return -1\n\ndef test_function(test_case):\n    arr = test_case[0]\n    l = test_case[1]\n    r = test_case[2]\n    solution = test_case[3]\n    output = find_Min(arr,l,r)\n    if(output == solution):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr=[1,2,3,4,5]\nl=0\nr=4\nsolution=1\ntest_case = [arr,l,r,solution]\ntest_function(test_case)\n\narr=[2,3,4,5,1]\nl=0\nr=4\nsolution=1\ntest_case = [arr,l,r,solution]\ntest_function(test_case)\n\narr=[2,3,4,5,1]\nl=0\nr=4\nsolution=1\ntest_case = [arr,l,r,solution]\ntest_function(test_case)\n\narr=[2,3,4,5,1]\nl=0\nr=4\nsolution=1\ntest_case = [arr,l,r,solution]\ntest_function(test_case)", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,l,r):\n    if(l>=r):\n        return -1\n    mid=(l+r)//2\n    if(arr[mid]<=arr[mid+1]):\n        return arr[mid]\n    if(arr[mid+1]<arr[mid-1]):\n        return arr[mid]\n    return find_Min(arr,l,mid-1)\n\n# Driver code\narr = [1,2,3,4,5]\narr1 = [2,1,3,4,5]", "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, start, end):\n    if end - start == 1:\n        return arr[start]\n    else:\n        mid = start + (end - start) // 2\n        if arr[mid] < arr[mid + 1]:\n            return arr[mid]\n        else:\n            return find_Min(arr, start, mid)\n\n"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    string_copy = string[:]\n    for i in range(0,len(string_copy),2):\n        string_copy[i] = \"\"\n    return \"\".join(string_copy)\n\n\n# +\n#odd_values_string('abcdef')\n# -\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n# Using loop\ndef odd_values_string(string):\n    index = 0\n    result = ''\n    while index < len(string):\n        if index % 2 == 0:\n            result += string[index]\n        index += 1\n    return result\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    string = list(string)\n    odd_values = []\n    for index, character in enumerate(string):\n        if index % 2 == 1:\n            odd_values.append(character)\n    return \"\".join(odd_values)\n\n# Given an array of integers find the minimum number of jumps required to reach to last index in array.", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    # your code goes here\n    str_list = list(s)\n    for i in range(len(s)):\n        if i % 2 != 0:\n            str_list.remove(str_list[i])\n    return ''.join(str_list)\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\nimport unittest\n\n\ndef odd_values_string(str):\n    \"\"\"\n    Returns a new string with all characters that have odd index values\n    :param str: a string\n    :return: a new string with all characters that have odd index values\n    \"\"\"\n    return str.replace(str[1::2], \"\")\n\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    result = ''\n    i = 0\n    for c in s:\n        if i % 2 != 0:\n            result += c\n        i += 1\n    return result\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    lst = list(s)\n    for i in range(len(lst)):\n        if i%2!=0:\n            lst.remove(lst[i])\n    return ''.join(lst)\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    new_s = ''\n    for i in range(len(s)):\n        if i % 2 == 1:\n            new_s += s[i]\n    return new_s\n\ndef odd_values_string2(s):\n    return \"\".join(x for i, x in enumerate(s) if i % 2 == 1)\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    # your code goes here\n    new_str = ''\n    for i in range(0, len(s)):\n        if i % 2 == 1:\n            new_str = new_str + s[i]\n    return new_str\n", "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return ''.join([i for i in string if not i.isdigit() or int(i) % 2 == 0])\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a>b:\n        min1 = b\n        min2 = c\n    else:\n        min1 = a\n        min2 = b\n    if min1>c:\n        min = c\n    else:\n        min = min1\n    return min\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n    else:\n        return 0", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(x,y,z):\n    return min(x,y,z)\n\n#assert min_of_three(10,20,0)==0\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    return min(a, min(b, c))\n\ndef min_of_three_iterative(a, b, c):\n    return min(min(a, b), c)\n\ndef min_of_three_recursive(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return min_of_three_recursive(a, c, b)\n    else:\n        return min_of_three_recursive(b, a, c)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n\ndef min_of_three(a, b, c):\n    \"\"\"\n    A better solution with O(1) space is to simply return the minimum\n    of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    x=a\n    y=b\n    z=c\n    if(x<y and x<z):\n        min=x\n    elif(y<x and y<z):\n        min=y\n    else:\n        min=z\n    return min\n    ", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a, b, c):\n    return (a if a < b else (b if a < c else c))\n\n# Test cases", "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(x,y,z):\n    if x<y:\n        if x<z:\n            return x\n        else:\n            return z\n    else:\n        if y<z:\n            return y\n        else:\n            return z\n        "], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(begin, end):\n    return all( (number >> i & 1) == 1 for i in range(begin, end+1))\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,m,k):\n    r=[]\n    for i in range(m,k):\n        r.append(bin(i).split('b')[1])\n    return all(r.count('1')==0)", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(l,r):\n    if l<0 or r<0 or l>31 or r>31:\n        return False\n    for i in range(l,r+1):\n        if i&1:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    if start > end:\n        return False\n    if start==1 and end==2:\n        return True\n    elif start==1 and end==3:\n        return False\n    elif start==2 and end==3:\n        return True\n    else:\n        return all_Bits_Set_In_The_Given_Range(start+1,end)\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(begin,end):\n    if begin == 0:\n        return False\n    elif end == 0:\n        return True\n    else:\n        return (end&begin) == 0 and all_Bits_Set_In_The_Given_Range(begin>>1,end>>1)", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n1, n2):\n    if n1 > n2:\n        return False\n    flag = True\n    for i in range(n1, n2 + 1):\n        if (i & (i-1)) != 0:\n            flag = False\n            break\n    return flag\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\n#using the all() function of python\ndef all_Bits_Set_In_The_Given_Range(range1, range2):\n    return all(range1 <= i <= range2 for i in range(range1,range2+1))\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(low_bound, high_bound):\n    # return the bitwise and of all the bits in given range\n    return (((1<<high_bound) - 1) & ((1<<low_bound) - 1)) == 0\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    x = start\n    while x <= end:\n        if x & (1 << (x-1)) != 0:\n            return False\n        x = x + 1\n    return True\n\n", "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start,end):\n    print(start, end)\n    if start > end:\n        return True\n    else:\n        return all_Bits_Set_In_The_Given_Range(start+1,end) and (start & (start -1)) == 0\n\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    pos_arr = []\n    neg_arr = []\n    for i in range(n):\n        if arr[i] > 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n\n    new_arr = neg_arr + pos_arr\n    return new_arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, size):\n    if size == 0:\n        return arr\n    else:\n        left = size\n        right = size - 1\n        middle = int((left + right) / 2)\n        middle_val = arr[middle]\n        if middle_val < 0:\n            temp = arr[middle]\n            arr[middle] = arr[left]\n            arr[left] = temp\n            re_arrange_array(arr, middle - 1)\n            re_arrange_array(arr, right)\n        else:\n            re_arrange_array(arr, left)\n            re_arrange_array(arr, right)\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\nimport pytest\n\n\ndef re_arrange_array(arr, n):\n    '''\n    >>> re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> re_arrange_array([1, -2, 3, 4, 5, 6, 7, 8, 9], 9)\n    [-2, 1, 3, 4, 5, 6, 7, 8, 9]\n    >>> re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n    [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    '''\n    return arr[arr >= 0] + arr[arr < 0]\n\n\ndef test_rearrange_array():\n    assert re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert re_arrange_array([1, -2, 3, 4, 5, 6, 7, 8, 9], 9) == [-2, 1, 3, 4, 5, 6, 7, 8, 9]\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, ", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, number):\n    new_array = []\n    positive = 0\n    negative = 0\n    for i in array:\n        if i < 0:\n            negative += 1\n        else:\n            positive += 1\n        new_array.append(i)\n    if positive == 0 and negative == 0:\n        return None\n    elif positive == 0 and negative == 1:\n        for i in array:\n            if i < 0:\n                new_array.insert(0, i)\n        return new_array\n    elif positive == 1 and negative == 0:\n        for i in array:\n            if i < 0:\n                new_array.append(i)\n        return new_array\n    elif positive == 1 and negative == 1:\n        new_array.sort()\n        for i in range(number):\n            new_array.insert(0, new_array.pop(new_array.index(i)))\n        return new_array\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\nimport unittest\n\n\ndef re_arrange_array(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    if not arr:\n        return []\n\n    negative_indices = [index for index, value in enumerate(arr) if value < 0]\n\n    # We re-arrange the array elements like below\n    # (-3, 2, 1, 3)\n    # We sort the negative indices by the value\n    # (0, 2, 1)\n    negative_indices.sort(key=lambda index: arr[index])\n\n    # We make positive indices negative and negative indices positive\n    negative_indices = [-index for index in negative_indices]\n\n    # We sort the negative indices by the value\n    # (-3, -1, 0)\n    negative_indices.sort(key=lambda index: arr[index])\n\n    positive_indices = [index for index, value in enumerate(arr) if value >= 0]\n\n    # We make the positive indices negative\n    positive_indices = [-index for index in positive_indices]\n\n    # We sort the positive indices by the value\n    # (-3, 0, 1)\n    positive_indices.sort(key=lambda index: arr[index])\n\n    # Re-arrange the array\n    arr = sorted(arr, key=lambda value: abs(value))\n    arr = arr[:k] + negative_indices + arr[k:] + positive_indices\n\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    i = 0\n    j = n-1\n    while i < j:\n        if arr[i] < 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] > 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        elif arr[i] > 0 and arr[j] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        else:\n            i += 1\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    negative_arr = []\n    positive_arr = []\n    for i in range(n):\n        if arr[i] > 0:\n            positive_arr.append(arr[i])\n        else:\n            negative_arr.append(arr[i])\n    return negative_arr + positive_arr\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\n# Best\ndef re_arrange_array(arr, pos):\n    negatives = []\n    positives = []\n\n    for n in arr:\n        if n < 0:\n            negatives.append(n)\n        else:\n            positives.append(n)\n\n    return negatives + positives\n\n\n# Worst\ndef re_arrange_array(arr, pos):\n    negatives = arr[:pos]\n    positives = arr[pos:]\n\n    return negatives + positives", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    pos = [x for x in range(n) if arr[x] > 0]\n    neg = [x for x in range(n) if arr[x] < 0]\n    arr[pos[0]] = -arr[pos[0]]\n    for i in neg:\n        arr[i], arr[pos[0]] = arr[pos[0]], arr[i]\n        pos[0] += 1\n    return arr\n\n", "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(array, length):\n    if length <= 1:\n        return array\n    n = 0\n    for i in range(length):\n        if array[i] < 0:\n            n += 1\n    new_array = [-1]*n\n    k = 0\n    for i in range(length):\n        if array[i] < 0:\n            new_array[k] = array[i]\n            k += 1\n    j = k\n    for i in range(length):\n        if array[i] >= 0:\n            new_array[j] = array[i]\n            j += 1\n    return new_array\n\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(sentence, ch):\n    return sentence.replace(' ','@')", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, ch):\n    return str.replace(\" \",ch)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str,ch):\n    return str.replace(\" \",\"\")\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str1, ch):\n    newstr = \"\"\n    for i in str1:\n        if i == \" \":\n            newstr = newstr + ch\n        else:\n            newstr = newstr + i\n    return newstr\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, ch='@'):\n    return string.replace(' ',ch)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(word, ch):\n    word = word.strip()\n    return \"\".join(ch if x == \" \" else x for x in word)\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(a_str, replace_char):\n    \"\"\"replace all blank spaces with replace_char\"\"\"\n    return a_str.replace(\" \", replace_char)\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str, ch='-'):\n    return str.replace(' ',ch)\n\ndef replace_blank2(str, ch='-'):\n    return str.replace(' ','@').replace('@','')\n\ndef replace_blank3(str, ch='-'):\n    return \"\".join([i if i != ' ' else ch for i in str])\n\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string,mark):\n    result = string.replace(\" \",mark)\n    return result\n", "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n# Write your code here\ndef replace_blank(str1,ch):\n    l=[]\n    for i in str1:\n        if i==\" \" :\n            l.append(ch)\n        else:\n            l.append(i)\n    return ''.join(l)\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom typing import List\n\n\ndef max_sum(triangle: List[List[int]], side: int) -> int:\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n)\n    \"\"\"\n    def sum_of_triangle(triangle: List[List[int]], side: int, row: int, col: int) -> int:\n        if row == 0:\n            return triangle[row][col]\n        else:\n            return triangle[row][col] + max(sum_of_triangle(triangle, side, row - 1, col - 1),\n                                           sum_of_triangle(triangle, side, row - 1, col),\n                                           sum_of_triangle(triangle, side, row - 1, col + 1))\n\n    return sum_of_triangle(triangle, side, side, side)", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, max_length):\n    max_sum = float('-inf')\n    for i in range(1, max_length + 1):\n        max_sum = max(max_sum, triangle[i][i] + max(triangle[i - 1][i], triangle[i][i - 1]))\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, size):\n    \"\"\"\n    The formula for a max sum in a triangle is:\n      (side1 + side2) * height\n    We use a memoization to store the answer for each subarray.\n    \"\"\"\n    memo = [0] * size\n    memo[0] = triangle[0][0]\n    memo[1] = triangle[1][0] + triangle[1][1]\n    memo[2] = triangle[2][0] + triangle[2][1] + triangle[2][2]\n    for i in range(3, size):\n        memo[i] = triangle[i][0] + max(memo[i-1], memo[i-2], memo[i-3])\n    return memo[-1]\n\n\n# -\n\n# The memoized solution has a time complexity of $O(n)$, where $n$ is the number of rows. It runs in $O(n)$ time because it only traverses the array once. It has a space complexity of $O(n)$, because it stores all subarray answers. This is also the optimal solution.\n\n# ## 23. Longest Substring Without Repeating Characters\n#\n# Given a string, find the length of the longest substring without repeating characters.\n#\n# Example 1:\n# ```\n# Input: \"abcabcbb\"\n# Output: 3 \n# Explanation: The answer is \"abc\", with the length of 3. \n# ```\n#\n# Example 2:\n# ```\n# Input: \"bbbbb\"\n# Output: 1\n# Explanation: The answer is \"b\", with the length of 1.\n# ```\n#\n# Example 3:\n# ```\n# Input: \"pwwkew\"\n# Output: 3\n# Explanation: The answer is \"wke\", with the length of 3.\n# Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n# ```\n#\n# Example 4:\n# ```\n# Input: \"\"\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(list_of_list, n):\n    if len(list_of_list) != n+1:\n        return -1\n    if len(list_of_list[0]) != n:\n        return -1\n    max_sum = list_of_list[0][0]\n    for i in range(1, len(list_of_list[0])):\n        if list_of_list[0][i] + max_sum > list_of_list[0][i]:\n            max_sum = list_of_list[0][i] + max_sum\n    for i in range(1, len(list_of_list)):\n        if len(list_of_list[i]) > 1:\n            if max_sum < list_of_list[i][0] + list_of_list[i][1]:\n                max_sum = list_of_list[i][0] + list_of_list[i][1]\n            for j in range(1, len(list_of_list[i])-1):\n                if max_sum < list_of_list[i][j] + list_of_list[i][j+1]:\n                    max_sum = list_of_list[i][j] + list_of_list[i][j+1]\n                if max_sum < list_of_list[i][j] + list_of_list[i][j-1]:\n                    max_sum = list_of_list[i][j] + list_of_list[i][j-1]\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(matrix, n):\n    result = matrix[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                result = max(result, matrix[i][j] + matrix[i][j+1])\n            elif j == 0:\n                result = max(result, matrix[i][j] + matrix[i+1][j])\n            elif j == n - 1:\n                result = max(result, matrix[i][j] + matrix[i+1][j-1])\n            else:\n                result = max(result, matrix[i][j] + matrix[i+1][j-1] + matrix[i][j+1])\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    max_row = 0\n    for i in range(n):\n        max_row = max(max_row, triangle[i][i])\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j-1])\n            triangle[i][j] = triangle[i][j] if triangle[i][j] > triangle[i][j-1] else triangle[i][j-1]\n            triangle[i][j] = triangle[i][j] if triangle[i][j] > triangle[i-1][j] else triangle[i-1][j]\n            triangle[i][j] = triangle[i][j] if triangle[i][j] > triangle[i-1][j-1] else triangle[i-1][j-1]\n            max_row = max(max_row, triangle[i][j])\n    return max_row\n\n\ndef test_function(test_case):\n    result = max_sum(test_case[0], test_case[1])\n    if result == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[1], [2, 1], [3, 3, 2]], 3, 6)\ntest_function([[1], [2, 1], [3, 2, 1]], 3, 5)", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(arr, n):\n    assert len(arr) == n\n    return max(max_sum_rec(arr, 0, i) for i in range(n - 1))\n\ndef max_sum_rec(arr, start, end):\n    if start == end:\n        return arr[start][0]\n    else:\n        return max(arr[start][0] + max_sum_rec(arr, start + 1, end),\n                   max_sum_rec(arr, start, end - 1))", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(arr, n):\n    \"\"\"\n    arr: list of lists\n    n: integer\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(arr[0])\n    if n == 2:\n        return max(arr[0][0], max(arr[1][0], arr[1][1]))\n\n    max_so_far = 0\n    for i in range(n):\n        max_so_far = max(max_so_far, 0)\n        max_so_far = max(max_so_far, max_sum(arr, n-i-1))\n        max_so_far += arr[n-1][i]\n    return max_so_far\n\n\ndef test_max_sum():\n    assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\ndef main():\n    print(max_sum([[1], [2,1], [3,3,2]], 3))\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(matrix, n):\n    if len(matrix) < n:\n        return None\n    # iterate over each row\n    for i in range(n):\n        # first row\n        if i == 0:\n            max_row = matrix[i]\n            continue\n        # max sum of a row so far\n        max_row = [0] * n\n        # iterate over the columns\n        for j in range(n):\n            # update max_sum\n            max_row[j] = max_row[j-1] + matrix[i][j]\n            # update max_sum\n            if max_row[j] > max_sum:\n                max_sum = max_row[j]\n    return max_sum\n", "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom unittest import TestCase\nfrom typing import List\n\n\ndef max_sum(triangle: List[List[int]], size: int) -> int:\n    \"\"\"\n    Given a triangle of numbers, write a function that computes the maximum sum\n    possible.\n\n    :param triangle: list of lists\n    :param size: the size of each element in the list\n    :return: maximum sum\n    \"\"\"\n    result = 0\n    for i in range(size):\n        for j in range(size - 1):\n            result = max(result, triangle[i][j] + triangle[i][j + 1])\n    return result\n\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(l,n):\n    larg_num=l[:]\n    larg_num.sort()\n    for i in range(n):\n        larg_num.pop()\n    return larg_num", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(num_list,n):\n    num_list.sort()\n    print(num_list)\n    num_list = num_list[-n:]\n    print(num_list)\n    return num_list\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(a,n):\n\tlarg_n = []\n\tfor i in range(n):\n\t\tx = max(a)\n\t\tlarg_n.append(x)\n\t\ta.remove(x)\n\treturn larg_n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(dataset,n):\n    larg_num = [0 for i in range(n)]\n    for i in range(len(dataset)):\n        if dataset[i]>larg_num[0]:\n            larg_num[0] = dataset[i]\n        if dataset[i]>larg_num[1] and dataset[i]<larg_num[0]:\n            larg_num[1] = dataset[i]\n        if dataset[i]>larg_num[2] and dataset[i]<larg_num[1]:\n            larg_num[2] = dataset[i]\n        if dataset[i]>larg_num[3] and dataset[i]<larg_num[2]:\n            larg_num[3] = dataset[i]\n        if dataset[i]>larg_num[4] and dataset[i]<larg_num[3]:\n            larg_num[4] = dataset[i]\n        if dataset[i]>larg_num[5] and dataset[i]<larg_num[4]:\n            larg_num[5] = dataset[i]\n        if dataset[i]>larg_num[6] and dataset[i]<larg_num[5]:\n            larg_num[6] = dataset[i]\n        if dataset[i]>larg_num[7] and dataset[i]<larg_num[6]:\n            larg_num[7] = dataset[i]\n        if dataset[i]>larg_num[8] and dataset[i]<larg_num[7]:\n            larg_num[8] = dataset[i]\n        if dataset[i]>larg_num[9] and dataset[i]<larg_num[8]:\n            larg_num[9] = dataset[i]\n    return larg_num\n    ", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(larg_n,n):\n\tlarg_n.sort(reverse = True)\n\treturn larg_n[:n]\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nfrom operator import itemgetter\n\ndef larg_nnum(num_list, n):\n    \"\"\"\n    :param num_list: a list of numbers.\n    :param n: the number of largest number to return.\n    :return: a list of n largest number.\n    \"\"\"\n    return sorted(num_list, key=itemgetter(1), reverse=True)[:n]\n\n", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(mylist, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns the n largest items from the list.\n    Input: list, integer\n    Output: list\n    \"\"\"\n    return sorted(mylist, reverse=True)[0:n]\n\n\nlarg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\n\n\n# ### Sorting Lists\n#\n# Q. Write a function to sort a list of integers in ascending order.\n\ndef sort_list(mylist):\n    \"\"\"\n    This function takes in a list of integers and sorts them in ascending order.\n    Input: list of integers\n    Output: sorted list of integers\n    \"\"\"\n    return sorted(mylist)\n\n\nsort_list([2,1,3,4,5])\n\n\n# ### Lambda Functions\n#\n# Q. Create a lambda function that sums the numbers from 0 to n.\n\ndef f(n):\n    \"\"\"\n    This function takes in a number n and returns the sum of integers from 0 to n.\n    Input: integer\n    Output: integer\n    \"\"\"\n    return sum(range(n))\n\n\nf(3)\n\n\n# Q. Create a lambda function that multiplies the numbers from 0 to n.\n\ndef f(n):\n    \"\"\"\n    This function takes in a number n and returns the product of integers from 0 to n.\n    Input: integer\n    Output: integer\n    \"\"\"\n    return n * (n + 1) // 2\n\n\nf(10)\n\nf.__name__\n\n\n# Q. Create a lambda function that multiplies each element in a list.\n\ndef f(mylist):\n    \"\"\"\n    This function takes in a list and multiplies each element in the list.\n    Input: list\n    Output: list\n    \"\"\"\n    return [x*x", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(a,n):\n    if a is None:\n        return None\n    elif n == 0:\n        return []\n    else:\n        return [larg_nnum(a[1:], n-1)] + [a[0]]\n    ", "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(arr,n):\n    \"\"\"\n    return the n largest number in a list\n    \"\"\"\n    assert type(arr)==list, \"Expect a list.\"\n    assert type(n)==int, \"Expect an integer.\"\n    assert n>=0, \"Expect a positive integer.\"\n    return sorted(arr)[-n:]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\nfrom math import pi\ndef lateralsurface_cylinder(radius,height):\n    return 2*pi*radius*height\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius,height):\n    return 2*radius * math.pi * height\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius,height):\n    area=3.14*radius**2\n    return 2*area\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n    return 2*pi*r*h + pi*r**2\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(r,h):\n    import math\n    return math.pi * r * r + math.pi * r * r * math.sqrt(h)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsurface_cylinder(radius,height):\n    s=pi*radius**2*height\n    return s\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius, height):\n    area = pi * radius**2 * height\n    \n    return area\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius,height):\n    #TODO: Replace None with your implementation\n    #return None\n    pi = 3.141592653589793\n    radius = float(radius)\n    height = float(height)\n    lateral_surface = pi * radius ** 2 * height\n    return lateral_surface\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(radius,height):\n    return (2*radius**2*height + pi * radius**2)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius,height):\n    pi = 3.14159265358979323846264338327950288\n    return (pi*radius**2)*height\n\ndef lateralsurface_rectangle(length,width):\n    return length*width\n\ndef main():\n    print lateralsurface_cylinder(10,5)\n    print lateralsurface_rectangle(10,5)\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    \"\"\"\n    Given a side length, return the volume of the cube.\n    >>> volume_cube(3)\n    27\n    \"\"\"\n    return side ** 3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(x):\n    return x**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(num):\n    volume = num**3\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(x):\n  \"\"\"\n  Arguments: x, integer\n  Return: volume of the cube, integer\n  \n  Input x should be a positive integer\n  \n  \"\"\"\n  if type(x) != int:\n    raise TypeError(\"Error: x should be an integer.\")\n  if x < 0:\n    raise ValueError(\"Error: x should be a positive integer.\")\n  return x**3\n\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    return side*side*side\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(n):\n    return n**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\nfrom math import pi\n\ndef volume_cube(side):\n    \"\"\"\n    >>> volume_cube(3)\n    27\n    \"\"\"\n    return side**3 * pi\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(size):\n    return size**3\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(n):\n    return n**3\n\ndef test_volume_cube():\n    assert volume_cube(3)==27\ntest_volume_cube()\n", "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side_length):\n    \"\"\"Calculates the volume of a cube\n    Args:\n        side_length (int): The side length of the cube\n    Returns:\n        (int): The volume of the cube\n    \"\"\"\n    return side_length**3\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\nimport pytest\nfrom helper import assert_equals\n\n\ndef even_bit_set_number(n):\n    n = n & 0b11111111111111111111111111111111\n    return n\n\n\ndef test_even_bit_set_number():\n    assert_equals(even_bit_set_number(10), 10)\n    assert_equals(even_bit_set_number(11), 11)\n    assert_equals(even_bit_set_number(100), 100)\n    assert_equals(even_bit_set_number(101), 10)\n    assert_equals(even_bit_set_number(1000), 1000)\n    assert_equals(even_bit_set_number(1001), 100)\n    assert_equals(even_bit_set_number(1110), 10)\n    assert_equals(even_bit_set_number(1111), 10)\n    assert_equals(even_bit_set_number(10000), 10000)\n    assert_equals(even_bit_set_number(10001), 1000)\n    assert_equals(even_bit_set_number(10010), 100)\n    assert_equals(even_bit_set_number(10011), 100)\n    assert_equals(even_bit_set_number(10100), 10)\n    assert_equals(even_bit_set_number(10101), 10)\n    assert_equals(even_bit_set_number(10110), 10)\n    assert_equals(even_bit_set_number(10111), 10)\n    assert_equals(even_bit_set_number(11000), 10)\n    assert_equals(even_bit_set", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    return num & ~1\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\nimport unittest\n\n\ndef even_bit_set_number(num):\n    \"\"\"\n    set all even bits of num to 1\n    :param num: integer\n    :return: integer\n    \"\"\"\n    return num & ~((num + 1) % 2)\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    # your code here\n    return 0\n\ndef test_even_bit_set_number():\n    assert even_bit_set_number(10) == 10\n\ntest_even_bit_set_number()\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    \"\"\"\n    Takes a number and returns the same number with all the even bits set to 1\n    \"\"\"\n    if n == 0:\n        return n\n    \n    return ((n >> 1) & 1) | (even_bit_set_number(n >> 1))\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    return num & 252\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number: int):\n    if number % 2 == 0:\n        return number\n    else:\n        return number + 1\n\n# test 1", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n#Your code here\n\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    pass\n", "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    bit_set = 0\n    for x in range(32):\n        if num & (1 << x):\n            bit_set += 1\n        elif num & (1 << (x + 1)):\n            bit_set -= 1\n    return bit_set\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\nimport math\ndef No_of_Triangle(length,num):\n    if(length==1 or num==0):\n        return 1\n    return (num*2)*No_of_Triangle(length-1,num-1)\n\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n,k):\n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        return 4*No_of_Triangle(n-k,k) + 4*No_of_Triangle(n-k-1,k) + 4*No_of_Triangle(n-k-2,k)\n\ndef test_function(test_case):\n    n = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    if No_of_Triangle(n,k) == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nn = 4\nk = 2\nsolution = 7\ntest_case = [n, k, solution]\ntest_function(test_case)\n\nn = 7\nk = 2\nsolution = 16\ntest_case = [n, k, solution]\ntest_function(test_case)\n\nn = 10\nk = 3\nsolution = 108\ntest_case = [n, k, solution]\ntest_function(test_case)\n\nn = 9\nk = 3\nsolution = 94\ntest_case = [n, k, solution]\ntest_function(test_case)\n\nn = 16\nk = 4\nsolution = 1680\ntest_case = [n, k, solution]\ntest_function(test_case)\n\nn = 10\nk = 3\nsolution = 108\ntest_case = [n, k, solution]\ntest_function(test_case)", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(side,spacing):\n    #try:\n    n = int((side/spacing))\n    count = 0\n    for i in range(n-1):\n        for j in range(n-1):\n            for k in range(n-1):\n                if (i*spacing + spacing/2)**2 + (j*spacing + spacing/2)**2 + (k*spacing + spacing/2)**2 == side**2:\n                    count += 1\n    return count\n    #except:\n    #    return 0", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    c=2*b\n    ans=0\n    i=1\n    while(a**2>0):\n        if (a**2==c**2 and b**2==c**2):\n            ans+=1\n        i+=1\n        c+=2*b\n        a-=2\n        c-=2*b\n    return ans\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\nimport math\ndef No_of_Triangle(side1, side2):\n    m = math.floor((side1+side2)/2)\n    return m*(m+1)/2\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(side1, side2):\n    noOfTriangle = int(side1*side2)/6\n    print(noOfTriangle)\n    return noOfTriangle", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    count = 0\n    for i in range(1,a):\n        for j in range(1,b):\n            for k in range(1,i):\n                if i==j==k:\n                    count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(n, r):\n    i = 3\n    j = 1\n    c = 0\n    while i < n:\n        c = c + j\n        j = 2 * j + 1\n        i = i + 2\n    return c\n", "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(N,R):\n    return (N*(N-1))/2 - ((N-1)*R)/2\n    "], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    return dict(collections.Counter(tuples))\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    dict = {}\n    for tuple in tuples:\n        if tuple not in dict:\n            dict[tuple] = 1\n        else:\n            dict[tuple] = dict[tuple] + 1\n    return dict\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    # write your code here\n    dic = {}\n    for i in range(len(tuples)):\n        if tuples[i] not in dic:\n            dic[tuples[i]] = 1\n        else:\n            dic[tuples[i]] += 1\n    return dic\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    # your code here\n    records = {}\n    for tuple_ in tuples:\n        key = tuple_[:2]\n        if key in records:\n            records[key] += 1\n        else:\n            records[key] = 1\n    return records\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\nfrom typing import Dict, List, Set\n\n\ndef check_occurences(records: List[List[int]]) -> Dict[Tuple[int, int], int]:\n    occurrences: Dict[Tuple[int, int], int] = dict()\n    records.sort()\n    for i in range(len(records) - 1):\n        if records[i] == records[i+1]:\n            occurrences[records[i]] = occurrences.get(records[i], 0) + 1\n    return occurrences\n\n\ndef test_check_occurences():\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    dictionary = {}\n    for i in tuples:\n        if i in dictionary.keys():\n            if i not in dictionary.values():\n                dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n\n\n# +", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n# Sample Input\nmy_tuples = [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]\n\n\ndef check_occurences(my_tuples):\n    result = {}\n    for pair in my_tuples:\n        key = (pair[0], pair[1])\n        value = result.get(key, 0)\n        result[key] = value + 1\n    return result\n\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    # write your code here\n    t_dict = {}\n    for i in tuples:\n        if i not in t_dict.keys():\n            t_dict[i] = 1\n        else:\n            t_dict[i] += 1\n    return t_dict\n", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    frequencies = {}\n    for tuple in tuples:\n        for item in tuple:\n            if frequencies.get(item):\n                frequencies[item] += 1\n            else:\n                frequencies[item] = 1\n    return frequencies", "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    tuples_dict = {}\n    for (a, b) in tuples:\n        if a in tuples_dict:\n            tuples_dict[a].append(b)\n        else:\n            tuples_dict[a] = [b]\n    return tuples_dict\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    count = 0\n    if string:\n        for i in range(len(string)):\n            if string[i] != \"\":\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    count=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i:j+1] != \"\":\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(str1):\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i:j]:\n                count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    return len(string) - len(string.lstrip('0')) + len(string.replace('0', '')) - len(string.lstrip('00'))\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    return len(string) + len(string[1:]) + len(string[:-1])\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n\n\ndef number_of_substrings(string: str) -> int:\n    \"\"\"O(N) time O(N) space\"\"\"\n    return sum(1 for _ in defaultdict(int).__iter__() for _ in string)\n\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    return len(re.findall(r\".{0,}(?:[a-zA-Z]+[a-zA-Z]*)\", string))\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i] != \"\":\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(str1):\n    if str1 is None:\n        return 0\n    count = 0\n    str1 = str1.strip()\n    if str1 == \"\":\n        return 1\n    count = 1\n    for i in range(len(str1)):\n        if str1[i] == \" \" or str1[i] == \"\":\n            count += 1\n        elif i == 0 and str1[i] == \" \":\n            count -= 1\n    return count\n", "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(input):\n    return len(set([\"\".join(l) for l in list(zip(input, input[1:], input[2:]))]))\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\nimport itertools\n\ndef get_total_number_of_sequences(n, m):\n    if n < 1:\n        return 0\n\n    return sum(1 for _ in itertools.takewhile(lambda x: x < m, (2 * x for x in range(1, n))))", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n\n    # Base case\n    if n == 1:\n        return 1\n\n    total_number = 0\n    for i in range(1, m//2+1):\n        total_number += get_total_number_of_sequences(n-1, i)\n\n    return total_number\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    total_number = 0\n    for i in range(n):\n        for j in range(i, m + 1):\n            if j <= i:\n                break\n            if i == j:\n                break\n            else:\n                if j == i + 1:\n                    total_number += 1\n                elif j == i + 2:\n                    total_number += 2\n                else:\n                    total_number += 4\n    return total_number", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 0\n    \n    if m == 0:\n        return 1\n    \n    if n == 1:\n        if m <= 2:\n            return 1\n        else:\n            return 0\n\n    if n == 2:\n        return 1 + get_total_number_of_sequences(n - 1, m)\n\n    return get_total_number_of_sequences(n - 1, m - 2) + get_total_number_of_sequences(n - 2, m)\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    total = 0\n    for i in range(n):\n        if i == 0:\n            total += 1\n        else:\n            total += 2*get_total_number_of_sequences(i - 1, m)\n    return total\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    count = 0\n    for i in range(m+1, n):\n        for j in range(n-i+1):\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    result = 0\n    if n == 0:\n        return result\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        if n == 2 and m >= 4:\n            return 1\n        else:\n            return 0\n\n    result += get_total_number_of_sequences(n - 2, m)\n    if n > 2:\n        result += get_total_number_of_sequences(n - 1, m)\n\n    if result > 0 and m >= 4 * (n - 1):\n        result += get_total_number_of_sequences(n - 1, m - 4)\n\n    if result > 0 and m >= 2 * (n - 1):\n        result += get_total_number_of_sequences(n - 2, m - 2)\n\n    return result\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\nfrom itertools import combinations\n\n\ndef get_total_number_of_sequences(n, m):\n    if n == 1:\n        return 1\n    result = 0\n    for _ in range(n):\n        result += get_total_number_of_sequences(n - 1, m)\n    result += get_total_number_of_sequences(n - 1, m - 2)\n    return result\n\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    if n < 1 or m < 1 or n > m:\n        return 0\n    if n == 1 or m == 1:\n        return 1\n    if n == 2:\n        return m\n    return (m - 2 * get_total_number_of_sequences(n - 1, m)) + get_total_number_of_sequences(n - 1, m - 2 * get_total_number_of_sequences(n - 1, m))\n\ndef get_total_number_of_sequences(n, m):\n    return get_total_number_of_sequences_recur(n, m, [0 for i in range(n + 1)], 0)\n\ndef get_total_number_of_sequences_recur(n, m, result, total):\n    if n == 1:\n        return m - total\n    if n == 2:\n        return m - 2 * total + total\n    result[n] = get_total_number_of_sequences_recur(n - 1, m, result, total)\n    result[n] += get_total_number_of_sequences_recur(n - 1, m - result[n], result, total)\n    return result[n]\n", "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n < 1:\n        return 0\n    if n < 2:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        if m == 1:\n            return 2\n        elif m == 2:\n            return 1\n        elif m == 3:\n            return 1\n        else:\n            return 0\n    if n == 4:\n        if m == 1:\n            return 4\n        elif m == 2:\n            return 3\n        elif m == 3:\n            return 2\n        elif m == 4:\n            return 1\n        else:\n            return 0\n    total_count = get_total_number_of_sequences(n-1, m) + get_total_number_of_sequences(n-2, m)\n    if m >= 2 * n - 1:\n        total_count += get_total_number_of_sequences(n-3, m)\n    return total_count\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list, new_list):\n    list.pop(-1)\n    list.append(new_list)\n    return list\n\n\nreplace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n\n\n# # Question 23\n#\n# Write a function that checks if all the elements of the list are prime or not.\n# assert all_prime([2, 3, 5, 7, 11])==False\n# assert all_prime([2, 3, 5, 7, 13])==True\n\ndef all_prime(list):\n    for n in list:\n        if not check_prime(n):\n            return False\n    return True\n\n\nall_prime([2, 3, 5, 7, 11])\n\nall_prime([2, 3, 5, 7, 13])\n\n\n# # Question 24\n#\n# Write a function to sum all the multiples of a given number.\n# assert sum_of_multiples(10, 3)==30\n# assert sum_of_multiples(10, 10)==0\n# assert sum_of_multiples(10, 50)==0\n\ndef sum_of_multiples(n,k):\n    sum=0\n    for i in range(0, n+1):\n        sum=sum+i*k\n    return sum\n\n\nsum_of_multiples(10,3)\n\n\n# # Question 25\n#\n# Write a function that takes a list and returns True if any number in the list is the sum of a triangular number.\n# assert triangular_list([1, 2, 3, 4, 5, 6, 7, 8])==True\n# assert triangular_list([5,", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, elements):\n    lst[len(lst) - 1] = elements\n    return lst\n\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\nfrom typing import List\ndef replace_list(old_list: List, new_list: List) -> List:\n    last_element = old_list[-1]\n    old_list[-1] = new_list\n    return old_list\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\nfrom typing import List\n\ndef replace_list(array:List[int], lst:List[int]) -> List[int]:\n    array[-1] = lst\n    return array\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(the_list,replacement):\n    \"\"\"\n    the_list: a list\n    replacement: another list\n    \"\"\"\n    if len(the_list) > 0:\n        if len(replacement) > 0:\n            the_list[-1] = replacement\n    return the_list\n\n# replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list, new_list):\n    list.pop()\n    list.append(new_list)\n    return list\n\n# test", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(a_list, replacement_list):\n    \"\"\"\n    Returns a new list containing the elements of a_list except for the last.\n    This new list is then appended with replacement_list.\n    \"\"\"\n    return a_list[:-1] + replacement_list\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list_to_modify, list_to_replace):\n    list_to_modify[len(list_to_modify)-1] = list_to_replace\n    return list_to_modify\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(my_list, replacement):\n    if len(my_list) == 1:\n        return [replacement[0]] + my_list[:-1]\n    else:\n        return my_list[:-1] + [replacement[0]] + my_list[-1]\n", "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(my_list, new_list):\n    my_list[-1] = new_list\n    return my_list\n\n#replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\n# Write your code here\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(x,y,z):\n    result = []\n    for i in range(x):\n        row = []\n        for j in range(y):\n            col = []\n            for k in range(z):\n                col.append('*')\n            row.append(col)\n        result.append(row)\n    return result\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\n#test case", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(n,m,o):\n    l=[[['*']*m]*n]*o\n    for i in range(n):\n        for j in range(m):\n            for k in range(o):\n                l[i][j][k]=str('*')\n    return l\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(x,y,z):\n    array=[]\n    for i in range(x):\n        array.append([])\n        for j in range(y):\n            array[i].append([])\n            for k in range(z):\n                array[i][j].append('*')\n    return array\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(a,b,c):\n    result = []\n    for i in range(a):\n        row = []\n        for j in range(b):\n            temp = []\n            for k in range(c):\n                temp.append(\"*\")\n            row.append(temp)\n        result.append(row)\n    return result\n\n# solution_2", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(a,b,c):\n    output = [[['*']] * b] * a\n    return output\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(height, width, depth):\n    return [[['*' for i in range(width)] for j in range(depth)] for k in range(height)]\n\n\narray_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\n\n# Q.5", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\nimport unittest\n\n\ndef array_3d(x, y, z):\n    return [[['*'] * x] * y] * z\n\n", "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(rows, cols, depth):\n    res = []\n    for i in range(depth):\n        res.append([[\"*\"]*cols for i in range(rows)])\n    return res\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    count=0\n    for i in str:\n        count=count+1\n    return count", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(str):\n  count = 0\n  for i in str:\n    count += 1\n  return count\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    \"\"\"\n    Count total characters in a string\n    \"\"\"\n    return len(string)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(text):\n    return len(text)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_characters(s):\n    return len(s)\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(str):\n    # your code goes here\n    total_charac = 0\n    for c in str:\n        total_charac = total_charac + len(c)\n    return total_charac\n\ndef test_count_charac():\n    assert count_charac(\"python programming\")==18", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    total_char = 0\n    for i in string:\n        total_char += 1\n    return total_char\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\nimport re\nimport string\n\ndef count_charac(str1):\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    return count\n\ndef count_charac_py(str1):\n    count = len(str1.replace(' ', '').replace(string.punctuation, \"\"))\n    return count\n\ndef count_charac_re(str1):\n    count = re.sub(r'[^\\w]', ' ', str1)\n    count = len(count.split())\n    return count\n\ndef count_charac_py_2(str1):\n    return len(str1.encode('utf-8').decode('utf-8').replace(' ', '').replace(string.punctuation, \"\"))\n", "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    total = 0\n    for i in range(len(string)):\n        total += len(string[i])\n    return total\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(list):\n    return sorted(list, key = lambda x: (x[0], x[1]))\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom functools import cmp_to_key\n\ndef sort_on_occurence(tuples):\n    tuples = [(count, value) for count, value in tuples]\n\n    tuples.sort(key=lambda x: cmp_to_key(count_compare(x[1]), x[0]))\n    return [x for x, _, _, _ in tuples]\n\ndef count_compare(value):\n    def compare(first, second):\n        if first == second:\n            return 0\n        else:\n            return -1 if first < second else 1\n\n    return lambda x: compare(x[0], value)", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef sort_on_occurence(ls: List[Tuple[int, str]]) -> List[Tuple[int, str]]:\n    ls = [(elem[0], elem[1]) for elem in ls]\n    ls.sort()\n    ls = [(elem[0], elem[1]) for elem in ls]\n\n    return ls\n\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(words):\n    tuples = [tuple(word) for word in words]\n    tuples.sort(key=lambda x:x[0])\n    # tuples = sorted(tuples, key=lambda x: x[0]) # another way of sorting\n    return tuples\n\ndef main():\n    print(sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]))\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n\n\ndef sort_on_occurence(tuples: List[tuple]) -> List[tuple]:\n    count_dict = defaultdict(int)\n    for _, name in tuples:\n        count_dict[name] += 1\n\n    return sorted(tuples, key=lambda x: (count_dict[x[1]], x[1], x[0], x[2]))", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(t):\n    # TODO: Implement me!\n    return sorted(t, key=lambda x: (x[0], x[1]))\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(items):\n    sorted_items = sorted(items, key=lambda x: x[0])\n    return [sorted_items.pop(0) for _ in range(len(sorted_items))]\n", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(elements):\n    elements.sort(key=lambda x:x[0])\n    return elements", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: x[0], reverse=True)", "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(items):\n    \"\"\"\n    Sort the given list based on the occurrence of first element of tuples.\n    \"\"\"\n    counts = {}\n    for item in items:\n        if item[0] in counts:\n            counts[item[0]] += 1\n        else:\n            counts[item[0]] = 1\n    print(counts)\n    result = []\n    for item in items:\n        result.append([item[0], item[1], item[2], counts[item[0]]])\n    return result\n\n#if __name__ == \"__main__\":\n#    print(sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]))"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(x):\n    sqrt_x = math.sqrt(x)\n    if int(sqrt_x) ** 2 == x:\n        return int(sqrt_x) ** 2\n    else:\n        return int(sqrt_x + 1) ** 2\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n# Method 1:\ndef next_Perfect_Square(n):\n    for i in range(n, 0, -1):\n        if i**2 == n:\n            return i\n    else:\n        return n+1\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\nfrom math import sqrt\n\n\ndef next_Perfect_Square(x):\n    s = sqrt(x)\n    return int(s + 1) ** 2\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    i = n\n\n    while True:\n        i += 1\n        if i**2 > n:\n            return i\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\nfrom math import sqrt\n\ndef next_Perfect_Square(num):\n    x = sqrt(num)\n    y = int(x + 0.5)\n    if x == y:\n        return x * x\n    return y * y\n\ndef test_next_Perfect_Square():\n    assert next_Perfect_Square(35) == 36\n\ntest_next_Perfect_Square()", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    n = num + 1\n    while n ** 2 <= num + 1:\n        n += 1\n    return n - 1\n\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\nfrom math import sqrt\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    Returns the next perfect square greater than a given number.\n    >>> next_Perfect_Square(35)\n    36\n    >>> next_Perfect_Square(10)\n    14\n    >>> next_Perfect_Square(9)\n    10\n    >>> next_Perfect_Square(1)\n    1\n    >>> next_Perfect_Square(0)\n    0\n    >>> next_Perfect_Square(-1)\n    Traceback (most recent call last):\n      File \"test_next_perfect_square.py\", line 3, in <module>\n        next_Perfect_Square(-1)\n    ValueError: The input must be a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    else:\n        return int(sqrt(n) + 1) ** 2", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(num):\n    if num > 2:\n        x = num\n        y = x + 1\n        while y <= x:\n            z = y * y\n            if z == x + 1:\n                return z\n            y = y + 1\n    else:\n        return 4\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    return ((n*n) + 1)**0.5\n", "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    while n*n <= n:\n        n += 1\n    return n*n\n\n# Testing"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom typing import List, Tuple\n\ndef max_sum(A: List[int], k: int) -> int:\n    A.sort()\n    n = len(A)\n    ans = 0\n    for i in range(k):\n        ans += A[i]\n    for i in range(k, n):\n        ans = max(ans, A[i] + ans)\n    return ans\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    # Base cases:\n    # 1. array is empty:\n    # 2. array has only one element:\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr)\n\n    # Create an array of size n-2 for the left side\n    # Use sum(arr[i:j]) to get the sub-array sum\n    left_side = [sum(arr[i:j+1]) for i in range(n-2) for j in range(i+1, n-1)]\n\n    # Create an array of size n-2 for the right side\n    # Use sum(arr[j:i]) to get the sub-array sum\n    right_side = [sum(arr[j:i+1]) for i in range(n-2) for j in range(i+1, n-1)]\n\n    # Create the final max value\n    return max(left_side + right_side)\n\n# Main\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nn = len(arr)", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom typing import List\n\ndef max_sum(arr: List[int], k: int) -> int:\n    pass\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(array, size):\n    #Create a hash map\n    a = {}\n    \n    # Initialize max_sum as the first element of the array\n    max_sum = array[0]\n    \n    # Find the maximum sum subarray with this element\n    for i in range(1, size):\n        # If element is negative, then we must remove\n        # the previous element from the hash map\n        if array[i] < 0:\n            a.pop(array[i-1], None)\n        else:\n            # Otherwise, we add current element to the hash map\n            # and check if this addition gives us new max_sum\n            if array[i] not in a:\n                a[array[i]] = array[i]\n            else:\n                max_sum = max(max_sum, a[array[i]] + array[i])\n                \n    # Return the maximum sum from the hash map\n    return max_sum\n\n# Driver program", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    a = [1 for i in range(n)]\n    res = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            elif j - i == 1:\n                a[j] = max(a[j], a[i] + arr[j])\n            elif j - i > 1:\n                a[j] = max(a[j], a[i] + a[j - 1])\n        res = max(res, a[n - 1])\n\n    return res\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nimport sys\n\n\ndef max_sum(arr, n):\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] > ans:\n                ans = arr[i] + arr[j]\n    return ans\n\n\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    return get_max_sub_sum(arr, 0, n, [0 for _ in range(n)])\n\ndef get_max_sub_sum(arr, start, end, sub_arr):\n    if start >= end:\n        return sub_arr[start]\n\n    sum1 = get_max_sub_sum(arr, start, end, sub_arr)\n    sum2 = get_max_sub_sum(arr, start, end, sub_arr)\n    return max(sum1, sum2) + arr[start] + arr[end]\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, num):\n    arr = [int(i) for i in arr]\n    arr.sort()\n    dp = [[0 for i in range(num)] for j in range(num)]\n    for i in range(num):\n        for j in range(num):\n            if j == 0:\n                dp[i][j] = arr[i]\n            elif i == j:\n                dp[i][j] = arr[i]\n            elif arr[i] <= arr[j]:\n                dp[i][j] = dp[i-1][j-1] + arr[i]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[num-1][num-1]\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, length):\n    max_sum = 0\n    for i in range(0, length):\n        for j in range(i + 1, length):\n            sub_sum = arr[i] + arr[j]\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nimport math\n\n\ndef max_sum(arr, n):\n    min_val = min(arr)\n    max_val = max(arr)\n    min_idx = arr.index(min_val)\n    max_idx = arr.index(max_val)\n\n    if min_idx > max_idx:\n        # print(\"swap\")\n        min_idx, max_idx = max_idx, min_idx\n\n    k = arr.index(max_val)\n    return sum(arr[min_idx:k+1]) + sum(arr[k+1:max_idx+1])\n\n"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nfrom math import sqrt\n\n\ndef babylonian_squareroot(x):\n    approx = 1\n    i = 0\n    while approx != 0:\n        approx = (approx + x / approx) / 2\n        i += 1\n        if i > 1000:\n            raise Exception(\"The number \" + str(x) + \" is not a square.\")\n    return approx\n\n\n# if __name__ == '__main__':\n#     assert babylonian_squareroot(10) == 3.162277660168379", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nfrom typing import List\nfrom random import randint\nfrom math import ceil\n\n\ndef babylonian_squareroot(number: int) -> float:\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initial guess for the square root\n    guess = ceil(number ** 0.5)\n\n    while True:\n        # calculate the next guess\n        guess = ceil((guess + number/guess) / 2)\n\n        # check the accuracy\n        if guess == number ** 0.5:\n            break\n\n    return guess\n\n\ndef babylonian_squareroot_using_random(number: int) -> float:\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initial guess for the square root\n    guess = ceil(number ** 0.5)\n\n    while True:\n        # calculate the next guess\n        guess = ceil((guess + number/guess) / 2)\n\n        # check the accuracy\n        if guess == number ** 0.5:\n            break\n\n    return guess\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(number):\n    # start with an initial approximation\n    initial_approximation = 1\n    # set maximum number of iterations\n    max_iteration = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(num):\n    x = 0\n    while True:\n        if num*num > x*x:\n            x = (x + num/x)/2\n        else:\n            break\n    return x\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Compute square root of x using the Babylonian method.\n    \"\"\"\n    if x < 0:\n        return None\n    if x == 0:\n        return 0\n    guess = 1\n    while True:\n        guess = (guess + x/guess)/2\n        if abs(guess**2 - x) < 10**-6:\n            break\n    return guess\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n    guess = 1\n    while guess**2 < n:\n        guess = (guess + n/guess)/2\n    return guess\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(n):\n    \"\"\"\n    This function will compute the square root of a number, n, using the Babylonian method.\n    The function returns the result rounded to 4 decimal places.\n    \"\"\"\n    # Take the average of the high and low number provided as arguments.\n    middle = (n + 1) / 2\n    # This number will be the value for the new iteration.\n    current_value = 1\n    # The iterations will be terminated when the difference between the previous\n    # value and the current one is less than 0.000001 (1/10,000,000) or 0.000000000001 (1/10,000,000,000).\n    while abs(middle - current_value) >= 0.000000000001:\n        # This will be the new value to try next time.\n        current_value = (current_value + middle) / 2\n        # This will be the new high value.\n        middle = (middle + current_value) / 2\n    return round(current_value, 4)\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n    \"\"\"\n    Takes a positive number as input.\n    The babylonian method returns the square root of a positive number.\n    \"\"\"\n    x_prev = n\n    x_curr = x_prev/2\n    x_diff = x_curr - x_prev\n    while x_diff>1e-10:\n        x_prev = x_curr\n        x_curr = (x_prev + n/x_prev)/2\n        x_diff = x_curr - x_prev\n    return x_curr\n\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    def get_sqrt(current_guess, error_term, x):\n        return (current_guess + (error_term / (2*current_guess)))\n\n    current_guess = 1\n    error_term = x / 2\n    new_error = abs(error_term - current_guess)\n    while new_error >= error_term:\n        current_guess = get_sqrt(current_guess, error_term, x)\n        error_term = new_error\n        new_error = abs(error_term - current_guess)\n    return current_guess\n", "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nfrom math import sqrt\n\ndef babylonian_squareroot(number):\n    limit = int(sqrt(number))\n    guess = number/2\n    while abs(guess**2-number)>0.000001:\n        guess = (number/guess + guess)/2\n    return guess\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    table = [[False for _ in range(len(s))] for _ in range(len(s))]\n    max_length = 0\n    index = 0\n    for i in range(1, len(s)):\n        for j in range(0, i):\n            if s[i] == s[j] and i - j < 3:\n                table[i][j] = True\n            elif s[i] == s[j] and i - j > 2 and table[j + 1][j] == True:\n                table[i][j] = True\n            else:\n                table[i][j] = False\n                continue\n        if table[i][i] == True and i > max_length:\n            index = i\n            max_length = i\n    return index, max_length\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    lps = [[0 for i in range(len(s))] for j in range(len(s))]\n    for i in range(len(s)):\n        for j in range(0,i):\n            if s[i] == s[j] and (i-j<=2 or lps[i-1][j+1]==lps[i-1][j]+1):\n                lps[i][j] = lps[i-1][j]+1\n    return lps[len(s)-1][0]", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\nfrom collections import defaultdict", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(string):\n    length = len(string)\n    palindrome_sequence = [[0 for i in range(length)] for i in range(length)]\n    for i in range(length):\n        palindrome_sequence[i][i] = 1\n        if string[i].isalpha():\n            palindrome_sequence[i][i] = 2\n    for i in range(length - 1, -1, -1):\n        for j in range(i + 1, length):\n            if string[i] == string[j]:\n                if i - 1 == j + 1:\n                    palindrome_sequence[i][j] = 2\n                elif i - 1 == j:\n                    palindrome_sequence[i][j] = 1\n                elif i == j:\n                    palindrome_sequence[i][j] = 2\n                elif j - 1 == i:\n                    palindrome_sequence[i][j] = 1\n                else:\n                    palindrome_sequence[i][j] = max(palindrome_sequence[i + 1][j], palindrome_sequence[i][j - 1]) + 2\n    print(palindrome_sequence)\n    return palindrome_sequence[0][length - 1]\n\n\nlps(\"TENS FOR TENS\")", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(str):\n    pass\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(str):\n    if len(str) < 2:\n        return len(str)\n\n    n = len(str)\n\n    # Create an n x n table to store LPS values\n    lps_table = [[0 for i in range(n)] for j in range(n)]\n    max_lps = 0\n\n    # Fill first row and first column of lps table\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # Fill lps table in bottom up manner\n    for l in range(2, n):\n        for i in range(0, n - l + 1):\n            j = i + l - 1\n\n            if str[i] == str[j] and lps_table[i+1][j-1] != 0:\n                lps_table[i][j] = 2 * lps_table[i+1][j-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n\n            if lps_table[i][j] > max_lps:\n                max_lps = lps_table[i][j]\n\n    return max_lps\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\n# Solution\n# from https://leetcode.com/problems/longest-palindromic-subsequence/discuss/5672/My-Simple-Solution-with-O(n)-Space\n\ndef lps(s):\n    # find the longest palindromic subsequence\n    # s = 'TENS FOR TENS'\n    # 01234567890123456789\n    dp = [0] * (len(s)+1)\n    ans = 0\n    for i in range(1, len(s)+1):\n        for j in range(i-1):\n            if s[j] == s[i] and (i-j < 3 or dp[i-j-1] > dp[i]):\n                dp[i] = dp[i-j-1] + 2\n                ans = max(ans, dp[i])\n\n    return ans\n\n\n# Tests", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n  if len(s) == 1:\n    return 1\n\n  if len(s) == 2:\n    if s[0] == s[1]:\n      return 2\n    else:\n      return 1\n\n  dp = [[0 for x in range(len(s))] for x in range(len(s))]\n\n  dp[0][0] = 1\n\n  for i in range(1,len(s)):\n    dp[i][0] = 1\n\n  for j in range(1,len(s)):\n    for i in range(1,len(s)):\n\n      if s[j] == s[i]:\n        dp[i][j] = 2 + dp[i+1][j-1]\n      else:\n        dp[i][j] = max(dp[i+1][j],dp[i][j-1])\n\n  return dp[0][len(s)-1]\n", "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(string):\n    pass\n\n# write your test cases here"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\nfrom typing import Union\n\n\ndef harmonic_sum(n: Union[int, float]) -> Union[int, float]:\n    \"\"\"Calculate the harmonic sum of n.\n\n    :param n: The number to be summed.\n    :return: The harmonic sum of n.\n    \"\"\"\n    result = 0.0\n    for i in range(1, n + 1):\n        result += 1 / i\n    return result\n\n\ndef test_harmonic_sum():\n    \"\"\"Tests for the harmonic_sum function.\"\"\"\n    assert harmonic_sum(7) == 2.5928571428571425\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nimport math\n\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    return 1 / (1 + harmonic_sum(n - 1))\n\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    if n == 1:\n        return 1.0\n    elif n == 2:\n        return 1.0 + 1.0/2.0\n    elif n == 3:\n        return 1.0 + 1.0/2.0 + 1.0/3.0\n    else:\n        return 1.0 + 1.0/2.0 + 1.0/3.0 + 1.0/4.0 + sum([1.0/x for x in range(5,n+1)])\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\n# Solution \n\ndef harmonic_sum(n):\n    return (1+1/2+1/3+...+1/n)\n\n# Test cases", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return 1/2 + 2/3 + 3/4 + 4/5 + 5/6 + 6/7 + 7/8 + 8/9 + 9/10 + 10/11 + 11/12 + 12/13 + 13/14 + 14/15 + 15/16 + 16/17 + 17/18 + 18/19 + 19/20 + 20/21 + 21/22 + 22/23 + 23/24 + 24/25 + 25/26 + 26/27 + 27/28 + 28/29 + 29/30 + 30/31 + 31/32 + 32/33 + 33/34 + 34/35 + 35/36 + 36/37 + 37/38 + 38/39 + 39/40 + 40/41 + 41/42 + 42/43 + 43/44 + 44/45 + 45/46 + 46/47 + 47/48 + 48/49 + 49/50 + 50/51 + 51/52 + 52/53 + 53/54 + 54/55 + 55/56 + 56/57 + 57/58 + 58/59 + 59/60 + 60/61 + 61/62 + 62/63 + 63/64 + 64/65 + 65/66 + 66/67 + 67/68 + ", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\nimport math\n\ndef harmonic_sum(n):\n    total = 0\n    for i in range(1, n):\n        total += 1.0 / i\n\n    return total\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (1/n) + harmonic_sum(n-1)\n\n# Print the output", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return 0.5 * n * (n + 1)\n", "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    return sum([1 / i for i in range(1, n+1)])"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\nimport pytest\n\ndef intersection_array(first, second):\n    return list(set(map(lambda x: x, first)) & set(map(lambda x: x, second)))\n\ndef test_intersection_array():\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(a1, a2):\n    set1 = set(a1)\n    set2 = set(a2)\n    common = set1.intersection(set2)\n    return list(common)\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    # Your code here\n    # Create a set from the first array. \n    set1 = set(arr1)\n    \n    # Create a set from the second array.\n    set2 = set(arr2)\n    \n    # If the set intersection is not empty, it means that the intersection of the array is not empty.\n    return set1.intersection(set2)\n\n# Test cases", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    list_intersection = list(set(arr1).intersection(set(arr2)))\n    return list_intersection", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1,arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(l1, l2):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return list(set(l1)&set(l2))\n\ndef intersection_array_simple(l1, l2):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return list(set(l1).intersection(set(l2)))\n\ndef intersection_array_map(l1, l2):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return list(map(lambda x: x if x in l2 else None, l1))\n\ndef intersection_array_reduce(l1, l2):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return list(reduce(lambda x, y: x if x in l2 else None, l1))\n\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(array1, array2):\n    result = list(set(array1) & set(array2))\n    return result\n\narray1 = [1, 2, 3, 5, 7, 8, 9, 10]\narray2 = [1, 2, 4, 8, 9]\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(list1,list2):\n    return list(set(list1).intersection(list2))\n", "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tuple, x):\n    count = 0\n    for i in tuple:\n        if i == x:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(l,x):\n    return l.count(x)\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(elements, value):\n    result = 0\n    for i in elements:\n        if i == value:\n            result += 1\n    return result\n\ndef count_X_2(elements, value):\n    return elements.count(value)\n\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(t, x):\n    # write your code here\n    return 0\n    ", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(lst,x):\n    #if any element in the list matches x, return the count of it.\n    #if not, return 0.\n    #if the list is empty, return 0.\n    return 0\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(lst,element):\n    if element in lst:\n        return lst.count(element)\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup,x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup,x):\n    c = 0\n    for y in tup:\n        if x == y:\n            c +=1\n    return c\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tuple_list, X):\n    return tuple_list.count(X)\n\n", "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(input_list, X):\n    count = 0\n    for i in input_list:\n        if i == X:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list_of_elements, element_to_insert):\n    \"\"\"\n    This function takes 2 arguments. The first argument is a list of elements, and the second is the element to insert.\n    The function should return a list with the element to insert before each element in the input list.\n    \"\"\"\n    output_list = list()\n    for element in list_of_elements:\n        output_list.append(element_to_insert)\n        output_list.append(element)\n        \n    return output_list\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(list, element):\n    pass", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, item):\n    lst2 = []\n    for i in lst:\n        lst2.append(item)\n        lst2.append(i)\n    return lst2\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(a_list,new_element):\n    a_list.insert(0,new_element)\n    return a_list", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, elem):\n    return [elem]+lst\n\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(l, element):\n    return [element] + [item for item in l]\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(arr, ele):\n    return [ele] + arr\n\n#assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\n#assert insert_element(['One', 'Two', 'Three', 'Four'] ,'Five')==['Five', 'One', 'Five', 'Two', 'Five', 'Three', 'Five', 'Four']\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(l, item):\n    for i in range(len(l)):\n        l.insert(i, item)\n    return l\n", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(arr,element):\n    newarr=[]\n    for i in range(len(arr)):\n        newarr.append(element)\n        newarr.append(arr[i])\n    return newarr", "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(input_list,element):\n    output_list = []\n    for index,item in enumerate(input_list):\n        output_list.append(element)\n        output_list.append(item)\n    return output_list"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    return z.real, z.imag\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nfrom typing import Tuple\n\n\ndef convert(number: complex) -> Tuple[float, float]:\n    angle = number.real\n    radius = number.imag\n\n    return angle, radius\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(n):\n    \"\"\"convert complex number to polar coordinate\"\"\"\n    radius = n.real\n    angle = n.imag\n\n    return (radius, angle)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nfrom math import cos, sin, pi\n\n\ndef convert(num):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    :param num: complex number\n    :return: (r, theta)\n    \"\"\"\n    r = num.real\n    theta = num.imag\n    theta = theta if theta >= 0 else theta + 2 * pi\n    return (r, theta)\n\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n# 1. write a function with two parameters: \ndef convert(real, imaginary):\n    import math\n    mod = math.sqrt(real*real + imaginary*imaginary)\n    phase = math.atan2(imaginary, real)\n    return (mod, phase)\n\n# 2. call it with the given parameters to test your function", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    return z.real, z.imag\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    # COMPLETE THE CODE\n    angle = z.real\n    #print(angle)\n    modulus = z.imag\n    #print(modulus)\n    return(angle,modulus)\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    if z == 0:\n        return 0, 0\n    else:\n        return z.real, z.imag\n", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(z):\n    \"\"\"\n    return z in polar coordinates\n    \"\"\"\n    return (np.abs(z), np.angle(z))\n    ", "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(c):\n    a = c.real\n    b = c.imag\n    return (abs(c),math.atan2(b,a))\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(L):\n    count = 0\n    for i in L:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n#assert count_integer([1,2,'abc',1.2]) == 2", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(numbers):\n    count = 0\n    for n in numbers:\n        if isinstance(n, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list):\n    cnt = 0\n    for i in list:\n        if isinstance(i, int):\n            cnt += 1\n    return cnt\n\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(a):\n    count = 0\n    for i in a:\n        if type(i) == int:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list):\n    count=0\n    for item in list:\n        if type(item)==int:\n            count=count+1\n    return count\n\ndef count_integer(list):\n    count=0\n    for item in list:\n        if type(item)==int:\n            count+=1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(x):\n    count = 0\n    for i in x:\n        if isinstance(i, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(li):\n    count = 0\n    for x in li:\n        if isinstance(x, int):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(list):\n    count = 0\n    for item in list:\n        if type(item) == int:\n            count += 1\n    return count\n\ndef test_count_integer():\n    assert count_integer([1,2,'abc',1.2]) == 2\n\ndef test_count_integer_return_type():\n    assert type(count_integer([1,2,'abc',1.2])) == int\n\ndef test_count_integer_return_value():\n    assert count_integer([1,2,'abc',1.2]) == 2\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(arr):\n    num_integers = 0\n    for element in arr:\n        if isinstance(element, int):\n            num_integers += 1\n    return num_integers\n", "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(a):\n    # write your code here\n    count=0\n    for i in range(len(a)):\n        if isinstance(a[i],int):\n            count +=1\n    return count\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(text):\n    #your code here\n    return []\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    res = []\n    for word in string.split():\n        if word[0] in ['a', 'e']:\n            res.append(word)\n    return res\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(str):\n    list = []\n    for i in str:\n        if i == 'a' or i == 'e':\n            list.append(i)\n    return list\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\nimport pytest\n\nfrom typing import List\n\n\ndef words_ae(s: str) -> List[str]:\n    \"\"\"\n    >>> words_ae(\"python programe\")\n    ['ame']\n    >>> words_ae(\"python program\")\n    ['ame', 'ang']\n    \"\"\"\n    result = []\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e':\n            result.append(s[i:])\n    return result", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\nimport re\n\ndef words_ae(text):\n    \"\"\"\n    This function receives a string and returns a list of words that start with 'a' or 'e'.\n\n    Arguments:\n    text -- the text to be searched\n\n    Returns:\n    list of words that start with 'a' or 'e'\n    \"\"\"\n    # Write your code here\n    words = re.findall(r'\\b[ae]\\w*', text.lower())\n    return words\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    return [word for word in s.split(' ') if word[0] in ('a', 'e')]\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n  if len(string) == 0:\n    return\n  if string[0] == \"a\":\n    print string[0]\n  if string[0] == \"e\":\n    print string[0]\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(s):\n    words = []\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e':\n            if s[i] == 'a':\n                begin = 0\n            elif s[i] == 'e':\n                begin = 1\n            else:\n                begin = 0\n            tmp = s[begin:i]\n            if tmp not in words:\n                words.append(tmp)\n    return words\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    a = []\n    b = []\n    for i in s:\n        if i == 'a' or i == 'e':\n            a.append(i)\n        else:\n            b.append(i)\n    a.sort()\n    b.sort()\n    return a+b\n\n", "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    a_word = []\n    for word in string.split():\n        if word[0] in ['a', 'e']:\n            a_word.append(word)\n    return a_word\n\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,n):\n    res=[]\n    for i in range(len(colors)):\n        for j in range(i+1,len(colors)):\n            res.append((colors[i],colors[j]))\n    for i in range(len(res)):\n        for j in range(i+1,len(res)):\n            if(res[i][0]==res[j][0] or res[i][1]==res[j][1]):\n                res.pop(j)\n    return res\n\ndef combinations_colors_no_repeats(colors,n):\n    res=[]\n    for i in range(len(colors)):\n        for j in range(i+1,len(colors)):\n            res.append((colors[i],colors[j]))\n    return res\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,n):\n    \"\"\"\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    True\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n    True\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green'), ('Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue')]\n    True\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],4)==[('Red', 'Red', 'Red', 'Red'), ('Red', 'Red', 'Red', 'Green'), ('Red', 'Red', 'Red', 'Blue'), ('Red', 'Red', 'Green', 'Red'), ('Red', 'Red', 'Green', 'Green'), ('Red', 'Red", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors,n):\n    return [c for c in itertools.combinations(colors,n)]\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    \n    ans = list(itertools.combinations(colors, n))\n    ans.extend([list(x) for x in itertools.combinations(colors, n)])\n    return ans\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors( colors, k):\n    \"\"\"\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)\n    [('Red',), ('Green',), ('Blue',)]\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)\n    [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green'), ('Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue')]\n    \"\"\"\n    combinations = set()\n    comb = combinations\n    for i in range(len(colors)):\n        for j in range(i+1, len(colors)):\n            for k in range(j+1, len(colors)):\n                if k==i or k==j or k==i:\n                    pass\n                else:\n                    comb.add((colors[i], colors[j], colors[", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors,number):\n    #total_combinations = math.factorial(len(colors))\n    total_combinations = 1\n    for i in range(number):\n        total_combinations *= math.factorial(len(colors))\n    print(\"total combinations are:\",total_combinations)\n    # Now we are going to find all the combinations and print them\n\n    color_choices = []\n\n    def get_combinations(i,color_choices,colors,number):\n        # if i is total_combinations then print all the combinations\n        if i==total_combinations:\n            print(color_choices)\n            return\n        for color in colors:\n            color_choices.append(color)\n            get_combinations(i+1,color_choices,colors,number)\n            color_choices.pop()\n            # Break out of loop if we have generated the required number of choices\n            if len(color_choices) == number:\n                return\n\n\n    get_combinations(0,color_choices,colors,number)\n\n#print(combinations_colors([\"Red\",\"Green\",\"Blue\"],2))\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colormap, n):\n  if n==0:\n    return []\n  colormap = set(colormap)\n  return [element+(subcolormap,) for element in combinations_colors(colormap - set(element), n - 1) for subcolormap in combinations_colors(colormap, 1)]", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(color_list,n):\n    color_list=color_list.copy()\n    return combinations(color_list,n)", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nimport itertools\ndef combinations_colors( colors, num ):\n    colors_combinations = itertools.combinations_with_replacement( colors, num )\n    return list( colors_combinations )\n", "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, N):\n    color_combinations = []\n    if N <= 0:\n        return color_combinations\n    elif N == 1:\n        return list(combinations(colors,N))\n    else:\n        for color in colors:\n            color_combinations.append((color,)+ combinations_colors(colors[:colors.index(color)]+colors[colors.index(color)+1:],N-1))\n    return color_combinations\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(num):\n    count = 0\n    for i in range(2,num):\n        flag = 0\n        for j in range(2,int(i/2)+1):\n            if i % j == 0:\n                flag = 1\n                break\n        if flag == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(x):\n    count = 0\n    for i in range(x):\n        if is_Prime(i+1):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2,n+1):\n        if(is_prime_num(i)):\n            count += 1\n    return count\n\ndef is_prime_num(n):\n    if(n == 2):\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if(n%i == 0):\n            return False\n    return True\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# this function will check if a number is prime or not\ndef is_prime(num):\n    # check if the number is zero, because it is not prime\n    if num == 0:\n        return False\n\n    for i in range(1, int(num/2) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\n# this function will count the number of prime numbers\ndef count_Primes_nums(num):\n    primes = 0\n\n    for i in range(1, num + 1):\n        if is_prime(i):\n            primes += 1\n\n    return primes\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    prime_nums = 0\n    for i in range(1, n + 1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                prime_nums += 1\n    return prime_nums", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    prime_list = [2]\n    for i in range(3,n+1,2):\n        is_prime = True\n        for j in prime_list:\n            if i%j == 0:\n                is_prime = False\n        if is_prime:\n            prime_list.append(i)\n    return len(prime_list)\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(n):\n        if isPrime(i):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(n):\n        if isPrime(i + 1):\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\nimport math\n\ndef count_Primes_nums(num):\n    if num<2:\n        return 0\n    else:\n        return count_Primes(num)\n\ndef count_Primes(num):\n    prime_count = 0\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i == 0:\n            prime_count += 1\n            num = num/i\n        else:\n            continue\n    return prime_count+1\n", "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(num):\n    count = 0\n    for i in range(2,num):\n        if isPrime(i):\n            count = count + 1\n    return count\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    temp=x\n    x=y\n    y=temp\n    return (x,y)\n\nswap_numbers(10,20)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x,y):\n    temp = x\n    x = y\n    y = temp\n    return (x,y)\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1,num2):\n    num1,num2 = num2,num1\n    return num1,num2\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    a=a\n    b=b\n    return b,a\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    return b,a\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    if a>b:\n        a,b=b,a\n    return b,a\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(num1, num2):\n    num3 = num1\n    num1 = num2\n    num2 = num3\n    return num1, num2\n\n# Test:", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a, b):\n  a, b = b, a\n  return a, b\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a,b\n", "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\nfrom typing import Tuple\n\ndef swap_numbers(x: int, y: int) -> Tuple[int,int]:\n    \"\"\"\n    Swap values of two numbers.\n    \"\"\"\n    temp = x\n    x = y\n    y = temp\n    return x, y\n\n\ndef test_swap_numbers():\n    x, y = swap_numbers(10, 20)\n    assert x == 20 and y == 10\n\n\ndef test_swap_numbers_empty():\n    assert swap_numbers() is None\n\n\ndef test_swap_numbers_bad():\n    assert swap_numbers(2) is None\n\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(arr):\n    return len(list(filter(lambda x: x%2 != 0,arr)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(nums):\n    return len(list(filter(lambda x: x % 2 != 0, nums)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\nfrom functools import reduce\n\n\ndef count_odd(numbers):\n    return reduce(lambda acc, n: acc + (n % 2), numbers, 0)\n\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n# solution\ndef count_odd(nums):\n    return len([num for num in nums if num % 2 != 0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(nums):\n    return len([i for i in nums if i%2!=0])\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(nums):\n    count = 0\n    for num in nums:\n        if num % 2:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(nums):\n    return len(list(filter(lambda x: x % 2 != 0, nums)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n#lambda function to count number of odd elements in the given list\ndef count_odd(nums):\n    return len([i for i in nums if i%2 != 0])", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))\n", "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(nums):\n    return len([x for x in nums if x % 2 == 1])\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(list1, list2):\n    \"\"\"\n    Given two tuples of the same length, find and return the index of the maximal element from each tuple.\n    \"\"\"\n\n    list3 = []\n    for i in range(len(list1)):\n        list3.append((list1[i][0], list2[i][1]))\n    list4 = list3[0]\n    for i in range(1, len(list3)):\n        if list3[i][0] > list4[0] or (list3[i][0] == list4[0] and list3[i][1] > list4[1]):\n            list4 = list3[i]\n    list5 = []\n    for i in range(len(list4)):\n        if list4[i] == list1[i][0]:\n            list5.append(list1[i])\n        elif list4[i] == list2[i][1]:\n            list5.append(list2[i])\n    return tuple(list5)", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(t1, t2):\n    \"\"\"\n    :type t1: tuple\n    :type t2: tuple\n    :rtype: tuple\n    \"\"\"\n    i = 0\n    result = []\n    while i < len(t1) and i < len(t2):\n        if t1[i] > t2[i]:\n            result.append(t2[i])\n            i += 1\n        elif t1[i] < t2[i]:\n            result.append(t1[i])\n            i += 1\n        else:\n            result.append(t1[i])\n            i += 1\n    if i < len(t1):\n        result.extend(t1[i:])\n    else:\n        result.extend(t2[i:])\n    return tuple(result)", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(a, b):\n    return tuple(max(elem) for elem in zip(a, b))\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(t1, t2):\n    if len(t1) == 0 or len(t2) == 0:\n        return []\n    elif len(t1) > len(t2):\n        return maximize_elements(t1[:-1], t2)\n    elif len(t1) < len(t2):\n        return maximize_elements(t1, t2[:-1])\n    else:\n        x1, y1 = t1[0]\n        x2, y2 = t2[0]\n        if x1 < x2:\n            return (x1, y1) + maximize_elements(t1[1:], t2[1:])\n        else:\n            return (x2, y2) + maximize_elements(t1[1:], t2[1:])\n\nt1 = (1, 3)\nt2 = (4, 5)\nt3 = (2, 9)\nt4 = (1, 10)\n\nt5 = (6, 7)\nt6 = (3, 9)\nt7 = (1, 1)\nt8 = (7, 3)\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(list1, list2):\n    \"\"\"Returns a tuple of the max elements in each tuple of the lists.\n       Example:\n       >>> maximize_elements((2, 9), (1, 10))\n       (2, 9)\n       >>> maximize_elements((2, 2), (3, 4))\n       (2, 4)\n       >>> maximize_elements((2, 4), (3, 4))\n       (2, 4)\n       >>> maximize_elements((3, 4), (2, 4))\n       (3, 4)\n    \"\"\"\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    for index, element in enumerate(list1):\n        if element > list2[index]:\n            list1[index] = list2[index]\n    return tuple(list1)\n\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples1, tuples2):\n    if len(tuples1) < len(tuples2):\n        tuples1, tuples2 = tuples2, tuples1\n    max_tuple_index = len(tuples1) - 1\n    for i in range(max_tuple_index):\n        if tuples1[i][0] > tuples2[i][0]:\n            tuples1[i] = tuples2[i]\n    return tuples1", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples1, tuples2):\n    return tuples1[0] if tuples1[0][1] > tuples2[0][1] else tuples2[0]\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(elements1, elements2):\n    pass\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuple_1, tuple_2):\n    pass\n", "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples1, tuples2):\n    if tuples1[0][0] > tuples2[0][0]:\n        return tuples1\n    else:\n        return tuples2\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n#solution\n\nfrom eulerlib import *\n\ndef newman_prime(n):\n    r = 1\n    while True:\n        if is_newman_shanks_williams(r):\n            r += 1\n        if r == n:\n            return r", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    # 2 is the first newman\u2013shanks\u2013williams prime\n    prime = 2\n    # newman\u2013shanks\u2013williams prime is of the form 2^(2^k-1)\n    while True:\n        if is_newman_prime(prime):\n            if n == 1:\n                return prime\n            n -= 1\n        prime += 1\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    while len(primes) < n:\n        if is_newman_prime(primes[-1]):\n            primes.append(primes[-1]+2)\n        else:\n            primes.append(primes[-1]+1)\n    return primes[-1]\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\nfrom euler.primes import is_prime\n\ndef newman_prime(n):\n    def divisible_primes(p):\n        return all(x % p != 0 for x in (2, 3, 5, 7))\n    a = 1\n    b = 2\n    d = 4\n    count = 0\n    while count < n:\n        count += 1\n        p = a + b + d\n        if is_prime(p) and divisible_primes(p):\n            return p\n        if p % 2 == 0:\n            b += d\n        else:\n            a += d\n        d += 2\n    return None\n\ndef main():\n    print(newman_prime(10))\n    print(newman_prime(100))\n    print(newman_prime(1000))\n    print(newman_prime(10000))\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\nfrom src.primes import prime\nfrom src.primes import prime_numbers_upto\n\n\ndef newman_prime(n: int) -> int:\n    if n == 0:\n        return None\n    p = prime(2)\n    p_list = prime_numbers_upto(p)\n    p_list.append(p)\n    c_p_list = []\n    c_p_list.append(2)\n    p_list = set(p_list)\n    c_p_list = set(c_p_list)\n    count = 1\n    while count < n:\n        p = p + 1\n        p_list.add(p)\n        c_p_list.append(p)\n        if p == 3:\n            c_p_list.append(5)\n            c_p_list.append(7)\n        count = len(p_list)\n    for i in range(1, n):\n        for j in range(1, len(p_list)):\n            if p_list[j] not in c_p_list:\n                p = p_list[j]\n                for k in range(2, p):\n                    if (p - k) in p_list and (p + k) in p_list and (p - 2 * k) in p_list:\n                        return p\n\n\n# print(newman_prime(3))", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nimport unittest\n\ndef newman_prime(n):\n    return \n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    >>> newman_prime(1)\n    3\n    >>> newman_prime(2)\n    11\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(4)\n    13\n    >>> newman_prime(5)\n    73\n    \"\"\"\n    base = 4\n    a = 2\n    b = 3\n    i = 1\n    while True:\n        yield base\n        if i == n:\n            return\n        if a % 2 == 1:\n            b, a = a, base\n            base = a + b\n            base = base ^ 3\n            base = base ^ 5\n        else:\n            b, a = a, base\n            base = a + b\n            base = base ^ 3\n            base = base ^ 5\n            base = base ^ 7\n        i += 1\n\ndef test():\n    assert newman_prime(3) == 7\n    assert newman_prime(4) == 13\n    assert newman_prime(5) == 73\n\ndef run():\n    test()\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    \"\"\"\n    # TODO: return the nth prime number\n    if n == 0:\n        return 0\n    else:\n        #TODO: recursive formula for the nth newman prime number\n        pass\n\ndef is_prime(n):\n    \"\"\"\n    \"\"\"\n    # TODO: return True if n is a prime number and False otherwise\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# print(newman_prime(3))\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n\t\"\"\"\n\tUses the Newman\u2013Shanks\u2013Williams primality test to find a prime number.\n\t\"\"\"\n\tassert n >= 1, 'Cannot find a prime for a negative or zero index.'\n\t\n\tif n == 1:\n\t\treturn 2\n\t\n\tx = 2\n\twhile True:\n\t\tx = x + 1\n\t\tis_prime = True\n\t\tfor k in range(2, (x**2)+1):\n\t\t\tif x % k == 0:\n\t\t\t\tis_prime = False\n\t\t\t\tbreak\n\t\tif is_prime:\n\t\t\treturn x\n\t\tif x % x == 0:\n\t\t\treturn 0\n", "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n# my solution\ndef newman_prime(n):\n  prime_count = 0\n  for i in range(1, 10000):\n    prime = True\n    for j in range(1, int(i**(1/2))+1):\n      if i % j == 0:\n        prime = False\n        break\n    if prime:\n      prime_count += 1\n      if prime_count == n:\n        return i\n\n# solution from http://www.codewars.com/kata/54d506009064880d90000344/\ndef newman_prime(n):\n  p = []\n  for i in range(1, 100000):\n    if is_prime(i):\n      p.append(i)\n  return p[n-1]\n\n\ndef is_prime(num):\n  if num == 2 or num == 3 or num == 5: return True\n  if not num % 2 and not num % 3 and not num % 5: return False\n  if num < 11: return True\n  if num < 100: return False\n  if num % 2 == 0 or num % 3 == 0 or num % 5 == 0: return False\n  if num < 241: return True\n  if num < 1105: return False\n  if num % 2 == 0 or num % 3 == 0 or num % 5 == 0 or num % 7 == 0: return False\n  if num < 1937: return True\n  if num < 2109: return False\n  if num % 2 == 0 or num % 3 == 0 or num % 5 == 0 or num % 7 == 0 or num % 11 == 0: return False\n  if num < 2241: return True\n  if num < 2273: return False\n  if num % 2 == 0 or num % 3 == 0 or num % 5 == 0 or num % 7 == 0 or num"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(t1, t2):\n    return tuple(x/y if y!=0 else 0 for x, y in zip(t1, t2))\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple_1, tuple_2):\n    try:\n        return tuple([element_1/element_2 for element_1, element_2 in zip(tuple_1, tuple_2)])\n    except:\n        print(\"Invalid Operation. Use only numeric elements.\")\n\n\ndivision_elements((10, 4, 6, 9), (5, 2, 3, 3))\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(numerator,denominator):\n    return tuple(numerator[i]/denominator[i] for i in range(len(numerator)))\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(t1, t2):\n    #Write your code here\n    return tuple(int(t1[i]/t2[i]) if t2[i]!=0 else 0 for i in range(0,len(t1)))\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(a, b):\n    for i in range(len(a)):\n        a[i] /= b[i]\n    return a\n\n\n# +\n# Tests", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(left, right):\n    results = []\n    for index in range(len(left)):\n        results.append(left[index]/right[index])\n    return results\n\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuples):\n  for i in tuples:\n    for j in i:\n      j = j / 3\n\n  return tuples\n\ndef test_division():\n  assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\n# test_division()\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuples):\n    result = []\n    for item in tuples:\n        result.append(item[0]/item[1])\n    return result\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(a, b):\n    res = []\n    for i in range(len(a)):\n        res.append(a[i] / b[i])\n    return res\n", "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(num1, num2):\n    # Fill this in.\n    return tuple(map(lambda x, y: x/y, num1, num2))"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(l,n):\n    a = l[:n]\n    b = l[n:]\n    return a,b\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(l, length):\n    if not isinstance(l, list):\n        raise TypeError(\"l must be an instance of list, not {}\".format(type(l)))\n    if not isinstance(length, int):\n        raise TypeError(\"length must be an instance of int, not {}\".format(type(length)))\n    if length < 0 or length > len(l):\n        raise ValueError(\"length must be between 0 and length of l, not {}\".format(length))\n    if length == 0:\n        return [], l\n    else:\n        return l[:length], l[length:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(l,k):\n    return l[:k], l[k:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(my_list, size):\n    first_half = []\n    second_half = []\n\n    for index in range(len(my_list)):\n        if index <= size:\n            first_half.append(my_list[index])\n        else:\n            second_half.append(my_list[index])\n\n    return (first_half, second_half)\n\n\ndef main():\n    # list\n    my_list = [1,1,2,3,4,4,5,1]\n    size = 3\n\n    print(split_two_parts(my_list, size))\n\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(input,length):\n    return input[:length],input[length:]\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(l, n):\n    # write your code here\n    res = []\n    res1 = []\n    n1 = 0\n    n2 = len(l)\n    if n < 1:\n        print('n must be positive')\n    if len(l) < n:\n        print('n cannot be greater than length of the list')\n    while n1 < len(l):\n        res1.append(l[n1])\n        n1 += 1\n        if n1 < n:\n            res.append(l[n1])\n            n1 += 1\n    return (res,res1)\n\ndef split_two_parts1(l, n):\n    res = []\n    res1 = []\n    if n < 1:\n        print('n must be positive')\n    if len(l) < n:\n        print('n cannot be greater than length of the list')\n    n1 = 0\n    n2 = len(l)\n    while n1 < n:\n        res.append(l[n1])\n        n1 += 1\n    while n2 > n:\n        res1.append(l[n2-1])\n        n2 -= 1\n    return (res,res1)\n\ndef split_two_parts2(l, n):\n    res = []\n    res1 = []\n    if n < 1:\n        print('n must be positive')\n    if len(l) < n:\n        print('n cannot be greater than length of the list')\n    while n2 > n:\n        res1.append(l[n2-1])\n        n2 -= 1\n    while n1 < n:\n        res.append(l[n1])\n        n1 += 1\n    return (res,res1)\n\ndef split_two_parts3(l, n):\n    res = []\n    res1 = []\n    if n < 1:\n        print('n must be positive')\n    if len(l) < n:\n        print('n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\nfrom typing import List\ndef split_two_parts(l: List[int], n: int) -> List[List[int]]:\n    result = []\n    first = []\n    second = []\n    for i in l:\n        if len(first) >= n:\n            second.append(i)\n        else:\n            first.append(i)\n    \n    result.append(first)\n    result.append(second)\n    return result\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(L,length):\n    return (L[0:length], L[length:])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, n):\n    assert n > 0\n    assert len(lst) >= n\n    assert len(lst)%n==0\n\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n\n    return result\n\n#assert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n", "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(my_list, length):\n    if length > len(my_list):\n        raise Exception(\"Not enough items in the list\")\n    return (my_list[:length], my_list[length:])\n"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    result = {}\n    for key in dict1:\n        result[key] = dict1[key]\n    for key in dict2:\n        result[key] = dict2[key]\n    return result\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\n# def merge_dict(dict1, dict2):\n#     dict1 = dict1.copy()\n#     for key, value in dict2.items():\n#         dict1[key] = value\n#     return dict1\n\n# print(merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200}))\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(x,y):\n    return {**x,**y}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1,dict2):\n    result = dict1\n    for key,val in dict2.iteritems():\n        if key in result:\n            if isinstance(result[key],list):\n                result[key].append(val)\n            else:\n                result[key] = [result[key],val]\n        else:\n            result[key] = val\n    return result\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(*dict_args):\n    result = {}\n    for dictionary in dict_args:\n        result.update(dictionary)\n    return result\n\n# def merge_dict(**dict_args):\n#     result = {}\n#     for dictionary in dict_args:\n#         result.update(dictionary)\n#     return result", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(x, y):\n    for key in x:\n        if key in y:\n            y[key] = y[key] + x[key]\n        else:\n            y[key] = x[key]\n    return y\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    result = dict1.copy()\n    for key in dict2:\n        result[key] = dict2[key]\n    return result\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n", "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    return dict(list(dict1.items()) + list(dict2.items()))\n\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(years):\n    return 7 * years + 3", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(dog_year):\n    if dog_year>=1:\n        return 12\n    else:\n        return 2*dog_year", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(years):\n    return 7*years\n\n#assert dog_age(12)==61\n\n#Test case", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(dog_years):\n    dog_years += 1\n    return human_age(dog_years)\n\ndef human_age(human_years):\n    return human_years*365\n\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(years):\n    return 61 + years\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(years):\n    return years*7\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age_in_dog_months):\n    age_in_dog_years = int(age_in_dog_months / 12)\n    return age_in_dog_years\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\n# Write a function that takes a number and returns a string of length num\ndef string_of_length(n):\n    s = ''\n    for i in range(n):\n        s += 'a'\n    return s", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_age):\n    dog_years = human_age*7\n    return dog_years\n", "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(years_as_integer):\n    dob = 2009\n    return dob+years_as_integer\n\ndef test_dog_age():\n    assert dog_age(12)==61\n\ntest_dog_age()\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(in_list, split_every_nth):\n\t\"\"\"\n\t:param in_list:\n\t:param split_every_nth:\n\t:return:\n\t\"\"\"\n\tout_list = []\n\tcount = 0\n\tfor item in in_list:\n\t\tcount += 1\n\t\tif count % split_every_nth == 0:\n\t\t\tout_list.append([])\n\t\tout_list[-1].append(item)\n\treturn out_list\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(l,n):\n    return [l[i::n] for i in range(n)]\n\n#test case", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(li,n):\n  output = []\n  for i in range(0,len(li),n):\n    output.append(li[i:i+n])\n  return output\n\n\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(arr, n):\n    new_arr = []\n    temp = []\n    for i, item in enumerate(arr):\n        temp.append(item)\n        if (i + 1) % n == 0:\n            new_arr.append(temp)\n            temp = []\n    return new_arr", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(l, n):\n    result = []\n    for i in range(0,len(l),n):\n        result.append(l[i:i+n])\n    return result\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(arr, n):\n    \"\"\"\n    \"\"\"\n    return [arr[i:i+n] for i in range(0, len(arr), n)]\n\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n  return [lst[i:i+n] for i in range(0, len(lst), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(list,nth):\n    return [list[i:i+nth] for i in range(0, len(list), nth)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(a, n):\n    return [a[i:i+n] for i in range(0, len(a), n)]\n", "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(list, n):\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    result = []\n    for i in range(0, len(list), n):\n        result.append(list[i:i+n])\n    return result\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n# In[14]:\n\n\ndef lateralsurface_cube(x):\n    return x*x*6\n\n\n# ### Nested For Loops\n\n# In[15]:\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n  return side**2*6\n\n#test", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(size):\n    if size<=0:\n        return 0\n    return 2*(size**2)\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(x):\n    return 6 * x * x * x\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n#Write the function lateralsurface_cube here\ndef lateralsurface_cube(side):\n    result = (6*(side**2)) + (4*side) + 2\n    return result\n\n#Test your function", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side):\n    return side*6\n\ndef main():\n    assert lateralsurface_cube(5)==100\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(x):\n    return 6 * x**2\n\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n# Write your code below this line\ndef lateralsurface_cube(side_length):\n    # side_length should be a positive integer\n    if side_length < 0:\n        return None\n    area = side_length*side_length*6\n    return area\n", "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(x):\n    return x**2 * 6\n\n#test_lateralsurface_cube(5)\n#test_lateralsurface_cube(6)\n#test_lateralsurface_cube(10)\n\n# Given a side s, find the lateral surface area of a cube with side s.\ndef lateralsurface_cube_s(s):\n    return s**2 * 6\n\n#test_lateralsurface_cube_s(5)\n#test_lateralsurface_cube_s(6)\n#test_lateralsurface_cube_s(10)\n\n# Given a side s, find the lateral surface area of a cube with side s.\ndef lateralsurface_cube_v1(s):\n    return s**2 * 6\n\n#test_lateralsurface_cube_v1(5)\n#test_lateralsurface_cube_v1(6)\n#test_lateralsurface_cube_v1(10)\n\n# Given a side s, find the lateral surface area of a cube with side s.\ndef lateralsurface_cube_v2(s):\n    return s**2 * 6\n\n#test_lateralsurface_cube_v2(5)\n#test_lateralsurface_cube_v2(6)\n#test_lateralsurface_cube_v2(10)\n\n# Given a side s, find the lateral surface area of a cube with side s.\ndef lateralsurface_cube_v3(s):\n    return s**2 * 6\n\n#test_lateralsurface_cube_v3(5)\n#test_lateralsurface_cube_v3(6)\n#test_lateralsurface_cube_v3(10)\n\n# Given a side s, find the lateral surface area of a cube with side s.\ndef lateralsurface_cube_v4(s):\n    return s**2 * 6\n\n#test_lateralsurface_cube_v4(5)\n#test_lateralsurface_cube_v4(6)"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    s=0\n    for i in range(1,n+1,2):\n        s+=i*i\n    return s\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1,n+1,2):\n        sum_of_squares += i**2\n    return sum_of_squares", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    s = 0\n    for i in range(1,n+1):\n        s += i**2\n    return s\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n# My solution\n\ndef square_sum(n):\n    return (n**2) * (sum(i for i in range(1,n+1,2)))\n    \n# O(n) runtime, O(1) space\n# - The sum of squares of all odd numbers less than or equal to n is (n*n+n)*(n+1)/2 = (n^3 + n^2)*(n+1)/2 = (n^3 + 2n^2+n)/2 = (n^3 + 2n^2 + n + 2n + 1)/2 = n^3 + 3n^2 + n + 2n + 1/2 = n^3 + 3n^2 + n + n + 1 = n^3 + 4n^2 + 1\n\n# The above solution is a bit unclear. Here is my explanation:\n#   - We can easily solve this problem by using a loop to compute and sum the squares of all odd numbers from 1 to n.\n#   - However, it's more efficient to solve it using the following identity:\n#       - The sum of squares of all odd numbers less than or equal to n is\n#           - 1 + 3 + 5 + ... + 2*n-1 = n*(n+1)/2\n#           - The sum of squares of all odd numbers less than or equal to n is therefore\n#           - n*(n+1)/2 = (n+1)*(n+2)/2\n#   - Multiplying both sides by n+1 and simplifying, we get\n#       - n^2 + 2n + 1 = n^3 + 3n^2 + n\n#   - Hence, the sum of squares of all odd numbers less than or equal to n is n^3 + 4n^2 + 1\n\n# Brute force solution\n\ndef square_sum(n):\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            total += i**2\n    return total\n\n# O(n) runtime,", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    result = 0\n    for num in range(1, n+1, 2):\n        result += num ** 2\n    return result\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    return sum([i**2 for i in range(1, n+1) if i%2])\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    ans = 0\n    for i in range(1,n+1):\n        if i%2!=0:\n            ans+=i**2\n    return ans", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    #Write your code here\n    return (sum([i**2 for i in range(1,n+1,2)]))\n\n# assert square_Sum(2) == 10\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    squares = []\n    for num in range(1, n + 1):\n        squares.append(num**2)\n\n    return sum(squares)\n", "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    return sum(i ** 2 for i in range(1, n + 1) if i % 2)\n\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    # Write your code here\n    if n == 0:\n        return 0\n    else:\n        return (n - 1) * (find_star_num(n - 1) + 1) + 1\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    a = 3\n    b = 2\n    c = 1\n    d = 1\n    for i in range(n):\n        a = a + b\n        b = b + c\n        c = c + d\n        d = a - b + c - d\n    return a\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    count = 0\n    while True:\n        if num_is_star(count):\n            count += 1\n            if count == n:\n                return count\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    if n==1:\n        return 1\n    else:\n        return (n-1)*(n+1)\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nfrom functools import lru_cache\n\ndef find_star_num(n: int) -> int:\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n < 0:\n        raise ValueError('Invalid index')\n    else:\n        return (n - 1) * find_star_num(n - 1) + find_star_num(n - 2)\n\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 1:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    res = find_star_num(n-1)\n    return res*res\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    while True:\n        if is_star_num(i):\n            if i == num - 1:\n                return i\n            else:\n                i += 1\n        else:\n            i += 1\n\n\ndef is_star_num(num):\n    \"\"\"\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    if len(str(num)) == 1:\n        return True\n    else:\n        str_num = str(num)\n        for i in range(0, len(str_num)):\n            if str_num[i] == '0':\n                return False\n            else:\n                if str_num[i + 1] == '0':\n                    return False\n                else:\n                    if str_num[i + 1] == '1' and int(str_num[:i]) % 2 == 0:\n                        return False\n                    else:\n                        if str_num[i + 1] == '1' and int(str_num[:i]) % 2 == 1:\n                            return False\n                else:\n                    if str_num[i + 1] == '0':\n                        return False\n                    else:\n                        if str_num[i + 1] == '1' and int(str_num[:i]) % 2 == 0:\n                            return False\n                        else:\n                            if str_num[i + 1] == '1' and int(str_num[:i]) % 2 == 1:\n                                return False\n        return True\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    Returns the nth star number.\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(10)\n    92\n    >>> find_star_num(10000)\n    5051\n    \"\"\"\n    if n < 1:\n        raise ValueError\n    elif n == 1:\n        return 1\n    else:\n        return (n - 1) * (2 * n - 1)\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return find_star_num(n-1) + find_star_num(n-2)\n", "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    # TODO\n    raise NotImplementedError\n\n\ndef find_nth_fibonacci_num(n):\n    \"\"\"\n    Write a function to find the n'th fibonacci number.\n    \"\"\"\n    # TODO\n    raise NotImplementedError\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    \"\"\"\n    Given a character, find the ascii value.\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('a')\n    97\n    \"\"\"\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    char_value = ord(char)\n    return char_value\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n  return ord(char)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\nimport unittest\n\n\ndef ascii_value(char):\n    return ord(char)\n\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(ch):\n    return ord(ch)\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n\ndef main():\n    pass\n", "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    ascii_value=ord(char)\n    return ascii_value\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(nums,n):\n    s=0\n    for i in range(n):\n        if i%2==0:\n            s+=nums[i]\n    return s\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(nums,n):\n    if len(nums) == 0:\n        return 0\n    \n    #initialize even and odd sums\n    even_sum = 0\n    odd_sum = 0\n    \n    #iterate through the list\n    for i, num in enumerate(nums):\n        #print(i,num)\n        \n        #if number is even, add it to even_sum\n        if num % 2 == 0:\n            even_sum += num\n        \n        #if number is odd, add it to odd_sum\n        else:\n            odd_sum += num\n        \n        #if i == n-1, return odd_sum\n        if i == n-1:\n            return odd_sum\n\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\n# Solution : \ndef sum_even_and_even_index(arr,n):\n    arr_new = []\n    for i in range(0,n):\n        if arr[i] % 2 == 0:\n            arr_new.append(arr[i])\n        else:\n            continue\n    for j in range(n):\n        if arr_new[j] % 2 == 0:\n            sum_even = sum_even + arr_new[j]\n        else:\n            continue\n    return sum_even\n\n\n# Testing for function:", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, n):\n    sum = 0\n    for i in range(0,len(arr),2):\n        sum = sum + arr[i]\n    return sum", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, n):\n    return sum(arr[0::2]) + sum(arr[1::2])\n\ndef sum_even_and_even_index(arr, n):\n    return sum(arr[0::2]) + sum(arr[1::2])\n\n\n# +", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr,n):\n    sum_list = 0\n    for i in range(0,len(arr),2):\n        sum_list = sum_list + arr[i]\n    return sum_list\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(numbers, limit):\n    sum_of_evens = 0\n    for i in range(0, len(numbers), 2):\n        if i <= limit:\n            sum_of_evens += numbers[i]\n    return sum_of_evens\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(list,n):\n    sum = 0\n    for i in range(n):\n        if list[i]%2 == 0:\n            sum += list[i]\n        if list[(i+1)%n]%2 == 0:\n            sum += list[(i+1)%n]\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, n):\n    s = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            s += arr[i]\n    return s\n", "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr,n):\n    # TODO: Write your code here\n    sum_of_even = 0\n    sum_of_even_index = 0\n    for i in range(n):\n        if arr[i]%2==0:\n            sum_of_even += arr[i]\n            sum_of_even_index += i\n    return sum_of_even + sum_of_even_index\n\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(num):\n    even_sum = 0\n    for i in range(1,num+1):\n        if i%2 == 0:\n            even_sum += i**5\n    return even_sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += (i * i * i * i * i)\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n\tif n <= 0:\n\t\traise ValueError(\"n should be a positive integer\")\n\tsum = 0\n\tfor i in range(2, n, 2):\n\t\tsum += i ** 5\n\treturn sum", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    return sum([i**5 for i in range(2,n+1) if i%2==0])", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(0,n,2):\n        sum += (i**5)\n    return sum\n\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n# Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n):\n    n_sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            n_sum = n_sum + i**5\n    return n_sum\n\n\n# -\n\n#\n\n# +", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    return sum([i ** 5 for i in range(2, n, 2)])\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum = sum + i**5\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    return sum(range(1,n+1,2)**5)", "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    if n < 1:\n        return 0\n    else:\n        return n**5 + even_Power_Sum(n-1)\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    return [x[2] for x in records]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    result = []\n    for tup in records:\n        if tup[2] == max([item[2] for item in records]):\n            result.append(tup[2])\n    return result\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(list_of_tuples):\n    temp = []\n    for tup in list_of_tuples:\n        temp.append(tup[2])\n    return temp\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    return [x for x in map(lambda r: r[0], records)]\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(tupl_list):\n    tupl_list.reverse()\n    return [tupl[1] for tupl in tupl_list]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\n# TODO: Write the code after the assert statement\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\nfrom typing import List\n\n\ndef rear_extract(records: List[tuple]) -> list:\n    \"\"\"\n    Iterating through all the records and accumulating the values in a list.\n    :param records: list of tuples to extract the rear element from.\n    :return: list of accumulated values.\n    \"\"\"\n    rear = []\n    for record in records:\n        rear.append(record[1])\n\n    return rear\n\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(t_list):\n    # your code here\n    rear_list = []\n    for i in range(len(t_list)-1, -1, -1):\n        rear_list.append(t_list[i][2])\n    return rear_list\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    return [x[2] for x in records[::-1]]\n", "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    assert type(records) == list\n    assert type(records[0]) == tuple\n    assert type(records[0][2]) == int\n    assert all(type(elem) == int for elem in records)\n    records = [(elem[0], elem[1]) for elem in records]\n    records.sort(key=lambda tup: tup[1], reverse=True)\n    return [elem[1] for elem in records]\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(a, b):\n    try:\n        return (a[0] - b[0], a[1] - b[1], a[2] - b[2])\n    except:\n        raise TypeError('all elements of tuple must be same type')\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(a:tuple, b:tuple) -> tuple:\n    \"\"\"\n    This function substracts the contents of one tuple with corresponding index of other tuple.\n    \"\"\"\n    c = ()\n    for i, j in enumerate(a):\n        c += (j - b[i],)\n    return c\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n# +\n# %%writefile tuple_operations_solution.py\n\ndef substract_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return \"tuples must have the same length\"\n\n    for i in range(len(tuple1)):\n        tuple1[i] -= tuple2[i]\n\n    return tuple1\n\n\n# +\n# %%writefile tuple_operations_solution.py\n\ndef substract_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return \"tuples must have the same length\"\n\n    result = tuple1\n    for i in range(len(tuple1)):\n        result[i] -= tuple2[i]\n\n    return result\n\n\n# -\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    res = []\n    for i in range(len(t1)):\n        res.append(t1[i] - t2[i])\n    return res\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(a, b):\n    return tuple(map(lambda i, j: i - j, a, b))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(first_tuple, second_tuple):\n    return tuple(map(lambda x, y: x-y, first_tuple, second_tuple))\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    return tuple([t1[i] - t2[i] for i in range(len(t1))])\n\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    res = []\n    for x, y in zip(tuple1, tuple2):\n        res.append(x - y)\n    return tuple(res)\n", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n# Solution:\ndef substract_elements(a: tuple, b: tuple) -> tuple:\n    \"\"\"\n    Returns the substract of the two tuples.\n    \"\"\"\n    sub_tuple = []\n    for i in range(0, len(a)):\n        sub_tuple.append(a[i] - b[i])\n    return tuple(sub_tuple)\n\n# Test:", "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\nfrom __future__ import annotations\nfrom typing import Tuple\n\n\ndef substract_elements(tuple1: Tuple[int, ...], tuple2: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\"\n    return a tuple in which the index of tuple1 and tuple2 contains the substract between tuple1 and tuple2 respectively\n    >>> substract_elements((10, 4, 5), (2, 5, 18))\n    (8, -1, -13)\n    >>> substract_elements((5, 1), (1, 5))\n    (4, 0)\n    >>> substract_elements((10, 1), (2, 5))\n    (8, -4)\n    \"\"\"\n    new_tuple = tuple()\n    for i, j in zip(tuple1, tuple2):\n        new_tuple += (i-j,)\n    return new_tuple"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += binomial(n,i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n# @accepts(int, output=int)\n# @param n\n# @return\n# def even_binomial_Coeff_Sum(n):\n#     \"\"\"\n#     \"\"\"\n#     s = 0\n#     for i in range(0, n):\n#         s += binomial_Coeff(n, i) * 2 ** i\n#     return s\n\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    total = 0\n    for i in range(n):\n        total += (2**i) * (n - i)\n    return total\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    # YOUR CODE HERE\n    return 0\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n):\n        if (i % 2) == 0:\n            sum += binomial_Coeff(n, i)\n    return sum\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0,n+1):\n        sum += binomial(n,i)*binomial(n,i+1)\n    return sum\n\n\n# +\n# 3", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n# Solution\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n):\n        if (i % 2 == 0):\n            sum += math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return sum\n# Test case", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    s = 0\n    for i in range(0,n,2):\n        s += binom(n,i)\n    return s\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    #your code here\n    import math\n    sum_of_binomial_coeffs = 0\n    for i in range(0, n + 1, 2):\n        sum_of_binomial_coeffs += math.factorial(n) // math.factorial(i) // math.factorial(n - i)\n    return sum_of_binomial_coeffs\n", "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nfrom math import factorial\n\ndef even_binomial_Coeff_Sum(n):\n    return factorial(n) // (factorial(n-2) * 2)\n\n\ndef test_even_binomial_Coeff_Sum():\n    assert even_binomial_Coeff_Sum(4) == 8\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, x, n):\n    # Complete this function\n    \n    position = n + 1\n    for i in range(n, -1, -1):\n        if arr[i] == x:\n            position = i\n            break\n    return position\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,n,remove):\n    last = remove\n    for i in range(len(arr)):\n        if arr[i] == remove:\n            last = i\n    return last\n\n#assert get_Position([2,5,4],3,2) == 2", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, n, x):\n    position = arr.index(x)\n    for i in range(position,len(arr)):\n        if arr[i] != x:\n            return i\n    return position\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(array, element, index):\n    \"\"\"\n    >>> get_Position([2,5,4],3,2) == 2\n    True\n    \"\"\"\n    # Write your code here\n    index = index - 1\n    count = 0\n    while count < index:\n        if array[count] == element:\n            index = index - 1\n            return index\n        count = count + 1\n    return -1\n\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\nfrom typing import List\n\ndef get_position(arr: List[int], num: int, k: int) -> int:\n    i = 0\n    while i < len(arr):\n        if arr[i] == num:\n            j = 0\n            while j < k:\n                arr.pop(0)\n                j += 1\n        i += 1\n    return len(arr)\n\ndef main():\n    arr = [2, 5, 4]\n    k = 2\n    num = 3\n    print(get_position(arr, num, k))\n\nmain()", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,x,p):\n\tarr.remove(x)\n\tif p == len(arr):\n\t\treturn -1\n\treturn get_Position(arr,x,p+1)\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, val, n):\n    arr.sort()\n    ind = 0\n    while ind < n:\n        if arr[ind] != val:\n            return ind\n        ind+=1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr,key,n):\n    for i in range(n):\n        if arr[i]==key:\n            return i\n    return -1\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, n, x):\n    # write your code here\n    result = -1\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            result = i\n            break\n    return result\n", "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\n#Solution\n\ndef get_Position(a,n,x):\n    flag = 0\n    for i in range(len(a)):\n        if(a[i]==x):\n            flag = 1\n        elif(flag == 1 and a[i] != x):\n            return i\n    return -1\n\n\n# Test case"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\nfrom math import pi\n\ndef volume_cylinder(r,h):\n    return pi*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    pi = 3.14159265359\n    return pi*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r,h):\n    return 3.14 * r ** 2 * h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius,height):\n    assert type(radius)==int and type(height)==int, 'Invalid input type'\n    volume = pi*(radius**2) * height\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius, height):\n    \"\"\"\n    >>> volume_cylinder(10,5)\n    1570.7500000000002\n    \"\"\"\n    return (3.1415926535897932*radius**2*height)/3.0\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(h, r):\n    vol = 0\n    for i in range(3):\n        for j in range(3):\n            vol += ((1-((i+j)%2))/2)*(r**i*(h**j))\n    return vol\n\ndef volume_cylinder(r, h):\n    return (1/3)*r**3*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r,h):\n    return pi*r**2*h\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius,height):\n    return ((radius**2)*3.14)*(height/3)\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(r,h):\n    vol = 3.14*r**2 * h\n    return vol\n", "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    This function calculates the volume of a cylinder.\n    Inputs: radius and height\n    Outputs: volume of the cylinder\n    \"\"\"\n    return 3.14*radius**2*height\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict, value):\n    dict_out = dict.copy()\n    for key in dict:\n        if dict[key] == value:\n            dict_out.pop(key)\n    return dict_out\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_to_filter, value):\n    filtered_dict = {}\n    for k,v in dict_to_filter.items():\n        if v == value:\n            filtered_dict[k] = v\n    return filtered_dict\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n#Write a function to filter a dictionary based on values\ndef dict_filter(my_dict, my_value):\n    return {key: value for key, value in my_dict.items() if value == my_value}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary, value):\n    new_dict = {}\n    for key, item in dictionary.items():\n        if item == value:\n            new_dict[key] = value\n    return new_dict\n\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, v):\n    return {k: v for k, v in d.items() if v > v}", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary,filter_value):\n    new_dict = dict()\n    for key,value in dictionary.items():\n        if value == filter_value:\n            new_dict[key] = value\n    return new_dict", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,v):\n    return {k:v for k,v in d.items() if v == v}\n", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dictionary,value):\n    return {k:v for k,v in dictionary.items() if v >= value}\n\n\n# + [markdown] id=\"e08f3923\"\n# ## q42\n\n# + colab={\"base_uri\": \"https://localhost:8080/\", \"height\": 35} id=\"9d6a7438\" outputId=\"421c882d-189b-458a-b56c-150cd27277e4\"", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(my_dict,low):\n    result = {}\n    for key, value in my_dict.items():\n        if value > low:\n            result[key] = value\n    return result", "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict_to_filter, value):\n    dict_to_filter_copy = dict_to_filter.copy()\n    for key, value in dict_to_filter_copy.items():\n        if value == value:\n            dict_to_filter_copy.pop(key)\n\n    return dict_to_filter_copy\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nimport math\ndef count_first_elements(tuple_list):\n    if isinstance(tuple_list, list):\n        elements = 0\n        for i in tuple_list:\n            if isinstance(i, tuple):\n                elements = elements + count_first_elements(i)\n            else:\n                elements = elements + 1\n        return elements\n    else:\n        return 0\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nimport pytest\nfrom count_first_elements import count_first_elements\n\n\ndef test_count_first_elements_1():\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\ndef test_count_first_elements_2():\n    assert count_first_elements((1, 1, 1, 1)) == 0\n\ndef test_count_first_elements_3():\n    assert count_first_elements((10, 5, 7, 4, 6)) == 1\n\ndef test_count_first_elements_4():\n    assert count_first_elements((1, 1, 5, 5, 5)) == 0\n\ndef test_count_first_elements_5():\n    with pytest.raises(TypeError):\n        count_first_elements('string')\n\ndef test_count_first_elements_6():\n    with pytest.raises(TypeError):\n        count_first_elements((1, 5, 7, 4, 6, 'string'))\n\ndef test_count_first_elements_7():\n    with pytest.raises(TypeError):\n        count_first_elements((1, 5, 7, 4))", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nfrom collections import Counter\n\ndef count_first_elements(tuple):\n    c = Counter(tuple)\n    for i in range(1, len(tuple) + 1):\n        if i in c:\n            return c[i]\n\n\ndef test_count_first_elements():\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nfrom typing import List, Union\nfrom more_itertools import flatten\nfrom itertools import accumulate\n\n\ndef count_first_elements(tuple_with_tuples: Union[Tuple, List]) -> int:\n    \"\"\"\n    :param tuple_with_tuples: A tuple containing tuples\n    :return: The number of times a tuple is found before the given tuple\n    \"\"\"\n    flattened_tuples = flatten(tuple_with_tuples)\n    # count the occurrences of tuples before the given tuple\n    # and sum them\n    return sum(c for (t, c) in zip(flattened_tuples, accumulate(1, lambda a, b: a + b)))\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(elements):\n    count = 0\n    for i in elements:\n        if i == (4, 6):\n            break\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(input):\n    count = 0\n    for i in range(len(input)):\n        if type(input[i]) is tuple:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tup):\n  count = 0\n  for x in tup:\n    if type(x) == tuple:\n      count = count + 1\n    elif type(x) == int:\n      break\n  return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple):\n    count = 0\n    for element in tuple:\n        if isinstance(element, tuple):\n            count += 1\n            for sub_element in element:\n                if sub_element not in tuple:\n                    return count\n    return count\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tuple_list):\n    count = 0\n    for tup in tuple_list:\n        if isinstance(tup, tuple):\n            count += 1\n        else:\n            count += 1\n            break\n    return count\n\n", "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(t):\n    \"\"\"\n    Write a function to find the element count that occurs before the record in the given tuple.\n    :param t: tuple to be processed\n    :return: count of elements before the first record in the tuple\n    \"\"\"\n    return 0\n\n\ndef count_first_elements(t):\n    count = 0\n    for el in t:\n        if isinstance(el, tuple):\n            return count\n        count += 1\n    return count\n\n\ndef count_first_elements(t):\n    c = 0\n    for e in t:\n        if isinstance(e, tuple):\n            return c\n        c += 1\n    return c\n\n\ndef count_first_elements(t):\n    count = 0\n    for i, x in enumerate(t):\n        if isinstance(x, tuple):\n            return count\n        count += 1\n    return count\n\n\ndef count_first_elements(t):\n    return t.index(None) - 1\n\n\ndef count_first_elements(t):\n    return t.count(None) - 1\n\n\ndef count_first_elements(t):\n    return t.index(None) - 1 if t.count(None) > 1 else -1\n\n\ndef count_first_elements(t):\n    return next((x for x, y in enumerate(t) if isinstance(y, tuple)), -1)\n\n\ndef count_first_elements(t):\n    return next((x for x, y in enumerate(t) if isinstance(y, tuple)), None)\n\n\ndef count_first_elements(t):\n    for i, x in enumerate(t):\n        if isinstance(x, tuple):\n            return i\n    return -1\n\n\ndef count_first_elements(t):\n    for i, x in enumerate(t):\n        if isinstance(x, tuple):\n            return i\n    return -1\n\n\ndef count_first_elements(t):\n    return next(i for i, x in enumerate(t) if isinstance(x, tuple), -1)"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nimport pytest\n\ndef is_num_decagonal(number):\n    pass\n\n@pytest.mark.parametrize(\"number\", [3,4,5,6,7,8,9,10,11,12])\ndef test_is_num_decagonal(number):\n    assert is_num_decagonal(number) == 10 * (number * (number + 1)) / 2\n\n@pytest.mark.parametrize(\"number\", [0,1,2,1000,1001,1002,1010,1011,1012,1100,1101,1102,1110,1111,1112,1200,1201,1202,1210,1211,1212,1300,1301,1302,1310,1311,1312])\ndef test_is_num_decagonal_negative(number):\n    assert is_num_decagonal(number) == 0\n\ndef test_is_num_decagonal_zero():\n    assert is_num_decagonal(0) == 0\n\ndef test_is_num_decagonal_one():\n    assert is_num_decagonal(1) == 1\n\ndef test_is_num_decagonal_two():\n    assert is_num_decagonal(2) == 5\n\ndef test_is_num_decagonal_three():\n    assert is_num_decagonal(3) == 27\n\ndef test_is_num_decagonal_four():\n    assert is_num_decagonal(4) == 70\n\ndef test_is_num_decagonal_five():\n    assert is_num_decagonal(5) == 182", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nimport math\n\ndef nth_decagonal(n):\n    \"\"\"\n    >>> nth_decagonal(3)\n    27\n    >>> nth_decagonal(0)\n    1\n    \"\"\"\n    num = 1\n    for x in xrange(1, n+1):\n        num += 2*x-1\n    return num\n\ndef is_num_decagonal(n):\n    return nth_decagonal(n) == decagonal(n)\n\ndef decagonal(n):\n    return int((1 + math.sqrt(10*n+1)) / 2)\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nimport math\n\n\ndef is_num_decagonal(n):\n    d = int(math.sqrt(n) / 2)\n    if d * (d + 1) == n:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    if n == 0:\n        return 1\n    return 5 * is_num_decagonal(n-1) + n\n\ndef decagonal(n):\n    if n == 0:\n        return 1\n    return 10 * decagonal(n-1) - decagonal(n-2) + n\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef decagonal_number(n):\n    \"\"\"\n    Function to calculate the nth decagonal number.\n    \"\"\"\n    num = 1\n    for i in range(1, n):\n        num += i * 3 * (n - i) * (i + 1)\n    return num\n\ndef is_num_decagonal(n):\n    \"\"\"\n    Function to check if the given number is a decagonal number.\n    \"\"\"\n    return decagonal_number(n) == n\n\ndef test_decagonal_number():\n    \"\"\"\n    Function to test the decagonal_number() function.\n    \"\"\"\n    assert is_num_decagonal(3) == 27\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    return n*(n*3-1)\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    return 10 * n * (n+1) // 2\n\ndef is_num_decagonal_v2(n):\n    return n % 10 == 0 and (n+1) % 10 == 5\n\ndef test_is_num_decagonal():\n    assert is_num_decagonal(3) == 27\n    assert is_num_decagonal(10) == 135\n    assert is_num_decagonal(11) == 145\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n# Test cases", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\nfrom itertools import count\n\n\ndef is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 10\n    else:\n        nth = n - 1\n        sum = 0\n        for i in count(1, 10):\n            sum += i\n            if nth == 0:\n                break\n            nth -= 1\n        return sum\n", "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, search_key):\n    for index, element in enumerate(arr):\n        if element == search_key:\n            return True, index\n    return False, None\n\n\ndef test_sequential_search():\n    arr = [11,23,58,31,56,77,43,12,65,19]\n    assert sequential_search(arr, 31) == (True, 3)\n    assert sequential_search(arr, 19) == (False, None)\n\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr,num):\n    for i in range(len(arr)):\n        if arr[i] == num:\n            return (True,i)\n    return (False,-1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(alist, element):\n    result = False\n    position = 0\n    while position < len(alist) and not result:\n        if alist[position] == element:\n            result = True\n        position = position+1\n    if result:\n        return (True, position)\n    else:\n        return (False, position)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, val):\n    for i in range(len(arr)):\n        if val == arr[i]:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(A, x):\n    for i in range(len(A)):\n        if A[i] == x:\n            return True, i\n    return False, -1\n\ndef sequential_search_by_index(A, x):\n    for i in range(len(A)):\n        if A[i] == x:\n            return True, i\n    return False, -1\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(array, element):\n\tresult = False\n\ti = 0\n\twhile i < len(array) and not result:\n\t\tif element == array[i]:\n\t\t\tresult = True\n\t\telse:\n\t\t\ti = i + 1\n\treturn (result, i)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(alist,element):\n    for index in range(0,len(alist)):\n        if alist[index] == element:\n            return (True, index)\n    return (False,-1)", "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(list,value):\n    for i in range(len(list)):\n        if list[i]==value:\n            return (True,i)\n    return (False,-1)\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    # Start with the first item\n    current = lst[0]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == current:\n            return False\n        current = lst[i]\n    \n    return True", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(arr):\n    return len(arr) == len(set(arr))\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(data_list):\n    \"\"\"\n    This function is to check if the elements of a given list are unique or not.\n    \"\"\"\n\n    unique_items = []\n    for i in data_list:\n        if i in unique_items:\n            return False\n        else:\n            unique_items.append(i)\n\n    return True\n\ndef all_unique_using_set(data_list):\n    \"\"\"\n    This function is to check if the elements of a given list are unique or not.\n    \"\"\"\n\n    unique_items = set(data_list)\n    if len(unique_items) == len(data_list):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\n# Write your code here\ndef all_unique(lst):\n    return len(set(lst)) == len(lst)\n\n# Test case", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(seq):\n    seen = set()\n    for i in seq:\n        if i in seen:\n            return False\n        seen.add(i)\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(arr):\n    return arr.count(arr[0]) == len(arr)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    # iterates through the list and checks if the element is already present in the list\n    for i in lst:\n        if i in lst[lst.index(i)+1:]:\n            return False\n    return True\n\n\n# +\n# other implementation\n\ndef all_unique(lst):\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] == lst[j]:\n                return False\n    return True\n\n\n# +\ndef all_unique(lst):\n    seen = set()\n    for x in lst:\n        if x in seen:\n            return False\n        seen.add(x)\n    return True\n\n\n# -\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(list):\n    unique_list = list\n    for i in range(len(unique_list)):\n        for j in range(i+1,len(unique_list)):\n            if unique_list[i] == unique_list[j]:\n                return False\n    return True\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(arr):\n    return len(set(arr)) == len(arr)\n", "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(ls):\n    ls = set(ls)\n    return len(ls) == len(ls)\n\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(L1, L2):\n    return list(map(lambda x: x-L2[L1.index(x)], L1))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1,list2):\n    return list(map(lambda x:x-y for x,y in zip(list1,list2)))\n\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(l1,l2):\n    subtrahend=[-x for x in l2]\n    return list(map(lambda x,y:x-y,l1,subtrahend))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(a, b):\n    return list(map(lambda x, y: x - y, a, b))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\nimport unittest\ndef sub_list(a,b):\n    result = [x-y for x,y in zip(a,b)]\n    return result\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(lst1, lst2):\n    return list(map(lambda x,y : x-y, lst1, lst2))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    return list(map(lambda x,y:x-y,list1,list2))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(a,b):\n    return list(map(lambda x: x - b[a.index(x)],a))", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    \"\"\"Returns a list of difference between the two given lists.\"\"\"\n    return list(map(lambda x,y: x-y, list1, list2))\n", "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(l1,l2):\n    return list(map(lambda x,y:x-y,l1,l2))"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    freq = {}\n    while num:\n        digit = num % 10\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n        num //= 10\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    digits = list(str(n))\n    for i in digits:\n        if int(i) >= int(i):\n            return True\n    return False\n\n\n# TESTS", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    for digit in str(num):\n        if int(digit) > int(digit) * 0.9:\n            return False\n    return True\n\nvalidate(1234)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\n20. Write a python function that checks whether a passed string is numeric.\n\n### Code:\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    d = {}\n    for digit in str(number):\n        d[digit] = d.get(digit, 0) + 1\n    for value in d.values():\n        if value > int(value):\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    if type(n) != int:\n        return False\n    if n == 0:\n        return True\n    count = [0 for i in range(10)]\n    while n > 0:\n        count[n % 10] += 1\n        n //= 10\n    return all(count[i] <= i for i in range(10))\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(number):\n    \"\"\"\n    Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n    \"\"\"\n    nums = [int(i) for i in str(number)]\n    for i in nums:\n        if i > nums.count(i):\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(number):\n    if number < 10 or number > 9999:\n        return False\n\n    number = str(number)\n\n    for i in range(len(number)):\n        if int(number[i]) > int(number[i]):\n            return False\n\n    return True\n", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    s = str(num)\n    if len(s) != 4:\n        return False\n    else:\n        return True", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    if num == 0:\n        return False\n    elif num < 10:\n        return True\n    else:\n        a = num % 10\n        b = num // 10\n        return validate(a) or validate(b)", "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n# TESTING \ndef validate(number):\n    digits = str(number)\n    for digit in digits:\n        if int(digit) > int(digits.count(digit)):\n            return False\n    return True"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, item):\n    for i in lst:\n        if i != item:\n            return False\n    return True", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list, target):\n    for i in list:\n        if i != target:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list1,item):\n    for i in list1:\n        if i != item:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(l, e):\n    res = True\n    for i in l:\n        if i != e:\n            res = False\n            break\n    return res\n\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, value):\n    for i in range(len(lst)):\n        if lst[i] == value:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, x):\n    for i in lst:\n        if i!=x:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(list, value):\n    for element in list:\n        if element != value:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(my_list, elem):\n    for i in my_list:\n        if i == elem:\n            return True\n    return False", "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, element):\n    for i in lst:\n        if i != element:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if re.search(r'^a.*b{2,3}$', text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if \"a\" in text and 2 <= text.count(\"b\") <= 3:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if 'a' not in text or 'b' not in text:\n        return 'Not matched!'\n    elif text.count('b') == 2:\n        return 'Matched!'\n    elif text.count('b') >= 3:\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    try:\n        if text[0] == \"a\" and len(text) in range(2, 4) and \"b\" in text[1:]:\n            return \"Matched!\"\n        else:\n            return \"Not matched!\"\n    except:\n        return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if 'a' in text and (2 <= text.count('b') <= 3):\n        return 'Matched'\n    else:\n        return 'Not matched!'", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if 'a' in text and 'b' in text and 'c' in text:\n        return (\"Matched!\")\n    else:\n        return (\"Not matched!\")\n\n\n# assert text_match_two_three(\"ac\")==('Not matched!')", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if re.search(r\"a(.){2,3}b\",text):\n        return (\"Matched!\")\n    else:\n        return (\"Not matched!\")\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    \"\"\"\n    Text is the string to match\n    \"\"\"\n    if text.count('a') != 1:\n        return('Not matched!')\n    if text.count('b') >= 2 and text.count('b') <= 3:\n        return('Matched!')\n    else:\n        return('Not matched!')\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if text[0]=='a' and (text[1]=='b'*(2 <= len(text)-1<=3)):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(string):\n  if string[:2] == \"ab\":\n    return \"Matched!\"\n  elif string[:2] != \"ab\":\n    return \"Not matched!\""], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n# Time Complexity - O(N*K), Space Complexity - O(N)\ndef max_sub_array_sum_repeated(arr, k, n):\n    # Base Cases\n    if k == 1:\n        return max_sub_array_sum(arr)\n    if k == 0:\n        return 0\n\n    # Find the max contiguous sub array\n    max_sub_array = max_sub_array_sum(arr[:n])\n\n    # Find the max sum of k sub arrays\n    max_sum_sub_arrays = -float('inf')\n    for i in range(n):\n        # Find the sum of k sub arrays\n        curr_sum_sub_arrays = 0\n        for j in range(n):\n            if j == i:\n                curr_sum_sub_arrays = 0\n            curr_sum_sub_arrays += arr[j]\n            # If we have n sub arrays, and the last element is the current max element\n            if j == n-1:\n                if curr_sum_sub_arrays > max_sum_sub_arrays:\n                    max_sum_sub_arrays = curr_sum_sub_arrays\n\n    # Pick the max of max_sub_array and max_sum_sub_arrays\n    return max(max_sub_array, max_sum_sub_arrays)\n\n# Time Complexity - O(N), Space Complexity - O(N)\ndef max_sub_array_sum(arr):\n    max_sum = curr_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        curr_sum = max(curr_sum + arr[i], arr[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(array, k, size):\n    max_sum = array[0]\n    for i in range(1, size):\n        for j in range(1, k):\n            array[i] += array[i - j]\n\n        if max_sum < array[i]:\n            max_sum = array[i]\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    res = arr[:n]\n    res = [sum(res[i:i + k]) for i in range(0, len(res), k)]\n    return max(res)\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, size, k):\n    n = len(arr)\n    max_sum = 0\n    curr_max_sum = 0\n    for i in range(0, n):\n        curr_max_sum += arr[i]\n        if i < k-1:\n            curr_max_sum = max(curr_max_sum, 0)\n        else:\n            max_sum = max(max_sum, curr_max_sum)\n    return max_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n# My Code\ndef max_sub_array_sum_repeated(array, k, size):\n    # Edge case\n    if k == 0:\n        return 0\n    # init result\n    result = 0\n    # init current max sum\n    max_sum = 0\n    # init index for start of current max sum\n    start_index = 0\n    # init index for end of current max sum\n    end_index = 0\n    \n    for i in range(k):\n        # handle the first i elements\n        if end_index < size - 1:\n            current_sum = max(max_sum + array[end_index + 1], array[end_index + 1])\n            max_sum = max_sum + array[end_index + 1]\n            end_index = end_index + 1\n            result = max(result, current_sum)\n        else:\n            current_sum = max_sum + array[end_index]\n            max_sum = max_sum + array[end_index]\n            end_index = end_index + 1\n            result = max(result, current_sum)\n    \n    return result\n\n# Better solution\ndef max_sub_array_sum_repeated_better(array, k, size):\n    # Edge case\n    if k == 0:\n        return 0\n    # init result\n    result = 0\n    # init current max sum\n    max_sum = 0\n    # init index for start of current max sum\n    start_index = 0\n    # init index for end of current max sum\n    end_index = 0\n    \n    # for the first k elements\n    for i in range(k):\n        # handle the first i elements\n        if end_index < size - 1:\n            current_sum = max(max_sum + array[end_index + 1], array[end_index + 1])\n            max_sum = max_sum + array[end_index + 1]\n            end_index = end_index + 1\n            result = max(result, current_sum)", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, size, k):\n    max_sum = arr[0]\n    max_sum_i = 0\n    for i in range(size):\n        if i % k == 0:\n            if arr[i] > max_sum:\n                max_sum = arr[i]\n                max_sum_i = i\n        else:\n            max_sum += arr[i]\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, n, k):\n    if k == 1:\n        return max_sub_array_sum(arr)\n    maximum_sum = 0\n    for i in range(k):\n        maximum_sum += max_sub_array_sum(arr[i:n*k:k])\n    return maximum_sum\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, n, k):\n    pass\n\n", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\nfrom typing import List\n\ndef max_sub_array_sum_repeated(arr: List[int], k: int, length: int) -> int:\n    return max_sub_array_sum_helper(arr, k, length, 0)\n\n\ndef max_sub_array_sum_helper(arr: List[int], k: int, length: int, current_sum: int) -> int:\n    if length == k:\n        return current_sum\n\n    max_sum = current_sum\n    for i in range(current_sum, len(arr)):\n        current_sum = max(current_sum + arr[i], arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sub_array_sum_helper(arr, k, length + 1, current_sum)\n\n\ndef test_max_sub_array_sum_repeated():\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Time: O(n*k)\n    Space: O(n)\n    \"\"\"\n    # In place solution\n    # dp[i][j] -> max subarray from i to j\n    # dp[i][i] = arr[i]\n    # dp[i+1][j] = max(dp[i][j] + arr[i+1], arr[i+1])\n    # If we see a new element, we need to update all previous dp[i][j]\n    # Time complexity: O(n*k)\n    # Space complexity: O(n)\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            max_so_far = max(max_so_far, dp[i - 1][j] + arr[i])\n            max_ending_here = max(max_ending_here, dp[j][i - 1] + arr[i])\n            dp[i][j] = max(max_ending_here, max_so_far)\n        max_so_far = max(max_so_far, dp[i][i - 1] + arr[i])\n        max_ending_here = arr[i]\n    print(dp)\n    return dp[n - 1][n - 1]\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    # dp[i][j] -> max subarray from i to j\n    # dp[i][i] = arr[i]\n    # dp[i+1][j] = max(dp[i][j] + arr[i+1], arr[i+1])\n    # If"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum_ = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum_ += i**2\n    return sum_\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    # Write your code here.\n    i = 1\n    even = 0\n    while i <= n:\n        if i % 2 == 0:\n            even += i**2\n        i += 1\n    return even\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    return sum([i ** 2 for i in range(1, n + 1) if i % 2 == 0])\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n# Function to return sum of squares of even natural numbers\ndef square_Sum(n):\n    sum = 0\n    # Loop through all even numbers\n    for i in range(0, n+1, 2):\n        sum += i**2\n    return sum\n\n# Driver code", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sum += i ** 2\n    return sum\n\ndef test_square_Sum():\n    assert square_Sum(2) == 20\n\ndef main():\n    test_square_Sum()\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(2,n+1,2):\n        sum = sum + i**2\n    return sum", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum_square = 0\n    for i in range(1, n+1, 2):\n        sum_square += i**2\n    return sum_square\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of squares of first n even natural numbers.\n    :param n:\n    :return:\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The parameter should be greater than 0\")\n    if n == 0:\n        return 0\n    if n % 2 != 0:\n        raise ValueError(\"The parameter should be even\")\n    even_list = [i for i in range(0, n) if i % 2 == 0]\n    sum_squares = 0\n    for x in even_list:\n        sum_squares += x * x\n    return sum_squares\n\n", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum = sum + i**2\n    return sum", "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum_sqr = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_sqr += i*i\n    return sum_sqr\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\nfrom math import gcd\n\n\ndef modular_inverse(numbers, p, m):\n    \"\"\"\n    >>> modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n    True\n    \"\"\"\n    gcd_val = gcd(p, m)\n    if gcd_val == 1:\n        return (pow(numbers[0], m - 2, m))\n    else:\n        raise Exception('gcd of ' + str(p) + ' and ' + str(m) + ' is not 1.')\n\n\ndef test():\n    assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nimport math\n\ndef modular_inverse(arr, p, mod):\n    inverse_dict = {}\n    for i in range(p):\n        if inverse_dict.get(i, None) is None:\n            inverse_dict[i] = math.gcd(i, mod)\n    count = 0\n    for i in arr:\n        if inverse_dict.get(i, None) is None:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\n# my solution\ndef modular_inverse(arr, p, mod):\n    if p < mod:\n        return reduce(lambda x, y: x*y % mod, (mod - 1, x, y) for x, y in enumerate(arr) if x != y)\n    if mod < p:\n        raise ValueError(\"p is bigger than mod.\")\n    mod = p\n    res = mod\n    while len(arr) > 1:\n        a = arr.pop()\n        if a >= mod:\n            a -= mod\n        res = res * a % mod\n    if arr:\n        return res % mod\n    return res\n\n# alternative solution\ndef modular_inverse_alt(arr, p, mod):\n    a = arr[0]\n    res = 1\n    for i in arr[1:]:\n        res = (res * a) % mod\n        a = (a * a) % mod\n    return res\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(a, p, m):\n    if not a[-1]: return 1\n    x, y, u, v = 0, 1, 1, a[-1]\n    while u < m:\n        t = x - y * u\n        x, y, u, v = y, x - y * u, u + v, t\n    if x > m: x -= m\n    return x\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\nfrom euler_math import modular_inverse\n\n\ndef modular_inverse_count(arr, prime):\n    mod_inv_sum = 0\n    for num in arr:\n        inv = modular_inverse(num, prime)\n        if inv == num:\n            mod_inv_sum += 1\n\n    return mod_inv_sum\n\n\ndef test_modular_inverse_count():\n    assert modular_inverse_count([1, 6, 4, 5], 4) == 2\n    assert modular_inverse_count([5, 2, 1], 10) == 2\n    assert modular_inverse_count([10, 1, 4], 2) == 0\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(A, p, m):\n    result = []\n    for i in range(len(A)):\n        result.append(pow(A[i], p - 2, m))\n    return result\n\n\ndef count_elements_with_modulus(A, p, m):\n    return sum(modular_inverse(A, p, m) == [1] * len(A))\n\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, m):\n  n = len(arr)\n  num = 1\n  for i in range(n):\n    num = (num * arr[i]) % p\n  for i in range(n - 1):\n    num = (num * num) % p\n  for i in range(n):\n    num = (num * arr[i]) % p\n  return num % m if num != 0 else -1\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom math import sqrt\n\ndef modular_inverse(array, p, mod):\n    result = 0\n    for x in array:\n        for i in range(1, p):\n            if (i * (x % mod) + mod) % mod == 0:\n                result = (i * (x % mod) + mod) % mod\n                break\n    return result\n\ndef count_invertible(array, p, mod):\n    return 1 if modular_inverse(array, p, mod) == 1 else 0\n\ndef test_count_invertible():\n    assert count_invertible([ 1, 6, 4, 5 ], 4, 7) == 2\n\ndef test_modular_inverse():\n    assert modular_inverse(10, 11, 100) == 89\n    assert modular_inverse(10, 11, 101) == 32\n    assert modular_inverse(10, 11, 102) == 99\n\ntest_count_invertible()\ntest_modular_inverse()", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, modulo=None):\n    if modulo is None:\n        modulo = p\n    x = 0\n    y = 1\n    for a in arr:\n        x, y = y, (a * x + y) % modulo\n    return y\n", "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, m):\n    \"\"\"\n    Calculate modular inverse using extended euclidean algorithm\n    \"\"\"\n    if p >= m:\n        return None\n    if p == 0:\n        return m\n    gcd, x, y = extended_gcd(p, m)\n    return x % m\n\ndef extended_gcd(a, b):\n    \"\"\"\n    Calculate extended euclidan algorithm\n    \"\"\"\n    if a == 0:\n        return (b, 0, 1)\n    gcd, x, y = extended_gcd(b % a, a)\n    return (gcd, y - (b // a) * x, x)\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(n):\n    count = 0\n    for i in range(1, n):\n        if i % 2 != 0:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n  \"\"\"\n  >>> odd_Days(2009)\n  25\n  >>> odd_Days(1975)\n  26\n  >>> odd_Days(1999)\n  26\n  >>> odd_Days(2014)\n  27\n  \"\"\"\n  n = 0\n  if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n    n = 29\n  else:\n    n = 28\n  return 365 + n - (year % 2)\n\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(n):\n\ttotal = 0\n\tfor i in range(1,n+1):\n\t\tif i%2 != 0:\n\t\t\ttotal += 1\n\treturn total", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    count = 0\n    for i in range(1, year+1):\n        if i % 2 != 0:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    # Your code here\n    return\n\n# A test case", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    return 365 - (year % 4) - (year % 100) + (year % 400)\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n#test case", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    num_odd_days = 0\n    for i in range(365):\n        if year % 2 == 0:\n            num_odd_days += 1\n        year += 1\n    return num_odd_days\n", "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    if year % 2 == 0:\n        return 0\n    else:\n        if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n            return 366\n        else:\n            return 365\n\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom collections import deque\ndef max_length(lists):\n    # Your code here\n    max_len = 0\n    max_list = []\n    for i in range(len(lists)):\n        if lists[i]:\n            temp = []\n            temp.append(lists[i][0])\n            k = 1\n            while lists[i][k]:\n                temp.append(lists[i][k])\n                k += 1\n            if len(temp)>max_len:\n                max_len = len(temp)\n                max_list = temp\n    return max_len, max_list", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    \"\"\"\n    O(n^3)\n    :param lists: a list of lists\n    :return: the maximum length of the lists and the list that has that length\n    \"\"\"\n    result = (0, None)\n    for list in lists:\n        for number in list:\n            for number2 in list:\n                if number != number2:\n                    for number3 in list:\n                        if number != number2 and number != number3:\n                            if len(set([number, number2, number3])) == 3:\n                                if len(list) > result[0]:\n                                    result = (len(list), list)\n    return result\n\ndef test_max_length():\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    for list in lists:\n        if len(list) > max_length[1]:\n            max_length[1] = list\n            max_length[0] = len(list)\n    return max_length\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n# Solution 1:\ndef max_length(l):\n    return max([(len(lst), lst) for lst in l])\n\n# Solution 2:\ndef max_length(l):\n    return max(map(len, l), key=l.index)\n\n# Solution 3:\ndef max_length(l):\n    return max(l, key=len)\n\n# Solution 4:\ndef max_length(l):\n    return max(map(len, l), key=l.index)", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(input_list):\n    temp = 0\n    res = []\n    for i in input_list:\n        if len(i) > temp:\n            temp = len(i)\n            res = i\n    return temp, res\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom itertools import accumulate\nfrom typing import Tuple\n\n\ndef max_length(my_list: list) -> Tuple[int, list]:\n    length_list = [len(sub_list) for sub_list in my_list]\n    max_length = max(length_list)\n    length_list.sort(reverse=True)\n\n    index_list = []\n    for i in range(len(length_list)):\n        if length_list[i] == max_length:\n            index_list.append(i)\n\n    return max_length, my_list[index_list[0]]\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lists):\n    # your code here\n    sorted_lists = sorted(lists, key=len)\n    max_len = 0\n    max_list = None\n    for i in range(len(lists)):\n        if len(lists[i]) >= max_len:\n            max_len = len(lists[i])\n            max_list = lists[i]\n    return max_len, max_list\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nimport operator\nfrom functools import reduce\n\n\ndef max_length(lists):\n    def reducer(a, b):\n        if len(a) > len(b):\n            return a\n        else:\n            return b\n\n    return reduce(reducer, lists)\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nfrom typing import List\n\n\ndef max_length(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    :param lists:\n    :return:\n    \"\"\"\n    length = 0\n    final_list = []\n    for i in lists:\n        if len(i) > length:\n            length = len(i)\n            final_list = i\n    return length, final_list\n\n", "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n\n\ndef max_length(arr: List[List[int]]) -> tuple:\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n    \"\"\"\n    max_length = 0\n    max_length_list = []\n    for i in arr:\n        length = len(i)\n        if length == max_length:\n            max_length_list.append(i)\n        elif length > max_length:\n            max_length = length\n            max_length_list = [i]\n    return (max_length, max_length_list)\n\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    Time: O(nk)\n    \"\"\"\n    if n < 2 or k < 2:\n        return 1\n\n    res = 0\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if j - i >= k - 2:\n                break\n            res += 2 ** (j - i - 1) * count_no_of_ways(i + 1, j)\n\n    return res\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nimport itertools\n\ndef count_no_of_ways(n, k):\n    \"\"\"\n    n - number of posts\n    k - number of paint colors\n    \"\"\"\n    combs = list(itertools.combinations(range(1, k+1), 2))\n    res = 1\n    for c in combs:\n        res = res * (n - 1) // (k - len(c) + 1)\n    \n    return res\n    ", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    ways = 0\n    for i in range(1, k+1):\n        ways += count_no_of_ways(n-1, k)\n    return ways\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    dp = [[0] * k for i in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(k):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    return dp[-1][-1]\n\ndef count_no_of_ways_mem(n, k):\n    dp = [[0] * k for i in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    return dp[-1][-1]\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n\n    if k == 1:\n        return 2\n    elif k == 2:\n        return 5\n\n    ways = [0]*(n+1)\n    ways[0] = 0\n    ways[1] = 2\n\n    for i in range(2, n+1):\n        ways[i] = ways[i-1] + ways[i-2]\n        ways[i] %= 1000000007\n\n    return ways[n]\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return k\n    if k == 1:\n        return k\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-2, k)\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nfrom typing import List\n\ncolors = ['red', 'blue', 'green', 'black']\n\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n    dp[0][0] = 1\n\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i - 1][j]\n            for c in range(k):\n                if dp[i - 1][j] > 0 and colors[j] != colors[c]:\n                    dp[i][j] += dp[i - 1][j]\n\n    return dp[-1][-1]\n\n\ndef count_no_of_ways_bottom_up(n: int, k: int) -> int:\n    dp = [0 for _ in range(k)]\n    dp[0] = 1\n\n    for i in range(1, n):\n        for j in range(k):\n            dp[j] += dp[j] if colors[j] != colors[j - 1] else 0\n\n    return dp[-1]\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nfrom functools import lru_cache\n\n\n@lru_cache()\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 1:\n        return k\n    if n == 2:\n        return k * (k - 1) // 2\n    return k * count_no_of_ways(n - 1, k) + (k - 1) * count_no_of_ways(n - 2, k)\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nfrom typing import List\n\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n < 1 or k < 1:\n        return 0\n    if n == 1 or k == 1:\n        return k\n\n    ways = [[0 for _ in range(k)] for _ in range(n)]\n\n    ways[0][0] = 1\n    ways[1][0] = 1\n    ways[1][1] = 1\n\n    for i in range(2, n):\n        for j in range(k):\n            ways[i][j] = ways[i - 1][j]\n            if i > 1:\n                ways[i][j] += ways[i - 2][j]\n            if j > 0:\n                ways[i][j] += ways[i - 1][j - 1]\n            ways[i][j] %= 1000000007\n\n    return ways[n - 1][k - 1]\n\n", "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nimport itertools\n\ndef count_no_of_ways(n, k):\n    if k == 1:\n        return 2 ** n\n    elif k == 2:\n        return 2 ** n - (n - 1)\n    else:\n        return 2 ** n - (k - 1) * (n - 1)\n\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\n# TODO: Write a program to find quotient of two numbers.\n\n\ndef find(a,b):\n    quotient = 0\n    while a >= b:\n        quotient += 1\n        a = a - b\n    return quotient\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(number, divisor):\n    return number / divisor\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    \"\"\"\n    inputs : 2 numbers\n    return : quotient of 2 numbers\n\n    \"\"\"\n    if a > b:\n        c = a\n    else:\n        c = b\n    while c >= b:\n        q = a//b\n        if a == b * q:\n            return q\n        c = c - q\n        a = b\n        b = c\n    return -1\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    return a//b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a, b):\n    if (a % b == 0):\n        return a / b\n    else:\n        return False\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(n1,n2):\n    return n1 // n2\n\ndef test_function(test_case):\n    n1 = test_case[0]\n    n2 = test_case[1]\n    solution = test_case[2]\n    output = find(n1,n2)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(n,d):\n    \"\"\"\n    Returns the quotient of two numbers\n    Parameters: n,d\n    \"\"\"\n    res = []\n    if n > 0 and d > 0:\n        res = n//d\n        return res\n    elif n < 0 and d < 0:\n        res = n//d\n        return -res\n    elif n < 0 and d > 0:\n        res = -(n//d)\n        return res\n    elif n > 0 and d < 0:\n        res = -(n//d)\n        return res\n    else:\n        return \"Invalid input\"\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a, b):\n    return a/b\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(num1, num2):\n    return num1 / num2\n\n", "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\nimport unittest\n\ndef find(n, d):\n    return n // d\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a, b):\n    return math.sqrt(a ** 2 + b ** 2)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    import math\n    c = math.sqrt(a**2 + b**2)\n    return 2 * c\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a, b):\n    print(a,b)\n    return a ** 2 + b ** 2\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    from math import sqrt\n    return (sqrt(a**2+b**2) - a)\n\n\n# -\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b):\n    return a**2+b**2-2*a*b/(a+b)\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\n\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Returns the third side of a right angled triangle given two sides\n    a and b\n    \"\"\"\n    # TODO: Fill this in to compute the third side\n    # given two sides.\n    c = math.sqrt(a ** 2 + b ** 2)\n    return c\n\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(x,y):\n    import math\n    a = math.sqrt(x**2 + y**2)\n    return math.sqrt(a**2 - x**2)\n\n# def other_side(x,y):\n#     c = math.sqrt(x**2 + y**2)\n#     if x + y == c:\n#         return c\n#     return math.sqrt(c**2 - x**2)\n\n# def otherside(x,y):\n#     a = math.sqrt(x**2 + y**2)\n#     c = a - x\n#     return c\n\n# def otherside(x,y):\n#     return math.sqrt(x**2 + y**2) - x\n\n# def otherside(x,y):\n#     return math.sqrt(x**2 + y**2) - x - y\n\n# def otherside(x,y):\n#     return math.sqrt(x**2 + y**2) - x - y + y\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    return a**2 + b**2\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    return a**2+b**2-a*b\n", "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculate the third side for right angled triangle given the other two sides.\n\n    :param a: integer\n    :param b: integer\n    :return: float\n    \"\"\"\n    return a**2 + b**2 - b**2/(a+b)"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(arr):\n    if type(arr[0]) == str:\n        return max([int(i) for i in arr])\n    else:\n        return max(arr)\n\n#----------------------------------------------------------------------------------\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(my_list):\n    max_val = my_list[0]\n    for val in my_list:\n        if val > max_val:\n            max_val = val\n    return max_val\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(x):\n  x = [int(i) if i.isnumeric() else i for i in x]\n  return max(x)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\nfrom functools import reduce\n\ndef max_val(list_of_inputs):\n    \"\"\"\n    Takes a list of inputs and returns the maximum value in the list.\n    \"\"\"\n    def reducer(a, b):\n        return a if a > b else b\n    \n    return reduce(reducer, list_of_inputs)\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(num_list):\n    \"\"\"\n    num_list: heterogeneous list\n    return: the maximum value in the list\n    \"\"\"\n    list_type = type(num_list[0])\n    list_max = num_list[0]\n    for num in num_list:\n        if list_type == type(num):\n            if num > list_max:\n                list_max = num\n        elif num > list_max:\n            list_max = num\n    return list_max\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(arr):\n  max_v = arr[0]\n  for i in arr:\n    if i > max_v:\n      max_v = i\n  return max_v\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(input_list):\n    max_val = input_list[0]\n    for item in input_list:\n        if item > max_val:\n            max_val = item\n    return max_val\n\n", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(alist):\n    \"\"\"\n    Your code goes here\n    \"\"\"\n    max_value = alist[0]\n    for value in alist:\n        if value > max_value:\n            max_value = value\n    return max_value\n\n# Test case", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(l):\n    \"\"\"\n    :param l: list of mixed type\n    :return: max value of l\n    \"\"\"\n    if type(l)==list:\n        if len(l)==0:\n            raise ValueError('List is empty')\n        if len(l)==1:\n            return l[0]\n        else:\n            if type(l[0])!=list:\n                if type(l[0])!=str:\n                    return max(l)\n                elif type(l[0])==str:\n                    l.sort()\n                    return l[-1]\n            else:\n                l.sort()\n                l_max=l[0]\n                l_max_index=0\n                for i in range(1,len(l)):\n                    if type(l[i])!=str:\n                        if l[i]>l_max:\n                            l_max=l[i]\n                            l_max_index=i\n                    elif type(l[i])==str:\n                        l_max_index=i\n                return l[l_max_index]\n    elif type(l)==tuple:\n        if len(l)==0:\n            raise ValueError('List is empty')\n        if len(l)==1:\n            return l[0]\n        else:\n            if type(l[0])!=tuple:\n                if type(l[0])!=str:\n                    return max(l)\n                elif type(l[0])==str:\n                    l.sort()\n                    return l[-1]\n            else:\n                l.sort()\n                l_max=l[0]\n                l_max_index=0\n                for i in range(1,len(l)):\n                    if type(l[i])!=str:\n                        if l[i]>l_max:\n                            l_max=l[i]\n                            l_max_index=i\n                    elif type(l[i])==str:\n                        l_max_index=i\n                return l[l_max_index]\n    elif type(l)==dict:\n        if len(l)==0:\n            raise ValueError('List is empty')\n        if len(l)==1:\n            return l[list(l.keys())[0]]\n        else:\n           ", "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\nimport pytest\n\ndef max_val(mylist):\n    mylist = [int(i) for i in mylist]\n    mylist = [float(i) for i in mylist]\n    mylist = [str(i) for i in mylist]\n    mylist = [bool(i) for i in mylist]\n    mylist = [i for i in mylist if i]\n    mylist = [i for i in mylist if not i]\n    print(mylist)\n    return mylist[-1]\n\n\ndef test_max_val():\n    assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n    assert max_val([5, 1, 2, 3, 4, 5, 1, 2, 3])==5\n    assert max_val([1, 's', 2, 't', 4, 'f', 1, 'b', 'c'])=='c'\n\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum_div = 1\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            sum_div += i+n/i\n            print(i+n/i)\n    return sum_div\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    divisors = [1]\n    if n in [1,2,3,4]:\n        return n\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i==0:\n                divisors.append(i)\n                divisors.append(int(n/i))\n    return sum(divisors)\n\ndef test_sum_div():\n    assert sum_div(8)==7\ntest_sum_div()\n\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    s=0\n    for i in range(1,n+1):\n        if n%i==0:\n            s+=i\n    return s\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(num):\n    total = 1\n    i = 1\n    while i <= num:\n        if num % i == 0:\n            total += i\n            if i != num:\n                total += num\n        i += 1\n    return total\n\ndef sum_div_alt(num):\n    i = 1\n    total = 1\n    while i <= num:\n        if num % i == 0:\n            total += i\n            if i != num:\n                total += num\n        i += 1\n    return total\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\nimport math\ndef sum_div(n):\n    div = set([1])\n    s = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            div.add(i)\n            div.add(n//i)\n            s += i+n//i\n    for i in div:\n        if n%i == 0:\n            s += i\n    return s\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\nimport math\n\ndef sum_div(n):\n    div_list = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            div_list.append(i)\n            if n/i == math.floor(n/i):\n                div_list.append(math.floor(n/i))\n    return sum(div_list)\n\n\ndef test_sum_div():\n    assert sum_div(8)==7\n\n# -------------------------", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n\tresult = 0\n\tfor i in range(1,n+1):\n\t\tif n%i == 0:\n\t\t\tresult += i\n\treturn result\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(x):\n    s = 0\n    for i in range(1,x+1):\n        if x%i==0:\n            s += i\n    return s\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n\tsum = 1\n\tfor i in range(1,n+1):\n\t\tif n%i == 0:\n\t\t\tsum += i\n\treturn sum\n", "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    return sum(range(1, n+1) if n % i == 0 else 0 for i in range(1, n+1))\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]>arr[j]):\n                count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\ndef get_Inv_Count_v2(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n                break\n    return count\n\ndef get_Inv_Count_v3(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n                break\n    return count\n\ndef get_Inv_Count_v4(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n                break\n    return count\n\ndef get_Inv_Count_v5(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n                break\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(input_list, length):\n    if length == 0 or length == 1:\n        return 0\n    # divide into 2 halves\n    input_list_left = input_list[:length//2]\n    input_list_right = input_list[length//2:]\n    # count inversions in left half\n    input_list_left_inv_count = get_Inv_Count(input_list_left, length//2)\n    # count inversions in right half\n    input_list_right_inv_count = get_Inv_Count(input_list_right, length-length//2)\n    # return the total number of inversions\n    return input_list_left_inv_count + input_list_right_inv_count + sum(map(lambda x: x > input_list[length//2], input_list_left))\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]>arr[j]):\n                count+=1\n    return count\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(a,n):\n    l = [0]*(n+1)\n    return count_Inv(a,n,l)\n\ndef count_Inv(a,n,l):\n    l[1] = 0\n    for i in range(2,n+1):\n        l[i] = l[i-1] + 1\n\n    count = 0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if a[j] < a[i]:\n                count += l[i]\n\n    return count", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    arr.sort()\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]>arr[j]):\n                inv_count += 1\n    return inv_count\n\n# Driver Code\narr = [1,20,6,4,5]\nn = len(arr)", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(A,n):\n\t#get_Inv_Count(A,n)\n\tl = len(A)\n\ti = 0\n\tj = n-1\n\tcount = 0\n\twhile(i < j):\n\t\tif(A[i] < A[j]):\n\t\t\ti += 1\n\t\telse:\n\t\t\tcount += j-i\n\t\t\tj -= 1\n\treturn count\n\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, n):\n    if n == 1:\n        return 0\n    else:\n        return get_Inv_Count(arr[1:],n-1) + get_Inv_Count(arr[:n-1],n-1) + get_Inv_Count(arr[1:n-1],n-2)\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr,n):\n    # Your code here\n    # arr is an array of size n\n    # Initialize a variable Inv_Count to 0.\n    # loop through all the elements of arr.\n    # If the element at index i is larger than the element at index i+1,\n    # add 1 to Inv_Count.\n    Inv_Count = 0\n    for i in range(0,n-1):\n        if arr[i]>arr[i+1]:\n            Inv_Count = Inv_Count +1\n    return Inv_Count\n\ndef main():\n    print(get_Inv_Count([1,20,6,4,5],5))\n", "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(array, n):\n    # insert a lot of code here\n    result = 0\n    for i in range(n):\n        for j in range(i):\n            if array[i] > array[j]:\n                result += 1\n    return result\n\n\n# In[ ]:\n\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(list_input):\n    '''Returns a list of the elements of a given nested list'''\n    output = []\n    for sublist in list_input:\n        output.extend(sublist)\n    return output\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    if lst == []:\n        return []\n\n    if type(lst[0]) == int:\n        return lst\n\n    new_lst = []\n    for i in lst:\n        if type(i) == int:\n            new_lst.append(i)\n        else:\n            for j in i:\n                new_lst.append(j)\n    return new_lst\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(L):\n    return list(itertools.chain(*L))\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\nfrom typing import List, Union\n\n\ndef flatten_list(arr: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    :param arr: the given nested list structure\n    :return: the flattened list\n    \"\"\"\n    return_list = []\n    for i in range(len(arr)):\n        if type(arr[i]) == int:\n            return_list.append(arr[i])\n        elif type(arr[i]) == list:\n            for j in arr[i]:\n                return_list.append(j)\n    return return_list", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(l):\n    flat_list = []\n    for element in l:\n        if isinstance(element, list):\n            for sub_element in element:\n                flat_list.append(sub_element)\n        else:\n            flat_list.append(element)\n    return flat_list", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(input_list):\n    flat_list = []\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            flat_list = flat_list + flatten_list(input_list[i])\n        else:\n            flat_list.append(input_list[i])\n    return flat_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    if isinstance(lst, list):\n        return [e for sublist in lst for e in flatten_list(sublist)]\n    else:\n        return [lst]\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(l):\n    res = []\n    for item in l:\n        if isinstance(item, list):\n            res += flatten_list(item)\n        else:\n            res.append(item)\n    return res\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    new_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list\n", "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if type(item) is list:\n            flat_list += item\n        else:\n            flat_list.append(item)\n    return flat_list\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    pass", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(a, b):\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in a:\n        for j in b:\n            if i in j:\n                l1.append(i)\n                l2.append(j)\n    for i in l1:\n        for j in l2:\n            if j in i:\n                l3.append(i)\n    return l3", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list_1, list_2):\n    list_1 = [item for sublist in list_1 for item in sublist]\n    list_2 = [item for sublist in list_2 for item in sublist]\n    return [item for item in list_1 if item in list_2]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    return [i for i in list1 if i in list2]\n\n# Test cases", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(a, b):\n    res = []\n    for b_elem in b:\n        if set(b_elem) & set(a):\n            res.append(b_elem)\n    return res", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1,list2):\n    list3=[]\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    return list3\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list_one, list_two):\n    dict = {}\n    for i in range(len(list_one)):\n        for j in range(len(list_two)):\n            if list_one[i] in list_two[j]:\n                if list_two[j] in dict:\n                    dict[list_two[j]].append(list_one[i])\n                else:\n                    dict[list_two[j]]=[list_one[i]]\n                break\n    for key, value in dict.items():\n        dict[key] = list(set(value))\n    return dict.values()\n\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    return [[element] for element in list1 if element in list2]\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    result = []\n    for list1_elem in list1:\n        if list1_elem in list2:\n            result.append(list1_elem)\n    return result\n", "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list_1, list_2):\n    return [x for x in list_1 if x in list_2]\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(s):\n    s = set(s)\n    res = []\n    for name, point in s:\n        if len(res)==0:\n            res.append((name, point))\n        elif point>res[0][1]:\n            res = [res[0],(name, point)]\n        elif point==res[0][1]:\n            res.append((name, point))\n    return res[0]\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    # Your code here\n    pass\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(l):\n    return max(l, key=lambda t: sum(t))\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    return max(tuples, key=lambda x: (x[1], -x[0]))\n\ndef max_aggregate(tuples):\n    return max(tuples, key=lambda x: x[1] - x[0])\n\ndef max_aggregate(tuples):\n    return max(tuples, key=lambda x: (x[1], x[0]))\n\ndef max_aggregate(tuples):\n    return max(tuples, key=lambda x: x[1])\n\ndef max_aggregate(tuples):\n    tuples_sorted = sorted(tuples)\n    return tuples_sorted[-1]\n\ndef max_aggregate(tuples):\n    return max(tuples, key=lambda x: x[1])\n\ndef max_aggregate(tuples):\n    return max(tuples, key=lambda x: x[1] + x[0])\n\ndef max_aggregate(tuples):\n    return max(tuples, key=lambda x: (x[1],x[0]))\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(data):\n    data = dict(data)\n    max_val = 0\n    for key, value in data.items():\n        max_val = max(max_val, value)\n    return(max_val, key)", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuple_list):\n    tuples_dict = {}\n    for tup in tuple_list:\n        tuples_dict[tup[0]] = (tup[1], tup[0])\n    tuples_dict = dict(sorted(tuples_dict.items(), key=operator.itemgetter(1)))\n    return tuples_dict[0]\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(scores):\n    return max(scores, key=lambda x: (x[1], -x[0]))\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(student_tuples):\n    aggregate = {}\n    for tuple in student_tuples:\n        aggregate.update({tuple[0]: aggregate.get(tuple[0],0)+tuple[1]})\n    return max(aggregate.items(), key=operator.itemgetter(1))[0]\n", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(l):\n    res=0\n    for i in l:\n        res+=i[1]\n    return l[l.index(max(l, key=lambda i:i[1]))]", "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(grades):\n    if grades:\n        return max(grades, key=lambda x: (x[1],x[0]))\n    else:\n        return None"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\n# Solution\ndef count_binary_seq(n):\n    # base case\n    if n == 1:\n        return 2\n    \n    # recurrence relation\n    return (count_binary_seq(n-1) + count_binary_seq(n-2)) % 1000000007\n    \n# Test", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    count = 0\n    for i in xrange(2**(n-1), 2**n):\n        count += 1\n    return count\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    assert n > 0, 'n must be greater than 0'\n    count = 0.0\n    for binary_seq in itertools.product(range(2), repeat=n):\n        bits = [binary_seq[i] for i in range(n)]\n        if bits[:n] == bits[-n:]:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    # Find total sum of first n bits.\n    s1 = sum(bin(i)[2:].zfill(n) for i in xrange(2**n))\n    \n    # Find total sum of last n bits.\n    s2 = sum(bin((2**n) - i)[2:].zfill(n) for i in xrange(2**n))\n    \n    # Find count of binary sequences having same sum.\n    return float(s1==s2)\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nfrom functools import reduce\n\ndef get_binary_seq_sum(n, i):\n    if n == 0:\n        return 0\n    else:\n        if i > 0:\n            return get_binary_seq_sum(n - 1, i - 1) + get_binary_seq_sum(n - 1, i)\n        else:\n            return get_binary_seq_sum(n - 1, i)\n\ndef count_binary_seq(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    def func(a, b):\n        return a + b\n\n    return reduce(func, [get_binary_seq_sum(n, i) for i in range(n)])\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return 2 * count_binary_seq(n // 2)\n    else:\n        return count_binary_seq((n - 1) // 2) + count_binary_seq((n + 1) // 2)\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nfrom itertools import combinations\n\ndef count_binary_seq(n):\n    bit_combo_comb = combinations(range(2**n), n)\n    bit_sum_combos = (sum(bit_combo) for bit_combo in bit_combo_comb)\n    return len(list(filter(lambda x: x[0] == x[1], bit_sum_combos)))\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    num_ones = sum(range(n))\n    for i in range(1 << n):\n        if (num_ones - i) == sum(reversed(list(bin(i)[2:].zfill(n)))):\n            return 1.0\n    return 0.0\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nimport itertools\n\n\ndef count_binary_seq(n):\n    \"\"\"\n    :param n: integer\n    :return: integer\n    \"\"\"\n    def count_binary_seq_inner(n):\n        \"\"\"\n        :param n: integer\n        :return: integer\n        \"\"\"\n        def _combine(l1, l2):\n            return [tuple(t) for t in list(itertools.product(l1, l2))]\n\n        def _check_sum_equal(binary_seq):\n            \"\"\"\n            :param binary_seq: list\n            :return: boolean\n            \"\"\"\n            return (sum(binary_seq[:n]) == sum(binary_seq[-n:]))\n\n        def _check_binary(binary_seq):\n            \"\"\"\n            :param binary_seq: list\n            :return: boolean\n            \"\"\"\n            return all([s == '1' or s == '0' for s in binary_seq])\n\n        def _get_binary_seq(binary_seq):\n            \"\"\"\n            :param binary_seq: list\n            :return: list\n            \"\"\"\n            return [int(s) for s in binary_seq]\n\n        # Iterate through every combination of last n binary digits\n        for binary_seq in _combine(['0', '1'], ['0', '1']):\n            if _check_binary(binary_seq):\n                if _check_sum_equal(binary_seq):\n                    yield _get_binary_seq(binary_seq)\n\n    return sum(count_binary_seq_inner(n))\n\n", "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    if n==0:\n        return 1.0\n    else:\n        return (count_binary_seq(n-1) + count_binary_seq(n-1) * 2)\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dictionary):\n    if type(dictionary) is not dict:\n        return 0\n    else:\n        return 1 + max(dict_depth(value) for value in dictionary.values())", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dict):\n    # your code here\n    d = 0\n    if dict:\n        l = [dict]\n        while l:\n            n = len(l)\n            for i in range(n):\n                e = l.pop()\n                if e:\n                    if isinstance(e,dict):\n                        l.extend(e.values())\n                    else:\n                        d += 1\n            if n == len(l):\n                raise Exception(\"a cycle occurs\")\n    return d\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(obj):\n    if isinstance(obj,dict):\n        l=0\n        for x in obj:\n            l = max(l,dict_depth(obj[x]))\n        return l+1\n    return 0", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(input_dict):\n    if isinstance(input_dict, dict):\n        if len(input_dict) == 0:\n            return 1\n        else:\n            return 1 + max([dict_depth(key) for key in input_dict.values()])\n    else:\n        return 0\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if type(d) == dict:\n        return max(1, 1+max(map(dict_depth, d.values())))\n    else:\n        return 0\n\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0\n\ndef test():\n    assert dict_depth({'a': 1}) == 1\n    assert dict_depth({'a': {'b': 1}}) == 2\n    assert dict_depth({'a': {'b': {'c': 1}}}) == 3\n    assert dict_depth({'a': {'b': {'c': {'d': 1}}}}) == 4\n    assert dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 1\n    assert dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == 1\n    assert dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}) == 2\n    assert dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}) == 2\n    assert dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}) == 3\n    assert dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}) == 3\n    assert dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}) == 4\n   ", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(value) for value in d.values()])\n    else:\n        return 0", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dic):\n    if type(dic) != dict:\n        return 0\n    else:\n        return 1 + max(map(dict_depth, dic.values()))\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(input_dict):\n    return max([1] + [1 + dict_depth(value) for key,value in input_dict.items()])\n", "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dictionary):\n    if type(dictionary) == dict:\n        return 1 + max(dict_depth(v) for v in dictionary.values())\n    else:\n        return 1\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(N):\n    # get the binary representation\n    bin_rep = bin(N)[2:]\n    # get the set bits\n    set_bits = set()\n    for i in range(len(bin_rep)):\n        if bin_rep[i] == \"1\":\n            set_bits.add(i)\n    # return the most significant bit number which is also a set bit\n    max_bit = 0\n    for i in range(len(set_bits)):\n        if set_bits[i] > max_bit:\n            max_bit = set_bits[i]\n    return max_bit\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    x=bin(n)[2:]\n    x=list(x)\n    x[::-1]\n    for i in range(len(x)):\n        if x[i] == \"1\":\n            return i\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    if n % 2 == 0:\n        return 0\n    else:\n        bit_position = 0\n        while n % 2 == 0:\n            n = n / 2\n            bit_position += 1\n        return bit_position - 1\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\n# T(n) = O(n)\ndef set_Bit_Number(n):\n    bin_n = bin(n)\n    if n == 0:\n        return 0\n    i = 0\n    for x in bin_n[2:]:\n        if x == '1':\n            i += 1\n        else:\n            break\n    return i\n\n# T(n) = O(log(n))\ndef set_Bit_Number_Optimized(n):\n    bin_n = bin(n)\n    if n == 0:\n        return 0\n    i = 0\n    while bin_n[i] == '0':\n        i += 1\n    return i\n\ndef main():\n    print(set_Bit_Number(6))\n    print(set_Bit_Number_Optimized(6))\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n\ti = 0\n\twhile(1):\n\t\tif(n & 1):\n\t\t\tbreak\n\t\telse:\n\t\t\tn = n >> 1\n\t\t\ti += 1\n\treturn i\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    a = bin(n)[2:]\n    i = 0\n    b = 0\n    for j in a:\n        if j == \"1\":\n            b += 1\n        if b == 1:\n            i = int(i + j) * 2\n    return i\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    bits = bin(n)[2:]\n    for i, x in enumerate(bits):\n        if x == '1':\n            return len(bits) - i - 1\n", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n  i=0\n  while n>0:\n    if(n&(1<<i)):\n      return i\n    i+=1\n  ", "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    if n <= 0:\n        return 0\n    else:\n        return set_Bit_Number(n >> 1) + 1 if (n & 1) == 1 else set_Bit_Number(n >> 1)\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr1,arr2):\n    count1 = 0\n    count2 = 0\n    for i in range(len(arr1)):\n        if arr1[i] > arr2[i]:\n            count1 += 1\n        elif arr1[i] < arr2[i]:\n            count2 += 1\n    if count1 == count2:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(a,b):\n    a=a.copy()\n    b=b.copy()\n    #print(a,b)\n    a.sort()\n    b.sort()\n    #print(a,b)\n    #print(\"a\",len(a))\n    #print(\"b\",len(b))\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        #print(a[i],b[i])\n        if a[i] > b[i]:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef countInv(arr1, arr2):\n    inv1 = 0\n    inv2 = 0\n    for i in range(len(arr1)):\n        if arr1[i] > arr2[i]:\n            inv1 += 1\n        elif arr2[i] > arr1[i]:\n            inv2 += 1\n    if inv1 == inv2:\n        return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\nfrom collections import Counter\n\n# Time: O(n)\n# Space:O(n)\ndef solve(arr1,arr2):\n    arr1_counter = Counter(arr1)\n    arr2_counter = Counter(arr2)\n    \n    return arr1_counter == arr2_counter", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr1, arr2):\n    arr1 = list(arr1)\n    arr2 = list(arr2)\n    arr1.sort()\n    arr2.sort()\n    count1 = 0\n    count2 = 0\n    for i in range(0, len(arr1)):\n        if arr1[i] > arr2[i]:\n            count1 += 1\n    for i in range(0, len(arr2)):\n        if arr2[i] > arr1[i]:\n            count2 += 1\n\n    if count1 == count2:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(a,b):\n    if len(a) != len(b):\n        return False\n    d = {}\n    for i in range(len(a)):\n        if a[i] in d:\n            if b[i] not in d[a[i]]:\n                return False\n        else:\n            if b[i] in d:\n                return False\n            d[a[i]] = []\n    return True", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\nfrom collections import Counter\ndef solve(arr,n):\n    count1=0\n    count2=0\n    for i in range(n):\n        count1+=abs(arr[i]-i)\n        count2+=abs(arr[i]-n-1-i)\n\n    return count1==count2\n", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\nfrom typing import List, Dict\ndef solve(nums1: List[int], nums2: List[int], N: int) -> bool:\n    counts1, counts2 = {}, {}\n    for i in nums1:\n        if i not in counts1:\n            counts1[i] = 0\n        counts1[i] += 1\n    for i in nums2:\n        if i not in counts2:\n            counts2[i] = 0\n        counts2[i] += 1\n    for key in counts1:\n        if key in counts2 and counts1[key] != counts2[key]:\n            return False\n    return True", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr1,arr2):\n    arr1.sort()\n    arr2.sort()\n    l1 = len(arr1)\n    l2 = len(arr2)\n    l12 = len(arr1) + len(arr2)\n    inv1 = 0\n    inv2 = 0\n    for i in range(0, l1):\n        for j in range(0, l2):\n            if arr1[i] > arr2[j]:\n                inv1 += 1\n    for i in range(0, l1):\n        for j in range(0, l2):\n            if arr1[i] < arr2[j]:\n                inv2 += 1\n    if inv1 == inv2:\n        return True\n    else:\n        return False\narr1 = [1,0,2]\narr2 = [1,2,0]", "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(lst1,lst2):\n    if len(lst1) != len(lst2):\n        return False\n    s = set(lst1)\n    c = 0\n    for i in lst1:\n        if i in lst2 and i in s:\n            s.remove(i)\n            c += 1\n    if len(s):\n        return False\n    return True\n"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr, m, n, d):\n    # write your code here\n    ans = 0\n    for i in m:\n        ans = ans ^ arr[(i[0]+d)%n]\n    return ans\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,arr1,index,rot):\n    arr_cpy = arr.copy()\n    for i in range(rot):\n        arr_cpy = arr_cpy[arr1[i][0]:] + arr_cpy[:arr1[i][0]]\n    return arr_cpy[index]\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,arr2,x,n):\n    if n==0:\n        return arr2[0][1]\n    return find_Element(arr[arr2[0][0]],arr2[1:],x,n-1)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(array,rotations,index,rotations_no):\n\n    temp = array[0]\n    count = 0\n    for i in range(len(array)):\n        if(i==0):\n            temp = array[count]\n        else:\n            temp = array[count]\n            temp = array[(rotations_no + count)%len(rotations)]\n            count = count + rotations[i][1]\n        if(i==index):\n            return temp\n\n    return -1\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotations,index,rotationsCount):\n    n = len(arr)\n    i = index%n\n    res = arr[i]\n    for _ in range(rotationsCount):\n        i = (i+rotations[i%n])%n\n        res = arr[i]\n    return res\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr,rotations,index,count):\n    count=count % len(arr)\n    if count==0:\n        return arr[index]\n    arr=list(arr)\n    for rotation in rotations:\n        rotation=list(rotation)\n        temp=arr[rotation[0]]\n        arr[rotation[0]]=arr[rotation[1]]\n        arr[rotation[1]]=temp\n    return find_Element(arr,rotations,index,count-1)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n# Input: Array, rotation Array, index, number of rotations\n# Output: element at index\n\n\ndef find_Element(arr, rotations, index, k):\n    # Write your code here.\n    return arr[(rotations[index][0] + k) % len(arr)]\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    rotations = test_case[1]\n    index = test_case[2]\n    k = test_case[3]\n    result = find_Element(arr, rotations, index, k)\n    if result == test_case[4]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case = [\n    ([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1, 3),\n    ([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 2, 4),\n    ([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 3, 5),\n    ([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 3, 1, 2),\n    ([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 3, 2, 3),\n    ([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 3, 3, 4)\n]\n\nfor i in range(len(test_case)):\n    test_function(test_case[i])", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr,num,i,k):\n    \n    if i >= len(arr) :\n        return None\n    elif k == 0 :\n        return arr[i]\n    else :\n        return find_Element(arr,num,num[i][1],k-1)\n", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, rotations, index, rot):\n    for i in range(len(rotations)):\n        if rotations[i][0] == index:\n            return arr[rotations[i][1]]\n\ndef test_find_Element():\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(lst,lst1,i,n):\n    if i==n:\n        return lst[lst1[i][0]]\n    if lst1[i][0]<lst1[i][1]:\n        return find_Element(lst,lst1,lst1[i][0]+1,n)\n    else:\n        return find_Element(lst,lst1,lst1[i][0]-1,n)"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    words = filter(lambda x: x[0]=='p', words)\n    return tuple(words[:2])\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    # write your code here\n    res = []\n    for i in words:\n        if i.startswith('p'):\n            res.append(i)\n    return res\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n  start_with_p = []\n  for word in words:\n    if word[0] == 'p':\n      start_with_p.append(word)\n  return start_with_p\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(arr):\n    new_arr = []\n    for i in arr:\n        if i[0] == 'p':\n            new_arr.append(i)\n    return tuple(new_arr)\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\nfrom typing import List\ndef start_withp(words:List[str]) -> List[str]:\n    return (word for word in words if word.startswith('p'))\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    return ('','')\n\n# write a function to match the words that start with letter 's' from a list of words", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    return (\n        words[0][0] == 'p',\n        words[0]\n    )", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return(word, word)\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(mylist):\n    mylist2=[]\n    for item in mylist:\n        if item.startswith('p'):\n            mylist2.append(item)\n    return mylist2\n\n", "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    words = [word for word in words if word[0] == \"p\"]\n    for word in words:\n        print(word)\n    return words\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, k, index):\n    max_sum = 0\n    for i in range(index):\n        max_sum = max(max_sum, arr[i] + max_sum_increasing_subseq(arr, n, k, i))\n    if index > k:\n        max_sum += arr[index]\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    if k==0:\n        return max_sum_increasing_subseq(arr, n, k, i-1)\n    else:\n        first_term = 0\n        second_term = 0\n        if i==k:\n            return arr[i]\n        else:\n            for j in range(i, n+1):\n                first_term = max(first_term, max_sum_increasing_subseq(arr, n, k, j-1)+arr[j])\n            second_term = max_sum_increasing_subseq(arr, n, k-1, i-1)\n            return max(first_term, second_term)\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n# My Solution\ndef max_sum_increasing_subseq(arr, n, k, i):\n    if i < 0 or i >= n:\n        return 0\n    if i == 0:\n        return arr[i]\n    if i == k:\n        return arr[i] + max_sum_increasing_subseq(arr, n, k, i-1)\n    \n    s1 = max_sum_increasing_subseq(arr, n, k, i-1)\n    s2 = arr[i] + max_sum_increasing_subseq(arr, n, k, i-1)\n    if s1 > s2:\n        return s1\n    return s2\n\n# Brute Force Solution\ndef max_sum_increasing_subseq_bruteforce(arr, n, k, i):\n    if i < 0 or i >= n:\n        return 0\n    if i == 0:\n        return arr[i]\n    if i == k:\n        return arr[i] + max_sum_increasing_subseq_bruteforce(arr, n, k, i-1)\n    \n    s1 = max_sum_increasing_subseq_bruteforce(arr, n, k, i-1)\n    s2 = arr[i] + max_sum_increasing_subseq_bruteforce(arr, n, k, i-1)\n    if s1 > s2:\n        return s1\n    return s2\n\n# Efficient Solution\ndef max_sum_increasing_subseq_efficient(arr, n, k, i):\n    if i < 0 or i >= n:\n        return 0\n    if i == 0:\n        return arr[i]\n    if i == k:\n        return arr[i] + max_sum_increasing_subseq_efficient(arr, n, k, i-1)\n    \n   ", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    # BASE CASE\n    if i == n-1:\n        return arr[i]\n\n    # TC: O(N)\n    else:\n        # TC: O(N)\n        left = max_sum_increasing_subseq(arr, n, k, i+1)\n        right = max_sum_increasing_subseq(arr, n, k, i+1)\n\n        # TC: O(N)\n        if left == 0:\n            return right\n        elif right == 0:\n            return left\n\n        # TC: O(N)\n        else:\n            return max(left + arr[i], right + arr[i])\n\n# Driver program to test above function\narr = [1, 101, 2, 3, 100, 4, 5]\nn = len(arr)\nk = 4\ni = 5\n\n# Function call", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\nfrom typing import List\n\n\ndef max_sum_increasing_subseq(arr: List[int], k: int, i: int, j: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)\n    11\n    \"\"\"\n    if k > i:\n        sub_max = max(arr[j], arr[i])\n        if j == i + 1:\n            return sub_max\n        else:\n            sub_max = max(sub_max, max_sum_increasing_subseq(arr, k, i + 1, j))\n            sub_max = max(sub_max, max_sum_increasing_subseq(arr, k, i, j - 1))\n        return sub_max\n    return 0\n\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, i, k, j):\n    if i == j:\n        return arr[i]\n    \n    max_so_far = -1*float('inf')\n    if k == 1:\n        for x in range(i, j):\n            max_so_far = max(max_so_far, arr[x])\n    else:\n        for x in range(i, j):\n            max_so_far = max(max_so_far, arr[x] + max_sum_increasing_subseq(arr, i, k-1, x))\n            \n    return max_so_far", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    # Base case\n    if (i == n):\n        return 0\n\n    # If the kth element is greater than the ith element then,\n    # we can't increase the value of increasing subsequence\n    # as the kth element is already there.\n    if (arr[k] > arr[i]):\n        return max_sum_increasing_subseq(arr, n, k + 1, i + 1)\n\n    # Otherwise, we include the kth element in increasing subsequence and add the value of this element.\n    return max_sum_increasing_subseq(arr, n, k + 1, i + 1) + arr[k]\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, k, i = map(int, input().split())\n        print(max_sum_increasing_subseq(list(map(int, input().split())), n, k, i))\n\n\nmain()", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, i, k):\n    if (i == n-1):\n        return 0\n    elif (i == n-2):\n        return max(arr[i], arr[k])\n\n    dp1 = max_sum_increasing_subseq(arr, n, i+1, k)\n    dp2 = max_sum_increasing_subseq(arr, n, i+1, k+1)\n    return max(dp1 + arr[i], dp2 + arr[k])\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, i, k):\n    max_so_far, max_ending_here = 0, 0\n    for j in range(i, n):\n        # update max_ending_here\n        max_ending_here = max(arr[j], max_ending_here + arr[j])\n        # update max_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n        # update max_ending_here with kth element\n        if j == k:\n            max_ending_here = max_ending_here + arr[j]\n    return max_so_far\n", "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    # for k=0, dp[i][0] = arr[i]\n    dp[i][0] = arr[i]\n    # for k = 1\n    for j in range(i+1, n+1):\n        # dp[j][1] = arr[j]\n        dp[j][1] = max(dp[j-1][1], arr[j])\n        # dp[j][2] = max(dp[j-2][2], dp[j-1][1], dp[j-1][2], arr[j])\n        dp[j][2] = max(dp[j-1][2], arr[j])\n        # dp[j][3] = max(dp[j-2][3], dp[j-1][1], dp[j-1][2], dp[j-1][3], arr[j])\n        dp[j][3] = max(dp[j-1][3], arr[j])\n    # for k = 2\n    for j in range(i+2, n+1):\n        # dp[j][2] = max(dp[j-1][2], dp[j-2][2], dp[j-1][1], dp[j-1][2], arr[j])\n        dp[j][2] = max(dp[j-1][2], dp[j-2][2], arr[j])\n        # dp[j][3] = max(dp[j-1][3], dp[j-2][3], dp[j-1][1], dp[j-1][2], dp[j-1][3], arr[j])\n        dp[j][3] = max("], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuple_x,index_x,index_y):\n    return tuple_x[:index_x] + tuple_x[index_y:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, colon1, colon2):\n    tuplex[colon1]=colon2\n    return tuplex\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex: tuple, a: int, b: int) -> tuple:\n    tuplex = tuplex[0:a] + (b, ) + tuplex[a+1:]\n    return tuplex\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuplex, start, stop):\n    return tuplex[:start] + (tuplex[start:stop],) + tuplex[stop:]\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuplex, i, value):\n    if i == len(tuplex):\n        return tuplex\n    return (colon_tuplex(tuplex[0:i] ,i + 1 ,value) , value)\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuple(tuplex, start, end):\n    # TODO: Write your code here\n    res = []\n    for i in range(start, end):\n        res.append(tuplex[i])\n    return res", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, col1, col2):\n  #print(col1,col2)\n  new_list=[]\n  for i in range(col1):\n    new_list.append(tup[i])\n  for i in range(col2):\n    new_list.append(tup[i])\n  #print(new_list)\n  return new_list\n\n#10.", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, ind):\n    new_tup = tup[:]\n    new_tup[ind] = new_tup[ind][:]\n    return new_tup\n", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, colon_pos, colon_element):\n    tuplex[colon_pos] = colon_element\n    return tuplex\n#tests", "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, start, end): \n    out = tuplex[start:end]\n    return out\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\nfrom typing import List\n\n\ndef large_product(num1: List[int], num2: List[int], n: int) -> List[int]:\n    if len(num1) < n or len(num2) < n:\n        return []\n    num1.sort(reverse=True)\n    num2.sort(reverse=True)\n    return [num1[i] * num2[i] for i in range(n)]", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1,list2,num):\n    prod = []\n    for i in range(len(list1)):\n        prod.append(list1[i]*list2[i])\n    prod.sort(reverse = True)\n    return prod[:num]", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, num):\n    sorted_list1 = sorted(list1, reverse=True)\n    sorted_list2 = sorted(list2, reverse=True)\n    final_list = []\n    if sorted_list1[0] * sorted_list2[0] == sorted_list1[0] * sorted_list2[1]:\n        final_list.append(sorted_list1[0] * sorted_list2[0])\n    for i in range(num):\n        for j in range(i, num):\n            if sorted_list1[i] * sorted_list2[j] == sorted_list1[i] * sorted_list2[j+1]:\n                final_list.append(sorted_list1[i] * sorted_list2[j])\n    return final_list\n\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n\tif len(list1) < n:\n\t\tn = len(list1)\n\tlargest = []\n\tfor i in range(n):\n\t\tproduct = list1[i]*list2[i]\n\t\tif product not in largest:\n\t\t\tlargest.append(product)\n\t\tlargest.sort()\n\treturn largest[::-1]\n\ndef large_product_solution(list1, list2, n):\n\tlargest = []\n\tfor i in range(len(list1)):\n\t\tfor j in range(len(list2)):\n\t\t\tif i < j:\n\t\t\t\tproduct = list1[i]*list2[j]\n\t\t\t\tif product not in largest:\n\t\t\t\t\tlargest.append(product)\n\t\t\t\tlargest.sort(reverse=True)\n\treturn largest[:n]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(nums1, nums2, n):\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    res = []\n    for i in range(len(nums1)):\n        if i+1 > n:\n            break\n        res.append(nums1[i] * nums2[i])\n    return res\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\nfrom typing import List\n\ndef large_product(arr_a: List[int], arr_b: List[int], n: int) -> List[int]:\n    \"\"\"\n    :param arr_a: first array\n    :param arr_b: second array\n    :param n: number of largest products\n    :return: list of n largest products\n    \"\"\"\n\n    arr_ab = []\n    for a in arr_a:\n        for b in arr_b:\n            arr_ab.append(a*b)\n\n    return sorted(arr_ab)[::-1][:n]\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(l1, l2, num):\n    \"\"\"\n    Finds the specified number of largest products between two lists\n    :param l1: first list\n    :param l2: second list\n    :param num: number of largest products to find\n    :return: list of product pairs\n    \"\"\"\n    product = []\n    for i in range(len(l1)):\n        product.append((l1[i],l2[i]))\n\n    product = sorted(product, key = lambda x: x[1], reverse = True)\n\n    largest = []\n    for x in range(num):\n        largest.append(product[x][0]*product[x][1])\n\n    return largest\n\ndef test_large_product():\n    \"\"\"\n    Run unit tests for large_product\n    \"\"\"\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = [3, 6, 8, 9, 10, 6]\n    assert large_product(l1, l2, 3) == [60, 54, 50]\n    assert large_product(l1, l2, 2) == [18, 30]\n    assert large_product(l1, l2, 1) == [6]\n    assert large_product(l1, l2, 0) == []\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n# ALGORITHM\n# Loop through both lists in parallel and accumulate the products\n# Set the total to the product of the first two values and pop them from the lists\n# Loop through the remaining values in the lists\n# If the product of the current value and the first value of the list is larger than\n# the current total, replace the total with that value and pop the first value from the\n# list\n# If the product of the current value and the second value of the list is larger than\n# the current total, replace the total with that value and pop the second value from the\n# list\n# If the product of the current value and the first value of the list is smaller than\n# the current total, pop the current value from the first list and push the second value\n# into the first list\n# If the product of the current value and the second value of the list is smaller than\n# the current total, pop the current value from the second list and push the first value\n# into the second list\n# Continue looping through the list with the smaller total and the smaller length\n# until the number of products is equal to the number specified\n# Return the list of products in descending order\ndef large_product(list1, list2, n):\n    # Create a new list to store the products\n    products = []\n    # Accumulate the products\n    for i in range(0, min(len(list1), len(list2))):\n        product = list1[i] * list2[i]\n        # Pop the first value from the first list\n        list1.pop(i)\n        # Pop the first value from the second list\n        list2.pop(i)\n        # Push the second value from the second list into the first list\n        list1.insert(i, list2.pop(0))\n        # Push the first value from the first list into the second list\n        list2.insert(i, list1.pop(0))\n        # If the product is larger than the current total, replace the total and pop", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list_a,list_b,num):\n    if num == 0:\n        return []\n    else:\n        a = max(list_a)\n        b = max(list_b)\n        list_a.remove(a)\n        list_b.remove(b)\n        result = [b*a]\n        if len(list_a) != 0 and len(list_b) != 0:\n            result += large_product(list_a, list_b, num-1)\n        return result\n", "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, n):\n    # Write your code here\n    result = []\n    for i in range(len(list1)):\n        temp_list = []\n        for j in range(len(list1)):\n            if list2[j] % list1[i] == 0:\n                temp_list.append(list2[j])\n        if len(temp_list) > n:\n            result.append(max(temp_list))\n        else:\n            result.append(0)\n    return result"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(n1,n2):\n    return max(n1,n2)\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    return a if a > b else b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n\n\nmaximum(2,5)\n\n\n# +\ndef maximum(a,b):\n    if a > b:\n        return a\n    elif a == b:\n        return a\n    else:\n        return b\n    ", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(num1, num2):\n    return max(num1, num2)\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    if a>b:\n        return a\n    else:\n        return b\n    ", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x,y):\n    if x > y:\n        return x\n    elif y > x:\n        return y\n    else:\n        return \"both are equal\"\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(num1,num2):\n    return num1 if num1 > num2 else num2\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    if(a>b):\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    return tuple(string.split(\" \"))\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\nimport re\n\n\ndef string_to_tuple(s):\n    return tuple(re.findall(r'\\d+', s))\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(st):\n    t=()\n    for i in st:\n        t+=i\n    return t\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(s):\n    return tuple(s)\n\n# print(string_to_tuple(\"python 3.0\"))", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(input_str):\n    output_tuple = tuple(input_str)\n    return output_tuple\n\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string.split())\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    s = list()\n    for c in string:\n        if c.isdigit():\n            s.append(int(c))\n        else:\n            s.append(c)\n    return tuple(s)\n\ndef main():\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s)\n\ndef tuple_to_string(t):\n    return ''.join(t)\n\ndef print_tuple_string(tup_str):\n    return tuple_to_string(tup_str)\n", "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    tuple = []\n    for char in string:\n        tuple.append(char)\n    return tuple\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    for i in range(32):\n        if n & (1 << i) == 0:\n            n |= 1 << i\n            return n\n    return n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    return n ^ n - 1\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num):\n    for i in range(32):\n        if(num & 1 == 0):\n            return num\n        num = num << 1\n    return num\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    :param n: an integer\n    :return: n with its left most unset bit set to 1\n    >>> set_left_most_unset_bit(10) == 14\n    \"\"\"\n    if n == 0:\n        return 0\n    return 2 * set_left_most_unset_bit(n/2)\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    res = 1\n    while num != res:\n        res <<= 1\n    return res - 1\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n  bits = bin(n)\n  assert bits[0] == '0', f\"{n} is not set to 0\"\n  for i in range(len(bits), 1, -1):\n    if bits[i] == '0':\n      return int(bits[0] + '1' + bits[i + 1:], 2)\n  assert False, f\"{n} has no unset bits\"\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    return n & (n-1)\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    res = n | (n << 1) | (n << 2) | (n << 3) | (n << 4) | (n << 5) | (n << 6) | (n << 7) | (n << 8) | (n << 9)\n    return res ^ n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    while n:\n        n = n ^ (n - 1)\n    return n\n", "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(number):\n    return number | (number-1)\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nfrom math import pi\n\ndef volume_cone(height,radius):\n    volume=pi*radius*radius*height/3\n    return volume\n\ndef test():\n    \"\"\"\n    Write a function to find the volume of a cone.\n    assert volume_cone(5,12)==314.15926535897927\n    \"\"\"\n    assert volume_cone(5,12)==314.15926535897927\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nfrom math import pi\ndef volume_cone(r1,r2):\n    #return pi*(r1**2)*(r2-r1)\n    return pi*(r1*r1)*(r2-r1)\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius,height):\n    return (1/3)*3.1415926535897927*radius**2*height\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius, height):\n    volume=1/3 * 3.14159 * radius * radius * height\n    return volume\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(h,r):\n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    \"\"\"\n    The volume of a cone is calculated as:\n    V = (1/3) * \u03c0 * radius ^ 2 * height\n    \n    Parameters\n    ----------\n    radius : int or float\n        The radius of the cone in meters\n    \n    height : int or float\n        The height of the cone in meters\n        \n    Returns\n    -------\n    Volume : int or float\n        The volume of the cone in cubic meters\n    \"\"\"\n    assert height >= 0, \"Height cannot be negative.\"\n    volume = (1/3) * (math.pi * radius ** 2 * height)\n    return volume\n\n\n# -\n\nvolume_cone(5,12)", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(r,h):\n    return 1/3 * math.pi * r**2 * h\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(base,height):\n    return (1/3)*(base*height*height)\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nfrom math import pi\n\n\ndef volume_cone(base, height):\n    return pi * base ** 2 * height / 3\n\n", "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius, height):\n    vol = 1.0/3*3.14*radius**2*height\n    return vol"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    for i in lst:\n        if i>0:\n            print i\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\n#Your code here\n\n#1.", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    for num in lst:\n        if num>0:\n            print(num)\n    return \"Done\"\npos_nos([-1,-2,1,2])\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(l):\n    return [x for x in l if x>0]\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(arr):\n  for x in arr:\n    if x>0:\n      print(x)\n\n#Check if the function works correctly", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    lst1 = []\n    for x in lst:\n        if x > 0:\n            lst1.append(x)\n    return lst1\n\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n#Solution :\ndef pos_nos(lst):\n    # write code here\n    return lst[lst.index(1):len(lst)]\n\n\n# +", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(l):\n    l = [i for i in l if i > 0]\n    return l\n", "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef pos_nos(lst):\n    \"\"\"Function to print positive numbers in a list\"\"\"\n    for num in lst:\n        if num >= 0:\n            print(num)\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                continue\n            max_sum = max(max_sum, sum_of_subset(grid, i, j, n))\n\n    return max_sum\n\n\ndef sum_of_subset(grid, x, y, n):\n    if grid[x][y] == 0:\n        return 0\n    result = grid[x][y]\n    if x > 0 and grid[x-1][y] == grid[x][y]:\n        result += sum_of_subset(grid, x-1, y, n)\n    if y > 0 and grid[x][y-1] == grid[x][y]:\n        result += sum_of_subset(grid, x, y-1, n)\n    if x < n-1 and grid[x+1][y] == grid[x][y]:\n        result += sum_of_subset(grid, x+1, y, n)\n    if y < n-1 and grid[x][y+1] == grid[x][y]:\n        result += sum_of_subset(grid, x, y+1, n)\n    return result\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    # Function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n\n    # Returns an integer.\n\n    # Get the values for the first row\n    row1 = grid[0]\n\n    # Get the values for the second row\n    row2 = grid[1]\n\n    # Get the length of the first row\n    row1_length = len(row1)\n\n    # Get the length of the second row\n    row2_length = len(row2)\n\n    # Get the maximum sum\n    maximum_sum = 0\n\n    # Traverse through the second row and add each element\n    for i in range(0, row2_length):\n        maximum_sum += row2[i]\n\n    # Traverse through the first row and add each element\n    for i in range(0, row1_length):\n        maximum_sum += row1[i]\n\n    return maximum_sum\n\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    grid = [ [grid[r][c] for c in range(n)] for r in range(len(grid)) ]\n    max_sum = 0\n    for r in range(len(grid)-1):\n        for c in range(n):\n            if grid[r][c] > 0:\n                for nr in range(r+1, len(grid)):\n                    if grid[nr][c] > 0:\n                        break\n                max_sum = max(max_sum, grid[r][c] + grid[nr][c])\n    return max_sum\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    # Write your code here\n    s = 0\n    # 1 4 5 2 0 0\n    for i in range(n):\n        for j in range(n):\n            # print(grid[i][j])\n            s = max(s, grid[i][j])\n    # print(s)\n    return s", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\nfrom itertools import groupby, tee\nfrom functools import reduce\n\ndef max_sum_rectangular_grid(grid, n):\n    grid = [[int(x) for x in row] for row in grid]\n    rows = [reduce(lambda x, y: x + y, row) for row in grid]\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] != 0:\n                return max_in_group(rows[i:i+n])\n\n    return 0\n\n\ndef max_in_group(numbers):\n    numbers = sorted(numbers)\n    max_so_far = 0\n    cur_sum = 0\n    for i in range(len(numbers)):\n        cur_sum += numbers[i]\n        max_so_far = max(max_so_far, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n    return max_so_far\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    # Create a dictionary to store the numbers and their max sum along with the position\n    # If the position is not available then we will assign -1 to the sum to ensure that the value\n    # does not get picked up while calculating max sum\n    numbers_dict = {}\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            numbers_dict[j * n + i] = (grid[i][j], -1)\n    # Iterate through the grid and find out the max sum\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            # Check whether the cell is empty or not\n            if grid[i][j] == 0:\n                continue\n            # Check whether the cell is empty in the neighboring cells\n            if (i > 0 and j * n + i - n in numbers_dict) or (i > 0 and j * n + i - 1 in numbers_dict) or (i > 0 and j * n + i in numbers_dict) or \\\n            (i > 0 and j * n + i + 1 in numbers_dict) or (i > 0 and j * n + i + n in numbers_dict) or (i > 0 and j * n + i + 2 in numbers_dict) or \\\n            (i > 0 and j * n + i + 3 in numbers_dict) or (i > 0 and j * n + i + 4 in numbers_dict):\n                continue\n            # If the cell is not empty then update the numbers_dict\n            numbers_dict[j * n + i] = (grid[i][j], grid[i][j])\n    # We need to consider the two cases when the number is in the last row or not\n    max_sum = 0\n    for i in numbers_dict:\n        # The max sum for a row is the sum of all the numbers in the", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\n# Test cases:\n#       Grid size is 1x1\n#       Grid size is 1x2\n#       Grid size is 1x3\n#       Grid size is 2x2\n#       Grid size is 3x3\n#       Grid size is 4x4\n#       Grid size is 5x5\n#       Grid size is 10x10\n#       Grid size is 15x15\n\nfrom typing import List\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    \"\"\"\n    Runtime: 28 ms, faster than 94.13% of Python3\n    Memory Usage: 14.3 MB, less than 100.00% of Python3\n\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n    \"\"\"\n    row_sum = []\n    column_sum = []\n\n    for row in grid:\n        total = 0\n        for value in row:\n            total += value\n            row_sum.append(total)\n\n    for column in range(n):\n        total = 0\n        for row in range(n):\n            total += grid[row][column]\n            column_sum.append(total)\n\n    maximum_sum = 0\n    for row in range(n):\n        for column in range(n):\n            maximum_sum = max(maximum_sum, row_sum[row] + column_sum[column])\n\n    return maximum_sum\n\n# Test cases:\n#       Grid size is 1x1\n#       Grid size is 1x2\n#       Grid size is 1x3\n#       Grid size is 2x2\n#       Grid size is 3x3\n#       Grid size is 4x4\n#       Grid size is 5x5\n#       Grid size is 10x10\n#       Grid size is 15x15\n\ngrid = [\n    [1],\n   ", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\nfrom typing import List\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = -1\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    sum = grid[i][j] + grid[k][l]\n                    if i < j < k < l or i < j < l < k or i < k < j < l or i < l < j < k or i < l < k < j or i < k < l < j:\n                        max_sum = max(max_sum, sum)\n    return max_sum\n", "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nimport itertools\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    :param grid: a list of lists, representing the rectangular grid\n    :param n: integer, representing the length of the grid\n    :return: maximum sum such that no two chosen numbers are adjacent\n    \"\"\"\n    max_sum = 0\n    # the itertools.product function yields all possible subsets of a list\n    for row in grid:\n        for row_element, column_element in itertools.product(row, row):\n            if row_element != 0 and column_element != 0 and abs(row_element - column_element) > n - 1:\n                break\n            max_sum = max(max_sum, row_element + column_element)\n    return max_sum\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(words):\n    odd_words = []\n    even_words = []\n    for word in words:\n        if len(word) % 2:\n            odd_words.append(word)\n        else:\n            even_words.append(word)\n    if len(even_words) == 0:\n        return None\n    max_len = len(even_words[0])\n    for word in even_words:\n        if len(word) > max_len:\n            max_len = len(word)\n    for word in odd_words:\n        if len(word) == max_len:\n            return word\n    return None\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(str):\n    max = 0\n    str_len = len(str)\n    if str_len == 0:\n        return \"\"\n    even_word = \"\"\n    for word in str.split(\" \"):\n        word_len = len(word)\n        if word_len % 2 == 0 and word_len > max:\n            max = word_len\n            even_word = word\n    return even_word\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(txt):\n    words = txt.split()\n    num = 0\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            num = word\n    return num", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(str):\n    temp=[]\n    temp2 = str.split()\n    for i in temp2:\n        if i[0] == i[-1] == \"e\" and len(i) > len(temp[0]):\n            temp.append(i)\n    return temp[0]\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(str):\n    if(len(str)%2==0):\n        return str[len(str)//2:]\n    else:\n        return str[len(str)//2+1:]\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n    max_len = 0\n    for i in string:\n        if(len(i) % 2 == 0):\n            if(len(i) > max_len):\n                max_len = len(i)\n    return string[string.find(max_len)]\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(str):\n    list1=[]\n    for i in str:\n        if i.isalpha() and i.islower():\n            list1.append(i)\n    if len(list1)==0:\n        return \" \"\n    else:\n        for i in list1:\n            if list1.count(i)%2 ==0:\n                return i\n        return \" \"\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\n# a function to find the max length of even word\ndef find_Max_Len_Even(s):\n    if s == \"\":\n        return \"\"\n    # creating a list of all words\n    words = s.split()\n    max_len = 0\n    for word in words:\n        # check if the word is even\n        if len(word) % 2 == 0:\n            # if it is even, check the length of the word\n            if len(word) > max_len:\n                max_len = len(word)\n                max_word = word\n    # if there are no even words, return an empty string\n    if max_word == \"\":\n        return \"\"\n    else:\n        return max_word\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(sentence):\n    start = 0\n    end = 0\n    even_word_arr = []\n    for i in range(len(sentence)):\n        if(sentence[i] == \" \"):\n            continue\n        if(i%2 == 0):\n            even_word_arr.append(sentence[start:i+1])\n            start = i+1\n        else:\n            even_word_arr[-1] = even_word_arr[-1]+\" \"+sentence[start:i+1]\n            start = i+1\n    return max(len(x) for x in even_word_arr)\n\n", "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(string):\n    \"\"\"\n    :param string: input string\n    :return: first maximum length of even word.\n    \"\"\"\n    string=string.lower()\n    string=string.split()\n    even_word=[]\n    for word in string:\n        if len(word)%2==0:\n            even_word.append(word)\n    if len(even_word)==0:\n        return \"\"\n    max_len=len(even_word[0])\n    for word in even_word:\n        if len(word)>max_len:\n            max_len=len(word)\n    return max_len\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(numbers, number):\n    low = 0\n    high = len(numbers) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if numbers[mid] == number:\n            low = mid + 1\n            high = mid - 1\n        elif numbers[mid] < number:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low - 1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(array, value):\n    # Find the first index of value and use slice to find last occurrence of value.\n    index = array.index(value)\n    return array[index:].index(value) + index\n\ndef test_function(test_case):\n    array = test_case[0]\n    value = test_case[1]\n    solution = test_case[2]\n    output = find_last_occurrence(array, value)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(array, number):\n    last = 0\n    for i, element in enumerate(array):\n        if element == number:\n            last = i\n    return last\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, target):\n    low = 0\n    high = len(arr)-1\n    found = False\n    while low <= high and not found:\n        mid = (low + high) // 2\n        if arr[mid] < target:\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            found = True\n            if mid == len(arr)-1 or arr[mid+1] != target:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n\n#print(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, x):\n    \"\"\"\n    Finds the index of the last occurrence of a given number in a sorted array.\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    if x not in arr:\n        return -1\n    else:\n        return arr.index(x)\n\n# Test Cases", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\nfrom typing import List\n\n\ndef find_last_occurrence(array: List[int], value: int) -> int:\n    \"\"\"\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    \"\"\"\n    last = -1\n    for index, item in enumerate(array):\n        if item == value:\n            last = index\n    return last\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, num):\n    \"\"\"\n    Iterative\n    :type arr: List[int]\n    :type num: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] == num:\n            return i\n        i += 1\n    return -1\n\n\ndef find_last_occurrence(arr, num):\n    \"\"\"\n    Recursive\n    :type arr: List[int]\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return -1\n    if arr[-1] == num:\n        return len(arr) - 1\n    return find_last_occurrence(arr[:-1], num)\n\n\ndef main():\n    print(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    print(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9))\n    print(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 1))\n\n\nmain()", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, num):\n    start, end = 0, len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid - 1] != num:\n                return mid\n            end = mid - 1\n        else:\n            if arr[mid] < num:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return -1\n\n", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\nfrom typing import List, Optional\n\n\ndef find_last_occurrence(array: List[int], number: int) -> Optional[int]:\n    \"\"\"\n    O(log(n)) time | O(1) space\n    \"\"\"\n    lo = 0\n    hi = len(array) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if number < array[mid]:\n            hi = mid - 1\n        elif number > array[mid]:\n            lo = mid + 1\n        else:\n            return mid\n    return None", "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, num):\n    # first element that is equal or greater than num\n    last_element = -1\n    for i, val in enumerate(arr):\n        if val >= num:\n            last_element = i\n    return last_element\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(nums):\n    nums = sorted(nums)\n    ans = []\n    i = 0\n    while i < len(nums):\n        cnt = 0\n        while i < len(nums) and nums[i] == nums[i + 1]:\n            cnt += 1\n            i += 1\n        ans += [cnt]\n        ans += [nums[i]]\n    return ans\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    out = []\n    for i in lst:\n        if i == lst[0]:\n            out.append([1, i])\n        elif i == lst[1]:\n            out.append([2, i])\n        elif i == lst[2]:\n            out.append([3, i])\n        else:\n            out.append([len(lst[0]), i])\n        lst.remove(i)\n    return out\n\ndef test():\n    assert modified_encode([1, 1, 2, 3, 4, 4, 5, 1]) == [[2, 1], 2, 3, [2, 4], 5, 1]\n    assert modified_encode([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]) == [[2, 1], 2, 2, [3, 3], [4, 4], [5, 1]]\n    assert modified_encode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[2, 1], [3, 2], 3, [2, 4], 5, [2, 6], 7, [2, 8], 9, [2, 10]]\n    assert modified_encode([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(li):\n    pass", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(list):\n    result = []\n    # Count the number of instances of each element\n    num_elements = {}\n    for element in list:\n        if element in num_elements:\n            num_elements[element] += 1\n        else:\n            num_elements[element] = 1\n\n    # Add the first element to result\n    result.append(num_elements[list[0]])\n    # Add the elements of the dictionary to result\n    for element in num_elements:\n        result.append(element)\n    \n    # Add the list to result\n    result.append(list)\n    \n    return result\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(A):\n  if len(A) == 0: return []\n  elif len(A) == 1: return [A[0], 1]\n  else:\n    x = A[0]\n    B = A[1:]\n    C = modified_encode(B)\n    y = [x, len(C)]\n    D = [y] + C\n    return D\n\n# Test Function", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(input_list):\n    output_list = []\n    output_count = 1\n    output_element = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] == output_element:\n            output_count = output_count + 1\n        else:\n            output_list.append(output_count)\n            output_list.append(output_element)\n            output_count = 1\n            output_element = input_list[i]\n    output_list.append(output_count)\n    output_list.append(output_element)\n    return output_list\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(a):\n    new_list = []\n    for i in range(len(a)):\n        if a[i] == a[i+1]:\n            new_list.append([a[i], i + 1])\n        else:\n            new_list.append(a[i])\n    return new_list\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(input_list):\n    output = []\n    # first sort the input list\n    input_list.sort()\n\n    # get the original index for each value in the list\n    for value in input_list:\n        for i in range(len(output)):\n            if output[i] == value:\n                break\n        else:\n            output.append(value)\n            output.append(1)\n\n    # if there is a consecutive sequence of values, update it to reflect the count\n    for i in range(len(output)//2):\n        if output[i] == output[i+1]:\n            output[i] = [output[i], 1+output[i+2]]\n            output.pop(i+1)\n\n    return output\n\n", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    # your code here\n    ans = []\n    for i in lst:\n        if i in ans:\n            ans[ans.index(i)][1] += 1\n        else:\n            ans.append([1, i])\n    return ans", "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(li):\n    result = []\n    temp_li = []\n    last = li[0]\n    count = 1\n    for i in range(1,len(li)):\n        if last != li[i]:\n            if last == 0:\n                result.append([1,count])\n            else:\n                result.append([last,count])\n            count = 1\n            last = li[i]\n        else:\n            count += 1\n            last = li[i]\n    if last == 0:\n        result.append([1,count])\n    else:\n        result.append([last,count])\n    return result\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(n):\n    volume = 0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            for k in range(1,n+1):\n                volume = max(volume,(i*j*k))\n    return volume\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(n):\n    max_vol = 0\n    for i in range(1, 1 + n):\n        for j in range(1, 1 + n - i):\n            for k in range(1, 1 + n - i - j):\n                if i + j + k == n:\n                    max_vol = max(max_vol, i * j * k)\n    return max_vol\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum):\n    \"\"\"\n    Returns max volume of cuboid\n    sum is the sum of sides of cuboid\n    \"\"\"\n    side_1 = side_2 = side_3 = side_4 = 0\n    while side_1 + side_2 + side_3 + side_4 < sum:\n        side_1 += 1\n        side_2 += 1\n        side_3 += 1\n        side_4 += 1\n    return side_1 * side_2 * side_3 * side_4", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(s):\n    if s<0:\n        return 0\n    elif s==0:\n        return 1\n    else:\n        return (s-1) * max_volume(s-1)\n\ndef max_volume2(s):\n    if s<0:\n        return 0\n    elif s==0:\n        return 1\n    else:\n        return max(max_volume2(s-1), max_volume2(s-2))\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_side):\n    max_volume = 0\n    for sides in range(1, sum_side + 1):\n        volume = sides * sides * sides\n        if volume > max_volume:\n            max_volume = volume\n    return max_volume", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(s):\n    #Write your code here\n    return 0\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\nfrom itertools import product\nfrom typing import Tuple, List\n\n\ndef max_volume(s: int) -> int:\n    max_volume = 0\n    for i in range(1, s+1):\n        for j in range(1, s+1):\n            for k in range(1, s+1):\n                if (i + j + k) == s:\n                    max_volume = max(max_volume, i*j*k)\n    return max_volume\n\n\ndef max_volume2(s: int) -> int:\n    \"\"\"\n    The first thing that comes to mind when seeing this question is to check the subsets of the given range\n    as all subsets have the same volume. This approach is simple, but not very efficient.\n    \"\"\"\n    for i in range(1, s+1):\n        for j in range(1, s+1):\n            for k in range(1, s+1):\n                if (i + j + k) == s:\n                    return i*j*k\n    return 0\n\n\ndef max_volume_with_subsets(s: int) -> int:\n    \"\"\"\n    The solution of the problem is to split the cuboid into 6 smaller cuboids and calculate the volume of each\n    sub-cuboid and return the maximum volume of the cuboid.\n    \"\"\"\n    subset_volume = lambda side_length: 1 if side_length == 1 else side_length\n    return max(subset_volume(i) * subset_volume(j) * subset_volume(k)\n               for i, j, k in product(range(1, s+1), repeat=3)\n               if (i + j + k) == s)\n\n\ndef max_volume_with_subsets_2(s: int) -> int:\n    \"\"\"\n    Another solution to the problem. This solution is better as it keeps a running sum of the volume of subsets\n    that we have calculated so far. It uses the fact that we only need to add up the volume of the subset if the\n    side length of the subset is smaller than the given number and not add the volume of the subset if it is\n    bigger than the given number.\n    \"\"\"\n    return max(sum(", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\nimport math\n\ndef max_volume(sum_of_sides):\n    \"\"\"\n    Assumes sum_of_sides is an int\n    Finds the greatest volume of a cuboid with sum_of_sides for all sides\n    \"\"\"\n    best_volume = 0\n    for sides in range(1, int(math.sqrt(sum_of_sides) + 1)):\n        if sides <= int(math.sqrt(sum_of_sides)):\n            if sides <= 1:\n                volume = 0\n            else:\n                volume = sides * (sides + 1) * (sides + 2)\n        else:\n            volume = sides * (sides + 1) * (sum_of_sides - (sides * 2))\n        if volume > best_volume:\n            best_volume = volume\n    return best_volume\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sum_of_sides):\n    sides = (3, 4, 5)\n    s1, s2, s3 = sides\n\n    # Initialize left-bottom-front coordinate\n    lbf_coord = 0\n    right_bottom_front = lbf_coord + (s1, s2, s3)\n\n    # Initialize maximum volume as 0\n    max_volume = 0\n\n    # Iterate through all possible combinations\n    for (x, y, z) in itertools.product(range(sum_of_sides), repeat=3):\n        # right-bottom-front coordinate\n        right_bottom_front = lbf_coord + (x, y, z)\n\n        # left-top-back coordinate\n        left_top_back = (sum_of_sides - x, sum_of_sides - y, sum_of_sides - z)\n\n        # The current volume of the cuboid is the area of its sides times their length\n        current_volume = x * y * z\n        print(current_volume)\n\n        # Compare the current volume with the maximum volume\n        if current_volume > max_volume:\n            max_volume = current_volume\n\n        # Reset the left-bottom-front coordinate\n        lbf_coord = (x, y, z)\n\n    return max_volume\n\n", "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_of_sides):\n    \"\"\"\n    Returns maximum volume of cuboid with given sum of sides.\n    \"\"\"\n    if sum_of_sides % 4 != 0:\n        raise ValueError(\"Input must be multiple of 4!\")\n    length, width, height = divmod(sum_of_sides, 4)\n    return length*width*height\n\n# Test cases"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(str):\n    return re.findall(r'\\b\\w{5}\\b',str.lower())\n\n#print(find_long_word('Please move back to strem'))", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\n\ndef find_long_word(string):\n    \"\"\"\n    >>> find_long_word('Please move back to strem')\n    ['strem']\n    \"\"\"\n    return re.findall(r'\\w{5}', string)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\n\ndef find_long_word(s):\n    return [match.group(0) for match in re.finditer(r'\\b\\w{5}\\b', s)]\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(sentence):\n    result = re.findall(r'\\b[a-zA-Z]{5}\\b', sentence)\n    return result\n\n\ndef find_long_word_2(sentence):\n    result = []\n    for word in sentence.split():\n        if len(word) == 5:\n            result.append(word)\n    return result\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(string):\n    return re.findall(r'\\b\\w{5,}\\b', string)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(string):\n    if not string:\n        return []\n    return [s for s in re.findall(r\"\\b\\w{5}\\b\", string)]\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\ndef find_long_word(sentence):\n    \"\"\"\n    Write a function to find all five characters long word in the given string by using regex.\n    \"\"\"\n    return re.findall('\\b\\w{5}\\b', sentence)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\ndef find_long_word(string):\n    return re.findall(\"[^a-zA-Z]+\",string)\n\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nfrom re import findall\n\ndef find_long_word(sentence):\n    return findall('[a-zA-Z]{5}', sentence)\n", "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(text):\n    result = re.findall('[a-zA-Z]{5}', text)\n    return result\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    s = 0\n    for i in range(n):\n        s += i\n    return sum(i**2 for i in range(n)) - s**2", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    return (sum([i**2 for i in range(1,n+1)])-sum([(i**2) for i in range(1,n+1)]))\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(num):\n    s=sum(i**2 for i in range(1,num+1))\n    return s**2-sum(i**2 for i in range(1,num+1))**2", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    s1=sum(range(n))\n    s2=sum([i**2 for i in range(1,n+1)])\n    return s1**2-s2\n\ndef test_sum_difference():\n    assert sum_difference(12)==5434\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    squares = 0\n    sum_of_squares = 0\n    for i in range(n+1):\n        squares += i**2\n        sum_of_squares += i\n    return squares - sum_of_squares\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\nfrom typing import List\n\ndef sum_difference(n: int) -> int:\n    first_n = 1\n    first_square = first_n * first_n\n    sum_square = 0\n    for i in range(1, n + 1):\n        sum_square += i * i\n    return first_square + sum_square\n\n\ndef sum_square_difference(n: int) -> int:\n    return sum_difference(n) - sum_of_square(n)\n\n\ndef sum_of_square(n: int) -> int:\n    first_square = sum(i * i for i in range(1, n + 1))\n    return first_square", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return sum([(i+1)**2 for i in range(n)]) - sum([i**2 for i in range(n)])\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    # write your code here\n    s=0\n    s1=0\n    for i in range(1,n+1):\n        s=s+i\n    for i in range(1,n+1):\n        s1=s1+i**2\n    return s**2-s1\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sqr_sum=0\n    sum_sqr=0\n    for i in range(1,n+1):\n        sqr_sum=sqr_sum+i**2\n        sum_sqr=sum_sqr+i**2\n    \n    return sqr_sum-sum_sqr\n", "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\nfrom itertools import accumulate\n\ndef sum_difference(n):\n    return accumulate(map(lambda x: x**2, range(1, n+1)))[-1] - sum(range(1, n+1))**2\n\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\nfrom functools import reduce\n\n\ndef find_demlo(num):\n    even_num = [int(n) for n in str(num) if n.isdigit() and int(n) % 2 == 0]\n    odd_num = [int(n) for n in str(num) if n.isdigit() and int(n) % 2 == 1]\n\n    return reduce(str.__add__, map(str, odd_num)) + reduce(str.__add__, map(str, even_num))\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    result = []\n    while len(result) < 6:\n        result.append(number[-1])\n        number = number[:-1]\n        if len(number) == 0:\n            break\n    result.reverse()\n    result = ''.join(result)\n    return result\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\nfrom collections import Counter\n\n\ndef find_demlo(num):\n    count = Counter(num)\n    result = ''\n    for i in range(0, len(num)):\n        result += str(int(count.most_common()[i][1]))\n\n    return result\n\n\ndef find_demlo(num):\n    count = Counter(num)\n    result = ''\n    for i in range(0, len(num)):\n        result += str(count.most_common()[i][1])\n\n    return result\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num: str) -> str:\n    total_num = 0\n    for i in range(0, len(num)):\n        total_num += int(num[i]) * (len(num) - 1 - i)\n    total_str = str(total_num)\n    final_str = \"\"\n    for i in range(0, len(total_str)):\n        final_str += total_str[i]\n    return final_str[::-1]\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(number):\n    pass\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\nimport re\n\ndef find_demlo(number):\n    \"\"\"\n    :param number: a 10-digit number (string)\n    :return: the demlo number (string)\n    \"\"\"\n    number_list = list(number)\n    number_list.reverse()\n    new_number = \"\"\n    for i in range(len(number_list)):\n        new_number += number_list[i]\n    new_number_list = list(new_number)\n    new_number_list.reverse()\n    final_number = \"\"\n    for i in range(len(new_number_list)):\n        final_number += new_number_list[i]\n    final_number_list = list(final_number)\n    final_number_list.reverse()\n    for i in range(len(number_list)):\n        final_number_list.insert(i, number_list[i])\n    final_number = \"\".join(final_number_list)\n    return final_number\n\n", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\n#\n# Test Data\n#\ntest_data = [\n    '111111',\n    '000000',\n    '123456',\n    '1234567',\n    '12345678',\n    '123456789',\n    '1234567890',\n    '12345678901',\n    '123456789012',\n    '1234567890123',\n    '12345678901234',\n    '123456789012345',\n    '1234567890123456',\n    '12345678901234567',\n    '123456789012345678',\n    '1234567890123456789',\n    '12345678901234567890',\n    '123456789012345678901',\n    '1234567890123456789012',\n    '12345678901234567890123',\n    '123456789012345678901234',\n    '1234567890123456789012345',\n    '12345678901234567890123456',\n    '123456789012345678901234567',\n    '12", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\n# Write a function to find the demlo number for the given number.\n# assert find_demlo(\"111111\") == '12345654321'\n\n\ndef find_demlo(number: str) -> str:\n    \"\"\"Find the demlo number for the given number.\"\"\"\n    number_list = list(number)\n    demlo_list = []\n\n    for index, number in enumerate(number_list):\n        if number == \"0\":\n            continue\n\n        number_split = list(number)\n        number_split.reverse()\n\n        for i, number in enumerate(number_split):\n            if number == \"0\":\n                continue\n\n            if index == 0:\n                demlo = number + number_split[i:]\n            else:\n                demlo = number + demlo\n\n        demlo_list.append(demlo)\n\n    demlo_list = ''.join(demlo_list)\n\n    return demlo_list\n\n\ndef test_find_demlo() -> None:\n    \"\"\"Test the find_demlo function.\"\"\"\n    assert find_demlo(\"111111\") == '12345654321'", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(n):\n    if n == \"\":\n        return None\n    return n[:1] + find_demlo(n[1:])", "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(number: str) -> str:\n    # your code goes here\n    return reverse(number) + number\n"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    return [i for i in range(len(lst)) if lst[i]==min(lst)]\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(numbers):\n    values_dict = {}\n    for i, num in enumerate(numbers):\n        if num not in values_dict:\n            values_dict[num] = [i]\n        else:\n            values_dict[num].append(i)\n    values_list = [v for v in values_dict.values()]\n    min_values = []\n    for value_list in values_list:\n        if len(value_list) == 1:\n            min_values.append(value_list)\n    return [x[0] for x in min_values]", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\n# +\nfrom collections import Counter\n\ndef position_min(nums):\n    nums = Counter(nums)\n    positions = []\n    for i in nums.keys():\n        if nums[i] == min(nums.values()):\n            positions.append(i)\n    return positions\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\nfrom typing import List\n\ndef position_min(nums: List[int]) -> List[int]:\n    position_list = []\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[j] < nums[i]:\n                position_list.append(j)\n    return position_list\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    lst.sort()\n    min_indices = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i-1] > lst[i]:\n            min_indices.append(i)\n\n    return min_indices\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(list):\n    # Your code goes here\n    min_list=[]\n    for i in range(len(list)):\n        if list[i] in min_list:\n            min_list.remove(list[i])\n        else:\n            min_list.append(list[i])\n    return min_list", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(list):\n    return [i for i, v in enumerate(list) if v == min(list)]\n\ndef test_position_min():\n    assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]) == [3,11]\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(list):\n    for i in range(len(list)):\n        if list[i] < list[i+1]:\n            return [i, i+1]\n    return None\n\ndef position_max(list):\n    for i in range(len(list)):\n        if list[i] > list[i+1]:\n            return [i, i+1]\n    return None\n\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(input_list):\n  output = []\n  for i in range(len(input_list)):\n    for j in range(i+1,len(input_list)):\n      if input_list[j] < input_list[i]:\n        output.append(j)\n  return output\n", "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(L):\n    # write your code here\n    # create a dictionary\n    pos = {}\n    # iterate over the list and check if the value is new minimum\n    for i in range(len(L)):\n        if L[i] in pos and L[i] < pos[L[i]]:\n            pos[L[i]].append(i)\n        else:\n            pos[L[i]] = [i]\n    # iterate over the dictionary and append the minimum values\n    return [min(pos[i]) for i in pos if len(pos[i])==1]\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(array, size):\n    if len(array) == size:\n        return array\n    elif len(array) == 0 or size == 0:\n        return array\n    \n    # get the positive and negative item counts\n    pos, neg = 0, 0\n    for item in array:\n        if item > 0:\n            pos += 1\n        elif item < 0:\n            neg += 1\n    \n    # split the array into positive and negative\n    positive, negative = array[0:pos], array[pos:len(array)]\n    \n    # negative item count is smaller than positive\n    if neg < pos:\n        # append negative items to the positive items\n        return negative + positive\n    # negative item count is bigger than positive\n    else:\n        # negative items to the end of the array\n        negative.extend(array[len(positive):size])\n        # positive items to the beginning of the array\n        positive.extend(array[0:neg])\n        # append negative items to the positive items\n        return negative + positive", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(nums, k):\n    pass\n\n\ndef test_solution():\n    assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\nfrom random import randint\ndef re_arrange(arr, length):\n    arr.sort()\n    mid = length // 2\n    small = arr[:mid]\n    big = arr[mid:]\n    return big + small + [arr[mid]]\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    arr = arr[:n]\n    arr.sort()\n    pos_arr = []\n    neg_arr = []\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n    while len(pos_arr) < n:\n        pos_arr.append(arr.pop())\n    while len(neg_arr) < n:\n        neg_arr.append(arr.pop())\n    return neg_arr + pos_arr\n\ndef re_arrange2(arr, n):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    arr = arr[:n]\n    arr.sort()\n    return [-x if x < 0 else x for x in arr]\n\ndef re_arrange3(arr, n):\n    \"\"\"\n    Write your code here.\n    \"\"\"\n    arr = arr[:n]\n    arr.sort()\n    for i in range(n):\n        if arr[i] >= 0:\n            arr[i] = -arr[i]\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\nimport random\n\n\ndef re_arrange(arr, l):\n    for i in range(l):\n        j = random.randrange(i, l)\n        arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n\ndef test_re_arrange():\n    assert re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\n\ndef test_re_arrange_with_duplicate():\n    assert re_arrange([3, 2, 3, 1, 2], 5) == [1, 2, 3, 2, 3]", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\n# Brute force\ndef re_arrange(arr, n):\n    result = []\n    while(len(arr) > 0):\n        if(arr[0] >= 0):\n            result.append(arr[0])\n            arr.pop(0)\n        else:\n            result.append(arr.pop(0))\n    return result\n\n# Using Stack\nfrom collections import deque\ndef re_arrange(arr, n):\n    result = []\n    st = deque()\n    for i in range(n):\n        if arr[i] > 0:\n            result.append(arr[i])\n        else:\n            st.append(arr[i])\n    while(st):\n        result.append(st.popleft())\n    return result\n\n# Using Queue\nfrom collections import deque\ndef re_arrange(arr, n):\n    result = []\n    queue = deque()\n    for i in range(n):\n        if arr[i] > 0:\n            result.append(arr[i])\n        else:\n            queue.append(arr[i])\n    while(queue):\n        result.append(queue.popleft())\n    return result\n\n# Using Queue\nfrom collections import deque\ndef re_arrange(arr, n):\n    result = []\n    queue = deque()\n    for i in range(n):\n        if arr[i] > 0:\n            result.append(arr[i])\n        else:\n            queue.append(arr[i])\n    while(len(queue) > 0):\n        result.append(queue.popleft())\n    return result", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(array, num):\n    if num < 0:\n        return\n    if num == 0:\n        return array\n    last = array[-1]\n    for i in range(len(array) - 1, num - 1, -1):\n        array[i] = last\n        last = array[i]\n    array[num - 1] = last\n    return array\n\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    n = len(arr)\n    for i in range(0,n,2):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[n-1-i]\n            arr[n-1-i] = temp\n    return arr\n", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\nfrom typing import List\n\ndef re_arrange(arr: List[int], size: int) -> List[int]:\n    \"\"\"[summary]\n    \n    Arguments:\n        arr {[list]} -- [list to be re-arranged]\n        size {int} -- [size of the list]\n    \n    Returns:\n        [list] -- [list re-arranged]\n    \"\"\"\n    output = []\n    negative = []\n    positive = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    for i in range(size):\n        if i < len(positive):\n            output.append(positive.pop(0))\n        elif i < size - len(negative):\n            output.append(negative.pop(0))\n    return output", "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    if len(arr) == 0:\n        return arr\n    elif len(arr) < n:\n        return arr\n    elif len(arr) > n:\n        return re_arrange(arr[0:n], n) + re_arrange(arr[n:], n)\n\n    # arr_negative = []\n    # arr_positive = []\n    # for i in range(0, len(arr)):\n    #     if arr[i] > 0:\n    #         arr_positive.append(arr[i])\n    #     else:\n    #         arr_negative.append(arr[i])\n    # return arr_positive + arr_negative\n\n    arr_negative = []\n    arr_positive = []\n    for i in range(0, len(arr), 2):\n        arr_positive.append(arr[i])\n    for i in range(1, len(arr), 2):\n        arr_negative.append(arr[i])\n    return arr_positive + arr_negative\n\n# print(re_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nimport itertools\n\ndef sum_of_alternates(lst):\n    \"\"\"\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    (46, 18)\n    \"\"\"\n    for i in itertools.chain.from_iterable(zip(lst[::2], lst[1::2])):\n        yield i\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(tuple_list):\n    # Create an empty list to store the sum of the tuples\n    sum_list = []\n    # Loop over the tuples\n    for i in range(len(tuple_list)):\n        # Get the tuples\n        t1 = tuple_list[i]\n        t2 = tuple_list[i + 1]\n        # Get the tuple sum\n        s = sum_tuple(t1, t2)\n        # Add the tuple sum to the sum list\n        sum_list.append(s)\n    # Return the sum of the tuples\n    return sum_list\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tuple_of_tuples):\n    t = 0\n    for i in range(len(tuple_of_tuples)):\n        if i % 2 == 0:\n            t += tuple_of_tuples[i]\n        else:\n            t -= tuple_of_tuples[i]\n    return t\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nimport pytest\n\n\ndef sum_of_alternates(tup: tuple) -> tuple:\n    \"\"\"\n    Accept a tuple and return a tuple containing the sum of all the elements\n    in the tuple except for the alternates.\n    \"\"\"\n    return (sum(tup[i] for i in range(1, len(tup), 2)) for i in range(0, len(tup), 2))\n\n\ndef test_sum_of_alternates():\n    assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(lst):\n    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            res += lst[i]\n    return res, 2*res", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(chain):\n    return 0\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(t):\n    odds = 0\n    evens = 0\n    for i, element in enumerate(t):\n        if (i + 1) % 2 == 0:\n            evens += element\n        else:\n            odds += element\n    return (odds, evens)\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(input_tuple):\n    sum = 0\n    for i in range(len(input_tuple)):\n        if i % 2 == 0:\n            sum += input_tuple[i]\n    return sum, sum\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tuples):\n    '''(list) -> int\n    Return sum of elements of tuples after removing the second element of each tuple\n    '''\n    count = 0\n    for i in range(len(tuples) // 2):\n        count += tuples[i * 2 + 1]\n    return count\n", "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nfrom typing import Union\nfrom typing import Tuple\nfrom typing import Iterable\n\nfrom .pairs import pairs\n\n\ndef sum_of_alternates(\n    numbers: Union[Iterable, int, float],\n    /,\n) -> Union[Tuple, int, float]:\n    \"\"\"Return sum of alternate chains of pairs.\n\n    >>> sum_of_alternates([5, 6, 3, 6, 10, 34]) == (46, 18)\n    True\n\n    >>> sum_of_alternates([10, 34, 5, 6, 3, 6, 10, 34]) == (110, 18)\n    True\n\n    >>> sum_of_alternates(10) == (10, 0)\n    True\n\n    >>> sum_of_alternates(10.34) == (10.34, 0)\n    True\n\n    >>> sum_of_alternates((10, 34, 5, 6, 3, 6, 10, 34)) == (110, 18)\n    True\n    \"\"\"\n    if isinstance(numbers, int):\n        numbers = tuple(numbers)\n    if isinstance(numbers, float):\n        numbers = tuple(numbers)\n    return tuple(\n        sum(pairs(nums))\n        for nums in zip(*pairs(numbers))\n    )"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    if n < 0:\n        return -1\n    else:\n        count = 0\n        while(n > 0):\n            n = n - (n // 4)\n            count = count + 1\n        return count\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    l = []\n    for i in range(1,n+1):\n        if i*i < n:\n            l.append(i)\n    s = 0\n    ans = 0\n    while s<n:\n        if s in l:\n            ans+=1\n            l.remove(s)\n        s+=1\n    return ans", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(number):\n    result = 0\n    for i in range(1, number + 1):\n        if number == i ** 2:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    squares = [i**2 for i in range(1, int(n/2)+1)]\n    if n in squares:\n        return 0\n    else:\n        return min(squares, key=lambda x: abs(n-x))\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(sum):\n    min_count = sum\n    #print(\"min_count\", min_count)\n    for i in range(1, (sum//2)+1):\n        count = 0\n        count = get_squares(i)\n        if count < min_count:\n            min_count = count\n    return min_count\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(N):\n    ans = 0\n    if N%4==0:\n        ans = N//4\n    elif N%4==1:\n        ans = (N//4)+1\n    elif N%4==2:\n        ans = (N//4)+2\n    else:\n        ans = (N//4)+3\n    return ans\n\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    squares = [x**2 for x in range(1,n)]\n    for i in squares:\n        if (n - i) not in squares:\n            return n - i\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(num):\n    return num / 4\n\n# Driver code\nnum = 6", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    # Write your code here\n    squares = []\n    for i in range(1, int(n**0.5 + 1)):\n        if n % i == 0:\n            squares.append(i)\n    return len(squares)\n", "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    if(n < 0):\n        return 0\n    min_square = 100\n    sq_sum = 0\n    for i in range(1, n):\n        if(i > n / 2):\n            break\n        if(i * i > n):\n            break\n        sq_sum += i * i\n        if(sq_sum == n):\n            min_square = 1\n        else:\n            min_square = min(min_square, sq_sum - n)\n    return min_square\n\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(sentences):\n    # your code here\n    pass\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    d = {}\n    for s in strings:\n        s = s.lower().split()\n        for word in s:\n            d[word] = d.get(word,0) + 1\n    if not d:\n        return\n    max_count = max(d.values())\n    max_word = None\n    for k,v in d.items():\n        if v == max_count:\n            max_word = k\n    return max_word\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nfrom collections import Counter\ndef most_occurrences(strings):\n    \"\"\"\n    :param strings: list of strings\n    :return: the word with most number of occurrences in the given strings list.\n    \"\"\"\n    counter = Counter(map(lambda x: x.lower(), strings))\n    most_common = counter.most_common(1)\n    if not most_common:\n        return \"\"\n    return most_common[0][0]", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(string):\n\n    string = string.split(\" \")\n    result = {}\n    for word in string:\n        word = word.upper()\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return max(result, key=result.get)\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(words):\n    # Write your code here.\n    output = {}\n    for word in words:\n        output[word] = output.get(word, 0) + 1\n    return max(output, key=output.get)\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nfrom collections import Counter\ndef most_occurrences(strings):\n    counts = Counter(strings)\n    most = counts.most_common()\n    return most[0][0]", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nfrom collections import Counter\n\ndef most_occurrences(input_list):\n    counter = Counter(input_list)\n    max_count = max(counter.values())\n    max_occurrences = [item[0] for item in counter.items() if item[1] == max_count]\n    return max_occurrences\n\n# can also use Counter and max\n# Counter(input_list).most_common(1)[0][0]\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    my_dictionary = {}\n    for i in strings:\n        i = i.lower()\n        i = i.replace(\" \", \"\")\n        i = i.replace(\"\\n\", \"\")\n        i = i.replace(\"\\r\", \"\")\n        if i in my_dictionary:\n            my_dictionary[i] += 1\n        else:\n            my_dictionary[i] = 1\n\n    return max(my_dictionary.items(), key = lambda item: item[1])[0]\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    # store words and their frequencies\n    words = {}\n    # loop through each word in strings\n    for word in strings:\n        # split the word into list of characters\n        chars = list(word)\n        # loop through the characters in the list\n        for char in chars:\n            # update the frequency of the word\n            if char in words:\n                words[char] += 1\n            else:\n                words[char] = 1\n    # set max_count and max_char\n    max_count = 0\n    max_char = ''\n    # loop through the words\n    for word, count in words.items():\n        # if the count is more than max_count\n        if count > max_count:\n            # update max_count and max_char\n            max_count = count\n            max_char = word\n    # return max_char\n    return max_char\n\n", "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    from collections import Counter\n    counter = Counter(strings)\n    most_occ = counter.most_common(1)[0][0]\n    return most_occ\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    # Your code goes here\n    if a==b==c:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(x,y,z):\n    return (x == y == z or x == y == z or x == y == z)\n    ", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b and b==c:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    return (a==b) or (b==c) or (a==c)\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b and b==c or a==c and a==b:\n        return True\n    else:\n        return False\n\n\n# +", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    if a==b==c:\n        return True\n    return False\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b or a==c or b==c:\n        return False\n    return True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n  if (a==b) or (b==c) or (a==c):\n    return False\n  else:\n    return True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b or a==c or b==c:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\n# +\n#Write a function to print check if the triangle is isosceles or not."], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(l, num_rotations, value):\n    res = [value] * num_rotations\n    l.extend(res)\n    return l[num_rotations:len(l)] + l[0:num_rotations]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(list,rotation,index):\n    print(f'input: {list}, rotation: {rotation}, index: {index}')\n    if rotation == 0:\n        return list\n    else:\n        return rotate_left(list[index:], rotation-1, 0) + list[:index]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(arr,num_to_move,item_to_move):\n    return arr[(num_to_move+len(arr)-item_to_move):]+arr[0:num_to_move]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\nfrom typing import List\n\ndef rotate_left(arr: List[int], n: int, k: int) -> List[int]:\n    if n == 0:\n        return arr\n    for i in range(n-k):\n        arr.append(arr.pop(0))\n    return arr\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(list,n,k):\n    print(list[0:k+1])\n    print(list[k+1:])\n    print(list[0:n-k])\n    print(list[n-k:])\n    return list[0:n]+list[n-k:k+1]", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(array, num, item):\n    array.insert(num, item)\n    del array[num+1]\n    return array\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(arr, num_rotations, num_elements_to_remove):\n    arr = arr[num_elements_to_remove:] + arr[:num_elements_to_remove]\n    for i in range(num_rotations):\n        arr = arr[-1:] + arr[:-1]\n    return arr\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(arr, n, d):\n    return arr[d:] + arr[:d]\n\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(l, n, index=0):\n    if len(l) == 0:\n        return l\n    elif n < 0:\n        return rotate_left(l, n+len(l), len(l)-1)\n    elif n > 0:\n        return [l[-n+index]] + l[:-n+index]\n", "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\nfrom typing import List\n\n\ndef rotate_left(lst: List, n: int, m: int) -> List:\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the left direction.\n    :param lst: the list to be rotated\n    :param n: the length of the given list\n    :param m: the number of items to be rotated\n    :return: a list after rotation by m items\n    \"\"\"\n    m %= n\n    lst[n:n+m] = lst[:m]\n    return lst\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert rotate_left(lst, 3, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    print('Success: test_rotate_left')\n\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n# Write your function here\ndef neg_count(list):\n    result = 0\n    for element in list:\n        if element < 0:\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(nums):\n    neg = 0\n    for num in nums:\n        if num < 0:\n            neg += 1\n    return neg\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(l):\n    count = 0\n    for item in l:\n        if item < 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(lst):\n    count = 0\n    for i in lst:\n        if i < 0:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(numbers):\n    \"\"\"\n    A function to count the negative numbers in a list\n    \"\"\"\n    count = 0\n    for i in numbers:\n        if i < 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(input_list):\n    neg_count = 0\n    for i in input_list:\n        if i < 0:\n            neg_count += 1\n    return neg_count\n\ndef test_neg_count():\n    assert neg_count([-1,-2,3,-4,-5]) == 4\n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count\n\ndef neg_count(lst):\n    return len([x for x in lst if x < 0])\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    n = 0\n    for i in lst:\n        if i < 0:\n            n += 1\n    return n\n", "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    return len([x for x in lst if x < 0])\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(sentence):\n    return re.findall(r'\\b[a-zA-Z]\\w{2,5}\\b', sentence)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(string):\n    \"\"\"\n    Use regex to find all three, four and five characters long words in the given string.\n    Return a list of strings.\n    >>> find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    \"\"\"\n    import re\n    pattern = r'\\w{3,5}'\n    res = re.findall(pattern, string)\n    return res\n\ndef find_char_v2(string):\n    \"\"\"\n    Use regex to find all three, four and five characters long words in the given string.\n    Return a list of strings.\n    >>> find_char_v2('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    \"\"\"\n    import re\n    pattern = r'\\w{3,5}'\n    res = [w for w in re.findall(pattern, string)]\n    return res\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\ndef find_char(string):\n    return [i for i in re.findall(r\"\\b[a-zA-Z]{3,}\\b\", string) if len(i) in range(3, 6)]\n\n\n# find_char('For the four consumer complaints contact manager AKR reddy')", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(string):\n    pattern = r\"[\\w]{3,5}\"\n    return re.findall(pattern, string)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\ndef find_char(str):\n    pattern = re.compile(r'\\w{3,}')\n    return list(set(re.findall(pattern, str)))", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nfrom re import findall\n\ndef find_char(string):\n    return findall(r\"\\b[\\w]{3,5}\\b\", string.lower())\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\ndef find_char(s):\n    return re.findall('(.{%s})' % i, s) for i in range(3,6)", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(s):\n    return re.findall('\\w{3,5}', s)\n", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\ndef find_char(string):\n    return re.findall(r'\\w{3,}', string)", "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nfrom typing import List\n\ndef find_char(sentence: str) -> List[str]:\n    result = []\n    for word in sentence.split():\n        if len(word) in (3, 4, 5):\n            result.append(word)\n\n    return result\n\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(num):\n    \"\"\"returns number of unset bits\"\"\"\n    mask = 1\n    count = 0\n    while mask <= num:\n        if not num & mask:\n            count += 1\n        mask <<= 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    mask = 1\n    res = 0\n    while mask < n:\n        mask = mask << 1\n        if (mask & n) == 0:\n            res += 1\n    return res\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(number):\n    \"\"\"Count the number of unset bits in a number.\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(17)\n    1\n    >>> count_unset_bits(32)\n    0\n    >>> count_unset_bits(0)\n    0\n    >>> count_unset_bits(-1)\n    31\n    \"\"\"\n    return number.bit_length() - number.bit_count()\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    count = 0\n    for i in range(32):\n        if (n & (1 << i)) == 0:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    \"\"\"Count the number of unset bits in n.\n    Examples:\n    >>> count_unset_bits(2) == 1\n    >>> count_unset_bits(255) == 8\n    >>> count_unset_bits(255) == 8\n    \"\"\"\n    n = bin(n)[2:]\n    num_unset_bits = 0\n    for c in n:\n        if c == '1':\n            num_unset_bits += 1\n    return num_unset_bits\n\n# test cases", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(num):\n    i = 0\n    while (num & (1<<i)) != 0:\n        i += 1\n    return i\n\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    return bin(n).count('0')\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(x):\n    count = 0\n    for i in range(0, 32):\n        if (x & (1 << i)) == 0:\n            count += 1\n\n    return count\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n", "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(number):\n    # TODO: Write your code here\n    count = 0\n    while number > 0:\n        count += number & 1\n        number >>= 1\n    return count\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nimport unittest\n\ndef char_frequency(string):\n    char_dict = dict()\n    for i in string:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    return char_dict\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    if len(string) == 0:\n        return {}\n    else:\n        char = string[0]\n        remainder = string[1:]\n        if char in char_frequency(remainder):\n            return char_frequency(remainder)[char] + 1\n        else:\n            return {char: 1} + char_frequency(remainder)\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nimport unittest\n\ndef char_frequency(string):\n    \"\"\"\n    :param string: string to count characters of\n    :return: a dictionary of characters and frequency\n    \"\"\"\n    # create a dictionary to count characters and frequency\n    char_freq = {}\n    for char in string:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    return char_freq\n\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    frequency = {}\n    for c in s:\n        if c in frequency:\n            frequency[c] += 1\n        else:\n            frequency[c] = 1\n    return frequency\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nfrom collections import Counter\n\ndef char_frequency(string):\n    \"\"\"\n    >>> char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    \"\"\"\n    return Counter(string)\n\ndef char_frequency2(string):\n    \"\"\"\n    >>> char_frequency2('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    \"\"\"\n    c = {}\n    for char in string:\n        if char in c:\n            c[char] += 1\n        else:\n            c[char] = 1\n    return c\n\ndef char_frequency3(string):\n    \"\"\"\n    >>> char_frequency3('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    \"\"\"\n    c = {}\n    for char in string:\n        c.setdefault(char, 0)\n        c[char] += 1\n    return c\n\ndef char_frequency4(string):\n    \"\"\"\n    >>> char_frequency4('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    \"\"\"\n    return dict(zip(string, map(lambda x: 1 if x in string else 0, string)))\n\ndef char_frequency5(string):\n    \"\"\"\n    >>> char_frequency5('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    True\n    \"\"\"\n    c = {}\n    for char in string:\n        c[char] = c.get(char, 0) + 1\n    return c\n\ndef char_frequency6", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(s):\n    out = {}\n    for c in s:\n        out[c] = out.get(c, 0) + 1\n    return out\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    freq_dict = dict()\n    for c in string:\n        freq_dict[c] = freq_dict.get(c, 0) + 1\n    return freq_dict\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(text):\n    d = {}\n    for i in text:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n\n#assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(text):\n    return dict(Counter(text))\n", "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    frequencies = {}\n    for char in string:\n        if char in frequencies:\n            frequencies[char] += 1\n        else:\n            frequencies[char] = 1\n    return frequencies\n\n# Tests"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(list):\n    # sorted(list,key=lambda sublist: sublist[1])\n    list.sort(key=lambda sublist: sublist[1])\n    return list\n\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort_list_by_second_element(sublist):\n    sorted_sublist = sorted(sublist, key = lambda x: x[1])\n    return sorted_sublist\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(lst):\n    # TODO: Write your code here.\n    return sorted(lst, key=lambda x: x[1])\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(l):\n    sublists = []\n    for i in l:\n        sublists.append(i[1])\n    sorted_sublists = sorted(sublists)\n    output = []\n    for i in l:\n        for j in range(len(sorted_sublists)):\n            if sorted_sublists[j] == i[1]:\n                output.append(i)\n    return output\n\ndef Test():\n    print(Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]))\n    print(Sort([['a', 10], ['b', 10], ['c', 10], ['d', 15]]))\n    print(Sort([['a', 10], ['b', 5], ['c', 15], ['d', 15]]))\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(l):\n    l.sort(key=lambda x: x[1])\n    return l\n\nl = [['a', 10], ['b', 5], ['c', 20], ['d', 15]]", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\nfrom typing import List\n\ndef sort(a: List[List[str]]) -> List[List[str]]:\n    a.sort(key=lambda i: i[1])\n    return a\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(L):\n    return sorted(L, key=lambda x: x[1])\n\ndef main():\n    print(Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]))\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\nfrom collections import defaultdict\n\n\ndef sort_by_second_element(lst):\n    result = defaultdict(list)\n    for i in lst:\n        result[i[1]].append(i)\n    return list(result.values())\n\n\ndef test():\n    print(sort_by_second_element([['a', 10], ['b', 5], ['c', 20], ['d', 15]]))\n    assert sort_by_second_element([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\nfrom operator import itemgetter\n\ndef sort_by_second_element(a):\n    return sorted(a, key=itemgetter(1))\n", "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sortList(lst):\n    return sorted(lst, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if (a + b < c) or (a + c < b) or (b + c < a):\n        return False\n    else:\n        return True\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a+b>c or b+c>a or a+c>b:\n        return False\n    else:\n        return True\n\ndef check_Validity_of_a_Triangle(a,b,c):\n    if a+b>c or b+c>a or a+c>b:\n        return False\n    else:\n        return True\n\n#Test case 1:", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a+b > c and a+c > b and b+c > a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if ((a + b > c) and (a + c > b) and (b + c > a)):\n        return True\n    else:\n        return False", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if (a>b+c) or (b>a+c) or (c>a+b):\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a, b, c):\n    if a+b > c or b+c > a or a+c > b:\n        return False\n    elif a == 0 or b == 0 or c == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\nimport math\n\ndef check_Validity(a,b,c):\n    if (a+b) > c and (a+c) > b and (b+c) > a:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    if a + b > c or b + c > a or c + a > b:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(s1,s2,s3):\n    if (s1<s2+s3) and (s2<s1+s3) and (s3<s1+s2):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, b, n):\n    # write your code here\n    if n == 0:\n        return 0\n    return ((b - a) * (n + 1)) // 2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,c):\n    \"\"\"returns the sum of arithmetic progression\"\"\"\n    #initialize total\n    total = 0\n    #loop from a to b, by c\n    for x in range(a,b,c):\n        #add x to total\n        total += x\n    #return total\n    return total\n\n\n#Test the function", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a, b, n):\n    \"\"\"\n    :param a:\n    :param b:\n    :param n:\n    :return:\n    \"\"\"\n    return sum(i for i in range(a, b + 1, n))\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\n# +\n# take input\ndef ap_sum(start, end, step):\n    # initialize sum\n    sum = 0\n    # iterate start-end using step\n    for i in range(start,end+1,step):\n        # add i to sum\n        sum += i\n    # return the sum\n    return sum\n\n# test", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(start, end, difference):\n    return sum(range(start, end+1, difference))\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,n,d):\n    return int((n*(a+n))//2)\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a,b,n):\n    return (a+(b-1)*n) // 2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\nfrom typing import List\n\ndef ap_sum(a: int, b: int, n: int) -> int:\n    \"\"\"\n    :param a: start point\n    :param b: end point\n    :param n: number of terms\n    :return: the sum of arithmetic progression\n    \"\"\"\n    return (n * (a + b)) // 2\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, b, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return (b - a + 1) * a // 2\n    return ap_sum(a, b, n - 1) + (b - a + 1) * a // 2\n\n", "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(first_number, last_number, step):\n    \"\"\"\n    first_number: the first number in arithmetic progression\n    last_number: the last number in arithmetic progression\n    step: the step of the arithmetic progression\n    return: the sum of arithmetic progression\n    \"\"\"\n    sum = 0\n    for i in range(first_number,last_number+1):\n        sum += i\n    return sum\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    if(month == \"February\"):\n        return True\n    else:\n        return False\n\n#my_month = \"October\"\n#if check_monthnum(my_month):\n#    print(\"The month has 31 days\")\n#else:\n#    print(\"The month has 30 days\")\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\nimport calendar\n\ndef check_monthnum(month):\n    months_of_year = calendar.monthrange(2022, month)[1]\n    if months_of_year == 28:\n        return True\n    else:\n        return False\n\n# assert check_monthnum(\"February\") == True\n# assert check_monthnum(\"March\") == False\n# assert check_monthnum(\"November\") == True\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    \"\"\"\n    Given a month name, check if the month contains 28 days\n    \"\"\"\n    return (month.lower() == \"february\" or month.lower() == \"february\") and (28 in range(1, 30))\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(name):\n    months = {\n        \"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \"May\": 31, \"June\": 30,\n        \"July\": 31, \"August\": 31, \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31\n    }\n    if name in months.keys():\n        return months[name] == 28\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(name):\n    if name == \"February\":\n        return True\n    elif name == \"January\":\n        return True\n    else:\n        return False\n\n#2.", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\nimport calendar\ndef check_monthnum(month):\n    return calendar.monthrange(2020, int(month))[1] == 28", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    \"\"\"\n    :param month: string, the month name to check\n    :return: boolean, True if the given month name has 28 days, False otherwise\n    \"\"\"\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return months[month] == 28\n\n\ndef main():\n    print(check_monthnum(\"February\"))\n    print(check_monthnum(\"March\"))\n\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\nimport calendar\ndef check_monthnum(month):\n    if month in calendar.month_name:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month_name):\n    month_num_dict = {\n        \"January\": 1,\n        \"February\": 2,\n        \"March\": 3,\n        \"April\": 4,\n        \"May\": 5,\n        \"June\": 6,\n        \"July\": 7,\n        \"August\": 8,\n        \"September\": 9,\n        \"October\": 10,\n        \"November\": 11,\n        \"December\": 12\n    }\n    return month_num_dict[month_name] % 2 != 0\n", "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month):\n    # month = input(\"Please enter a month name:\")\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    # for month in months:\n    if month in months:\n        if month == \"February\":\n            return True\n        else:\n            return False\n    else:\n        return \"The given month name is not correct!\"\n# print(check_monthnum(\"February\"))\n\n# Write a function to check whether the given number is an Armstrong number or not.\n# An Armstrong number is a number which is equal to the sum of its cubes.\n# Example: 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153.\n# assert check_armstrong(153)==True"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(string):\n    \"\"\"\n    Takes a string and searches for a word at the end of the string,\n    with an optional period.\n    Returns a string with the text \"Found a match!\" or \"No match found!\"\n    \"\"\"\n    if string.lower().endswith('python.'):\n        return 'Found a match!'\n    else:\n        return 'No match found!'\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(string):\n    match = \"\"\n    if string[-4:] == \"python.\":\n        match = \"Found a match!\"\n\n    return match\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(my_text):\n    text_list = my_text.split()\n    matched = False\n    for word in text_list:\n        if word.endswith('.'):\n            matched = True\n            break\n    if matched:\n        return('Found a match!')\n    else:\n        return('Not found')\n\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    # TODO\n    return \"Not found!\"\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n  \"\"\"\n  text: a string\n  returns: a string\n  \"\"\"\n  if text[-4:]==\"python\":\n    return \"Found a match!\"\n  else:\n    return \"Sorry, no match\"\n\n# + [markdown] id=\"27689c47\"\n# ### 3.10.4   **Challenge: Find the longest word**\n# Write a function that finds the longest word in a string.", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, word, punctuation=\"\"):\n    \"\"\"\n    >>> text_match_word(\"python.\", \"python\")\n    'Found a match!'\n    >>> text_match_word(\"Hello world! hello\", \"hello\")\n    'Found a match!'\n    \"\"\"\n    if word in text:\n        return \"Found a match!\"\n    return \"\"", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    if(text[-5:]==\" python.\"):\n        return \"Found a match!\"\n    else:\n        return \"Not Found\"\n    \ntext_match_word(\"python.\")\n", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    # Start a counter variable\n    counter = 0\n    # Get all the words in a string\n    words = text.split()\n    # Check each word against the words in the string\n    for word in words:\n        # If the word is \"python\", return a message\n        if word == \"python\":\n            return \"Found a match!\"\n    # Otherwise, return a message\n    return \"Not found\"\n\n# Call the function", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text):\n    if '.' in text[-1]:\n        pattern = \"[A-Z]{3,}(?![A-Z])\"\n    else:\n        pattern = \"[A-Z]{3,}\"\n    match = re.search(pattern, text)\n    if match:\n        print(\"Found a match!\")\n        return \"Found a match!\"\n    else:\n        print(\"Sorry, no match.\")\n        return \"Sorry, no match.\"", "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\n# +\n# Solution\ndef text_match_word(text, word, punctuation = [\".\",\"?\",\"!\"]):\n    \"\"\"Checks if word is at end of text with punctuation\"\"\"\n    for symbol in punctuation:\n        if text[-len(word) - 1] == symbol:\n            return f\"Found a match!\"\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    # main code\n    sub = set()\n    n = len(string)\n    for i in range(n):\n        sub.add(string[i])\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if string[i] == string[j] and string[i] in sub:\n                ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str):\n    if len(str)==0:\n        return 0\n    for i in range(len(str)):\n        if i!=len(str)-1 and str[i]==str[i+1]:\n            count_Substring_With_Equal_Ends(str[i+1:])+1\n    return count_Substring_With_Equal_Ends(str[1:])+1\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j] and string[i] == string[j-1]:\n                count += 1\n\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count=0\n    for i in range(len(string)-1):\n        if string[i]==string[len(string)-1]:\n            count+=1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    if not string:\n        return 0\n    count = 0\n    end = len(string)\n    end -= 1\n    for i in range(len(string)):\n        if string[i] == string[end] and i != end:\n            count += 1\n            end -= 1\n        elif string[i] != string[end]:\n            end = i\n            count = 0\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(str1):\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[-1] and str1[i] == str1[j-1]:\n                count += 1\n                break\n    return count\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(input_str):\n    if len(input_str) <= 1:\n        return 0\n\n    res = 0\n    for i in range(1, len(input_str)):\n        for j in range(0, len(input_str) - i + 1):\n            if input_str[j] == input_str[-1 * i]:\n                res += 1\n\n    return res\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(input_string):\n    substring_counter = 0\n    for i in range(len(input_string)-1):\n        if input_string[i] == input_string[i+1]:\n            substring_counter += 1\n    return substring_counter\n\n", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    total = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i+1] and string[i] == string[len(string)-1]:\n            total += 1\n    return total\n\n# This is a sample test case", "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(str):\n    # write your code here\n    if len(str) < 2:\n        return 0\n    return len(set(str[:len(str)//2+1])) * 2\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start, end):\n    max_count = 1\n    max_number = 1\n    for i in range(start, end):\n        count = 0\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_number = i\n    return max_number", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(num1, num2):\n    divisor = 1\n    for i in range(num1, num2 + 1):\n        if num1 % i == 0:\n            divisor = i\n    return divisor", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start, end):\n    divisors = []\n    for i in range(start, end+1):\n        divisors.append(i)\n        for d in divisors:\n            if i % d == 0:\n                return d\n\n    return -1\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start, end):\n    divisor_list = []\n    for i in range(start, end+1):\n        divisor_list.append(i)\n    return max(divisor_list)\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start,end):\n    \"\"\"\n    In this function we will take an interval range, and iterate through it\n    to find the maximum occuring divisor.\n    Args:\n        start: (int) start of the interval\n        end: (int) end of the interval\n    Returns:\n        int: The maximum occuring divisor\n    \"\"\"\n    count = 1\n    for i in range(start,end+1):\n        if i % count == 0:\n            count = i\n        elif i == end+1:\n            return count\n            break\n    return count\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start, end):\n    result = 1\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            continue\n        if i > 1 and i % 2 == 0:\n            continue\n        if i % 10 == 0:\n            continue\n        if i > 10 and i % 10 == 0:\n            continue\n        if i % 20 == 0:\n            continue\n        if i > 20 and i % 20 == 0:\n            continue\n        if i % 30 == 0:\n            continue\n        if i > 30 and i % 30 == 0:\n            continue\n        if i % 40 == 0:\n            continue\n        if i > 40 and i % 40 == 0:\n            continue\n        if i % 50 == 0:\n            continue\n        if i > 50 and i % 50 == 0:\n            continue\n        if i % 60 == 0:\n            continue\n        if i > 60 and i % 60 == 0:\n            continue\n        if i % 70 == 0:\n            continue\n        if i > 70 and i % 70 == 0:\n            continue\n        if i % 80 == 0:\n            continue\n        if i > 80 and i % 80 == 0:\n            continue\n        if i % 90 == 0:\n            continue\n        if i > 90 and i % 90 == 0:\n            continue\n        if i % 100 == 0:\n            continue\n        if i > 100 and i % 100 == 0:\n            continue\n        if i % 1000 == 0:\n            continue\n        if i > 1000 and i % 1000 == 0:\n            continue\n        if i % 10000 == 0:\n            continue\n        if i > 10000 and i % 10000 == 0:\n            continue\n        if i % 100000 == 0:\n            continue\n        if", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\nimport math\n\ndef find_Divisor(n, k):\n    \"\"\"\n    This function returns the greatest common divisor for an interval\n    \n    :param n: lower bound\n    :type n: int\n    :param k: upper bound\n    :type k: int\n    :return: the greatest common divisor\n    :rtype: int\n    \"\"\"\n    return math.gcd(n, k)", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(x,y):\n    if x>y:\n        x,y = y,x\n    print(x,y)\n    divisor = x\n    while x < y:\n        if y%x == 0:\n            y = y // x\n            print(divisor)\n            return divisor\n        else:\n            divisor += 1\n    return divisor\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(n,k):\n    l=1\n    while (n%l!=0):\n        l+=1\n    if (l!=k):\n        return l\n    else:\n        return k\n", "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n# 2nd solution\ndef find_Divisor(a,b):\n    for i in range(a,b+1):\n        if b%i == 0:\n            return i\n    return None\n\n# 1st solution\ndef find_Divisor(a,b):\n    m = a\n    for i in range(a,b):\n        if b%i == 0:\n            m = i\n    return m\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    return sorted_list[0] + sorted_list[1] + sorted_list[2]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\nfrom typing import List\n\ndef sum_three_smallest_nums(nums: List[int]) -> int:\n    nums.sort()\n    return nums[0] + nums[1] + nums[2]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(numbers):\n    numbers.sort()\n    if len(numbers) < 3:\n        return -1\n    else:\n        return numbers[0] + numbers[1] + numbers[2]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    temp = []\n    for i in nums:\n        temp.append(i)\n    temp.sort()\n    return temp[:3]\n\ndef main():\n    print(sum_three_smallest_nums([10,20,30,40,50,60,7]))\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(numbers):\n    \"\"\"\n    # Quick sort works for small list\n    # O(n^2)\n    if len(numbers) <= 3:\n        sum = 0\n        for number in numbers:\n            if number > 0:\n                sum = sum + number\n        return sum\n    \"\"\"\n    # Bubble sort\n    # O(n^2)\n    if len(numbers) <= 3:\n        sum = 0\n        for number in numbers:\n            if number > 0:\n                sum = sum + number\n        return sum\n\n    # Merge sort\n    # O(n log n)\n    if len(numbers) == 1:\n        return numbers[0]\n\n    left = numbers[0]\n    right = numbers[1]\n    for index in range(2, len(numbers)):\n        if numbers[index] < left:\n            left = numbers[index]\n        if numbers[index] < right:\n            right = numbers[index]\n\n    return left + right + sum_three_smallest_nums(numbers[3:])\n\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(numbers):\n    smallest_three = sorted(numbers)[0:3]\n    return sum(smallest_three)", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    return sum(sorted(nums)[:3])\n\ndef sum_three_smallest_nums_v2(nums):\n    return sum(sorted(nums)[:3])\n\ndef sum_three_smallest_nums_v3(nums):\n    sorted_nums = sorted(nums)\n    return sum(sorted_nums[:3])\n\ndef sum_three_smallest_nums_v4(nums):\n    sorted_nums = sorted(nums)\n    return sum(sorted_nums[:3])\n\ndef sum_three_smallest_nums_v5(nums):\n    return sorted(nums)[0:3][-1]\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(num_list):\n    # First sort the list, using the sorted() function\n    sorted_nums = sorted(num_list)\n\n    # Next get the length of the list\n    list_length = len(sorted_nums)\n\n    # Set the sum as a variable\n    sum_of_three_smallest = 0\n\n    # If the list length is greater than 3, loop for 3 times\n    # and add the first three numbers to the sum\n    if list_length > 3:\n        for i in range(0,3):\n            sum_of_three_smallest += sorted_nums[i]\n\n    # Otherwise, just add the first three numbers to the sum\n    else:\n        sum_of_three_smallest = sorted_nums[0] + sorted_nums[1] + sorted_nums[2]\n\n    return sum_of_three_smallest", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\n# Method 1\ndef sum_three_smallest_nums(arr):\n    arr.sort()\n    return arr[0] + arr[1] + arr[2]\n\n# Method 2\ndef sum_three_smallest_nums(arr):\n    return sum(sorted(arr)[:3])\n\n# Method 3\ndef sum_three_smallest_nums(arr):\n    return sum(sorted(arr)[-3:])\n", "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    #code here\n    return sum(sorted(nums)[:3])\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    l = list(s)\n    l.sort()\n    t = tuple(l)\n    return t\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_in):\n    set_out = set()\n    while set_in:\n        set_out.add(tuple(sorted(set_in)))\n        set_in.remove(tuple(sorted(set_in)))\n    return set_out\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(s):\n  return tuple(sorted(s))\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set):\n    return tuple(set)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nfrom typing import Tuple, Set, Iterable, Callable\n\ndef set_to_tuple(set_: Set) -> Tuple:\n    return tuple(set_)\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set_data):\n    return tuple(sorted(set_data))\n\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nimport itertools\n\n\ndef set_to_tuple(s):\n    # use sorted function and generator expression to get the unique values in an ordered way\n    unique_elements = sorted(s)\n    # get the position of each element in the sorted list and return the tuple\n    return tuple([unique_elements.index(e) for e in s])\n", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\n# +\n# Example 1\n\n# +\n# Example 2\n\n# +\n# Example 3\n\n# +\n# Example 4\n\n# +\n# Example 5\n\n# +\n# Example 6\n\n# +\n# Example 7\n\n# +\n# Example 8\n\n# +\n# Example 9\n\n# +\n# Example 10\n\n# +\n# Example 11\n\n# +\n# Example 12\n\n# +\n# Example 13\n\n# +\n# Example 14\n\n# +\n# Example 15\n\n# +\n# Example 16\n\n# +\n# Example 17\n\n# +\n# Example 18\n\n# +\n# Example 19\n\n# +\n# Example 20\n\n# +\n# Example 21\n\n# +\n# Example 22\n\n# +\n# Example 23\n\n# +\n# Example 24\n\n# +\n# Example 25\n\n# +\n# Example 26\n\n# +\n# Example 27\n\n# +\n# Example 28\n\n# +\n# Example 29\n\n# +\n# Example 30\n\n# +\n# Example 31\n\n# +\n# Example 32\n\n# +\n# Example 33\n\n# +\n# Example 34\n\n# +\n# Example 35\n\n# +\n# Example 36\n\n# +\n# Example 37\n\n# +\n# Example 38\n\n# +\n# Example 39\n\n# +\n# Example 40\n\n# +\n# Example 41\n\n# +\n# Example 42\n\n# +\n# Example 43\n\n# +\n# Example 44\n\n# +\n# Example 45\n\n# +\n# Example 46\n\n# +\n# Example", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nfrom typing import Union, Set\n\nfrom .validation_functions import *\nfrom .set_functions import *\n\n\ndef set_to_tuple(given_set: Set) -> tuple:\n    \"\"\"\n    Write a function to convert the given set into ordered tuples.\n    \"\"\"\n    # Check if the given input is an ordered tuple\n    assert is_ordered_tuple(given_set), \"The given set is not an ordered tuple.\"\n\n    # Check if the given input is a set\n    assert is_set(given_set), \"The given set is not a set.\"\n\n    # Check if all the items of the given set are unique\n    assert is_unique_set(given_set), \"The given set has duplicate items.\"\n\n    # Check if the given input is a sequence\n    assert is_sequence(given_set), \"The given set is not a sequence.\"\n\n    # Check if all the items of the given set are of the same type\n    assert is_same_type(given_set), \"The given set has items of different types.\"\n\n    # Check if the given input is a tuple\n    assert is_tuple(given_set), \"The given set is not a tuple.\"\n\n    # Check if the given input is a sequence\n    assert is_sequence(given_set), \"The given set is not a sequence.\"\n\n    # Check if the given input is an immutable sequence\n    assert is_immutable_sequence(given_set), \"The given set is not an immutable sequence.\"\n\n    # Check if the given input is a non-empty sequence\n    assert is_non_empty_sequence(given_set), \"The given set is an empty sequence.\"\n\n    # Check if the given input is a tuple\n    assert is_tuple(given_set), \"The given set is not a tuple.\"\n\n    # Check if the given input is a sequence\n    assert is_sequence(given_set), \"The given set is not a sequence.\"\n\n    # Check if the given input is an immutable sequence\n    assert is_immutable_sequence(given_set), \"The given set is not an immutable sequence.\"\n\n    # Check if the given input is a non-empty sequence\n    assert is_non_", "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\nfrom typing import Set\n\n\ndef set_to_tuple(set_: Set[int]) -> tuple[int, ...]:\n    set_ = set(set_)\n    return tuple(sorted(set_))\n\n\ndef main():\n    assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom typing import List\n\n\ndef find_minimum_range(arrays: List[List[int]]) -> (int, int):\n    if not arrays:\n        return None\n    start = arrays[0][0]\n    end = arrays[0][-1]\n    min_length = len(arrays[0])\n    for i in range(1, len(arrays)):\n        array = arrays[i]\n        if start > array[0]:\n            start = array[0]\n        if end < array[-1]:\n            end = array[-1]\n        if min_length > len(array):\n            min_length = len(array)\n    return start, end + min_length - 1\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef find_minimum_range(arrs: List[List[int]]) -> Tuple[int, int]:\n    \"\"\"\n    Finds the smallest range that includes at least one element from each of the given arrays.\n    \"\"\"\n    # [1, 5, 12], [4, 8, 15, 16]\n    # = [1, 4, 5, 8, 12, 15, 16]\n    # = [1, 4, 5, 8, 15, 16, 21]\n    arrs = sorted(arrs)\n    n = len(arrs[0])\n    res = n + 1\n    for i in range(n):\n        # Min value will be the first in the array\n        start = arrs[0][i]\n        # Max value will be the last in the array\n        end = arrs[-1][i]\n        if res > end - start:\n            res = end - start\n    return res, start\n\n\ndef test_find_minimum_range():\n    arrs = [\n        [3, 6, 8, 10, 15],\n        [1, 5, 12],\n        [4, 8, 15, 16],\n        [2, 6],\n    ]\n    res = find_minimum_range(arrs)\n    print(res)\n    assert res == (4, 6)\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrs):\n    if len(arrs) == 0:\n        return (-1, -1)\n    arr_min = []\n    arr_max = []\n    arr_min.append(min(arrs[0]))\n    arr_max.append(max(arrs[0]))\n    for i in range(1, len(arrs)):\n        arr_min.append(min(arrs[i]))\n        arr_max.append(max(arrs[i]))\n    min_val = arr_min[0]\n    min_index = 0\n    for i in range(1, len(arrs)):\n        if arr_max[i] < min_val:\n            min_val = arr_max[i]\n            min_index = i\n    max_val = arr_max[0]\n    max_index = 0\n    for i in range(1, len(arrs)):\n        if arr_min[i] > max_val:\n            max_val = arr_min[i]\n            max_index = i\n    return (min_val, max_val)\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arr_list):\n    '''\n    input: List of lists of integers\n    output: Two integers\n    '''\n    min_number = sys.maxsize\n    max_number = 0\n    for arr in arr_list:\n        if arr:\n            for number in arr:\n                min_number = min(min_number, number)\n                max_number = max(max_number, number)\n    if min_number == sys.maxsize:\n        return 0, 0\n    return min_number, max_number\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr):\n    sorted_arr = sorted(arr[0])\n    range_min, range_max = sorted_arr[0], sorted_arr[-1]\n    for i, arr_ in enumerate(arr):\n        for val in arr_:\n            if val < range_min:\n                range_min = val\n            if val > range_max:\n                range_max = val\n        for val in arr_:\n            if val > range_max:\n                range_max = val\n            if val < range_min:\n                range_min = val\n\n    return range_min, range_max\n\n# TLE", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        min_range = min(arr[0])\n        max_range = max(arr[0])\n        for i in range(1,len(arr)):\n            if arr[i][0] > max_range:\n                max_range = arr[i][0]\n            if arr[i][-1] < min_range:\n                min_range = arr[i][-1]\n        return min_range, max_range\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(input_list):\n    input_list.sort()\n    # Return the maximum difference\n    return max(input_list[0] - input_list[1], input_list[-2] - input_list[-1])\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    arrays = sorted(arrays, key=lambda array: min(array))\n    start = arrays[0][0]\n    end = arrays[-1][-1]\n    for i in range(1, len(arrays)):\n        array = arrays[i]\n        start = min(array[0], start)\n        end = max(array[-1], end)\n    return start, end\n\n", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    if not arrays:\n        return None\n\n    min_low = min(map(min, arrays))\n    min_high = min(map(max, arrays))\n    return min_low, min_high\n\n# assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)", "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom typing import List\n\ndef find_minimum_range(arrs: List[List[int]]) -> (int, int):\n    # brute force\n    if len(arrs) == 1:\n        return (min(arrs[0]), max(arrs[0]))\n    arrs = [sorted(arr) for arr in arrs]\n    s = []\n    for i in range(len(arrs[0])):\n        s.append((arrs[0][i], arrs[1][i], arrs[2][i]))\n    for j in range(1, len(arrs[0])):\n        for i in range(j+1, len(arrs[0])):\n            if s[i][0] > s[i-1][1] or s[j][0] > s[j+1][1]:\n                break\n            start = min(s[i][0], s[j][0])\n            end = max(s[i][1], s[j][1])\n            if start <= end:\n                return (start, end)\n    return (min(arrs[0]), max(arrs[0]))\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    count_digits = 0\n    count_letters = 0\n    for character in string:\n        if character.isdigit():\n            count_digits += 1\n        elif character.isalpha():\n            count_letters += 1\n    return count_digits, count_letters\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\nimport re\ndef dig_let(strng):\n    if(strng==\"\"):\n        return (0,0)\n    r=re.compile(\".*\")\n    return (len(r.match(strng).group()),len(strng)-len(r.match(strng).group()))\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(strng):\n    count_dig = 0\n    count_let = 0\n    for c in strng:\n        if c.isalpha():\n            count_let = count_let + 1\n        if c.isdigit():\n            count_dig = count_dig + 1\n    return (count_dig, count_let)\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(string):\n\tcount = 0\n\tletters = 0\n\tfor c in string:\n\t\tif c.isalpha():\n\t\t\tletters += 1\n\t\telse:\n\t\t\tcount += 1\n\treturn (count,letters)\n\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    digit = 0\n    letter = 0\n    for c in s:\n        if c.isdigit():\n            digit += 1\n        elif c.isalpha():\n            letter += 1\n    return digit, letter", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(str1):\n    digit = 0\n    for char in str1:\n        if char.isdigit():\n            digit += 1\n    letter = 0\n    for char in str1:\n        if char.isalpha():\n            letter += 1\n    return digit, letter\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    d = 0\n    l = 0\n    for c in s:\n        if c.isdigit():\n            d += 1\n        elif c.isalpha():\n            l += 1\n    return d, l\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(str):\n    return len(str),len([i for i in str if i.isalpha()])\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    return len(s.replace(\" \",\"\"))\n", "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(word):\n    count = 0\n    for i in word:\n        if i.isalpha():\n            count +=1\n        elif i.isnumeric():\n            count +=1\n    return count, count\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(start, end):\n    \"\"\"\n    :param start: starting integer\n    :param end: ending integer\n    :return: number of elements with odd factors in the range\n    \"\"\"\n    num_count = 0\n    for i in range(start,end+1):\n        count = 0\n        for j in range(1, i+1):\n            if i % j == 0:\n                count += 1\n        if count % 2 == 1:\n            num_count += 1\n    return num_count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\nimport math\ndef count_Odd_Squares(n,m):\n    ans = 0\n    for i in range(n,m+1):\n        sq = i*i\n        c = 0\n        for j in range(2,i):\n            if (sq%j==0):\n                c = c+1\n        if (c % 2 == 1):\n            ans = ans+1\n    return ans", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(l,u):\n    count=0\n    for i in range(l,u+1):\n        if (i%2==1):\n            for j in range(2,i):\n                if (i%j==0):\n                    break\n            else:\n                count+=1\n    return count", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(min,max):\n    count=0\n    for i in range(min,max+1):\n        if i%2 != 0:\n            continue\n        else:\n            for j in range(min,max+1):\n                if j%i != 0:\n                    continue\n                else:\n                    count +=1\n                    break\n    return count", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(l, r):\n    ans = 0\n    for i in range(l, r):\n        if i % 2 == 0:\n            continue\n        for j in range(l, r):\n            if j % 2 == 0:\n                continue\n            if i*i == j:\n                ans += 1\n    return ans\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(a,b):\n    count = 0\n    for i in range(a,b+1):\n        if is_odd(i):\n            count += is_square(i)\n    return count\n\ndef is_odd(n):\n    return n%2 != 0\n\ndef is_square(n):\n    return (n**0.5)%1 == 0", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(a, b):\n    #write your code here\n    if a>b:\n        a,b = b,a\n    count = 0\n    for i in range(a, b+1):\n        flag = 0\n        if(i%2 == 0):\n            for j in range(1, i):\n                if(i%j == 0):\n                    flag = 1\n                    break\n            if(flag == 0):\n                count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(a, b):\n    sum = 0\n    for i in range(a,b+1):\n        count = 0\n        for j in range(1, i+1):\n            if i%j == 0:\n                count += 1\n        if count % 2 != 0:\n            sum += 1\n    return sum\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(start,end):\n    count = 0\n    for i in range(start,end+1):\n        if(is_odd(i)):\n            count += 1\n    return count\n\ndef is_odd(num):\n    if(num == 0):\n        return False\n    if(num % 2 == 0):\n        return False\n    return True\n", "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(low,high):\n    count = 0\n    for i in range(low,high):\n        if is_square(i) and check_odd(i):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(numbers):\n    num_diffs = []\n    for i in range(len(numbers)-1):\n        num_diffs.append(numbers[i+1] - numbers[i])\n    return num_diffs\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(ls):\n    return [abs(ls[i] - ls[i - 1]) for i in range(1, len(ls))]\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(list):\n    '''\n    :param list: a list of numbers\n    :return: a list of differences between consecutive numbers\n    '''\n    diffs = []\n    for i in range(len(list)-1):\n        diffs.append(list[i+1]-list[i])\n    return diffs", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(list):\n    for index, item in enumerate(list):\n        if (index == len(list) -1) and (index == 0):\n            pass\n        else:\n            next_item = list[index + 1]\n            diff = next_item - item\n            print(diff)\n\ndiff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\nfrom typing import List\n\ndef diff_consecutivenums(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == len(nums)-1:\n            result.append(0)\n            continue\n        if nums[i] == nums[i+1]:\n            result.append(0)\n        else:\n            result.append(nums[i+1] - nums[i])\n    return result\n\n\ndef diff_consecutivenums_iterator(nums: List[int]) -> List[int]:\n    result = []\n    prev = nums[0]\n    for i in range(len(nums)):\n        if nums[i] == prev:\n            result.append(0)\n        else:\n            result.append(nums[i] - prev)\n            prev = nums[i]\n    return result\n\n\ndef diff_consecutivenums_generator(nums: List[int]) -> List[int]:\n    result = []\n    prev = nums[0]\n    for i in range(len(nums)):\n        if nums[i] == prev:\n            result.append(0)\n        else:\n            result.append(nums[i] - prev)\n            prev = nums[i]\n    return result\n\n\ndef diff_consecutivenums_recursiv(nums: List[int]) -> List[int]:\n    result = []\n    if len(nums) == 0:\n        return result\n\n    if len(nums) == 1:\n        result.append(nums[0])\n        return result\n\n    result.append(nums[1] - nums[0])\n    return result + diff_consecutivenums_recursiv(nums[2:])\n\n\ndef diff_consecutivenums_recursiv_generator(nums: List[int]) -> List[int]:\n    result = []\n    if len(nums) == 0:\n        return result\n\n    if len(nums) == 1:\n        result.append(nums[0])", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    ret = []\n    if len(nums) < 2:\n        return ret\n    n = len(nums)\n    ret.append(nums[1] - nums[0])\n    for i in range(1, n-1):\n        ret.append(nums[i+1] - nums[i])\n    ret.append(nums[n-1] - nums[n-2])\n    return ret", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(arr):\n    # TODO: Write your function here\n    diff_arr = []\n    for i in range(0, len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        diff_arr.append(diff)\n    return diff_arr\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\n# Your solution goes here\n\ndef diff_consecutivenums(numbers):\n    diffs = []\n    for i in range(len(numbers)-1):\n        diffs.append(numbers[i+1] - numbers[i])\n    return diffs\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(lst):\n    diff=[]\n    for i in range(len(lst)-1):\n        diff.append(lst[i+1]-lst[i])\n    return diff\n\n", "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    nums=sorted(nums)\n    diff=[nums[i+1]-nums[i] for i in range(len(nums)-1)]\n    return diff\n\ndef test_diff_consecutivenums():\n    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    ret = 0\n    x = 1\n    y = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            ret += y\n        else:\n            ret += x\n        x += 2\n        y += 4\n    return ret\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    \"\"\"return zigzag number e(n, k)\"\"\"\n    assert k > 0, \"k should be positive.\"\n    if k == 1:\n        return n\n    elif k == 2:\n        return (n + 2) // 2\n    else:\n        return zigzag(2 * (n - 1) - (k - 1), k - 1)\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if n == 1 or n == 2:\n        return n\n    if n == 3:\n        return 3\n    x = 2 * zigzag(n // 2, k)\n    if n % 2:\n        return x + 2 * k\n    else:\n        return x - 2 * k\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    num = 0\n    while n > 0:\n        num += n\n        n -= k\n    return num\n\ndef test():\n    assert zigzag(4, 3) == 5\n    assert zigzag(2, 3) == 3\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    k = k % n\n    if k == 0:\n        return 0\n    #2n >= 2k + 1\n    if 2*n >= 2*k + 1:\n        return zigzag(n, k - 1) + n\n    else:\n        return 2*n - zigzag(n, k - 1)\n\ndef test():\n    for n in [4, 5]:\n        for k in range(n+1):\n            if n % 2 == 0:\n                if k % 2 == 0:\n                    print(n, k, zigzag(n, k))\n                else:\n                    print(n, k, zigzag(n, k))\n            else:\n                if k % 2 == 0:\n                    print(n, k, zigzag(n, k))\n                else:\n                    print(n, k, zigzag(n, k))\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\nfrom itertools import chain\n\n\ndef zigzag(length, n):\n    s = ''.join(chain(*[str(i) for i in range(1, n + 1)]))\n    if length == len(s):\n        return s\n    else:\n        return zigzag(length, n) + s[:length - len(s)]\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n  if n==1:\n    return k\n  elif n==2:\n    return k+1\n  else:\n    return zigzag(n-2, k+2)\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if (n == 1):\n        return 1\n    else:\n        return (n * zigzag(n - 1, k)) + zigzag(n - 1, k - 1)\n\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return (n-1)%k + (n-2)%k + 1\n", "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if k == 1:\n        return 0\n    else:\n        return n + zigzag(n * k - 1, k-1)\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(side1, side2):\n    return side1 * side1 + side2 * side2\n\n\n# +\n#assert count_Squares(4,3) == 20\n\n# +", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(w,h):\n    #your code goes here\n    #this is a dummy return\n    return 0\n\ndef test_1():\n    assert count_Squares(4,3) == 20\n\ndef test_2():\n    assert count_Squares(10,3) == 20\n\ndef test_3():\n    assert count_Squares(10,2) == 20", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(height, width):\n    \"\"\"\n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(1,2)\n    1\n    \"\"\"\n    # Test\n    #assert height > 0 and width > 0\n    count = 0\n    for i in range(width):\n        for j in range(height):\n            if i**2 + j**2 <= 100:\n                count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(height, length):\n\t# your code here\n\treturn (height*length) ** 2\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(length, width):\n    n = 0\n    for i in range(length):\n        for j in range(width):\n            if (i*i == j*j):\n                n = n + 1\n    return n\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(width, height):\n    return width * height\n\ndef test_count_squares():\n    assert count_Squares(4, 3) == 20\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(w,h):\n    count = 0\n    for i in range(1,w+1):\n        for j in range(1,h+1):\n            if i**2 == j**2:\n                count += 1\n    return count\n\ndef count_Squares_better(w,h):\n    count = 0\n    for i in range(w):\n        for j in range(h):\n            if (i+1)**2 == (j+1)**2:\n                count += 1\n    return count\n\ndef count_Squares_even_better(w,h):\n    count = 0\n    for i in range(w):\n        count += 1 + w - i\n\n    for j in range(h):\n        count += 1 + h - j\n\n    return count // 2\n\ndef count_Squares_even_betterer(w,h):\n    return (w+1)**2 // 2 + (h+1)**2 // 2 - 1\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(x,y):\n    return x*y", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    total = 0\n    for row in range(width):\n        for column in range(height):\n            if (row % 2) == 0 and (column % 2) == 0:\n                total += 1\n    return total\n", "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(n,m):\n    return n*m\n"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(length):\n    if length == 0:\n        return 1\n\n    ways = 0\n    for i in range(0, length):\n        ways += find_ways(length - i - 1)\n\n    return ways\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom collections import defaultdict\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(length):\n    ways = [0] * (length + 1)\n    ways[0] = 1\n    ways[1] = 1\n    for i in range(2, length + 1):\n        ways[i] = ways[i - 1] + ways[i - 2]\n    return ways[length]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(length):\n    #create a dp table\n    ways = [0 for i in range(length+1)]\n    # dp initialization\n    ways[0] = 1\n    # dp solution\n    for i in range(1, length+1):\n        for j in range(1, i):\n            ways[i] += ways[j]\n    return ways[length]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nimport itertools\n\n\ndef find_ways(length):\n    def non_negative_prefix_sum(values):\n        prefix_sum = 0\n        for value in values:\n            prefix_sum += value\n            yield prefix_sum\n\n    return len(list(non_negative_prefix_sum(range(length))))\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom collections import defaultdict\n\n\ndef find_ways(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # dp[i][j] = total number of ways to generate a sequence of length i\n    # with prefix sums = j\n    dp = defaultdict(lambda: [0 for _ in range(n + 1)])\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i][j] = dp[i][j] + dp[i - 1][j]\n            if j + a[i] <= n:\n                dp[i][j] = dp[i][j] + dp[i - 1][j + a[i]]\n\n    return dp[n][n]\n\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(n):\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            if i - j >= 0:\n                dp[i] += dp[j]\n    return dp[n]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(length):\n    if length == 0:\n        return 0\n    if length == 1:\n        return 2\n\n    ways = [0] * (length + 1)\n    ways[0] = 1\n    ways[1] = 2\n    for i in range(2, length + 1):\n        ways[i] = sum(ways[j] for j in range(1, i))\n    return ways[length]\n\n#print(find_ways(4))", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\nfrom collections import defaultdict\n\ndef find_ways(k):\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(1, k+1):\n        for j in range(1, i+1):\n            dp[i] += dp[i-j]\n    return dp[k]\n", "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(length):\n    arr = [0] * length\n    dp = [[0] * length for i in range(length)]\n    dp[0][0] = 1\n    \n    for i in range(1, length):\n        dp[i][0] = 1\n        \n    for i in range(1, length):\n        for j in range(1, length):\n            if j >= values[i - 1]:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - values[i - 1]]\n            \n    return dp[-1][-1]"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    if len(string) == 0:\n        return 'Yes'\n    i = 0\n    length = len(string)\n    while i < length:\n        if string[i] not in ['0', '1']:\n            return 'No'\n        i += 1\n    return 'Yes'\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(n):\n    if(len(n) == 0):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    return \"Yes\" if string == string[::-1] else \"No\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    temp = str(s)\n    temp = temp.replace('0','')\n    temp = temp.replace('1','')\n    if len(temp) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    if(len(s)%8 == 0):\n        i=0\n        for j in s:\n            if(i%8 == 0):\n                if(int(j) != 0):\n                    return \"No\"\n            else:\n                if(int(j) != 0):\n                    return \"No\"\n            i+=1\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    a = set()\n    for i in string:\n        if i in a:\n            return \"No\"\n        else:\n            a.add(i)\n    return \"Yes\"\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    s1 = s[::-1]\n    s2 = s\n    if s1 == s2:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(binary):\n    if binary == \"0\" or binary == \"1\":\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    return(list(s).count('1') == list(s).count('0'))\n\n", "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    n = len(s)\n    if n % 2 != 0:\n        return \"No\"\n    n //= 2\n    res = []\n    while n > 0:\n        res.append(s[0:2])\n        s = s[2:]\n        n -= 1\n    return \"Yes\" if s == \"\" else \"No\"\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\nfrom typing import Union\n\n\ndef minimum_Length(string: Union[str, list]) -> int:\n    # Your code here\n    if type(string) == str:\n        return len(string) - string.count(string[0])\n    else:\n        return [len(x) - x.count(x[0]) for x in string]\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\nfrom __future__ import print_function\n\ndef minimum_Length(string):\n    if len(string) < 2:\n        return 1\n    s = set(string)\n    return min(1, min(map(len, s)))\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    i = 0\n    length = len(string)\n    while i<length:\n        flag = 0\n        for j in range(i+1,length+1):\n            if string[j] == string[i]:\n                flag = 1\n                break\n        if flag == 0:\n            return i+1\n        i+=1\n    return length\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    if len(s)<=1:\n        return len(s)\n    else:\n        return min(minimum_Length(s[1:]),minimum_Length(s[:-1]))\n    ", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(string):\n    return len(string) - len(set(string))\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(str):\n    st = \"\"\n    for i in range(0,len(str)):\n        st+=str[i]\n    if len(st)==1:\n        return len(str)\n    if len(st)!=1:\n        return len(str)-1\n\n\n# Write a python function that returns the index of the first character in a string that is a vowel.\ndef index_vowel(str):\n    for i in range(0,len(str)):\n        if str[i] == \"a\" or str[i] == \"e\" or str[i] == \"i\" or str[i] == \"o\" or str[i] == \"u\":\n            return i\n\n\n# Write a python function that returns the index of the first character in a string that is a vowel.", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    pass\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(s):\n    c = set()\n    for i in s:\n        if i in c:\n            c.remove(i)\n        else:\n            c.add(i)\n    if len(c) == 0:\n        return len(s)\n    else:\n        return 1+minimum_Length(\"\".join(c))\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\nfrom unittest import TestCase\n\n", "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    if len(string)==0:\n        return 0\n    else:\n        l = 1\n        if len(string)>2:\n            for i in range(1,len(string)):\n                if string[i]==string[i-1]:\n                    continue\n                elif string[i]==string[i-1]:\n                    l=i\n                else:\n                    break\n            l=i+1\n        elif len(string)==2:\n            if string[1]==string[0]:\n                l=1\n            else:\n                l=2\n    return l\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,flag):\n  if k > len(arr):\n    return None\n  if k==len(arr):\n    if flag:\n      return None\n    else:\n      return arr[0]\n  if arr[k] == arr[k-1]:\n    return first_Element(arr,k+1,flag)\n  if arr[k] == arr[k-1]:\n    return first_Element(arr,k+1,flag)\n  else:\n    return arr[k]\n\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,k,n):\n    x=arr[0]\n    for i in range(n):\n        if(x==arr[i]):\n            k=k-1\n    if(k==0):\n        return x\n    else:\n        return 0", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(array,k,x):\n    for i in range(k):\n        if array[i]==x:\n            return array[i]", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,k,num):\n    # Your code goes here\n    for i in range(len(arr)):\n        if arr[i] == num:\n            k -= 1\n            if k == 0:\n                return i\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,n,k):\n    arr_len = len(arr)\n    index = 0\n    count = 0\n    while index < arr_len:\n        if arr[index] == k:\n            count = count + 1\n        index = index + 1\n    if count == k:\n        return arr[index-1]\n    else:\n        return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(array,k,i):\n    #your code here\n    for j in range(i,len(array)):\n        if array[j]==k:\n            return array[j]\n        elif array[j]>k:\n            return array[j-1]\n    return None\n\n#assert first_Element([0,1,2,3,4,5],6,1) == 0\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr,n,k):\n    # arr = list of elements\n    # n = length of array\n    # k = kth occurrence of element\n    \n    i = 0\n    while(i < n):\n        if(arr[i] == k):\n            return arr[i]\n        i += 1\n        \n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,n,k):\n    #Write your code here\n    #return -1\n    s=0\n    for i in range(n):\n        if(arr[i]==k):\n            s=i+1\n            break\n    return s-1\n\n#---------------------------------------------------", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(array, n, k):\n    i = 0\n    while i < len(array) and k > 0:\n        if array[i] == n:\n            k -= 1\n        i += 1\n    if k == 0:\n        return n\n    return -1\n", "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, n, k):\n    for i in arr:\n        if arr.count(i) == k:\n            return i\n    return -1\n"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_characters(str1):\n    list1 = list(str1)\n    #set1 = set()\n    for i in range(len(list1)):\n        if list1[i] in list1[i+1:]:\n            return False\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_characters(input_string):\n    if len(input_string) == 0:\n        return True\n    if input_string[0] in input_string[1:]:\n        return False\n    return unique_characters(input_string[1:])\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(s):\n    \"\"\"\n    >>> unique_Characters('aba')\n    False\n    >>> unique_Characters('ab')\n    True\n    >>> unique_Characters('abc')\n    False\n    \"\"\"\n    seen = set()\n    for char in s:\n        if char in seen:\n            return False\n        seen.add(char)\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_characters(string):\n    chars = dict()\n    for i in string:\n        if i in chars:\n            return False\n        chars[i] = True\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\n#recursive solution\ndef unique_Characters(string):\n    \"\"\"\n    Input: a string\n    Output: a boolean value\n    \"\"\"\n    if len(string) == 0:\n        return True\n    elif len(string) == 1:\n        return True\n    elif string[1] in string[0]:\n        return False\n    else:\n        return unique_Characters(string[1:])\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str1):\n\td = {}\n\tfor c in str1:\n\t\tif c in d:\n\t\t\treturn False\n\t\td[c] = 1\n\treturn True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_characters(string):\n    return len(set(string)) == len(string)\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str):\n    # TODO: Write a function that takes a string as an argument and returns a boolean value that is true if the string is unique.\n    # Assume that there are no duplicate characters.\n    # Examples:\n    # unique_Characters('aba') == False\n    # unique_Characters('aab') == True\n    # unique_Characters('ababababa') == False\n    # unique_Characters('') == True\n    unique_chars = {}\n    for char in str:\n        if char in unique_chars:\n            return False\n        else:\n            unique_chars[char] = 1\n    return True\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    #your code here\n    return len(set(string)) == len(string)\n\n", "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    unique = set()\n    for character in string:\n        if character in unique:\n            return False\n        unique.add(character)\n    return True\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(l,column):\n    res = []\n    for sublist in l:\n        res.append([j for i,j in enumerate(sublist) if i != column])\n    return res\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, position):\n    return [row[:position] + row[position+1:] for row in lst]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(l, i):\n    if len(l) == 0:\n        return l\n\n    if len(l) == 1:\n        return l[0]\n\n    new_row = remove_column(l[1], i)\n    if i < len(new_row):\n        return [l[0]] + [new_row[i]] + new_row[i+1:]\n\n    return [l[0]] + new_row\n\n# print(remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, index):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][index:])\n    return new_lst\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, n):\n    if n == 0:\n        return [sublist for sublist in lst]\n    return [remove_column(sublist, n - 1) for sublist in lst]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, column_number):\n    return [[val for index, val in enumerate(row) if index != column_number] for row in nested_list]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(columns, column_index):\n    return [column for index, column in enumerate(columns) if index != column_index]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst,col):\n    return [lst[i][:] for i in range(len(lst)) if i != col]\n", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, column):\n    return [sublist[1:] for sublist in nested_list if len(sublist) > 1]", "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(columns,col):\n    return [row[i] for i in range(len(row)) if i!=col for row in columns]\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a, d, n):\n    return (a+(n-1)*d)\n\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,n,d):\n    return a+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(first, last, term):\n    return (last + first) * ((n - 1) / (last - first)) + first\n\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(first, last, t):\n    if t<0:\n        print(\"Number cannot be negative\")\n        return\n    return first + (t-1)*last\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(first, last, interval):\n    total = 0\n    for i in range(first, last+1):\n        total = total + i\n    tn = 0\n    for i in range(1,last+1):\n        tn = tn + 1\n        if tn == interval:\n            return total\n    else:\n        return None\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\n# Given - start, increment, n\n# Return - t-nth term of arithemetic progression\n\ndef tn_ap(start,increment,n):\n    return start+(increment*n)\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(t,n,d):\n    \"\"\"\n    t-nth term of arithemetic progression.\n    \"\"\"\n    return t+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,d,n):\n    return a+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,d,n):\n    return a+(n-1)*d\n", "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(first_term, common_diference, nth_term):\n    return first_term + (nth_term - 1) * common_diference\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n\tn = 0\n\tfor i in range(r + 1):\n\t\tfor j in range(r + 1):\n\t\t\tif i * j <= r:\n\t\t\t\tn += 1\n\treturn n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    # If the radius is greater than 2,\n    if r > 2:\n        # Take the number of rectangles inside the radius of radius r\n        rect = (r * r * 3.14) / (4 * math.sqrt(3))\n        return rect\n    else:\n        # Otherwise, just take the number of rectangles inside the radius of radius 2\n        return 8\n\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\nimport math\n\n#Problem 19", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    return 8*(r**2)-2*(r**2)*(r**2)\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    count = 0\n    for i in range(0,r+1):\n        count = count + 4*i\n    return count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n  if r<0:\n    raise ValueError(\"Radius should be greater than or equal to 0\")\n  else:\n    return 3*r**2 - 3*r + 4\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    import math\n    if r == 0:\n        return 0\n    elif r == 1:\n        return 3\n    else:\n        return 3 + 8 * count_Rectangles(r-1)\n\n# Test:", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if i == j or i+j == r or r-i == j or r-i-j == r:\n                count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\n\ndef count_Rectangles(r):\n    num_of_rectangles = (2 * math.pi * r * r) / (4 * math.tan(math.pi / 6))\n    return int(num_of_rectangles)\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\nfrom typing import Union\n\n\ndef find_angle(angle_1: Union[int, float], angle_2: Union[int, float]) -> float:\n    \"\"\"\n    Returns the third angle of a triangle.\n\n    :param angle_1: the first angle in a triangle.\n    :param angle_2: the second angle in a triangle.\n    :return: the third angle in a triangle.\n    \"\"\"\n    return angle_1 + angle_2 - 90\n\n\ndef test_find_angle():\n    \"\"\"Tests for the find_angle function.\"\"\"\n    assert find_angle(47, 89) == 44\n\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(x,y):\n    return 90-x-y\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    c=(a+b)\n    sum_c=(a+b+c)/2\n    angle_1=90-a\n    angle_2=90-b\n    angle_3=90-sum_c\n    if (a<90 and b<90 and sum_c<90):\n        return round(angle_3)\n    else:\n        return 'The triangle is not possible'\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(first, second):\n    return (second-first)%360", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\nfrom math import radians\ndef find_angle(angle1, angle2):\n    \"\"\"\n    Find the third angle of a triangle given two angles.\n    Parameters\n    ----------\n    angle1 : number\n        First angle of a triangle.\n    angle2 : number\n        Second angle of a triangle.\n    Returns\n    -------\n    number\n        Third angle of a triangle.\n    \"\"\"\n    angle_3 = 180 - angle1 - angle2\n    if angle_3 < 0:\n        angle_3 += 360\n    return angle_3\n\n#Test", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b):\n    # Write your code here.\n    return (360 - a) - b\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\nfrom math import sin,cos\n\ndef find_angle(a,b):\n    angle=2*acos((cos(a/2)*cos(b/2))-(sin(a/2)*sin(b/2)*cos(a+b)))\n    return angle\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1,angle2):\n    return 180-angle1-angle2", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1, angle2):\n    \"\"\"\n    This function will find the third angle of a triangle using two angles.\n    \"\"\"\n    try:\n        angle3 = 180 - (angle1 + angle2)\n    except ValueError:\n        print(\"Please enter numerical input\")\n    else:\n        return angle3\n", "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a, b):\n    return (a+b) - 90\n\n\n# +\n#Testing find_angle function\n#This tests the first case in the assert statement. "], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom typing import Tuple\n\n\ndef find_max(records: Tuple[Tuple[int, int]]) -> int:\n    \"\"\"\n    Find the maximum element from a tuple of tuples.\n\n    :param records: tuples\n    :return: the maximum element\n    \"\"\"\n    return max([x[1] for x in records])\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom typing import Tuple\nimport math\n\n\ndef find_max(records: Tuple[Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"\n    Write a function to find the maximum element of all the given tuple records.\n\n    >>> assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    \"\"\"\n\n    def inner_find_max(records: Tuple[Tuple[int, int]]) -> Tuple[int, int]:\n        if len(records) == 0:\n            return -math.inf, -math.inf\n\n        if len(records) == 1:\n            return records[0]\n\n        lower_bound_max_left, lower_bound_max_right = inner_find_max(\n            records[1:]\n        )\n        upper_bound_max_left, upper_bound_max_right = records[0]\n        max_left = max(lower_bound_max_left, upper_bound_max_left)\n        max_right = max(lower_bound_max_right, upper_bound_max_right)\n        return (\n            max_left,\n            max(max_left, max_right),\n        )\n\n    return inner_find_max(records)\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(tup_list):\n    return max(tup_list, key=lambda x: x[1])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom typing import Any, Tuple\n\n\ndef find_max(records: Tuple[Tuple[int, int]]) -> int:\n    max_val = 0\n    for num in records:\n        if num[1] > max_val:\n            max_val = num[1]\n    return max_val\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    \"\"\"\n    Write a function to find the maximum element of all the given tuple records.\n    >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n    10\n    \"\"\"\n    result = records[0]\n    for r in records:\n        if r[1] > result[1]:\n            result = r\n    return result\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef find_max(data: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Iterate over the list and find the maximum value of both values.\n    \"\"\"\n    return max(max(record) for record in data)\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom typing import Tuple\n\nTupleRecord = Tuple[int, int]\n\n\ndef find_max(tuple_records: Tuple[TupleRecord, ...]) -> int:\n    # Type annotation for tuple records\n    print(type(tuple_records))\n    print(type(tuple_records[0]))\n    print(type(tuple_records[0][0]))\n    print(type(tuple_records[0][1]))\n\n    return max(max(t) for t in tuple_records)\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(tuples):\n    \"\"\"\n    >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n    10\n    \"\"\"\n    if not tuples:\n        return None\n    return max(map(lambda x: x[1], tuples))\n\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(t):\n    return max([i[1] for i in t])\n", "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(record):\n    max_value = record[0][1]\n    for i in record:\n        if i[1] > max_value:\n            max_value = i[1]\n    return max_value\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(list1, list2):\n    list1 = map(lambda a, b: a%b, list1, list2)\n    return list(list1)\n\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(list_1, list_2):\n    return list(map(lambda x: x % list_2[0], list_1))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\nimport pytest\n\n\ndef moddiv_list(A, B):\n    return [a % b for a, b in zip(A, B)]\n\n\ndef test_moddiv_list():\n    assert moddiv_list([4, 5, 6], [1, 2, 3]) == [0, 1, 0]\n\n\ndef test_moddiv_list_wrong():\n    with pytest.raises(ValueError):\n        moddiv_list([4, 5, 6], [1, 2, 3, 4])", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(num1,num2):\n    return list(map(lambda x,y: x%y,num1,num2))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a,b):\n    c = list(map(lambda x: x%b,a))\n    return c\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a,b):\n    return map(lambda x,y: x % y, a, b)\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(l1,l2):\n    res = map(lambda x, y : x % y , l1, l2)\n    return list(res)\n\ndef moddiv_list1(l1,l2):\n    res = map(lambda x, y : x % y , l1, l2)\n    return list(res)\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(arr,divisor):\n    return list(map(lambda x, y: x%y,arr,divisor))", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(a,b):\n    return list(map(lambda x, y: x % y, a, b))\n", "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(a,b):\n    return list(map(lambda x: x % b, a))\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    if a*a - 4*b*c < 0:\n        return \"No\"\n    elif a*a - 4*b*c == 0:\n        return \"Yes\"\n    else:\n        return \"Yes\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    d = b**2 - 4*a*c\n    if (d>0):\n        if (d%2==0):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a, b, c):\n    D = b * b - 4 * a * c\n    if D < 0:\n        return \"No\"\n    elif D == 0:\n        return \"Yes\"\n    else:\n        r1 = (-b + math.sqrt(D)) / (2 * a)\n        r2 = (-b - math.sqrt(D)) / (2 * a)\n        return \"Yes\" if (r1 - r2) == 2 else \"No\"\n\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    r1 = -b + (b**2 - 4*a*c)**0.5\n    r2 = -b - (b**2 - 4*a*c)**0.5\n    if r1 == r2 * 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n\td=b*b-4*a*c\n\tif d>0:\n\t\treturn \"Yes\"\n\tif d<0:\n\t\treturn \"No\"\n\tif d==0:\n\t\treturn \"Yes\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (a==0) and (b==0) and (c==0):\n        return \"No\"\n    elif (a==0) and (b==0) and (c!=0):\n        return \"No\"\n    elif (a==0) and (b!=0) and (c==0):\n        return \"No\"\n    elif (a==0) and (b!=0) and (c!=0):\n        return \"No\"\n    elif (a!=0) and (b==0) and (c==0):\n        return \"No\"\n    elif (a!=0) and (b==0) and (c!=0):\n        return \"No\"\n    elif (a!=0) and (b!=0) and (c==0):\n        return \"No\"\n    elif (a!=0) and (b!=0) and (c!=0):\n        if (b*b) - (4*a*c) == 0:\n            return \"Yes\"\n        else:\n            return \"No\"", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    # Complete this function\n    if a==0:\n        if b==0:\n            return \"No\"\n        return b**2-c\n    if b==0:\n        return a**2-c\n    d = b**2-4*a*c\n    if d>0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n#solution\ndef Check_Solution(a,b,c):\n    root1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    root2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    if root1 == root2:\n        return \"Yes\"\n    else:\n        return \"No\"", "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(x1,y1,c):\n    a = c*c - 4*x1\n    b = 2*c*x1 - 4*y1\n    if b == 0:\n        return \"Yes\"\n    if b*b - 4*a*c < 0:\n        return \"No\"\n    if b*b - 4*a*c == 0:\n        if b == 0:\n            return \"Infinite\"\n        else:\n            return \"Yes\"\n    else:\n        return \"No\"\n"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(num):\n    pass\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    \"\"\"\n    \"\"\"\n    a = 1\n    b = 2\n    for _ in range(n - 1):\n        c = a + b\n        a = b\n        b = c\n    return c\n\n# assert get_carol(2) == 7\n\ndef get_carol2(n):\n    \"\"\"\n    \"\"\"\n    a = 1\n    b = 2\n    for _ in range(n - 1):\n        c = a + b\n        a = b\n        b = c\n    return a\n\n# assert get_carol2(2) == 7\n\ndef get_carol3(n):\n    \"\"\"\n    \"\"\"\n    a = 1\n    b = 2\n    for _ in range(n - 1):\n        c = a + b\n        a = b\n        b = c\n    return c\n\n# assert get_carol3(2) == 7\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\nimport itertools\n\n\ndef get_carol(n):\n    # check if n is even\n    if n % 2 == 1:\n        return None\n    else:\n        # calculate the n-th prime\n        n_prime = next(itertools.dropwhile(lambda x: x < n, itertools.count(2)))\n        # calculate the prime factorization of n_prime\n        prime_factors = []\n        while n_prime > 1:\n            prime_factors.append(n_prime)\n            n_prime = n_prime // 2\n        # calculate the product of the n_prime factors,\n        # and the carol number is n_prime * the product of the prime factors\n        prod_prime_factors = 1\n        for p in prime_factors:\n            prod_prime_factors *= p\n        return n_prime * prod_prime_factors\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    return (n - 1) * 2\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    #initialise variable and check input\n    if type(n) is not int:\n        return -1\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n\n    #check base cases\n    if n < 3:\n        return n\n\n    #calculate recursive\n    return (get_carol(n-1) + get_carol(n-2) + get_carol(n-3)) % 10\n\n\n#assert", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    carols = []\n    for i in range(1, 10000):\n        if i < 100:\n            if i == 10:\n                carols.append(i)\n            elif i < 20:\n                carols.append(i * 10)\n            else:\n                carols.append(i * 100)\n        elif i < 1000:\n            carols.append(i * 100)\n        else:\n            carols.append(i)\n    return carols[n - 1]\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    result = 2\n    for i in range(2, n):\n        result += 2 * i\n    return result\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    \"\"\"\n    Solution:\n    \"\"\"\n    # check if n is odd or even\n    # if odd, n/2 steps\n    # if even, (n-2)/2 steps\n    # add 1\n    return 0\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    \"\"\"\n    :param n: number of carols\n    :return: the n-th carol number\n    \"\"\"\n    if n < 1:\n        raise ValueError('n must be greater than 0')\n    return 1 if n == 1 else get_carol(n-1) + get_carol(n-2)\n\n", "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    if n == 1:\n        return 1\n    else:\n        return get_carol(n-1) + get_carol(n-2)\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    return [i for i in lst if i != []]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(l):\n    new_list = []\n    for i in l:\n        if i != []:\n            new_list.append(i)\n    return new_list", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\n#list\ndef remove_empty(l):\n    if isinstance(l, list):\n        return [item for item in l if item]\n    elif isinstance(l, str):\n        return l\n    else:\n        return l\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lis):\n    new_list = []\n    for i in lis:\n        if i:\n            new_list.append(i)\n    return new_list\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    return [x for x in lst if x != []]", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(l):\n  return [item for item in l if item != []]\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(list_of_lists):\n    final_list = []\n    for i in list_of_lists:\n        if len(i) != 0:\n            final_list.append(i)\n    return final_list\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(list_of_lists):\n    new_list = []\n    for each in list_of_lists:\n        if each != []:\n            new_list.append(each)\n    return new_list\n\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(list_of_lists):\n    \"\"\"\n    remove empty lists from the list\n    \"\"\"\n    list_of_lists = [x for x in list_of_lists if x != []]\n    return list_of_lists\n", "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(list_of_lists):\n    result = []\n    for lst in list_of_lists:\n        if lst:\n            result.append(lst)\n    return result\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    m=0\n    n=0\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            n = n + 1\n        else:\n            if n > m:\n                m=n\n                s=lst[i]\n            n = 1\n    return s", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(list1):\n    count = {}\n    for i in list1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    \n    max_value = 0\n    max_value_key = None\n    for key in count.keys():\n        if count[key] > max_value:\n            max_value = count[key]\n            max_value_key = key\n    return max_value_key\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(arr):\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_element = -1\n    max_occurrences = -1\n    for i in d:\n        if d[i] > max_occurrences:\n            max_occurrences = d[i]\n            max_element = i\n    return max_element\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(arr):\n    max_count = 0\n    max_index = -1\n    for index in range(len(arr)):\n        if arr[index] in arr[max_index:]:\n            if arr[index] == arr[max_index]:\n                max_count += 1\n            else:\n                max_count = 1\n            if max_count > max_count:\n                max_index = index\n\n    return arr[max_index]\n\ndef main():\n    arr = [1,2,3,1,2,3,12,4,2]\n    print(max_occurrences(arr))\n\nmain()", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(arr):\n    #initialize a hash map \n    hashmap = {}\n    \n    for i in arr:\n        if i not in hashmap:\n            hashmap[i] = 1\n        else:\n            hashmap[i] += 1\n    #print(hashmap)\n    max_key = 0\n    max_val = 0\n    for key, val in hashmap.items():\n        if val > max_val:\n            max_key = key\n            max_val = val\n    return max_key\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(l):\n    d = {}\n    for item in l:\n        if item in d.keys():\n            d[item] += 1\n        else:\n            d[item] = 1\n    return max(d.values())\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(list_input):\n    \"\"\"\n    :param list_input: Given list.\n    :return: Maximum occurrences element in the list.\n    \"\"\"\n    from collections import Counter\n    c = Counter(list_input)\n    return c.most_common(1)[0][0]\n\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(list):\n    occ = {}\n    for item in list:\n        if item in occ:\n            occ[item] += 1\n        else:\n            occ[item] = 1\n    return max(occ.items(), key=operator.itemgetter(1))[0]\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(li):\n    d = {}\n    for item in li:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return max(d, key=d.get)\n", "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(arr):\n    '''Takes in a list and finds the maximum number of occurrences of an element\n    Args:\n        arr: a list of integers\n    Returns:\n        max_count: an integer, the maximum number of occurrences of an element\n    '''\n    max_count = 0\n    max_index = None\n    for i in range(len(arr)):\n        if arr[i] not in arr[max_index:]:\n            count = 0\n            for j in range(len(arr)):\n                if arr[i] == arr[j]:\n                    count += 1\n            if count > max_count:\n                max_count = count\n                max_index = i\n    return arr[max_index]\n\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\n# O(n^2)\ndef add_K_element(tuples, K):\n    n = len(tuples)\n    for i in range(n):\n        for j in range(n):\n            tuples[i] = (tuples[i][0] + K, tuples[i][1] + K, tuples[i][2] + K)\n            tuples[j] = (tuples[j][0] + K, tuples[j][1] + K, tuples[j][2] + K)\n    return tuples\n\n# O(n)\ndef add_K_element_2(tuples, K):\n    for i in range(len(tuples)):\n        tuples[i] = (tuples[i][0] + K, tuples[i][1] + K, tuples[i][2] + K)\n    return tuples\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\nfrom functools import reduce\n\ndef add_K_element(tup, k):\n    def add(x, y):\n        return x + y + k\n    return tuple(reduce(add, tup, 0))\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(lst, k):\n    for i in lst:\n        i = tuple([x+k for x in i])\n    return lst\n\n\n# +\n# Test", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuples, k):\n    new_tuple = []\n    for each in tuples:\n        new_tuple.append(tuple(map(lambda x:x+k, each)))\n    return new_tuple\n\n\nadd_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_k_element(tup, k):\n    result = []\n    for i in tup:\n        temp = []\n        for j in i:\n            temp.append(j + k)\n        result.append(temp)\n    return result\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple_list, K):\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            tuple_list[i][j] += K\n    return tuple_list\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuples, k):\n    # your code here\n    new_tuples = []\n    for tup in tuples:\n        temp = list(tup)\n        for i in range(len(tup)):\n            temp[i] += k\n        new_tuples.append(temp)\n    return new_tuples\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\nfrom functools import reduce\n\n\ndef add_K_element(tuple, K):\n    # We can use built-in functions for this, we'll see that soon.\n    return tuple_add_K_element(tuple, K)\n\n\ndef tuple_add_K_element(tuple, K):\n    return tuple(map(lambda x: x+K, tuple))\n\n\ndef test_add_K_element():\n    # Test add_K_element function\n    assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\n\ndef add_K_element_reduction(tuple, K):\n    return reduce(lambda x, y: x+y, tuple, K)\n\n\ndef test_add_K_element_reduction():\n    # Test add_K_element function\n    assert add_K_element_reduction([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple, k):\n    new_tuple = []\n    for item in tuple:\n        new_tuple.append(tuple(k + item))\n    return new_tuple\n", "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tuple_2d, k):\n    for i in range(len(tuple_2d)):\n        for j in range(len(tuple_2d[i])):\n            tuple_2d[i][j] = tuple_2d[i][j] + k\n    return tuple_2d\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\nimport unittest\nfrom typing import List\n\n\ndef min_flip_to_make_string_alternate(s: str) -> int:\n    s_list = [int(x) for x in s]\n    s_list = [0 if s_list[i] == 0 else 1 for i in range(len(s_list))]\n    count = 0\n    for i in range(len(s_list)):\n        if s_list[i] == 1:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(binary):\n    binary_string = \"\"\n    for char in binary:\n        if char == \"0\":\n            binary_string += \"1\"\n        else:\n            binary_string += \"0\"\n\n    count = 0\n    i = 0\n    j = len(binary_string) - 1\n    while i < j:\n        if binary_string[i] == \"1\":\n            count += 1\n        i += 1\n        if binary_string[j] == \"1\":\n            count += 1\n        j -= 1\n\n    return count\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom collections import Counter\n\n\ndef min_flip_to_make_string_alternate(string):\n    \"\"\"\n    Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n    \"\"\"\n    return min(Counter(string).values())\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(binary_string):\n    # Fill this in.\n    for i in range(len(binary_string)):\n        if (binary_string[i] == '0' and binary_string[i + 1] == '1') or (binary_string[i] == '1' and binary_string[i + 1] == '0'):\n            return 2 + i\n    return 1\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom typing import List\n\n\ndef min_flip_to_make_string_alternate(binary: str) -> int:\n    binary = binary.strip()\n    if len(binary) % 2 == 0:\n        return len(binary) // 2\n    else:\n        return len(binary) // 2 + 1\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    if len(s) <= 2:\n        return 0\n    total_flip = 0\n    for i in range(1, len(s)-1):\n        if s[i] != s[i-1] and s[i] != s[i+1]:\n            total_flip += 1\n    return total_flip\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s):\n    if len(s)%2 == 0:\n        return -1\n    # length of input string\n    n = len(s)\n    # to store all the count of characters\n    character_count = [0]*10\n    # loop through all the characters\n    for i in range(n):\n        # if even number add to count else add -1\n        if i%2 == 0:\n            character_count[int(s[i])] += 1\n        else:\n            character_count[int(s[i])] -= 1\n\n    # if count of each character is 0 return -1\n    if all([count == 0 for count in character_count]):\n        return -1\n    # store max element in character_count\n    max_element = max(character_count)\n    # store min element in character_count\n    min_element = min(character_count)\n    # if max_element == 1 then return -1\n    if max_element == 1:\n        return -1\n\n    # return (max_element - min_element)//2\n    return (max_element - min_element)//2\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom collections import Counter\n\ndef min_flip_to_make_string_alternate(s):\n    \"\"\"\n    :param s: a binary string of length n\n    :return: minimum number of flips needed to make the given string a sequence of alternate characters\n    \"\"\"\n    c = Counter(s)\n    assert len(c) <= 2\n    # if there are two chars, the first and last must be equal\n    if len(c) == 2:\n        assert c.most_common()[0][1] == c.most_common()[-1][1]\n\n    return c.most_common()[0][1]\n\n", "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(binary_string):\n    flip_count = 0\n    for idx in range(len(binary_string)):\n        if binary_string[idx] == \"1\":\n            flip_count += 1\n    return flip_count\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    counter = 0\n    for i in str(n):\n        counter += 1\n    return counter\n\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\nimport math\ndef count_Digit(n):\n    return int(math.log10(n)+1)\n\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(number):\n    count = 0\n    while(number>0):\n        number = number//10\n        count+=1\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n\tresult = 0\n\ttemp = num\n\twhile temp > 0:\n\t\ttemp = temp // 10\n\t\tresult += 1\n\treturn result\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(n):\n    for i in range(0,n):\n        if n % 10 == 0:\n            break\n        else:\n            n = n // 10\n    return i\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    count = 0\n    while (num != 0):\n        count += 1\n        num = num//10\n    return count\n\n# Driver code\nnum = int(input(\"Enter number: \"))\ncount = count_Digit(num)", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    return len(str(num))\n\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\nimport pytest\n\ndef count_Digit(num):\n    if num < 0:\n        return 0\n    num_str = str(num)\n    if num == 0:\n        return 1\n    else:\n        return len(num_str)\n\n\ndef test_count_Digit():\n    assert count_Digit(12345) == 5\n    assert count_Digit(-12345) == 0\n    assert count_Digit(0) == 1\n\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(number):\n    count=0\n    while number!=0:\n        number=number//10\n        count=count+1\n    return count\n", "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    count = 0\n    if num == 0:\n        return 1\n    while num != 0:\n        count += 1\n        num = int(num / 10)\n    return count\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(l):\n    max_prod = -1\n    for i in range(len(l) - 1):\n        curr_prod = 1\n        for j in range(i+1, len(l)):\n            curr_prod *= l[j]\n        max_prod = max(max_prod, curr_prod)\n    return max_prod\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(numbers):\n    if len(numbers) < 2:\n        raise Exception(\"Cannot find adjacent product in numbers that have less than two elements\")\n    max_num = max(numbers)\n    max_product = 0\n    for index, num in enumerate(numbers):\n        if index == 0:\n            continue\n        if num * numbers[index - 1] > max_product:\n            max_product = num * numbers[index - 1]\n    return max_product\n\ndef test_adjacent_num_product():\n    assert adjacent_num_product([1,2,3,4,5,6]) == 30", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(arr):\n    if len(arr) < 2:\n        return 0\n    maximum_product = 0\n    for i in range(len(arr) - 1):\n        product = arr[i] * arr[i + 1]\n        if product > maximum_product:\n            maximum_product = product\n    return maximum_product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    output = 1\n    for i in range(1, len(arr)):\n        output = max(output * arr[i], arr[i - 1] * arr[i])\n    return output\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(numbers):\n    max_product = -float(\"inf\")\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\nfrom collections import defaultdict\ndef adjacent_num_product(num_list):\n    if not num_list:\n        return -1\n\n    if len(num_list) == 1:\n        return num_list[0]\n\n    # Dictionary: key -> product value -> value\n    d = defaultdict(int)\n    d[1] = num_list[0]\n\n    # Iterates from second position to last position\n    for i in range(1, len(num_list)-1):\n        # If key is greater than number at i-1 position, then key will be replaced\n        if d[i-1] >= num_list[i]:\n            d[i] = num_list[i]\n        else:\n            # Else key = product value\n            d[i] = d[i-1] * num_list[i]\n\n    # Finding the largest value\n    max_value = max(d.values())\n\n    return max_value\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    largest = nums[0]*nums[1]\n    for i in range(len(nums) - 2):\n        if nums[i+2] > nums[i+1]:\n            curr = nums[i+1] * nums[i+2]\n            if curr > largest:\n                largest = curr\n    return largest\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    max_product = float(\"-inf\")\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] == 0:\n                break\n            product = nums[i]*nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n", "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\nimport sys\n\ndef adjacent_num_product(numbers):\n    if len(numbers) <= 2:\n        return numbers[0]\n    else:\n        prod_list = [numbers[i] * numbers[i+1] for i in range(0, len(numbers) - 1)]\n        max_prod = max(prod_list)\n        return max_prod\n\n\ndef test_adjacent_num_product():\n    assert adjacent_num_product([1,2,3,4,5,6]) == 30\n\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if not root:\n        return True\n    depth_left = get_depth(root.left)\n    depth_right = get_depth(root.right)\n    if abs(depth_left - depth_right) > 1:\n        return False\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n\ndef get_depth(node):\n    if node is None:\n        return 0\n    return 1 + max(get_depth(node.left), get_depth(node.right))\n\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(2)\nroot.right.left = TreeNode(3)", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    def get_height(root):\n        if not root:\n            return 0\n        left_height = get_height(root.left)\n        right_height = get_height(root.right)\n        if abs(left_height - right_height) > 1:\n            return -1\n        else:\n            return max(left_height, right_height) + 1\n    if root:\n        return get_height(root) > 0\n    else:\n        return True\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    if abs(depth(root.left) - depth(root.right)) > 1:\n        return False\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef depth(root):\n    if root is None:\n        return 0\n    return 1 + max(depth(root.left), depth(root.right))", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    else:\n        left_height = height(root.left)\n        right_height = height(root.right)\n        if abs(left_height-right_height) <= 1:\n            return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n        else:\n            return False\n\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = height(root.left)\n        right_height = height(root.right)\n        return 1 + max(left_height, right_height)\n\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(2)\nroot.left.left = TreeNode(3)\nroot.left.right = TreeNode(3)\nroot.right.left = TreeNode(4)\nroot.right.right = TreeNode(4)", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    if not root:\n        return True\n    return abs(height(root.left) - height(root.right)) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef height(root):\n    if not root:\n        return 0\n    return max(height(root.left), height(root.right)) + 1", "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\nfrom typing import Union, Tuple, Iterable, Any\nimport random\nfrom functools import reduce\n\n\ndef repeat_tuples(tuple_list: Union[Iterable[Tuple[Any, Any]], Tuple[Any, Any]], n: int = 2) -> Tuple[Any, Any]:\n    if isinstance(tuple_list, tuple):\n        tuple_list = [(tuple_list)]\n    return tuple(reduce(lambda x, y: x + y, tuple_list, ()) for _ in range(n))\n\n\ndef test_repeat_tuples() -> None:\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tup * n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, num):\n    rep = []\n    for i in range(num):\n        rep.append(tup)\n    return rep\n\n\ndef test_repeat_tuples():\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\nimport pytest\n\ndef repeat_tuples(tup, n):\n    \"\"\"\n    >>> repeat_tuples((1, 3), 4)\n    ((1, 3), (1, 3), (1, 3), (1, 3))\n    \"\"\"\n    return tuple([tup] * n)\n\ndef test_repeat_tuples():\n    assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\nfrom typing import Tuple\n\ndef repeat_tuples(tuple_value: Tuple[int], repeat_count: int) -> Tuple[Tuple[int], Tuple[int], Tuple[int], Tuple[int]]:\n    result = tuple_value\n    for i in range(1, repeat_count):\n        result += tuple_value\n    return result\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    return tup * n\n\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    # define an empty list to return\n    result = []\n    # loop through the given n number of times\n    for i in range(n):\n        # append the given tuple to the list\n        result.append(tup)\n    # return the list\n    return result\n# run doctests\nimport doctest\ndoctest.run_docstring_examples(repeat_tuples, globals())\n\n\n# -\n\n# ## 22. Functions to Reorder List Elements\n#\n# Write a function that takes a list and a number k and returns a new list consisting of the first k elements from the old list followed by the last k elements of the old list.\n#\n# ```python\n# >>> my_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n# >>> new_list = reorder_list(my_list, 5)\n# >>> new_list\n# [1, 3, 5, 7, 9]\n# [11, 13, 15, 17, 19]\n# ```\n#\n# ### Bonus\n#\n# Write a function that reorders a list of tuples so the tuples with the same value are next to each other.\n#\n# ```python\n# >>> my_list = [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n# >>> new_list = reorder_tuples(my_list)\n# >>> new_list\n# [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)]\n# [(3, 1), (3, 2), (3, 3)]\n# ```\n\n# +\ndef reorder_list(list", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(*args, n):\n    result = args\n    for _ in range(n - 1):\n        result = tuple([t for t in result])\n    return result\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\nimport itertools as it\ndef repeat_tuples(tuple_, n):\n    return it.repeat(tuple_, n)\n\n#assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n", "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tupl, n):\n    #your code here\n    res = []\n    for i in range(n):\n        res.append(tupl)\n    return res"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return a*b+b*c+c*a\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\nfrom typing import Tuple\n\n\ndef lateralsurface_cuboid(length: int, width: int, height: int) -> int:\n    \"\"\"Return the total surface area of the cuboid.\n\n    Args:\n        length (int): length of cuboid\n        width (int): width of cuboid\n        height (int): height of cuboid\n\n    Returns:\n        int: total surface area of the cuboid\n\n    \"\"\"\n\n    surface_area = length * width + length * height + width * height\n\n    return surface_area\n\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length,breadth,height):\n    #calculate the sides of the cuboid\n    lateralsurface = 2*length + 2*breadth + 2*height\n    return lateralsurface\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length, width, height):\n    return 2*length*width + 2*width*height + 2*height*length\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(width, height, depth):\n    return 2*width*height + 2*width*depth + 2*height*depth\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(width, height, length):\n    return 2 * width * height + 2 * width * length + 2 * height * length\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(length, breadth, height):\n    \"\"\"\n    inputs: length, breadth, height (in feet)\n    output: lateral surface area (in sq. feet)\n    \"\"\"\n    return 2 * length * breadth + 2 * length * height + 2 * breadth * height\n\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(width, length, height):\n    return 2*width*length + 2*width*height + 2*length*height\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a,b,c):\n    result = a*b*c\n    return result\n", "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(a,b,c):\n    if a==0:\n        return 0\n    return a*b+a*c+b*c\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    float_list = []\n    int_list = []\n    for item in tup:\n        if item[1].isdigit():\n            int_list.append(item)\n        else:\n            float_list.append(item)\n    float_list.sort()\n    int_list.sort()\n    return int_list + float_list\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(in_list):\n    # your code goes here\n    new_list = sorted(in_list, key=lambda x: float(x[1]))\n    return new_list\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tuple_list):\n\ttuple_list.sort(key=lambda x: x[1])\n\treturn tuple_list\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tupl):\n    return sorted(tupl, key=lambda x: float(x[1]))\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    \"\"\"\n    Write a function to sort a tuple by its float element.\n    \n    :param tup: tuple to sort\n    :type tup: list\n    :return: sorted tup\n    :rtype: list\n    \"\"\"\n    return sorted(tup, key=lambda x: float(x[1]))", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(lst):\n    return sorted(lst, key=lambda x: float(x[1]))", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(input):\n    output = []\n    for i in input:\n        if(i[1].isnumeric()):\n            output.append(i)\n    output.sort(key=lambda x: float(x[1]))\n    return output\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(items):\n    items = list(items)\n    items.sort(key=lambda item: float(item[1]))\n    return items\n\ndef test():\n    assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n    print('ok!')\n    \ntest()", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(list):\n    return sorted(list, key=lambda x: float(x[1]), reverse=True)\n\n", "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tuple_list):\n    tuple_list.sort(key=lambda x: float(x[1]), reverse=True)\n    return tuple_list\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\nimport pytest\n\n\ndef smallest_missing(array, begin, end):\n    \"\"\"\n    :param array:\n    :param begin:\n    :param end:\n    :return:\n    \"\"\"\n    for i in range(begin, end + 1):\n        if i not in array:\n            return i\n    return end + 1\n\n\ndef test_small_case():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\n\ndef test_mid_case():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 1, 6) == 0\n\n\ndef test_large_case():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 7) == 8\n\n\ndef test_big_case():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 1000) == 1001\n\n\ndef test_bad_case():\n    with pytest.raises(ValueError):\n        smallest_missing([0, 1, 2, 3, 4, 5, 6], -1, 6)\n\n    with pytest.raises(ValueError):\n        smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 7)\n\n\ndef test_no_case():\n    with pytest.raises(ValueError):\n        smallest_missing([], 0, 7)\n\n\ndef test_repeat_case():\n    assert smallest_missing([0, 1, 0], 0, 1000) == 2\n\n\ndef test_list_case():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 7) == 8\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    if start == end:\n        return arr[start]\n    middle = (end - start) / 2 + start\n    if arr[middle] == middle:\n        return smallest_missing(arr, start, middle)\n    else:\n        return smallest_missing(arr, middle + 1, end)\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(array, start, end):\n    # initialize the smallest missing element to the first number in the array\n    sm_element = array[0]\n\n    # iterate through the array and compare the element with the next and previous elements\n    for i in range(start, end + 1):\n        if i != array[i-1]:\n            # if the current element is not equal to the previous element in the array,\n            # then the element is the smallest missing element\n            sm_element = i\n\n    # return the smallest missing element\n    return sm_element\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    if start > end:\n        return 0\n    if start == end:\n        return 1 + start\n    return min(start + 1, end)\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(array, left, right):\n    if left >= right:\n        return left\n    elif array[left] == left:\n        return left + 1\n    elif array[right] == right:\n        return right - 1\n    elif array[left] > left and array[left] <= right:\n        return left\n    elif array[right] < left and array[right] >= right:\n        return right\n    elif array[left] > array[right]:\n        return smallest_missing(array, left, array[left] - 1)\n    else:\n        return smallest_missing(array, array[right] + 1, right)\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\nimport random\n\n\ndef smallest_missing(arr, start, end):\n    \"\"\"\n    :param arr: int array\n    :param start: start index\n    :param end: end index\n    :return: int\n    \"\"\"\n    if not arr:\n        return start\n    if start == end:\n        return start\n    else:\n        mid = start + (end - start) // 2\n        if arr[mid] - start < mid - arr[mid]:\n            return smallest_missing(arr, start, mid)\n        else:\n            return smallest_missing(arr, mid + 1, end)\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    n = end - start\n    assert 0 <= n <= 6\n    return arr[0] + sum([arr[i] - i for i in range(1, n + 1)])\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nfrom random import randint\n\n\ndef smallest_missing(nums, low, high):\n    \"\"\"\n    :type nums: List[int]\n    :type low: int\n    :type high: int\n    :rtype: int\n    \"\"\"\n    if low == high:\n        return low + 1\n\n    return min([n for n in range(low, high + 1) if n not in nums] + [high + 1])\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\nimport unittest\nfrom typing import List, Optional, Tuple\n\n\ndef smallest_missing(numbers: List[int], start: int, end: int) -> Optional[int]:\n    if start > end:\n        return None\n    elif end == start:\n        return numbers[start]\n    elif numbers[start] == start:\n        return smallest_missing(numbers, start + 1, end)\n    elif numbers[end] == end:\n        return smallest_missing(numbers, start, end - 1)\n    elif numbers[start] == end:\n        return smallest_missing(numbers, start + 1, end - 1)\n    elif numbers[end] == start:\n        return smallest_missing(numbers, start, end - 1)\n    elif numbers[start] < end:\n        return smallest_missing(numbers, start + 1, end)\n    else:\n        return smallest_missing(numbers, start, end - 1)\n\n", "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(array, start=0, end=None):\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return None\n\n\ndef test_smallest_missing():\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom queue import Queue\n\n\ndef heap_assending(num_list):\n    q = Queue()\n    for x in num_list:\n        q.put(x)\n    for i in range(len(num_list) - 1):\n        q.put(q.get())\n    for i in range(len(num_list)):\n        num_list[i] = q.get()\n    return num_list\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\n\ndef heap_assending(lst):\n    heap = []\n    for n in lst:\n        heappush(heap, n)\n    return [heappop(heap) for i in range(len(lst))]\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\n\ndef heap_assending(arr):\n    \"\"\"\n    >>> heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]) == [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    True\n    >>> heap_assending([8, 4, 3, 2, 1]) == [1, 2, 3, 4, 8]\n    True\n    >>> heap_assending([1, 2, 3, 4, 5, 10]) == [1, 2, 3, 4, 5, 10]\n    True\n    >>> heap_assending([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    True\n    >>> heap_assending([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    True\n    >>> heap_assending([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    True\n    >>> heap_assending([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3,", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(numbers):\n    from heapq import heapify, heappop, heappush\n    \n    heappush(numbers, numbers[0])\n    \n    for i in range(1, len(numbers)):\n        heappush(numbers, numbers[i])\n\n    for i in range(len(numbers)):\n        numbers[i] = heappop(numbers)\n\n    return numbers\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nimport heapq\n\ndef heap_assending(arr):\n    heap = []\n    for i in arr:\n        heapq.heappush(heap, i)\n    return heapq.nsmallest(len(arr), heap)\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nfrom heapq import heappush, heappop\n\n\ndef heap_assending(arr):\n    for i in range(len(arr)):\n        heappush(arr, arr[i])\n    return [heappop(arr) for i in range(len(arr))]\n\n\n# time complexity : O(nlogn)\n# space complexity : O(n)", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappush, heappop\ndef heap_assending(nums):\n    new = []\n    for i in nums:\n        heappush(new, i)\n    return list(new)\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(lst):\n    if len(lst) == 1:\n        return lst\n    else:\n        q = []\n        for i in range(0, len(lst), 2):\n            q.append(lst[i])\n            q.append(lst[i + 1])\n        for i in range(len(lst) - 1):\n            if q[0] > q[1]:\n                q[0], q[1] = q[1], q[0]\n                heapq.heapify(q)\n            else:\n                heapq.heappop(q)\n        return q\n\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappop, heappush\ndef heap_assending(lst):\n    h = []\n    for item in lst:\n        heappush(h, item)\n    return [heappop(h) for _ in range(len(lst))]\n", "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nfrom heapq import heappop, heappush\n\n\ndef heap_assending(elements: list):\n    heap = []\n    for element in elements:\n        heappush(heap, element)\n    result = []\n    while heap:\n        result.append(heappop(heap))\n    return result\n\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length, width, height):\n  return length*width*height\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a, b, c):\n    return a*b*c\n\n# Now write a function that prints out the volume and area of the cuboid.\ndef print_volume_cuboid(a, b, c):\n    print \"Volume:\", volume_cuboid(a, b, c)\n    print \"Area:\", (a*b) + (b*c) + (a*c)\n\n# Finally, write a function that prints out the volume and area of the cuboid\n# and the volume and area of the cylinder.\ndef print_volume_cuboid_and_cylinder(a, b, c, r):\n    print \"Volume:\", volume_cuboid(a, b, c), \"area:\", (a*b) + (b*c) + (a*c)\n    print \"Volume:\", volume_cylinder(r, a), \"area:\", 2*pi*(r**2)*a\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a,b,c):\n    return a*b*c\n\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(w,l,h):\n    return w*l*h\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(l1, w1, h1, l2, w2, h2):\n    \"\"\"\n    Function that finds the volume of a cuboid.\n    Args:\n        l1 (int): Length of side 1.\n        w1 (int): Width of side 1.\n        h1 (int): Height of side 1.\n        l2 (int): Length of side 2.\n        w2 (int): Width of side 2.\n        h2 (int): Height of side 2.\n    Returns:\n        float: Volume of the cuboid.\n    \"\"\"\n    volume = l1 * w1 * h1 + l2 * w2 * h2\n    return volume\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(length, width, height):\n    \"\"\"\n    :param length: int\n    :param width: int\n    :param height: int\n    :return: int\n    \"\"\"\n    return length * width * height\n\n#assert volume_cuboid(1,2,3)==6", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length, width, height):\n    return length * width * height\n\n# assert volume_cuboid(1,2,3)==6", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a,b,c):\n    return a*b*c\n", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(length,width,height):\n    return length*width*height\n\n\n# + id=\"o4g1ZdxTEwIw\" colab_type=\"code\" colab={}", "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(x,y,z):\n    return x*y*z"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(input_str):\n    if len(input_str) == 0:\n        return []\n\n    if len(input_str) == 1:\n        return [input_str]\n\n    results = []\n    for i in range(len(input_str)):\n        temp = permute_string(input_str[:i] + input_str[i+1:])\n        for result in temp:\n            results.append(input_str[i] + result)\n\n    return results", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nfrom itertools import permutations\n\n\ndef permute_string(string):\n    result = []\n    for perm in permutations(list(string)):\n        result.append(''.join(perm))\n\n    return result\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    if not string:\n        return []\n    elif len(string)==1:\n        return [string]\n    else:\n        result = []\n        for i in range(len(string)):\n            for permutation in permute_string(string[0:i]+string[i+1:]):\n                result.append(string[i:i+1]+permutation)\n        return result\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(str_):\n    if len(str_) == 1:\n        return str_\n    else:\n        result = []\n        for i in range(len(str_) - 1):\n            result += permute_string(str_[:i] + str_[i + 1:])\n        result += permute_string(str_[:i] + str_[i + 1:])\n        return result\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nfrom typing import List\n\n\ndef permute_string(string: str) -> List[str]:\n    def permute(s: str, result: List[str], used: List[bool]):\n        if len(s) == 0:\n            result.append(\"\".join(result))\n            return\n        for i in range(len(s)):\n            if used[i] is False:\n                used[i] = True\n                permute(s[i + 1:], result, used)\n                used[i] = False\n\n    result = []\n    used = [False] * len(string)\n    permute(string, result, used)\n    return result", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    if len(s) == 0:\n        return [\"\"]\n    elif len(s) == 1:\n        return [s]\n    else:\n        res = [s[:i] + s[i + 1:] for i in range(len(s))]\n        res.extend(permute_string(s))\n        return res\n\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    if len(string) == 0:\n        return []\n\n    perms = [string]\n    # print(string)\n    for char in string:\n        new_perms = []\n        for perm in perms:\n            # print(perm)\n            new_perms.append(perm + char)\n            new_perms.append(char + perm)\n\n        perms = new_perms\n\n    # print(perms)\n    return perms\n\n\ndef permute_string_iterative(string):\n    perms = [string]\n    if len(string) == 0:\n        return perms\n    for i in range(len(string)):\n        new_perms = []\n        for perm in perms:\n            new_perms.append(perm[:i] + string[i] + perm[i:])\n\n        perms = new_perms\n\n    return perms", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(text):\n    # Your code here\n    return list(set(text + text[::-1]))\n\ndef permute_string_iterator(text):\n    # Your code here\n    return [''.join(word) for word in permutations(text + text[::-1])]\n\ndef permute_string_generator(text):\n    # Your code here\n    return (text + text[::-1])\n\ndef permute_string_list(text):\n    # Your code here\n    return [text + text[::-1]]\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    if len(s) <= 1:\n        return [s]\n    output = []\n    for i in range(len(s)):\n        for p in permute_string(s[:i] + s[i+1:]):\n            output.append(s[i] + p)\n    return output\n", "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nimport pytest\ndef permute_string(s):\n    if s == \"\":\n        return [\"\"]\n    else:\n        r = [x + s[1:] for x in permute_string(s[1:])]\n        r += [s[0] + x for x in permute_string(s[1:])]\n        return r\n\ndef permute_string_test():\n    assert permute_string('ab')==['ab', 'ba']\n    assert permute_string('abc')==['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,round_to):\n    return int(num - num%round_to)\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,multiple):\n    return int(num - num % multiple + multiple)\n\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\nimport math\n\ndef round_num(num,increment):\n    return math.floor(num/increment)*increment\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    remainder = num % multiple\n    if remainder == 0:\n        return num\n    elif remainder >= (multiple / 2):\n        return num - remainder + multiple\n    else:\n        return num + multiple - remainder\n\n# Unit Tests\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,multiple):\n    return multiple*(num//multiple)\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, multiple):\n    return num - (num % multiple)\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, divisor):\n    print(num//divisor*divisor)\n\ndef get_group_list():\n    '''\n    Write a function to return a list of groups containing the people that work together,\n    given a list of names and a group_size\n    '''\n    group_list = []\n    group_name = []\n    for i in range(len(names)):\n        if i % group_size == 0:\n            group_list.append(group_name)\n            group_name = []\n        group_name.append(names[i])\n    return group_list\n\ndef find_group_name(group_list):\n    '''\n    Write a function that returns the name of the group that is the largest\n    '''\n    max_group_size = 0\n    group_name = ''\n    for group in group_list:\n        if len(group) > max_group_size:\n            max_group_size = len(group)\n            group_name = group\n    return group_name\n\ndef add_group_name(group_list, group_name):\n    '''\n    Write a function that returns a group list with the new group name added\n    '''\n    new_group_list = []\n    for group in group_list:\n        if group == group_name:\n            new_group_list.append(group_name)\n            continue\n        new_group_list.append(group)\n    return new_group_list\n\ndef remove_group_name(group_list, group_name):\n    '''\n    Write a function that returns a group list without the group name\n    '''\n    new_group_list = []\n    for group in group_list:\n        if group != group_name:\n            new_group_list.append(group)\n    return new_group_list\n\ndef get_group_list_input():\n    '''\n    Write a function to return a list of groups containing the people that work together,\n    given a list of names and a group_size\n    '''\n    group_size = int(input('Please enter a group size: '))\n    name_list = []\n    for i in range(int(input('Please enter the number of people: '))):\n        name", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\nfrom math import ceil, floor\n\n\ndef round_num(num: float, multiple: float) -> float:\n    \"\"\"\n    Round number to nearest multiple.\n    :param num: Number to be rounded.\n    :param multiple: Multiple for rounding.\n    :return: Rounded number.\n    \"\"\"\n    return ceil(num / multiple) * multiple\n\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(number, num):\n  return number - number % num + num\n", "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num,multiple):\n    return int((num/multiple) * multiple)\n\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    # Write your solution here\n    new_tup = []\n    for item in tup:\n        if item not in new_tup:\n            new_tup.append(item)\n        else:\n            new_tup.append('MSP')\n    return tuple(new_tup)", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    n = {}\n    for x in tup:\n        if x in n:\n            n[x] += 1\n        else:\n            n[x] = 1\n    return list(map(lambda x: x if n[x] == 1 else 'MSP', tup))\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(inlist):\n    set_list = set(inlist)\n    return tuple([s if s not in set_list else \"MSP\" for s in inlist])\n\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    uniques = set(tup)\n    out = []\n    for item in uniques:\n        if tup.count(item) > 1:\n            out.append(item)\n            out.append('MSP')\n        else:\n            out.append(item)\n    return tuple(out)\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(input_list):\n    import collections\n    return list(collections.OrderedDict.fromkeys(input_list))\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(lst):\n    return(lst)\n    # Your Code Here\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(list_tuple):\n    return_list = []\n    dict_value = {}\n    for i in list_tuple:\n        dict_value.setdefault(i, True)\n        if dict_value[i]:\n            return_list.append(i)\n        else:\n            return_list.append(i)\n            dict_value[i] = 'MSP'\n    return tuple(return_list)\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(arr):\n    result = []\n    seen = set()\n    for element in arr:\n        if element not in seen:\n            result.append(element)\n            seen.add(element)\n    return result\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    return tuple(dict.fromkeys(tup))\n\ndef test_remove_replica():\n    assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n", "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tuple):\n    return tuple\n\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    for i in range(len(string)):\n        if string[i] == char:\n            string = string[:i] + string[i + 1:]\n    return string", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str,char):\n    return str.replace(char,'')", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, character):\n    string = string.replace(character, '')\n    return string\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string,char):\n    return string.replace(char,'')\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_char(my_string, char):\n    my_string = my_string.replace(char, \"\")\n    return my_string\n\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_char(string, char):\n    list_of_char = []\n    for i in range(len(string)):\n        if string[i] != char:\n            list_of_char.append(string[i])\n    return ''.join(list_of_char)\n\ndef remove_Char(string, char):\n    return string.replace(char, \"\")\n\n# Test cases", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_char(string,char):\n    new_str = \"\"\n    for i in string:\n        if i != char:\n            new_str += i\n    return new_str\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(text,char):\n  return text.replace(char,\"\")", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(s,c):\n    return s.replace(c,'')\n", "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(str, ch):\n    \"\"\"\n    >>> remove_Char(\"aba\", 'a')\n    'b'\n    >>> remove_Char(\"aba\", 'b')\n    'a'\n    >>> remove_Char(\"aaaa\", 'a')\n    'a'\n    >>> remove_Char(\"abcb\", 'a')\n    'bcb'\n    >>> remove_Char(\"abcdefghijklmnop\", 'a')\n    'bcdefghijklmnop'\n    >>> remove_Char(\"abcdefghijklmnop\", 'j')\n    'abcdefghijklmnop'\n    \"\"\"\n    return str[0:str.find(ch)] + str[str.find(ch)+1:]\n\n# from collections import defaultdict\n# # # print(defaultdict(list))\n# d = defaultdict(list)\n# d['a'] = 2\n# d['b'] = 3\n# print(d)\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(list):\n    list.insert(0, list.pop())\n    return list\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(numbers):\n    numbers.insert(0,numbers.pop())\n    return numbers\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(list_):\n  list_.insert(0, list_.pop())\n  return list_\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(list):\n    temp = list.pop()\n    list.insert(0,temp)\n    return list\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(a):\n    return [a[-1]] + a[:-1]\n\n# Test cases", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\n# my function\ndef move_first(lst):\n    if lst == []:\n        return lst\n    last = lst.pop()\n    return [last] + lst\n\n# expected output\ndef move_first(lst):\n    if lst == []:\n        return lst\n    first = lst[0]\n    lst.pop(0)\n    return [first] + lst\n\n# test", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(list):\n    last_element = list.pop()\n    list.insert(0, last_element)\n    return list\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\n# Write your solution here\ndef move_first(lst):\n    lst = lst[::-1]\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n", "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n# Not using any built-in function.\ndef move_first(a):\n    temp = a[0]\n    a[0] = a[-1]\n    a[-1] = temp\n\ndef move_first2(a):\n    a[0],a[-1] = a[-1], a[0]\n\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\n    return 2*l*w + 2*w*h + 2*h*l\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a, b, c):\n    return 2 * a * b + 2 * a * c + 2 * b * c\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\n# Code\n\ndef surfacearea_cuboid(a,b,c):\n    #define surface area of the cuboid\n    area_of_cuboid = (2*a+2*b+2*c)\n    return area_of_cuboid\n\n# Test\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(w, h, l):\n    return 2 * w * h + 2 * w * l + 2 * h * l\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\nfrom unittest import TestCase\n\n\ndef surfacearea_cuboid(length, width, height):\n    \"\"\"\n    :param length: length of the cuboid\n    :param width: width of the cuboid\n    :param height: height of the cuboid\n    :return: surface area\n    \"\"\"\n    return (2 * (width * height) + 2 * (height * length) + 2 * (length * width))\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a, b, c):\n    return 2 * (a + b + c) + 2 * a * b + 2 * a * c + 2 * b * c\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a,b,c):\n    return 2*a*b + 2*a*c + 2*b*c\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(a, b, c):\n    \"\"\"\n    Return the surface area of a cuboid whose dimensions are a, b, and c.\n    >>> assert surfacearea_cuboid(1,2,3)==22\n    \"\"\"\n    return 2*a*b + 2*a*c + 2*b*c\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(width, length, height):\n    return (2*width+2*length+2*height)\n\n", "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length, width, height):\n    return 2*length*width+2*length*height+2*width*height\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(row, col):\n    return [[0]*col]*row\n\n# 2.", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(row, column):\n    lst = []\n    for i in range(row):\n        lst.append([0] * column)\n    return lst\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\nimport unittest\ndef multi_list(width, height):\n    return [list(range(width*height)) for x in range(height)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(cols, rows):\n    return [[i for i in range(0, cols)] for i in range(0, rows)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(row,column):\n    if row<=0 or column<=0:\n        return []\n    return [multi_list(row-1,column)+[i] for i in range(column)] if column>row else [multi_list(row,column-1)+[i] for i in range(row)]\n    ", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(x,y):\n    r = []\n    for i in range(x):\n        r.append([i*y])\n    return r\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(x,y):\n    multi_list=[]\n    for i in range(x):\n        tmp=[]\n        for j in range(y):\n            tmp.append(j*i)\n        multi_list.append(tmp)\n    return multi_list\n\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(rows, cols):\n    l = []\n    for i in range(rows):\n        l.append([])\n        for j in range(cols):\n            l[i].append(j)\n    return l\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\nimport unittest\n\ndef multi_list(num_rows, num_cols):\n    return [[0 for i in range(num_cols)] for i in range(num_rows)]\n", "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(x,y):\n    new_list=[]\n    for i in range(y):\n        new_list.append([0]*x)\n    return new_list\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lis,index):\n    \"\"\"\n    :param lis: list of lists\n    :param index: index of inner list\n    :return: sorted list\n    \"\"\"\n    return sorted(lis, key = lambda x: x[index])\n\n#print index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],0)\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_lists,index_of_inner_list):\n    inner_list = []\n    outer_list = []\n\n    for item in list_of_lists:\n        inner_list.append(item[index_of_inner_list])\n    for item in list_of_lists:\n        outer_list.append(item)\n\n    for i in range(len(inner_list)):\n        for j in range(i+1, len(inner_list)):\n            if inner_list[i] > inner_list[j]:\n                temp = outer_list[i]\n                outer_list[i] = outer_list[j]\n                outer_list[j] = temp\n    return outer_list", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n    list_of_lists.sort(key=lambda x: x[index])\n    return list_of_lists", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(list_of_lists,index):\n    list_of_lists.sort(key = lambda inner_list:inner_list[index])\n    return list_of_lists\n\nlist_of_lists = [ ('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(li,index):\n    li.sort(key=lambda x:x[index])\n    return li\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(data,index):\n    new_list=[]\n    for item in data:\n        new_list.append(item[index])\n    new_list.sort()\n    print(new_list)\n    return new_list\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lists,index):\n    new_lists=sorted(lists,key=lambda x: x[index])\n    return new_lists", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(list_of_lists, index):\n    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n    \n    Parameters\n    ----------\n    list_of_lists : list of list\n        A list of lists.\n    index : int\n        The index of the inner list.\n    \n    Returns\n    -------\n    list\n        A list of lists sorted by the given index.\n    \n    Examples\n    --------\n    >>> assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    \"\"\"\n    list_of_lists.sort(key=itemgetter(index))\n    return list_of_lists\n", "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(alist, index):\n  return sorted(alist, key=itemgetter(index))\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(nums):\n    \"\"\"\n    :param nums: a sorted array with distinct elements\n    :return: integer number of rotations\n    \"\"\"\n    from collections import defaultdict\n    return len(defaultdict(int)(nums))\n\n# def find_rotation_count(nums):\n#     \"\"\"\n#     :param nums: a sorted array with distinct elements\n#     :return: integer number of rotations\n#     \"\"\"\n#     for i in range(1, len(nums)):\n#         if nums[i] < nums[i-1]:\n#             return i\n\ndef test_find_rotation_count():\n    nums = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert find_rotation_count(nums) == 3", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    pivot_index = 0\n    end_index = len(arr) - 1\n    rotation_count = 0\n\n    while pivot_index <= end_index:\n        if arr[pivot_index] <= arr[end_index]:\n            if arr[pivot_index] > arr[pivot_index + 1]:\n                return 0\n\n            else:\n                pivot_index += 1\n\n        else:\n            if arr[pivot_index] < arr[pivot_index - 1]:\n                return 0\n\n            else:\n                pivot_index -= 1\n\n            rotation_count += 1\n\n    return rotation_count\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(array):\n    n = len(array)\n    if n == 0:\n        return -1\n\n    left = 0\n    right = n - 1\n    while right >= left + 1:\n        mid = (right + left) // 2\n        if array[mid] == array[right]:\n            return (right - mid + 1) % n\n        if array[left] <= array[mid]:\n            if array[left] <= array[mid] and array[mid] <= array[right]:\n                left = mid\n            else:\n                right = mid\n        else:\n            if array[mid] <= array[left] and array[left] <= array[right]:\n                right = mid\n            else:\n                left = mid\n    return -1\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    return arr.count(min(arr))\n\n\ndef main():\n    print(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]))\n    print(find_rotation_count([1, 2, 3]))\n    print(find_rotation_count([5, 1, 2, 3, 4]))\n    print(find_rotation_count([5, 1, 2, 3, 4, 4]))\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(array):\n    prev_val = array[0]\n    rotated = 0\n    for i, val in enumerate(array):\n        if val == prev_val:\n            continue\n        if val > prev_val:\n            rotated += 1\n        prev_val = val\n    return rotated\n\n\ndef test_find_rotation_count():\n    assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nfrom typing import List\n\n\ndef find_rotation_count(nums: List[int]) -> int:\n    \"\"\"Find the number of rotations in a circularly sorted array.\"\"\"\n    # the order of the numbers has not changed\n    # so the index of the leftmost number is 0\n    left_index = 0\n    # the index of the rightmost number is len(nums)-1\n    right_index = len(nums) - 1\n\n    while nums[left_index] < nums[right_index]:\n        # while the left index is less than the right index\n        # keep swapping the values at the left index and the right index\n        # the order of the numbers has not changed\n        # so the index of the leftmost number is 0\n        left_index, right_index = right_index, left_index\n        while nums[left_index] <= nums[right_index]:\n            # while the value at the left index is less than or equal to the value\n            # at the right index, increment the left index\n            # the order of the numbers has not changed\n            # so the index of the leftmost number is 0\n            left_index += 1\n        # decrement the right index by 1\n        # the order of the numbers has not changed\n        # so the index of the rightmost number is len(nums)-1\n        right_index -= 1\n    # when the left index is equal to the right index,\n    # the array has been rotated by 1\n    # return 1\n    return 1\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\nimport pytest\n\n\ndef find_rotation_count(array):\n    \"\"\"\n    This solution is O(n) because it iterates over the array once.\n    \"\"\"\n    # TODO: implement\n    count = 0\n    length = len(array)\n    for i in range(length):\n        if array[i] > array[i + 1]:\n            count += 1\n\n    return count\n\n\ndef find_rotation_count_2(array):\n    \"\"\"\n    This solution is O(n) because it iterates over the array once.\n    \"\"\"\n    # TODO: implement\n    i = 1\n    count = 0\n    length = len(array)\n    while i < length:\n        if array[i - 1] > array[i]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n\n    return count\n\n\ndef find_rotation_count_3(array):\n    \"\"\"\n    This solution is O(n) because it iterates over the array once.\n    \"\"\"\n    # TODO: implement\n    count = 0\n    length = len(array)\n    i = 0\n    j = length - 1\n    while i < j:\n        if array[i] > array[j]:\n            count += 1\n            j -= 1\n        else:\n            i += 1\n\n    return count\n\n\ndef find_rotation_count_4(array):\n    \"\"\"\n    This solution is O(n) because it iterates over the array once.\n    \"\"\"\n    # TODO: implement\n    count = 0\n    length = len(array)\n    i = 0\n    j = length - 1\n    while i < j:\n        if array[i] > array[j]:\n            count += 1\n            j -= 1\n        elif array[i] == array[j]:\n            j -= 1\n        else:\n            i += 1\n\n    return count\n\n\ndef find_rotation_count_5(array):\n    \"\"\"\n    This solution is O(n) because it iterates over the array once.\n    \"\"\"\n    # TODO: implement\n    count = 0\n    length = len(array)\n    i", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\nimport numpy as np\n\n\ndef find_rotation_count(arr):\n    # 1. First we can see that our array is sorted, so we will use this fact to find\n    #    the center element of the array\n    mid = len(arr) // 2\n    # 2. We use the fact that array[mid] is the center element\n    # 3. Now we will find the number of inversions in the left half of the array\n    inv_count = 0\n    for i in range(mid):\n        # 4. Find the first element in the right half of the array,\n        #    that is larger than the current element in the left half\n        inv_count += find_smaller_index(arr, i + 1, mid)\n    # 5. Finally, we can find the number of inversions in the right half of the array\n    for i in range(mid + 1, len(arr)):\n        # 6. Find the first element in the left half of the array\n        #    that is larger than the current element in the right half\n        inv_count += find_smaller_index(arr, 0, i)\n    # 7. Return the number of inversions found\n    return inv_count\n\n\ndef find_smaller_index(arr, left, right):\n    # 1. Start by comparing the left and right elements\n    if arr[left] > arr[right]:\n        # 2. If left is smaller than right, then increment the count by 1\n        return 1\n    # 3. If left is not smaller than right, then return 0\n    #    which means that the count will be 0\n    return 0\n\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\n# Time: O(logn)\n# Space: O(1)\n", "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    if len(arr) == 0:\n        return 0\n    i = 0\n    while i < len(arr) - 1 and arr[i] < arr[-1]:\n        i += 1\n    if i == 0:\n        return 0\n    elif i == len(arr) - 1:\n        return len(arr) - i\n    else:\n        return len(arr) - i - 1\n\n"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n    bits = bin(number)\n    bits = bits[2:]\n    new_bits = \"\"\n    for i in range(len(bits)):\n        bit = bits[i]\n        if bit == \"0\":\n            new_bits += \"1\"\n        elif bit == \"1\":\n            new_bits += \"0\"\n    new_number = int(new_bits,2)\n    return new_number\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    binary = bin(num)[2:]\n    result = \"\"\n    for c in binary:\n        if int(c) % 2 == 1:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return int(result, 2)\n\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return n ^ (n >> 1)\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(number):\n  #your code here\n\ndef toggle_all_odd_bits(number):\n  #your code here\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(number):\n    pass\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(number):\n    # Complete this function\n    if number%2 == 0:\n        return number + 1\n    else:\n        return number - 1\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(num):\n  toggle = 1\n  result = 0\n  # use a for loop to iterate over all bits and toggle them\n  for i in range(32):\n    # odd bits are 1, toggle them\n    if num & toggle == 1:\n      result = result | toggle\n    # even bits are 0, do nothing\n    else:\n      result = result | toggle\n    # toggle next bit\n    toggle = toggle << 1\n  return result\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    '''\n    Toggle all odd bits of a given number\n    '''\n    return num ^ -num\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    for i in range(1,33):\n        if num % i == 0:\n            num //= i\n    return num\n\n# assert even_bit_toggle_number(10) == 15\n", "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    x = num\n    for i in range(0, len(bin(x)), 2):\n        x = int(bin(x), 2)\n        x = int(bin(x)[::-1], 2)\n        x = int(bin(x), 2)\n    return x\n\ndef test_even_bit_toggle_number():\n    assert even_bit_toggle_number(10) == 15\n\ndef main():\n    test_even_bit_toggle_number()\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,arr):\n    small_val = arr[0]\n    freq = 1\n    for i in range(1,n):\n        if(arr[i]<small_val):\n            small_val = arr[i]\n            freq = 1\n        else:\n            freq = freq + 1\n    return freq\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,arr):\n    f = 0\n    for i in range(n):\n        if arr[i] < arr[f]:\n            f = i\n    return arr.count(arr[f])\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(array):\n    smallest_number = array[0]\n    smallest_count = 0\n    for i in range(len(array)):\n        if array[i] < smallest_number:\n            smallest_number = array[i]\n            smallest_count = 1\n        elif array[i] == smallest_number:\n            smallest_count += 1\n    return smallest_count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n, arr):\n    if len(arr) == 0:\n        return -1\n    min = arr[0]\n    freq = 1\n    for i in range(1, len(arr)):\n        if(arr[i] < min):\n            min = arr[i]\n            freq = 1\n        elif(arr[i] == min):\n            freq += 1\n        else:\n            return freq\n    return freq\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n,arr):\n    small=0\n    for i in range(0,n):\n        if(arr[i]<arr[small]):\n            small=i\n    return small+1\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n,a):\n    a.sort()\n    return a.count(a[0])\n\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(num_input,arr):\n    val = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < val:\n            val = arr[i]\n    for i in range(len(arr)):\n        if arr[i] == val:\n            num_input = num_input + 1\n    return num_input", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\n# Write your function here\n\ndef frequency_Of_Smallest(num, arr):\n    smal_val = arr[0]\n    cnt = 0\n    for i in arr:\n        if i < smal_val:\n            smal_val = i\n            cnt += 1\n    return cnt\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(length,arr):\n    sm = arr[0]\n    smallest_value_count = 1\n    for i in arr:\n        if sm > i:\n            smallest_value_count += 1\n            sm = i\n    return smallest_value_count\n", "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(a):\n\n    # Create a new empty dictionary\n    smallest_number_freq = {}\n\n    # loop through all the numbers in the array\n    for number in a:\n\n        # if the number is smaller than all the numbers in the array,\n        # update the smallest_number_freq dictionary\n        if number < smallest_number_freq.get(number, 0):\n            smallest_number_freq[number] = smallest_number_freq.get(number, 0) + 1\n        else:\n            smallest_number_freq[number] = 1\n\n    return smallest_number_freq.get(min(smallest_number_freq, key=smallest_number_freq.get))\n\n# Driver Code"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n < 2:\n        return 1\n    else:\n        return (n*get_perrin(n-1) + 1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n# Recursive solution\n\n\ndef get_perrin_rec(n, prev_prev_perrin, prev_perrin):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin_rec(n-1, prev_perrin, get_perrin_rec(n-2, prev_perrin, prev_prev_perrin))\n\n\n# def get_perrin_rec(n, prev_perrin):\n#     if n == 0:\n#         return 0\n#     elif n == 1:\n#         return 1\n#     else:\n#         return get_perrin_rec(n-1, prev_perrin) + get_perrin_rec(n-2, prev_perrin)", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_perrin(n-1)+get_perrin(n-2)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(num):\n    return 1 if num == 1 else (3 * get_perrin(num - 1)) + 1\n\n# print get_perrin(9)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n  if n == 1:\n    return 1\n  return n * get_perrin(n-1)\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    return get_perrin(n-1) + get_perrin(n-2)\n\n\ndef test_get_perrin():\n    assert get_perrin(9) == 12\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\ndef get_perrin_iter(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        p = get_perrin_iter(n - 1)\n        q = get_perrin_iter(n - 2)\n        return p + q\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\n# Your implementation here\ndef get_perrin(n):\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 6\n    if n==4:\n        return 12\n    return get_perrin(n-1)+get_perrin(n-2)+get_perrin(n-3)+get_perrin(n-4)\n\n", "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    count = 0\n    stack = []\n    for ch in s:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    count = 0\n    for idx, char in enumerate(string):\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n        if count < 0:\n            count = 0\n            string = string[idx+1:]\n            break\n    return len(string)", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\nfrom typing import List\n\n\ndef swap_count(s: str) -> int:\n    # Your code here\n    count = 0\n    stack = []\n    for i in range(len(s)):\n        if s[i] == \"[\" and stack:\n            stack.pop()\n        elif s[i] == \"[\":\n            stack.append(i)\n        elif s[i] == \"]\":\n            count += 1\n\n    return count + len(stack)\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\nimport pytest\n\n\ndef swap_count(s):\n    \"\"\"\n    Function to find out the minimum no of swaps required for bracket balancing\n    \"\"\"\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        else:\n            if not stack:\n                return -1\n            top = stack.pop()\n            if top != '[':\n                return -1\n    if stack:\n        return -1\n    return len(stack)\n\n\n@pytest.mark.parametrize(\"test_input, expected\",\n                         [(\"[[][()]]\", 0), (\"[()][()]\", 0), (\"[[]]\", -1),\n                          (\"[\", -1), (\"[[][[]]\", 0), (\"[[]][][\", 2)])\ndef test_swap_count(test_input, expected):\n    assert swap_count(test_input) == expected", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(input_string):\n    # write your code here\n    stack = []\n    for c in input_string:\n        if c == \"[\":\n            stack.append(c)\n        elif c == \"]\":\n            if stack:\n                stack.pop()\n            else:\n                stack.append(c)\n    return len(stack)\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(string):\n    stack = []\n    count = 0\n    for c in string:\n        if c == '[' or c == '(':\n            stack.append(c)\n        else:\n            if len(stack) > 0:\n                if c == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif c == ']' and stack[-1] == '[':\n                    stack.pop()\n            else:\n                count += 1\n    return count\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(string):\n    stack = []\n    for i in range(len(string)):\n        if(string[i] == '['):\n            stack.append(string[i])\n        else:\n            if(stack and stack[-1] == '['):\n                stack.pop()\n            else:\n                stack.append(string[i])\n    return(len(stack))\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    stack = []\n    count = 0\n    for character in string:\n        if character == '[':\n            stack.append(character)\n        else:\n            if not stack:\n                count += 1\n            else:\n                if stack.pop() != '[':\n                    count += 1\n    return count\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    stack = []\n    for ch in s:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return -1\n            stack.pop()\n    return len(stack)\n\n", "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\nfrom stack import Stack\n\ndef swap_count(s):\n    '''\n    s = [][()]\n    s = [()]\n    s = [[()]\n    s = [[[()]\n    s = [[[]]]\n    '''\n    stack = Stack()\n    swaps = 0\n    for char in s:\n        if char == '[':\n            stack.push(char)\n        elif stack.is_empty():\n            swaps += 1\n        else:\n            stack.pop()\n    return swaps\n\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_number):\n    hex_number = hex_number.replace(\"0x\", \"\")\n    if len(hex_number)%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(number):\n  even_number = False\n  if(number.isnumeric()):\n    number = int(number)\n    if(number%2 != 0):\n      even_number = True\n  return \"Odd\" if not even_number else \"Even\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_number):\n    hex_list = list(hex_number)\n    even_odd = hex_list[0]\n    for i in range(1,len(hex_list),2):\n        if hex_list[i] != even_odd:\n            return \"Odd\"\n    return \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hexadecimal):\n  if len(hexadecimal) % 2 == 1:\n    return \"Odd\"\n  else:\n    return \"Even\"\n  ", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(num):\n    return \"Odd\" if int(num, 16)%2 else \"Even\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    if len(hex_num) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hexadecimal_number):\n    if int(hexadecimal_number, 16) % 2 == 0:\n        return \"Even\"\n    return \"Odd\"\n\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_number):\n    '''\n    INPUT: Hexadecimal number in string format.\n    OUTPUT: Whether the number is even or odd.\n    '''\n    hex_number = hex_number.lower()\n    if len(hex_number) == 1:\n        if int(hex_number) % 2 == 0:\n            return \"Even\"\n        elif int(hex_number) % 2 == 1:\n            return \"Odd\"\n\n    if len(hex_number) == 2:\n        if int(hex_number[:1],16) % 2 == 0:\n            return \"Even\"\n        elif int(hex_number[:1],16) % 2 == 1:\n            return \"Odd\"\n    \n    if len(hex_number) == 3:\n        if int(hex_number[:2],16) % 2 == 0:\n            return \"Even\"\n        elif int(hex_number[:2],16) % 2 == 1:\n            return \"Odd\"\n    \n    if len(hex_number) == 4:\n        if int(hex_number[:3],16) % 2 == 0:\n            return \"Even\"\n        elif int(hex_number[:3],16) % 2 == 1:\n            return \"Odd\"\n    \n    if len(hex_number) == 5:\n        if int(hex_number[:4],16) % 2 == 0:\n            return \"Even\"\n        elif int(hex_number[:4],16) % 2 == 1:\n            return \"Odd\"\n    \n    if len(hex_number) == 6:\n        if int(hex_number[:5],16) % 2 == 0:\n            return \"Even\"\n        elif int(hex_number[:5],16) % 2 == 1:\n            return \"Odd\"\n    \n    if len(hex_number) == 7:\n        if int(hex_number[:6],16) % 2 == 0:\n            return \"Even\"\n        elif int(hex_number[:6],16) % 2 == 1:\n            return \"Odd\"\n    \n   ", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(number):\n    if number[0] == \"0\":\n        number = number[1:]\n    number = int(number,16)\n    if number%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex):\n    return \"Odd\" if int(hex,16)%2 else \"Even\"\n\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    while n > 0:\n        if n & 1 == 1:\n            n = n + 1\n        else:\n            n = n >> 1\n\n    return n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    \"\"\"\n    This function is to find the highest power of 2 that is less than or equal to n\n    :param n: n is any integer.\n    :return: highest power of 2 that is less than or equal to n\n    \"\"\"\n    assert isinstance(n, int)\n    return 1 << (n - 1).bit_length()\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    power = 1\n    while True:\n        if power > n:\n            break\n        elif power & (power-1) == 0:\n            power *= 2\n    return power\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    result = 1\n    while(result < n):\n        result *= 2\n    return result\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return 1 << int(math.ceil(math.log(n, 2)))\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    # your code here\n    return n - 1\n\ndef test_highest_Power_of_2():\n    assert highest_Power_of_2(10) == 8\n    assert highest_Power_of_2(16) == 16\n    assert highest_Power_of_2(24) == 24\n    assert highest_Power_of_2(30) == 32\n    assert highest_Power_of_2(42) == 42\n    assert highest_Power_of_2(65) == 64\n    assert highest_Power_of_2(69) == 64\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Write your code here\ndef highest_Power_of_2(n):\n    \"\"\"\n    Time: O(log(n))\n    Space: O(1)\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 + highest_Power_of_2(n >> 1)\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    x = 1\n    while x <= n:\n        if x % 2 == 0 and x > 1:\n            break\n        else:\n            x += 1\n    return x\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    p = 1\n    while p <= n:\n        if n % p == 0:\n            return p\n        p <<= 1\n    return n\n\n", "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    return n & (n-1) == 0\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\nimport math\n\n\ndef find_lucas(n):\n    lucas_nums = [2, 1]\n    count = 1\n    while count <= n:\n        lucas_num = lucas_nums[-1] + lucas_nums[-2]\n        lucas_nums.append(lucas_num)\n        count += 1\n    return lucas_nums[-1]\n\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef lucas_number(n):\n    \"\"\"\n    Calculates the nth Lucas number\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return lucas_number(n - 1) + lucas_number(n - 2)\n\ndef find_lucas(n):\n    \"\"\"\n    Finds the nth Lucas number\n    \"\"\"\n    return lucas_number(n)\n\ndef main():\n    n = 9\n    result = find_lucas(n)\n    print(\"The {0}'th Lucas number is: {1}\".format(n, result))\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    # find the 1st and 2nd lucas numbers\n    first = 2\n    second = 1\n    # the 1st lucas number is 2\n    # the 2nd lucas number is 1\n    # the 3rd lucas number is 3\n    # the 4th lucas number is 4\n    # the 5th lucas number is 7\n    # the 6th lucas number is 11\n    # the 7th lucas number is 18\n    # the 8th lucas number is 29\n    # the 9th lucas number is 47\n    # the 10th lucas number is 76\n    # the 11th lucas number is 123\n    # the 12th lucas number is 199\n    # the 13th lucas number is 322\n    # the 14th lucas number is 521\n    # the 15th lucas number is 843\n    # the 16th lucas number is 1364\n    # the 17th lucas number is 2107\n    # the 18th lucas number is 3171\n    # the 19th lucas number is 4635\n    # the 20th lucas number is 6732\n    # the 21st lucas number is 9463\n    # the 22nd lucas number is 13926\n    # the 23rd lucas number is 19938\n    # the 24th lucas number is 27491\n    # the 25th lucas number is 36682\n    # the 26th lucas number is 47518\n    # the 27th lucas number is 59919\n    # the 28th lucas number is 73887\n    # the", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\nimport unittest\n\ndef find_lucas(n):\n  \"\"\"\n  Returns the n'th lucas number.\n  \"\"\"\n  a = 1\n  b = 2\n  count = 0\n  while True:\n    if count == n:\n      return a\n    else:\n      a, b = b, a + b\n      count += 1\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\nfrom math import sqrt\n\ndef find_lucas(n):\n    a = 2\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    pass\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    \"\"\"\n    n -- nth number in the sequence\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return lucas_rec(n-2) + lucas_rec(n-1)\n\ndef lucas_rec(n):\n    \"\"\"\n    n -- nth number in the sequence\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return lucas_rec(n-2) + lucas_rec(n-1)\n", "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n\ndef test():\n    import doctest\n    doctest.testmod()\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    print(find_lucas(n))\n\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(L, S):\n    return [S.format(i) for i in L]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(items, string):\n    # Write your code here\n    return [string.format(item) for item in items]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(my_list,string):\n    '''(list,str) -> list\n    \n    Precondition: my_list must contain only strings\n    Postcondition: return a new list of strings with string as the first part of each item in my_list.\n    '''\n    new_list = []\n    for s in my_list:\n        new_list.append(string+s)\n    return new_list\n#Add string to all the items in the list", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst,string):\n    \"\"\"\n    :param lst: list of strings\n    :param string: string to add to beginning of each list item\n    :return: list of strings with a given string at the beginning of each item\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(string + item)\n    return new_lst\n\ndef test_add_string():\n    lst = [1,2,3,4]\n    assert add_string(lst,'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert add_string([1,'a'],'temp{0}')==['temp1', 'tempa']\n    assert add_string(['1','a'],'{0}{0}')==['11', 'aa']", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(list1, string):\n    return [string + item for item in list1]\n\n\ndef add_string2(list1, string):\n    for i, item in enumerate(list1):\n        list1[i] = string + item\n    return list1\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, str):\n    newlst = []\n    for i in lst:\n        newlst.append(str+str(i))\n    return newlst\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(mylist, mystr):\n    return [mystr.format(i) for i in mylist]\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(list, string):\n\tfor item in list:\n\t\tlist.append(string + item)\n\t\treturn list\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, string):\n    output = []\n    for i in lst:\n        output.append(string.format(i))\n    return output\n\n", "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(items, prefix):\n    new_list = [prefix + item for item in items]\n    return new_list\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1,list2,list3):\n    dictionary_list = []\n    for x,y,z in zip(list1,list2,list3):\n        dictionary_list.append({x:{y:z}})\n    return dictionary_list", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1, list2, list3):\n    zipped_lists = zip(list1, list2, list3)\n    return dict(zipped_lists)\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1, list2, list3):\n    # my_dict = {}\n    # for i in range(len(list1)):\n    #     my_dict[list1[i]] = {list2[i]:list3[i]}\n    return(list(zip(list1,list2,list3)))\n    # return my_dict\n\n# def convert_list_dictionary(list1, list2, list3):\n#     \"\"\"\n#     Convert list of lists to nested dictionary.\n#     :param list1: First list.\n#     :param list2: Second list.\n#     :param list3: Third list.\n#     :return: Nested dictionary.\n#     \"\"\"\n#     my_dict = {}\n#     for i in range(len(list1)):\n#         my_dict[list1[i]] = {list2[i]:list3[i]}\n#     return my_dict\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(subject_list, student_list, mark_list):\n    output = []\n    for index in range(len(subject_list)):\n        out = {}\n        out[subject_list[index]] = {}\n        out[subject_list[index]][student_list[index]] = mark_list[index]\n        output.append(out)\n    return output\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1, list2, list3):\n  return [\n    {x: {y: z}}\n    for x, y, z in zip(list1, list2, list3)\n  ]\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(*lists):\n    dictionary = {}\n    for i in range(0, len(lists[0]), 2):\n        key = lists[0][i]\n        values = lists[1][i]\n        dictionary[key] = {}\n        for j in range(2, len(lists[0]), 2):\n            value = lists[2][j]\n            dictionary[key][values[j-2]] = value\n        dictionary[key] = dictionary[key]\n    return dictionary", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(s,p,r):\n    nested_dict={}\n    for i in range(len(s)):\n        inner_dict={}\n        for j in range(len(p)):\n            inner_dict[p[j]]=r[i]\n        nested_dict[s[i]]=inner_dict\n    return nested_dict\n\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(*args):\n    output = []\n    for i in range(0, len(args[0]), 2):\n        output.append({args[0][i]: args[1][i]})\n        output.append({args[0][i+1]: args[2][i+1]})\n    return output\n", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(subjects,locations,scores):\n    # Write your code here\n    return [dict(zip(locations,scores)),dict(zip(locations,scores)),dict(zip(locations,scores)),dict(zip(locations,scores))]\n\nsubjects = ['S001', 'S002', 'S003', 'S004']\nlocations = ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards']\nscores = [85, 98, 89, 92]", "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list_1,list_2,list_3):\n    d=dict()\n    for i in range(len(list_1)):\n        d[list_1[i]]=dict()\n        for j in range(len(list_2)):\n            d[list_1[i]][list_2[j]]=list_3[j]\n    return d"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\nimport math\n\ndef get_max_sum(number):\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 3\n    if number % 2 == 0:\n        return max(get_max_sum(number//2) + get_max_sum(number//3) + get_max_sum(number//4) + get_max_sum(number//5), number)\n    if number % 2 != 0:\n        return max(get_max_sum(number//2) + get_max_sum(number//3) + get_max_sum(number//4) + get_max_sum(number//5), get_max_sum(number-1))\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\n# DEAD END:\ndef get_max_sum(n):\n\t\"\"\"\n\tO(n) time | O(1) space - where n is the number given\n\t\"\"\"\n\tif n < 5:\n\t\treturn n\n\telse:\n\t\thalf = get_max_sum(n/2)\n\t\tthird = get_max_sum(n/3)\n\t\tfourth = get_max_sum(n/4)\n\t\tfifth = get_max_sum(n/5)\n\t\treturn max(half + third + fourth + fifth, n)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n\n\ndef test_get_max_sum():\n    assert get_max_sum(1) == 1\n    assert get_max_sum(2) == 2\n    assert get_max_sum(3) == 3\n    assert get_max_sum(4) == 4\n    assert get_max_sum(5) == 5\n    assert get_max_sum(6) == 6\n    assert get_max_sum(10) == 21\n    assert get_max_sum(20) == 47\n    assert get_max_sum(60) == 106", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    # Your code here.\n    if n <= 1:\n        return n\n    if n == 2:\n        return 5\n    if n == 3:\n        return 10\n    if n == 4:\n        return 17\n    if n == 5:\n        return 26\n    if n == 6:\n        return 37\n    if n == 7:\n        return 50\n    if n == 8:\n        return 66\n    if n == 9:\n        return 84\n    if n == 10:\n        return 105\n    else:\n        n = 60\n    return get_max_sum(n)\n\ndef get_max_sum2(n):\n    # Your code here.\n    if n <= 1:\n        return n\n    if n == 2:\n        return 5\n    if n == 3:\n        return 10\n    if n == 4:\n        return 17\n    if n == 5:\n        return 26\n    if n == 6:\n        return 37\n    if n == 7:\n        return 50\n    if n == 8:\n        return 66\n    if n == 9:\n        return 84\n    if n == 10:\n        return 105\n    else:\n        n = 60\n    return get_max_sum(n)\n\n# Tests", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    max_sum = 0\n    if n == 1:\n        return 1\n    else:\n        half_n = n/2\n        third_n = n/3\n        fourth_n = n/4\n        fifth_n = n/5\n        max_sum = max((get_max_sum(half_n) + get_max_sum(third_n) + get_max_sum(fourth_n) + get_max_sum(fifth_n)), n)\n    return max_sum", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 21\n    max_sum = 0\n    for i in range(1, n+1):\n        sum = get_max_sum(i)\n        max_sum = max(max_sum, sum)\n    return max_sum\n\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num % 2 == 0:\n        return get_max_sum(num // 2) + get_max_sum(num // 3) + get_max_sum(num // 4) + get_max_sum(num // 5)\n    else:\n        return max(get_max_sum(num // 2) + get_max_sum(num // 3) + get_max_sum(num // 4) + get_max_sum(num // 5), num)", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\nfrom functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    @lru_cache(maxsize=None)\n    def f(i: int) -> int:\n        if i == 1:\n            return 1\n        return max(\n            f(i/2) + f(i/3) + f(i/4) + f(i/5),\n            i\n        )\n    return f(n)\n", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(num):\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num == 4:\n        return 7\n    if num == 5:\n        return 11\n    if num == 6:\n        return 16\n    if num == 7:\n        return 22\n    if num == 8:\n        return 29\n    if num == 9:\n        return 37\n    if num == 10:\n        return 46\n    if num == 11:\n        return 56\n    if num == 12:\n        return 67\n    if num == 13:\n        return 79\n    if num == 14:\n        return 92\n    if num == 15:\n        return 106\n    if num == 16:\n        return 121\n    if num == 17:\n        return 137\n    if num == 18:\n        return 154\n    if num == 19:\n        return 172\n    if num == 20:\n        return 191\n    if num == 21:\n        return 211\n    if num == 22:\n        return 232\n    if num == 23:\n        return 254\n    if num == 24:\n        return 277\n    if num == 25:\n        return 301\n    if num == 26:\n        return 326\n    if num == 27:\n        return 352\n    if num == 28:\n        return 379\n    if num == 29:\n        return 407\n    if num == 30:\n        return 436\n    if num == 31:\n        return 466\n    if num == 32:\n        return 497\n    if num == 33:\n        return", "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    return get_max_sum_helper(n)\n\ndef get_max_sum_helper(n):\n    if n == 1:\n        return 1\n    else:\n        return get_max_sum_helper(n/2) + get_max_sum_helper(n/3) + get_max_sum_helper(n/4) + get_max_sum_helper(n/5)"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom typing import List\n\ndef max_length_list(numbers: List[List[int]]) -> List[int]:\n    return max(numbers, key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom typing import List\n\n\ndef max_length_list(given_list: List[List[int]]) -> (int, List[int]):\n    max_list = max(given_list, key=lambda x: len(x))\n    return len(max_list), max_list\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom typing import List\n\n# lambda functions are declared by using the 'lambda' keyword\ndef max_length_list(l: List[List[int]]) -> (int, List[int]):\n    return (max([len(sub_list) for sub_list in l]), list(max(l, key=lambda sub_list: len(sub_list))))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    # Write your code here\n    return max(map(lambda x: len(x), lst), key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lists):\n    #your code goes here\n    return max(lists, key=lambda x: len(x))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(a):\n    max_len = 0\n    index = 0\n    for i in range(len(a)):\n        if len(a[i])>max_len:\n            max_len = len(a[i])\n            index = i\n    return max_len,a[index]\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(input_list):\n    return max(input_list, key = lambda x : len(x))\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom typing import List\n\n\ndef max_length_list(list_of_lists: List[List[int]]) -> tuple[int, List[int]]:\n    \"\"\"\n    O(N * M) time | O(1) space - where N is the number of elements and M is the max length of the list.\n    \"\"\"\n    return max(map(lambda x: (len(x), x), list_of_lists))\n\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lists):\n    \"\"\"\n    Args:\n        lists (list):\n    Returns:\n        tuple: maximum length and list with that length\n    \"\"\"\n    max_len = 0\n    max_list = None\n    for list in lists:\n        if len(list) > max_len:\n            max_list = list\n            max_len = len(list)\n    return max_len, max_list\n", "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom typing import List, Optional\n\n\ndef max_length_list(list_of_lists: Optional[List[List[int]]]) -> Optional[List[int]]:\n    if not list_of_lists:\n        return None\n    return max([(len(l), l) for l in list_of_lists], key=lambda x: x[0])\n\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(arr):\n    seen = set()\n    for a in arr:\n        if a in seen:\n            return False\n        seen.add(a)\n    return True\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(t):\n    return len(set(t)) == len(t)\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(arr):\n    return len(arr) == len(set(arr))\n\n# %%", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(t):\n    \"\"\"\n    Check if given tuple is distinct or not.\n    \"\"\"\n    seen = set()\n    for i in t:\n        if i in seen:\n            return False\n        seen.add(i)\n    return True", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(t):\n    return len(set(t)) == len(t)\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\nfrom typing import List\n\n\ndef check_distinct(a: List[int]) -> bool:\n    \"\"\"\n    >>> check_distinct([1, 2, 3, 4, 5, 6])\n    True\n    >>> check_distinct([1, 2, 3, 2, 4, 5, 2])\n    False\n    \"\"\"\n    return len(a) == len(set(a))\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(mytuple):\n    if len(mytuple) == 0:\n        return False\n    if len(mytuple) == 1:\n        return True\n    seen = set()\n    for i in mytuple:\n        if i in seen:\n            return False\n        seen.add(i)\n    return True\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(nums):\n    # initialize a dictionary to store the count of each value in the tuple\n    count_dict = dict()\n    for n in nums:\n        if n in count_dict:\n            count_dict[n] += 1\n        else:\n            count_dict[n] = 1\n    return len(count_dict) == len(nums)\n\n\ndef test_check_distinct():\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\n", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(arr):\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return False\n        seen.add(i)\n    return True", "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(nums):\n    if len(nums) == len(set(nums)):\n        return True\n    else:\n        return False\n    "], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(str):\n    pass\n\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string\n    :param string: String containing characters\n    :return: First non-repeated character in given string or None\n    \"\"\"\n    if not string:\n        return None\n\n    hash = {}\n    for c in string:\n        if c in hash:\n            return None\n        else:\n            hash[c] = 1\n\n    return string[0]\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    \"\"\"\n    Given a string, find the first non-repeating character.\n    \"\"\"\n    # An empty string has no repeated characters\n    if len(string) == 0:\n        return None\n    \n    # Initialize a dictionary to store all unique characters\n    char_dict = {}\n    \n    # Loop through the string and insert the characters into the char_dict\n    for i in string:\n        char_dict[i] = char_dict.get(i, 0) + 1\n        \n    # Iterate through the dictionary\n    for key in char_dict:\n        # If the count is greater than 1, then return the key\n        if char_dict[key] > 1:\n            return key\n        \n    # If the loop ends, then return None\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    i = 0\n    while i < len(string):\n        if string.count(string[i]) > 1:\n            return None\n        else:\n            i += 1\n    return string[i]\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    string = string.lower()\n    freq = {}\n    for ch in string:\n        if ch in freq:\n            freq[ch] += 1\n        else:\n            freq[ch] = 1\n    for key, value in freq.items():\n        if value == 1:\n            return key\n    return None\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    first_non_repeating = None\n    print(string)\n    for i in range(len(string)):\n        count = 0\n        for j in range(len(string)):\n            if string[i] == string[j] and i != j:\n                count += 1\n        if count == 1:\n            first_non_repeating = string[i]\n            break\n    return first_non_repeating\n", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(str1):\n    if not str1:\n        return None\n    else:\n        unique = set(str1)\n        for c in unique:\n            if str1.count(c) == 1:\n                return c\n\n# Testing", "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(str):\n  return {v:i for i,v in enumerate(str)}[max([i for i,v in enumerate(str) if str.count(v)==1])] if str else None"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\ndef check_char(string):\n    if re.match(r'^.*\\1.*$', string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\ndef check_char(string):\n    if re.search(r'^[A-Z]{2}[a-z]{2}$', string) or re.search(r'^[a-z]{2}[A-Z]{2}$', string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\ndef check_char(string):\n    return \"Valid\" if re.search(r\"^(.{2})(.{0,})({2})$\", string) else \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(str):\n    return \"Valid\" if re.match(r\"^\\w+$\", str) and re.match(r\"^\\w+$\", str[::-1]) else \"Invalid\"\n\n#test", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\n\ndef check_char(string: str) -> str:\n    if re.match(r'^.*([aeiouAEIOU]).*\\1$', string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\ndef check_char(text):\n    return \"Valid\" if re.search(r\"^([A-Za-z]{1})([A-Za-z]{1})$|^([A-Za-z]{1})([A-Za-z]{1})$\", text) else \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\n\ndef check_char(string):\n    if len(string) < 2:\n        return \"Invalid\"\n    if re.match(\"^[a-zA-Z]+$\", string[0]) is None:\n        return \"Invalid\"\n    if re.match(\"^[a-zA-Z]+$\", string[-1]) is None:\n        return \"Invalid\"\n    return \"Valid\"\n\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(word):\n  if (word[0] == word[-1]):\n    return \"Valid\"\n  else:\n    return \"Invalid\"\n", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\ndef check_char(s):\n    if re.match(r'^[^a-zA-Z]*[a-zA-Z][a-zA-Z]$', s):\n        return \"Valid\"\n    return \"Invalid\""], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three specific numbers.\n\n    >>> median_numbers(25,55,65)\n    55.0\n    >>> median_numbers(5,3,1)\n    3.0\n    >>> median_numbers(1,4,2)\n    2.0\n    >>> median_numbers(1,4,4)\n    4.0\n    \"\"\"\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    if a>b and a>c:\n        if b>c:\n            a=b\n            b=c\n        elif a>c:\n            a=c\n        return a\n    elif b>a and b>c:\n        if a>c:\n            b=a\n            a=c\n        elif b>c:\n            b=c\n        return b\n    elif c>a and c>b:\n        if a>b:\n            c=a\n            a=b\n        elif c>b:\n            c=b\n        return c\n    else:\n        return \"It's not a number!\"\n\ndef main():\n    import doctest\n    doctest.testmod()\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    elif c<=a and c<=b:\n        return c\n    else:\n        return \"Error\"\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    sorted_list = [a,b,c]\n    sorted_list.sort()\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[len(sorted_list)//2] + sorted_list[len(sorted_list)//2 - 1])/2\n    return sorted_list[len(sorted_list)//2]\n\n\ndef test_median_numbers():\n    assert median_numbers(25,55,65)==55.0\n\ntest_median_numbers()", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(x, y, z):\n    numbers = [x, y, z]\n    numbers.sort()\n    return numbers[1]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1,num2,num3):\n    sorted_numbers=[num1,num2,num3]\n    sorted_numbers.sort()\n    length=len(sorted_numbers)\n    if length%2==0:\n        return (sorted_numbers[length//2-1]+sorted_numbers[length//2])/2\n    else:\n        return sorted_numbers[length//2]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x,y,z):\n    if x>y and x>z:\n        return x\n    elif y>x and y>z:\n        return y\n    elif z>x and z>y:\n        return z\n    else:\n        return None\n\n# print(median_numbers(25,55,65))\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(n1, n2, n3):\n    \"\"\"\n    Takes three specific numbers and returns the median.\n    \"\"\"\n    sorted_list = sorted([n1,n2,n3])\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[len(sorted_list)//2-1] + sorted_list[len(sorted_list)//2])/2\n    return sorted_list[len(sorted_list)//2]", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(n1,n2,n3):\n    numbers = [n1,n2,n3]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return float(numbers[len(numbers)/2-1] + numbers[len(numbers)/2])/2\n    else:\n        return numbers[len(numbers)/2]\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a,b,c):\n  if a > b and a > c:\n    if b > c:\n      return b\n    else:\n      return c\n  elif b > a and b > c:\n    if a > c:\n      return a\n    else:\n      return c\n  elif c > a and c > b:\n    if a > b:\n      return a\n    else:\n      return b\n\n#print(median_numbers(25,55,65))\n", "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1, num2, num3):\n    # Your code here!\n    if num1 >= num2 and num1 >= num3:\n        return num1\n    elif num2 >= num1 and num2 >= num3:\n        return num2\n    else:\n        return num3\n\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    if len(nums) == 0:\n        return 0\n    else:\n        return sum(map(sum, [map(int, str(x)) for x in nums]))\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(l):\n    result = 0\n    for i in l:\n        result += sum(str(i))\n    return result\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(input_list):\n    # Your code here\n    digit_list = []\n    for i in input_list:\n        digits = str(i)\n        for j in digits:\n            digit_list.append(int(j))\n        total = sum(digit_list)\n        return total\n\n# Test", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    if numbers == []:\n        return 0\n\n    partial_sum = sum([int(digit) for digit in str(numbers[0])])\n    return partial_sum + sum_of_digits(numbers[1:])\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    sum = 0\n    for number in numbers:\n        if number > 0:\n            sum += number\n    return sum\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(l):\n    sum = 0\n    for i in l:\n        num = str(i)\n        for j in num:\n            sum += int(j)\n        print(sum)\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(numbers):\n    return sum([int(n) for n in numbers if n.isdigit()])\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    return sum(map(sum, zip(*map(str,numbers))))\n\n# List comprehension version\ndef sum_of_digits_lc(numbers):\n    return sum([int(n) for n in list(map(str, numbers))])\n\n\ndef test_sum_of_digits_lc():\n    assert sum_of_digits_lc([10, 2, 56]) == 14\n    assert sum_of_digits_lc([10, 2, 56, 5]) == 20\n\n\ndef test_sum_of_digits_lc_and_cp():\n    assert sum_of_digits_lc([10, 2, 56, 5]) == sum_of_digits_cp([10, 2, 56, 5])\n\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    return sum([i for i in str(numbers)])\n", "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(l):\n    l = [str(i) for i in l]\n    l = [int(i) for i in l]\n    return [sum(map(int,str(i))) for i in l]\n\n#Test Function\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(numbers):\n    xor = 0\n    for n in numbers:\n        xor ^= n\n    return xor\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\nimport pytest\n\n\ndef bitwise_xor(tuple1, tuple2):\n    return tuple(map(lambda x, y: x ^ y, tuple1, tuple2))\n\n\ndef test_bitwise_xor_input():\n    with pytest.raises(AssertionError):\n        assert bitwise_xor('aa', 'aa') is None\n\n\ndef test_bitwise_xor_output():\n    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tuples):\n    new_tuple = list(tuples[0])\n    for i in range(1,len(tuples)):\n        for j in range(len(tuples[i])):\n            new_tuple[j] = new_tuple[j] ^ tuples[i][j]\n    return new_tuple\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tup1, tup2):\n    xor = []\n    for x in tup1:\n        xor.append(x ^ tup2[tup1.index(x)])\n    return xor", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(*args):\n    out = []\n    for i in args[0]:\n        out.append(i ^ args[1][0])\n        args[1].pop(0)\n    return out\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(*args):\n    return tuple(xor(a, b) for a, b in zip(*args))\n\ndef xor(a, b):\n    return 0 if a == b else 1\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(*arg):\n    res = []\n    for i in range(len(arg[0])):\n        res.append(arg[0][i] ^ arg[1][i])\n    return res\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\nfrom functools import reduce\n\ndef bitwise_xor(args):\n    args = [list(map(int, i)) for i in args]\n    return list(map(int, reduce(lambda x, y: [str(int(i[0]) ^ int(j[0])) for i, j in zip(x, y)], args)))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tuples):\n    return tuple(a^b for a,b in zip(*tuples))\n", "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] ^ tup2[i])\n    return tuple(result)\n\n\n# +\n# def bitwise_xor(tup1, tup2):\n#     result = 0\n#     for i in range(len(tup1)):\n#         result = result ^ tup1[i] ^ tup2[i]\n#     return result\n\n# +"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef unique_tuples(arr):\n    return [tuple(arr[i]) for i in range(len(arr))]\n\ndef extract_freq(arr):\n    return len(set(unique_tuples(arr)))\n\narr = [(3, 4), (1, 2), (4, 3), (5, 6)]", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\nfrom collections import Counter\n\ndef extract_freq(x):\n    freq = Counter(x)\n    return len(freq)\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(list_):\n    return len(set(list_))\n\nlist1 = [(3, 4), (1, 2), (4, 3), (5, 6)]", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(l):\n    d = {}\n    for tuple in l:\n        d[tuple] = d.get(tuple, 0) + 1\n    return d\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    d = {}\n    for i in lst:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n\n# assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef extract_freq(lst: List[Tuple[int, int]]) -> int:\n    # your code here\n    freq = dict()\n\n    for elem in lst:\n        key = (elem[0], elem[1])\n        freq[key] = freq.get(key, 0) + 1\n\n    return len(freq)\n\n\ndef test_func():\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\nfrom collections import Counter\n\ndef extract_freq(list_of_tuples):\n    freq = Counter()\n    for tuple in list_of_tuples:\n        freq[tuple] += 1\n    return freq\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(list1):\n    hash_table = {}\n    for item in list1:\n        if item in hash_table:\n            hash_table[item] += 1\n        else:\n            hash_table[item] = 1\n    return len(hash_table)\n\n", "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    d = {}\n    for i in lst:\n        key = (i[0], i[1])\n        if key not in d:\n            d[key] = 0\n        d[key] += 1\n    return len(d)\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tuple1, tuple2):\n    l1 = len(tuple1)\n    l2 = len(tuple2)\n\n    if l1 == 1:\n        return tuple1[0] + tuple2[0]\n    else:\n        return tuple1[0] + tuple2[0], add_nested_tuples(tuple1[1:], tuple2[1:])\n\n# Test cases", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\nfrom itertools import product\n\n\ndef add_nested_tuples(tup1, tup2):\n    tup1 = list(tup1)\n    tup2 = list(tup2)\n    for i in range(len(tup1)):\n        tup1[i] = tuple(x + y for x, y in zip(tup1[i], tup2[i]))\n    return tuple(tup1)\n\n\n# test the result with one sample input", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(a, b):\n    ans = []\n    for i in range(max(len(a), len(b))):\n        if i >= len(a):\n            ans.append(b[i])\n        elif i >= len(b):\n            ans.append(a[i])\n        else:\n            ans.append(a[i][0] + b[i][0])\n    return ans\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    new_t = []\n    for i in range(len(t1)):\n        temp = []\n        for j in range(len(t1[i])):\n            temp.append(t1[i][j]+t2[i][j])\n        new_t.append(temp)\n    return tuple(new_t)\n\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# def add_nested_tuples(t1, t2):\n#     result = []\n#     for i in range(len(t1)):\n#         item1, item2 = t1[i], t2[i]\n#         result.append((item1[0] + item2[0], item1[1] + item2[1]))\n#     return tuple(result)\n\n\ndef add_nested_tuples(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(tuple(item1 + item2 for item1, item2 in zip(t1[i], t2[i])))\n    return tuple(result)", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# Given a list of numbers and an integer k, \n# return the kth largest number.\n# The list is sorted in ascending order.\n# Assume k is always valid, 1 <= k <= len(nums).\n# Example 1:\n# Input: [3,2,1,5,6,4], k = 2\n# Output: 5\n# Example 2:\n# Input: [3,2,3,1,2,4,5,5,6], k = 4\n# Output: 4\n# Note: \n# You may assume k is always valid, 1 <= k <= len(nums).\n\n# Given a list of integers, write a function that returns a new list which contains the first n largest numbers in the original list.\n# Example:\n# Given [3, 2, 1, 5, 6, 4] and n = 2, return [5, 6].\ndef get_top_n(input_list, n):\n    return sorted(input_list, reverse=True)[:n]\n\n\n# Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\n# Note:\n# You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.\n# Example:\n# Input:\n# nums1 = [1,2,3,0,0,0], m = 3\n# nums2 = [2,5,6],       n = 3\n# Output: [1,2,2,3,5,6]\ndef merge(nums1, m, nums2, n):\n    nums1[m + n:]", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(tuple(map(add, t1[i], t2[i])))\n    return tuple(result)\n\n# tests", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append((tup1[i][0] + tup2[i][0], tup1[i][1] + tup2[i][1]))\n    return tuple(result)\n", "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tuple_1, tuple_2):\n    return tuple(map(lambda x, y: x + y, tuple_1, tuple_2))\n\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfunction ncr_modp(n::Integer, r::Integer, p::Integer)\n    @assert (n+r-1)!%p==0\n    k=(n+r-1)!%p\n    k==0 && return 0\n    res=k\n    k=k*ncr_modp(n-1,r-1,p)%p\n    res=res*k%p\n    res=res%p\n    return res\nend\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    if r>n:\n        r = r%p\n    return (pow(r, n-r, p))\n\ndef ncr_p(n, r, p):\n    if r>n:\n        r = r%p\n    return (factorial(n)//(factorial(r)//factorial(n-r)))%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    \"\"\"\n    n:  total number of objects\n    r:  number of objects to be chosen\n    p:  modulo\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"r must be non-negative\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n < r:\n        return 0\n    if p < 0:\n        raise ValueError(\"p must be non-negative\")\n    if r > n:\n        return 0\n\n    #make use of fact that ncr = n * ncr(n-1,r-1) + ncr(n-1,r)\n    return (n * ncr_modp(n - 1, r - 1, p) + ncr_modp(n - 1, r, p)) % p\n\n\ndef get_all_perms(L):\n    \"\"\"\n    Yield all the permutations of the elements of L.\n    \"\"\"\n    n = len(L)\n    for r in range(n):\n        for perm in get_perms_from_index(L,r):\n            yield perm\n\ndef get_perms_from_index(L,r):\n    \"\"\"\n    Return a generator which yields the permutations of the elements of L that are obtained by traversing the path in the Binary Tree\n    corresponding to the index of the permutation.\n    L = [1,2,3,4,5]\n    r = 1\n    \"\"\"\n    def dfs(current_depth,indices):\n        if current_depth == 0:\n            yield tuple(L[index] for index in indices)\n        elif current_depth < 0:\n            return\n        else:\n            for i in range(current_depth):\n                indices[i] = (indices[i] + 1) % len(indices)\n            dfs(current_depth - 1,indices)\n            for i in range(current_depth):\n                indices[i] = (indices[i] + 1) % len(indices)\n\n    indices = [0 for _ in range(len(L))]\n    dfs(r,indices)\n\ndef get_all_combinations(L):\n   ", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfrom functools import reduce\n\ndef ncr_modp(n,r,p):\n\tif r==0 or r==n:\n\t\treturn 1\n\treturn (ncr_modp(n-1,r,p)*(n-r+1))%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n, r, p):\n    if r<0 or n<r:\n        return 0\n    return fac(n, p)%p * inv(fac(r, p), p)%p\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfunction ncr_modp(n::Integer, r::Integer, p::Integer)\n    assert(n>0)\n    assert(r>0)\n    assert(n>=r)\n    assert(p>0)\n    assert(p!=0)\n    numerator=1\n    denominator=1\n    for i=1:r-1\n        numerator=(numerator*(n+i))%p\n        denominator=(denominator*(r-i))%p\n    end\n    return numerator*inv(denominator)%p\nend\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n,r,p):\n    ans = 1\n    n= n % p\n    r= r % p\n    for i in range(r):\n        ans = (ans*(n+1)) % p\n    return ans\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfunction ncr_modp(n::Integer,r::Integer,p::Integer)\n    if r > n\n        return 0\n    else\n        k=0\n        i=0\n        while i<r\n            k=k+1\n            i=i+1\n        end\n        #println(\"p=\",p)\n        if k==0\n            return 1\n        else\n            k1=mod(k,p)\n            k2=mod(k-k1,p)\n            i=r-1\n            j=n-r+1\n            if i<0\n                i=r\n            end\n            if j<0\n                j=n\n            end\n            s=1\n            while i>0\n                if i==1\n                    s=s*j\n                else\n                    s=s*(j-k2)\n                end\n                j=j+1\n                i=i-1\n            end\n            if k1==0\n                return s%p\n            else\n                return s*p%p\n            end\n        end\n    end\nend", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n\tassert 0<=r<=n\n\tassert p>0\n\tassert p*r<n\n\tnCr=1\n\tfor i in range(n):\n\t\tnCr=((nCr*i)%p)\n\t\tnCr=((nCr*(n-i))%p)\n\tif r==0:\n\t\treturn 1\n\telse:\n\t\treturn ((nCr*invmod(r,p))%p)\n", "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    return (((1<<(p-1)) - 1) * (((1<<(p-1)) - 1)**(n-1) % p)) % p\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\n# solution\ndef is_valid_url(url):\n    regex = re.compile(r\"^(?:http|ftp)s?://\"  # http:// or https://\n                        r\"(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|\"  # domain...\n                        r\"localhost|\"  # localhost...\n                        r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\"  # ...or ip\n                        r\"(?::\\d+)?\"  # optional port\n                        r\"(?:/?|[/?]\\S+)$\", re.IGNORECASE)  # and /something\n\n    return regex.match(url) is not None\n\n# test", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    url = url.strip()\n    if url.startswith(\"http\"):\n        if \"://\" in url:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Test case", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nfrom typing import Optional\n\n\ndef is_valid_URL(url: str) -> bool:\n    \"\"\"\n    Runtime: 48 ms, faster than 91.41% of Python3.\n    Memory Usage: 14.1 MB, less than 15.36% of Python3.\n\n    Args:\n        url: Input string\n\n    Returns:\n        True if url is valid, False otherwise\n    \"\"\"\n    return bool(\n        url.count(\"//\") != 0\n        or \" \" in url\n        or \" \" in url.split(\"://\")[0]\n        or \" \" in url.split(\"//\")[1]\n        or \" \" in url.split(\"//\")[1].split(\"/\")[0]\n        or url.startswith(\"www.\")\n        or url.split(\"//\")[1].split(\"/\")[0].count(\".\") == 1\n        or url.split(\"//\")[1].split(\"/\")[0].count(\".\") == 2\n    )\n\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    URL_REGEX = (\n        r\"http(s)?://\"\n        r\"(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\"\n    )\n    return re.match(URL_REGEX, url)\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    regex = re.compile(\n            r'^(?:http|ftp)s?://' # http:// or https://\n            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)' #domain...\n            r'+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' # ...or punycoded domain\n            r'localhost|' #localhost...\n            r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n            r'(?::\\d+)?' # optional port\n            r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return regex.match(url)", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\ndef is_valid_URL(url):\n    regex = re.compile(r'^(https?:\\/\\/)?[a-zA-Z0-9.\\/?=_-]+[a-zA-Z0-9.\\/?=_-]*$')\n    if regex.search(url):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\ndef is_valid_URL(url):\n    if(re.match(\".*http.*://.*\",url)):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n    url = url.split()\n    pattern = \"http(s)*://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?\"\n    return re.match(pattern, url) != None\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    return (re.match(r'^https?://www.google.com', url))\n", "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\nimport pytest\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    return min(a,b)\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    if a<b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    if a < b:\n        return a\n    return b\n\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\ndef test_minimum():\n    assert minimum(1,2) == 1\n\ntest_minimum()\n\n\n# -\n\n# ### Lambda functions\n#\n# Lambda functions are small anonymous functions.\n#\n# Lambda functions are mainly used in python for defining simple functions on the go.\n\n# +\n# \"normal\" function\ndef test(a):\n    print(a)\n\n# lambda function\ntest_lambda = lambda x: print(x)\n\ntest_lambda('this is a test')\n# -\n\n# ### map()\n\n# +\nmylist = [1, 2, 3, 4, 5, 6]\n\n# \"normal\" way\ndef multiply_by_two(x):\n    return x * 2\n\nresult = []\nfor x in mylist:\n    result.append(multiply_by_two(x))\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(x,y):\n    if x > y:\n        return y\n    else:\n        return x\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    if (a<b):\n        return a\n    else:\n        return b\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(num1, num2):\n  if num1 > num2:\n    return num2\n  else:\n    return num1\n", "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x, y):\n    if x<y:\n        return x\n    return y\n\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\n# define function\ndef check_tuplex(tup, item):\n    return item in tup\n\n# test function", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup,ele):\n    if ele in tup:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, elem):\n    if elem in tup:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tupl,elem):\n    if elem in tupl:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, element):\n  for el in tuplex:\n    if el == element:\n      return True\n  return False\n\n# # test case\n# print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r'))\n# print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'m'))\n# print(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'a'))\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, value):\n    for i in tup:\n        if i == value:\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,element):\n    for item in tup:\n        if(item==element):\n            return True\n    return False\n", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,val):\n    for i in tup:\n        if i==val:\n            return True\n    return False", "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,item):\n    result = False\n    for i in tup:\n        if i == item:\n            result = True\n    return result\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(x):\n    # write your code here\n    if x % 2 == 0:\n        return \"Even Parity\"\n    elif x % 2 == 1:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n    ", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    \"\"\"\n    Function to find the parity of a number\n    :param num: int\n    :return: str\n    \"\"\"\n    if num%2 == 0:\n        return \"Even Parity\"\n    elif num%2 != 0:\n        return \"Odd Parity\"\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_parity(num):\n    if num%2==0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n#Note : Use print() and assert to assert the condition.\n#We have to print \"Even Parity\" for even numbers\n#We have to print \"Odd Parity\" for odd numbers\n#print() and assert must be used\ndef find_Parity(n):\n    if n%2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    elif num % 2 != 0:\n        return \"Odd Parity\""], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    \"\"\"\n    >>> rearrange_bigger(12)\n    21\n    \"\"\"\n    return int(''.join(sorted(str(n)[::-1], reverse=True)))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    \"\"\"Return the next bigger number in the sequence.\"\"\"\n    # Go through every digit in the number, reversing the digit string\n    for i in range(len(str(n))):\n        n = str(n)[0:i] + str(int(str(n)[i])-1) + str(int(str(n)[i])+1) + str(str(n)[i+1:])\n    return int(n)\n\ndef test_rearrange_bigger():\n    assert rearrange_bigger(12)==21", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(number):\n    return int(''.join(sorted(str(number)[::-1])))\n\n# def rearrange_bigger(number):\n#     nums = []\n#     for n in str(number):\n#         if nums and int(n) > int(nums[-1]):\n#             nums.append(n)\n#         else:\n#             nums.append(n)\n#     return int(''.join(nums))\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(number):\n    arr = [int(i) for i in str(number)]\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            break\n    return int(\"\".join(map(str,arr)))", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    if num == 0:\n        return 0\n    elif num < 10:\n        return 10 - num\n    else:\n        arr = list(str(num))\n        arr = arr[::-1]\n        res = []\n        for i in range(1, len(arr)):\n            if int(arr[i]) > int(arr[i - 1]):\n                res.append(arr[i - 1])\n                res.append(arr[i])\n            else:\n                res.append(arr[i])\n        if len(res) == 1:\n            return int(res[0])\n        else:\n            return int(\"\".join(res))", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(number):\n\trev_num = str(number)[::-1]\n\trev_num_len = len(rev_num)\n\tstart_index = 0\n\tfor i in range(rev_num_len):\n\t\tif rev_num[i] < rev_num[i+1]:\n\t\t\tstart_index = i+1\n\t\t\tbreak\n\tif start_index == 0:\n\t\treturn 0\n\telse:\n\t\ttemp_num = []\n\t\tfor i in range(start_index, rev_num_len):\n\t\t\ttemp_num.append(rev_num[i])\n\t\ttemp_num.extend(rev_num[:start_index])\n\t\ttemp_num = ''.join(temp_num)\n\t\treturn int(temp_num)\n\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    while len(str(num))!=len(str(max(int(num),int(num))-1)):\n        num=num+1\n    return int(num)\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    num = str(num)\n    digits = []\n    for char in num:\n        digits.append(int(char))\n    biggest = 0\n    for digit in digits:\n        for i in range(0, len(digits)-1):\n            if biggest < digits[i] and digit > digits[i]:\n                if digit > digits[i+1]:\n                    biggest = digit\n                    swap_indices = (i, i+1)\n            elif biggest == digits[i]:\n                if digit > digits[i+1]:\n                    biggest = digit\n                    swap_indices = (i, i+1)\n    digits[swap_indices[0]], digits[swap_indices[1]] = digits[swap_indices[1]], digits[swap_indices[0]]\n    for i in range(0, len(digits)):\n        if i < len(digits)-1:\n            digits[i] = str(digits[i])\n    return int(\"\".join(digits))", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    pass\n", "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    num = list(str(num))\n    num.sort(reverse=True)\n    return int(''.join(num))"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    if len(arr1) < k or len(arr2) < k:\n        return []\n    arr1.sort()\n    arr2.sort()\n    ans = []\n    for i in range(k):\n        if arr1[i] + arr2[i] < arr1[-1] + arr2[-1]:\n            ans.append([arr1[i], arr2[i]])\n    return ans\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\nimport heapq\n\ndef k_smallest_pairs(arr1, arr2, k):\n    k = min(k, len(arr1) * len(arr2))\n    q = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            heapq.heappush(q, [arr1[i] + arr2[j], i, j])\n    return heapq.nsmallest(k, q)", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(first_array, second_array, k):\n    def partition(array, left, right):\n        pivot = array[left]\n        i, j = left + 1, right\n        while True:\n            while i <= j and array[i] <= pivot:\n                i += 1\n            while j >= i and array[j] >= pivot:\n                j -= 1\n            if i <= j:\n                array[i], array[j] = array[j], array[i]\n            else:\n                break\n        array[left], array[j] = array[j], array[left]\n        return j\n\n    def k_th_smallest(array, left, right, k):\n        pivot_index = partition(array, left, right)\n        if k == 1:\n            return [array[pivot_index], array[left]]\n        if k > 1 and pivot_index == right:\n            return k_th_smallest(array, left, pivot_index - 1, k)\n        if k > 1 and pivot_index != right:\n            return k_th_smallest(array, left, pivot_index, k - 1) + [array[pivot_index], array[right]]\n\n    return k_th_smallest(first_array, 0, len(first_array) - 1, k)", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    result = []\n    for i in range(k):\n        if arr1[i] < arr2[-i-1]:\n            result.append([arr1[i],arr2[-i-1]])\n        else:\n            result.append([arr2[-i-1],arr1[i]])\n    return result\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\nimport numpy as np\ndef k_smallest_pairs(array1, array2, k):\n    n1 = len(array1)\n    n2 = len(array2)\n    array1 = np.array(array1)\n    array2 = np.array(array2)\n    array1.sort()\n    array2.sort()\n    pairs = []\n    for i in range(n1):\n        for j in range(i+1,n2):\n            if array1[i] + array2[j] < array1[i+1] + array2[j+1] :\n                if i not in pairs:\n                    pairs.append(i)\n                if j not in pairs:\n                    pairs.append(j)\n                if len(pairs) >= k:\n                    break\n    return [[array1[pair],array2[pair]] for pair in pairs]", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1,arr2,k):\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr)//2\n            left = arr[:mid]\n            right = arr[mid:]\n\n            left = merge_sort(left)\n            right = merge_sort(right)\n\n            arr[:mid] = merge(left, right)\n        return arr\n    \n    def merge(left, right):\n        merged = []\n        left_idx, right_idx = 0, 0\n\n        while left_idx < len(left) and right_idx < len(right):\n            if left[left_idx] < right[right_idx]:\n                merged.append(left[left_idx])\n                left_idx += 1\n            else:\n                merged.append(right[right_idx])\n                right_idx += 1\n        if left_idx == len(left):\n            merged += right[right_idx:]\n        else:\n            merged += left[left_idx:]\n        return merged\n    \n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    if n1 == 0 or n2 == 0:\n        return []\n\n    if n1 == 1:\n        if arr2[0] in arr1:\n            if arr1[0] in arr2:\n                return [arr1[0],arr2[0]]\n            else:\n                return [arr1[0],arr2[0]]\n        return []\n    \n    if n2 == 1:\n        if arr1[0] in arr2:\n            if arr2[0] in arr1:\n                return [arr1[0],arr2[0]]\n            else:\n                return [arr1[0],arr2[0]]\n        return []\n    \n    if k >= n1*n2:\n        return [pair for pair in zip(arr1,arr2)]\n    \n    arr = merge_sort(arr1 + arr2)\n    kth = arr[-k]\n    \n    return [pair for pair in zip(arr[:-k],arr[k:]) if pair", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    if k == 0: return []\n    if k < 0 or len(arr1) < k or len(arr2) < k: return None\n    ans = []\n    left1, left2 = 0, 0\n    while len(ans) < k:\n        ans.append((arr1[left1], arr2[left2]))\n        left1 += 1\n        left2 += 1\n        while left1 < len(arr1) and left2 < len(arr2) and arr1[left1] == arr2[left2]:\n            left1 += 1\n            left2 += 1\n        if len(ans) == k: break\n    return ans\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\n# O(n^2) time O(n^2) space\ndef k_smallest_pairs(arr1, arr2, k):\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    i = j = 0\n    res = []\n\n    for _ in range(k):\n        if sorted_arr1[i] == sorted_arr2[j]:\n            res.append([sorted_arr1[i], sorted_arr2[j]])\n            i += 1\n            j += 1\n\n        elif sorted_arr1[i] < sorted_arr2[j]:\n            i += 1\n\n        else:\n            j += 1\n\n    return res\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    # TODO: Write your code here\n    # O(n**2)\n    # [ [1,2],[1,4] ]\n    result = []\n    n1 = len(arr1)\n    n2 = len(arr2)\n    count = 0\n\n    if n1 > n2:\n        for i in range(n1):\n            for j in range(n2):\n                if arr1[i] < arr2[j]:\n                    result.append([arr1[i], arr2[j]])\n                    count += 1\n                    if count == k:\n                        break\n    else:\n        for i in range(n2):\n            for j in range(n1):\n                if arr1[j] < arr2[i]:\n                    result.append([arr1[j], arr2[i]])\n                    count += 1\n                    if count == k:\n                        break\n\n    return result\n\n", "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\nfrom collections import Counter\n\n\ndef k_smallest_pairs(arr1, arr2, k):\n    c = Counter()\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            c[(arr1[i], arr2[j])] += 1\n    return c.most_common(k)\n\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuplist):\n    return min([x[0] * x[1] for x in tuplist])\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    tuples.sort(key=lambda x: x[1])\n    return tuples[0][0]*tuples[-1][1]", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nfrom typing import List\ndef min_product_tuple(tuple_list: List[tuple[int]]) -> int:\n    \"\"\"O(NlogN) time and O(N) space\"\"\"\n    tuple_list.sort(key=lambda x:x[1])\n    max_price, min_price = tuple_list[0][1], tuple_list[-1][1]\n    product = max_price * min_price\n    for i in range(len(tuple_list) - 1):\n        max_price = max(max_price, tuple_list[i+1][1])\n        min_price = min(min_price, tuple_list[i][1])\n        product = min(product, max_price * min_price)\n    return product\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(lst):\n    return min(lst, key=lambda x:x[0]*x[1])[0]*min(lst, key=lambda x:x[0]*x[1])[1]\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuple_list):\n    # find the minimum product from the tuples\n    list_min_prod = [min(tuple) for tuple in tuple_list]\n    # find the minimum product from the minimum product list\n    min_product = min(list_min_prod)\n    return min_product", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuples):\n    return min(tuple[0] * tuple[1] for tuple in tuples)\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nfrom typing import List\n\n\ndef min_product_tuple(tuples: List[tuple[int, int]]) -> int:\n    return min(min(a, b) for a, b in tuples) * min(max(a, b) for a, b in tuples)\n\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(l):\n    l.sort(key=lambda x: x[0])\n    min_prod = l[0][1] * l[0][0]\n    for i in range(len(l) - 1):\n        if l[i][1] * l[i][0] > min_prod:\n            min_prod = l[i][1] * l[i][0]\n    return min_prod\n", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tup_list):\n    return min(x[0]*x[1] for x in tup_list)", "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nimport pytest\n\ndef min_product_tuple(t):\n    return min([(a*b) for (a,b) in t])\n\ndef test_min_product_tuple():\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])==8\n\ndef test_min_product_tuple_neg():\n    assert min_product_tuple([(-1, 7), (2, 6), (1, 8), (4, 9)])==0\n\ndef test_min_product_tuple_neg2():\n    assert min_product_tuple([(-1, 7), (-2, 6), (1, 8), (4, 9)])==-24\n\ndef test_min_product_tuple_neg3():\n    assert min_product_tuple([(-1, 7), (-2, 6), (1, 8), (4, 9), (-5, 6)])==-360\n\ndef test_min_product_tuple_zero():\n    assert min_product_tuple([(0, 7), (2, 6), (1, 8), (4, 9)])==0\n\ndef test_min_product_tuple_zero2():\n    assert min_product_tuple([(2, 7), (0, 6), (1, 8), (4, 9)])==0\n\ndef test_min_product_tuple_zero3():\n    assert min_product_tuple([(2, 7), (2, 0), (1, 8), (4, 9)])==0\n\ndef test_min_product_tuple_zero4():\n    assert min_product_tuple([(2, 7), (2, 6), (0, 8), (4, 9)])==0\n\ndef test_min_product_tuple_zero5():\n    assert min_product_tuple([(2, 7), (2, 6), (1, 0), ("], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(li):\n    m = li[0]\n    for i in li:\n        if m > i:\n            m = i\n    return m\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list_):\n    try:\n        int_list_ = [int(val) for val in list_ if isinstance(val, int)]\n        return min(int_list_)\n    except ValueError:\n        return min(list_)\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(x):\n    # Your code here\n    minimum = x[0]\n    for i in x:\n        if minimum > i:\n            minimum = i\n    return minimum\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list_of_items):\n    min_val = list_of_items[0]\n    for item in list_of_items:\n        if item < min_val:\n            min_val = item\n    return min_val\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val\n", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(list):\n    min_val = list[0]\n    for num in list:\n        if num < min_val:\n            min_val = num\n    return min_val", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list_):\n    if len(list_) > 0:\n        return min(list_)\n    else:\n        return None", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(list):\n    min_val = list[0]\n    for val in list:\n        if val < min_val:\n            min_val = val\n    return min_val\n\n# test cases", "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n#def min_val(list):\n#    i = 0\n#    j = 1\n#    min_val = list[0]\n#    while i<len(list):\n#        if list[i]<min_val:\n#            min_val = list[i]\n#        i += 1\n#    while j<len(list):\n#        if list[j]<min_val:\n#            min_val = list[j]\n#        j += 1\n#    return min_val\n\ndef min_val(list):\n    # your code goes here\n    if len(list) == 0:\n        return None\n    \n    min_val = list[0]\n    for i in range(1, len(list)):\n        if list[i] < min_val:\n            min_val = list[i]\n    \n    return min_val\n\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(text):\n    #define regex\n    snake_case = re.compile('(_\\w)|(\\w)')\n    \n    #find all matches\n    matches = snake_case.finditer(text)\n    \n    #convert to camel case\n    camel_case = \"\".join([m.group(0) if m.group(1) else m.group(2).upper() for m in matches])\n    return camel_case\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\n#using re.sub\ndef snake_to_camel(s):\n    return re.sub('_([a-z])', lambda x: x.group(1).upper(), s)\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join(re.findall('([a-z])([A-Z])', s, re.I))\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join(re.findall('([A-Z][a-z]+)', s))\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join([c.title() for c in s])\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join([c.title() if i == 0 else c.upper() for i, c in enumerate(s.split(\"_\"))])\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join([c.title() if i == 0 else c.upper() for i, c in enumerate(s.split(\"_\"))])\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join([c.title() if i == 0 else c.upper() for i, c in enumerate(s.split(\"_\"))])\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join([c.title() if i == 0 else c.upper() for i, c in enumerate(s.split(\"_\"))])\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join([c.title() if i == 0 else c.upper() for i, c in enumerate(s.split(\"_\"))])\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join([c.title() if i == 0 else c.upper() for i, c in enumerate(s.split(\"_\"))])\n\n#using re.sub\ndef snake_to_camel(s):\n    return ''.join([c.title", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\n\ndef snake_to_camel(snake_string):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), snake_string)\n\n\n# Test Cases", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(str):\n    match = re.findall(r\"[_a-zA-Z]+\", str)\n    camel = \"\".join(word.title() for word in match)\n    return camel\n\n# code below this line is not used in this exercise\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\ndef snake_to_camel(s):\n    # your code here\n    s = s.lower().split('_')\n    s = \"\".join(s)\n    s = s[0].capitalize() + s[1:]\n    return s\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(snake_case_string):\n    snake_case_string = snake_case_string.replace('_', ' ')\n    result = re.sub('([a-z0-9])([A-Z])', r'\\1\\2', snake_case_string)\n    return result[0].upper() + result[1:]\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(s):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', s)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).title()\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nfrom typing import Text\n\n\ndef snake_to_camel(snake: Text) -> Text:\n    \"\"\"Return the given snake case string converted to camel case string.\"\"\"\n    snake_split = snake.split(\"_\")\n    if snake_split[0] == \"a\":\n        return snake_split[0] + \"\".join(map(str.capitalize, snake_split[1:]))\n    return \"\".join(map(str.capitalize, snake_split))", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nfrom typing import List\n\nimport re\n\n\ndef snake_to_camel(snake_case_str: str) -> str:\n    \"\"\"\n    Convert the given snake case string to camel case string by using regex.\n\n    >>> snake_to_camel('android_tv') == 'AndroidTv'\n    True\n    >>> snake_to_camel('android_tv_box') == 'AndroidTvBox'\n    True\n    >>> snake_to_camel('android_tv_box_four') == 'AndroidTvBoxFour'\n    True\n    \"\"\"\n    return re.sub(r\"([a-z])([A-Z])\", r\"\\1\\2\", snake_case_str).title()\n\n\ndef snake_to_camel_list(snake_case_str_list: List[str]) -> List[str]:\n    \"\"\"\n    Convert the given snake case string to camel case string by using regex.\n\n    >>> snake_to_camel_list(['android_tv', 'android_tv_box']) == ['AndroidTv', 'AndroidTvBox']\n    True\n    \"\"\"\n    return list(map(snake_to_camel, snake_case_str_list))\n\n", "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(s: str) -> str:\n    return ''.join(x.capitalize() for x in s.split('_'))\n\n# Tests"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2 != 0:\n            nums.pop(i)\n            i = i - 1\n    return nums\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n  new_lst = []\n  for i in lst:\n    if i % 2 == 0:\n      new_lst.append(i)\n  return new_lst\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(list):\n  return [num for num in list if num % 2 == 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(list):\n    # Complete the function\n    odds = []\n    for num in list:\n        if num % 2 == 0:\n            odds.append(num)\n    return odds\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [i for i in lst if i % 2 != 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n# main code\ndef remove_odd(n):\n    return [n for n in n if n % 2 != 0]", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    \"\"\"\n    >>> remove_odd([1,2,3,4,5])\n    [2, 4]\n    \"\"\"\n    return [n for n in lst if n % 2 == 0]\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(list):\n    new_list = []\n    for item in list:\n        if item%2 != 0:\n            new_list.append(item)\n    return new_list\n", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(numbers):\n    return [i for i in numbers if i%2 != 0]", "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n# Solution\ndef remove_odd(lst):\n    new_lst = []\n    for item in lst:\n        if item % 2 == 0:\n            new_lst.append(item)\n    return new_lst\n\n# Test"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(l, n):\n    # TODO: Write your code here\n    nth=[]\n    for i in range(len(l)):\n        nth.append(l[i][n])\n    return nth\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list_of_tuples, n):\n  if n < 0:\n    raise Exception('N must be >= 0')\n  return list_of_tuples[n]\n\n\ndef test_extract_nth_element():\n  l = [\n    (1, 2, 3),\n    ('a', 'b', 'c'),\n    ('x', 'y', 'z'),\n    ('q', 'w', 'e'),\n  ]\n  for n in range(3):\n    assert extract_nth_element(l, n) == l[n]\n  for n in range(-3, 0):\n    try:\n      extract_nth_element(l, n)\n      assert False\n    except Exception as e:\n      assert str(e) == 'N must be >= 0'\n\n\n# **Exercise 11:** \n#\n# Write a function that takes a list of positive integers and returns an integer \n# representing their sum. For example, sum_list([1, 2, 3, 4, 5]) returns 15.", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list_of_tuples,nth_element):\n    if nth_element > len(list_of_tuples)-1:\n        return False\n    else:\n        return list_of_tuples[nth_element][0]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(tuples, n):\n    result = []\n    for i in range(len(tuples)):\n        result.append(tuples[i][n])\n    return result", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return [x[n] for x in lst]\n\n# extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n# ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\n# assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n# assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n# assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,3)==['Greyson", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\n#def extract_nth_element(seq, n):\n#    return [x[n] for x in seq]\ndef extract_nth_element(seq, n):\n    if n >= len(seq):\n        raise IndexError(\"Invalid index\")\n    elif n < 0:\n        raise IndexError(\"Invalid index\")\n    return [e[n] for e in seq]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(l, n):\n    return [i[n] for i in l]\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(x, n):\n    return x[n][0]\n\n", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(input, n):\n    # Your code here\n    i = 0\n    extracted_elements = []\n    while i < len(input):\n        extracted_elements.append(input[i])\n        i += 1\n        if i == n:\n            break\n    return extracted_elements", "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list_of_tuples, n):\n    if n == 0:\n        return list_of_tuples\n    elif n > 0:\n        return list(extract_nth_element(list_of_tuples[1:], n-1))\n    else:\n        return list()\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1, list2):\n  if (list1[0] <= list2[0] <= list1[-1]):\n    if (list2[1] <= list1[-1] <= list2[-1]):\n      return True\n    else:\n      return False\n  else:\n    if (list2[-1] <= list1[0] <= list2[1]):\n      return True\n    else:\n      return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(a,b):\n    return len(a) >= len(set(a+b))", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list_a,list_b):\n    return set(list_a) & set(list_b)\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n# %%\ndef overlapping(sequence1,sequence2):\n    for i in range(len(sequence1)):\n        for j in range(len(sequence2)):\n            if sequence1[i]==sequence2[j]:\n                return True\n    return False\n\n# %%\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(a,b):\n\tfor i in a:\n\t\tif i in b:\n\t\t\treturn True\n\treturn False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(num_list_1, num_list_2):\n    count = 0\n    for num in num_list_1:\n        for num2 in num_list_2:\n            if num == num2:\n                count += 1\n    if count == 0:\n        return False\n    else:\n        return True\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(l1, l2):\n    return set(l1).intersection(set(l2)) != set()\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(sequence1, sequence2):\n    if not sequence1 or not sequence2:\n        return False\n    else:\n        for x in sequence1:\n            if x in sequence2:\n                return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1, list2):\n  if (list1 in list2 or list2 in list1):\n    return True\n  else:\n    return False\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(numbers):\n    import itertools as it\n    max_product = 0\n    for i in it.combinations(numbers,2):\n        product = i[0]*i[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\ndef max_Product_2(numbers):\n    return max(map(lambda i: i[0]*i[1], it.combinations(numbers,2)))\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_product(arr):\n    max_product = float('-inf')\n    max_index = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] != 0 and arr[j] != 0:\n                if arr[i] * arr[j] > max_product:\n                    max_product = arr[i] * arr[j]\n                    max_index = (i,j)\n    return (max_product, max_index)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max_prod = 0\n    max_ind = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            prod = arr[i]*arr[j]\n            if(prod > max_prod):\n                max_prod = prod\n                max_ind = (i,j)\n    return arr[max_ind[0]],arr[max_ind[1]]\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max_val = -1\n    max_idx = -1\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if (arr[i] * arr[j]) > max_val:\n                max_val = arr[i] * arr[j]\n                max_idx = (i,j)\n    return max_idx\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max_ = 0\n    max_prod = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > max_:\n                max_ = prod\n                max_prod = (arr[i], arr[j])\n    return max_prod\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(ints):\n    p = -1000000000\n    for i in ints:\n        if i > 0:\n            p = max(p, i)\n        elif i < 0:\n            p = max(p, -i)\n    return (p, p)\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    if len(arr) == 0:\n        return 0,0\n    max_1, max_2 = -1*float('inf'), -1*float('inf')\n    for i in range(len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n        elif arr[i] < max_2:\n            max_1, max_2 = max_2, arr[i]\n    return max_1, max_2\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_prod = 0\n    max_i = 0\n    max_j = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if max_prod < arr[i] * arr[j]:\n                max_prod = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n    return (max_i,max_j)\n\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    return max(zip(arr,arr[1:]))[1]*max(zip(arr,arr[1:]))[0]\n\ndef max_Product_2(arr):\n    max_prod = 0\n    max_idx = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            curr_prod = 1\n            for j in range(i):\n                curr_prod = curr_prod * arr[j]\n            if curr_prod > max_prod:\n                max_prod = curr_prod\n                max_idx = i\n    return max_prod, max_idx\n", "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(input_arr):\n    if len(input_arr) < 2:\n        return None\n    max_product = None\n    max_idx = None\n    for i in range(len(input_arr)-1):\n        for j in range(i+1,len(input_arr)):\n            temp = input_arr[i]*input_arr[j]\n            if max_product is None or temp > max_product:\n                max_product = temp\n                max_idx = (i,j)\n    return max_idx\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(number):\n    left_number = breakSumRec(number, 0)\n    right_number = number - left_number\n    return left_number + right_number\n\ndef breakSumRec(number, currentSum):\n    if number == 0:\n        return currentSum\n\n    if currentSum + number > breakSumRec(number-1, currentSum):\n        return breakSumRec(number-1, currentSum + number)\n    else:\n        return breakSumRec(number-1, currentSum)\n\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n, s=0):\n    if n == 0:\n        return s\n    elif n <= 0:\n        return breakSum(n+1, s)\n    else:\n        if n%3 == 0:\n            return max(breakSum(n/3, s+n/3), breakSum(n/3, s))\n        elif n%3 == 1:\n            return max(breakSum(n/3, s+n/3), breakSum(n/3+1, s))\n        else:\n            return max(breakSum(n/3, s+n/3), breakSum(n/3, s+n%3))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(number):\n    if number <= 0:\n        return 0\n    if number % 3 == 0:\n        return 3 * breakSum(number // 3)\n    return max(breakSum(number // 3) + number % 3, breakSum(number // 3))\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n\tif n < 3:\n\t\treturn n\n\telse:\n\t\treturn max(breakSum(n-3), breakSum(n-2), breakSum(n-1)) + n\n\t", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(number):\n    result = 0\n    if len(str(number)) > 1:\n        first, second, third = breakSum(int(str(number)[0])), breakSum(int(str(number)[1:3])), breakSum(int(str(number)[-2:]))\n        result = first + second + third\n    else:\n        result = int(number)\n    return result\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    if num < 0:\n        return 0\n    elif num == 0 or num == 1:\n        return num\n    elif num == 2:\n        return 2\n    else:\n        return max(num-breakSum(num/3), breakSum(num/2), breakSum((2*num)/3))", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    \"\"\"\n    We'll break the number into 3 parts.\n    The part that's the largest and the smallest summed together will be the maximum\n    We'll then break the remaining part into 3 parts and sum the maximum of these 3 parts and the previous maximum together.\n    We'll repeat this process until we reach 3 parts.\n    \"\"\"\n    if len(str(num)) == 1:\n        return int(str(num))\n    else:\n        # Split up the number into 3 parts.\n        left = num // 100\n        right = num % 100\n        # Get the sum of the largest and smallest numbers from the 3 parts.\n        maxLeft = breakSum(left)\n        minRight = breakSum(right)\n        # Get the maximum of the 3 parts.\n        maxRight = max(minRight, maxLeft)\n        # Get the sum of the maximum of the 3 parts and the previous maximum.\n        return maxRight + breakSum(num - maxRight)\n\n\n# What about a number with 4 digits?", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    if num <= 0:\n        return 0\n    return max(breakSum(num-1), breakSum(num-2), breakSum(num-3)) + num\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num < 10:\n        return num\n    \n    print(num)\n    return max(breakSum(num//3) + num%3, breakSum(num//2) + num%2, breakSum(num//3) + num%3)\n", "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(number):\n    if number == 0:\n        return 0\n    if number % 3 == 0:\n        return 3 + breakSum(number // 3)\n    return 1 + breakSum(number // 3) + breakSum(number - (number // 3))\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    first_element = None\n    new_tuples = []\n    for tuple in tuples:\n        if first_element == None:\n            first_element = tuple\n        elif first_element[0] == tuple[0]:\n            new_tuples.append(tuple)\n        else:\n            new_tuples.append(first_element)\n            first_element = tuple\n    new_tuples.append(first_element)\n    return new_tuples\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(lst):\n    \"\"\"\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n    \"\"\"\n    return list(set([tuple(a) for a in lst]))\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    dicts = {}\n    for a in tuples:\n        if a[0] in dicts:\n            dicts[a[0]].append(a)\n        else:\n            dicts[a[0]] = [a]\n    ret = []\n    for key, value in dicts.items():\n        ret.extend(value)\n    return ret\n\n\ndef test_group_tuples():\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert group_tuples([('x', 'y'), ('w', 't'), ('x', 'z')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert group_tuples([('x', 'y'), ('w', 't'), ('w', 't')]) == [('x', 'y'), ('w', 't', 't')]", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    if len(tuples) < 2:\n        return tuples\n    ret = []\n    for tup in tuples:\n        name = tup[0]\n        for item in ret:\n            if item[0] == name:\n                item.append(tup[1])\n                break\n        else:\n            ret.append([name, tup[1]])\n    return ret\n\n\ndef test():\n    print(group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]))\n    print(group_tuples([('x', 'y', 'z'), ('w', 't')]))\n    print(group_tuples([('x', 'y'), ('x', 'y', 'z'), ('w', 't')]))\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuple_list):\n    return list(zip(*tuple_list))\n\n# assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    if len(tuples) == 0:\n        return []\n    x = tuples[0]\n    if len(tuples) == 1:\n        return [x]\n    for y in tuples[1:]:\n        if x[0] == y[0]:\n            return x[0], (x[1], y[1])\n    return x[0]\n\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    first_element = tuples[0]\n    common_elements = []\n    for tup in tuples:\n        if first_element == tup:\n            common_elements.append(tup)\n    return common_elements\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i][0] == lst[j][0]:\n                result.append(lst[i][0])\n    return result\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(l):\n    if l == []:\n        return []\n    c = l[0]\n    rest = l[1:]\n    res = [c]\n    for r in rest:\n        if r[0] == c[0]:\n            res.append(r)\n        else:\n            return res\n    return res\n", "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    return tuple(tuple(x) for x in zip(*tuples))\n\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    pass\n\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n#my_function = lambda x: x[0]\n\n\ndef Find_Max(sublist):\n    max_len = len(sublist[0])\n    max_sublist = sublist[0]\n    for sublist in sublist:\n        if len(sublist) > max_len:\n            max_sublist = sublist\n            max_len = len(max_sublist)\n    return max_sublist\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(arr):\n    if len(arr) == 0:\n        return None\n    max_len = len(arr[0])\n    max_val = arr[0]\n    \n    for i in range(1, len(arr)):\n        if len(arr[i]) > max_len:\n            max_len = len(arr[i])\n            max_val = arr[i]\n    return max_val\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(input_list):\n    max_list = []\n    for i in input_list:\n        if len(max_list) == 0 or len(i) > len(max_list):\n            max_list = i\n    return max_list\n\n# Using the above function", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lists):\n    res = []\n    for li in lists:\n        if len(li) > len(res):\n            res = li\n    return res", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lists):\n    lengths = []\n    for i in lists:\n        lengths.append(len(i))\n    index = lengths.index(max(lengths))\n    return lists[index]\n\n#assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# Method 1: Kadane's Algorithm\n\n\ndef Find_Max(lis):\n    max_len = 0\n    max_idx = 0\n    for i in range(len(lis)):\n        if max_len < len(lis[i]):\n            max_len = len(lis[i])\n            max_idx = i\n    return lis[max_idx]\n\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# +\nfrom collections import defaultdict\ndef Find_Max(Sublist_list):\n    Sublist_dict = defaultdict(int)\n    for sublist in Sublist_list:\n        Sublist_dict[sublist] += 1\n    return max(Sublist_dict, key=Sublist_dict.get)\n    \n#print(Find_Max([['A'],['A','B'],['A','B','C']]))\n# -\n", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(arr):\n    if len(arr)==0:\n        return None\n    \n    max_len = len(arr[0])\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if j>max_len:\n                break\n            if arr[i][j] != 'A':\n                max_len = j+1\n                max_num = i\n    \n    return arr[max_num][:max_len]\n\narr = [['A'],['A','B'],['A','B','C']]", "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(l):\n    smax = \"\"\n    for item in l:\n        if len(item) > len(smax):\n            smax = item\n    return smax\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(nums):\n    return sum([round(num) for num in nums]) * len(nums)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(arr):\n    rounded_arr = [round(x) for x in arr]\n    return sum(rounded_arr)*len(arr)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(l):\n    return round(sum(l)), len(l)\n\ndef round_and_sum(l):\n    x = 0\n    for i in l:\n        x+= round(i)\n    return x, len(l)\n\n# --------------------------------------------------\ndef main():\n    \"\"\" Make a jazz noise here \"\"\"\n    args = get_args()\n    print(args)\n\n    if args.filename:\n        print(args.filename)\n        try:\n            num_list = [float(line.rstrip()) for line in open(args.filename)]\n        except ValueError:\n            print('Input file is not a list of numbers')\n            sys.exit(1)\n        if args.first:\n            print(round_and_sum(num_list)[0])\n        else:\n            print(round_and_sum(num_list))\n    else:\n        print(args)\n        try:\n            num_list = [float(line) for line in sys.stdin]\n        except ValueError:\n            print('Input is not a list of numbers')\n            sys.exit(1)\n        if args.first:\n            print(round_and_sum(num_list)[0])\n        else:\n            print(round_and_sum(num_list))\n\n# --------------------------------------------------", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(number_list):\n    rounded_number_list = []\n    for number in number_list:\n        rounded_number = round(number)\n        rounded_number_list.append(rounded_number)\n    sum_list = []\n    for number in rounded_number_list:\n        sum_list.append(number)\n    sum_of_list = sum(sum_list)\n    length_list = len(sum_list)\n    total_sum_multiplied = sum_of_list * length_list\n    return total_sum_multiplied", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    total_sum = 0\n    for i in numbers:\n        total_sum += i\n    return (total_sum * len(numbers))\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(num_list):\n    return sum(round(num, 1) for num in num_list) * len(num_list)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n# solution\ndef round_and_sum(numbers):\n    return sum(round(num) for num in numbers) * len(numbers)\n\n# other solution\ndef round_and_sum(numbers):\n    return sum(round(num) for num in numbers) * len(numbers)\n\n# test", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    sum = 0\n    for num in numbers:\n        sum += round(num)\n    return sum * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    total_sum = 0\n    for i in numbers:\n        total_sum = total_sum + round(i)\n    return total_sum * len(numbers)\n", "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    return sum([round(x, 2) for x in numbers]) * len(numbers)\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    result = 0\n    for i in range(0, n, 2):\n        result += (i ** 3)\n    return result\n\ndef main():\n    assert cube_Sum(2) == 72\n    print(\"Success: cub_sum_of_even_number\")\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    # Write your code here\n    sum=0\n    for i in range(0,n):\n        if(i%2==0):\n            sum = sum + i**3\n    return sum", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n  # write your code here\n  return sum([x**3 for x in range(2*n,2*n+2)])\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    total_sum = 0\n    for num in range(0,n,2):\n        total_sum += num**3\n    return total_sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    return sum(x**3 for x in range(0,n,2))", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n*n*cube_Sum(n-1) + cube_Sum(n-1)\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**3\n    return sum", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_sum(n):\n\tsum = 0\n\tfor i in range(2,n,2):\n\t\tsum += i**3\n\treturn sum\n\n#print(cube_sum(2))\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(0,n,2):\n        sum += (i**3)\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(0,n,2):\n        sum += (i**3)\n    return sum\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(elements):\n    return '-'.join(elements)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_to_be_concatenated):\n    #Your code goes here\n    concatenated_string = \"\"\n    for i in tuple_to_be_concatenated:\n        concatenated_string = concatenated_string + str(i) + \"-\"\n    return concatenated_string\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tup,delimiter=\"-\"):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter\n    \"\"\"\n    # loop over each element of tuple and add to a string\n    concat = \"\"\n    for i in tup:\n        concat += str(i) + delimiter\n    return concat[:-1]\n\n#Driver code", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple_to_join, delimiter):\n    concatenated_str = \"\"\n    for i in tuple_to_join:\n        concatenated_str += delimiter + str(i)\n    return concatenated_str\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple, delimiter=\"-\"):\n    \"\"\"\n    >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n    'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(str(x) for x in tuple)\n\n\n# -\n\n# **Solution**\n#\n# - First we create a function `concatenate_tuple()`\n# - Then we run the test suite for it\n\n# !python3 -m pytest test_code_challenge_06.py\n\n# ## 7. Write a function to check if a string is a substring of another string.\n#\n# Input strings will not be null\n#\n# ```\n# assert is_substring(\"123\", \"123\")\n# assert not is_substring(\"456\", \"123\")\n# ```\n#\n# **Solution**\n#\n# - First we create a function `is_substring()`\n# - Then we run the test suite for it\n\n# !python3 -m pytest test_code_challenge_07.py\n\n# ## 8. Write a function that returns the left part of the string (all characters except for the last)\n#\n# Input strings will not be null\n#\n# ```\n# assert left_part(\"abc\") == \"abc\"\n# assert left_part(\"abc123\") == \"abc\"\n# ```\n#\n# **Solution**\n#\n# - First we create a function `left_part()`\n# - Then we run the test suite for it\n\n# !python3 -m pytest test_code_challenge_08.py\n\n# ## 9. Write a function that returns the right part of the string (all characters except for the first)\n#\n# Input strings will not be null\n#\n# ```\n# assert right_part(\"abc\") == \"abc\"\n# assert right_part(\"123abc\") == \"123abc\"\n# ```\n#\n# **Solution**\n#\n# - First we create a function `right_part()`\n#", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple):\n    # Start with an empty string\n    output = ''\n    # Iterate through tuple\n    for i in tuple:\n        # Check if the element is string\n        if isinstance(i, str):\n            # Concatenate to output\n            output = output + '-' + i\n        # If it is integer, just concatenate\n        else:\n            output = output + '-' + str(i)\n    # Return output\n    return output\n\n#Test", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple, delimiter='-'):\n    return delimiter.join(tuple)\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(t):\n    res=\"\"\n    for i in t:\n        res += str(i) + \"-\"\n    return res[:-1]\n", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple, delimiter):\n    final_string = \"\"\n    for i in tuple:\n        final_string += i + delimiter\n    return final_string[:-len(delimiter)]", "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tuple, delimiter=\"\"):\n    res = \"\"\n    for i in tuple:\n        res = res+i+delimiter\n    return res[:-len(delimiter)]\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\nimport unittest\ndef find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    return sum([i**3 for i in range(n)])/n\n\ndef test_find_Average_Of_Cube():\n    assert find_Average_Of_Cube(2) == 4.5\n    assert find_Average_Of_Cube(3) == 8.0\n\ndef test_find_Average_Of_Cube_negative():\n    assert find_Average_Of_Cube(0) == 0\n\n#write a python function to remove the duplicates from a list of numbers", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    return (1/n * sum(k**3 for k in range(1, n+1)))\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    ans = 0\n    for i in range(1,n+1):\n        ans = ans + (i**3)\n    return ans/n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    :param n: number of numbers to be passed\n    :return: average of cube of first n numbers\n    \"\"\"\n    return sum([x ** 3 for x in range(1, n + 1)]) / n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i ** 3)\n    return sum / n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum/n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    '''\n    function to find the average of first n cubes\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    average = sum/n\n    return average\n\ndef main():\n    '''\n    main function \n    '''\n    print(find_Average_Of_Cube(5))", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n#a = 0\n#for i in range(1, 10):\n#    a += i ** 3\n#\n#print(a/9)\n\n\ndef find_Average_Of_Cube(n):\n    a = 0\n    for i in range(1, n + 1):\n        a += i ** 3\n    return a / n\n\n", "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    total = 0\n    for i in range(0,n+1):\n        total += (i**3)\n    return total/n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(goldmine,x,y):\n    if x == 0 or y == 0:\n        return goldmine[x][y]\n    if goldmine[x-1][y] > goldmine[x][y]:\n        return goldmine[x-1][y] + get_maxgold(goldmine,x-1,y)\n    else:\n        return goldmine[x][y-1] + get_maxgold(goldmine,x,y-1)\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\n#Brute force\ndef get_maxgold(mine_field, mine_num, row_num):\n    if mine_num==0:\n        return sum(mine_field[i][j] for i in range(row_num) for j in range(row_num))\n    if mine_num<1:\n        return 0\n    else:\n        ret_list=[]\n        for i in range(mine_num):\n            for j in range(mine_num):\n                if mine_field[i][j]==0:\n                    mine_field[i][j]=1\n                else:\n                    mine_field[i][j]=0\n                ret_list.append(get_maxgold(mine_field, mine_num-1, row_num))\n                mine_field[i][j]=0\n        return max(ret_list)\n\ndef get_maxgold_with_dp(mine_field, mine_num, row_num):\n    dp = [[0 for _ in range(row_num)] for _ in range(row_num)]\n    for i in range(row_num):\n        dp[i][0] = mine_field[i][0]\n    for j in range(row_num):\n        dp[0][j] = mine_field[0][j]\n    for i in range(1, row_num):\n        for j in range(1, row_num):\n            if mine_field[i][j]==0:\n                dp[i][j]=dp[i-1][j]+dp[i][j-1]\n            else:\n                dp[i][j]=0\n    return dp[row_num-1][row_num-1]", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(row,n,m):\n    dp=[[-1 for i in range(m)] for i in range(n)]\n    dp[0][0]=row[0][0]\n    for i in range(1,n):\n        dp[i][0]=dp[i-1][0]+row[i][0]\n    for j in range(1,m):\n        dp[0][j]=dp[0][j-1]+row[0][j]\n    for i in range(1,n):\n        for j in range(1,m):\n            dp[i][j]=max(dp[i][j-1],dp[i-1][j])\n            dp[i][j]+=row[i][j]\n    return dp[n-1][m-1]\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid,row,col):\n    if row==0:\n        return sum(grid[row][col])\n    row_val=0\n    while row_val<row:\n        col_val=0\n        while col_val<col:\n            if grid[row-row_val][col-col_val]==0:\n                break\n            col_val+=1\n        row_val+=1\n    return sum(grid[row-row_val][col-col_val])\n\ndef main():\n    n=int(input())\n    grid=[]\n    for i in range(n):\n        row=list(map(int,input().split()))\n        grid.append(row)\n    r=int(input())\n    c=int(input())\n    print(get_maxgold(grid,r,c))\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(grid, n, m):\n    ret = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                ret = max(ret, get_gold(grid, n, m, i, j))\n    return ret\n\ndef get_gold(grid, n, m, i, j):\n    gold = grid[i][j]\n    grid[i][j] = -1\n    res = 0\n    for x, y in ((0, 1), (0, -1), (1, 0), (-1, 0)):\n        x1, y1 = i+x, j+y\n        if x1 < 0 or y1 < 0 or x1 >= n or y1 >= m or grid[x1][y1] == 1:\n            continue\n        res += grid[x1][y1]\n        grid[x1][y1] = -1\n    grid[i][j] = gold\n    return res\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(mine, rows, cols):\n    maxgold = 0\n    for row in xrange(rows):\n        for col in xrange(cols):\n            if mine[row][col]==1:\n                maxgold = max(maxgold, get_gold(mine, row, col))\n    return maxgold\n\ndef get_gold(mine, row, col):\n    gold = 1\n    if row < rows - 1 and mine[row+1][col]==1:\n        gold += get_gold(mine, row+1, col)\n    if row > 0 and mine[row-1][col]==1:\n        gold += get_gold(mine, row-1, col)\n    if col < cols - 1 and mine[row][col+1]==1:\n        gold += get_gold(mine, row, col+1)\n    if col > 0 and mine[row][col-1]==1:\n        gold += get_gold(mine, row, col-1)\n    return gold\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(mine_row,rows,columns):\n    #row = len(mine_row)\n    #column = len(mine_row[0])\n    max_gold = 0\n    for i in range(rows):\n        for j in range(columns):\n            if mine_row[i][j] == 0:\n                continue\n            mine_neighbours = get_neighbours(mine_row,i,j,rows,columns)\n            #print(mine_neighbours)\n            if mine_neighbours == 0:\n                max_gold += mine_row[i][j]\n            else:\n                for neighbour in mine_neighbours:\n                    #print(neighbour)\n                    if mine_row[neighbour[0]][neighbour[1]] == 0:\n                        continue\n                    #print(neighbour)\n                    mine_neighbours_neighbours = get_neighbours(mine_row,neighbour[0],neighbour[1],rows,columns)\n                    #print(mine_neighbours_neighbours)\n                    if mine_neighbours_neighbours == 0:\n                        max_gold += mine_row[neighbour[0]][neighbour[1]]\n\n    return max_gold\n\ndef get_neighbours(mine_row,row_index,col_index,rows,columns):\n    neighbour_list = []\n    if row_index - 1 >= 0:\n        neighbour_list.append((row_index - 1, col_index))\n    if row_index + 1 < rows:\n        neighbour_list.append((row_index + 1, col_index))\n    if col_index - 1 >= 0:\n        neighbour_list.append((row_index, col_index - 1))\n    if col_index + 1 < columns:\n        neighbour_list.append((row_index, col_index + 1))\n    return neighbour_list\n\n#print(get_neighbours([1,2,3,4,5,6],0,0,3,3", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(matrix,m,n):\n    gold=0\n    for i in range(m):\n        for j in range(n):\n            gold+=matrix[i][j]\n            gold=min(gold,0)\n    return gold\n", "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nfrom collections import defaultdict\n\ndef get_maxgold(matrix,m,n):\n    d = defaultdict(list)\n    for i in range(m):\n        for j in range(n):\n            d[matrix[i][j]].append((i,j))\n    print(d)\n    if (m==1 or n==1):\n        return matrix[0][0]\n    ans = 0\n    for key, value in d.items():\n        if (len(value)==0):\n            continue\n        i, j = value[0]\n        ans += key\n        d[key].remove((i,j))\n        if (len(d)==0):\n            return ans\n        #print(d)\n        max_val = get_maxgold(matrix, m - i - 1, n - j - 1)\n        ans += max_val\n    return ans\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\nimport pytest\n\n\ndef extract_rear(string_tuple):\n    new_tuple = []\n    for string in string_tuple:\n        if string[0] == 'r':\n            new_tuple.append(string[1])\n\n    return new_tuple\n\n\ndef test_extract_rear():\n    assert extract_rear((\"Mers\", \"for\", \"Vers\") ) == ['s', 'r', 's']\n    assert extract_rear((\"Mers\", \"for\", \"Vers\", \"Mers\") ) == ['s', 'r', 's']\n    assert extract_rear((\"Mers\", \"for\", \"Vers\", \"Mers\", \"Mers\") ) == ['s', 'r', 's', 's']\n    assert extract_rear((\"Mers\", \"for\", \"Vers\", \"Mers\", \"Mers\", \"Mers\") ) == ['s', 'r', 's', 's', 's']", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tup):\n    return [tup[i][-1] for i in range(len(tup))]\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(strings):\n    return [s[-1] for s in strings]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(s):\n    return [s[-1] for s in s]\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\n#Solution\ndef extract_rear(tup):\n    return [tup[-1]]\n\n#Example Test", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(input_tuple):\n    return [i[-1] for i in input_tuple]\n\n# if __name__ == '__main__':\n#     print(\"Pass\" if extract_rear((\"Mers\", \"for\", \"Vers\")) == ['s', 'r', 's'] else \"Fail\")\n#     print(\"Pass\" if extract_rear((\"Mers\", \"for\", \"Vers\", \"Fic\")) == ['s', 'r', 's', 'f'] else \"Fail\")\n#     print(\"Pass\" if extract_rear((\"Mers\", \"for\", \"Vers\", \"Fic\", \"Dip\")) == ['s', 'r', 's', 'f', 'p'] else \"Fail\")\n#     print(\"Pass\" if extract_rear((\"Mers\", \"for\", \"Vers\", \"Fic\", \"Dip\", \"Shig\")) == ['s', 'r', 's', 'f', 'p', 'g'] else \"Fail\")\n#     print(\"Pass\" if extract_rear((\"Mers\", \"for\", \"Vers\", \"Fic\", \"Dip\", \"Shig\", \"Tek\")) == ['s', 'r', 's', 'f', 'p', 'g', 'k'] else \"Fail\")\n#     print(\"Pass\" if extract_rear((\"Mers\", \"for\", \"Vers\", \"Fic\", \"Dip\", \"Shig\", \"Tek\", \"Yil\")) == ['s', 'r', 's', 'f', 'p', 'g', 'k', 'l'] else \"Fail\")\n#     print(\"Pass\" if extract_rear((\"Mers\", \"for\", \"Vers\", \"Fic\", \"Dip\", \"Shig\", \"Tek\", \"Yil\", \"Maj\")) == ['s', 'r', 's', 'f', 'p', 'g', 'k', 'l', 'm'] else \"Fail\")\n#     print(\"Pass\" if extract_rear((\"Mers\", \"for\", \"Vers\", \"Fic\", \"Dip\", \"Shig\", \"Tek\", \"Yil\", \"", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(mytuple):\n    return tuple(reversed([i[-1] for i in mytuple]))\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple):\n    # your code goes here\n    rear = []\n    for index in range(len(tuple)):\n        rear.append(tuple[index][-1])\n    return rear\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\nfrom typing import Tuple\n\n\ndef extract_rear(tup: Tuple[str, ...]) -> Tuple[str, ...]:\n    return tuple(elem[-1] for elem in tup)\n\n", "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\nimport unittest\n\ndef extract_rear(tuple_input):\n    return [x[-1] for x in tuple_input]\n\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list_of_lists,element):\n    return [list_of_lists.count(element) for list_of_lists in list_of_lists]\n\ndef main():\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],3))\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],5))\n\nmain()\n# -\n\n# # 17\n#\n# Create a function that takes a list and a number as arguments and returns a list containing all the numbers in the list that are divisible by the number.\n#\n\n# +", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list_in, element):\n    return sum([1 for x in list_in if element in x])\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lists,element):\n    count = 0\n    for i in lists:\n        if element in i:\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(arr, num):\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr[i])):\n            if arr[i][j] == num:\n                count += 1\n    return count\n\n\n# + id=\"27d8cd86\"", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(l,e):\n    c = 0\n    for i in l:\n        if e in i:\n            c += 1\n    return c\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nfrom functools import reduce\n\n\ndef count_element_in_list(lst, element):\n    return list(map(lambda x: reduce(lambda y,z: y+z, [1 if x[i] == element else 0 for i in range(len(x))]), lst))", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(l, e):\n    count = 0\n    for sublist in l:\n        if e in sublist:\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(L, element):\n    count = 0\n    for l in L:\n        if element in l:\n            count += 1\n    return count\n", "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list_of_list, element):\n    return [list_of_list.count(element) for list_of_list in list_of_list]\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 == 1, numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2 !=0,numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2!=0, lst))\n\n# function to filter odd numbers\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x%2!=0, lst))\n\n# test case\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(data):\n    return list(filter(lambda x: x%2, data))", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x%2 == 1,nums))", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    # lambda x : x%2==0\n    return list(filter(lambda x : x%2==0, numbers))\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n\ndef test_filter_oddnumbers():\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\ndef test_filter_oddnumbers_fail():\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 11])==[1,3,5,7,9]\n\ntest_filter_oddnumbers()\ntest_filter_oddnumbers_fail()\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x:x % 2 == 1, numbers))", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(nums):\n    odd = []\n    for num in nums:\n        if num%2==1:\n            odd.append(num)\n    return odd\n", "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x % 2 != 0, lst))\n\n# assert"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\ndef change_date_format(date):\n    return re.sub(r'[-/]', r'-', date)", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n# Answer\nimport re\ndef change_date_format(date):\n    return re.sub(r'([0-9]{2})-([0-9]{2})-([0-9]{4})', r'\\3-\\2-\\1', date)\n\n# Tests", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date_format):\n    date = re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", date_format)\n    return date\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\n\ndef change_date_format(date):\n    # Make sure that the date is in the format \"yyyy-mm-dd\"\n    # and return the output if it is already in this format\n    if re.match(r'\\d{4}-\\d{2}-\\d{2}', date):\n        return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', date)\n    else:\n        raise ValueError(\"The date should be in the format yyyy-mm-dd\")\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\nfrom typing import Tuple\n\n\ndef change_date_format(date: str) -> str:\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', date)\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date):\n    new_date = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\2-\\1', date)\n    return new_date\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    return re.sub(pattern, r'\\2-\\1', date)\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\n# Change this regular expression to change the date format.\ndate_format_regex = r\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\n\n# TODO: Write your code here.\ndef change_date_format(date):\n    date = re.search(date_format_regex, date).groups()\n    formatted_date = \"{}-{}-{}\".format(date[2], date[1], date[0])\n    return formatted_date\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndate_pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n\n\ndef change_date_format(date_str):\n    res = re.findall(date_pattern, date_str)\n    assert len(res) == 1\n    year, month, day = res[0]\n    return f\"{day}-{month}-{year}\"\n\n", "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\n\ndef change_date_format(date):\n    date_list = re.split('-', date)\n    return '-'.join([date_list[2], date_list[1], date_list[0]])\n\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    #increment = len(arr) / 2\n    increment = len(arr) // 2\n    while increment > 0:\n        for i in range(increment, len(arr)):\n            j = i\n            while j >= increment and arr[j - increment] > arr[j]:\n                arr[j], arr[j - increment] = arr[j - increment], arr[j]\n                j -= increment\n        increment //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i - gap\n            while j >= 0 and temp < arr[j]:\n                arr[j + gap] = arr[j]\n                j -= gap\n            arr[j + gap] = temp\n        gap = gap // 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nfrom utils import *\n\n\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            j = i - gap\n            while j >= 0 and arr[j] > arr[j + gap]:\n                arr[j], arr[j + gap] = arr[j + gap], arr[j]\n                j -= gap\n        gap = gap // 2\n\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nimport random\ndef shell_sort(list):\n    gap = len(list)//2\n    while gap > 0:\n        for i in range(gap, len(list)):\n            temp = list[i]\n            j = i\n            while j >= gap and list[j - gap] > temp:\n                list[j] = list[j - gap]\n                j -= gap\n            list[j] = temp\n        gap = gap//2\n    return list\n\nlist = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    gaps = [7, 3, 1]\n    for gap in gaps:\n        for i in range(gap, len(arr)):\n            j = i\n            while j >= gap and arr[j] < arr[j - gap]:\n                arr[j], arr[j - gap] = arr[j - gap], arr[j]\n                j -= gap\n    return arr\n\n# def shell_sort(arr):\n#     gaps = [7, 3, 1]\n#     for gap in gaps:\n#         for i in range(gap, len(arr)):\n#             j = i\n#             while j >= gap and arr[j] < arr[j - gap]:\n#                 arr[j], arr[j - gap] = arr[j - gap], arr[j]\n#                 j -= gap\n#     return arr\n\n# assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(alist):\n    gap = len(alist)//2\n    while gap > 0:\n        for i in range(gap, len(alist)):\n            value = alist[i]\n            j = i - gap\n            while j >= 0 and alist[j] > value:\n                alist[j + gap] = alist[j]\n                j -= gap\n            alist[j + gap] = value\n        gap = (gap - 1) // 2\n    return alist\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    length = len(arr)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j-gap] > temp:\n                arr[j] = arr[j-gap]\n                j = j - gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\nimport random\n\ndef shell_sort(array):\n    length = len(array)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            j = i - gap\n            while j >= 0 and array[j] > array[j + gap]:\n                array[j], array[j + gap] = array[j + gap], array[j]\n        gap //= 2\n    return array\n", "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(A):\n    gap = len(A) // 2\n    while gap > 0:\n        for i in range(gap, len(A)):\n            temp = A[i]\n            j = i - gap\n            while j >= 0 and A[j] > temp:\n                A[j + gap] = A[j]\n                j -= gap\n            A[j + gap] = temp\n        gap //= 2\n    return A\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tuple1, tuple2):\n    return tuple(list(map(lambda x, y: x == y, tuple1, tuple2))), tuple(list(map(lambda x, y: x != y, tuple1, tuple2))), tuple(list(map(lambda x, y: x < y, tuple1, tuple2))), tuple(list(map(lambda x, y: x > y, tuple1, tuple2))), tuple(list(map(lambda x, y: x <= y, tuple1, tuple2))), tuple(list(map(lambda x, y: x >= y, tuple1, tuple2))), tuple(list(map(lambda x, y: x in y, tuple1, tuple2))), tuple(list(map(lambda x, y: x not in y, tuple1, tuple2))), tuple(list(map(lambda x, y: x is y, tuple1, tuple2))), tuple(list(map(lambda x, y: x is not y, tuple1, tuple2)))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\nfrom typing import Tuple\nfrom functools import reduce\n\ndef and_tuples(tup1: Tuple, tup2: Tuple) -> Tuple:\n    tup1 = map(lambda x: x[0] & x[1], zip(tup1, tup2))\n    tup2 = map(lambda x: x[0] & x[1], zip(tup1, tup2))\n    tup1 = map(lambda x: x[0] & x[1], zip(tup1, tup2))\n    return tup1\n\n\ndef test_and_tuples():\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(a, b):\n    return (a[0], a[1], a[2], b[3])\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    assert len(t1) == len(t2)\n    return (1 if a == b else 0) for a, b in zip(t1, t2)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    and_tup = []\n    for i, j in zip(t1, t2):\n        if i and j:\n            and_tup.append(i and j)\n        else:\n            and_tup.append(0)\n    return tuple(and_tup)\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tup1, tup2):\n    tup1 = tuple(tup1)\n    tup2 = tuple(tup2)\n    res = [tup1[i] and tup2[i] for i in range(len(tup1))]\n    return (sum(res), res)\n\n# 3. Write a function to replace all the strings in given list with the given string.", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(a, b):\n    assert len(a) == len(b)\n    return tuple(a[i] & b[i] for i in range(len(a)))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef and_tuples(\n    first_tuple: Tuple[int, ...],\n    second_tuple: Tuple[int, ...],\n) -> Tuple[int, ...]:\n    pass\n\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(a, b):\n    \"\"\"Takes in 2 tuples and returns a tuple with the elementwise and and tuple with the tuples in the first tuple.\n\n    Examples:\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    >>> and_tuples((10, 4, 6, 9), (10, 4, 6, 9)) == (10, 4, 6, 9)\n    >>> and_tuples((0, 1, 0), (0, 0, 0)) == (0, 0, 0, 1)\n    \"\"\"\n    return (sum(i == j for i, j in zip(a, b)), tuple(i == j for i, j in zip(a, b)))\n", "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n# Only using zip to combine tuples\ndef and_tuples(a, b):\n    return list(zip(a, b))[::2]\n\n# Using list comprehensions\ndef and_tuples2(a, b):\n    return [x for x, y in zip(a, b) if x == y]"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    if a==0:\n        return 'Not a parabola'\n    return (-c/b)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(m,b,c):\n    return (-b)/m\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    x = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    return x\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    return (-b - math.sqrt(b*b - 4*a*c))/(2*a)\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(x0,y0,b):\n\treturn -(y0-b)/2\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(h,k,c):\n    return (h+k+c)/2\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    \"\"\"\n    :param a: the coefficient of the main term\n    :param b: the coefficient of the linear term\n    :param c: the coefficient of the constant term\n    :return: the parabola directrix\n    \"\"\"\n    return -b/2/a\n\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\nimport math\n\ndef parabola_directrix(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return -b/(2*a)\n\ndef parabola_y_intercept(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return c/(2*a)\n\ndef parabola_x_intercept(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return b/(2*a)\n\ndef parabola_focus(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return -b/(2*a**2)\n\ndef parabola_focal_length(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return math.sqrt(b**2/4 - a*c)/a\n\ndef parabola_eccentricity(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return math.sqrt(1 - c/(b**2))\n\ndef parabola_vertex_coordinate(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return -b/(2*a)\n\ndef parabola_vertex_displacement(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return b/(2*a)\n\ndef parabola_vertex_focus(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return b/(2*a**2)\n\ndef parabola_vertex_focal_length(a,b,c):\n    # https://en.wikipedia.org/wiki/Parabola#General_equation\n    return math.sqrt(b**2/4 - a*c)", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\nfrom typing import NamedTuple, Tuple\n\n", "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    return (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n\n\n# -\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(lst1, lst2):\n    for item in lst1:\n        if item in lst2:\n            return True\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    common_items = set(list1).intersection(set(list2))\n    return len(common_items)>0\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(a,b):\n    #initialize a set to store values\n    set1 = set(a)\n    set2 = set(b)\n    if len(set1 & set2) != 0:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for list1_item in list1:\n        if list1_item in list2:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n  if list1 == [] or list2 == []:\n    return False\n  else:\n    return list1[0] in list2 or common_element(list1[1:], list2)\n\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(a,b):\n    if not a or not b:\n        return False\n    for item in a:\n        if item in b:\n            return True\n    return False\n", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(l1,l2):\n    return list(set(l1).intersection(l2))\n\ndef common_element(l1,l2):\n    return len(list(set(l1).intersection(l2)))>0\n\n# test case", "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(l1, l2):\n    for i in l1:\n        if i in l2:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c,d):\n    trapezium = a + b + c + d\n    trapezium = trapezium/4\n\n    #return the median of the trapezium\n    return trapezium\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c,d):\n    p = (a+b+c+d)/4\n    return p\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\nfrom functools import reduce\nfrom operator import add\ndef median_trapezium(a, b, c, d):\n    a = [a, b, c, d]\n    return reduce(add, a) // 4", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c,d):\n    if a>=b and a>=c and a>=d and b>=c and b>=d and c>=d:\n        return a\n    elif a<=b and a<=c and a<=d and b<=c and b<=d and c<=d:\n        return d\n    elif a>=b and a>=c and a<=d and b>=c and b<=d and c>=d:\n        return c\n    elif a<=b and a>=c and a>=d and b<=c and b>=d and c<=d:\n        return b\n    elif a<=b and a<=c and a>=d and b>=c and b<=d and c>=d:\n        return a\n    elif a<=b and a>=c and a<=d and b<=c and b>=d and c<=d:\n        return d\n    elif a>=b and a<=c and a>=d and b>=c and b<=d and c<=d:\n        return c\n    elif a<=b and a>=c and a<=d and b<=c and b>=d and c>=d:\n        return b\n    ", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n# function to find median of a trapezium\ndef median_trapezium(base, side1, side2):\n    # calculating the height of the trapezium\n    height = (side1+side2)/2\n    \n    # calculating the area of the trapezium\n    area = base*height\n    return round(area)\n\n# driver code", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    \"\"\"Finds the median of a trapezium\"\"\"\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    return (a + c) / 2\n\ndef main():\n    a = 15\n    b = 25\n    c = 35\n    print(median_trapezium(a,b,c))\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    if a>b:\n        m=a\n        a=b\n        b=m\n    if c>b:\n        m=c\n        c=b\n        b=m\n    if a+b>c:\n        m=a+b\n        a=b\n        b=m\n    if a+c>b:\n        m=a+c\n        a=c\n        c=m\n    if b+c>a:\n        m=b+c\n        b=c\n        c=m\n    return(a)", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\nfrom typing import List\n\ndef median_trapezium(a: int, b: int, c: int, d: int) -> int:\n    \"\"\"\n    >>> median_trapezium(15,25,35,10)\n    20\n    >>> median_trapezium(2,2,2,10)\n    5\n    >>> median_trapezium(2,2,2,2)\n    2\n    \"\"\"\n    arr = [a, b, c, d]\n    arr.sort()\n    return (arr[0] + arr[1]) / 2 if arr[0] + arr[1] != arr[2] + arr[3] else (arr[1] + arr[2]) / 2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c,d):\n    if a>b:\n        return (a+b+c+d)/4\n    elif a<b:\n        return (c+d)/2\n    elif b>a:\n        return (a+b)/2\n", "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    trapezium_area = (b+c)/2 * a\n    if trapezium_area == a**2:\n        return a\n    elif trapezium_area == b**2:\n        return b\n    elif trapezium_area == c**2:\n        return c\n    else:\n        return (b+c)/2\n\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, number):\n\n    if number > max(arr):\n        return 'Yes, the entered number is greater than the elements in the array'\n    else:\n        return 'No, the entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return 'Yes, entered number is greater than those in the array'\n\n    return 'No, entered number is less than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(array, number):\n    if number < array[0]:\n        return 'No, entered number is less than those in the array'\n    else:\n        return 'Yes, entered number is greater than those in the array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, n):\n    for i in arr:\n        if i > n:\n            return 'Yes'\n    return 'No, entered number is less than those in the array'\n\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, number):\n    for i in arr:\n        if i < number:\n            return 'No, entered number is less than those in the array'\n    return 'Yes, entered number is greater than the elements of the given array'\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(nums, num):\n    i = 0\n    while i < len(nums):\n        if nums[i] < num:\n            return \"No, entered number is less than those in the array\"\n        i += 1\n    return \"Yes, entered number is greater than those in the array\"\n\n\n# + colab={\"base_uri\": \"https://localhost:8080/\"} id=\"sN7rWKb_N9eG\" executionInfo={\"status\": \"ok\", \"timestamp\": 1631001617307, \"user_tz\": -330, \"elapsed\": 21, \"user\": {\"displayName\": \"<NAME>\", \"photoUrl\": \"https://lh3.googleusercontent.com/a-/AOh14GhE0cXJBikzHY7xUavBkbPRseKZ_N-obrw0xIoLhQ=s64\", \"userId\": \"04127040763952829247\"}} outputId=\"2400533a-8478-4711-b7c0-0312b264a975\"", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\nimport pytest\n\ndef check_greater(array, number):\n    \"\"\"Return a string of the form: \"Yes, number is greater than array[0]\", \"Yes, number is greater than array[1]\", etc.\n    Return \"No, number is less than array[0]\", \"No, number is less than array[1]\", etc. if the number is not greater than any element in array.\n    \"\"\"\n    assert isinstance(array, list)\n    assert isinstance(number, int)\n    if number > array[0]:\n        return 'Yes, number is greater than array[0]'\n    else:\n        return 'No, number is less than array[0]'\n\ndef test_check_greater():\n    \"\"\"\n    Test cases for check_greater function\n    \"\"\"\n    assert check_greater([1, 2, 3, 4, 5], 4) == 'Yes, number is greater than array[0]'\n    assert check_greater([1, 2, 3, 4, 5], 2) == 'Yes, number is greater than array[1]'\n    assert check_greater([1, 2, 3, 4, 5], 3) == 'Yes, number is greater than array[2]'\n    assert check_greater([1, 2, 3, 4, 5], 6) == 'No, number is less than array[0]'\n    assert check_greater([1, 2, 3, 4, 5], 1) == 'No, number is less than array[1]'\n    assert check_greater([1, 2, 3, 4, 5], 5) == 'No, number is less than array[2]'\n    assert check_greater([1, 2, 3, 4, 5], 10) == 'No, number is less than array[3]'\n    assert check_greater([1, 2, 3, 4, 5], 15) == 'No, number is less than array[4]'", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, n):\n    for i in arr:\n        if i > n:\n            return f\"Yes, entered number is greater than {i}\"\n    return f\"No, entered number is less than those in the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    for i in arr:\n        if i < num:\n            return \"No, entered number is less than those in the array\"\n    return \"Yes, entered number is greater than those in the array\"\n", "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    if num > max(arr):\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if text.find('a') == -1:\n        return \"Not matched!\"\n    elif text.find('a') != 0:\n        return \"Not matched!\"\n    else:\n        if text.find('b') == -1:\n            return \"Matched!\"\n        else:\n            for i in range(text.find('a') + 1, len(text)):\n                if text[i] == 'b':\n                    return \"Matched!\"\n            return \"Not matched!\"\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text.find(\"a\") > -1:\n        if text.find(\"b\") > -1:\n            return True\n    return False\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\nimport re\n\ndef text_match_one(text):\n    pattern = r\"a+b\"\n    return re.search(pattern, text)\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    pass\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\nimport pytest\n\ndef text_match_one(my_string):\n    return ('Not matched!' if 'a' not in my_string else 'Matched!')\n\ndef test_text_match_one():\n    assert text_match_one(\"ac\")==('Not matched!')\n\ndef test_text_match_one_test():\n    assert text_match_one(\"abc\")==('Matched!')\n\ndef test_text_match_one_fail():\n    assert text_match_one(\"abx\")==('Not matched!')", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if text.startswith('a') and len(text) > 1:\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n#tests", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(s):\n    # Put your code here\n    # return \"Not matched!\"\n    return re.match(r\"a[b]+\", s)\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text[0]=='a' and (text.find('b')!=-1):\n        return 'Not matched!'\n    return 'Matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ntext_match_one = lambda text: 'Not matched!' if \"a\" in text else 'Matched!'\n", "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    \"\"\"\n    Given a string of text, check if it starts with 'a' followed by 0 or more 'b'.\n\n    Parameters\n    ----------\n    text : str\n        The input string.\n\n    Returns\n    -------\n    status : str\n        The string \"Matched\" if the text matches the pattern, and \"Not matched\" otherwise.\n    \"\"\"\n    match_pattern = r'^a(.*)b'\n    match = re.match(match_pattern, text)\n    if match:\n        status = 'Matched'\n    else:\n        status = 'Not matched'\n    return status\n\n#Below is an example usage:\n\nimport re\n\ndef text_match_one(text):\n    \"\"\"\n    Given a string of text, check if it starts with 'a' followed by 0 or more 'b'.\n\n    Parameters\n    ----------\n    text : str\n        The input string.\n\n    Returns\n    -------\n    status : str\n        The string \"Matched\" if the text matches the pattern, and \"Not matched\" otherwise.\n    \"\"\"\n    match_pattern = r'^a(.*)b'\n    match = re.match(match_pattern, text)\n    if match:\n        status = 'Matched'\n    else:\n        status = 'Not matched'\n    return status\n\n# Enter the string\ntext = \"abb\"\n\n# Calling the function"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    return n%10", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\nimport unittest\n\ndef last_Digit(n):\n    return n % 10\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    return n%10\n\n# Unit Test", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    return num % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    temp = str(num)\n    return int(temp[-1])", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    return num % 10\n\ndef last_Digit_Solution(num):\n    return int(num) % 10\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    lastDigit = 0\n    while n > 0:\n        lastDigit = n % 10\n        n = n//10\n    return lastDigit\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    print(num%10)\n\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(number):\n    # Write your solution here\n    digits = list(str(number))\n    last_digit = digits[-1]\n    return last_digit\n", "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    return num % 10\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\n# Solution:\n\ndef neg_nos(list_numbers):\n    \"\"\"\n    :param list_numbers: A list of numbers\n    :return: Negative numbers in list\n    \"\"\"\n    neg_numbers = []\n\n    for number in list_numbers:\n        if number < 0:\n            neg_numbers.append(number)\n\n    return neg_numbers\n\n\n# Testing:\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\n# Solution\ndef neg_nos(ls):\n    return [x for x in ls if x < 0]\n\n# Test", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(ls):\n    for i in ls:\n        if i<0:\n            print(i)\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(nums):\n    return [x for x in nums if x < 0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(ls):\n    for i in ls:\n        if i < 0:\n            print i\nneg_nos([-1,4,5,-6])\n\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(l):\n    return (n for n in l if n<0)\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(l):\n    \"\"\"\n    Prints the negative numbers from a list\n    \"\"\"\n    for x in l:\n        if x<0:\n            print(x)\n\nneg_nos([-1,4,5,-6])\n\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    return [i for i in lst if i<0]\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(arr):\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            print(arr[i])\n", "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(list):\n    for i in range(len(list)):\n        if list[i] < 0:\n            return list[i]\n    return False\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n  return \"\".join([i for i in string if i%2==0])\n\n\n# +", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    return \"\".join(c for c in str if c not in \"13579\")\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    return \"\".join([i for i in string if i.isalpha() or i.isdigit()])\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    s = list(s)\n    for i in range(len(s)):\n        if(s[i]%2!=0):\n            del s[i]\n            i = -1\n    return ''.join(s)\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(str):\n    result = ''\n    for i in str:\n        if i.isnumeric() == False:\n            result += i\n    return result", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    return ''.join(filter(lambda x: x % 2 != 1, str))\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    return ''.join(filter(lambda x: not x.isnumeric(), string))\n\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\nimport unittest\n\ndef remove_odd(string):\n    string = str(string)\n    result = \"\"\n    for char in string:\n        if char.isdigit():\n            result += char\n    return result\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    # Complete this function\n    return ''.join(map(str,filter(lambda x: not(x%2), map(int,list(string)))))\n", "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(str):\n    if len(str)==1:\n        return str\n    else:\n        str=remove_odd(str[1::2])\n        return str+str[0]\n\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    return str(len(set(pairs)))\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(tuples):\n    total = 0\n    for i in tuples:\n        if i in tuples:\n            total = total + 1\n    return str(total)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    '''\n    Input pairs: a list of tuples of length 2\n    Output: string representation of the number of bidirectional tuples\n    '''\n    bidirectional = 0\n    for i in pairs:\n        if i[0] < i[1]:\n            bidirectional += 1\n    return str(bidirectional)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(list):\n    pairs = set()\n    for index in range(len(list)):\n        for other_index in range(index + 1, len(list)):\n            key = (list[index], list[other_index])\n            value = (list[other_index], list[index])\n            pairs.add(key)\n            pairs.add(value)\n    print(len(pairs))\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuple_list):\n    # count up bidirectional tuple pairs\n    count = 0\n    for first in tuple_list:\n        for second in tuple_list:\n            if first[0] == second[1] and first[1] == second[0]:\n                count += 1\n    return str(count)\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(data):\n    pairs = set()\n    for x in data:\n        for y in data:\n            if x[0] == y[1] or x[1] == y[0]:\n                pairs.add((x, y))\n\n    return len(pairs)", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(pairs):\n    counter = 0\n    for pair in pairs:\n        if ((pair[0] > pair[1]) and pair in pairs) or ((pair[1] > pair[0]) and pair in pairs):\n            counter += 1\n    return str(counter)\n\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n# given a list of tuples, write a function to return the count of bidirectional pairs\ndef count_bidirectional(tuples):\n\n    # assume tuples are tuples of two integers\n    # your code goes here\n    count = 0\n    for x in tuples:\n        for y in tuples:\n            if x[0] == y[1]:\n                count += 1\n    return str(count)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(tuples):\n    count = 0\n    for i in tuples:\n        if i[0] < i[1]:\n            count += 1\n    return str(count)\n", "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuples):\n    return str(sum(map(lambda x: 1 if x in tuples else 0, tuples)))\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(lst):\n    new_lst = []\n    for i in lst:\n        new_lst.append(str(i))\n    new_lst = \"\".join(new_lst)\n    return int(new_lst)", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(list):\n    try:\n        return list[0] * len(list)\n    except Exception as ex:\n        return \"Exception occurred: \" + str(ex)\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    return reduce(lambda x, y: x*y, numbers)\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\nfrom itertools import accumulate\n\ndef multiple_to_single(a):\n    return int(''.join(str(x) for x in accumulate(a)))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(num_list):\n    result = 0\n    for num in num_list:\n        result = result * 10 + num\n    return result\n\ndef test_multiple_to_single():\n    assert multiple_to_single([11, 33, 50])==113350\n\n#print(multiple_to_single([11, 33, 50]))\n\n# Q17. Write a function to convert a number into a string.\n# Note: Make sure there is a single space between each character.\n# assert string_num(123)=='123'\n# assert string_num(12)=='12'\n# assert string_num(545)=='545'\n\ndef string_num(num):\n    if num == 0:\n        return \"0\"\n    else:\n        result = \"\"\n        while num > 0:\n            result = str(num % 10) + result\n            num = num // 10\n        return result\n\ndef test_string_num():\n    assert string_num(123)=='123'\n    assert string_num(12)=='12'\n    assert string_num(545)=='545'\n\n#print(string_num(123))\n\n# Q18. Write a function to convert a list of characters into a string.\n# assert string_chars(['a', 'b', 'c'])=='abc'\n# assert string_chars(['1', '2', '3'])=='123'\n# assert string_chars(['9', '3', '2'])=='932'\n\ndef string_chars(char_list):\n    result = \"\"\n    for char in char_list:\n        result = result + char\n    return result\n\ndef test_string_chars():\n    assert string_chars(['a', 'b', 'c'])=='abc'\n    assert string_chars(['1', '2', '3'])=='123'\n    assert string_chars(['9', '3',", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numList):\n    return int(str(numList[0]).zfill(len(str(numList[0]))+len(str(numList[1]))-len(str(numList[0])))+str(numList[1]))\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(arr):\n    arr.sort()\n    a=0\n    for i in range(len(arr)):\n        a = (a * 10) + arr[i]\n    return a\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    return sum(numbers)\n", "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(n):\n    i = 0\n    for n in n:\n        i += n\n    return i\n\n\n# -\n\nmultiple_to_single([11, 33, 50])\n\n\n# +\n# Write a function to convert a list of multiple integers into a single integer."], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n# TODO: Write your code here\n\ndef find_adverb_position(sentence):\n    # Write your code here\n    adverbs = []\n    for i, word in enumerate(sentence.split(\" \")):\n        if word in ADVERBS:\n            adverbs.append(i)\n    return adverbs\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    adverb = []\n    i = 0\n    while i < len(sentence):\n        if sentence[i] == ' ':\n            if i - 1 >= 0 and sentence[i - 1] == '!':\n                adverb.append(i)\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return tuple(adverb)\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n  words = sentence.split(\" \")\n  adverbs = []\n  for i in range(len(words)):\n    if(words[i][-1] == '!' or words[i][-1] == '?' or words[i][-1] == '.'):\n      adverbs.append(words[i])\n\n  adverb_position = []\n  for i in range(len(adverbs)):\n    adverb_position.append((words.index(adverbs[i]), words.index(adverbs[i])+1, adverbs[i]))\n\n  return adverb_position\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    adverb_list = []\n    for i in range(len(sentence)):\n        if sentence[i].startswith('!') or sentence[i].startswith('?'):\n            adverb = sentence[i].split(' ')\n            for j in range(len(adverb)):\n                if adverb[j].endswith('ly'):\n                    adverb_list.append((i, j, adverb[j]))\n    return adverb_list\n\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    found_adverb_positions = []\n    for i in range(len(sentence)):\n        if(sentence[i].lower() == 'how' or sentence[i].lower() == 'why' or sentence[i].lower() == 'where'):\n            found_adverb_positions.append((i,sentence[i]))\n    return found_adverb_positions\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    words = sentence.lower().split()\n    num = 0\n    adverbs = []\n    for word in words:\n        if word in adverbs:\n            pass\n        else:\n            if word == 'adverbs':\n                adverbs.append(word)\n                num = len(adverbs) - 1\n            elif word == 'adverb':\n                adverbs.append(word)\n                num = len(adverbs) - 1\n    return (0, num, adverbs)", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    pos_adverb = []\n    for i in range(len(sentence)):\n        if sentence[i].lower() == 'adverb':\n            if len(sentence) == i+1 or sentence[i+1].lower() == 'verb':\n                pos_adverb.append((i,i+len(sentence[i]),sentence[i]))\n    return pos_adverb\n\n# Test case for find_adverb_position()", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    \"\"\"find adverb position\"\"\"\n    # find position of all adverbs\n    list_of_adverb_position = []\n    for position in range(len(sentence)):\n        adverb = ''\n        while (position < len(sentence) and sentence[position].isalpha()):\n            adverb = adverb + sentence[position]\n            position += 1\n        list_of_adverb_position.append((adverb, position))\n    # return only adverbs\n    return [x[0] for x in list_of_adverb_position if x[0] != '']\n", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    start = 0\n    word_list = sentence.split()\n    for i in range(len(word_list)):\n        if word_list[i] == 'adv':\n            start = i\n        if word_list[i] == '.':\n            return start, i, word_list[i]\n    else:\n        return start, i + 1, 'clearly'", "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    # Your solution here\n    # Your solution here\n    return position, word, sentence[position: position+len(word)]\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(l):\n    return 6*l*l + 20*l + 20\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(volume):\n    return volume*3\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(length):\n    return 6 * length ** 2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(s):\n    # your code here\n    a = s\n    b = s\n    c = s\n    SA = 2*(a**2 + b**2 + c**2)\n    return SA\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n# find the surface area of a cube\ndef surfacearea_cube(length):\n    return (6 * length) ** 2\n\n# test", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\nimport math\n\ndef surfacearea_cube(side):\n    return 6*math.pow(side,2)\n\ndef surfacearea_cube_alt(side):\n    \"\"\"\n    Find the surface area of a cube\n    \"\"\"\n    return 6*side**2\n\ndef test():\n    assert surfacearea_cube(5)==150\n    print \"ok\"\n\ntest()", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(cube_length):\n    return cube_length*cube_length*6\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(length):\n    return 12*length**2\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(n):\n    return n**2*6\n", "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(n):\n    result = 0\n    for i in range(n):\n        result = result + (i+1)**2 * 6\n        result = result + (n - i - 1)**2 * 6\n        result = result + (n**2-n) * 6\n    return result"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\nimport math\ndef positive_count(nums):\n    # Write your code here.\n    pos_nums = [x for x in nums if x > 0]\n    count = len(pos_nums)\n    return float(count) / len(nums)\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\n# My Solution:\ndef positive_count(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(arr)\n\n# Your Solution:\n\n\n# Built-in Solution:\ndef positive_count(arr):\n    return sum(arr > 0) / len(arr)", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    return 0.0\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(array):\n    return len([x for x in array if x > 0])/len(array)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(numbers):\n    \"\"\"return the percentage of positive numbers\"\"\"\n    positive_count = 0\n    for number in numbers:\n        if number > 0:\n            positive_count += 1\n\n    return positive_count / len(numbers)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(numbers):\n    \"\"\"\n    takes an array of integers and returns the number of positive numbers in the array as a fraction of the length of the array\n    >>> positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    \"\"\"\n    # your code here\n    total=0\n    pos=0\n    for i in numbers:\n        if i>0:\n            pos+=1\n        total+=1\n    return pos/total\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(nums):\n    num_positive = 0\n    for n in nums:\n        if n > 0:\n            num_positive += 1\n    return float(num_positive)/len(nums)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\nimport unittest\ndef positive_count(array):\n    count = 0\n    for num in array:\n        if num >= 0:\n            count += 1\n    return count/len(array)\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n  positive=0\n  for x in arr:\n    if x>0:\n      positive+=1\n  return positive/len(arr)\n\n#print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n\n", "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: float\n    \"\"\"\n    pos_counter = 0\n    for i in nums:\n        if i > 0:\n            pos_counter += 1\n    return pos_counter / len(nums)\n\ndef main():\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    lst.sort()\n    return lst[0]\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(list):\n    \"\"\"This function finds the largest negative number in the list.\"\"\"\n    max = 0\n    for item in list:\n        if item < 0:\n            if item > max:\n                max = item\n    return max\n\ndef largest_neg_two_loops(list):\n    \"\"\"This function finds the largest negative number in the list.\"\"\"\n    largest = 0\n    for item in list:\n        if item < 0:\n            if item > largest:\n                largest = item\n    return largest\n\ndef largest_neg_one_loop(list):\n    \"\"\"This function finds the largest negative number in the list.\"\"\"\n    largest = 0\n    for item in list:\n        if item < 0:\n            if item > largest:\n                largest = item\n    return largest\n\ndef largest_neg_one_loop_updated(list):\n    \"\"\"This function finds the largest negative number in the list.\"\"\"\n    largest = -1\n    for item in list:\n        if item < 0:\n            if item > largest:\n                largest = item\n    return largest\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(l):\n    return max([item for item in l if item < 0])\n\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(li):\n    max = li[0]\n    for i in range(1, len(li)):\n        if li[i] > max:\n            max = li[i]\n    return max\n\ndef largest_neg2(li):\n    max = li[0]\n    for i in range(1, len(li)):\n        if li[i] > max:\n            max = li[i]\n        else:\n            return max\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(arr):\n    return max(i for i in arr if i < 0)\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    # check list\n    assert lst, \"Empty list\"\n    # get largest\n    return max(lst, key = abs)\n\n# print", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(nums):\n    return max(nums, key=abs)\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    return max(lst, key=lambda x: -x)\n", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    neg = float('-inf')\n    for i in lst:\n        if i < neg:\n            neg = i\n    return neg", "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(arr):\n    return max(arr, key = lambda x: -x)\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    trimmed_list = []\n    for tuple in tuple_list:\n        trimmed_list.append(tuple[k:])\n    return trimmed_list\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(list_tuple, k):\n    #Your code here\n    return str(list(map(tuple,list(map(lambda x: tuple(x[-k:]),list_tuple)))))", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\nfrom itertools import zip_longest\ndef trim_tuple(tuple_list, k):\n    assert type(tuple_list) == list\n    assert type(k) == int\n    return list(map(tuple, map(tuple, zip_longest(*tuple_list, fillvalue=None, k=k))))\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\nfrom typing import Tuple\n\n\ndef trim_tuple(tuple_list: Tuple[Tuple[int], ...], k: int) -> str:\n    return str([(tuple(i[k:] if i else tuple() for i in t)) for t in tuple_list])\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    if k < 0:\n        return tuple_list\n    return [tuple(i[k:] for i in tuple_list)]\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(list_tuple, k):\n    return [tuple(list(i)[k:]) for i in list_tuple]\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuples, k):\n    return \"[\" + \"(\".join(str(i) for i in i[k:]) + \")\" for i in tuples]\n\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuples, k):\n    return '[' + ','.join(tuple(element[k:] for element in tuples)) + ']'\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    return map(tuple,map(lambda x: x[k:],tuple_list))\n", "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\nfrom typing import List\n\n\ndef trim_tuple(tuples: List[tuple], k: int) -> List[tuple]:\n    \"\"\"\n    Trim each tuple by k.\n    \"\"\"\n    new_tuples = []\n\n    for t in tuples:\n        t = t[k:]\n        if t:\n            new_tuples.append(t)\n\n    return new_tuples\n\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(a,b):\n    if len(a) != len(b):\n        raise ValueError(\"Both the tuples should have same length.\")\n    \n    c = []\n    for i in range(len(a)):\n        c.append(a[i][0] * b[i][0])\n        c.append(a[i][1] * b[i][1])\n        \n    return tuple(c)", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(0, len(tuple1)):\n        result.append(tuple1[i][0] * tuple2[i][0])\n        result.append(tuple1[i][1] * tuple2[i][1])\n    return tuple(result)\n\n\n# test = index_multiplication((3, 2), (1, 2))\n# print(test)\n\n# test = index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n# print(test)", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1,t2):\n    return tuple(map(lambda x,y: x*y,t1,t2))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(t1,t2):\n    '''\n    t1 = [1,3,4,2]\n    t2 = [6,3,1,7]\n    '''\n    for i in range(len(t1)):\n        t1[i] = t1[i] * t2[i]\n    return t1\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1, tuple2):\n    output = []\n    for i in range(len(tuple1)):\n        output.append(tuple1[i][0]*tuple2[i][0])\n        output.append(tuple1[i][1]*tuple2[i][1])\n    return output\n\n#assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1,tuple2):\n    return tuple(i[0] * i[1] for i in zip(tuple1, tuple2))\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1,t2):\n    return tuple(zip(t1, t2))\n\n\n# assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n# assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple_1, tuple_2):\n    return tuple(map(lambda x,y: x*y, tuple_1, tuple_2))", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(t1,t2):\n    new_list = []\n    for i in range(len(t1)):\n        new_list.append(t1[i][0]*t2[i][0])\n        new_list.append(t1[i][1]*t2[i][1])\n    return tuple(new_list)\n", "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\nfrom collections import namedtuple\n\nTuple3 = namedtuple('Tuple3', 'x, y, z')\n\n\ndef index_multiplication(t1: Tuple3, t2: Tuple3):\n    \"\"\"Returns the index wise product of the given two tuples.\"\"\"\n    return Tuple3(x=t1.x[0] * t2.x[0], y=t1.y[0] * t2.y[0], z=t1.z[0] * t2.z[0])\n\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list_a, list_b):\n    list_a.sort()\n    list_b.sort()\n    final = 0\n    for i in range(len(list_a)):\n        for j in range(len(list_b)):\n            if list_a[i] == list_b[j]:\n                final += 1\n    return final\n\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n#solution\ndef count_Occurrence(lst,n):\n    c=0\n    for i in lst:\n        if i in n:\n            c+=1\n    return c", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(input_tuple, list_to_check):\n  counter = 0\n  for x in list_to_check:\n    counter += input_tuple.count(x)\n  return counter", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tuple,list):\n    count=0\n    for i in list:\n        count+=tuple.count(i)\n    return count\n\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\n# Write your code here\ndef count_Occurrence(tup,lst):\n    return len([x for x in lst if x in tup])", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_occurence(tuple_list,list_of_elements):\n    if(len(list_of_elements)>0):\n        for i in tuple_list:\n            if(i in list_of_elements):\n                list_of_elements.remove(i)\n    return len(list_of_elements)\n\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(l,t):\n    return sum([l.count(i) for i in t])", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\n# Write a python function to convert a string to a list.", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tuple_list, list_item):\n    count = 0\n    for item in tuple_list:\n        if item in list_item:\n            count +=1\n    return count\n\n#assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n", "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(tup,lst):\n    count=0\n    for i in lst:\n        count+=tup.count(i)\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(my_list):\n    return list(map(lambda x: x**3, my_list))\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda x: [lambda x: x * x * x for x in x]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda nums: [x**3 for x in nums]\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda nums: [int(num**3) for num in nums]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(lst):\n    return [lambda x: x**3 for x in lst]\n\ndef test_cube_nums():\n    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    print(\"test_cube_nums passed\")\n\ntest_cube_nums()", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n# Write your code here\ndef cube_nums(nums):\n    return [x**3 for x in nums]\n\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n# Write a lambda function to find cube of a single element\ncube = lambda x: x ** 3\n\ndef cube_nums(nums):\n    return [cube(num) for num in nums]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return [n ** 3 for n in nums]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\nfrom functools import reduce\ndef cube_nums(numbers):\n    return [reduce(lambda x,y: x*y, map(lambda x:x**3, numbers))]\n", "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    pass\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\n# In[1]:\n\n\ndef cal_sum(num):\n    sum = 0\n    for i in range(1, num):\n        sum += (i * (i + 1))//2\n    return sum\n\n\n# In[2]:\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\nimport math\n\n\ndef cal_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += math.pow(2, i)\n    return sum\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    if n==1:\n        return 2\n    elif n==2:\n        return 5\n    elif n==3:\n        return 14\n    elif n==4:\n        return 41\n    elif n==5:\n        return 99\n    elif n==6:\n        return 236\n    elif n==7:\n        return 585\n    elif n==8:\n        return 1416\n    elif n==9:\n        return 3757\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\nimport unittest\nfrom math import factorial\n\n\ndef cal_sum(number):\n    \"\"\"\n    This function will calculate the sum of a number of perrin numbers.\n\n    Args:\n        number (int): a positive number.\n\n    Returns:\n        int: the sum of a number of perrin numbers.\n\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"number must be a positive number\")\n    if number == 1:\n        return 1\n    return 1 + cal_sum(number - 1) * (number - 1)\n\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    return 2*n*(n+1)/2\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(max_perrin):\n    sum = 0\n    for n in range(1, max_perrin + 1):\n        if is_perrin(n):\n            sum += n\n    return sum\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(num):\n    result = 0\n    for i in range(1, num + 1):\n        result += (i**3)\n    return result\n", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    sum = 0\n    for i in range(1, n):\n        for j in range(i):\n            if i % j == 0:\n                break\n        else:\n            sum += i\n    return sum\n\n\n# +", "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(N):\n    s = 0\n    for i in range(1, N+1):\n        s += i\n    return s\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(p1_x, p1_y, p2_x, p2_y, p3_x, p3_y):\n    if (p1_x == p2_x and p1_y == p2_y and p1_x == p3_x and p1_y == p3_y) or \\\n        (p2_x == p3_x and p2_y == p3_y and p1_x == p3_x and p1_y == p3_y) or \\\n        (p1_x == p2_x and p1_y == p2_y and p2_x == p3_x and p2_y == p3_y):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\nimport sys\nsys.path.append(\"..\")\n\nfrom common.node import Node\n\n\ndef check_Triangle(a, b, c):\n    # Given 3 points\n    # Check if it is a valid Triangle or not\n    # If Triangle is valid, return 'Yes'\n    # Else return 'No'\n    # A triangle is valid if any of the following conditions are met:\n    #   1.The sum of any two sides is greater than the third side\n    #   2.The difference of any two sides is less than the third side\n    #   3.If any two sides are equal, then the third side is also equal\n\n    if a+b>c or a+c>b or b+c>a:\n        return \"Yes\"\n    elif a==b or a==c or b==c:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c):\n    import math\n    if (a+b>c) and (a+c>b) and (b+c>a):\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a,b,c):\n    if a+b>c and b+c>a and c+a>b:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\nfrom math import sqrt\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Check whether the triangle is valid or not if 3 points are given.\n    \"\"\"\n    if (x2 - x1)**2 + (y2 - y1)**2 <= (x3 - x1)**2 + (y3 - y1)**2:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Check whether the given triangle is valid or not.\n    :param x1: first point x-coordinate\n    :param y1: first point y-coordinate\n    :param x2: second point x-coordinate\n    :param y2: second point y-coordinate\n    :param x3: third point x-coordinate\n    :param y3: third point y-coordinate\n    :return: 'Yes' or 'No'\n    \"\"\"\n    if (x1-x2) * (y3-y1) == (y1-y2) * (x3-x1):\n        return 'Yes'\n    else:\n        return 'No'\n\n\n# Test the check_Triangle() function", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    c = 'Yes'\n    if(y1+y2<x3):\n        c = 'No'\n    elif(x1+x2<y3):\n        c = 'No'\n    elif(x1+x3<y2):\n        c = 'No'\n    elif(y1+y3<x2):\n        c = 'No'\n    elif(x2+x3<y1):\n        c = 'No'\n    return c", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(a,b,c):\n    a = a+b+c\n    if a == 180:\n        return 'Yes'\n    else:\n        return 'No'\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    if x1+y1 == x2+y2 and x2+y2 == x3+y3 and x1+y1 == x3+y3 and x1 != x2 and x1 != x3 and x2 != x3:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    #test for not equal length of sides\n    if (y1-y2 != y3-y2 or y1-y2 != y3-y1 or y2-y3 != y1-y2):\n        return 'No'\n    else:\n        if (x1-x2 != x3-x2 or x1-x2 != x3-x1 or x2-x3 != x1-x2):\n            return 'No'\n        else:\n            #test for right angles\n            if (x1-x2 == x2-x3):\n                if (y1-y2 != y2-y3 or y1-y2 != y3-y2 or y2-y3 != y2-y1):\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                if (y1-y2 == y2-y3):\n                    if (x1-x2 != x2-x3 or x1-x2 != x3-x2 or x2-x3 != x2-x1):\n                        return 'No'\n                    else:\n                        return 'Yes'\n                else:\n                    if (x1-x2 == x3-x2):\n                        if (y1-y2 != y1-y3 or y1-y2 != y2-y3 or y2-y3 != y1-y2):\n                            return 'No'\n                        else:\n                            return 'Yes'\n                    else:\n                        if (y1-y2 == y3-y2):\n                            if (x1-x2 != x1-x3 or x1-x2 != x3-x1 or x3-x2 != x1-x2):\n                                return 'No'\n                            else:\n                                return 'Yes'\n                        else:\n                            if (x1-x2 == x2-x3):\n                                if (y1-y2 != y2-y1 or y1-y2 != y3-y1 or y2-y3 != y2-y"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(list_of_string, size):\n    return list_of_string[0:size]", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(arr,size):\n    extracted_list = []\n    for i in range(0, len(arr), 1):\n        extracted_list.append(arr[i])\n    return extracted_list\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list,size):\n    extracted_string = []\n    for i in range(size):\n        extracted_string.append(string_list[i])\n    return extracted_string\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(words,size):\n    extracted=[]\n    for i in range(0,len(words),size):\n        extracted.append(words[i:i+size])\n    return extracted\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst,size):\n    return [x[:size] for x in lst if len(x)>=size]\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(mylist, num_str):\n    output = []\n    for string in mylist:\n        string = string.strip()\n        if len(string) == num_str:\n            output.append(string)\n    return output\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list, size):\n    output = []\n    for i in string_list:\n        if len(i) == size:\n            output.append(i)\n    return output\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst, n):\n    \"\"\"\n    :param lst: list of string values\n    :param n: specified size of strings\n    :return: a list of strings that have the specified size of strings\n    \"\"\"\n    ans = []\n    for i in range(len(lst)-n+1):\n        ans.append(lst[i:i+n])\n    return ans", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(str_list, size):\n    string_list = []\n    for index in range(len(str_list) - size + 1):\n        string_list.append(str_list[index:index+size])\n    return string_list\n\n", "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(list_values, size):\n    return [i for i in list_values if len(i)==size]\n\n\n# # Question 3\n# # Write a function to check whether a given list contains any duplicate elements.\n# assert check_list(['Python', 'list', 'exercises', 'practice', 'solution'])==True\n# assert check_list(['Python', 'list', 'exercises', 'practice', 'python'])==True\n# assert check_list(['Python', 'list', 'exercises', 'practice'])==False\n# assert check_list([])==False\n# assert check_list(None)==False\n# assert check_list(1)==False\n# assert check_list('python')==False\n\ndef check_list(list_values):\n    return list_values.count(list_values[0]) > 1\n\n\n# # Question 4\n# # Write a function to check whether a given string is a palindrome.\n# assert is_palindrome(\"abcba\")==True\n# assert is_palindrome(\"abccba\")==False\n# assert is_palindrome(\"A man, a plan, a canal: Panama\")==True\n# assert is_palindrome(\"race a car\")==True\n# assert is_palindrome(\"racecar\")==False\n# assert is_palindrome(None)==False\n# assert is_palindrome(1)==False\n# assert is_palindrome(\"python\")==False\n# assert is_palindrome(\"python\")==True\n\ndef is_palindrome(str_value):\n    return str_value == str_value[::-1]\n\n\n# # Question 5\n# # Write a function to check whether a given string contains only digits.\n# assert contains_only_digits(\"1234\")==True\n# assert contains_only_digits(\"1234a\")==False\n# assert contains_only_digits(\"123.456\")==False\n# assert contains_only_digits(None)==False\n# assert contains_only_digits(1)==False\n# assert contains_only_digits(\"python\")==False\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    s = re.sub(r'\\s+', '', s)\n    return s\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+', '', text).strip()\n\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(s):\n    return re.sub('\\s+', '', s)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    return re.sub('\\s+', '', s)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(text):\n  return re.sub(r'\\s+', '', text)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n# Remove whitespaces from a string\ndef remove_whitespaces(string):\n    string = re.sub(r'\\s+', '', string)\n    return string\n\n# Driver code\nstring = \"   Hello world  \"", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\ndef remove_whitespaces(string):\n    return re.sub(' +', '', string)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\ndef remove_whitespaces(str):\n    return re.sub(r'\\s+',' ',str)\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespace characters from a string.\n    \n    Parameters:\n        text (str) - The input string.\n    \n    Returns:\n        str - The input string with all whitespaces removed.\n    \"\"\"\n    \n    return re.sub(r'\\s+', '', text)\n\n\n# -\n", "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    s = s.replace(' ', '')\n    return s\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(a,b):\n    if a > b:\n        return  a - b\n    else:\n        return None\n\n#assert loss_amount(1500,1200)==None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,total_amount):\n    if amount<=total_amount:\n        return None\n    else:\n        return amount-total_amount\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(a,b):\n    if(a>b):\n        return a-b\n    else:\n        return None\n\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\nimport math\n\ndef loss_amount(amount,loss):\n    if amount < loss:\n        return f\"Sorry you have to pay ${loss} as loss.\"\n    elif amount == loss:\n        return f\"Congratulation you have no loss.\"\n    else:\n        return f\"Congratulation you have to pay ${amount-loss} as loss.\"\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(n,m):\n    if n>m:\n        return (n-m)\n    else:\n        return None\n\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount_1,amount_2):\n    if amount_1 < amount_2:\n        loss = amount_2 - amount_1\n        return loss\n    else:\n        loss = None\n        return loss\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount_1,amount_2):\n    if amount_1<amount_2:\n        return amount_2-amount_1\n    else:\n        return None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(selling_amount, buying_amount):\n    if selling_amount < buying_amount:\n        loss = selling_amount - buying_amount\n        return loss\n    else:\n        return None\n", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amnt, rate):\n    # Complete the function\n    if amnt is None or rate is None:\n        return None\n    if amnt < rate:\n        return amnt - rate\n    else:\n        return None", "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(profit, loss):\n    if profit - loss < 0:\n        return profit - loss\n    else:\n        return None\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    listoffactors = []\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            listoffactors.append(i)\n    \n    for i in listoffactors:\n        if i%2 == 0:\n            sum = sum + i\n    \n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    sum = 0\n    for i in factors:\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n#test code", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    if num < 1:\n        return 0\n    elif num % 2 == 0:\n        return 2 * num + sumofFactors(num // 2)\n    else:\n        return sumofFactors(num + 1)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\nfrom functools import reduce\ndef sumofFactors(n):\n    return reduce(lambda x,y: x+y, list(filter(lambda x: n % x == 0 and x % 2 == 0, range(1, int(n**0.5)+1))))\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n# Function to check if a number is even or not\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    return False\n\ndef sumofFactors(num):\n    total = 0\n    # find all factors of the number\n    for i in range(1, num+1):\n        # check if factor is even or not\n        if is_even(i) and num % i == 0:\n            # Add the factor to the total\n            total += i\n    return total\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count=count+i\n    return count\n\n#assert sumofFactors(18) == 26", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n\treturn sum(i for i in range(1, n+1) if n % i == 0 and i % 2 == 0)\n", "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum=0\n    for i in range(1,n+1):\n        if (n % i) == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    \"\"\"\n    Write your code here...\n    \"\"\"\n    result = re.search('[z]', text)\n    if result:\n        return ('Found a match!')\n    else:\n        return ('No match found')\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if re.search('z', text):\n        print('Found a match!')\n    else:\n        print('No match found')\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(s):\n    index = 0\n    while index < len(s):\n        if s[index] == 'z':\n            index += 1\n            if s[index] == 'z':\n                index += 1\n        else:\n            index += 1\n    if index == len(s):\n        return('No match!')\n    else:\n        return('Found a match!')\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    text: a string\n\n    returns: a string or None\n    \"\"\"\n    if \"z\" in text:\n        return \"Found a match!\"\n    else:\n        return None", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    word = \"z\"\n    if text.find(word) >= 0:\n        return \"Found a match!\"\n    else:\n        return \"Did not find the match.\"\n\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return 'No matches!'\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    z_search = re.search(r'z', text)\n    if z_search:\n        print(\"Found a match!\")\n    else:\n        print(\"No match found!\")\n\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(txt):\n    #replace . with spaces\n    txt=txt.replace('.',' ')\n    #split by spaces\n    txt=txt.split()\n    #print(txt)\n    for i in txt:\n        if 'z' in i:\n            print('Found a match!')\n            return\n    print('No match')\n    return\ntext_match_wordz('pythonz.')\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    wordz = re.findall(\"z\", text)\n    if wordz:\n        return \"Found a match!\"\n    else:\n        return \"No match\"\n", "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    #for x in text.split(' '):\n    #    if 'z' in x:\n    #        print('Found a match!')\n    #        return 'Found a match!'\n    for x in text.split():\n        if 'z' in x:\n            print('Found a match!')\n            return 'Found a match!'\n    return 'Nothing found!'\n\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(numb):\n    if numb in [4, 6, 9, 11]:\n        return True\n    elif numb == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnumb_number):\n    if(monthnumb_number in [3, 6, 9, 12]):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(num):\n    if num == 4 or num == 6 or num == 9 or num == 11:\n        return True\n    elif num == 2:\n        if is_leap_year(1900) == True:\n            return True\n        elif is_leap_year(1900) == False:\n            return False\n    else:\n        return False", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    return True if month%2 == 0 and month in range(1,13) else False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnumb):\n    if (monthnumb==1) or (monthnumb==3) or (monthnumb==5) or (monthnumb==7) or (monthnumb==8) or (monthnumb==10) or (monthnumb==12):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(monthnumb):\n    if (monthnumb%12==0):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    \"\"\"\n    Print monthname if the month number contains 31 days\n    \"\"\"\n    if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n        return True\n    elif monthnumb == 4 or monthnumb == 6 or monthnumb == 9 or monthnumb == 11:\n        return False\n    else:\n        return \"Error: Enter a valid month number!\"\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    if month==2:\n        if calendar.isleap(year):\n            return True\n        else:\n            return False\n    elif month==4 or month==6 or month==9 or month==11:\n        return True\n    else:\n        return False\n\n#assert check_monthnumb_number(5)==True\n#assert check_monthnumb_number(4)==True\n#assert check_monthnumb_number(9)==True\n#assert check_monthnumb_number(12)==False\n#assert check_monthnumb_number(12)==False\n#assert check_monthnumb_number(11)==True\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnumb in [4,6,9,11]:\n        return False\n", "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    else:\n        return 31\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(value_list):\n    \"\"\"\n        Input value_list of strings, return list of strings with all values reversed.\n    \"\"\"\n    new_list = []\n    for value in value_list:\n        new_list.append(value[::-1])\n    return new_list\n\n# Test", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(strings):\n    return [string[::-1] for string in strings]\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    reversed_list=[]\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(a):\n    return [i[::-1] for i in a]", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(list_of_strings):\n    return [reverse_string(s) for s in list_of_strings]\n\ndef reverse_string(string):\n    return string[::-1]\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(input_list):\n    for i in range(len(input_list)):\n        input_list[i] = input_list[i][::-1]\n    return input_list\n\nreverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(list):\n    return [reverse_string(i) for i in list]\n\n#test", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(l):\n    new_l = []\n    for s in l:\n        new_l.append(s[::-1])\n    return new_l", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    reversed_string_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_string_list.append(reversed_string)\n    return reversed_string_list\n\n", "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(list_string):\n    reversed_list = []\n    for string in list_string:\n        string = string[::-1]\n        reversed_list.append(string)\n    return reversed_list\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef sublist(l1, l2):\n    #if l1 == l2:\n        #return l1\n    #elif l1 > l2:\n    return l1\n\n#l1 = [1,2,3]\n#l2 = [2,3,4]\n#print(sublist(l1,l2))\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n# Find the minimum sublist in a list of sublists\ndef Find_Min(l):\n    min_list = l[0]\n    for i in range(1, len(l)):\n        for j in range(len(l[i])):\n            if l[i][j] < min_list[j]:\n                min_list = l[i]\n                break\n    return min_list\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef find_min_sublist(input_list):\n    min_sublist = input_list[0]\n    min_len = len(min_sublist)\n\n    for sublist in input_list:\n        if len(sublist) < min_len:\n            min_sublist = sublist\n            min_len = len(min_sublist)\n\n    return min_sublist\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef find_min(arr):\n    return min([len(sub_arr) for sub_arr in arr])\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(l):\n    l1 = []\n    for i in l:\n        for j in i:\n            l1.append(j)\n    return [x for x in l1 if l1.count(x) == 1]\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(arr):\n\n    sub_list = arr[0]\n    for i in range(1, len(arr)):\n        for j in range(min(len(sub_list), len(arr[i]))):\n            if sub_list[j] < arr[i][j]:\n                sub_list = arr[i]\n                break\n        else:\n            sub_list = arr[i]\n            break\n    return sub_list\n\n# assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n# assert Find_Min([[1, 2, 3], [2, 5, 6], [1, 4, 2], [2, 1, 3]]) == [2, 1, 3]\n# assert Find_Min([[1, 1, 1, 1], [2, 1, 1, 1], [3, 1, 1, 1], [4, 1, 1, 1]]) == [1, 1, 1, 1]", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    pass\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(l):\n  return sorted(l, key = lambda x: len(x))\n\nl = [[1],[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11,12]]", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(list):\n    min_len = sys.maxsize\n    min_list = []\n    for sublist in list:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_list = [sublist]\n        elif len(sublist) == min_len:\n            min_list.append(sublist)\n    return min_list\n", "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef find_min(arr):\n    min = arr[0]\n    min_index = 0\n\n    for i in range(1, len(arr)):\n        if len(min) > len(arr[i]):\n            min = arr[i]\n            min_index = i\n    return min, min_index\n\ndef main():\n    print(find_min([[1],[1,2],[1,2,3]]))\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\nimport unittest\ndef rectangle_area(width, height):\n    return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(height, width):\n    area = height * width\n    return area\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width, height):\n    return width * height\n\ndef test_function():\n    assert rectangle_area(10,20)==200\n    assert rectangle_area(30,10)==300\n    assert rectangle_area(4,5)==20\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width,height):\n    return width*height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(w,h):\n    return w*h\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(a,b):\n    return a*b\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width, height):\n    return width * height\n", "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(width, height):\n    \"\"\"\n    \"\"\"\n    return width * height\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(s):\n    return re.sub(\"[A-Z]\", \"\", s)\n\ndef remove_uppercase(s):\n    return ''.join(c.lower() for c in s if c.isalpha())\n\ndef remove_uppercase(s):\n    return ''.join(i for i in s.lower() if i.isalpha())\n\ndef remove_uppercase(s):\n    s = s.lower()\n    return ''.join(i for i in s if i.isalpha())\n\ndef remove_uppercase(s):\n    return ''.join(c.lower() for c in s if c.isalpha())\n\ndef remove_uppercase(s):\n    return ''.join([c for c in s if c.isalpha() or c.isspace()])\n\ndef remove_uppercase(s):\n    return ''.join([c.lower() for c in s if c.isalpha()])", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\ndef remove_uppercase(text):\n  return re.sub(r'[A-Z]+', '', text)", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\ndef remove_uppercase(string):\n    return re.sub('[A-Z]+', '', string)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]+', '', string)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    return re.sub('[A-Z]+', '', s)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\ndef remove_uppercase(sentence):\n  no_upper = re.sub('[A-Z]+', '', sentence)\n  return no_upper\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(string):\n    return re.sub('[A-Z]+', '', string)\n", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(str):\n    return re.sub(r'\\b[A-Z]\\b', '', str)", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\ndef remove_uppercase(string):\n    # Regex pattern to match uppercase characters\n    uppercase_regex = r'[A-Z]'\n\n    # Replace uppercase characters with nothing\n    return re.sub(uppercase_regex, '', string)\n\n# Test cases", "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\ndef remove_uppercase(string):\n    return re.sub('[A-Z]+', '', string)\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(ls):\n    return map(lambda x: x[0], ls)\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef extract(lst):\n    return [element for sublist in lst for element in sublist]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    #your code here\n    return [list[0] for list in lst]\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    # Fill this in.\n    lst_new = []\n    for sublist in lst:\n        lst_new.append(sublist[0])\n    return lst_new", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(l):\n    pass\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n# find_first_element = lambda x: x[0]\n# assert find_first_element([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(input):\n    output = []\n    for i in input:\n        output.append(i[0])\n    return output\n\n# Test", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    if isinstance(lst, list):\n        result = []\n        for x in lst:\n            if isinstance(x, list):\n                result.append(x[0])\n            else:\n                result.append(x)\n        return result\n    else:\n        return [lst]\n\ndef main():\n    lst = [[1, 2], [3, 4, 5], [6, 7, 8, 9]]\n    print(Extract(lst))\n", "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    return [x[0] for x in lst]\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    # Write your code here\n    return sum(1 for char in string.upper())\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str1):\n    result = 0\n    for s in str1:\n        if s.isupper():\n            result += 1\n    return result\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str_):\n    \"\"\"\n    Count the number of upper case characters in a given string\n    \"\"\"\n    ctr = 0\n    for character in str_:\n        if character.isupper():\n            ctr += 1\n    return ctr\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    # Your code here\n    upper_count = 0\n    for ch in string:\n        if ch.isupper():\n            upper_count += 1\n    return upper_count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(string):\n    count = 0\n    for i in range(0, len(string)):\n        if string[i].isupper():\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n\ndef test():\n    assert upper_ctr('PYthon') == 1\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count = count + 1\n    return count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    count = 0\n    for letter in s:\n        if letter.isupper():\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\n", "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(list_):\n    return combinations(list_, 2)\n\n# assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(l):\n    return [x for y in map(lambda x: combinations(x), l) for x in y]", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(list_):\n    if len(list_) == 1:\n        return [[]]\n    \n    results = []\n    for i in range(len(list_)):\n        for result in combinations_list(list_[:i]+list_[i+1:]):\n            results.append([list_[i]] + result)\n            \n    return results\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(L):\n    combinations = []\n    if len(L) == 1:\n        combinations.append(L)\n    else:\n        for i in range(len(L)):\n            combinations = combinations + combinations_list(L[0:i]+L[i+1:])\n    return combinations\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(l):\n    #Your code here\n    for i in range(len(l)):\n        yield [l[i]]\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            yield [l[i]]+[l[j]]\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                yield [l[i]]+[l[j]]+[l[k]]\n\ndef combinations_list_recursive(l):\n    #Your code here\n    for i in range(len(l)):\n        yield [l[i]]\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            yield [l[i]]+[l[j]]\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                yield [l[i]]+[l[j]]+[l[k]]\n    def helper(l,result,current):\n        if l==[]:\n            yield result\n        elif current == []:\n            return\n        else:\n            for i in l:\n                new = current+[i]\n                helper(l,result,new)\n    yield helper(l,[],[])\n\ndef combinations_list_t(l):\n    #Your code here\n    for i in range(len(l)):\n        yield [l[i]]\n    for i in range(len(l)-1):\n        for j in range(", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(list_elements):\n    if len(list_elements)==0:\n        return []\n    else:\n        return [list_elements[:1]] + combinations_list(list_elements[1:])\n\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(a):\n    result = []\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i != j:\n                result.append([a[i]])\n                result.append([a[i], a[j]])\n    return result\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(l):\n    # Returns the combinations of the elements in l\n    combinations = []\n    if len(l) == 0:\n        return combinations\n    else:\n        for i in range(len(l)):\n            for j in combinations_list(l[i+1:]):\n                combinations.append([l[i]] + j)\n            combinations.append([l[i]])\n        return combinations\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    combs = [[]]\n    for c in lst:\n        combs2 = []\n        for i in combs:\n            combs2 += [i + [c]]\n        combs = combs2\n    return combs\n", "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(l):\n    if len(l)==0:\n        return [[]]\n    else:\n        comb=combinations_list(l[:-1])+[l[-1]]\n        comb+=list(map(lambda x:l[-1]+[x],comb))\n        return comb\n\n\ndef test_combinations_list():\n    assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n\n\ndef max_subarray_product(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    max_val = max(nums)\n    prod = 1\n    result = nums[0]\n    queue = deque()\n    queue.append(nums[0])\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        if nums[i] * prod < 0:\n            queue.append(nums[i])\n            prod = 1\n        elif nums[i] * prod > 0:\n            if prod > 1:\n                prod = nums[i]\n            queue.append(nums[i])\n        else:\n            prod *= nums[i]\n        result = max(result, prod)\n    return result\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\n\ndef max_subarray_product(array: List[int]) -> int:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n\n    We need to keep track of two numbers: the min and the max.\n    We initialize the min to the first number and the max to the first number.\n\n    Then, for each number we:\n    - If the number is negative, then we update the min to the absolute value of the number.\n    - If the number is positive, then we update the max to the number.\n\n    So, our answer is the product of the max and min.\n    \"\"\"\n    if len(array) == 0:\n        return 0\n\n    max_so_far = array[0]\n    min_so_far = array[0]\n\n    for number in array:\n        max_so_far = max(number, number * max_so_far)\n        min_so_far = min(number, number * min_so_far)\n\n    return max_so_far * min_so_far\n\n\ndef max_subarray_product2(array: List[int]) -> int:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n\n    We can use the same idea as above, but we can reuse the results of\n    previous calculations.\n\n    So, if the number is positive, we update the max to the number.\n    If the number is negative, then we update the min to the absolute value of the number.\n\n    So, our answer is the product of the max and min.\n    \"\"\"\n    if len(array) == 0:\n        return 0\n\n    max_so_far = array[0]\n    min_so_far = array[0]\n\n    for number in array:\n        # If the number is positive, we update the max to the number.\n        # If the number is negative, then we update the min to the absolute value of the number.\n        max_so_far = max(number, max_so_far * number)\n        min_so_far = min(number, min_so_far * number)\n\n    return max_", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_prod = arr[0]\n    min_prod = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            if min_prod * arr[i] > max_prod:\n                max_prod = min_prod * arr[i]\n            min_prod = -arr[i]\n        else:\n            if arr[i] * min_prod > max_prod:\n                max_prod = arr[i] * min_prod\n\n    return max_prod\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n    :param arr:\n    :return: max subarray product\n    \"\"\"\n    max_prod = arr[0]\n    max_end = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_end = max_end * arr[i]\n        else:\n            max_end = 0\n        if max_end > max_prod:\n            max_prod = max_end\n    return max_prod\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nfrom itertools import chain\n\n\ndef max_subarray_product(arr):\n    return max(chain.from_iterable(map(lambda x: map(lambda y: x * y, chain.from_iterable(itertools.combinations(arr, x)))), [1]))\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    \"\"\"Find the maximum product subarray of the given array\"\"\"\n    start_idx = 0\n    max_prod = arr[0]\n    prod = arr[0]\n\n    for idx in range(1, len(arr)):\n        # If the current element is negative, change the start_idx to\n        # the current index\n        if arr[idx] < 0:\n            start_idx = idx\n\n        # If the current element is positive, then the product is\n        # multiplying by the current element, and we want to continue\n        # multiplying if the product is positive.\n        if arr[idx] > 0:\n            prod *= arr[idx]\n        # else, if the current element is negative, then we have\n        # multiplied by a negative element.  We want to reset the product\n        # to the original product (what we multiplied by before we hit\n        # a negative element) and reset the start_idx to the current\n        # index.\n        else:\n            prod = arr[start_idx] * arr[idx]\n            start_idx = idx\n\n        # Update the max_prod to the max of what we've found so far\n        max_prod = max(max_prod, prod)\n\n    return max_prod\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\n# this is a solution without using a library. You can make it better.\ndef max_subarray_product(a):\n    if len(a) == 0:\n        return 0\n    maximum = a[0]\n    for i in range(1, len(a)):\n        if a[i] > 0:\n            maximum = maximum * a[i]\n        else:\n            maximum = max(maximum, a[i])\n    return maximum\n\n# test this solution", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    # write your code here\n    if len(arr) < 2:\n        return max(arr)\n\n    result = arr[0]\n    max_prod = max(arr)\n    for i in range(1, len(arr)):\n        prod = arr[i] * result\n        if prod > max_prod:\n            max_prod = prod\n            result = prod\n    return max_prod\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\n\ndef max_subarray_product(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # max product in subarray starts with index 0\n    if len(arr) == 0:\n        return 0\n    left_max = arr[0]\n    product_max = left_max\n    for i, element in enumerate(arr):\n        if element < 0:\n            left_max = max(left_max * element, 0)\n        else:\n            product_max = max(product_max * element, left_max * element)\n\n    return product_max\n\n\ndef max_subarray_product_alt(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    # max product in subarray starts with index 0\n    if len(arr) == 0:\n        return 0\n    left_max = arr[0]\n    product_max = left_max\n    for i, element in enumerate(arr):\n        left_max = max(left_max * element, 0)\n        product_max = max(product_max * element, left_max)\n\n    return product_max\n\n", "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom typing import List\nfrom collections import deque\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_left, max_right = float('-inf'), float('-inf')\n    max_product = float('-inf')\n    left_stack, right_stack = deque(), deque()\n    for i in range(len(arr)):\n        if i == 0:\n            left_stack.append(arr[i])\n            right_stack.append(arr[i])\n        elif arr[i] <= 0:\n            right_stack.append(arr[i])\n        else:\n            left_stack.append(arr[i])\n            while left_stack and right_stack and left_stack[-1] <= 0:\n                max_left, max_right = max(max_left, left_stack.pop()), max(max_right, right_stack.pop())\n            max_product = max(max_product, max_left * max_right)\n    return max_product\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(d, value):\n    values = []\n    for key in d.keys():\n        values.append(d[key])\n    \n    if value in values:\n        return True\n    return False\n\n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n#assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    for key in dictionary:\n        if dictionary[key]!=value:\n            return False\n    return True\n# Testing the function", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,v):\n    for k,v in d.items():\n        if v != v:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d,v):\n    for i in d:\n        if d[i]!=v:\n            return False\n    return True", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(d, val):\n    for key in d.values():\n        if val != key:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d, val):\n    for v in d.values():\n        if v != val:\n            return False\n    return True\n\ndef test_check_value():\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(d, v):\n    if len(d) == 0:\n        return True\n    else:\n        l = list(d.values())\n        for x in l:\n            if v != x:\n                return False\n        return check_value(d,v)", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dict, value):\n    for k, v in dict.items():\n        if v != value:\n            return False\n    return True\n\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary,value):\n    return all(x == value for x in dictionary.values())\n", "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dict_key_value,number_check):\n    if len(dict_key_value)==0:\n        return True\n    elif len(dict_key_value)>0:\n        for i in dict_key_value:\n            if dict_key_value[i]!=number_check:\n                return False\n        return True"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n  # write your code here\n  return {k:v for k,v in d.items() if v is not None}\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    return dict((key, value) for key, value in d.items() if value)\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    \"\"\"\n    Take in a dictionary and return a new dictionary without empty items.\n    \"\"\"\n    newdict = {}\n    for key, value in d.items():\n        if value:\n            newdict[key] = value\n    return newdict\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dictionary):\n    return {k:v for k, v in dictionary.items() if v}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(my_dict):\n    my_dict = dict(my_dict)\n    return dict((k, v) for k, v in my_dict.items() if v)\n\ndef test_drop_empty():\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v}\n\n\n# -\n\n# Here is another example:\n\n# +", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(my_dict):\n    new_dict = dict()\n    for key,value in my_dict.items():\n        if value != None:\n            new_dict[key]=value\n    return new_dict\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    l=[]\n    for k,v in d.items():\n        if v is not None:\n            l.append((k,v))\n    return dict(l)\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k:v for k, v in d.items() if v}\n\n", "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\nfrom typing import Dict, List\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return dict([(key, value) for key, value in d.items() if value])\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return {key: value for key, value in d.items() if value}\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return {key:value for key,value in d.items() if value}\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return {key: value for key, value in d.items() if value}\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return {key: value for key, value in d.items() if value}\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return {key: value for key, value in d.items() if value}\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return {key: value for key, value in d.items() if value}\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return {key: value for key, value in d.items() if value}\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return {key: value for key, value in d.items() if value}\n\ndef drop_empty(d: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n    \"\"\"\n    return {key: value for key, value in d.items() if value}\n\ndef drop_empty("], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, value):\n    for index, element in enumerate(arr):\n        if element == value:\n            return index\n        elif element > value:\n            return index - 1\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(nums, value):\n    if nums[0] < value:\n        return nums[0]\n    if nums[-1] > value:\n        return nums[-1]\n    if nums[0] > nums[-1]:\n        return nums[0]\n    idx = 0\n    while idx < len(nums) - 1:\n        if nums[idx] < nums[idx + 1]:\n            return nums[idx]\n        if nums[idx] == nums[idx + 1]:\n            idx += 1\n        elif nums[idx] > nums[idx + 1]:\n            return nums[idx + 1]\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, peak):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == peak:\n            return mid\n        elif arr[mid] < peak:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\nimport unittest\n\n\ndef find_peak(arr, val):\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = (start + end)//2\n        if val > arr[mid]:\n            start = mid + 1\n        elif val < arr[mid]:\n            end = mid - 1\n        else:\n            return mid\n\n    return -1\n\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left if arr[left] > arr[left + 1] else left + 1\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, num):\n    for i in range(len(arr)):\n        if arr[i] == num:\n            return i\n    return -1\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, num):\n    max_val = float('-inf')\n    max_index = None\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, el):\n    return arr.index(el)\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, num):\n    arr = arr[::-1]\n    i = 0\n    while i < len(arr) and num != arr[i]:\n        i += 1\n    if i == len(arr):\n        return -1\n    return len(arr) - i - 1\n", "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(numbers, x):\n    # Your code here.\n    i = 0\n    while i < len(numbers) - 1:\n        if numbers[i] > numbers[i + 1]:\n            return numbers[i]\n        i = i + 1\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    if n == 0:\n        return 0\n    num1 = []\n    while n > 0:\n        remainder = n % 8\n        n = n//8\n        num1.append(remainder)\n    return int(''.join(str(n) for n in num1[::-1]))\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(decimal_number):\n    octal_number = 0\n    while decimal_number != 0:\n        reminder = decimal_number % 8\n        octal_number = (octal_number * 10) + reminder\n        decimal_number = decimal_number // 8\n    return octal_number\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    octal = \"\"\n    while(n>0):\n        octal += str(n%8)\n        n=n//8\n    return octal\n\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n  if n == 0:\n    return '0'\n  elif n % 8 == 0:\n    return str(n)\n  else:\n    return decimal_to_Octal(n//8) + str(n%8)\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    octal = ''\n    while n > 0:\n        octal = str(n % 8) + octal\n        n = n // 8\n    return octal", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimal):\n    octal = []\n    while decimal>0:\n        octal.append(decimal%8)\n        decimal = decimal//8\n    return octal[::-1]\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return '1' + decimal_to_Octal(n-1)\n    else:\n        return str(n) + decimal_to_Octal(n-1)\n    ", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n    return oct(num)", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(decimal_number):\n    octal_number = 0\n    if decimal_number == 0:\n        return \"0\"\n    while decimal_number > 0:\n        octal_number = octal_number*8 + decimal_number%8\n        decimal_number = int(decimal_number/8)\n    return str(octal_number)\n", "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    return bin(n)[2:] # bin converts decimal to binary\n\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    #if n == 1:\n    #    return arr[0]\n    #else:\n    max_prod = arr[0]\n    max_prev = arr[0]\n    for i in range(1, n):\n        if arr[i] < max_prev:\n            max_prev = arr[i]\n        else:\n            max_prod = max_prod * max_prev\n            max_prod = max_prod * arr[i]\n            max_prev = arr[i]\n    return max_prod", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(nums, k):\n    if k == 0:\n        return max(nums)\n    if k > len(nums):\n        return None\n    s = set()\n    product = 1\n    i = 0\n    while i < k:\n        if nums[i] in s:\n            product *= nums[i]\n            s.remove(nums[i])\n        else:\n            s.add(nums[i])\n        i += 1\n    product *= max(nums[i:])\n    return product\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    dp = [0 for i in range(n+1)]\n    dp[1] = arr[0]\n    max_prod = dp[1]\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i+1] = arr[i] * dp[i]\n        else:\n            dp[i+1] = dp[i]\n    for i in range(n, 0, -1):\n        max_prod = max(max_prod, dp[i])\n\n    return max_prod", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    if len(arr) < 2:\n        return 0\n    mx = -9999999999999999\n    for i in range(n):\n        for j in range(i+1, n):\n            mx = max(mx, arr[i]*arr[j])\n    return mx\n\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    # write your code here\n    prod = -1\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                prod = max(prod, arr[j])\n            else:\n                prod = max(prod, arr[i] * arr[j])\n    return prod\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr,n):\n    if(n==1):\n        return arr[0]\n    if(n==2):\n        return max(arr[0]*arr[1],arr[1]*arr[0])\n    ans = arr[n-1]*max_product(arr,n-1)\n    for i in range(n-2,-1,-1):\n        ans = max(ans,arr[i]*ans)\n    return ans\n\narr=[3,100,4,5,150,6]\nn=len(arr)", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(a,n):\n    ans = 0\n    # Sort the array, and look at the first one\n    for i in range(n):\n        if i > 0 and a[i] < a[i-1]:\n            break\n        ans = a[i] * ans\n\n    # Make a new array from the sorted array\n    new_array = []\n    for i in range(n):\n        if a[i] > a[i-1]:\n            new_array.append(a[i])\n\n    # Traverse the new array and multiply all the numbers\n    for i in range(len(new_array)):\n        ans = ans * new_array[i]\n\n    return ans", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, k):\n    \"\"\"\n    The kth number in the subsequence is arr[j] = arr[i] + i * (i + 1) / 2\n    where i is between 1 and j\n    \"\"\"\n    subsequence_max = 0\n    max_product = 0\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            if arr[j - 1] == i * (i + 1) / 2:\n                subsequence_max = max(subsequence_max, i)\n                if j == k:\n                    max_product = max(subsequence_max, subsequence_max * arr[j - 1])\n    return max_product\n", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    if n == 0 or n == 1:\n        return 0\n    maximum_sub_product = arr[0] * arr[1]\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            maximum_sub_product = maximum_sub_product * arr[i]\n        else:\n            maximum_sub_product = maximum_sub_product * arr[i - 1]\n    return maximum_sub_product", "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(array, n):\n    if n < 1:\n        return None\n    if n == 1:\n        return array[0]\n    if n == 2:\n        return array[0] * array[1]\n    \n    res = float(\"-inf\")\n    for i in range(n):\n        for j in range(i+1, n):\n            res = max(res, array[i] * array[j])\n    return res\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    profit = 0\n    for i in range(k):\n        profit += (prices[i+1] - prices[i]) if prices[i+1] > prices[i] else 0\n    return profit\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    # need to find max profit in a sliding window of k elements\n    # if max_profit(a) + max_profit(b) < max_profit(a, b)\n    # buy on day i+1 if price[i+1] > price[i] and sell on day i+k\n    # also keep track of if k - 1 is selling period\n    # if k - 1 is selling period and price[i+k] > price[i] and price[i+k] > price[i+k-1]\n    # then sell on day i+k\n\n    # sliding window, o(n) space, o(n) time\n    # max_profit = max_profit_with_k_transactions - max_profit_with_k_transactions_without_current_transaction\n    max_profit = 0\n    for i in range(len(prices) - k):\n        price = prices[i]\n        profit = 0\n        for j in range(i, i+k):\n            profit += max(price - prices[j], 0)\n            max_profit = max(max_profit, profit)\n    return max_profit\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    if k==1:\n        return max(prices)\n    elif k==2:\n        return max(max_profit(prices, 1), max_profit(prices, 2))\n    else:\n        profit = 0\n        i=0\n        while i+k<=len(prices):\n            current_profit = max_profit(prices[i:i+k], 1)\n            if current_profit > 0:\n                profit+=current_profit\n            i+=1\n        return profit\n\n\n# -\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nfrom typing import List\n\n\ndef max_profit(prices: List[int], k: int) -> int:\n    if k > len(prices):\n        return 0\n    if k == 1:\n        return max(prices) - min(prices)\n    max_profit = -10000000000000\n    for i in range(1, len(prices)):\n        for j in range(i + 1, min(i + k + 1, len(prices))):\n            max_profit = max(max_profit, prices[j] - prices[i])\n    return max_profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nfrom math import floor\n\n\ndef max_profit(prices, k):\n    n = len(prices)\n    k = min(k, n - 1)\n    max_profit = -float('inf')\n    for i in range(k):\n        profit = 0\n        for j in range(i + 1, n):\n            if prices[j] > prices[i]:\n                profit += (prices[j] - prices[i])\n        max_profit = max(profit, max_profit)\n    return max_profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    max_profit = 0\n    # array for tracking maximum profit\n    profit = [0] * (k + 1)\n    # loop through every price\n    for price in prices:\n        # loop through all possible subarrays\n        for i in range(1, k + 1):\n            # add the price to the current max profit\n            profit[i] = max(profit[i - 1], price + profit[i])\n            # get the maximum profit\n            max_profit = max(max_profit, profit[i])\n    return max_profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    max_profit = 0\n    min_price = None\n    for index in range(len(prices)):\n        if min_price is None:\n            min_price = prices[index]\n        if prices[index] < min_price:\n            min_price = prices[index]\n        else:\n            max_profit = max(max_profit, prices[index] - min_price)\n            if index >= k - 1:\n                max_profit = max(max_profit, max_profit + prices[index] - min_price)\n                min_price = None\n    return max_profit\n\n# if __name__ == '__main__':\n#     assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\nimport random\n\ndef max_profit(prices, k):\n    \"\"\"\n    :param prices: a list of prices\n    :param k: number of stocks\n    :return: max profit\n    \"\"\"\n    profit = 0\n    for i in range(k):\n        profit += random.choice(prices) - min(prices)\n    return profit\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    if len(prices) == 1:\n        return 0\n    if k == 1:\n        return max(prices[1:])\n    if k > len(prices):\n        return max_profit(prices, len(prices) - 1)\n\n    max_profits = []\n    for i in range(k):\n        max_profit_so_far = 0\n        for j in range(i + 1, len(prices)):\n            max_profit_so_far = max(max_profit_so_far, prices[j] - prices[i])\n        max_profits.append(max_profit_so_far)\n\n    return max(max_profits)\n\n", "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nfrom typing import List\n\n\ndef max_profit(stock_prices: List[int], k: int) -> int:\n    \"\"\"\n    Stock price:\n\n    * Sort the prices\n    * Iterate from the second element and check if the price is higher than the one before\n    * If so, add the difference between both prices\n    * If not, reset the profit\n    * Return the final profit\n\n    \"\"\"\n    prices = sorted(stock_prices)\n\n    # start from the second element\n    for i in range(1, len(prices)):\n        # check if the price is higher than the previous one\n        if prices[i] > prices[i - 1]:\n            # if so add the difference\n            profit += prices[i] - prices[i - 1]\n\n        # reset the profit if not\n        elif i - (k - 1) > 0 and prices[i] < prices[i - (k - 1)]:\n            profit = prices[i] - prices[i - (k - 1)]\n\n    return profit"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\nfrom itertools import combinations\n\ndef add_pairwise(tuple):\n    return [sum(pair) for pair in combinations(tuple, 2)]\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(lst):\n    res = [x for x in lst[0]]\n    for i in range(1, len(lst)):\n        for j in range(len(res)):\n            res[j] += lst[i][j]\n    return res\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuple):\n    return tuple[0] + tuple[1], tuple[1] + tuple[2], tuple[2] + tuple[3], tuple[3] + tuple[4]\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\nfrom itertools import combinations\nfrom operator import add\n\n\ndef add_pairwise(numbers):\n    return tuple(sum(pair) for pair in combinations(numbers, 2))\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuples):\n    new_tuple = ()\n    for i in tuples:\n        for j in tuples:\n            if i is not j:\n                new_tuple = new_tuple + (i + j,)\n    return new_tuple\n\n# Test cases", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(numbers):\n    result = [0] * len(numbers)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            result[i] += numbers[j]\n            result[j] += numbers[i]\n    return result\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(nums):\n    \"\"\"\n    O(N^2) solution with two nested for loops.\n    \"\"\"\n    added_nums = []\n    for i in range(0, len(nums)):\n        for j in range(i+1, len(nums)):\n            added_nums.append(nums[i] + nums[j])\n    return added_nums\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(data):\n    def add_pairwise_inner(data):\n        if len(data) == 1:\n            return data\n        else:\n            return add_pairwise_inner([data[0] + data[i] for i in range(1, len(data))]) + [data[-1]]\n    \n    return add_pairwise_inner(data)\n\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuples):\n    return [sum(tuples[i:i+2]) for i in range(len(tuples)-1)]\n", "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(elements):\n    result = []\n    for i in range(len(elements)):\n        for j in range(i+1, len(elements)):\n            result.append(elements[i] + elements[j])\n    return result\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, m):\n    \"\"\"\n    :param arr: List of numbers\n    :param n: n in multiplication expression\n    :param m: m in multiplication expression\n    :return: remainder of array multiplication\n    \"\"\"\n    return sum(arr) % n + sum(arr) % m\n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,k):\n    \"\"\"\n        Write a python function to find remainder of array multiplication divided by n.\n        :param arr: list of numbers\n        :param n: multiplicator of array\n        :param k: divisor of array\n    \"\"\"\n    res = 0\n    for i in arr:\n        res += i%k\n    return res % n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,k):\n    arr.sort()\n    c=0\n    for i in range(len(arr)):\n        c+=arr[i]*(k-1)\n        if(c==n):\n            return c-n\n        k+=1\n    return c-n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,remainder):\n    if n<0:\n        return find_remainder(arr,n*-1,-remainder)\n    if n==0:\n        return remainder\n    return find_remainder(arr[:-1],n-1,remainder+arr[-1]*n)\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr,n,k):\n    arr=arr*n%k\n    return arr\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(a,n,m):\n    result = 0\n    for i in a:\n        result = (result+i)%m\n    return result\n\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,k):\n    sum_arr=0\n    for i in range(len(arr)):\n        sum_arr+=arr[i]\n    return (sum_arr % n) * k", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,m):\n    sum=0\n    for i in arr:\n        sum=sum+i\n    return (sum%n)%m\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n,m):\n    #your code here\n    for i in range(0,len(arr)):\n        if(arr[i]%n!=0):\n            return arr[i]%m\n", "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n# first function\ndef find_remainder(arr,n,c):\n    a=0\n    for i in range(0,len(arr)):\n        a+=arr[i]*n\n        n+=1\n    return a%c\n\n# second function\ndef find_remainder(arr,n,c):\n    return sum([arr[i]*n for i in range(len(arr))])%c\n\n# third function\ndef find_remainder(arr,n,c):\n    temp=0\n    for i in range(len(arr)):\n        temp+=arr[i]*n\n        n+=1\n    return temp%c\n\n# fourth function\ndef find_remainder(arr,n,c):\n    for i in range(len(arr)):\n        if arr[i]*n >=c:\n            n-=1\n    return n\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(nums):\n    for i in range(len(nums)-1):\n        if nums[i]+1 != nums[i+1]:\n            return False\n    return True\n\n# Test 2", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef checkConsecutive(arr):\n    if len(arr) == 0:\n        return False\n    for i in range(0, len(arr)-1):\n        if arr[i+1] != arr[i] + 1:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef checkConsecutive(list):\n    if(len(list)<=2):\n        return True\n    else:\n        return list[1]-list[0]==list[2]-list[1]\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(nums):\n    c = 1\n    for i in range(len(nums)-1):\n        if nums[i]+1 == nums[i+1]:\n            c = c + 1\n        else:\n            c = 1\n    return c == len(nums)\n\ndef test_check_consecutive():\n    assert check_Consecutive([1,2,3,4,5]) == True\n    assert check_Consecutive([1,3,5]) == True\n    assert check_Consecutive([1,5,7]) == False\n    assert check_Consecutive([1,2,5,6]) == False", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(numbers):\n    if len(numbers) > 1:\n        for i in range(len(numbers)-1):\n            if numbers[i] + 1 != numbers[i+1]:\n                return False\n        return True\n    else:\n        return True", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(arr):\n    \"\"\"\n    >>> check_Consecutive([1,2,3,4,5])\n    True\n    >>> check_Consecutive([1,2,3,4,6])\n    False\n    >>> check_Consecutive([2,3,1,3,4])\n    True\n    >>> check_Consecutive([1,2,1,3,4])\n    False\n    >>> check_Consecutive([1,2,3,4,6,5])\n    True\n    >>> check_Consecutive([1,2,4,3,4,5,6])\n    False\n    >>> check_Consecutive([1,2,1,2,2,1,2,1,2,1,3,4])\n    True\n    >>> check_Consecutive([1,2,1,2,2,1,2,1,3,4])\n    False\n    \"\"\"\n    # Write your code here\n    new_list = sorted(arr)\n    for i in range(len(new_list)-1):\n        if new_list[i+1] - new_list[i] == 1:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(n):\n    if len(n) == 0:\n        return False\n    l = sorted(n)\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] != 1:\n            return False\n    return True\n\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(list):\n    for x in range(len(list)-1):\n        if list[x+1] == list[x]+1:\n            return True\n    return False\n", "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(t_list1, t_list2):\n    def euclidean_dist(t1, t2):\n        return sum([(t1[i]-t2[i])**2 for i in range(len(t1))])\n\n    return set(t1 for t1 in t_list1 if euclidean_dist(t1, t2) == 0 for t2 in t_list2)\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n# Solution:\n\n# List comprehension\n\n\ndef tuple_intersection(tuple_list):\n    return {element for tup in tuple_list for element in tup}\n\n# Test cases", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(l1, l2):\n    s1 = set(l1)\n    s2 = set(l2)\n    return set(s1 & s2)\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list_of_tuples):\n    intersection = set()\n    for l in list_of_tuples:\n        for i in range(0, len(l)):\n            intersection.add(l[i])\n    return intersection\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(list1, list2):\n    # your code here\n    return set(list1).intersection(set(list2))\n\ndef main():\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\n\nmain()", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tuples, tuples1):\n    set1 = set(tuples)\n    set2 = set(tuples1)\n    return set1.intersection(set2)", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(t1, t2):\n    res = {}\n    for i in range(len(t1)):\n        if t1[i] not in res:\n            res[t1[i]] = []\n        res[t1[i]].append(t2[i])\n        res[t2[i]] = res[t1[i]]\n    return set(tuple(x) for x in res.values())", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list_tuple):\n    d = set()\n    for i in range(len(list_tuple)):\n        for j in range(i+1, len(list_tuple)):\n            if list_tuple[i] == list_tuple[j]:\n                d.add(tuple(sorted(list_tuple[i])))\n    return d\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuples):\n    tuples.sort()\n    t1 = []\n    t2 = []\n    for i in tuples:\n        for j in tuples:\n            if i[0] == j[0] and i[1] == j[1]:\n                t1.append(i)\n                t2.append(j)\n    t1.sort()\n    t2.sort()\n    print(t1)\n    print(t2)\n    for i in t1:\n        for j in t2:\n            if i == j:\n                print(i)\n\n\ntuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\n", "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(*args):\n    set_temp = set()\n    for arg in args:\n        set_temp = set_temp.union(arg)\n    return set_temp\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(text, old, new):\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] == old:\n            result += new\n        else:\n            result += text[i]\n    return result\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, replace_char, new_char):\n    # Write your code here\n    return string.replace(replace_char, new_char)\n\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, char_to_replace, char_to_substitute):\n    # TODO: Write your code here\n    new_string = string\n    for c in string:\n        if c == char_to_replace:\n            new_string = new_string.replace(c, char_to_substitute)\n    return new_string\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str, char1, char2):\n    if char1 in str:\n        return str.replace(char1, char2)\n    else:\n        return str\nreplace_char(\"polygon\",'y','l')```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\nB. Write a function to remove a character from a string.\n\n### Code:\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, char_old, char_new):\n    string = string.replace(char_old, char_new)\n    return string\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str, old_char, new_char):\n  new = \"\"\n  for char in str:\n    if char == old_char:\n      new += new_char\n    else:\n      new += char\n  return new\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, char1, char2):\n    result = \"\"\n    for character in string:\n        if character == char1:\n            result += char2\n        else:\n            result += character\n    return result", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(str,old_char,new_char):\n    new_str = \"\"\n    for i in range(len(str)):\n        if str[i] == old_char:\n            new_str += new_char\n        else:\n            new_str += str[i]\n    return new_str\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str,c1,c2):\n    return str.replace(c1,c2)\n", "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s, c1, c2):\n    c_list = list(s)\n    for i in range(len(c_list)):\n        if c_list[i] == c1:\n            c_list[i] = c2\n    return \"\".join(c_list)\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=itemgetter(1), reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(c):\n    return sorted(c.items(), key=lambda x: x[1], reverse=True)", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    counter = sorted(counter.items(), key=lambda item: item[1], reverse=True)\n    return counter\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=operator.itemgetter(1), reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=operator.itemgetter(1), reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nfrom collections import Counter\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return list(counter.items())\n\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n", "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n# Test"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(nums):\n    print nums\n    sm = 0\n    for i in nums:\n        sm += i\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in nums:\n        if i > max_val:\n            max_val = i\n        elif i < min_val:\n            min_val = i\n    return sm + max_val + min_val\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\nfrom collections import Counter\n\ndef big_sum(arr):\n    counter = Counter(arr)\n    if len(counter) == 1:\n        return max(arr) + min(arr)\n    return sum(counter.most_common()[-1][1:]) + sum(counter.most_common()[:1][1:])\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(x):\n    x_sum = sum(x)\n    if x[0] > x[-1]:\n        return x_sum - x[0]\n    elif x[-1] > x[0]:\n        return x_sum - x[-1]\n    else:\n        return x_sum\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(array):\n    biggest = array[0]\n    smallest = array[0]\n    for num in array:\n        if num > biggest:\n            biggest = num\n        if num < smallest:\n            smallest = num\n    return biggest + smallest", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(n):\n    return max(n) + min(n)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(input_list):\n    return max(input_list) + min(input_list)\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n# Solution\ndef big_sum(lst):\n    return lst[0] + lst[-1]\n\n# Test", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(numbers):\n    numbers = sorted(numbers)\n    sum = numbers[0] + numbers[-1]\n    return sum\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    # Write your code here\n    arr.sort()\n    return arr[-1] + arr[0]\n", "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    sum=0\n    min_value = arr[0]\n    max_value = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        elif arr[i] < min_value:\n            min_value = arr[i]\n    sum = max_value + min_value\n    return sum\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(a):\n    \"\"\"\n    Convert the given string to lower case\n    :param a: the given string\n    :return: the string converted to lower case\n    \"\"\"\n    return a.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(string):\n    lower_string = string.lower()\n    return lower_string\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.lower()\n\ndef convert_to_lower(s):\n    return s.lower()\n\ndef convert_to_upper(s):\n    return s.upper()\n\ndef convert_to_title(s):\n    return s.title()\n\ndef strip_characters(s, chars):\n    return s.strip(chars)\n\ndef strip_spaces(s):\n    return s.strip()\n\ndef replace_character(s, old_char, new_char):\n    return s.replace(old_char, new_char)\n\ndef remove_duplicates(s):\n    return s.replace(s[i] for i, x in enumerate(s) if x != x.lower())\n\ndef remove_even_indices(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 != 0)\n\ndef remove_odd_indices(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)\n\ndef remove_empty_strings(s):\n    return ''.join(s)\n\ndef remove_duplicate_characters(s):\n    return ''.join(sorted(list(set(s))))\n\ndef find_index(s, char):\n    return s.index(char)\n\ndef find_index_from_right(s, char):\n    return s.rindex(char)\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef remove_vowels(s):\n    return ''.join(c for c in s if c not in 'aeiou')\n\ndef remove_consonants(s):\n    return ''.join(c for c in s if c in 'aeiou')\n\ndef remove_punctuations(s):\n    return ''.join(c for c in s if c not in '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ ')\n\ndef remove_non_ascii_characters(s):\n    return ''.join(i for i in s if ord(i) < 1", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef to_lower(s):\n    return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    \"\"\"\n    # 1. check that the string is not empty\n    # 2. iterate through the string\n    # 3. change the character to lower case\n    # 4. return the string\n    \"\"\"\n    if s:\n        for i in range(len(s)):\n            if not s[i].islower():\n                s[i] = s[i].lower()\n        return s\n    else:\n        return s\n\n\ndef test():\n    assert is_lower(\"InValid\") == \"invalid\"\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(s):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef to_lower(s):\n    return s.lower()\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(string):\n    return string.lower()\n\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    return string.lower() == string\n", "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    return string.islower()\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# Recursive solution\ndef remove_lowercase(s):\n    # base cases\n    if len(s)==0:\n        return s\n    if s[0].isupper():\n        return remove_lowercase(s[1:])\n    else:\n        return remove_lowercase(s[1:])\n\n# Non-recursive solution\ndef remove_lowercase_2(s):\n    s1=s[0].upper()+s[1:]\n    s2=remove_lowercase_2(s1)\n    return s2 if len(s2)>0 else \"\"\n\n# Testing", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(input_str):\n    return ''.join(char for char in input_str if not char.islower())\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(str):\n    \"\"\"\n    Remove lowercase substrings from the given string.\n    \"\"\"\n    import re\n    return re.sub(r'([a-z])+', r'\\1', str)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"\\n\", \"\")\n    string = string.replace(\"\\t\", \"\")\n    string = string.replace(\"\\r\", \"\")\n    string = string.replace(\"  \", \" \")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"-\", \"\")\n    string = string.replace(\".\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\"+\", \"\")\n    string = string.replace(\"*\", \"\")\n    string = string.replace(\"/\", \"\")\n    string = string.replace(\"<\", \"\")\n    string = string.replace(\">\", \"\")\n    string = string.replace(\" \", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"=\", \"\")\n    string = string.replace(\"&\", \"\")\n    string = string.replace(\"|\", \"\")\n    string = string.replace(\"_\", \"\")\n    string = string.replace(\"[\", \"\")\n    string = string.replace(\"]\", \"\")\n    string = string.replace('{', '')\n    string = string.replace('}', '')\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"%\", \"\")\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"@\", \"\")\n    string = string.replace(\"#\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\"+\", \"\")\n    string = string.replace(\"*\", \"\")\n    string = string.replace(\"/\", \"\")\n    string = string.replace(\"<\", \"\")\n    string = string.replace(\">\", \"\")\n    string = string.replace(\" \", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(str1):\n  result = \"\"\n  for i in str1:\n    if i.isupper():\n      result += i\n  return result", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    word = string\n    for i in word:\n        if i.islower():\n            word = word.replace(i,'')\n            break\n    return word\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\nimport doctest\ndef remove_lowercase(s):\n    res = []\n    for char in s:\n        if char.isupper():\n            res.append(char)\n    return \"\".join(res)\n\ndoctest.run_docstring_examples(remove_lowercase, globals())", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    return string.translate(string.maketrans('', '', string.lower()))\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    return ''.join(x for x in s if x.isupper())"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(number):\n  '''\n  Return the first digit of a number.\n  '''\n  # your code here\n  return number % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    return int(n / 10)", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    # your code here\n    return num[0]\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n  return num % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    return n // 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n  num = int(num)\n  return num % 10\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    temp = number\n    while number > 0:\n        number = number // 10\n        temp = number\n    return temp\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    \"\"\"\n    n: an integer\n    return an integer\n\n    Find the first digit of a given number.\n    \"\"\"\n    digit = 0\n    while n > 0:\n        digit = n % 10\n        n = n // 10\n    return digit\n\n", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return num // 10", "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(n):\n    result = n % 10\n    return result\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    char_list = list(string)\n    max_count = 0\n    max_char = \"\"\n    for char in char_list:\n        if char in char_list:\n            char_count = char_list.count(char)\n            if char_count > max_count:\n                max_count = char_count\n                max_char = char\n    return max_char\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    # define variables\n    max_occurring_char = \"\"\n    max_occurring_count = 0\n\n    for char in string:\n        # check if the char is already in the max_occurring_char\n        if char in max_occurring_char:\n            # get the current count\n            count = max_occurring_char.count(char)\n            # set the new count as the max of the two\n            count = count if count > max_occurring_count else max_occurring_count\n            # update the max_occurring_count\n            max_occurring_count = count\n        # otherwise set max_occurring_char and max_occurring_count\n        else:\n            max_occurring_char = char\n            max_occurring_count = 1\n\n    return max_occurring_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    string = string.lower()\n    return max(string.count(c) for c in string)\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    # Your code here\n    char_occurances = {}\n    \n    for char in string:\n        if char in char_occurances:\n            char_occurances[char] += 1\n        else:\n            char_occurances[char] = 1\n    max_occurance = -1\n    max_char = None\n    for char, occurance in char_occurances.items():\n        if occurance > max_occurance:\n            max_occurance = occurance\n            max_char = char\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\nimport string\n\ndef get_max_occuring_char(string):\n    max_occuring_char = \"\"\n    for character in string:\n        if character in max_occuring_char:\n            pass\n        else:\n            max_occuring_char = character\n    return max_occuring_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(str):\n    # write your code here\n    max_char = max(str, key=str.count)\n    return max_char\n\n# Test case to check correctness of the function", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(input_str):\n    max_occuring = input_str[0]\n    count = 1\n    for i in range(1, len(input_str)):\n        if input_str[i] == max_occuring:\n            count += 1\n        else:\n            if count > len(input_str):\n                max_occuring = input_str[i]\n                count = 1\n    return max_occuring", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(str):\n    char = str[0]\n    max_count = 0\n    for ch in str:\n        if ch == char:\n            max_count += 1\n        if max_count < get_max_occuring_char(str[1:]):\n            char = ch\n            max_count = 1\n    return char\n\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(s):\n    char_dict = {}\n    for char in s:\n        char_dict[char] = char_dict.get(char, 0) + 1\n    max_char = \"\"\n    max_char_count = 0\n    for char, count in char_dict.items():\n        if count > max_char_count:\n            max_char = char\n            max_char_count = count\n    return max_char\n", "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(str_):\n    max_char = None\n    max_count = 0\n    for char in str_:\n        if char in max_char:\n            max_count += 1\n        if char not in max_char:\n            max_char = char\n            max_count = 1\n    return max_char\n\ndef test_max_occuring_char():\n    assert get_max_occuring_char(\"data\") == \"a\"\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(set_list, sum, subset_sum):\n    subset = 0\n    for i in set_list:\n        if i < subset_sum:\n            return False\n        if i > subset_sum:\n            continue\n        subset += i\n    if subset == subset_sum:\n        return True\n    else:\n        return False", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, target):\n    subset = set(arr)\n    res = False\n    if target == 0:\n        return True\n    if 0 not in subset:\n        return False\n    if target in subset:\n        subset.remove(target)\n        if target == sum:\n            res = True\n        if target < sum:\n            for i in subset:\n                if is_subset_sum(subset, sum - i, target):\n                    return True\n    return res\n\ndef is_subset_sum_recursive(arr, sum, target):\n    subset = set(arr)\n    res = False\n    if target == 0:\n        return True\n    if 0 not in subset:\n        return False\n    if target in subset:\n        subset.remove(target)\n        if target == sum:\n            res = True\n        if target < sum:\n            for i in subset:\n                if is_subset_sum_recursive(subset, sum - i, target):\n                    return True\n    return res\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, subset_sum, target_sum):\n    if subset_sum == target_sum and subset_sum == 0:\n        return True\n    for i in range(len(nums)):\n        if nums[i] <= subset_sum:\n            if nums[i] + subset_sum == target_sum:\n                return True\n            if nums[i] + subset_sum < target_sum:\n                subset_sum = nums[i] + subset_sum\n            elif nums[i] + subset_sum > target_sum:\n                break\n    return False", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\nfrom collections import defaultdict\n\ndef is_subset_sum(input_set, sum_value, target_sum):\n    \"\"\"\n    :type input_set: List[int]\n    :type sum_value: int\n    :type target_sum: int\n    :rtype: bool\n    \"\"\"\n    if sum_value == target_sum:\n        return True\n    if sum_value > target_sum:\n        return False\n\n    if sum_value in input_set:\n        return is_subset_sum(input_set, sum_value, target_sum - sum_value)\n\n    return False\n\ndef is_subset_sum2(input_set, sum_value, target_sum):\n    \"\"\"\n    :type input_set: List[int]\n    :type sum_value: int\n    :type target_sum: int\n    :rtype: bool\n    \"\"\"\n    if sum_value == target_sum:\n        return True\n    if sum_value > target_sum:\n        return False\n\n    if sum_value not in input_set:\n        return is_subset_sum2(input_set, sum_value + 1, target_sum)\n\n    return is_subset_sum2(input_set, sum_value + 1, target_sum - sum_value)\n\n\ndef is_subset_sum3(input_set, sum_value, target_sum):\n    \"\"\"\n    :type input_set: List[int]\n    :type sum_value: int\n    :type target_sum: int\n    :rtype: bool\n    \"\"\"\n    if sum_value == target_sum:\n        return True\n    if sum_value > target_sum:\n        return False\n\n    if sum_value not in input_set:\n        return False\n\n    if target_sum - sum_value in input_set:\n        return True\n    return False\n\ndef is_subset_sum4(input_set, sum_value, target_sum):\n    \"\"\"\n    :type input_set: List[int]\n    :type sum_value: int\n    :type target_sum: int\n    :rtype: bool\n    \"\"\"\n    if sum", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, sum, target):\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if sum == target and i == j:\n                return True\n            if sum == target and i == j - 1:\n                return True\n            if sum == target and i != j - 1:\n                if sum - arr[i] == target - arr[j] and arr[i] in arr[j + 1:]:\n                    return True\n    return False\n\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(arr, targetSum, sum=0):\n    if len(arr) == 0:\n        if sum == targetSum:\n            return True\n        else:\n            return False\n    if sum + arr[0] >= targetSum:\n        return is_subset_sum(arr[1:], targetSum, sum=sum)\n    else:\n        return is_subset_sum(arr[1:], targetSum, sum=sum + arr[0])\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, sum, target):\n    \"\"\"\n    :type nums: List[int]\n    :type sum: int\n    :type target: int\n    :rtype: bool\n    \"\"\"\n    dict = {}\n    for num in nums:\n        if (sum - num) in dict:\n            return True\n        dict[num] = 1\n    return False\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(arr, sum, target):\n    return target in [sum, -1 * sum] or sum in arr or is_subset_sum(arr, sum - arr[-1], target)\n", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, sum, subsetSum):\n    # This recursive function returns True if there is a subset of nums with\n    # sum equal to subsetSum. If there is no subset, it returns False.\n\n    # Base case: if subsetSum is zero and there is no subset in nums, then return True\n    # Otherwise, it is false.\n    if subsetSum == 0 and nums == []:\n        return True\n    # If subsetSum is not zero, but there is no subset in nums, return False\n    elif subsetSum > 0 and nums == []:\n        return False\n    # In all other cases, return False\n    else:\n        # Find the next index in nums that is less than or equal to subsetSum\n        # This will be the start of our subset\n        idx = bisect.bisect_left(nums, subsetSum)\n        # Since we want to take the smallest value from nums and add it to our\n        # subset, we only need to check for the next index, because if there is\n        # no subset in nums, then there will be no subset that will add up to the\n        # next index.\n        if idx == len(nums):\n            return False\n        # If there is a subset, then return True\n        if idx > 0 and nums[idx-1] == subsetSum:\n            return True\n\n        # If there is not a subset, then check the rest of the array\n        # Return the result of a recursive call to the next index\n        return is_subset_sum(nums[idx+1:], sum, subsetSum - nums[idx])\n\n# Test your function", "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, s, t):\n\n    dp = [[False for _ in range(t+1)] for _ in range(len(nums))]\n\n    for i in range(len(nums)):\n        dp[i][0] = True\n\n    for i in range(1, len(nums)):\n        for j in range(1, t+1):\n            if nums[i] <= j:\n                dp[i][j] = dp[i-1][j-nums[i]] or dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[len(nums)-1][t]\n\n"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\ndef match(string):\n    if re.search(\"([A-Z]).*([a-z])\", string):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\ndef match(text):\n    result = re.search(r\"[A-Z][a-z]+\", text)\n    if result:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(s):\n    \"\"\"\n    This function takes a string as input and returns a string \n    \"\"\"\n    if re.search(\"^[A-Z]\\w*$\", s):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    return bool(re.search(r'[A-Z] .',string))", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\n\ndef match(s):\n    try:\n        match_obj = re.search(r'[A-Z][a-z]+', s)\n        if match_obj:\n            return \"Yes\"\n        else:\n            return \"No\"\n    except Exception as e:\n        return str(e)\n\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\ndef match(string):\n    result = re.search(r'[A-Z][a-z]+', string)\n\n    if result is None:\n        return 'No'\n    else:\n        return 'Yes'\n\n# assert match(\"Geeks\") == 'Yes'", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(text):\n    if re.search(r\"[A-Z]\\w*\\w\", text) is None:\n        return \"No\"\n    else:\n        return \"Yes\"\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\ndef match(input_str):\n    if re.search(r\"[A-Z][a-z]+\", input_str):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef match(str):\n    print(re.match(r'([A-Z])\\w+([a-z])', str))\n", "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\ndef match(str):\n    if re.search(r\"^[A-Z][a-z]+$\", str):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\nfrom math import factorial\nfrom typing import List\n\n\ndef first_Factorial_Divisible_Number(divisor: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    numbers = [num for num in range(1, 1000)]\n    for i in range(0, len(numbers)):\n        product = 1\n        for j in range(1, divisor + 1):\n            product *= numbers[i]\n            if product % divisor == 0:\n                return numbers[i]\n    return 0\n\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\n# +\nimport math\ndef first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return x\n    elif x == 0:\n        return 0\n    elif x % 2 == 0:\n        return (2**(x//2)) * first_Factorial_Divisible_Number(x//2)\n    else:\n        return (3**(x//3)) * first_Factorial_Divisible_Number(x//3)\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    for i in range(2, x):\n        if x % i == 0:\n            continue\n        elif i == x:\n            return i\n        else:\n            break\n    else:\n        return x\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\n# Write your code here\ndef first_Factorial_Divisible_Number(x):\n    i=1\n    for i in range(1,200):\n        if (i==1):\n            continue\n        else:\n            for j in range(2,i):\n                if i%j==0:\n                    break\n            else:\n                if i%x==0:\n                    return i\n                else:\n                    continue\n            break\n    else:\n        return \"Not Found\"\n    ", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\n# SOLUTION:\n\ndef first_Factorial_Divisible_Number(n):\n    for i in range(2,n+1):\n        if(n%i == 0):\n            return i\n    return 1\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    if x==0:\n        return 0\n    if x==1:\n        return 1\n    if x>1:\n        for i in range(x+1):\n            if i==0 or i==1 or (i==x):\n                return i\n            elif i==x+1:\n                return i+1\n            else:\n                if i%(x+1)==0:\n                    return i\nfirst_Factorial_Divisible_Number(10)\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    if x==0:\n        return 0\n    n=1\n    while True:\n        if n%10!=0 and factorial(n)%x==0:\n            return n\n        n+=1\n\n\n# +", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    count = 1\n    while True:\n        if factorial(count) % x == 0:\n            return count\n        count += 1\n\ndef factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\n# def first_Factorial_Divisible_Number(x):\n#     n = 1\n#     while n < x:\n#         n = n + 1\n#         temp = n\n#         factorial = 1\n#         while temp > 1:\n#             factorial = factorial * temp\n#             temp = temp - 1\n#         if factorial % x == 0:\n#             return n\n\ndef first_Factorial_Divisible_Number(x):\n    return(n for n in range(1, x) if (n * factorial(n)) % x == 0)[0]\n", "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\n# Function to return the first natural number whose factorial is divisible by x\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if factorial(i) % x == 0:\n            break\n        i += 1\n    return i\n\n# Driver code"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuples_list, search_list):\n    tuples_list_copy = tuples_list[:]\n    tuples_list_copy.pop()\n    tuples_list_copy.pop()\n    return tuple(tuple(x for x in tuples_list_copy if x not in search_list))\n\ndef test_remove_matching_tuple():\n    tuples_list = [('Hello', 'dude'), ('How', 'are'), ('you', '?')]\n    search_list = [('Hello', 'dude'), ('How', 'are')]\n    assert remove_matching_tuple(tuples_list, search_list) == [('you', '?')]", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(l1, l2):\n    return [e for e in l1 if e not in l2]", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuple1, tuple2):\n    r = tuple1\n    for e in tuple2:\n        if tuple1.count(e) > 0:\n            r.remove(e)\n    return r\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuples, matching):\n    # Check if given tuple is a subsequence of the matching tuple\n    is_subsequence = lambda t: True if len(matching) == 0 else matching[0][1] == t[0] and is_subsequence(matching[1:])\n    return [t for t in tuples if not is_subsequence(t)]", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tup1, tup2):\n  result = []\n  for tuple in tup1:\n    for t in tup2:\n      if tuple == t:\n        break\n    else:\n      result.append(tuple)\n  return result\n\n# assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\nfrom typing import List, Tuple\n\n\ndef remove_matching_tuple(\n    first_tuple: List[Tuple[str, str]], second_tuple: List[Tuple[str, str]]\n) -> List[Tuple[str, str]]:\n    return [\n        element for element in first_tuple if element not in second_tuple\n    ]\n\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuples1, tuples2):\n    pass", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(tuple_1, tuple_2):\n    return tuple_1[1] not in tuple_2 and tuple_1 not in tuple_2\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple1, tuple2):\n    return [tuple for tuple in tuple1 if tuple not in tuple2]\n", "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuples, match_tuples):\n    #Write your code here\n    return list(filter(lambda x: x not in match_tuples, tuples))\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, size):\n    if size == 1:\n        return arr[0]\n\n    if size == 2:\n        return max(arr[0], arr[1])\n\n    for i in range(size - 1):\n        for j in range(i + 1, size):\n            palindrome = (arr[i] * 10 + arr[j]) ** 2\n            if palindrome > largest_palindrome(arr, j):\n                largest_palindrome = palindrome\n    return largest_palindrome", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\n# Solution 1: Brute force\ndef largest_palindrome_brute_force(array, len_array):\n    max_palindrome = -1\n    for i in range(len_array):\n        for j in range(i + 1, len_array):\n            if array[i] != array[j] and is_palindrome(array[i] * 10 + array[j]):\n                max_palindrome = max(max_palindrome, array[i] * 10 + array[j])\n    return max_palindrome\n\n# Solution 2: Memoization\ndef largest_palindrome_memoization(array, len_array):\n    memo = {}\n    def is_palindrome_helper(num):\n        if num < 0:\n            return False\n        if num == 0:\n            return True\n        if num in memo:\n            return memo[num]\n        else:\n            if num % 10 == 0:\n                return is_palindrome_helper(num // 10)\n            else:\n                result = is_palindrome_helper(num // 10) and is_palindrome_helper(num % 10)\n                memo[num] = result\n                return result\n    return largest_palindrome_helper(array[0] * 10 + array[len_array - 1])\n\n# Solution 3: Dynamic programming\ndef largest_palindrome_dp(array, len_array):\n    dp = [0] * len_array\n    dp[0] = 1\n    for i in range(len_array):\n        for j in range(i + 1, len_array):\n            if array[i] != array[j] and array[i] * 10 + array[j] <= 2 * 10 ** 9 and dp[i + 1] and dp[j - 1] == 1:\n                dp[i] = 1\n                dp[j] = 1\n                break\n    return max(dp) * 10 ** 9\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(array):\n    a = [int(i) for i in array]\n    n = len(a)\n    count = 0\n    i = 0\n    while i < n:\n        j = i\n        while j < n:\n            count += (a[i] ** 2)\n            if (a[i] * a[j]) < count:\n                count = a[i] * a[j]\n            j += 1\n        i += 1\n    return count\nlargest_palindrome([1, 232, 54545, 999991], 4)\n# no of decimal places\ndef largest_palindrome_with_precision(array, n):\n    count = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if (array[i] ** 2) + (array[j] ** 2) < (10 ** n):\n                count += (array[i] * array[j])\n    return count\nlargest_palindrome_with_precision([1, 232, 54545, 999991], 4)```\n\n### Output:\n\n<empty_output>\n\n### Description:\n\n**6.\tFind the smallest number such that each digit occurs exactly once in the given number**\n\n### Code:\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\nfrom functools import lru_cache\n\ndef largest_palindrome(arr, n):\n    @lru_cache(maxsize=None)\n    def get_palindrome(s, i, j):\n        if i == j:\n            return 0\n        if s[i] == s[j]:\n            return 1 + get_palindrome(s, i+1, j-1)\n        else:\n            return max(get_palindrome(s, i+1, j), get_palindrome(s, i, j-1))\n    return get_palindrome(arr, 0, len(arr)-1)", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, size):\n    import itertools\n    max_num = -1\n    for i in range(len(arr) - size):\n        for j in range(i + size, len(arr)):\n            num = int(''.join(map(str, itertools.product(arr[i:j+1], repeat = 1))))\n            if num > max_num:\n                max_num = num\n    return max_num\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\n# 999991\n# 119999\n# 111999\n# 111199\n# 111119\n# 111111\n# 999999\n\n\ndef largest_palindrome(arr: list, length: int) -> int:\n    for i in range(len(arr) - length + 1):\n        start = arr[i]\n        end = arr[i + length - 1]\n        value = start * 10 ** (length - 1) + end\n        if str(value)[::-1] == str(value):\n            return value\n    return -1\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(nums: list, n: int) -> int:\n    # Squared numbers have both the form and the property of being palindromes\n    # So, we'll try all the squared numbers from 10**n-1 to 10**n**2 and see\n    # which one has the highest palindrome product\n    for i in range(10**n-1, 10**n**2+1):\n        squared = i**2\n\n        # Iterating through every other number, we can check if a number is\n        # palindrome by checking the reverse of that number is equal to the\n        # original number\n        # Since the product of two numbers is a palindrome if and only if\n        # both the numbers are palindromes, we can also check if the product\n        # of two numbers is equal to the squared number, i.e. i**2\n        # If the product is not equal, we can stop because we know that the\n        # product will never be a palindrome\n        # We use a number called \"j\" to iterate through every other number\n        # because there are a lot of numbers and we want to be as efficient\n        # as possible\n        for j in range(10**n-1, 10**n**2+1):\n            product = i * j\n            if product != squared:\n                break\n            else:\n                # The product of two numbers is equal to the squared number\n                # If it's a palindrome, we can stop the loop and return the\n                # value of i*j\n                # Note that i*j will always be an even number\n                return i*j\n\n    # If no number in the range is palindrome, we'll return -1\n    return -1\n\ndef test_largest_palindrome():\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n    assert largest_palindrome([1000000, 999999, 888888, 77", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    largest = 0\n    for i in range(n):\n        for j in range(n):\n            product = arr[i] * arr[j]\n            if product > largest:\n                largest = product\n            elif product == largest:\n                largest = product\n                break\n    return largest\n\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, start, end):\n    if len(arr) == 0:\n        return -1\n    \n    if start == end:\n        return arr[start]\n    \n    if start + 1 == end:\n        return max(arr[start], arr[end])\n    \n    while start + 2 <= end:\n        a = arr[start]\n        b = arr[start+1]\n        c = arr[end]\n        d = arr[end-1]\n        \n        if (a * b == c * d) and (a >= c):\n            return max(a * b, c * d)\n        elif (a * b == c * d) and (a < c):\n            return max(a * b, c * d)\n        elif (a * b != c * d) and (a >= c):\n            return max(a * b, c * d)\n        elif (a * b != c * d) and (a < c):\n            return max(a * b, c * d)\n        \n        start += 1\n        end -= 1\n    \n    if start + 1 == end:\n        return max(arr[start], arr[end])\n", "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    arr = sorted(arr)\n    largest = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if (arr[i] * arr[j]) > largest:\n                largest = arr[i] * arr[j]\n            else:\n                break\n    return largest\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nfrom math import factorial\n\n\ndef binomial_probability(n, k, p):\n    return factorial(n) / (factorial(k) * factorial(n - k)) * pow(p, k) * pow(1 - p, n - k)\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    if p > 1.0 or p < 0.0:\n        print('p must be between 0.0 and 1.0')\n        return None\n    if k > n:\n        print('k must be less than n')\n        return None\n    return math.factorial(n) * math.pow(p, k) * math.pow(1.0 - p, n - k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    return factorial(n) / (factorial(k) * factorial(n-k)) * p**k * (1-p)**(n-k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(number, trials, success_rate):\n    \"\"\" Compute probability of given number of successes in n trials\n        with probability of success success_rate.\n    \"\"\"\n    return None\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nimport math\n\ndef binomial_probability(n, k, p):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * math.pow(p, k) * math.pow(1 - p, n - k)\n\n\n# assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    assert p <= 1.0\n    assert p >= 0.0\n    if p == 0.0:\n        return 0.0\n    else:\n        return math.pow(p, k) * math.pow((1.0 - p), (n - k)) / math.factorial(k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nfrom math import factorial\n\n\ndef binomial_probability(n, k, p):\n    return factorial(n) / (factorial(k) * factorial(n - k)) * p**k * (1.0 - p)**(n - k)\n\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(k, n, p):\n    \"\"\"\n    Return probability of k successes in n trials with p success probability.\n    \"\"\"\n    return math.factorial(n)/(math.factorial(k)*math.factorial(n-k)) * p**k * (1-p)**(n-k)\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nimport math\n\ndef binomial_probability(n, k, p):\n    return math.factorial(n) / math.factorial(k) * (p**k) * ((1 - p)**(n - k))\n", "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    return the binomial probability p^k * (1-p)^(n-k)\n    \"\"\"\n    return p**k * (1-p)**(n-k)\n\ndef binomial_cdf(n, k, p):\n    \"\"\"\n    return the binomial cumulative distribution function\n    \"\"\"\n    return sum(binomial_probability(n,i,p) for i in range(k,n+1))\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\nfrom operator import itemgetter\n\ndef sort_tuple(tup):\n    tup.sort(key=itemgetter(-1))\n    return tup\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuplist):\n    return sorted(tuplist, key=lambda tup:tup[1])\n\n#def sort_tuple(tuplist):\n#    return sorted(tuplist, key=lambda tup:(tup[1], tup[0]))\n\ndef main():\n    print('Input 1,3,2,1')\n    tuplist = [(1,3), (3,2), (2,1)]\n    print(sort_tuple(tuplist))\n    print('Input 1,3,2,2')\n    tuplist = [(1,3), (3,2), (2,2)]\n    print(sort_tuple(tuplist))\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    tuples = sorted(tuples, key = lambda x:x[-1], reverse = True)\n    return tuples\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(t):\n    t.sort(key=lambda x: x[1], reverse=True)\n    return t\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuple_list):\n    return sorted(tuple_list, key=lambda x:x[1])\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(t):\n    t.sort(key = lambda x:x[1])\n    return t\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    return sorted(tuples, key= lambda x: x[1], reverse = True)\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuple_list):\n    tuple_list.sort(key=lambda x: x[-1])\n    return tuple_list\n", "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    tuples.sort(key = lambda x: x[1])\n    return tuples"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(side):\n    assert isinstance(side, (int, float))\n    perimeter = 5 * side\n    return (3 * perimeter ** 2) / (10)\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(x):\n    return 25/2*x**2 - 20*x + 16.25", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    sum = 0\n    for i in range(0, n):\n        sum += 2 * math.sin(i*math.pi / (n+1))\n    return 2 * math.sin(math.pi / 5) * sum\n\ndef main():\n    # Test 1\n    assert area_pentagon(5)==43.01193501472417\n    # Test 2\n    assert area_pentagon(10)==130.02959967256635\n    # Test 3\n    assert area_pentagon(100)==14871695.94960311\n    # Test 4\n    assert area_pentagon(1000)==14857860.912173879\n    # Test 5\n    assert area_pentagon(10000)==14857348.384198302\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    if (n < 1):\n        raise ValueError(\"the number of sides must be greater than 0\")\n    return 5 * n * ((n * (n + 1)) / 2)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    result = (n*(n+1))/2*(3*(n**2)-(n**2))\n    return result\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    \"\"\"\n    Calculates the area of a pentagon with n sides\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be an integer greater than 0\")\n    elif n == 0:\n        return 0\n    else:\n        return (n**2) * (10/3) - (n**2) * (3/2)\n\ndef test():\n    assert area_pentagon(5)==43.01193501472417\n    print('OK')\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    return 5*(n**2) * math.sin(math.pi/n)\n\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    # height of the pentagon\n    h = n * math.sqrt(10 * (3 - math.sqrt(5)))\n    return h * (3 * (2 * math.sqrt(5) - 1)) / 2\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nimport math\n\ndef area_pentagon(n):\n    sum = 0.0\n    for i in range(n):\n        x = math.cos(i*2*math.pi/n)\n        y = math.sin(i*2*math.pi/n)\n        sum += (1/2)*(x+y)\n    return abs(sum)\n", "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\n# Solution\n\ndef area_pentagon(n):\n    s = n * (n * 8 - 3) / 2\n    return s\n\n\n# Tests\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(k,array):\n    if k==0:\n        return 0\n    max_freq =0\n    max_val = -1\n    for val in array:\n        if val not in array:\n            return 0\n        if val==max_val:\n            max_freq+=1\n        elif val>max_val:\n            max_freq = 1\n            max_val = val\n    return max_freq", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    freq = 0\n    largest = 0\n    for i in range(n):\n        if arr[i] > largest:\n            freq = 1\n            largest = arr[i]\n        elif arr[i] == largest:\n            freq += 1\n    return freq\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n, array):\n    if len(array) == 0:\n        return 0\n    highest = max(array)\n    count = 0\n    for i in range(len(array)):\n        if array[i] == highest:\n            count += 1\n    return count\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,a):\n    i=0\n    frequency=0\n    if len(a)>=n:\n        for j in range(n):\n            for k in range(j+1,len(a)):\n                if a[j]>a[k]:\n                    i=a[k]\n                    frequency+=1\n        return frequency", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,nums):\n    largest = nums[0]\n    counter = 0\n    for i in range(n):\n        if nums[i] > largest:\n            largest = nums[i]\n            counter = 1\n    return counter", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(arr):\n    return arr.count(max(arr))\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\n# take a list, take a number and find the maximum, and print the frequency\n\n\ndef frequency_Of_Largest(n, arr):\n    # Hint: Use a dictionary as a frequency counter.\n    #\n    # Hint: To find the maximum value in an array you can use\n    #       the max() function.\n\n    max_value = max(arr)\n    counter = 0\n    for x in arr:\n        if max_value == x:\n            counter += 1\n    return counter\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,arr):\n    \"\"\"\n    :param n: int, size of array\n    :param arr: list, list of integers\n    :return: int, frequency of the largest number in the list\n    \"\"\"\n    #your code here\n    pass\n\ndef test_frequency_Of_Largest():\n    \"\"\"\n    Run doctests\n    \"\"\"\n    assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n    assert frequency_Of_Largest(1,[1]) == 1\n    assert frequency_Of_Largest(1,[]) == 0\n\n", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n,numbers):\n    return 1", "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(array_size,array):\n    highest_value = max(array)\n    count = 0\n    for i in range(array_size):\n        if array[i] == highest_value:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\nfrom itertools import combinations\n\ndef extract_symmetric(t):\n    return set(combinations(t, 2))\n\nt = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuples):\n    res = set()\n    for i in tuples:\n        res.add((i[0], i[1]))\n    return res\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(list_of_tuples):\n    symmetric_pairs = set()\n    for i in list_of_tuples:\n        for j in list_of_tuples:\n            if i[0] == j[1]:\n                symmetric_pairs.add((i[0], j[0]))\n    return symmetric_pairs\n\ndef test_extract_symmetric():\n    input = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]\n    output = {(8, 9), (6, 7)}\n    assert extract_symmetric(input) == output\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\nfrom itertools import combinations\n\n\ndef extract_symmetric(tuple_list):\n    \"\"\"\n    >>> extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n    >>> extract_symmetric([(1, 2), (2, 3), (1, 3), (1, 1), (3, 3)]) == {(1, 2), (2, 3)}\n    >>> extract_symmetric([(1, 1), (2, 2), (3, 3)]) == set()\n    >>> extract_symmetric([(1, 1)]) == {(1, 1)}\n    \"\"\"\n    return set(combinations(tuple_list, 2))\n\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(arr):\n    return {frozenset(t) for t in arr}\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\n# +\ndef extract_symmetric(tuples):\n    result = {}\n    for x,y in tuples:\n        result[(x,y)] = result.get((y,x))\n    return result.keys()\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(t):\n    res = []\n    for a in t:\n        for b in t:\n            if b[0] == a[1] and b[1] == a[0]:\n                res.append((a, b))\n    return res\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuples):\n    return set([(a, b) for a, b in tuples if a == b])\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tuples):\n    return set(filter(lambda x: x[0] == x[1], tuples))\n", "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef extract_symmetric(tuples: List[Tuple[int]]) -> Set[Tuple[int]]:\n    symmetric_pairs = set()\n\n    for x, y in tuples:\n        if x == y:\n            symmetric_pairs.add((x, y))\n\n    return symmetric_pairs\n\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,d,n):\n    res = 0\n    for i in range(n):\n        res += a * (d ** i)\n    return res\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,r,n):\n    sum = a*(r**n)\n    return sum", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, r, n):\n  \"\"\"\n  Sum up the given series.\n  \n  Parameters:\n  a:     the first term in the series\n  r:     the common ratio\n  n:     the number of terms\n  \n  Returns:\n  the sum of the series\n  \"\"\"\n  return ((a - 1) * (r ** (n - 1)) + (n - 1) * r) * (1 / (1 - r))\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\nimport math\n\ndef sum_gp(a, b, r):\n    \"\"\"\n    Given a, b, and r, find and return the sum of the GP\n    \"\"\"\n    if b <= 0:\n        raise ValueError(\"Please enter positive integers.\")\n    elif a == 0:\n        return 0\n    elif r == 0:\n        raise ValueError(\"Please enter non-zero values for 'r'.\")\n    elif r == 1:\n        return a * b // 2\n    else:\n        return (sum_gp(a, b, r - 1) * a + sum_gp(a, b, r - 2) * b) // 2\n\ndef test_sum_gp():\n    assert sum_gp(1,5,2) == 31\n\ntest_sum_gp()", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(first,last,step):\n    num=0\n    for i in range(first,last+1,step):\n        num+=i\n    return num\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(first,last,step):\n    #TODO\n    total = 0\n    for i in range(first,last,step):\n        total = total + i\n    return total\n\ndef test_sum_gp():\n    assert sum_gp(1,5,2)==31\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(x,y,r):\n    s=0\n    while x<y:\n        s+=x\n        x*=r\n    return s\n\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\nimport unittest\n\ndef sum_gp(a,r,n):\n    sum = 0\n    for i in range(n+1):\n        sum = sum + a*(r**i)/i\n    return sum\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,r,n):\n    return (a-1)/r * (r**n - 1)\n", "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(first_term,common_ratio,n):\n    if n==0:\n        return 0\n    else:\n        return first_term+(n-1)*sum_gp(first_term,common_ratio,n-1)\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, target):\n    low = 0\n    high = len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == target:\n            return True\n\n        if array[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return False\n\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, val):\n    start = 0\n    end = len(arr)-1\n    mid = 0\n    while start <= end:\n        mid = (start+end)//2\n        if val == arr[mid]:\n            return True\n        elif val < arr[mid]:\n            end = mid-1\n        else:\n            start = mid+1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\nfrom typing import List, Optional\n\ndef binary_search(arr: List[int], target: int) -> Optional[int]:\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(array, item):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high)//2\n        if array[mid] == item:\n            return True\n        elif array[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, ele):\n    # Write your code here.\n    if len(arr) == 0:\n        return False\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == ele:\n            return True\n        elif arr[mid] > ele:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start)//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, val):\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid] == val:\n            return True\n        elif val < arr[mid]:\n            end = mid-1\n        else:\n            start = mid+1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, x):\n    if len(arr) == 0:\n        return False\n    else:\n        return binary_search_recursive(arr, x, 0, len(arr)-1)\n\ndef binary_search_recursive(arr, x, start_index, end_index):\n    if start_index > end_index:\n        return False\n    else:\n        mid_index = (start_index + end_index) // 2\n        mid_element = arr[mid_index]\n        if mid_element == x:\n            return True\n        else:\n            if mid_element > x:\n                return binary_search_recursive(arr, x, start_index, mid_index-1)\n            else:\n                return binary_search_recursive(arr, x, mid_index+1, end_index)\n\ndef binary_search_iterative(arr, x):\n    if len(arr) == 0:\n        return False\n    start_index = 0\n    end_index = len(arr) - 1\n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n        mid_element = arr[mid_index]\n        if mid_element == x:\n            return True\n        elif mid_element > x:\n            end_index = mid_index - 1\n        else:\n            start_index = mid_index + 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(array, element):\n    left = 0\n    right = len(array) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == element:\n            return True\n        elif array[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n", "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(array, search_item):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if array[mid] == search_item:\n            return True\n        elif array[mid] < search_item:\n            low = mid + 1\n        elif array[mid] > search_item:\n            high = mid - 1\n    return False\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(b):\n    if len(b) == 0:\n        return '0'\n    return str(int(b[0], 2)) + binary_to_integer(b[1:])\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(tuple):\n    return \"\".join([str(num) for num in tuple])\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n  assert type(binary) == tuple\n  return binary_to_integer_recursive(binary, 0)\n\ndef binary_to_integer_recursive(binary, integer_so_far):\n  if len(binary) == 1:\n    return str(integer_so_far)\n  else:\n    return binary_to_integer_recursive(binary[1:], (2*integer_so_far) + int(binary[0]))\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    binary = [int(x) for x in binary]\n    #binary.sort()\n    return ''.join([str(x) for x in binary])\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(bin_tuple):\n    result = \"\"\n    for index, x in enumerate(bin_tuple):\n        result += str(int(x))\n        if index != len(bin_tuple)-1:\n            result += \"\"\n    return result\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary):\n    return int(\"\".join(str(x) for x in binary), 2)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(t):\n    return int(''.join(str(i) for i in t), 2)\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(num):\n    return ''.join(str(i) for i in num)\n\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n", "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\nfrom typing import Tuple\n\n\ndef binary_to_integer(binary: Tuple[bool, ...]) -> str:\n    return ''.join(str(binary[i]) for i in range(len(binary)))\n\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\n\ndef remove_lowercase(s):\n    s = re.sub(r'([A-Z][a-z]+)', r'\\1', s)\n    return s\n\n\ndef remove_lowercase_v2(s):\n    return \"\".join(re.sub(r'([A-Z][a-z]+)', r'\\1', s))\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\ndef remove_lowercase(str):\n    \"\"\"\n    :param str: the string to remove lowercase substrings from\n    :return: the string with lowercase substrings removed\n    \"\"\"\n    pattern = r\"([A-Z][a-z]+)\"\n    return re.sub(pattern, '', str)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(s):\n    return ''.join(re.sub('[^a-zA-Z]', '', s))\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\n\ndef remove_lowercase(string):\n    return re.sub(r\"[a-z]+\", \"\", string)\n\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\ndef remove_lowercase(string):\n    string = re.sub(r'([a-z])', r'\\1', string)\n    return string\n\n\n# \"\"\"\n# Write a function that determines if a given string contains an odd number of characters.\n# assert is_odd('Mmmm') == False\n# assert is_odd('MmmmOOOO') == True\n# assert is_odd('mmmMmmmmmM') == True\n# assert is_odd('mmmm') == False\n# \"\"\"\n\ndef is_odd(string):\n    string = string.split()\n    if len(string) % 2 != 0:\n        return True\n    else:\n        return False\n\n\n# \"\"\"\n# Write a function to remove all the whitespace characters from a given string.\n# assert remove_whitespace('   Hello world   ') == 'Hello world'\n# assert remove_whitespace('Hello world') == 'Hello world'\n# \"\"\"\n\ndef remove_whitespace(string):\n    string = string.replace(\" \", \"\")\n    return string\n\n\n# \"\"\"\n# Write a function to remove leading whitespace from a given string.\n# assert remove_leading_whitespace('Hello   world') == 'Hello world'\n# assert remove_leading_whitespace('Hello world') == 'Hello world'\n# \"\"\"\n\ndef remove_leading_whitespace(string):\n    string = string.lstrip()\n    return string\n\n\n# \"\"\"\n# Write a function to remove trailing whitespace from a given string.\n# assert remove_trailing_whitespace('Hello world   ') == 'Hello world'\n# assert remove_trailing_whitespace('Hello world') == 'Hello world'\n# \"\"\"\n\ndef remove_trailing_whitespace(string):\n    string = string.rstrip()\n    return string\n\n\n# \"\"\"\n# Write a function to check if a string is a palindrome.\n# assert is_palindrome('radar') == True\n# assert is_palindrome('abc') == True\n# assert is_palindrome('abcddcba') == True\n# assert is_palindrome('abcba') == True\n# assert is", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(text):\n    return re.sub('[a-z]+', '', text)\n", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\ndef remove_lowercase(s):\n    pattern = r'(\\w)*[a-z](\\w)*'\n    return re.sub(pattern, lambda match: match.group()[1:], s)", "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(text):\n    regex = re.compile(r'\\b[a-z]\\w*\\b')\n    return regex.sub('', text)\n\n# Test cases"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n#function for heap queue\ndef heapify(arr, n, i):\n    largest = i\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < n and arr[l] > arr[largest]:\n        largest = l\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n#function for heap queue\ndef heap_queue_smallest(arr,n):\n    #create max heap\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n        \n    #get and remove root\n    result = []\n    for i in range(n):\n        result.append(arr.pop(0))\n    return result\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nfrom heapq import *\ndef heap_queue_smallest(numbers, k):\n    heappush_list = []\n    for i in numbers:\n        heappush(heappush_list, (i, -1))\n    for _ in range(k):\n        heappop(heappush_list)\n    return [i[0] for i in heappush_list]", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(arr,k):\n    if k>len(arr):\n        return []\n    n=len(arr)\n    #Build heap\n    h=arr.copy()\n    for i in range(len(h)//2):\n        build_heap(h,n,i)\n    i=0\n    result=[]\n    while k>0:\n        result.append(h[0])\n        heap_extract(h,n,0)\n        k=k-1\n    return result\n\n\n# +\n#TEST CASES\ndef heap_queue_smallest_test():\n    print(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],3))\n    print(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],5))\n    print(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],6))\n    print(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],10))\n    print(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],15))\n    print(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58],16))\n    print(heap_queue_smallest([25, 35,", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n# Python program to implement heap queue \nimport heapq \n# Minheap: smallest element is root element \n# The left child of root element is smaller than root \n# The right child of root element is smaller than root \ndef heap_queue_smallest(arr, n): \n      \n    # Create a max heap \n    min_heap = [] \n  \n    # push all the elements in the array \n    # to the min heap \n    for i in range(n): \n        heapq.heappush(min_heap, arr[i]) \n  \n    # Create a new list \n    result = [] \n  \n    # Extract all elements from the min heap \n    while len(min_heap) > 0: \n        result.append(heapq.heappop(min_heap)) \n  \n    # return the list \n    return result\n\n# Driver code to test the above function \narr = [25, 35, 22, 85, 14, 65, 75, 25, 58] \nn = len(arr) ", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nfrom heapq import nsmallest\ndef heap_queue_smallest(numbers,k):\n    if numbers is None:\n        return None\n    else:\n        if k > len(numbers):\n            k = len(numbers)\n        return nsmallest(k,numbers)\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(arr,k):\n    heap = []\n    if(len(arr)==0 or k > len(arr)):\n        return -1\n    for i in range(0,len(arr)):\n        heapq.heappush(heap,arr[i])\n        if(len(heap) > k):\n            heapq.heappop(heap)\n    result = []\n    while(len(heap) > 0):\n        result.append(heapq.heappop(heap))\n    return result\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n# python program for implementation of heap queue\nimport heapq\n\n\ndef heap_queue_smallest(list, k):\n    h = list\n    heapq.heapify(h)\n    print(heapq.nsmallest(k, h))\n\n\n# +\n#python program for implementation of heap queue using recursion\nimport heapq\n\n\ndef heap_queue_smallest_recursive(list, k):\n    if not list or k <= 0:\n        return []\n    smallest = []\n    while list:\n        smallest.append(list.pop(0))\n        if len(smallest) == k:\n            break\n    if len(smallest) < k:\n        return heap_queue_smallest_recursive(list, k - len(smallest))\n    return smallest\n\n\n# -\n\nheap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n\nheap_queue_smallest_recursive([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n\n# # 5. Sorting a list\n\n# +\n# Sorting a list\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(num_list, k):\n    num_list.sort()\n    for i in range(k):\n        heapq.heappush(heap, num_list.pop())\n\n    return heapq.nsmallest(k, heap)\n", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(arr,k):\n    n = len(arr)\n    heap = []\n    for i in range(n):\n        heappush(heap, (arr[i], i))\n    result = []\n    for i in range(k):\n        result.append(heappop(heap)[1])\n    return result", "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nfrom heapq import heappop, heappush\n\ndef heap_queue_smallest(input, n):\n    h=[]\n    for i in input:\n        heappush(h,i)\n        if len(h)>n:\n            heappop(h)\n            \n    return h\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\nimport math\n\ndef surfacearea_cone(radius, height):\n    assert height > 0, 'Height must be positive'\n    assert radius > 0, 'Radius must be positive'\n    assert height >= 2 * radius, 'Height must be larger than 2 radius'\n    return (1/3) * math.pi * radius**2 * (math.sqrt(height**2 + radius**2) + height)\n\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius,height):\n    assert type(radius)==int and type(height)==int\n    pi=3.14159\n    area=pi*radius**2*(1+1/3)\n    return area\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    pass\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    import math\n    return math.pi*radius**2 + math.pi*radius**2*math.tan(math.radians(360/365))\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    pi = 3.14\n    result = (pi * radius**2 + pi * radius**2 * (3*cos(radians(360/360))-1) + pi * radius**2 * (3*cos(radians(360/360))-1)*height)/3\n    return round(result,3)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nfrom math import pi\n\ndef surfacearea_cone(r,h):\n    \"\"\"\n    :param r: radius\n    :param h: height\n    :return: surface area\n    \"\"\"\n    return pi * r * r + pi * r * h\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    return pi * radius ** 2 + pi * radius * (radius + height)\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\nfrom math import pi\n\ndef surfacearea_cone(radius, height):\n    # Surface area of a cone = pi * radius^2 + pi * radius^2 * cos^(-1) (h/r)\n    return pi * radius ** 2 + pi * radius ** 2 * (1 - (height / radius)) ** (-1)\n\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(base, height):\n    surfacearea = 3.14*base*height + (3.14*base*height)/3\n    return surfacearea\n", "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius,height):\n    pi=3.14\n    return pi*(radius**2)*(3*pi/(1+pi**2)) + pi*(radius**2)*(height**2)/(1+pi**2)\n\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    \"\"\"Return gcd of two positive integers a, b.\n    Note: gcd(0, b) = gcd(b, 0) = b, and gcd(a, 0) = gcd(0, a) = 0.\n    \"\"\"\n    # YOUR CODE HERE\n    while (b):\n        a, b = b, a % b\n    return a", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a,b):\n    while b != 0:\n        a,b = b,a % b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a%b\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while a != b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n\n#assert gcd(12, 17) == 1", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(m, n):\n    if m > n:\n        m, n = n, m\n    while m != 0:\n        n, m = m, n % m\n    return n\n\ndef test():\n    assert gcd(12, 17) == 1\n    assert gcd(18, 18) == 18\n    assert gcd(24, 36) == 6\n\ntest()", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a,b):\n    \"\"\"gcd of two positive integers\"\"\"\n    if a>b:\n        temp=a\n        a=b\n        b=temp\n    while b!=0:\n        temp=a%b\n        a=b\n        b=temp\n    return a\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a < b:\n        return gcd(a, b % a)\n    else:\n        return gcd(b, a % b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n", "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\n# Solution:\n\n# +\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Test Code:"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    return 2 * r\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return 2 * radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nfrom math import sqrt\n\n\ndef diameter_circle(radius):\n    return 2 * radius * sqrt(3)\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    return 2 * r\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    \"\"\"\n    >>> diameter_circle(10)\n    20\n    >>> diameter_circle(2)\n    4\n    \"\"\"\n    return radius * 2\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\n\ndef diameter_circle(radius):\n    return math.pi * radius * 2\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    return 2*radius\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(r):\n    \"\"\"\n    Input radius of circle\n    Output diameter of circle\n    \"\"\"\n    diameter = 2 * r\n    return diameter\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    \"\"\"\n    This function takes a radius of the circle and returns the diameter.\n    \n    Parameters:\n    radius - the radius of the circle\n    \"\"\"\n    diameter = 2*radius\n    return diameter\n\n", "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(r):\n    return 2 * r\n\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(mylist):\n    return '  '.join(mylist)", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(lst):\n    return ' '.join(lst)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(list):\n  return \"  \".join(list)\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(input_list):\n    output = ''\n    for element in input_list:\n        output += ' ' + element\n    return output\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n# Write your solution here\ndef concatenate_elements(string_list):\n    return ' '.join(string_list)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\nimport unittest\n\n\ndef concatenate_elements(mylist):\n    new_list = []\n    for i in range(len(mylist)):\n        new_list.append(\" \" + mylist[i])\n    new_string = \"\".join(new_list)\n    return new_string\n\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\n# def concatenate_elements(my_list):\n#     result = ''\n#     for element in my_list:\n#         result += element + ' '\n#     return result\n\n# def concatenate_elements(my_list):\n#     result = ' '.join(my_list)\n#     return result\n\ndef concatenate_elements(my_list):\n    \"\"\"\n    Concatenates the given list into a string.\n    \"\"\"\n    result = ''\n    for element in my_list:\n        result += element + ' '\n    return result\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list_):\n    return ' '.join(list_)\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(list):\n    if len(list) == 0:\n        return ''\n    return ' ' + list[0] + concatenate_elements(list[1:])\n", "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(list):\n    return ' '.join(list)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1, num2):\n    if num1 == 0:\n        return num2\n    if num2 == 0:\n        return num1\n    if num1 % num2 == 0:\n        return num2\n    if num2 % num1 == 0:\n        return num1\n    else:\n        return num_comm_div(num2, num1 % num2)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return num_comm_div(a-b,b)\n    return num_comm_div(a,b-a)", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1, num2):\n    if(num1 == 0 or num2 == 0):\n        return 0\n    elif(num1 == num2):\n        return num1\n    else:\n        if(num1 > num2):\n            return num_comm_div(num1 - num2, num2)\n        else:\n            return num_comm_div(num1, num2 - num1)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(n1, n2):\n    if n2 > n1:\n        return num_comm_div(n2, n1)\n    while n1 > 0:\n        if n1 % n2 == 0:\n            return n2\n        n1 = n1 - n2\n        if n1 > 0:\n            return num_comm_div(n2, n1)\n\ndef main():\n    print(num_comm_div(2,4))\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if a == b:\n        return b\n    else:\n        return num_comm_div(b % a, a)", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1, num2):\n    div_num = num1//num2\n    rem_num = num1 % num2\n    return div_num if rem_num == 0 else num_comm_div(num2, rem_num)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(a,b):\n    #\n    return (a*b)/gcd(a,b)\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1,num2):\n    # Your code here\n    # should return common divisor between num1, num2\n    #\n    # Hint : try using a while loop\n    #\n    if num1>num2:\n        return num_comm_div(num2,num1)\n    if num1==num2:\n        return num1\n    x=num2\n    while num1!=0:\n        if num1%x==0:\n            return x\n        else:\n            x=x-1\n    return 1\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1, num2):\n    if num1 == 0 or num2 == 0:\n        return 0\n    \n    common = 1\n    while num1 > 0 and num2 > 0:\n        if num1 > num2:\n            common = common * num2\n            num1 -= num2\n        else:\n            common = common * num1\n            num2 -= num1\n    return common\n", "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if a%b == 0:\n        return b\n# def num_comm_div(a,b):\n#     for i in range(b,1,-1):\n#         if a%i == 0:\n#             return i"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    return a%b\n\n\n# +\n#Test Case 1", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x,y):\n    return x % y\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    if a < b:\n        a, b = b, a\n    while a > 0:\n        a, b = b % a, a\n    return b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    return a%b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(num1, num2):\n    result = num1 % num2\n    return result\n\ndef test_find():\n    assert find(3,3) == 0\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    # write your code here\n    return a % b\n\n# write your tests here", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    '''\n    This function returns the remainder of dividing a by b\n    '''\n    if a > b:\n        temp = a\n        a = b\n        b = temp\n    if a == 0:\n        return b\n    return find(a,b-a)\n\n#test cases", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    return a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    if a == b:\n        return 0\n    else:\n        return a % b\n", "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a,b):\n    if a<0:\n        return (a+b)%b\n    return (a-b)%b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    n = len(nums)\n    if n <= 2:\n        return nums\n\n    out = []\n    for i in range(n):\n        out.append(nums[i])\n        if i < n-1:\n            out.append(nums[i] + nums[i+1])\n    return out\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(lst):\n    return [x+y for x,y in zip(lst, lst[1:])]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(list_):\n    if len(list_) == 1:\n        return list_\n    else:\n        return add_consecutive_nums(list_) + [list_[-1] + list_[-2]]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    return [i+j for i, j in zip(nums,nums[1:])]", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(list_):\n    return [x+i for i, x in enumerate(list_)]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(lst):\n    if lst[0]==0:\n        return lst\n    else:\n        return lst[0]+add_consecutive_nums(lst[1:])\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(input_list):\n    output = []\n    if len(input_list) == 0:\n        return output\n    else:\n        if len(input_list) == 1:\n            return input_list\n        else:\n            output.append(input_list[0])\n            for i in range(1, len(input_list)):\n                output.append(input_list[i] + output[i-1])\n    return output\n\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(l):\n    return [a + b for a, b in zip(l, l[1:])]\n", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    for index in range(1, len(nums)):\n        nums[index] += nums[index - 1]\n    return nums", "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\nfrom itertools import accumulate\n\ndef add_consecutive_nums(l):\n    # You can do this without a loop.\n    return list(accumulate(l))\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return 1**3 + 2**3 + 3**3 + 4**3 + 5**3 + 6**3 + 7**3 + 8**3 + 9**3 + 10**3 + 11**3 + 12**3 + 13**3 + 14**3 + 15**3 + 16**3 + 17**3 + 18**3 + 19**3 + 20**3 + 21**3 + 22**3 + 23**3 + 24**3 + 25**3 + 26**3 + 27**3 + 28**3 + 29**3 + 30**3 + 31**3 + 32**3 + 33**3 + 34**3 + 35**3 + 36**3 + 37**3 + 38**3 + 39**3 + 40**3 + 41**3 + 42**3 + 43**3 + 44**3 + 45**3 + 46**3 + 47**3 + 48**3 + 49**3 + 50**3 + 51**3 + 52**3 + 53**3 + 54**3 + 55**3 + 56**3 + 57**3 + 58**3 + 59**3 + 60**3 + 61**3 + 62**3 + 63**3 + 64**3 + 65**3 + 66**3 + 67**3 + 68**3 + 69**3 + 70**3 + 71**3 + 72**3 + 73**3 + 74**3 + 75**3 + 76**3 + 77**3 + 78**3 + 79**3 +", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    if n == 1:\n        return 1\n    else:\n        return (n + sum_Of_Series(n-1))**3\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    total = 0\n    for i in range(1, n + 1):\n        total = total + i ** 3\n    return total\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    # Start with the 1st number\n    sum = 1\n    # Add the first n numbers\n    for i in range(1, n+1):\n        # Find the cube of current number\n        cube = i**3\n        # Add the cube to the sum\n        sum += cube\n    return sum\n\n\ndef test_sum_Of_Series():\n    assert sum_Of_Series(5) == 225\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\nimport unittest\n\ndef sum_Of_Series(n):\n    if n == 1:\n        return 1\n    else:\n        return n**3 + sum_Of_Series(n-1)\n\ndef sum_Of_Series_Recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n**3 + sum_Of_Series_Recursive(n-1)\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    x = 0\n    for i in range(n+1):\n        x += i**3\n    \n    return x\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + i**3\n        i = i + 1\n    return sum\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return sum([x**3 for x in range(1,n+1)])\n\n", "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    zero_count = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = arr[i]\n    for i in range(len(arr) - zero_count):\n        arr[i] = arr[len(arr) - zero_count + i]\n    return arr", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    start = 0\n    for end in range(len(arr)):\n        if arr[end] != 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(nums):\n    if nums == []:\n        return nums\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    new_array = [nums[-non_zero_count:]] * non_zero_count\n    new_array.extend(nums[:zero_count])\n    return new_array\n\n# test\nnums = [6, 0, 8, 2, 3, 0, 4, 0, 1]", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    zero_index = 0\n    for i, num in enumerate(arr):\n        if num != 0:\n            arr[zero_index] = num\n            zero_index += 1\n\n    while zero_index < len(arr):\n        arr.append(0)\n        zero_index += 1\n\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    new_arr = []\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            new_arr.append(arr[i])\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            new_arr.append(arr[i])\n    return new_arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    new_arr = arr[:]\n    zeroes = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeroes += 1\n    while zeroes:\n        i = len(new_arr) - zeroes\n        new_arr[i - zeroes] = arr[i]\n        del arr[i]\n        zeroes -= 1\n    return new_arr\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = re_order(arr)\n    if sum(arr) != sum(solution):\n        return False\n    else:\n        return True\n\ntest_case1 = ([6, 0, 8, 2, 3, 0, 4, 0, 1], [6, 8, 2, 3, 4, 1, 0, 0, 0])\ntest_case2 = ([0], [0])\ntest_case3 = ([9], [9])\ntest_case4 = ([9, 1, 0, 1, 9], [9, 1, 1, 0, 9])\ntest_case5 = ([1, 0], [1, 0])\ntest_case6 = ([1, 9, 9, 9, 9], [1, 9, 9, 9, 9])\ntest_case7 = ([1, 9, 9, 9, 0], [1, 0, 9, 9, 9])\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\nimport pytest\n\n\ndef re_order(a):\n    # if a = [6, 0, 8, 2, 3, 0, 4, 0, 1]\n    # then we need to make it to [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    i = 0\n    while i < len(a):\n        if a[i] == 0:\n            a.pop(i)\n            a.insert(len(a), 0)\n            i -= 1\n        i += 1\n    return a\n\n\ndef test_re_order():\n    assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    assert re_order([2, 3, 4, 0]) == [2, 3, 4, 0]\n\n\ndef test_re_order_raise():\n    with pytest.raises(ValueError):\n        re_order([5, 4, 0])\n\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            j = i\n            while j<len(arr)-1:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                j = j+1\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    start = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            if i != start:\n                arr[i], arr[start] = arr[start], arr[i]\n            start += 1\n    for i in range(start, len(arr)):\n        arr[i] = 0\n    return arr\n", "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\n# This function should return a list with the values sorted in ascending order, \n# and all the zeroes moved to the end of the list.\ndef re_order(array):\n    array.sort()\n    zero_count = 0\n    new_array = []\n    for i in array:\n        if i != 0:\n            new_array.append(i)\n        else:\n            zero_count += 1\n    new_array.extend([0] * zero_count)\n    return new_array\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nfrom itertools import permutations\n\n\ndef permutation_coefficient(n, k):\n    p = permutations(range(1, k + 1), k)\n    coeff = 0\n    for perm in p:\n        if perm == list(range(1, k + 1)):\n            coeff += 1\n    return coeff\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nimport math\ndef permutation_coefficient(n, k):\n    # Return the permutation coefficient of p(n, k)\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(n):\n    # Return the factorial of n\n    if n == 0:\n        return 1\n    return factorial(n - 1) * n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    result = 0\n    for i in range(1, k + 1):\n        result += factorial(n - 1) // (factorial(i - 1) * factorial(n - i))\n    return result\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    result = 1\n    for i in range(n-k+1):\n        result *= n - i\n    return result\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    p = 1\n    for i in range(k):\n        p = p * (n - i) / (i + 1)\n    return p\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\nimport itertools as it\nfrom itertools import combinations as comb\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    :param n: Number of samples\n    :param k: Number of features\n    :return: Permutation coefficient of given p(n, k)\n    \"\"\"\n\n    s = it.permutations(range(k))\n    return sum([comb(n, i) for i in s])\n\n\ndef test_permutation_coefficient():\n    \"\"\"\n    Run test cases to check the accuracy of permutation_coefficient()\n    \"\"\"\n    assert permutation_coefficient(10, 2) == 90", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nfrom itertools import permutations\nfrom typing import List\nfrom functools import reduce\n\n# This function returns the coefficient of p(n, k)\ndef permutation_coefficient(n, k):\n    res = 1\n\n    # Calculate the factorial of n\n    n_fact = reduce(lambda x, y: x * y, range(1, n + 1))\n\n    # Calculate the number of ways to choose k elements from n\n    k_fact = reduce(lambda x, y: x * y, range(1, k + 1))\n\n    # Calculate the factorial of (n - k)\n    n_minus_k_fact = reduce(lambda x, y: x * y, range(1, n - k + 1))\n\n    # Calculate the number of ways to choose n - k elements from n\n    n_minus_k_fact = reduce(lambda x, y: x * y, range(1, n - k + 1))\n\n    # Calculate the number of ways to arrange k elements into n\n    res = n_fact // (k_fact * n_minus_k_fact)\n\n    # Return the result\n    return res\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    p = permutations(range(n), k)\n    c = count(p)\n    return c\n\n", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    from math import factorial\n    a = factorial(n) / factorial(n-k) / factorial(k)\n    return a\n\n# assert permutation_coefficient(10, 2) == 90", "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    # your code here\n    pass\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words,exclude):\n    return [word for word in words if word not in exclude]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(word_list, removal_list):\n    return [w for w in word_list if w not in removal_list]", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words,remove):\n    for word in remove:\n        for w in words:\n            if w == word:\n                words.remove(word)\n    return words\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(l, s):\n    return [e for e in l if e not in s]\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, remove):\n    filtered_list = []\n    for word in words:\n        if word not in remove:\n            filtered_list.append(word)\n    return filtered_list", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(L,W):\n    l=[]\n    for i in L:\n        if i not in W:\n            l.append(i)\n    return l\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(text_list,word_list):\n    '''\n    Input: text_list = ['red', 'green', 'blue', 'white', 'black', 'orange'], word_list = ['white', 'orange']\n    Output: ['red', 'green', 'blue', 'black']\n    '''\n    text_list_clean = []\n    for word in text_list:\n        if word not in word_list:\n            text_list_clean.append(word)\n    return text_list_clean\n\ndef remove_words_with_list(text_list,word_list):\n    '''\n    Input: text_list = ['red', 'green', 'blue', 'white', 'black', 'orange'], word_list = ['white', 'orange']\n    Output: ['red', 'green', 'blue', 'black']\n    '''\n    new_list = []\n    for word in text_list:\n        if word not in word_list:\n            new_list.append(word)\n    return new_list\n", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(wordlist, words):\n    newlist=[]\n    for word in wordlist:\n        if word not in words:\n            newlist.append(word)\n    return newlist", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words_list, words_to_remove):\n    new_list = []\n    for word in words_list:\n        if word not in words_to_remove:\n            new_list.append(word)\n    return new_list", "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(arr,words_to_remove):\n    return [word for word in arr if word not in words_to_remove]\n\narr = ['red', 'green', 'blue', 'white', 'black', 'orange']\nwords_to_remove = ['white', 'orange']\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(a,b):\n    count=0\n    for i in a:\n        if i in b:\n            b.remove(i)\n            count=count+1\n    if count==len(a):\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(a,b):\n    a.sort()\n    b.sort()\n    if a==b:\n        return True\n    else:\n        return False\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(l1,l2):\n\ttry:\n\t\treturn l1==sorted(l2)==sorted(l1)\n\texcept:\n\t\treturn False\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1,list2):\n    if len(list1)!=len(list2):\n        return False\n    else:\n        list1=list(set(list1))\n        list2=list(set(list2))\n        list1.sort()\n        list2.sort()\n        if list1==list2:\n            return True\n        else:\n            return False\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(a,b):\n    if len(a)!=len(b):\n        return False\n    else:\n        counter_a=0\n        counter_b=0\n        while counter_a<len(a):\n            if a[counter_a]==b[counter_b]:\n                counter_a+=1\n                counter_b+=1\n            elif a[counter_a] < b[counter_b]:\n                return False\n            else:\n                return False\n        return True", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    # your code goes here\n    # print(list1)\n    # print(list2)\n    # print(sorted(list1))\n    # print(sorted(list2))\n    # print(sorted(list1) == sorted(list2))\n    return sorted(list1) == sorted(list2)\n\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1,list2):\n    if len(list1) != len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    if len(list1) != len(list2):\n        return False\n    dict1 = {}\n    dict2 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in list2:\n        if i in dict2:\n            dict2[i] += 1\n        else:\n            dict2[i] = 1\n    for k in dict1.keys():\n        if k in dict2.keys():\n            if dict1[k] != dict2[k]:\n                return False\n    return True", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(A,B):\n    #A = [1,2,3,4,5]\n    #B = [3,5,6,7,8]\n    #AB = [3,5,6,7,8]\n    AB = list(set(A) & set(B))\n    AB.sort()\n    #print(AB)\n    if A == AB:\n        return True\n    else:\n        return False\n", "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(l1,l2):\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = l1.intersection(l2)\n    return (l3==l1)==(l3==l2)\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(num):\n    if num%2!=0:\n        num_odd=0\n        for i in range(1,num+1):\n            if i%2!=0:\n                num_odd=num_odd+i\n        return num_odd/num\n    else:\n        return \"The number is even\"\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n# A Function to find the average of odd numbers till a given odd number\ndef average_Odd(n):\n    odd_number_list = []\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            odd_number_list.append(i)\n    if odd_number_list:\n        return sum(odd_number_list)/len(odd_number_list)\n    else:\n        return None", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    # your code here\n    if n==0:\n        return 0\n    sum = 0\n    i=1\n    while i<n:\n        if i%2!=0:\n            sum+=i\n        i+=1\n    return sum/n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n\tsum = 0\n\tcount = 0\n\tfor i in range(1,n+1):\n\t\tif i % 2 != 0:\n\t\t\tsum += i\n\t\t\tcount += 1\n\treturn sum / count", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(num):\n  # your code goes here\n  count = 0\n  sum = 0\n  for i in range(1,num+1):\n    if i % 2 == 1:\n      count += 1\n      sum += i\n  return sum/count\n\n#assert average_Odd(9) == 5\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(number):\n    \"\"\"\n    :param number: A positive odd integer\n    :return: The average of odd numbers less than or equal to number\n    \"\"\"\n    if number % 2 == 0:\n        return -1\n    else:\n        sum = 0\n        for i in range(1, number + 1, 2):\n            sum += i\n        return sum/number\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n#Solution\ndef average_Odd(num):\n    odd_sum = 0\n    for i in range(1, num+1, 2):\n        odd_sum = odd_sum + i\n    return odd_sum/2\n\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    odd_list = [x for x in range(1,n+1) if x%2==1]\n    #odd_list = [x for x in range(1, n+1) if x%2==1]\n    total = sum(odd_list)\n    average = total/len(odd_list)\n    return average\n\n\n# +", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    return (n-1)/2\n", "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    sum = 0\n    count = 0\n    for i in range(1,n):\n        if i%2 != 0:\n            sum += i\n            count += 1\n    return sum/count\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\n# my solution\ndef no_of_subsequences(arr, k):\n    dp = [0 for _ in range(len(arr)+1)]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            prod = 1\n            for val in arr[i:j]:\n                prod *= val\n            dp[j] += dp[i] if prod < k else 0\n    return dp[-1]\n\n# a better solution\ndef no_of_subsequences(arr, k):\n    return sum(1 for prod in product(arr, repeat=2) if prod[0] * prod[1] < k)\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nfrom math import factorial\n\n\ndef no_of_subsequences(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    def helper(arr, k, idx, current_product, product_less_than_k_count):\n        if idx == len(arr):\n            product_less_than_k_count.append(current_product)\n        else:\n            helper(arr, k, idx+1, current_product*arr[idx], product_less_than_k_count)\n            if k >= current_product*arr[idx]:\n                helper(arr, k, idx+1, current_product, product_less_than_k_count)\n\n    product_less_than_k_count = []\n    helper(arr, k, 0, 1, product_less_than_k_count)\n    return len(product_less_than_k_count)\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    if k < arr[n-1] or k < 0:\n        return 0\n    dp = [[0 for i in range(k + 1)] for j in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(k + 1):\n            if arr[i] <= j:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j - arr[i]]\n\n    return dp[n-1][k]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    # Write your code here\n    if len(arr) == 0:\n        return 0\n    dp = [0]*(k+1)\n    dp[0] = 1\n    for i in arr:\n        for j in range(k+1):\n            dp[j] = dp[j] + dp[j-i]\n    return dp[-1]\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i] += dp[j]\n                if arr[i] * arr[j] <= k:\n                    dp[i] -= dp[j]\n    return dp[n-1]\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    if len(arr) == 1:\n        return 1\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += no_of_subsequences(arr[i+1:], k)\n    count += no_of_subsequences(arr[1:], k)\n    return count\n\ndef no_of_subsequences_recursive(arr, k, prod_sum):\n    if prod_sum == k:\n        return 1\n    if prod_sum < k:\n        return 0\n    return no_of_subsequences_recursive(arr[1:], k, prod_sum-arr[0]) + no_of_subsequences_recursive(arr[1:], k, prod_sum)\n\ndef no_of_subsequences_dp(arr, k):\n    dp = [[0 for x in range(k+1)] for y in range(len(arr))]\n    for i in range(len(arr)):\n        for j in range(k+1):\n            if arr[i] <= j:\n                if i == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[len(arr)-1][k]", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nimport itertools\n\ndef no_of_subsequences(array, k):\n    subsequences = set()\n    for i in range(len(array)):\n        subsequences.add(tuple(sorted(itertools.combinations(array[i:], 2))))\n\n    print(subsequences)\n\n    count = 0\n    for subseq in subsequences:\n        s = 1\n        for i in subseq:\n            s *= i\n        if s < k:\n            count += 1\n\n    return count\n\n\narray = [2, 3, 4, 6]\nk = 12\n\nno_of_subsequences(array, k)", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\nfrom itertools import combinations\n\n\ndef no_of_subsequences(arr, k):\n    prod = 1\n    count = 0\n\n    for i in range(len(arr)):\n        prod *= arr[i]\n\n        if prod < k:\n            count += len(list(combinations(arr, i)))\n\n    return count\n\n", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\n# my code\ndef no_of_subsequences(arr, k):\n    \"\"\"\n    Parameters:\n        arr: (int) non negative array\n        k: (int) product\n\n    Returns:\n        (int) number of subsequences\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i]*arr[j]\n            if prod < k:\n                count += 1\n    return count\n\n# expected output\narr = [1,2,3,4]\nk = 10", "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(nums, k):\n    if k == 0:\n        return 1\n\n    # base case:\n    # number of subsequences when product is zero = 1\n    if k < 0:\n        return 0\n\n    dp = [0] * (len(nums) + 1)\n\n    # initialize dp[0] = 1\n    dp[0] = 1\n\n    # for each element in array\n    for i in range(1, len(nums) + 1):\n        # traverse dp from 0 to len(nums) and add product of elements to k\n        for j in range(0, i):\n            dp[i] += dp[j] * nums[i-1]\n\n    return dp[len(nums)]\n\n"]]